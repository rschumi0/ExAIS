import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot64125 = tf.keras.layers.Input(shape=([2, 3]))
in1Dot64125 = tf.keras.layers.Input(shape=([2, 3]))
in0Min67123 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Min67123 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0ReL40004 = tf.keras.layers.Input(shape=([1, 2, 1]))

Dot64125 = keras.layers.Dot(axes=(1, 1), name = 'Dot64125', )([in0Dot64125,in1Dot64125])
Min67123 = keras.layers.Minimum(name = 'Min67123', )([in0Min67123,in1Min67123])
Res61482 = keras.layers.Reshape((2, 2), name = 'Res61482', )(Min67123)
Zer33975 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer33975', )(Res61482)
Dot91672 = keras.layers.Dot(axes=(1, 1), name = 'Dot91672', )([Dot64125,Zer33975])
Res8331 = keras.layers.Reshape((3, 2, 1), name = 'Res8331', )(Dot91672)
Zer82974 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer82974', )(Res8331)
ReL40004 = keras.layers.ReLU(max_value=6.844872035522097, negative_slope=4.0103809894608435, threshold=7.412012730406495, name = 'ReL40004', input_shape=(1, 2, 1))(in0ReL40004)
Res81673 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res81673', )(ReL40004)
Cro38526 = keras.layers.Cropping3D(cropping=((0, 0), (1, 0), (0, 0)), name = 'Cro38526', )(Res81673)
Res10964 = keras.layers.Reshape((1, 1, 1), name = 'Res10964', )(Cro38526)
Zer28156 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer28156', )(Res10964)
Max92649 = keras.layers.MaxPool2D(pool_size=(2, 1), strides=(1, 1), padding='valid', name = 'Max92649', )(Zer28156)
Zer34000 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer34000', )(Max92649)
Min99713 = keras.layers.Minimum(name = 'Min99713', )([Zer82974,Zer34000])
model = tf.keras.models.Model(inputs=[in0Dot64125,in1Dot64125,in0Min67123,in1Min67123,in0ReL40004], outputs=Min99713)
in0Dot64125 = tf.constant([[[0.9195, 0.14, 0.3901], [0.3962, 0.4851, 0.9644]]])
in1Dot64125 = tf.constant([[[0.8857, 0.0362, 0.7821], [0.1767, 0.2568, 0.1179]]])
in0Min67123 = tf.constant([[[[0.2331, 0.5285]], [[0.313, 0.3738]]]])
in1Min67123 = tf.constant([[[[0.8421, 0.6834]], [[0.8164, 0.6332]]]])
in0ReL40004 = tf.constant([[[[0.3242], [0.2504]]]])
print (np.array2string(model.predict([in0Dot64125,in1Dot64125,in0Min67123,in1Min67123,in0ReL40004],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min99713.png')

LDot64125 = dot_layer([[[0.9195, 0.14, 0.3901], [0.3962, 0.4851, 0.9644]]], [[[0.8857, 0.0362, 0.7821], [0.1767, 0.2568, 0.1179]]], 1, 1, Dot64125), 
LMin67123 = minimum_layer([[[[[0.2331, 0.5285]], [[0.313, 0.3738]]]], [[[[0.8421, 0.6834]], [[0.8164, 0.6332]]]]], Min67123), 
LRes61482 = reshape_layer(Min67123, [2, 2], Res61482), 
LZer33975 = zero_padding1D_layer(Res61482, 1, 0, Zer33975), 
LDot91672 = dot_layer(Dot64125,Zer33975, 1, 1, Dot91672), 
LRes8331 = reshape_layer(Dot91672, [3, 2, 1], Res8331), 
LZer82974 = zero_padding2D_layer(Res8331, 0, 0, 2, 0, Zer82974), 
LReL40004 = relu_layer([[[[0.3242], [0.2504]]]], 6.844872035522097, 4.0103809894608435, 7.412012730406495, ReL40004), 
LRes81673 = reshape_layer(ReL40004, [1, 2, 1, 1], Res81673), 
LCro38526 = cropping3D_layer(Res81673, 0, 0, 1, 0, 0, 0, Cro38526), 
LRes10964 = reshape_layer(Cro38526, [1, 1, 1], Res10964), 
LZer28156 = zero_padding2D_layer(Res10964, 1, 1, 1, 1, Zer28156), 
LMax92649 = max_pool2D_layer(Zer28156, 2, 1, 1, 1, false, Max92649), 
LZer34000 = zero_padding2D_layer(Max92649, 1, 0, 1, 0, Zer34000), 
LMin99713 = minimum_layer([Zer82974,Zer34000], Min99713), 
exec_layers([LDot64125,LMin67123,LRes61482,LZer33975,LDot91672,LRes8331,LZer82974,LReL40004,LRes81673,LCro38526,LRes10964,LZer28156,LMax92649,LZer34000,LMin99713],["Dot64125","Min67123","Res61482","Zer33975","Dot91672","Res8331","Zer82974","ReL40004","Res81673","Cro38526","Res10964","Zer28156","Max92649","Zer34000","Min99713"],Min99713,"Min99713")

Actual (Unparsed): [[[[0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000]]]]

Expected (Unparsed): [[[[0],[0],[0],[0]],[[0],[0],[0],[0]],[[0],[0],[0],[0]]]]

Actual:   [[[[0], [0], [0], [0]], [[0], [0], [0], [0]], [[0], [0], [0], [0]]]]

Expected: [[[[0], [0], [0], [0]], [[0], [0], [0], [0]], [[0], [0], [0], [0]]]]