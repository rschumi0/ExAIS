import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min80882 = tf.keras.layers.Input(shape=([1, 1]))
in1Min80882 = tf.keras.layers.Input(shape=([1, 1]))
in0Con38458 = tf.keras.layers.Input(shape=([1, 1]))
in0Mul34228 = tf.keras.layers.Input(shape=([1, 2]))
in1Mul34228 = tf.keras.layers.Input(shape=([1, 2]))
in0Con46655 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in0Cro3465 = tf.keras.layers.Input(shape=([1, 2, 2, 3]))
in0Sub75024 = tf.keras.layers.Input(shape=([3]))
in1Sub75024 = tf.keras.layers.Input(shape=([3]))
in0Con15247 = tf.keras.layers.Input(shape=([3]))
in0Con41419 = tf.keras.layers.Input(shape=([6, 5, 1]))
in0Sub7899 = tf.keras.layers.Input(shape=([2, 3, 2]))
in1Sub7899 = tf.keras.layers.Input(shape=([2, 3, 2]))

Min80882 = keras.layers.Minimum(name = 'Min80882', )([in0Min80882,in1Min80882])
Con38458 = keras.layers.Concatenate(axis=2, name = 'Con38458', )([Min80882,in0Con38458])
Mul34228 = keras.layers.Multiply(name = 'Mul34228', )([in0Mul34228,in1Mul34228])
Ave95989 = keras.layers.Average(name = 'Ave95989', )([Con38458,Mul34228])
Res34663 = keras.layers.Reshape((1, 2, 1), name = 'Res34663', )(Ave95989)
Res20860 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res20860', )(Res34663)
Con46655 = keras.layers.Concatenate(axis=4, name = 'Con46655', )([Res20860,in0Con46655])
Cro3465 = keras.layers.Cropping3D(cropping=((0, 0), (1, 0), (1, 0)), name = 'Cro3465', )(in0Cro3465)
Zer33833 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (0, 0)), name = 'Zer33833', )(Cro3465)
Mul31077 = keras.layers.Multiply(name = 'Mul31077', )([Con46655,Zer33833])
Res61491 = keras.layers.Reshape((1, 2, 3), name = 'Res61491', )(Mul31077)
Res72716 = keras.layers.Reshape((1, 6), name = 'Res72716', )(Res61491)
Fla42574 = keras.layers.Flatten(name = 'Fla42574', )(Res72716)
Sub75024 = keras.layers.Subtract(name = 'Sub75024', )([in0Sub75024,in1Sub75024])
Con15247 = keras.layers.Concatenate(axis=1, name = 'Con15247', )([Sub75024,in0Con15247])
Mul78517 = keras.layers.Multiply(name = 'Mul78517', )([Fla42574,Con15247])
Res70418 = keras.layers.Reshape((6, 1), name = 'Res70418', )(Mul78517)
Res3298 = keras.layers.Reshape((6, 1, 1), name = 'Res3298', )(Res70418)
Zer3037 = keras.layers.ZeroPadding2D(padding=((0, 0), (4, 0)), name = 'Zer3037', )(Res3298)
Con41419 = keras.layers.Concatenate(axis=3, name = 'Con41419', )([Zer3037,in0Con41419])
Sub7899 = keras.layers.Subtract(name = 'Sub7899', )([in0Sub7899,in1Sub7899])
Thr2953 = keras.layers.ThresholdedReLU(theta=7.389005405886535, name = 'Thr2953', )(Sub7899)
Zer45265 = keras.layers.ZeroPadding2D(padding=((4, 0), (2, 0)), name = 'Zer45265', )(Thr2953)
Max51196 = keras.layers.Maximum(name = 'Max51196', )([Con41419,Zer45265])
model = tf.keras.models.Model(inputs=[in0Min80882,in1Min80882,in0Con38458,in0Mul34228,in1Mul34228,in0Con46655,in0Cro3465,in0Sub75024,in1Sub75024,in0Con15247,in0Con41419,in0Sub7899,in1Sub7899], outputs=Max51196)
in0Min80882 = tf.constant([[[0.2665]]])
in1Min80882 = tf.constant([[[0.423]]])
in0Con38458 = tf.constant([[[0.3668]]])
in0Mul34228 = tf.constant([[[0.3856, 0.922]]])
in1Mul34228 = tf.constant([[[0.9391, 0.7558]]])
in0Con46655 = tf.constant([[[[[0.4872, 0.2433]], [[0.5875, 0.7472]]]]])
in0Cro3465 = tf.constant([[[[[1.7807, 1.807, 1.9756], [1.6028, 1.6702, 1.3031]], [[1.9434, 1.2983, 1.4101], [1.1376, 1.3859, 1.1177]]]]])
in0Sub75024 = tf.constant([[0.2087, 0.4575, 0.1816]])
in1Sub75024 = tf.constant([[0.3904, 0.6928, 0.5025]])
in0Con15247 = tf.constant([[0.3903, 0.8542, 0.3888]])
in0Con41419 = tf.constant([[[[0.9735], [0.3892], [0.3469], [0.1795], [0.1222]], [[0.4031], [0.1795], [0.2586], [0.4499], [0.0339]], [[0.6693], [0.7487], [0.1525], [0.4296], [0.6398]], [[0.9223], [0.134], [0.5646], [0.3068], [0.619]], [[0.3091], [0.9185], [0.5618], [0.2822], [0.6537]], [[0.514], [0.7696], [0.0618], [0.954], [0.0591]]]])
in0Sub7899 = tf.constant([[[[0.6018, 0.2142], [0.5142, 0.8728], [0.228, 0.6434]], [[0.378, 0.3336], [0.1744, 0.7692], [0.4804, 0.0892]]]])
in1Sub7899 = tf.constant([[[[0.2557, 0.8104], [0.373, 0.1185], [0.837, 0.1878]], [[0.6894, 0.4675], [0.1091, 0.5701], [0.0088, 0.3656]]]])
print (np.array2string(model.predict([in0Min80882,in1Min80882,in0Con38458,in0Mul34228,in1Mul34228,in0Con46655,in0Cro3465,in0Sub75024,in1Sub75024,in0Con15247,in0Con41419,in0Sub7899,in1Sub7899],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max51196.png')

LMin80882 = minimum_layer([[[[0.2665]]], [[[0.423]]]], Min80882), 
LCon38458 = concatenate_layer([Min80882,[[[0.3668]]]], 2, Con38458), 
LMul34228 = multiply_layer([[[[0.3856, 0.922]]], [[[0.9391, 0.7558]]]], Mul34228), 
LAve95989 = average_layer([Con38458,Mul34228], Ave95989), 
LRes34663 = reshape_layer(Ave95989, [1, 2, 1], Res34663), 
LRes20860 = reshape_layer(Res34663, [1, 2, 1, 1], Res20860), 
LCon46655 = concatenate_layer([Res20860,[[[[[0.4872, 0.2433]], [[0.5875, 0.7472]]]]]], 4, Con46655), 
LCro3465 = cropping3D_layer([[[[[1.7807, 1.807, 1.9756], [1.6028, 1.6702, 1.3031]], [[1.9434, 1.2983, 1.4101], [1.1376, 1.3859, 1.1177]]]]], 0, 0, 1, 0, 1, 0, Cro3465), 
LZer33833 = zero_padding3D_layer(Cro3465, 0, 0, 1, 0, 0, 0, Zer33833), 
LMul31077 = multiply_layer([Con46655,Zer33833], Mul31077), 
LRes61491 = reshape_layer(Mul31077, [1, 2, 3], Res61491), 
LRes72716 = reshape_layer(Res61491, [1, 6], Res72716), 
LFla42574 = flatten_layer(Res72716, Fla42574), 
LSub75024 = subtract_layer([[0.2087, 0.4575, 0.1816]], [[0.3904, 0.6928, 0.5025]], Sub75024), 
LCon15247 = concatenate_layer([Sub75024,[[0.3903, 0.8542, 0.3888]]], 1, Con15247), 
LMul78517 = multiply_layer([Fla42574,Con15247], Mul78517), 
LRes70418 = reshape_layer(Mul78517, [6, 1], Res70418), 
LRes3298 = reshape_layer(Res70418, [6, 1, 1], Res3298), 
LZer3037 = zero_padding2D_layer(Res3298, 0, 0, 4, 0, Zer3037), 
LCon41419 = concatenate_layer([Zer3037,[[[[0.9735], [0.3892], [0.3469], [0.1795], [0.1222]], [[0.4031], [0.1795], [0.2586], [0.4499], [0.0339]], [[0.6693], [0.7487], [0.1525], [0.4296], [0.6398]], [[0.9223], [0.134], [0.5646], [0.3068], [0.619]], [[0.3091], [0.9185], [0.5618], [0.2822], [0.6537]], [[0.514], [0.7696], [0.0618], [0.954], [0.0591]]]]], 3, Con41419), 
LSub7899 = subtract_layer([[[[0.6018, 0.2142], [0.5142, 0.8728], [0.228, 0.6434]], [[0.378, 0.3336], [0.1744, 0.7692], [0.4804, 0.0892]]]], [[[[0.2557, 0.8104], [0.373, 0.1185], [0.837, 0.1878]], [[0.6894, 0.4675], [0.1091, 0.5701], [0.0088, 0.3656]]]], Sub7899), 
LThr2953 = thresholded_relu_layer(Sub7899, 7.389005405886535, Thr2953), 
LZer45265 = zero_padding2D_layer(Thr2953, 4, 0, 2, 0, Zer45265), 
LMax51196 = maximum_layer([Con41419,Zer45265], Max51196), 
exec_layers([LMin80882,LCon38458,LMul34228,LAve95989,LRes34663,LRes20860,LCon46655,LCro3465,LZer33833,LMul31077,LRes61491,LRes72716,LFla42574,LSub75024,LCon15247,LMul78517,LRes70418,LRes3298,LZer3037,LCon41419,LSub7899,LThr2953,LZer45265,LMax51196],["Min80882","Con38458","Mul34228","Ave95989","Res34663","Res20860","Con46655","Cro3465","Zer33833","Mul31077","Res61491","Res72716","Fla42574","Sub75024","Con15247","Mul78517","Res70418","Res3298","Zer3037","Con41419","Sub7899","Thr2953","Zer45265","Max51196"],Max51196,"Max51196")

Actual (Unparsed): [[[[0.0000000, 0.9735000], [0.0000000, 0.3892000], [0.0000000, 0.3469000], [0.0000000, 0.1795000], [0.0000000, 0.1222000]], [[0.0000000, 0.4031000], [0.0000000, 0.1795000], [0.0000000, 0.2586000], [0.0000000, 0.4499000], [0.0000000, 0.0339000]], [[0.0000000, 0.6693000], [0.0000000, 0.7487000], [0.0000000, 0.1525000], [0.0000000, 0.4296000], [0.0000000, 0.6398000]], [[0.0000000, 0.9223000], [0.0000000, 0.1340000], [0.0000000, 0.5646000], [0.0000000, 0.3068000], [0.2361326, 0.6190000]], [[0.0000000, 0.3091000], [0.0000000, 0.9185000], [0.0000000, 0.5618000], [0.0000000, 0.2822000], [0.6955035, 0.6537000]], [[0.0000000, 0.5140000], [0.0000000, 0.7696000], [-0.0000000, 0.0618000], [0.0000000, 0.9540000], [0.3247045, 0.0591000]]]]

Expected (Unparsed): [[[[0,0.9735],[0,0.3892],[0,0.3469],[0,0.1795],[-0.0,0.1222]],[[0,0.4031],[0,0.1795],[0,0.2586],[0,0.4499],[-0.0,0.0339]],[[0,0.6693],[0,0.7487],[0,0.1525],[0,0.4296],[-0.0,0.6398]],[[0,0.9223],[0,0.134],[0,0.5646],[0,0.3068],[0.23613257522966394,0.619]],[[0,0.3091],[0,0.9185],[0,0.5618],[0,0.2822],[0.69550352075,0.6537]],[[0,0.514],[0,0.7696],[0,0.0618],[0,0.954],[0.32470454707199997,0.0591]]]]

Actual:   [[[[0, 0.9735], [0, 0.3892], [0, 0.3469], [0, 0.1795], [0, 0.1222]], [[0, 0.4031], [0, 0.1795], [0, 0.2586], [0, 0.4499], [0, 0.0339]], [[0, 0.6693], [0, 0.7487], [0, 0.1525], [0, 0.4296], [0, 0.6398]], [[0, 0.9223], [0, 0.134], [0, 0.5646], [0, 0.3068], [0.2362, 0.619]], [[0, 0.3091], [0, 0.9185], [0, 0.5618], [0, 0.2822], [0.6956, 0.6537]], [[0, 0.514], [0, 0.7696], [-0, 0.0618], [0, 0.954], [0.3248, 0.0591]]]]

Expected: [[[[0, 0.9735], [0, 0.3892], [0, 0.3469], [0, 0.1795], [-0, 0.1222]], [[0, 0.4031], [0, 0.1795], [0, 0.2586], [0, 0.4499], [-0, 0.0339]], [[0, 0.6693], [0, 0.7487], [0, 0.1525], [0, 0.4296], [-0, 0.6398]], [[0, 0.9223], [0, 0.134], [0, 0.5646], [0, 0.3068], [0.2362, 0.619]], [[0, 0.3091], [0, 0.9185], [0, 0.5618], [0, 0.2822], [0.6956, 0.6537]], [[0, 0.514], [0, 0.7696], [0, 0.0618], [0, 0.954], [0.3248, 0.0591]]]]