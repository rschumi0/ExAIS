import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave382 = tf.keras.layers.Input(shape=([2, 1]))
in1Ave382 = tf.keras.layers.Input(shape=([2, 1]))
in0Con18256 = tf.keras.layers.Input(shape=([2, 2]))
in0ReL29376 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in0Con4417 = tf.keras.layers.Input(shape=([2, 11, 2]))
in0Lay33275 = tf.keras.layers.Input(shape=([1, 4, 3]))

Ave382 = keras.layers.Average(name = 'Ave382', )([in0Ave382,in1Ave382])
Mas81702 = keras.layers.Masking(mask_value=1, name = 'Mas81702', )(Ave382)
Sim61959 = keras.layers.SimpleRNN(2,name = 'Sim61959', )(Mas81702)
Res14459 = keras.layers.Reshape((2, 1), name = 'Res14459', )(Sim61959)
Con18256 = keras.layers.Concatenate(axis=2, name = 'Con18256', )([Res14459,in0Con18256])
ReL29376 = keras.layers.ReLU(max_value=3.953080018246233, negative_slope=1.419125416711941, threshold=9.526664166873847, name = 'ReL29376', input_shape=(2, 1, 1, 1))(in0ReL29376)
Res13321 = keras.layers.Reshape((2, 1, 1), name = 'Res13321', )(ReL29376)
Zer40684 = keras.layers.ZeroPadding2D(padding=((0, 0), (10, 0)), name = 'Zer40684', )(Res13321)
Con4417 = keras.layers.Concatenate(axis=3, name = 'Con4417', )([Zer40684,in0Con4417])
Lay33275 = keras.layers.LayerNormalization(axis=2, epsilon=1.614526430264722, name = 'Lay33275', )(in0Lay33275)
Zer13544 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer13544', )(Lay33275)
Max17913 = keras.layers.MaxPool2D(pool_size=(2, 1), name = 'Max17913', )(Zer13544)
Zer83893 = keras.layers.ZeroPadding2D(padding=((1, 0), (5, 0)), name = 'Zer83893', )(Max17913)
Mul2321 = keras.layers.Multiply(name = 'Mul2321', )([Con4417,Zer83893])
Res12364 = keras.layers.Reshape((2, 33), name = 'Res12364', )(Mul2321)
Sep6314 = keras.layers.SeparableConv1D(3, (1),strides=(1), padding='same', name = 'Sep6314', )(Res12364)
Max65514 = keras.layers.Maximum(name = 'Max65514', )([Con18256,Sep6314])
model = tf.keras.models.Model(inputs=[in0Ave382,in1Ave382,in0Con18256,in0ReL29376,in0Con4417,in0Lay33275], outputs=Max65514)
w = model.get_layer('Sim61959').get_weights() 
w[0] = np.array([[3, 6]])
w[1] = np.array([[6, 6], [4, 9]])
w[2] = np.array([7, 8])
model.get_layer('Sim61959').set_weights(w) 
w = model.get_layer('Sep6314').get_weights() 
w[0] = np.array([[[0.4657], [0.5776], [0.9985], [0.7349], [0.1463], [0.2295], [0.6388], [0.3725], [0.7205], [0.9759], [0.4365], [0.4775], [0.5831], [0.3092], [0.0046], [0.825], [0.2137], [0.1819], [0.6213], [0.3378], [0.5417], [0.6413], [0.7779], [0.4469], [0.0865], [0.4249], [0.3917], [0.1375], [0.8877], [0.4292], [0.3915], [0.9021], [0.6367]]])
w[1] = np.array([[[0.4659, 0.1567, 0.2825], [0.9056, 0.1027, 0.7676], [0.9092, 0.9508, 0.0275], [0.0372, 0.3687, 0.219], [0.7512, 0.9238, 0.8237], [0.2248, 0.4336, 0.0467], [0.7351, 0.1022, 0.2252], [0.1241, 0.3127, 0.1161], [0.0592, 0.4696, 0.7417], [0.2177, 0.7527, 0.9097], [0.7125, 0.4479, 0.1824], [0.2452, 0.9535, 0.6386], [0.9898, 0.1698, 0.921], [0.0433, 0.7397, 0.3792], [0.5361, 0.2424, 0.7073], [0.4571, 0.8739, 0.9087], [0.5007, 0.0084, 0.0095], [0.7953, 0.5402, 0.4259], [0.8033, 0.6123, 0.0093], [0.6199, 0.2693, 0.2966], [0.2699, 0.0224, 0.3116], [0.5469, 0.8889, 0.1814], [0.0355, 0.3958, 0.3648], [0.3051, 0.5476, 0.0198], [0.3603, 0.184, 0.1393], [0.9531, 0.7492, 0.0238], [0.0195, 0.3609, 0.0682], [0.8532, 0.3081, 0.0554], [0.0255, 0.3384, 0.8294], [0.4901, 0.5664, 0.031], [0.3591, 0.0581, 0.62], [0.3031, 0.3653, 0.6359], [0.0564, 0.4837, 0.9606]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep6314').set_weights(w) 
in0Ave382 = tf.constant([[[0.9373], [0.61]]])
in1Ave382 = tf.constant([[[0.913], [0.6694]]])
in0Con18256 = tf.constant([[[0.2847, 0.2458], [0.7871, 0.741]]])
in0ReL29376 = tf.constant([[[[[0.8964]]], [[[0.5495]]]]])
in0Con4417 = tf.constant([[[[0.4676, 0.4269], [0.4175, 0.6096], [0.2108, 0.0938], [0.5563, 0.4475], [0.3732, 0.9903], [0.1685, 0.532], [0.2324, 0.9764], [0.3589, 0.081], [0.3307, 0.217], [0.6594, 0.1431], [0.1892, 0.6021]], [[0.5885, 0.8762], [0.3987, 0.3257], [0.8939, 0.8251], [0.244, 0.9684], [0.3535, 0.9034], [0.7747, 0.7775], [0.5245, 0.5235], [0.7599, 0.2258], [0.6292, 0.5974], [0.2856, 0.3431], [0.8443, 0.9334]]]])
in0Lay33275 = tf.constant([[[[1.2416, 1.0679, 1.6463], [1.862, 1.3884, 1.0347], [1.9148, 1.2242, 1.0306], [1.9946, 1.5122, 1.6776]]]])
print (np.array2string(model.predict([in0Ave382,in1Ave382,in0Con18256,in0ReL29376,in0Con4417,in0Lay33275],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max65514.png')

LAve382 = average_layer([[[[0.9373], [0.61]]], [[[0.913], [0.6694]]]], Ave382), 
LMas81702 = masking_layer(Ave382, 1, Mas81702), 
LSim61959 = simple_rnn_layer(Mas81702,[[3, 6]],[[6, 6], [4, 9]],[7, 8], Sim61959), 
LRes14459 = reshape_layer(Sim61959, [2, 1], Res14459), 
LCon18256 = concatenate_layer([Res14459,[[[0.2847, 0.2458], [0.7871, 0.741]]]], 2, Con18256), 
LReL29376 = relu_layer([[[[[0.8964]]], [[[0.5495]]]]], 3.953080018246233, 1.419125416711941, 9.526664166873847, ReL29376), 
LRes13321 = reshape_layer(ReL29376, [2, 1, 1], Res13321), 
LZer40684 = zero_padding2D_layer(Res13321, 0, 0, 10, 0, Zer40684), 
LCon4417 = concatenate_layer([Zer40684,[[[[0.4676, 0.4269], [0.4175, 0.6096], [0.2108, 0.0938], [0.5563, 0.4475], [0.3732, 0.9903], [0.1685, 0.532], [0.2324, 0.9764], [0.3589, 0.081], [0.3307, 0.217], [0.6594, 0.1431], [0.1892, 0.6021]], [[0.5885, 0.8762], [0.3987, 0.3257], [0.8939, 0.8251], [0.244, 0.9684], [0.3535, 0.9034], [0.7747, 0.7775], [0.5245, 0.5235], [0.7599, 0.2258], [0.6292, 0.5974], [0.2856, 0.3431], [0.8443, 0.9334]]]]], 3, Con4417), 
LLay33275 = layer_normalization_layer([[[[1.2416, 1.0679, 1.6463], [1.862, 1.3884, 1.0347], [1.9148, 1.2242, 1.0306], [1.9946, 1.5122, 1.6776]]]], 2, 1.614526430264722, Lay33275), 
LZer13544 = zero_padding2D_layer(Lay33275, 1, 1, 1, 1, Zer13544), 
LMax17913 = max_pool2D_layer(Zer13544, 2, 1, Max17913), 
LZer83893 = zero_padding2D_layer(Max17913, 1, 0, 5, 0, Zer83893), 
LMul2321 = multiply_layer([Con4417,Zer83893], Mul2321), 
LRes12364 = reshape_layer(Mul2321, [2, 33], Res12364), 
LSep6314 = separable_conv1D_layer(Res12364, 1,[[[[0.4657], [0.5776], [0.9985], [0.7349], [0.1463], [0.2295], [0.6388], [0.3725], [0.7205], [0.9759], [0.4365], [0.4775], [0.5831], [0.3092], [0.0046], [0.825], [0.2137], [0.1819], [0.6213], [0.3378], [0.5417], [0.6413], [0.7779], [0.4469], [0.0865], [0.4249], [0.3917], [0.1375], [0.8877], [0.4292], [0.3915], [0.9021], [0.6367]]],[[[0.4659, 0.1567, 0.2825], [0.9056, 0.1027, 0.7676], [0.9092, 0.9508, 0.0275], [0.0372, 0.3687, 0.219], [0.7512, 0.9238, 0.8237], [0.2248, 0.4336, 0.0467], [0.7351, 0.1022, 0.2252], [0.1241, 0.3127, 0.1161], [0.0592, 0.4696, 0.7417], [0.2177, 0.7527, 0.9097], [0.7125, 0.4479, 0.1824], [0.2452, 0.9535, 0.6386], [0.9898, 0.1698, 0.921], [0.0433, 0.7397, 0.3792], [0.5361, 0.2424, 0.7073], [0.4571, 0.8739, 0.9087], [0.5007, 0.0084, 0.0095], [0.7953, 0.5402, 0.4259], [0.8033, 0.6123, 0.0093], [0.6199, 0.2693, 0.2966], [0.2699, 0.0224, 0.3116], [0.5469, 0.8889, 0.1814], [0.0355, 0.3958, 0.3648], [0.3051, 0.5476, 0.0198], [0.3603, 0.184, 0.1393], [0.9531, 0.7492, 0.0238], [0.0195, 0.3609, 0.0682], [0.8532, 0.3081, 0.0554], [0.0255, 0.3384, 0.8294], [0.4901, 0.5664, 0.031], [0.3591, 0.0581, 0.62], [0.3031, 0.3653, 0.6359], [0.0564, 0.4837, 0.9606]]]],[0, 0, 0], 1, true, Sep6314), 
LMax65514 = maximum_layer([Con18256,Sep6314], Max65514), 
exec_layers([LAve382,LMas81702,LSim61959,LRes14459,LCon18256,LReL29376,LRes13321,LZer40684,LCon4417,LLay33275,LZer13544,LMax17913,LZer83893,LMul2321,LRes12364,LSep6314,LMax65514],["Ave382","Mas81702","Sim61959","Res14459","Con18256","ReL29376","Res13321","Zer40684","Con4417","Lay33275","Zer13544","Max17913","Zer83893","Mul2321","Res12364","Sep6314","Max65514"],Max65514,"Max65514")

Actual (Unparsed): [[[1.0000000, 0.2847000, 0.2458000], [1.0000000, 0.7871000, 0.7410000]]]

Expected (Unparsed): [[[0.9999999999999999,0.2847,0.2458],[1.0,0.7871,0.741]]]

Actual:   [[[1, 0.2847, 0.2458], [1, 0.7871, 0.741]]]

Expected: [[[1, 0.2847, 0.2458], [1, 0.7871, 0.741]]]