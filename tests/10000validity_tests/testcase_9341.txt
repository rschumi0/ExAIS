import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Bat9951 = tf.keras.layers.Input(shape=([1, 4, 2]))
in0Add74991 = tf.keras.layers.Input(shape=([2, 1]))
in1Add74991 = tf.keras.layers.Input(shape=([2, 1]))
in0Con84902 = tf.keras.layers.Input(shape=([2, 15]))
in0Ave13145 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in1Ave13145 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))

Bat9951 = keras.layers.BatchNormalization(axis=2, epsilon=0.6787569834390562,  name = 'Bat9951', )(in0Bat9951)
Up_3223 = keras.layers.UpSampling2D(size=(1, 2), name = 'Up_3223', )(Bat9951)
Res76964 = keras.layers.Reshape((1, 16), name = 'Res76964', )(Up_3223)
Zer97547 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer97547', )(Res76964)
Add74991 = keras.layers.Add(name = 'Add74991', )([in0Add74991,in1Add74991])
Con84902 = keras.layers.Concatenate(axis=2, name = 'Con84902', )([Add74991,in0Con84902])
Mul7864 = keras.layers.Multiply(name = 'Mul7864', )([Zer97547,Con84902])
Res30611 = keras.layers.Reshape((2, 16, 1), name = 'Res30611', )(Mul7864)
Res55832 = keras.layers.Reshape((2, 16, 1, 1), name = 'Res55832', )(Res30611)
Zer7889 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer7889', )(Res55832)
Ave13145 = keras.layers.Average(name = 'Ave13145', )([in0Ave13145,in1Ave13145])
Zer82269 = keras.layers.ZeroPadding3D(padding=((1, 0), (15, 0), (1, 0)), name = 'Zer82269', )(Ave13145)
Sub91963 = keras.layers.Subtract(name = 'Sub91963', )([Zer7889,Zer82269])
model = tf.keras.models.Model(inputs=[in0Bat9951,in0Add74991,in1Add74991,in0Con84902,in0Ave13145,in1Ave13145], outputs=Sub91963)
w = model.get_layer('Bat9951').get_weights() 
w[0] = np.array([0.3641, 0.7981, 0.6699, 0.0828])
w[1] = np.array([0.7936, 0.4603, 0.4828, 0.5004])
w[2] = np.array([0.5837, 0.3715, 0.6525, 0.3754])
w[3] = np.array([0.7678, 0.0091, 0.0176, 0.8083])
model.get_layer('Bat9951').set_weights(w) 
in0Bat9951 = tf.constant([[[[1.9557, 1.724], [1.937, 1.933], [1.6241, 1.5354], [1.8471, 1.6057]]]])
in0Add74991 = tf.constant([[[0.9263], [0.0343]]])
in1Add74991 = tf.constant([[[0.0275], [0.7257]]])
in0Con84902 = tf.constant([[[0.3309, 0.1732, 0.1909, 0.5198, 0.3979, 0.2786, 0.7891, 0.7552, 0.9235, 0.6145, 0.5138, 0.6642, 0.8459, 0.2387, 0.499], [0.6031, 0.2343, 0.8277, 0.3026, 0.4312, 0.4818, 0.7703, 0.1433, 0.6916, 0.4364, 0.6665, 0.0556, 0.3081, 0.9274, 0.396]]])
in0Ave13145 = tf.constant([[[[[0.4961], [0.241]]]]])
in1Ave13145 = tf.constant([[[[[0.4331], [0.6135]]]]])
print (np.array2string(model.predict([in0Bat9951,in0Add74991,in1Add74991,in0Con84902,in0Ave13145,in1Ave13145],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub91963.png')

LBat9951 = batch_normalization_layer([[[[1.9557, 1.724], [1.937, 1.933], [1.6241, 1.5354], [1.8471, 1.6057]]]], 2, 0.6787569834390562, [0.3641, 0.7981, 0.6699, 0.0828], [0.7936, 0.4603, 0.4828, 0.5004], [0.5837, 0.3715, 0.6525, 0.3754], [0.7678, 0.0091, 0.0176, 0.8083], Bat9951), 
LUp_3223 = up_sampling2D_layer(Bat9951, 1, 2, Up_3223), 
LRes76964 = reshape_layer(Up_3223, [1, 16], Res76964), 
LZer97547 = zero_padding1D_layer(Res76964, 1, 0, Zer97547), 
LAdd74991 = add_layer([[[[0.9263], [0.0343]]], [[[0.0275], [0.7257]]]], Add74991), 
LCon84902 = concatenate_layer([Add74991,[[[0.3309, 0.1732, 0.1909, 0.5198, 0.3979, 0.2786, 0.7891, 0.7552, 0.9235, 0.6145, 0.5138, 0.6642, 0.8459, 0.2387, 0.499], [0.6031, 0.2343, 0.8277, 0.3026, 0.4312, 0.4818, 0.7703, 0.1433, 0.6916, 0.4364, 0.6665, 0.0556, 0.3081, 0.9274, 0.396]]]], 2, Con84902), 
LMul7864 = multiply_layer([Zer97547,Con84902], Mul7864), 
LRes30611 = reshape_layer(Mul7864, [2, 16, 1], Res30611), 
LRes55832 = reshape_layer(Res30611, [2, 16, 1, 1], Res55832), 
LZer7889 = zero_padding3D_layer(Res55832, 0, 0, 0, 0, 2, 0, Zer7889), 
LAve13145 = average_layer([[[[[[0.4961], [0.241]]]]], [[[[[0.4331], [0.6135]]]]]], Ave13145), 
LZer82269 = zero_padding3D_layer(Ave13145, 1, 0, 15, 0, 1, 0, Zer82269), 
LSub91963 = subtract_layer(Zer7889,Zer82269, Sub91963), 
exec_layers([LBat9951,LUp_3223,LRes76964,LZer97547,LAdd74991,LCon84902,LMul7864,LRes30611,LRes55832,LZer7889,LAve13145,LZer82269,LSub91963],["Bat9951","Up_3223","Res76964","Zer97547","Add74991","Con84902","Mul7864","Res30611","Res55832","Zer7889","Ave13145","Zer82269","Sub91963"],Sub91963,"Sub91963")

Actual (Unparsed): [[[[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.9187968]], [[0.0000000], [0.0000000], [0.6868109]], [[0.0000000], [0.0000000], [0.2832554]], [[0.0000000], [0.0000000], [0.9425856]], [[0.0000000], [0.0000000], [0.5951455]], [[0.0000000], [0.0000000], [0.8464127]], [[0.0000000], [0.0000000], [0.9475912]], [[0.0000000], [0.0000000], [1.5120400]], [[0.0000000], [0.0000000], [0.1809559]], [[0.0000000], [0.0000000], [0.8240901]], [[0.0000000], [0.0000000], [0.5510756]], [[0.0000000], [0.0000000], [0.7941816]], [[0.0000000], [0.0000000], [0.0333782]], [[0.0000000], [0.0000000], [0.1799109]], [[0.0000000], [0.0000000], [0.5567439]], [[0.0000000], [-0.4646000], [-0.1960110]]]]]

Expected (Unparsed): [[[[[0],[0],[0.0]],[[0],[0],[0.0]],[[0],[0],[0.0]],[[0],[0],[0.0]],[[0],[0],[0.0]],[[0],[0],[0.0]],[[0],[0],[0.0]],[[0],[0],[0.0]],[[0],[0],[0.0]],[[0],[0],[0.0]],[[0],[0],[0.0]],[[0],[0],[0.0]],[[0],[0],[0.0]],[[0],[0],[0.0]],[[0],[0],[0.0]],[[0],[0],[0.0]]],[[[0],[0],[0.9187967684680224]],[[0],[0],[0.6868108759071775]],[[0],[0],[0.28325537217376007]],[[0],[0],[0.942585577828504]],[[0],[0],[0.5951454625620672]],[[0],[0],[0.8464126838471565]],[[0],[0],[0.9475911561877199]],[[0],[0],[1.5120400982547881]],[[0],[0],[0.18095587201244961]],[[0],[0],[0.8240900377552698]],[[0],[0],[0.5510756632675018]],[[0],[0],[0.7941816225620117]],[[0],[0],[0.03337821922088707]],[[0],[0],[0.17991091151095287]],[[0],[0],[0.5567438939829258]],[[0],[-0.4646],[-0.19601104849614626]]]]]

Actual:   [[[[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0.9188]], [[0], [0], [0.6869]], [[0], [0], [0.2833]], [[0], [0], [0.9426]], [[0], [0], [0.5952]], [[0], [0], [0.8465]], [[0], [0], [0.9476]], [[0], [0], [1.5121]], [[0], [0], [0.181]], [[0], [0], [0.8241]], [[0], [0], [0.5511]], [[0], [0], [0.7942]], [[0], [0], [0.0334]], [[0], [0], [0.18]], [[0], [0], [0.5568]], [[0], [-0.4646], [-0.196]]]]]

Expected: [[[[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0.9188]], [[0], [0], [0.6869]], [[0], [0], [0.2833]], [[0], [0], [0.9426]], [[0], [0], [0.5952]], [[0], [0], [0.8465]], [[0], [0], [0.9476]], [[0], [0], [1.5121]], [[0], [0], [0.181]], [[0], [0], [0.8241]], [[0], [0], [0.5511]], [[0], [0], [0.7942]], [[0], [0], [0.0334]], [[0], [0], [0.18]], [[0], [0], [0.5568]], [[0], [-0.4646], [-0.196]]]]]