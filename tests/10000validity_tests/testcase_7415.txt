import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo15234 = tf.keras.layers.Input(shape=([1, 1]))
in0Max97658 = tf.keras.layers.Input(shape=([1, 1]))
in1Max97658 = tf.keras.layers.Input(shape=([1, 1]))
in0Max91270 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con31228 = tf.keras.layers.Input(shape=([1, 3, 3]))
in0Cro27394 = tf.keras.layers.Input(shape=([1, 3, 4]))

Glo15234 = keras.layers.GlobalMaxPool1D(name = 'Glo15234', )(in0Glo15234)
Res28180 = keras.layers.Reshape((1, 1), name = 'Res28180', )(Glo15234)
PRe20882 = keras.layers.PReLU(name = 'PRe20882', )(Res28180)
Max97658 = keras.layers.Maximum(name = 'Max97658', )([in0Max97658,in1Max97658])
Max91270 = keras.layers.MaxPool2D(pool_size=(1, 1), name = 'Max91270', )(in0Max91270)
Res25076 = keras.layers.Reshape((1, 1), name = 'Res25076', )(Max91270)
Dot98063 = keras.layers.Dot(axes=(2, 1), name = 'Dot98063', )([Max97658,Res25076])
Lea20 = keras.layers.LeakyReLU(alpha=4.913701319009179, name = 'Lea20', )(Dot98063)
Min40985 = keras.layers.Minimum(name = 'Min40985', )([PRe20882,Lea20])
Res71097 = keras.layers.Reshape((1, 1, 1), name = 'Res71097', )(Min40985)
Zer65884 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer65884', )(Res71097)
Con31228 = keras.layers.Concatenate(axis=3, name = 'Con31228', )([Zer65884,in0Con31228])
Cro27394 = keras.layers.Cropping2D(cropping=((0, 0), (0, 0)), name = 'Cro27394', )(in0Cro27394)
Mul83231 = keras.layers.Multiply(name = 'Mul83231', )([Con31228,Cro27394])
model = tf.keras.models.Model(inputs=[in0Glo15234,in0Max97658,in1Max97658,in0Max91270,in0Con31228,in0Cro27394], outputs=Mul83231)
w = model.get_layer('PRe20882').get_weights() 
w[0] = np.array([[0.9868]])
model.get_layer('PRe20882').set_weights(w) 
in0Glo15234 = tf.constant([[[1.9575]]])
in0Max97658 = tf.constant([[[0.6252]]])
in1Max97658 = tf.constant([[[0.4002]]])
in0Max91270 = tf.constant([[[[1.0149]]]])
in0Con31228 = tf.constant([[[[0.3617, 0.6566, 0.5407], [0.945, 0.3963, 0.2034], [0.9887, 0.1614, 0.7379]]]])
in0Cro27394 = tf.constant([[[[1.1514, 1.4525, 1.3295, 1.9634], [1.2101, 1.7226, 1.4173, 1.4706], [1.2507, 1.3078, 1.1013, 1.2563]]]])
print (np.array2string(model.predict([in0Glo15234,in0Max97658,in1Max97658,in0Max91270,in0Con31228,in0Cro27394],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul83231.png')

LGlo15234 = global_max_pool1D_layer([[[1.9575]]], Glo15234), 
LRes28180 = reshape_layer(Glo15234, [1, 1], Res28180), 
LPRe20882 = prelu_layer(Res28180, [[0.9868]], PRe20882), 
LMax97658 = maximum_layer([[[[0.6252]]], [[[0.4002]]]], Max97658), 
LMax91270 = max_pool2D_layer([[[[1.0149]]]], 1, 1, Max91270), 
LRes25076 = reshape_layer(Max91270, [1, 1], Res25076), 
LDot98063 = dot_layer(Max97658,Res25076, 2, 1, Dot98063), 
LLea20 = leaky_relu_layer(Dot98063, 4.913701319009179, Lea20), 
LMin40985 = minimum_layer([PRe20882,Lea20], Min40985), 
LRes71097 = reshape_layer(Min40985, [1, 1, 1], Res71097), 
LZer65884 = zero_padding2D_layer(Res71097, 0, 0, 2, 0, Zer65884), 
LCon31228 = concatenate_layer([Zer65884,[[[[0.3617, 0.6566, 0.5407], [0.945, 0.3963, 0.2034], [0.9887, 0.1614, 0.7379]]]]], 3, Con31228), 
LCro27394 = cropping2D_layer([[[[1.1514, 1.4525, 1.3295, 1.9634], [1.2101, 1.7226, 1.4173, 1.4706], [1.2507, 1.3078, 1.1013, 1.2563]]]], 0, 0, 0, 0, Cro27394), 
LMul83231 = multiply_layer([Con31228,Cro27394], Mul83231), 
exec_layers([LGlo15234,LRes28180,LPRe20882,LMax97658,LMax91270,LRes25076,LDot98063,LLea20,LMin40985,LRes71097,LZer65884,LCon31228,LCro27394,LMul83231],["Glo15234","Res28180","PRe20882","Max97658","Max91270","Res25076","Dot98063","Lea20","Min40985","Res71097","Zer65884","Con31228","Cro27394","Mul83231"],Mul83231,"Mul83231")

Actual (Unparsed): [[[[0.0000000, 0.5253692, 0.8729497, 1.0616104], [0.0000000, 1.6278570, 0.5616760, 0.2991200], [0.7935885, 1.2930219, 0.1777498, 0.9270238]]]]

Expected (Unparsed): [[[[0.0,0.52536925,0.8729496999999999,1.0616103799999999],[0.0,1.6278569999999999,0.56167599,0.29912004],[0.7935885108359998,1.29302186,0.17774981999999998,0.92702377]]]]

Actual:   [[[[0, 0.5254, 0.873, 1.0617], [0, 1.6279, 0.5617, 0.2992], [0.7936, 1.2931, 0.1778, 0.9271]]]]

Expected: [[[[0, 0.5254, 0.873, 1.0617], [0, 1.6279, 0.5617, 0.2992], [0.7936, 1.2931, 0.1778, 0.9271]]]]