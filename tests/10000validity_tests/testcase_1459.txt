import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub66488 = tf.keras.layers.Input(shape=([3, 2, 2, 3]))
in1Sub66488 = tf.keras.layers.Input(shape=([3, 2, 2, 3]))
in0ELU77603 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con36781 = tf.keras.layers.Input(shape=([3, 1]))
in0Den47387 = tf.keras.layers.Input(shape=([3, 3]))
in0Con15199 = tf.keras.layers.Input(shape=([3, 8]))

Sub66488 = keras.layers.Subtract(name = 'Sub66488', )([in0Sub66488,in1Sub66488])
Res39471 = keras.layers.Reshape((3, 2, 6), name = 'Res39471', )(Sub66488)
Res55332 = keras.layers.Reshape((3, 12), name = 'Res55332', )(Res39471)
Lay50441 = keras.layers.LayerNormalization(axis=1, epsilon=1.0226029272468966, name = 'Lay50441', )(Res55332)
Sof45654 = keras.layers.Softmax(axis=1, name = 'Sof45654', )(Lay50441)
ELU77603 = keras.layers.ELU(alpha=-4.109592429775306, name = 'ELU77603', input_shape=(1, 1, 2))(in0ELU77603)
Res85772 = keras.layers.Reshape((1, 2), name = 'Res85772', )(ELU77603)
Con45623 = keras.layers.Conv1D(3, (1),strides=(1), padding='valid', dilation_rate=(1), name = 'Con45623', )(Res85772)
Zer27126 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer27126', )(Con45623)
Con36781 = keras.layers.Concatenate(axis=2, name = 'Con36781', )([Zer27126,in0Con36781])
Den47387 = keras.layers.Dense(4,name = 'Den47387', )(in0Den47387)
Add81403 = keras.layers.Add(name = 'Add81403', )([Con36781,Den47387])
Con15199 = keras.layers.Concatenate(axis=2, name = 'Con15199', )([Add81403,in0Con15199])
Add93909 = keras.layers.Add(name = 'Add93909', )([Sof45654,Con15199])
model = tf.keras.models.Model(inputs=[in0Sub66488,in1Sub66488,in0ELU77603,in0Con36781,in0Den47387,in0Con15199], outputs=Add93909)
w = model.get_layer('Con45623').get_weights() 
w[0] = np.array([[[0.3533, 0.6249, 0.797], [0.8427, 0.3407, 0.8632]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con45623').set_weights(w) 
w = model.get_layer('Den47387').get_weights() 
w[0] = np.array([[0.7386, 0.8459, 0.1186, 0.8449], [0.189, 0.7159, 0.498, 0.666], [0.195, 0.3539, 0.7105, 0.4086]])
w[1] = np.array([0.9775, 0.9417, 0.1368, 0.0123])
model.get_layer('Den47387').set_weights(w) 
in0Sub66488 = tf.constant([[[[[0.9144, 0.654, 0.2289], [0.0574, 0.202, 0.597]], [[0.9588, 0.459, 0.8733], [0.9245, 0.5413, 0.3362]]], [[[0.9227, 0.6253, 0.4434], [0.217, 0.0178, 0.7962]], [[0.8254, 0.6461, 0.2561], [0.6217, 0.1419, 0.4297]]], [[[0.3664, 0.699, 0.2804], [0.3898, 0.3355, 0.7595]], [[0.7351, 0.3321, 0.1416], [0.8646, 0.9672, 0.0261]]]]])
in1Sub66488 = tf.constant([[[[[0.1282, 0.5764, 0.4137], [0.0028, 0.5717, 0.4379]], [[0.5708, 0.8863, 0.1582], [0.3378, 0.2012, 0.7931]]], [[[0.4142, 0.9791, 0.9928], [0.0566, 0.617, 0.7222]], [[0.9296, 0.162, 0.346], [0.5332, 0.2295, 0.3183]]], [[[0.6328, 0.6299, 0.9466], [0.5294, 0.6165, 0.6909]], [[0.2427, 0.381, 0.7171], [0.1665, 0.8894, 0.0118]]]]])
in0ELU77603 = tf.constant([[[[0.7806, 0.8985]]]])
in0Con36781 = tf.constant([[[0.6667], [0.5587], [0.7022]]])
in0Den47387 = tf.constant([[[0.6577, 0.1001, 0.1048], [0.1536, 0.1796, 0.8827], [0.3563, 0.006, 0.3797]]])
in0Con15199 = tf.constant([[[0.5419, 0.072, 0.3299, 0.7643, 0.1257, 0.4441, 0.6439, 0.8045], [0.5013, 0.1579, 0.69, 0.7485, 0.6213, 0.2072, 0.6609, 0.1354], [0.4517, 0.2045, 0.8378, 0.0875, 0.7051, 0.4862, 0.0181, 0.8267]]])
print (np.array2string(model.predict([in0Sub66488,in1Sub66488,in0ELU77603,in0Con36781,in0Den47387,in0Con15199],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add93909.png')

LSub66488 = subtract_layer([[[[[0.9144, 0.654, 0.2289], [0.0574, 0.202, 0.597]], [[0.9588, 0.459, 0.8733], [0.9245, 0.5413, 0.3362]]], [[[0.9227, 0.6253, 0.4434], [0.217, 0.0178, 0.7962]], [[0.8254, 0.6461, 0.2561], [0.6217, 0.1419, 0.4297]]], [[[0.3664, 0.699, 0.2804], [0.3898, 0.3355, 0.7595]], [[0.7351, 0.3321, 0.1416], [0.8646, 0.9672, 0.0261]]]]], [[[[[0.1282, 0.5764, 0.4137], [0.0028, 0.5717, 0.4379]], [[0.5708, 0.8863, 0.1582], [0.3378, 0.2012, 0.7931]]], [[[0.4142, 0.9791, 0.9928], [0.0566, 0.617, 0.7222]], [[0.9296, 0.162, 0.346], [0.5332, 0.2295, 0.3183]]], [[[0.6328, 0.6299, 0.9466], [0.5294, 0.6165, 0.6909]], [[0.2427, 0.381, 0.7171], [0.1665, 0.8894, 0.0118]]]]], Sub66488), 
LRes39471 = reshape_layer(Sub66488, [3, 2, 6], Res39471), 
LRes55332 = reshape_layer(Res39471, [3, 12], Res55332), 
LLay50441 = layer_normalization_layer(Res55332, 1, 1.0226029272468966, Lay50441), 
LSof45654 = softmax_layer(Lay50441, 1, Sof45654), 
LELU77603 = elu_layer([[[[0.7806, 0.8985]]]], -4.109592429775306, ELU77603), 
LRes85772 = reshape_layer(ELU77603, [1, 2], Res85772), 
LCon45623 = conv1D_layer(Res85772, 1,[[[0.3533, 0.6249, 0.797], [0.8427, 0.3407, 0.8632]]],[0, 0, 0], 1, false, 1, Con45623), 
LZer27126 = zero_padding1D_layer(Con45623, 2, 0, Zer27126), 
LCon36781 = concatenate_layer([Zer27126,[[[0.6667], [0.5587], [0.7022]]]], 2, Con36781), 
LDen47387 = dense_layer([[[0.6577, 0.1001, 0.1048], [0.1536, 0.1796, 0.8827], [0.3563, 0.006, 0.3797]]], [[0.7386, 0.8459, 0.1186, 0.8449], [0.189, 0.7159, 0.498, 0.666], [0.195, 0.3539, 0.7105, 0.4086]],[0.9775, 0.9417, 0.1368, 0.0123], Den47387), 
LAdd81403 = add_layer([Con36781,Den47387], Add81403), 
LCon15199 = concatenate_layer([Add81403,[[[0.5419, 0.072, 0.3299, 0.7643, 0.1257, 0.4441, 0.6439, 0.8045], [0.5013, 0.1579, 0.69, 0.7485, 0.6213, 0.2072, 0.6609, 0.1354], [0.4517, 0.2045, 0.8378, 0.0875, 0.7051, 0.4862, 0.0181, 0.8267]]]], 2, Con15199), 
LAdd93909 = add_layer([Sof45654,Con15199], Add93909), 
exec_layers([LSub66488,LRes39471,LRes55332,LLay50441,LSof45654,LELU77603,LRes85772,LCon45623,LZer27126,LCon36781,LDen47387,LAdd81403,LCon15199,LAdd93909],["Sub66488","Res39471","Res55332","Lay50441","Sof45654","ELU77603","Res85772","Con45623","Zer27126","Con36781","Den47387","Add81403","Con15199","Add93909"],Add93909,"Add93909")

Actual (Unparsed): [[[1.9648423, 1.9841720, 0.7683932, 1.6847917, 0.8879953, 0.4248810, 0.6962953, 0.9748597, 0.6758705, 0.8099502, 1.0547914, 1.0371527], [1.6565164, 1.7609450, 1.1731102, 1.5589468, 0.7776681, 0.4823227, 0.9186817, 1.2388498, 0.8932960, 0.4343607, 0.9317737, 0.5369501], [2.5270839, 2.5499564, 2.1187716, 1.4561810, 0.8292366, 0.5271963, 1.2427230, 0.3865905, 0.8829335, 0.8931892, 0.3363348, 1.1924972]]]

Expected (Unparsed): [[[1.9648422657531983,1.9841720147634492,0.7683932142678662,1.684791675122716,0.8879953173544051,0.42488099490378195,0.6962952730946084,0.9748597230224857,0.675870479023058,0.8099501845347,1.0547914316679197,1.037152725886767],[1.6565164294460175,1.7609450051392297,1.1731101954048,1.5589467210032084,0.7776680876764425,0.48232267760839775,0.9186817111762041,1.2388497817243564,0.8932960163758077,0.4343606624221326,0.9317737160230855,0.5369500687989954],[2.5270838948007843,2.5499564200973213,2.1187715503273337,1.456180963874075,0.8292365949691524,0.5271963274878204,1.2427230157291875,0.3865904952531579,0.8829335046011342,0.8931891530431674,0.3363348523089951,1.1924972053142378]]]

Actual:   [[[1.9649, 1.9842, 0.7684, 1.6848, 0.888, 0.4249, 0.6963, 0.9749, 0.6759, 0.81, 1.0548, 1.0372], [1.6566, 1.761, 1.1732, 1.559, 0.7777, 0.4824, 0.9187, 1.2389, 0.8933, 0.4344, 0.9318, 0.537], [2.5271, 2.55, 2.1188, 1.4562, 0.8293, 0.5272, 1.2428, 0.3866, 0.883, 0.8932, 0.3364, 1.1925]]]

Expected: [[[1.9649, 1.9842, 0.7684, 1.6848, 0.888, 0.4249, 0.6963, 0.9749, 0.6759, 0.81, 1.0548, 1.0372], [1.6566, 1.761, 1.1732, 1.559, 0.7777, 0.4824, 0.9187, 1.2389, 0.8933, 0.4344, 0.9318, 0.537], [2.5271, 2.55, 2.1188, 1.4562, 0.8293, 0.5272, 1.2428, 0.3866, 0.883, 0.8932, 0.3364, 1.1925]]]