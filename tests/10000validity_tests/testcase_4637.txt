import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add82406 = tf.keras.layers.Input(shape=([1, 2, 2]))
in1Add82406 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Con2641 = tf.keras.layers.Input(shape=([3, 4, 4, 1]))
in0Ave36633 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in1Ave36633 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in0Add1780 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in1Add1780 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in0Con5788 = tf.keras.layers.Input(shape=([3, 28]))

Add82406 = keras.layers.Add(name = 'Add82406', )([in0Add82406,in1Add82406])
Res17357 = keras.layers.Reshape((1, 2, 2, 1), name = 'Res17357', )(Add82406)
Zer41911 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer41911', )(Res17357)
Con2641 = keras.layers.Concatenate(axis=4, name = 'Con2641', )([Zer41911,in0Con2641])
Ave36633 = keras.layers.Average(name = 'Ave36633', )([in0Ave36633,in1Ave36633])
Zer73779 = keras.layers.ZeroPadding3D(padding=((1, 0), (3, 0), (2, 0)), name = 'Zer73779', )(Ave36633)
Sub25392 = keras.layers.Subtract(name = 'Sub25392', )([Con2641,Zer73779])
Res86506 = keras.layers.Reshape((3, 4, 8), name = 'Res86506', )(Sub25392)
Res33944 = keras.layers.Reshape((3, 32), name = 'Res33944', )(Res86506)
Add1780 = keras.layers.Add(name = 'Add1780', )([in0Add1780,in1Add1780])
Res39344 = keras.layers.Reshape((2, 1, 4), name = 'Res39344', )(Add1780)
Res55061 = keras.layers.Reshape((2, 4), name = 'Res55061', )(Res39344)
Cro24791 = keras.layers.Cropping1D(cropping=((0, 1)), name = 'Cro24791', )(Res55061)
Zer41392 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer41392', )(Cro24791)
Con5788 = keras.layers.Concatenate(axis=2, name = 'Con5788', )([Zer41392,in0Con5788])
Max51177 = keras.layers.Maximum(name = 'Max51177', )([Res33944,Con5788])
Loc31209 = keras.layers.LocallyConnected1D(4, (1),strides=(2), name = 'Loc31209', )(Max51177)
model = tf.keras.models.Model(inputs=[in0Add82406,in1Add82406,in0Con2641,in0Ave36633,in1Ave36633,in0Add1780,in1Add1780,in0Con5788], outputs=Loc31209)
w = model.get_layer('Loc31209').get_weights() 
w[0] = np.array([[[0.9298, 0.1103, 0.4578, 0.8399], [0.117, 0.7855, 0.2848, 0.1818], [0.8528, 0.8041, 0.4357, 0.442], [0.1492, 0.2176, 0.3831, 0.4982], [0.227, 0.0441, 0.0501, 0.433], [0.3145, 0.0299, 0.8447, 0.969], [0.2549, 0.0119, 0.0402, 0.2843], [0.3921, 0.9165, 0.252, 0.4643], [0.5519, 0.7167, 0.3018, 0.4535], [0.9265, 0.8611, 0.4632, 0.3976], [0.3284, 0.7883, 0.9378, 0.6888], [0.5857, 0.143, 0.4228, 0.8621], [0.8193, 0.2243, 0.8028, 0.7296], [0.963, 0.0102, 0.32, 0.7838], [0.1665, 0.83, 0.0618, 0.9552], [0.6554, 0.3831, 0.2398, 0.2655], [0.2136, 0.3397, 0.5309, 0.7816], [0.7003, 0.2028, 0.6989, 0.5491], [0.9174, 0.4566, 0.8216, 0.8569], [0.702, 0.2849, 0.7145, 0.2704], [0.3353, 0.3004, 0.556, 0.358], [0.2309, 0.7959, 0.2977, 0.9336], [0.3941, 0.0014, 0.175, 0.9364], [0.327, 0.711, 0.5172, 0.7802], [0.8983, 0.4276, 0.1065, 0.1165], [0.1892, 0.8707, 0.5277, 0.4784], [0.4845, 0.2849, 0.3148, 0.1958], [0.3839, 0.4971, 0.2073, 0.3097], [0.4784, 0.078, 0.5003, 0.9483], [0.1531, 0.283, 0.2992, 0.7768], [0.8628, 0.6696, 0.4683, 0.6816], [0.6553, 0.4191, 0.2012, 0.8099]], [[0.8121, 0.4275, 0.438, 0.4485], [0.2212, 0.1702, 0.7978, 0.9965], [0.5012, 0.1969, 0.3096, 0.4642], [0.9551, 0.8655, 0.9799, 0.5112], [0.1463, 0.5865, 0.1599, 0.0297], [0.2658, 0.4156, 0.7467, 0.67], [0.4826, 0.3068, 0.4861, 0.5117], [0.1572, 0.7184, 0.0331, 0.2868], [0.1389, 0.5482, 0.9663, 0.181], [0.3621, 0.5699, 0.6589, 0.2553], [0.6137, 0.6386, 0.7577, 0.9585], [0.6501, 0.9401, 0.0428, 0.0352], [0.8104, 0.4675, 0.6008, 0.3713], [0.8926, 0.7294, 0.5769, 0.9656], [0.3398, 0.4145, 0.2493, 0.2682], [0.7163, 0.368, 0.8052, 0.5829], [0.0455, 0.7731, 0.9968, 0.0968], [0.8275, 0.8714, 0.8012, 0.3692], [0.4595, 0.9044, 0.3166, 0.7912], [0.3387, 0.2158, 0.3897, 0.6058], [0.1462, 0.6117, 0.8881, 0.5734], [0.6809, 0.1464, 0.1061, 0.2584], [0.1402, 0.4735, 0.5255, 0.2166], [0.9317, 0.7818, 0.0379, 0.0704], [0.9358, 0.1228, 0.7817, 0.5736], [0.6429, 0.6278, 0.945, 0.2879], [0.7353, 0.7114, 0.2443, 0.419], [0.4989, 0.8643, 0.2994, 0.6951], [0.9129, 0.0474, 0.7947, 0.9078], [0.3875, 0.0181, 0.1433, 0.8831], [0.9009, 0.1438, 0.3497, 0.1995], [0.7164, 0.3846, 0.9065, 0.9303]]])
w[1] = np.array([[0, 0, 0, 0], [0, 0, 0, 0]])
model.get_layer('Loc31209').set_weights(w) 
in0Add82406 = tf.constant([[[[0.5783, 0.7383], [0.0267, 0.3527]]]])
in1Add82406 = tf.constant([[[[0.6926, 0.0721], [0.6636, 0.82]]]])
in0Con2641 = tf.constant([[[[[0.1194], [0.4963], [0.5302], [0.1586]], [[0.3449], [0.4477], [0.043], [0.1179]], [[0.2094], [0.813], [0.6828], [0.4462]], [[0.6953], [0.4214], [0.315], [0.9302]]], [[[0.3913], [0.3241], [0.9525], [0.8546]], [[0.7099], [0.8842], [0.9263], [0.5007]], [[0.5196], [0.5788], [0.3903], [0.013]], [[0.7098], [0.6382], [0.3191], [0.3268]]], [[[0.6205], [0.7279], [0.9633], [0.9449]], [[0.7144], [0.2389], [0.0621], [0.2257]], [[0.3488], [0.3919], [0.9832], [0.5038]], [[0.0104], [0.286], [0.3569], [0.8022]]]]])
in0Ave36633 = tf.constant([[[[[0.2258, 0.0289], [0.8656, 0.7604]]], [[[0.1379, 0.6786], [0.8539, 0.7031]]]]])
in1Ave36633 = tf.constant([[[[[0.2111, 0.18], [0.9736, 0.698]]], [[[0.8122, 0.375], [0.5166, 0.1576]]]]])
in0Add1780 = tf.constant([[[[[0.2224, 0.8133], [0.6727, 0.2567]]], [[[0.118, 0.3067], [0.8971, 0.1185]]]]])
in1Add1780 = tf.constant([[[[[0.3235, 0.3147], [0.9115, 0.2336]]], [[[0.5346, 0.9504], [0.0189, 0.5608]]]]])
in0Con5788 = tf.constant([[[0.1836, 0.8605, 0.8172, 0.2356, 0.57, 0.9729, 0.8742, 0.7432, 0.7869, 0.3898, 0.1855, 0.828, 0.1076, 0.9405, 0.8087, 0.2826, 0.5997, 0.6211, 0.4291, 0.2984, 0.6203, 0.0563, 0.9219, 0.4295, 0.7213, 0.8299, 0.7051, 0.4335], [0.6039, 0.4295, 0.75, 0.8221, 0.7242, 0.0506, 0.219, 0.2249, 0.6441, 0.7864, 0.833, 0.2143, 0.2476, 0.7966, 0.2372, 0.0703, 0.4968, 0.8896, 0.8293, 0.0735, 0.489, 0.5796, 0.742, 0.3073, 0.1958, 0.0888, 0.9309, 0.6213], [0.4122, 0.9516, 0.6078, 0.3642, 0.1272, 0.8476, 0.5826, 0.7281, 0.7364, 0.0426, 0.4271, 0.0633, 0.2626, 0.3466, 0.7597, 0.3215, 0.0237, 0.815, 0.3651, 0.8618, 0.9925, 0.5088, 0.307, 0.2183, 0.4314, 0.5102, 0.6728, 0.0651]]])
print (np.array2string(model.predict([in0Add82406,in1Add82406,in0Con2641,in0Ave36633,in1Ave36633,in0Add1780,in1Add1780,in0Con5788],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Loc31209.png')

LAdd82406 = add_layer([[[[[0.5783, 0.7383], [0.0267, 0.3527]]]], [[[[0.6926, 0.0721], [0.6636, 0.82]]]]], Add82406), 
LRes17357 = reshape_layer(Add82406, [1, 2, 2, 1], Res17357), 
LZer41911 = zero_padding3D_layer(Res17357, 1, 1, 1, 1, 1, 1, Zer41911), 
LCon2641 = concatenate_layer([Zer41911,[[[[[0.1194], [0.4963], [0.5302], [0.1586]], [[0.3449], [0.4477], [0.043], [0.1179]], [[0.2094], [0.813], [0.6828], [0.4462]], [[0.6953], [0.4214], [0.315], [0.9302]]], [[[0.3913], [0.3241], [0.9525], [0.8546]], [[0.7099], [0.8842], [0.9263], [0.5007]], [[0.5196], [0.5788], [0.3903], [0.013]], [[0.7098], [0.6382], [0.3191], [0.3268]]], [[[0.6205], [0.7279], [0.9633], [0.9449]], [[0.7144], [0.2389], [0.0621], [0.2257]], [[0.3488], [0.3919], [0.9832], [0.5038]], [[0.0104], [0.286], [0.3569], [0.8022]]]]]], 4, Con2641), 
LAve36633 = average_layer([[[[[[0.2258, 0.0289], [0.8656, 0.7604]]], [[[0.1379, 0.6786], [0.8539, 0.7031]]]]], [[[[[0.2111, 0.18], [0.9736, 0.698]]], [[[0.8122, 0.375], [0.5166, 0.1576]]]]]], Ave36633), 
LZer73779 = zero_padding3D_layer(Ave36633, 1, 0, 3, 0, 2, 0, Zer73779), 
LSub25392 = subtract_layer(Con2641,Zer73779, Sub25392), 
LRes86506 = reshape_layer(Sub25392, [3, 4, 8], Res86506), 
LRes33944 = reshape_layer(Res86506, [3, 32], Res33944), 
LAdd1780 = add_layer([[[[[[0.2224, 0.8133], [0.6727, 0.2567]]], [[[0.118, 0.3067], [0.8971, 0.1185]]]]], [[[[[0.3235, 0.3147], [0.9115, 0.2336]]], [[[0.5346, 0.9504], [0.0189, 0.5608]]]]]], Add1780), 
LRes39344 = reshape_layer(Add1780, [2, 1, 4], Res39344), 
LRes55061 = reshape_layer(Res39344, [2, 4], Res55061), 
LCro24791 = cropping1D_layer(Res55061, 0, 1, Cro24791), 
LZer41392 = zero_padding1D_layer(Cro24791, 2, 0, Zer41392), 
LCon5788 = concatenate_layer([Zer41392,[[[0.1836, 0.8605, 0.8172, 0.2356, 0.57, 0.9729, 0.8742, 0.7432, 0.7869, 0.3898, 0.1855, 0.828, 0.1076, 0.9405, 0.8087, 0.2826, 0.5997, 0.6211, 0.4291, 0.2984, 0.6203, 0.0563, 0.9219, 0.4295, 0.7213, 0.8299, 0.7051, 0.4335], [0.6039, 0.4295, 0.75, 0.8221, 0.7242, 0.0506, 0.219, 0.2249, 0.6441, 0.7864, 0.833, 0.2143, 0.2476, 0.7966, 0.2372, 0.0703, 0.4968, 0.8896, 0.8293, 0.0735, 0.489, 0.5796, 0.742, 0.3073, 0.1958, 0.0888, 0.9309, 0.6213], [0.4122, 0.9516, 0.6078, 0.3642, 0.1272, 0.8476, 0.5826, 0.7281, 0.7364, 0.0426, 0.4271, 0.0633, 0.2626, 0.3466, 0.7597, 0.3215, 0.0237, 0.815, 0.3651, 0.8618, 0.9925, 0.5088, 0.307, 0.2183, 0.4314, 0.5102, 0.6728, 0.0651]]]], 2, Con5788), 
LMax51177 = maximum_layer([Res33944,Con5788], Max51177), 
LLoc31209 = locally_connected1D_layer(Max51177, 1,[[[0.9298, 0.1103, 0.4578, 0.8399], [0.117, 0.7855, 0.2848, 0.1818], [0.8528, 0.8041, 0.4357, 0.442], [0.1492, 0.2176, 0.3831, 0.4982], [0.227, 0.0441, 0.0501, 0.433], [0.3145, 0.0299, 0.8447, 0.969], [0.2549, 0.0119, 0.0402, 0.2843], [0.3921, 0.9165, 0.252, 0.4643], [0.5519, 0.7167, 0.3018, 0.4535], [0.9265, 0.8611, 0.4632, 0.3976], [0.3284, 0.7883, 0.9378, 0.6888], [0.5857, 0.143, 0.4228, 0.8621], [0.8193, 0.2243, 0.8028, 0.7296], [0.963, 0.0102, 0.32, 0.7838], [0.1665, 0.83, 0.0618, 0.9552], [0.6554, 0.3831, 0.2398, 0.2655], [0.2136, 0.3397, 0.5309, 0.7816], [0.7003, 0.2028, 0.6989, 0.5491], [0.9174, 0.4566, 0.8216, 0.8569], [0.702, 0.2849, 0.7145, 0.2704], [0.3353, 0.3004, 0.556, 0.358], [0.2309, 0.7959, 0.2977, 0.9336], [0.3941, 0.0014, 0.175, 0.9364], [0.327, 0.711, 0.5172, 0.7802], [0.8983, 0.4276, 0.1065, 0.1165], [0.1892, 0.8707, 0.5277, 0.4784], [0.4845, 0.2849, 0.3148, 0.1958], [0.3839, 0.4971, 0.2073, 0.3097], [0.4784, 0.078, 0.5003, 0.9483], [0.1531, 0.283, 0.2992, 0.7768], [0.8628, 0.6696, 0.4683, 0.6816], [0.6553, 0.4191, 0.2012, 0.8099]], [[0.8121, 0.4275, 0.438, 0.4485], [0.2212, 0.1702, 0.7978, 0.9965], [0.5012, 0.1969, 0.3096, 0.4642], [0.9551, 0.8655, 0.9799, 0.5112], [0.1463, 0.5865, 0.1599, 0.0297], [0.2658, 0.4156, 0.7467, 0.67], [0.4826, 0.3068, 0.4861, 0.5117], [0.1572, 0.7184, 0.0331, 0.2868], [0.1389, 0.5482, 0.9663, 0.181], [0.3621, 0.5699, 0.6589, 0.2553], [0.6137, 0.6386, 0.7577, 0.9585], [0.6501, 0.9401, 0.0428, 0.0352], [0.8104, 0.4675, 0.6008, 0.3713], [0.8926, 0.7294, 0.5769, 0.9656], [0.3398, 0.4145, 0.2493, 0.2682], [0.7163, 0.368, 0.8052, 0.5829], [0.0455, 0.7731, 0.9968, 0.0968], [0.8275, 0.8714, 0.8012, 0.3692], [0.4595, 0.9044, 0.3166, 0.7912], [0.3387, 0.2158, 0.3897, 0.6058], [0.1462, 0.6117, 0.8881, 0.5734], [0.6809, 0.1464, 0.1061, 0.2584], [0.1402, 0.4735, 0.5255, 0.2166], [0.9317, 0.7818, 0.0379, 0.0704], [0.9358, 0.1228, 0.7817, 0.5736], [0.6429, 0.6278, 0.945, 0.2879], [0.7353, 0.7114, 0.2443, 0.419], [0.4989, 0.8643, 0.2994, 0.6951], [0.9129, 0.0474, 0.7947, 0.9078], [0.3875, 0.0181, 0.1433, 0.8831], [0.9009, 0.1438, 0.3497, 0.1995], [0.7164, 0.3846, 0.9065, 0.9303]]],[[0, 0, 0, 0], [0, 0, 0, 0]], 2, Loc31209), 
exec_layers([LAdd82406,LRes17357,LZer41911,LCon2641,LAve36633,LZer73779,LSub25392,LRes86506,LRes33944,LAdd1780,LRes39344,LRes55061,LCro24791,LZer41392,LCon5788,LMax51177,LLoc31209],["Add82406","Res17357","Zer41911","Con2641","Ave36633","Zer73779","Sub25392","Res86506","Res33944","Add1780","Res39344","Res55061","Cro24791","Zer41392","Con5788","Max51177","Loc31209"],Loc31209,"Loc31209")

Actual (Unparsed): [[[9.8913575, 7.5241006, 8.5166985, 11.0853477], [10.4525488, 8.5936544, 9.0650925, 8.8846383]]]

Expected (Unparsed): [[[9.891357469999999,7.524100660000001,8.5166985,11.085347709999999],[10.45254868,8.593654310000002,9.065092395,8.884638175]]]

Actual:   [[[9.8914, 7.5242, 8.5167, 11.0854], [10.4526, 8.5937, 9.0651, 8.8847]]]

Expected: [[[9.8914, 7.5242, 8.5167, 11.0854], [10.4526, 8.5937, 9.0651, 8.8847]]]