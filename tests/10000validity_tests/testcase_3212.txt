import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min12873 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in1Min12873 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in0Con92114 = tf.keras.layers.Input(shape=([4, 4]))
in0Max98374 = tf.keras.layers.Input(shape=([1, 2]))
in1Max98374 = tf.keras.layers.Input(shape=([1, 2]))
in0Con14398 = tf.keras.layers.Input(shape=([1, 14]))
in0Up_63736 = tf.keras.layers.Input(shape=([3, 2, 1, 4]))

Min12873 = keras.layers.Minimum(name = 'Min12873', )([in0Min12873,in1Min12873])
Sof2279 = keras.layers.Softmax(axis=1, name = 'Sof2279', )(Min12873)
Fla52120 = keras.layers.Flatten(name = 'Fla52120', )(Sof2279)
Res38382 = keras.layers.Reshape((4, 1), name = 'Res38382', )(Fla52120)
Con92114 = keras.layers.Concatenate(axis=2, name = 'Con92114', )([Res38382,in0Con92114])
Max98374 = keras.layers.Maximum(name = 'Max98374', )([in0Max98374,in1Max98374])
Con14398 = keras.layers.Concatenate(axis=2, name = 'Con14398', )([Max98374,in0Con14398])
Up_63736 = keras.layers.UpSampling3D(size=(1, 2, 1), name = 'Up_63736', )(in0Up_63736)
ReL8143 = keras.layers.ReLU(max_value=9.856719845756157, negative_slope=4.142747949495531, threshold=6.526676317135859, name = 'ReL8143', )(Up_63736)
Sof68919 = keras.layers.Softmax(axis=1, name = 'Sof68919', )(ReL8143)
Res64045 = keras.layers.Reshape((3, 4, 4), name = 'Res64045', )(Sof68919)
Res91496 = keras.layers.Reshape((3, 16), name = 'Res91496', )(Res64045)
Zer61556 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer61556', )(Res91496)
Dot28907 = keras.layers.Dot(axes=(2, 2), name = 'Dot28907', )([Con14398,Zer61556])
Zer28305 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer28305', )(Dot28907)
Sub43928 = keras.layers.Subtract(name = 'Sub43928', )([Con92114,Zer28305])
model = tf.keras.models.Model(inputs=[in0Min12873,in1Min12873,in0Con92114,in0Max98374,in1Max98374,in0Con14398,in0Up_63736], outputs=Sub43928)
in0Min12873 = tf.constant([[[[[0.9492], [0.6782]]], [[[0.6232], [0.8103]]]]])
in1Min12873 = tf.constant([[[[[0.1445], [0.1758]]], [[[0.6924], [0.5846]]]]])
in0Con92114 = tf.constant([[[0.1589, 0.2003, 0.5842, 0.1996], [0.5341, 0.7296, 0.2236, 0.2985], [0.3081, 0.9429, 0.9747, 0.1067], [0.1889, 0.0136, 0.5589, 0.5448]]])
in0Max98374 = tf.constant([[[0.1794, 0.2605]]])
in1Max98374 = tf.constant([[[0.0182, 0.9834]]])
in0Con14398 = tf.constant([[[0.6287, 0.4509, 0.0846, 0.5061, 0.4083, 0.442, 0.2159, 0.6614, 0.3834, 0.1913, 0.8636, 0.1407, 0.4392, 0.0467]]])
in0Up_63736 = tf.constant([[[[[1.145, 1.7838, 1.2345, 1.9764]], [[1.6993, 1.4512, 1.6516, 1.7963]]], [[[1.1731, 1.1049, 1.8456, 1.655]], [[1.8489, 1.0387, 1.0456, 1.5971]]], [[[1.3161, 1.1, 1.1401, 1.7291]], [[1.6777, 1.4016, 1.6967, 1.9579]]]]])
print (np.array2string(model.predict([in0Min12873,in1Min12873,in0Con92114,in0Max98374,in1Max98374,in0Con14398,in0Up_63736],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub43928.png')

LMin12873 = minimum_layer([[[[[[0.9492], [0.6782]]], [[[0.6232], [0.8103]]]]], [[[[[0.1445], [0.1758]]], [[[0.6924], [0.5846]]]]]], Min12873), 
LSof2279 = softmax_layer(Min12873, 1, Sof2279), 
LFla52120 = flatten_layer(Sof2279, Fla52120), 
LRes38382 = reshape_layer(Fla52120, [4, 1], Res38382), 
LCon92114 = concatenate_layer([Res38382,[[[0.1589, 0.2003, 0.5842, 0.1996], [0.5341, 0.7296, 0.2236, 0.2985], [0.3081, 0.9429, 0.9747, 0.1067], [0.1889, 0.0136, 0.5589, 0.5448]]]], 2, Con92114), 
LMax98374 = maximum_layer([[[[0.1794, 0.2605]]], [[[0.0182, 0.9834]]]], Max98374), 
LCon14398 = concatenate_layer([Max98374,[[[0.6287, 0.4509, 0.0846, 0.5061, 0.4083, 0.442, 0.2159, 0.6614, 0.3834, 0.1913, 0.8636, 0.1407, 0.4392, 0.0467]]]], 2, Con14398), 
LUp_63736 = up_sampling3D_layer([[[[[1.145, 1.7838, 1.2345, 1.9764]], [[1.6993, 1.4512, 1.6516, 1.7963]]], [[[1.1731, 1.1049, 1.8456, 1.655]], [[1.8489, 1.0387, 1.0456, 1.5971]]], [[[1.3161, 1.1, 1.1401, 1.7291]], [[1.6777, 1.4016, 1.6967, 1.9579]]]]], 1, 2, 1, Up_63736), 
LReL8143 = relu_layer(Up_63736, 9.856719845756157, 4.142747949495531, 6.526676317135859, ReL8143), 
LSof68919 = softmax_layer(ReL8143, 1, Sof68919), 
LRes64045 = reshape_layer(Sof68919, [3, 4, 4], Res64045), 
LRes91496 = reshape_layer(Res64045, [3, 16], Res91496), 
LZer61556 = zero_padding1D_layer(Res91496, 2, 0, Zer61556), 
LDot28907 = dot_layer(Con14398,Zer61556, 2, 2, Dot28907), 
LZer28305 = zero_padding1D_layer(Dot28907, 3, 0, Zer28305), 
LSub43928 = subtract_layer(Con92114,Zer28305, Sub43928), 
exec_layers([LMin12873,LSof2279,LFla52120,LRes38382,LCon92114,LMax98374,LCon14398,LUp_63736,LReL8143,LSof68919,LRes64045,LRes91496,LZer61556,LDot28907,LZer28305,LSub43928],["Min12873","Sof2279","Fla52120","Res38382","Con92114","Max98374","Con14398","Up_63736","ReL8143","Sof68919","Res64045","Res91496","Zer61556","Dot28907","Zer28305","Sub43928"],Sub43928,"Sub43928")

Actual (Unparsed): [[[0.3825591, 0.1589000, 0.2003000, 0.5842000, 0.1996000], [0.3991999, 0.5341000, 0.7296000, 0.2236000, 0.2985000], [0.6174409, 0.3081000, 0.9429000, 0.9747000, 0.1067000], [0.6008001, 0.1889000, -3.1220860, -1.3172261, -1.0689880]]]

Expected (Unparsed): [[[0.38255914825359644,0.1589,0.2003,0.5842,0.1996],[0.39919989351435475,0.5341,0.7296,0.2236,0.2985],[0.6174408517464035,0.3081,0.9429,0.9747,0.1067],[0.6008001064856453,0.1889,-3.1220858595117216,-1.3172261441912734,-1.0689879962970055]]]

Actual:   [[[0.3826, 0.1589, 0.2003, 0.5842, 0.1996], [0.3992, 0.5341, 0.7296, 0.2236, 0.2985], [0.6175, 0.3081, 0.9429, 0.9747, 0.1067], [0.6009, 0.1889, -3.122, -1.3172, -1.0689]]]

Expected: [[[0.3826, 0.1589, 0.2003, 0.5842, 0.1996], [0.3992, 0.5341, 0.7296, 0.2236, 0.2985], [0.6175, 0.3081, 0.9429, 0.9747, 0.1067], [0.6009, 0.1889, -3.122, -1.3172, -1.0689]]]