import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub86631 = tf.keras.layers.Input(shape=([3, 3, 3]))
in1Sub86631 = tf.keras.layers.Input(shape=([3, 3, 3]))
in0Con29547 = tf.keras.layers.Input(shape=([3, 3, 3, 1]))
in0Mul62165 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in1Mul62165 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in0Add44048 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in1Add44048 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in0Con66748 = tf.keras.layers.Input(shape=([1, 20]))
in0Up_77979 = tf.keras.layers.Input(shape=([3, 4, 3]))
in0Con13089 = tf.keras.layers.Input(shape=([3, 12]))

Sub86631 = keras.layers.Subtract(name = 'Sub86631', )([in0Sub86631,in1Sub86631])
Res19402 = keras.layers.Reshape((3, 3, 3, 1), name = 'Res19402', )(Sub86631)
Con29547 = keras.layers.Concatenate(axis=4, name = 'Con29547', )([Res19402,in0Con29547])
Mul62165 = keras.layers.Multiply(name = 'Mul62165', )([in0Mul62165,in1Mul62165])
Zer57064 = keras.layers.ZeroPadding3D(padding=((2, 0), (1, 0), (2, 0)), name = 'Zer57064', )(Mul62165)
Mul29253 = keras.layers.Multiply(name = 'Mul29253', )([Con29547,Zer57064])
Res41908 = keras.layers.Reshape((3, 3, 6), name = 'Res41908', )(Mul29253)
Res42492 = keras.layers.Reshape((3, 18), name = 'Res42492', )(Res41908)
Add44048 = keras.layers.Add(name = 'Add44048', )([in0Add44048,in1Add44048])
Res42458 = keras.layers.Reshape((1, 2, 2), name = 'Res42458', )(Add44048)
Res82950 = keras.layers.Reshape((1, 4), name = 'Res82950', )(Res42458)
Con66748 = keras.layers.Concatenate(axis=2, name = 'Con66748', )([Res82950,in0Con66748])
Up_77979 = keras.layers.UpSampling2D(size=(2, 2), name = 'Up_77979', )(in0Up_77979)
Res2951 = keras.layers.Reshape((6, 24), name = 'Res2951', )(Up_77979)
Dot13185 = keras.layers.Dot(axes=(2, 2), name = 'Dot13185', )([Con66748,Res2951])
Sof19798 = keras.layers.Softmax(axis=1, name = 'Sof19798', )(Dot13185)
Zer90215 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer90215', )(Sof19798)
Con13089 = keras.layers.Concatenate(axis=2, name = 'Con13089', )([Zer90215,in0Con13089])
Sub80239 = keras.layers.Subtract(name = 'Sub80239', )([Res42492,Con13089])
model = tf.keras.models.Model(inputs=[in0Sub86631,in1Sub86631,in0Con29547,in0Mul62165,in1Mul62165,in0Add44048,in1Add44048,in0Con66748,in0Up_77979,in0Con13089], outputs=Sub80239)
in0Sub86631 = tf.constant([[[[0.8084, 0.7235, 0.767], [0.7535, 0.6126, 0.549], [0.3992, 0.1704, 0.1727]], [[0.7, 0.0331, 0.9361], [0.8741, 0.1041, 0.1047], [0.8253, 0.8433, 0.0334]], [[0.2188, 0.7236, 0.9971], [0.9371, 0.2925, 0.0239], [0.5001, 0.2385, 0.2271]]]])
in1Sub86631 = tf.constant([[[[0.0506, 0.1929, 0.1067], [0.1434, 0.6561, 0.4734], [0.0259, 0.7187, 0.6504]], [[0.4541, 0.4449, 0.5772], [0.3894, 0.9507, 0.9185], [0.0014, 0.6765, 0.0092]], [[0.9258, 0.4557, 0.1116], [0.2239, 0.9868, 0.5443], [0.1588, 0.0632, 0.7897]]]])
in0Con29547 = tf.constant([[[[[0.8255], [0.7882], [0.8115]], [[0.1257], [0.16], [0.7919]], [[0.5718], [0.8535], [0.875]]], [[[0.5805], [0.6904], [0.7321]], [[0.3657], [0.0016], [0.7353]], [[0.2006], [0.632], [0.0671]]], [[[0.2583], [0.4993], [0.6834]], [[0.4161], [0.7825], [0.042]], [[0.6935], [0.9916], [0.3919]]]]])
in0Mul62165 = tf.constant([[[[[0.0608, 0.5]], [[0.779, 0.7877]]]]])
in1Mul62165 = tf.constant([[[[[0.7291, 0.6903]], [[0.2493, 0.1282]]]]])
in0Add44048 = tf.constant([[[[[0.0853, 0.737]], [[0.2791, 0.8358]]]]])
in1Add44048 = tf.constant([[[[[0.7025, 0.9893]], [[0.4675, 0.888]]]]])
in0Con66748 = tf.constant([[[0.1486, 0.9706, 0.0154, 0.3344, 0.5286, 0.5212, 0.3852, 0.945, 0.94, 0.3721, 0.5307, 0.6952, 0.0457, 0.7271, 0.556, 0.1673, 0.8054, 0.3282, 0.5079, 0.4015]]])
in0Up_77979 = tf.constant([[[[1.625, 1.6414, 1.7398], [1.1918, 1.4425, 1.2298], [1.0358, 1.5015, 1.9106], [1.7351, 1.4506, 1.9986]], [[1.4029, 1.2868, 1.3305], [1.599, 1.767, 1.015], [1.4403, 1.0471, 1.3476], [1.2896, 1.3406, 1.5114]], [[1.0395, 1.4489, 1.5391], [1.705, 1.2394, 1.1276], [1.8125, 1.52, 1.4732], [1.4657, 1.3373, 1.7888]]]])
in0Con13089 = tf.constant([[[0.2747, 0.5966, 0.3966, 0.0638, 0.6007, 0.6992, 0.7816, 0.6602, 0.7127, 0.6906, 0.2227, 0.6352], [0.3279, 0.6298, 0.984, 0.2259, 0.7831, 0.3664, 0.5261, 0.4595, 0.3127, 0.6027, 0.8152, 0.2554], [0.304, 0.784, 0.8942, 0.4538, 0.3452, 0.6944, 0.6027, 0.1243, 0.4959, 0.6312, 0.5194, 0.211]]])
print (np.array2string(model.predict([in0Sub86631,in1Sub86631,in0Con29547,in0Mul62165,in1Mul62165,in0Add44048,in1Add44048,in0Con66748,in0Up_77979,in0Con13089],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub80239.png')

LSub86631 = subtract_layer([[[[0.8084, 0.7235, 0.767], [0.7535, 0.6126, 0.549], [0.3992, 0.1704, 0.1727]], [[0.7, 0.0331, 0.9361], [0.8741, 0.1041, 0.1047], [0.8253, 0.8433, 0.0334]], [[0.2188, 0.7236, 0.9971], [0.9371, 0.2925, 0.0239], [0.5001, 0.2385, 0.2271]]]], [[[[0.0506, 0.1929, 0.1067], [0.1434, 0.6561, 0.4734], [0.0259, 0.7187, 0.6504]], [[0.4541, 0.4449, 0.5772], [0.3894, 0.9507, 0.9185], [0.0014, 0.6765, 0.0092]], [[0.9258, 0.4557, 0.1116], [0.2239, 0.9868, 0.5443], [0.1588, 0.0632, 0.7897]]]], Sub86631), 
LRes19402 = reshape_layer(Sub86631, [3, 3, 3, 1], Res19402), 
LCon29547 = concatenate_layer([Res19402,[[[[[0.8255], [0.7882], [0.8115]], [[0.1257], [0.16], [0.7919]], [[0.5718], [0.8535], [0.875]]], [[[0.5805], [0.6904], [0.7321]], [[0.3657], [0.0016], [0.7353]], [[0.2006], [0.632], [0.0671]]], [[[0.2583], [0.4993], [0.6834]], [[0.4161], [0.7825], [0.042]], [[0.6935], [0.9916], [0.3919]]]]]], 4, Con29547), 
LMul62165 = multiply_layer([[[[[[0.0608, 0.5]], [[0.779, 0.7877]]]]], [[[[[0.7291, 0.6903]], [[0.2493, 0.1282]]]]]], Mul62165), 
LZer57064 = zero_padding3D_layer(Mul62165, 2, 0, 1, 0, 2, 0, Zer57064), 
LMul29253 = multiply_layer([Con29547,Zer57064], Mul29253), 
LRes41908 = reshape_layer(Mul29253, [3, 3, 6], Res41908), 
LRes42492 = reshape_layer(Res41908, [3, 18], Res42492), 
LAdd44048 = add_layer([[[[[[0.0853, 0.737]], [[0.2791, 0.8358]]]]], [[[[[0.7025, 0.9893]], [[0.4675, 0.888]]]]]], Add44048), 
LRes42458 = reshape_layer(Add44048, [1, 2, 2], Res42458), 
LRes82950 = reshape_layer(Res42458, [1, 4], Res82950), 
LCon66748 = concatenate_layer([Res82950,[[[0.1486, 0.9706, 0.0154, 0.3344, 0.5286, 0.5212, 0.3852, 0.945, 0.94, 0.3721, 0.5307, 0.6952, 0.0457, 0.7271, 0.556, 0.1673, 0.8054, 0.3282, 0.5079, 0.4015]]]], 2, Con66748), 
LUp_77979 = up_sampling2D_layer([[[[1.625, 1.6414, 1.7398], [1.1918, 1.4425, 1.2298], [1.0358, 1.5015, 1.9106], [1.7351, 1.4506, 1.9986]], [[1.4029, 1.2868, 1.3305], [1.599, 1.767, 1.015], [1.4403, 1.0471, 1.3476], [1.2896, 1.3406, 1.5114]], [[1.0395, 1.4489, 1.5391], [1.705, 1.2394, 1.1276], [1.8125, 1.52, 1.4732], [1.4657, 1.3373, 1.7888]]]], 2, 2, Up_77979), 
LRes2951 = reshape_layer(Up_77979, [6, 24], Res2951), 
LDot13185 = dot_layer(Con66748,Res2951, 2, 2, Dot13185), 
LSof19798 = softmax_layer(Dot13185, 1, Sof19798), 
LZer90215 = zero_padding1D_layer(Sof19798, 2, 0, Zer90215), 
LCon13089 = concatenate_layer([Zer90215,[[[0.2747, 0.5966, 0.3966, 0.0638, 0.6007, 0.6992, 0.7816, 0.6602, 0.7127, 0.6906, 0.2227, 0.6352], [0.3279, 0.6298, 0.984, 0.2259, 0.7831, 0.3664, 0.5261, 0.4595, 0.3127, 0.6027, 0.8152, 0.2554], [0.304, 0.784, 0.8942, 0.4538, 0.3452, 0.6944, 0.6027, 0.1243, 0.4959, 0.6312, 0.5194, 0.211]]]], 2, Con13089), 
LSub80239 = subtract_layer(Res42492,Con13089, Sub80239), 
exec_layers([LSub86631,LRes19402,LCon29547,LMul62165,LZer57064,LMul29253,LRes41908,LRes42492,LAdd44048,LRes42458,LRes82950,LCon66748,LUp_77979,LRes2951,LDot13185,LSof19798,LZer90215,LCon13089,LSub80239],["Sub86631","Res19402","Con29547","Mul62165","Zer57064","Mul29253","Res41908","Res42492","Add44048","Res42458","Res82950","Con66748","Up_77979","Res2951","Dot13185","Sof19798","Zer90215","Con13089","Sub80239"],Sub80239,"Sub80239")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, -0.2747000, -0.5966000, -0.3966000, -0.0638000, -0.6007000, -0.6992000, -0.7816000, -0.6602000, -0.7127000, -0.6906000, -0.2227000, -0.6352000], [0.0000000, 0.0000000, -0.0000000, 0.0000000, 0.0000000, 0.0000000, -0.3279000, -0.6298000, -0.9840000, -0.2259000, -0.7831000, -0.3664000, -0.5261000, -0.4595000, -0.3127000, -0.6027000, -0.8152000, -0.2554000], [-1.0000000, -1.0000000, -1.0000000, -1.0000000, -1.0000000, -1.0000000, -0.3040000, -0.7840000, -0.8942000, -0.4538000, -0.3682690, -0.6799037, -0.6027000, -0.1243000, -0.4959000, -0.6312000, -0.6286596, -0.1714247]]]

Expected (Unparsed): [[[0.0,0.0,0.0,0.0,0.0,0.0,-0.2747,-0.5966,-0.3966,-0.0638,-0.6007,-0.6992,-0.7816,-0.6602,-0.7127,-0.6906,-0.2227,-0.6352],[0.0,0.0,-0.0,0.0,0.0,0.0,-0.3279,-0.6298,-0.984,-0.2259,-0.7831,-0.3664,-0.5261,-0.4595,-0.3127,-0.6027,-0.8152,-0.2554],[-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-0.304,-0.784,-0.8942,-0.4538,-0.368268957312,-0.6799037,-0.6027,-0.1243,-0.4959,-0.6312,-0.62865956422,-0.17142470743399998]]]

Actual:   [[[0, 0, 0, 0, 0, 0, -0.2747, -0.5966, -0.3966, -0.0638, -0.6007, -0.6992, -0.7816, -0.6602, -0.7127, -0.6906, -0.2227, -0.6352], [0, 0, -0, 0, 0, 0, -0.3279, -0.6298, -0.984, -0.2259, -0.7831, -0.3664, -0.5261, -0.4595, -0.3127, -0.6027, -0.8152, -0.2554], [-1, -1, -1, -1, -1, -1, -0.304, -0.784, -0.8942, -0.4538, -0.3682, -0.6799, -0.6027, -0.1243, -0.4959, -0.6312, -0.6286, -0.1714]]]

Expected: [[[0, 0, 0, 0, 0, 0, -0.2747, -0.5966, -0.3966, -0.0638, -0.6007, -0.6992, -0.7816, -0.6602, -0.7127, -0.6906, -0.2227, -0.6352], [0, 0, -0, 0, 0, 0, -0.3279, -0.6298, -0.984, -0.2259, -0.7831, -0.3664, -0.5261, -0.4595, -0.3127, -0.6027, -0.8152, -0.2554], [-1, -1, -1, -1, -1, -1, -0.304, -0.784, -0.8942, -0.4538, -0.3682, -0.6799, -0.6027, -0.1243, -0.4959, -0.6312, -0.6286, -0.1714]]]