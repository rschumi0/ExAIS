import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max45344 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Max45344 = tf.keras.layers.Input(shape=([2, 2, 2]))

Max45344 = keras.layers.Maximum(name = 'Max45344', )([in0Max45344,in1Max45344])
Res3890 = keras.layers.Reshape((2, 2, 2, 1), name = 'Res3890', )(Max45344)
Con73612 = keras.layers.Conv3DTranspose(3, (1, 1, 2),strides=(1, 1, 1), padding='valid', name = 'Con73612', )(Res3890)
model = tf.keras.models.Model(inputs=[in0Max45344,in1Max45344], outputs=Con73612)
w = model.get_layer('Con73612').get_weights() 
w[0] = np.array([[[[[0.4825], [0.5628], [0.9771]], [[0.6715], [0.529], [0.3437]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con73612').set_weights(w) 
in0Max45344 = tf.constant([[[[0.5249, 0.377], [0.4371, 0.3692]], [[0.8033, 0.3233], [0.7659, 0.1948]]]])
in1Max45344 = tf.constant([[[[0.9304, 0.7153], [0.1525, 0.5139]], [[0.4007, 0.192], [0.7914, 0.4347]]]])
print (np.array2string(model.predict([in0Max45344,in1Max45344],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con73612.png')

LMax45344 = maximum_layer([[[[[0.5249, 0.377], [0.4371, 0.3692]], [[0.8033, 0.3233], [0.7659, 0.1948]]]], [[[[0.9304, 0.7153], [0.1525, 0.5139]], [[0.4007, 0.192], [0.7914, 0.4347]]]]], Max45344), 
LRes3890 = reshape_layer(Max45344, [2, 2, 2, 1], Res3890), 
LCon73612 = conv3D_transpose_layer(Res3890, 1, 1, 2,[[[[[0.4825], [0.5628], [0.9771]], [[0.6715], [0.529], [0.3437]]]]],[0, 0, 0], 1, 1, 1, false, Con73612), 
exec_layers([LMax45344,LRes3890,LCon73612],["Max45344","Res3890","Con73612"],Con73612,"Con73612")

Actual (Unparsed): [[[[[0.4489180, 0.5236291, 0.9090939], [0.9698959, 0.8947525, 1.0186981], [0.4803240, 0.3783937, 0.2458486]], [[0.2109007, 0.2459999, 0.4270904], [0.5414694, 0.5204488, 0.6523629], [0.3450838, 0.2718531, 0.1766274]]], [[[0.3875923, 0.4520973, 0.7849045], [0.6954082, 0.6068990, 0.5919907], [0.2170960, 0.1710257, 0.1111182]], [[0.3818505, 0.4453999, 0.7732770], [0.7411679, 0.6632998, 0.6967496], [0.2919011, 0.2299563, 0.1494064]]]]]

Expected (Unparsed): [[[[[0.448918,0.52362912,0.9090938399999999],[0.96989585,0.89475244,1.01869811],[0.48032395,0.37839370000000006,0.24584861000000002]],[[0.21090075,0.24599987999999998,0.42709041],[0.5414694,0.52044882,0.65236296],[0.34508385,0.2718531,0.17662743]]],[[[0.38759224999999997,0.45209723999999996,0.78490443],[0.6954081999999999,0.60689894,0.5919906399999999],[0.21709594999999998,0.1710257,0.11111821]],[[0.3818505,0.44539991999999995,0.7732769399999999],[0.74116785,0.66329976,0.6967495499999999],[0.29190105,0.2299563,0.14940639]]]]]

Actual:   [[[[[0.449, 0.5237, 0.9091], [0.9699, 0.8948, 1.0187], [0.4804, 0.3784, 0.2459]], [[0.211, 0.246, 0.4271], [0.5415, 0.5205, 0.6524], [0.3451, 0.2719, 0.1767]]], [[[0.3876, 0.4521, 0.785], [0.6955, 0.6069, 0.592], [0.2171, 0.1711, 0.1112]], [[0.3819, 0.4454, 0.7733], [0.7412, 0.6633, 0.6968], [0.292, 0.23, 0.1495]]]]]

Expected: [[[[[0.449, 0.5237, 0.9091], [0.9699, 0.8948, 1.0187], [0.4804, 0.3784, 0.2459]], [[0.211, 0.246, 0.4271], [0.5415, 0.5205, 0.6524], [0.3451, 0.2719, 0.1767]]], [[[0.3876, 0.4521, 0.785], [0.6955, 0.6069, 0.592], [0.2171, 0.1711, 0.1112]], [[0.3819, 0.4454, 0.7733], [0.7412, 0.6633, 0.6968], [0.292, 0.23, 0.1495]]]]]