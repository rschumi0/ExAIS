import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave48052 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))
in1Ave48052 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))
in0Sep77924 = tf.keras.layers.Input(shape=([2, 1]))
in0Mul76883 = tf.keras.layers.Input(shape=([1, 2]))
in1Mul76883 = tf.keras.layers.Input(shape=([1, 2]))
in0Con39596 = tf.keras.layers.Input(shape=([2, 2]))
in0Con76811 = tf.keras.layers.Input(shape=([32]))

Ave48052 = keras.layers.Average(name = 'Ave48052', )([in0Ave48052,in1Ave48052])
Res8637 = keras.layers.Reshape((1, 2, 4), name = 'Res8637', )(Ave48052)
Zer62124 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer62124', )(Res8637)
Res56343 = keras.layers.Reshape((3, 16), name = 'Res56343', )(Zer62124)
Fla63308 = keras.layers.Flatten(name = 'Fla63308', )(Res56343)
Sep77924 = keras.layers.SeparableConv1D(4, (1),strides=(1), padding='valid', name = 'Sep77924', )(in0Sep77924)
Mul76883 = keras.layers.Multiply(name = 'Mul76883', )([in0Mul76883,in1Mul76883])
Zer79421 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer79421', )(Mul76883)
Con39596 = keras.layers.Concatenate(axis=2, name = 'Con39596', )([Zer79421,in0Con39596])
Mul29574 = keras.layers.Multiply(name = 'Mul29574', )([Sep77924,Con39596])
Res46395 = keras.layers.Reshape((2, 4, 1), name = 'Res46395', )(Mul29574)
Res82354 = keras.layers.Reshape((2, 4, 1, 1), name = 'Res82354', )(Res46395)
Con10790 = keras.layers.Conv3DTranspose(4, (1, 4, 1),strides=(1, 1, 1), padding='same', name = 'Con10790', )(Res82354)
Res26184 = keras.layers.Reshape((2, 4, 4), name = 'Res26184', )(Con10790)
Res7156 = keras.layers.Reshape((2, 16), name = 'Res7156', )(Res26184)
Glo53763 = keras.layers.GlobalMaxPool1D(name = 'Glo53763', )(Res7156)
Con76811 = keras.layers.Concatenate(axis=1, name = 'Con76811', )([Glo53763,in0Con76811])
Add16911 = keras.layers.Add(name = 'Add16911', )([Fla63308,Con76811])
model = tf.keras.models.Model(inputs=[in0Ave48052,in1Ave48052,in0Sep77924,in0Mul76883,in1Mul76883,in0Con39596,in0Con76811], outputs=Add16911)
w = model.get_layer('Sep77924').get_weights() 
w[0] = np.array([[[0.2952]]])
w[1] = np.array([[[0.1766, 0.3771, 0.5876, 0.9265]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep77924').set_weights(w) 
w = model.get_layer('Con10790').get_weights() 
w[0] = np.array([[[[[0.3801], [0.8466], [0.2012], [0.2946]]], [[[0.724], [0.7658], [0.5446], [0.9364]]], [[[0.8003], [0.5226], [0.7843], [0.8651]]], [[[0.5059], [0.9787], [0.0428], [0.1755]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con10790').set_weights(w) 
in0Ave48052 = tf.constant([[[[[0.0321, 0.1854], [0.1051, 0.9739]], [[0.8241, 0.5811], [0.8074, 0.328]]]]])
in1Ave48052 = tf.constant([[[[[0.3366, 0.1137], [0.1862, 0.8713]], [[0.752, 0.8043], [0.8596, 0.9985]]]]])
in0Sep77924 = tf.constant([[[0.173], [0.5224]]])
in0Mul76883 = tf.constant([[[0.7988, 0.4934]]])
in1Mul76883 = tf.constant([[[0.7274, 0.5415]]])
in0Con39596 = tf.constant([[[0.2114, 0.0768], [0.5441, 0.1103]]])
in0Con76811 = tf.constant([[0.6748, 0.469, 0.6975, 0.3862, 0.8903, 0.9326, 0.4979, 0.5028, 0.9112, 0.2657, 0.3354, 0.7237, 0.6708, 0.3748, 0.4141, 0.2111, 0.5393, 0.0027, 0.3019, 0.3767, 0.0855, 0.5016, 0.2321, 0.3485, 0.1513, 0.6939, 0.3854, 0.1722, 0.1305, 0.2147, 0.5003, 0.8403]])
print (np.array2string(model.predict([in0Ave48052,in1Ave48052,in0Sep77924,in0Mul76883,in1Mul76883,in0Con39596,in0Con76811],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add16911.png')

LAve48052 = average_layer([[[[[[0.0321, 0.1854], [0.1051, 0.9739]], [[0.8241, 0.5811], [0.8074, 0.328]]]]], [[[[[0.3366, 0.1137], [0.1862, 0.8713]], [[0.752, 0.8043], [0.8596, 0.9985]]]]]], Ave48052), 
LRes8637 = reshape_layer(Ave48052, [1, 2, 4], Res8637), 
LZer62124 = zero_padding2D_layer(Res8637, 1, 1, 1, 1, Zer62124), 
LRes56343 = reshape_layer(Zer62124, [3, 16], Res56343), 
LFla63308 = flatten_layer(Res56343, Fla63308), 
LSep77924 = separable_conv1D_layer([[[0.173], [0.5224]]], 1,[[[[0.2952]]],[[[0.1766, 0.3771, 0.5876, 0.9265]]]],[0, 0, 0, 0], 1, false, Sep77924), 
LMul76883 = multiply_layer([[[[0.7988, 0.4934]]], [[[0.7274, 0.5415]]]], Mul76883), 
LZer79421 = zero_padding1D_layer(Mul76883, 1, 0, Zer79421), 
LCon39596 = concatenate_layer([Zer79421,[[[0.2114, 0.0768], [0.5441, 0.1103]]]], 2, Con39596), 
LMul29574 = multiply_layer([Sep77924,Con39596], Mul29574), 
LRes46395 = reshape_layer(Mul29574, [2, 4, 1], Res46395), 
LRes82354 = reshape_layer(Res46395, [2, 4, 1, 1], Res82354), 
LCon10790 = conv3D_transpose_layer(Res82354, 1, 4, 1,[[[[[0.3801], [0.8466], [0.2012], [0.2946]]], [[[0.724], [0.7658], [0.5446], [0.9364]]], [[[0.8003], [0.5226], [0.7843], [0.8651]]], [[[0.5059], [0.9787], [0.0428], [0.1755]]]]],[0, 0, 0, 0], 1, 1, 1, true, Con10790), 
LRes26184 = reshape_layer(Con10790, [2, 4, 4], Res26184), 
LRes7156 = reshape_layer(Res26184, [2, 16], Res7156), 
LGlo53763 = global_max_pool1D_layer(Res7156, Glo53763), 
LCon76811 = concatenate_layer([Glo53763,[[0.6748, 0.469, 0.6975, 0.3862, 0.8903, 0.9326, 0.4979, 0.5028, 0.9112, 0.2657, 0.3354, 0.7237, 0.6708, 0.3748, 0.4141, 0.2111, 0.5393, 0.0027, 0.3019, 0.3767, 0.0855, 0.5016, 0.2321, 0.3485, 0.1513, 0.6939, 0.3854, 0.1722, 0.1305, 0.2147, 0.5003, 0.8403]]], 1, Con76811), 
LAdd16911 = add_layer([Fla63308,Con76811], Add16911), 
exec_layers([LAve48052,LRes8637,LZer62124,LRes56343,LFla63308,LSep77924,LMul76883,LZer79421,LCon39596,LMul29574,LRes46395,LRes82354,LCon10790,LRes26184,LRes7156,LGlo53763,LCon76811,LAdd16911],["Ave48052","Res8637","Zer62124","Res56343","Fla63308","Sep77924","Mul76883","Zer79421","Con39596","Mul29574","Res46395","Res82354","Con10790","Res26184","Res7156","Glo53763","Con76811","Add16911"],Add16911,"Add16911")

Actual (Unparsed): [[0.0173624, 0.0252720, 0.0117439, 0.0193950, 0.0426534, 0.0619087, 0.0307924, 0.0427635, 0.0621260, 0.0747056, 0.0428848, 0.0670292, 0.0587279, 0.0530410, 0.0479165, 0.0601366, 0.6748000, 0.4690000, 0.6975000, 0.3862000, 1.0746500, 1.0821500, 0.6435500, 1.4254000, 1.6992500, 0.9584000, 1.1689000, 1.3869500, 0.6708000, 0.3748000, 0.4141000, 0.2111000, 0.5393000, 0.0027000, 0.3019000, 0.3767000, 0.0855000, 0.5016000, 0.2321000, 0.3485000, 0.1513000, 0.6939000, 0.3854000, 0.1722000, 0.1305000, 0.2147000, 0.5003000, 0.8403000]]

Expected (Unparsed): [[0.017362417805607308,0.025271987960260076,0.011743946701173714,0.019395043052964054,0.04265341684468477,0.06190869844554228,0.030792407737266998,0.04276346128493045,0.062125986728123694,0.07470564622185202,0.04288475105939235,0.06702917334470138,0.05872791045789898,0.05304100405090926,0.047916516586090696,0.06013659505904971,0.6748,0.469,0.6975,0.3862,1.07465,1.08215,0.6435500000000001,1.4254,1.6992500000000001,0.9583999999999999,1.1689,1.3869500000000001,0.6708,0.3748,0.4141,0.2111,0.5393,0.0027,0.3019,0.3767,0.0855,0.5016,0.2321,0.3485,0.1513,0.6939,0.3854,0.1722,0.1305,0.2147,0.5003,0.8403]]

Actual:   [[0.0174, 0.0253, 0.0118, 0.0194, 0.0427, 0.062, 0.0308, 0.0428, 0.0622, 0.0748, 0.0429, 0.0671, 0.0588, 0.0531, 0.048, 0.0602, 0.6748, 0.469, 0.6975, 0.3862, 1.0747, 1.0822, 0.6436, 1.4254, 1.6993, 0.9584, 1.1689, 1.387, 0.6708, 0.3748, 0.4141, 0.2111, 0.5393, 0.0027, 0.3019, 0.3767, 0.0855, 0.5016, 0.2321, 0.3485, 0.1513, 0.6939, 0.3854, 0.1722, 0.1305, 0.2147, 0.5003, 0.8403]]

Expected: [[0.0174, 0.0253, 0.0118, 0.0194, 0.0427, 0.062, 0.0308, 0.0428, 0.0622, 0.0748, 0.0429, 0.0671, 0.0588, 0.0531, 0.048, 0.0602, 0.6748, 0.469, 0.6975, 0.3862, 1.0747, 1.0822, 0.6436, 1.4254, 1.6993, 0.9584, 1.1689, 1.387, 0.6708, 0.3748, 0.4141, 0.2111, 0.5393, 0.0027, 0.3019, 0.3767, 0.0855, 0.5016, 0.2321, 0.3485, 0.1513, 0.6939, 0.3854, 0.1722, 0.1305, 0.2147, 0.5003, 0.8403]]