import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub26910 = tf.keras.layers.Input(shape=([3, 3, 2]))
in1Sub26910 = tf.keras.layers.Input(shape=([3, 3, 2]))
in0Thr52399 = tf.keras.layers.Input(shape=([2, 1]))
in0Con51785 = tf.keras.layers.Input(shape=([17]))
in0Con68024 = tf.keras.layers.Input(shape=([18, 3, 1]))
in0Ave80243 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Ave80243 = tf.keras.layers.Input(shape=([2, 2, 2]))

Sub26910 = keras.layers.Subtract(name = 'Sub26910', )([in0Sub26910,in1Sub26910])
Res67952 = keras.layers.Reshape((3, 6), name = 'Res67952', )(Sub26910)
Fla89215 = keras.layers.Flatten(name = 'Fla89215', )(Res67952)
Thr52399 = keras.layers.ThresholdedReLU(theta=0.6878455372919107, name = 'Thr52399', input_shape=(2, 1))(in0Thr52399)
LST28773 = keras.layers.LSTM(1,recurrent_activation='sigmoid', name = 'LST28773', )(Thr52399)
Con51785 = keras.layers.Concatenate(axis=1, name = 'Con51785', )([LST28773,in0Con51785])
Max23382 = keras.layers.Maximum(name = 'Max23382', )([Fla89215,Con51785])
Res37090 = keras.layers.Reshape((18, 1), name = 'Res37090', )(Max23382)
Res97890 = keras.layers.Reshape((18, 1, 1), name = 'Res97890', )(Res37090)
Zer45065 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer45065', )(Res97890)
Con68024 = keras.layers.Concatenate(axis=3, name = 'Con68024', )([Zer45065,in0Con68024])
Ave80243 = keras.layers.Average(name = 'Ave80243', )([in0Ave80243,in1Ave80243])
Zer21805 = keras.layers.ZeroPadding2D(padding=((16, 0), (1, 0)), name = 'Zer21805', )(Ave80243)
Max48470 = keras.layers.Maximum(name = 'Max48470', )([Con68024,Zer21805])
model = tf.keras.models.Model(inputs=[in0Sub26910,in1Sub26910,in0Thr52399,in0Con51785,in0Con68024,in0Ave80243,in1Ave80243], outputs=Max48470)
w = model.get_layer('LST28773').get_weights() 
w[0] = np.array([[5, 10, 3, 10]])
w[1] = np.array([[8, 6, 2, 2]])
w[2] = np.array([9, 7, 8, 4])
model.get_layer('LST28773').set_weights(w) 
in0Sub26910 = tf.constant([[[[0.4986, 0.2937], [0.3975, 0.0456], [0.9477, 0.2416]], [[0.7315, 0.5049], [0.5468, 0.3842], [0.9516, 0.1659]], [[0.3317, 0.9712], [0.724, 0.4233], [0.1995, 0.6437]]]])
in1Sub26910 = tf.constant([[[[0.7215, 0.082], [0.4094, 0.2393], [0.7941, 0.2247]], [[0.3307, 0.1023], [0.4193, 0.436], [0.8775, 0.4256]], [[0.0304, 0.6188], [0.7674, 0.7593], [0.4047, 0.7602]]]])
in0Thr52399 = tf.constant([[[0.4664], [0.7121]]])
in0Con51785 = tf.constant([[0.3166, 0.1428, 0.3839, 0.8813, 0.8165, 0.0821, 0.4065, 0.3142, 0.5424, 0.8108, 0.7508, 0.9502, 0.8255, 0.4396, 0.2741, 0.1005, 0.3106]])
in0Con68024 = tf.constant([[[[0.2164], [0.1954], [0.3268]], [[0.506], [0.4425], [0.502]], [[0.5837], [0.7974], [0.1123]], [[0.9739], [0.872], [0.1171]], [[0.5249], [0.3319], [0.8193]], [[0.7818], [0.6683], [0.0995]], [[0.1024], [0.8294], [0.2011]], [[0.2238], [0.6513], [0.4909]], [[0.3561], [0.9792], [0.5629]], [[0.6972], [0.9417], [0.6649]], [[0.3694], [0.4494], [0.4026]], [[0.6569], [0.4172], [0.3793]], [[0.5967], [0.5711], [0.6363]], [[0.9797], [0.5394], [0.6539]], [[0.9043], [0.794], [0.874]], [[0.0271], [0.5428], [0.3191]], [[0.2392], [0.084], [0.2239]], [[0.5003], [0.0172], [0.1572]]]])
in0Ave80243 = tf.constant([[[[0.4147, 0.9118], [0.4445, 0.0477]], [[0.093, 0.3415], [0.1529, 0.8284]]]])
in1Ave80243 = tf.constant([[[[0.1432, 0.2776], [0.9578, 0.9957]], [[0.7391, 0.9236], [0.1167, 0.7947]]]])
print (np.array2string(model.predict([in0Sub26910,in1Sub26910,in0Thr52399,in0Con51785,in0Con68024,in0Ave80243,in1Ave80243],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max48470.png')

LSub26910 = subtract_layer([[[[0.4986, 0.2937], [0.3975, 0.0456], [0.9477, 0.2416]], [[0.7315, 0.5049], [0.5468, 0.3842], [0.9516, 0.1659]], [[0.3317, 0.9712], [0.724, 0.4233], [0.1995, 0.6437]]]], [[[[0.7215, 0.082], [0.4094, 0.2393], [0.7941, 0.2247]], [[0.3307, 0.1023], [0.4193, 0.436], [0.8775, 0.4256]], [[0.0304, 0.6188], [0.7674, 0.7593], [0.4047, 0.7602]]]], Sub26910), 
LRes67952 = reshape_layer(Sub26910, [3, 6], Res67952), 
LFla89215 = flatten_layer(Res67952, Fla89215), 
LThr52399 = thresholded_relu_layer([[[0.4664], [0.7121]]], 0.6878455372919107, Thr52399), 
LLST28773 = lstm_layer(Thr52399,[[5, 10, 3, 10]],[[8, 6, 2, 2]],[9, 7, 8, 4], LST28773), 
LCon51785 = concatenate_layer([LST28773,[[0.3166, 0.1428, 0.3839, 0.8813, 0.8165, 0.0821, 0.4065, 0.3142, 0.5424, 0.8108, 0.7508, 0.9502, 0.8255, 0.4396, 0.2741, 0.1005, 0.3106]]], 1, Con51785), 
LMax23382 = maximum_layer([Fla89215,Con51785], Max23382), 
LRes37090 = reshape_layer(Max23382, [18, 1], Res37090), 
LRes97890 = reshape_layer(Res37090, [18, 1, 1], Res97890), 
LZer45065 = zero_padding2D_layer(Res97890, 0, 0, 2, 0, Zer45065), 
LCon68024 = concatenate_layer([Zer45065,[[[[0.2164], [0.1954], [0.3268]], [[0.506], [0.4425], [0.502]], [[0.5837], [0.7974], [0.1123]], [[0.9739], [0.872], [0.1171]], [[0.5249], [0.3319], [0.8193]], [[0.7818], [0.6683], [0.0995]], [[0.1024], [0.8294], [0.2011]], [[0.2238], [0.6513], [0.4909]], [[0.3561], [0.9792], [0.5629]], [[0.6972], [0.9417], [0.6649]], [[0.3694], [0.4494], [0.4026]], [[0.6569], [0.4172], [0.3793]], [[0.5967], [0.5711], [0.6363]], [[0.9797], [0.5394], [0.6539]], [[0.9043], [0.794], [0.874]], [[0.0271], [0.5428], [0.3191]], [[0.2392], [0.084], [0.2239]], [[0.5003], [0.0172], [0.1572]]]]], 3, Con68024), 
LAve80243 = average_layer([[[[[0.4147, 0.9118], [0.4445, 0.0477]], [[0.093, 0.3415], [0.1529, 0.8284]]]], [[[[0.1432, 0.2776], [0.9578, 0.9957]], [[0.7391, 0.9236], [0.1167, 0.7947]]]]], Ave80243), 
LZer21805 = zero_padding2D_layer(Ave80243, 16, 0, 1, 0, Zer21805), 
LMax48470 = maximum_layer([Con68024,Zer21805], Max48470), 
exec_layers([LSub26910,LRes67952,LFla89215,LThr52399,LLST28773,LCon51785,LMax23382,LRes37090,LRes97890,LZer45065,LCon68024,LAve80243,LZer21805,LMax48470],["Sub26910","Res67952","Fla89215","Thr52399","LST28773","Con51785","Max23382","Res37090","Res97890","Zer45065","Con68024","Ave80243","Zer21805","Max48470"],Max48470,"Max48470")

Actual (Unparsed): [[[[0.0000000, 0.2164000], [0.0000000, 0.1954000], [0.9640156, 0.3268000]], [[0.0000000, 0.5060000], [0.0000000, 0.4425000], [0.3166000, 0.5020000]], [[0.0000000, 0.5837000], [0.0000000, 0.7974000], [0.1428000, 0.1123000]], [[0.0000000, 0.9739000], [0.0000000, 0.8720000], [0.3839000, 0.1171000]], [[0.0000000, 0.5249000], [0.0000000, 0.3319000], [0.8813000, 0.8193000]], [[0.0000000, 0.7818000], [0.0000000, 0.6683000], [0.8165000, 0.0995000]], [[0.0000000, 0.1024000], [0.0000000, 0.8294000], [0.4008000, 0.2011000]], [[0.0000000, 0.2238000], [0.0000000, 0.6513000], [0.4065000, 0.4909000]], [[0.0000000, 0.3561000], [0.0000000, 0.9792000], [0.3142000, 0.5629000]], [[0.0000000, 0.6972000], [0.0000000, 0.9417000], [0.5424000, 0.6649000]], [[0.0000000, 0.3694000], [0.0000000, 0.4494000], [0.8108000, 0.4026000]], [[0.0000000, 0.6569000], [0.0000000, 0.4172000], [0.7508000, 0.3793000]], [[0.0000000, 0.5967000], [0.0000000, 0.5711000], [0.9502000, 0.6363000]], [[0.0000000, 0.9797000], [0.0000000, 0.5394000], [0.8255000, 0.6539000]], [[0.0000000, 0.9043000], [0.0000000, 0.7940000], [0.4396000, 0.8740000]], [[0.0000000, 0.0271000], [0.0000000, 0.5428000], [0.2741000, 0.3191000]], [[0.0000000, 0.2392000], [0.2789500, 0.5947000], [0.7011500, 0.5217000]], [[0.0000000, 0.5003000], [0.4160500, 0.6325500], [0.3106000, 0.8115500]]]]

Expected (Unparsed): [[[[0,0.2164],[0,0.1954],[0.9640156471126763,0.3268]],[[0,0.506],[0,0.4425],[0.3166,0.502]],[[0,0.5837],[0,0.7974],[0.1428,0.1123]],[[0,0.9739],[0,0.872],[0.3839,0.1171]],[[0,0.5249],[0,0.3319],[0.8813,0.8193]],[[0,0.7818],[0,0.6683],[0.8165,0.0995]],[[0,0.1024],[0,0.8294],[0.40080000000000005,0.2011]],[[0,0.2238],[0,0.6513],[0.4065,0.4909]],[[0,0.3561],[0,0.9792],[0.3142,0.5629]],[[0,0.6972],[0,0.9417],[0.5424,0.6649]],[[0,0.3694],[0,0.4494],[0.8108,0.4026]],[[0,0.6569],[0,0.4172],[0.7508,0.3793]],[[0,0.5967],[0,0.5711],[0.9502,0.6363]],[[0,0.9797],[0,0.5394],[0.8255,0.6539]],[[0,0.9043],[0,0.794],[0.4396,0.874]],[[0,0.0271],[0,0.5428],[0.2741,0.3191]],[[0,0.2392],[0.27895000000000003,0.5947],[0.7011499999999999,0.5217]],[[0,0.5003],[0.41605,0.63255],[0.3106,0.81155]]]]

Actual:   [[[[0, 0.2164], [0, 0.1954], [0.9641, 0.3268]], [[0, 0.506], [0, 0.4425], [0.3166, 0.502]], [[0, 0.5837], [0, 0.7974], [0.1428, 0.1123]], [[0, 0.9739], [0, 0.872], [0.3839, 0.1171]], [[0, 0.5249], [0, 0.3319], [0.8813, 0.8193]], [[0, 0.7818], [0, 0.6683], [0.8165, 0.0995]], [[0, 0.1024], [0, 0.8294], [0.4008, 0.2011]], [[0, 0.2238], [0, 0.6513], [0.4065, 0.4909]], [[0, 0.3561], [0, 0.9792], [0.3142, 0.5629]], [[0, 0.6972], [0, 0.9417], [0.5424, 0.6649]], [[0, 0.3694], [0, 0.4494], [0.8108, 0.4026]], [[0, 0.6569], [0, 0.4172], [0.7508, 0.3793]], [[0, 0.5967], [0, 0.5711], [0.9502, 0.6363]], [[0, 0.9797], [0, 0.5394], [0.8255, 0.6539]], [[0, 0.9043], [0, 0.794], [0.4396, 0.874]], [[0, 0.0271], [0, 0.5428], [0.2741, 0.3191]], [[0, 0.2392], [0.279, 0.5947], [0.7012, 0.5217]], [[0, 0.5003], [0.4161, 0.6326], [0.3106, 0.8116]]]]

Expected: [[[[0, 0.2164], [0, 0.1954], [0.9641, 0.3268]], [[0, 0.506], [0, 0.4425], [0.3166, 0.502]], [[0, 0.5837], [0, 0.7974], [0.1428, 0.1123]], [[0, 0.9739], [0, 0.872], [0.3839, 0.1171]], [[0, 0.5249], [0, 0.3319], [0.8813, 0.8193]], [[0, 0.7818], [0, 0.6683], [0.8165, 0.0995]], [[0, 0.1024], [0, 0.8294], [0.4009, 0.2011]], [[0, 0.2238], [0, 0.6513], [0.4065, 0.4909]], [[0, 0.3561], [0, 0.9792], [0.3142, 0.5629]], [[0, 0.6972], [0, 0.9417], [0.5424, 0.6649]], [[0, 0.3694], [0, 0.4494], [0.8108, 0.4026]], [[0, 0.6569], [0, 0.4172], [0.7508, 0.3793]], [[0, 0.5967], [0, 0.5711], [0.9502, 0.6363]], [[0, 0.9797], [0, 0.5394], [0.8255, 0.6539]], [[0, 0.9043], [0, 0.794], [0.4396, 0.874]], [[0, 0.0271], [0, 0.5428], [0.2741, 0.3191]], [[0, 0.2392], [0.279, 0.5947], [0.7012, 0.5217]], [[0, 0.5003], [0.4161, 0.6326], [0.3106, 0.8116]]]]