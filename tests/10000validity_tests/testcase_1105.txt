import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub24065 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in1Sub24065 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in0Con68653 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con90895 = tf.keras.layers.Input(shape=([3, 3, 7]))

Sub24065 = keras.layers.Subtract(name = 'Sub24065', )([in0Sub24065,in1Sub24065])
Res51337 = keras.layers.Reshape((3, 3, 9), name = 'Res51337', )(Sub24065)
Con68653 = keras.layers.Conv2D(4, (2, 1),strides=(1, 1), padding='valid', dilation_rate=(1, 1), name = 'Con68653', )(in0Con68653)
Con87994 = keras.layers.Conv2D(2, (1, 1),strides=(1, 1), padding='same', dilation_rate=(1, 1), name = 'Con87994', )(Con68653)
Zer43420 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer43420', )(Con87994)
Con90895 = keras.layers.Concatenate(axis=3, name = 'Con90895', )([Zer43420,in0Con90895])
Min37235 = keras.layers.Minimum(name = 'Min37235', )([Res51337,Con90895])
Glo13399 = keras.layers.GlobalMaxPool2D(name = 'Glo13399', )(Min37235)
model = tf.keras.models.Model(inputs=[in0Sub24065,in1Sub24065,in0Con68653,in0Con90895], outputs=Glo13399)
w = model.get_layer('Con68653').get_weights() 
w[0] = np.array([[[[0.6195, 0.012, 0.255, 0.5937]]], [[[0.3074, 0.767, 0.6119, 0.8643]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con68653').set_weights(w) 
w = model.get_layer('Con87994').get_weights() 
w[0] = np.array([[[[0.057, 0.9631], [0.2311, 0.7709], [0.7502, 0.4322], [0.6972, 0.4148]]]])
w[1] = np.array([0, 0])
model.get_layer('Con87994').set_weights(w) 
in0Sub24065 = tf.constant([[[[[0.5939, 0.5864, 0.704], [0.4148, 0.4725, 0.3405], [0.4765, 0.997, 0.0654]], [[0.3354, 0.7788, 0.5472], [0.0813, 0.035, 0.8348], [0.9189, 0.8772, 0.2296]], [[0.5767, 0.8616, 0.7873], [0.1267, 0.9262, 0.6703], [0.9699, 0.9486, 0.7305]]], [[[0.0141, 0.4007, 0.1541], [0.7891, 0.8569, 0.0105], [0.5574, 0.412, 0.8]], [[0.8638, 0.5566, 0.9943], [0.8857, 0.7044, 0.4036], [0.1602, 0.8827, 0.1585]], [[0.9485, 0.134, 0.3435], [0.3764, 0.5731, 0.1276], [0.2692, 0.9205, 0.0936]]], [[[0.7009, 0.0485, 0.2608], [0.2532, 0.2472, 0.4458], [0.3282, 0.0565, 0.9824]], [[0.8084, 0.1924, 0.601], [0.0758, 0.3304, 0.0815], [0.2501, 0.8527, 0.1709]], [[0.6403, 0.9644, 0.3155], [0.4544, 0.5377, 0.3539], [0.5884, 0.7015, 0.2746]]]]])
in1Sub24065 = tf.constant([[[[[0.5528, 0.269, 0.0332], [0.3204, 0.3247, 0.0893], [0.574, 0.5094, 0.9067]], [[0.7323, 0.8355, 0.9684], [0.9735, 0.1304, 0.5087], [0.7114, 0.7615, 0.0771]], [[0.0114, 0.44, 0.8297], [0.5273, 0.3436, 0.0167], [0.1559, 0.5298, 0.2901]]], [[[0.5403, 0.2666, 0.3409], [0.7729, 0.9476, 0.8804], [0.898, 0.2068, 0.587]], [[0.1106, 0.5021, 0.0399], [0.269, 0.6145, 0.2498], [0.2693, 0.8814, 0.2056]], [[0.4851, 0.6173, 0.7785], [0.3498, 0.3007, 0.2234], [0.8016, 0.6572, 0.9073]]], [[[0.1614, 0.9685, 0.9481], [0.5099, 0.8296, 0.5828], [0.7277, 0.1863, 0.2745]], [[0.7546, 0.9292, 0.1415], [0.8086, 0.1028, 0.6055], [0.6315, 0.8621, 0.7095]], [[0.8394, 0.7938, 0.8673], [0.2384, 0.5208, 0.5995], [0.1178, 0.4954, 0.796]]]]])
in0Con68653 = tf.constant([[[[0.1515]], [[0.9652]]]])
in0Con90895 = tf.constant([[[[0.2325, 0.6571, 0.5192, 0.962, 0.0015, 0.9991, 0.2775], [0.9703, 0.0612, 0.0411, 0.5926, 0.4898, 0.9874, 0.8708], [0.9934, 0.4432, 0.8034, 0.3332, 0.1705, 0.8549, 0.3804]], [[0.0773, 0.3273, 0.061, 0.3459, 0.4267, 0.7749, 0.8201], [0.8299, 0.9095, 0.9757, 0.3378, 0.0107, 0.3314, 0.7634], [0.7809, 0.0884, 0.6041, 0.5252, 0.2004, 0.0087, 0.1532]], [[0.715, 0.9098, 0.9903, 0.6186, 0.1888, 0.2727, 0.6632], [0.7365, 0.5006, 0.5411, 0.4207, 0.7431, 0.4769, 0.8554], [0.4053, 0.3784, 0.1037, 0.7705, 0.4021, 0.5823, 0.9969]]]])
print (np.array2string(model.predict([in0Sub24065,in1Sub24065,in0Con68653,in0Con90895],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Glo13399.png')

LSub24065 = subtract_layer([[[[[0.5939, 0.5864, 0.704], [0.4148, 0.4725, 0.3405], [0.4765, 0.997, 0.0654]], [[0.3354, 0.7788, 0.5472], [0.0813, 0.035, 0.8348], [0.9189, 0.8772, 0.2296]], [[0.5767, 0.8616, 0.7873], [0.1267, 0.9262, 0.6703], [0.9699, 0.9486, 0.7305]]], [[[0.0141, 0.4007, 0.1541], [0.7891, 0.8569, 0.0105], [0.5574, 0.412, 0.8]], [[0.8638, 0.5566, 0.9943], [0.8857, 0.7044, 0.4036], [0.1602, 0.8827, 0.1585]], [[0.9485, 0.134, 0.3435], [0.3764, 0.5731, 0.1276], [0.2692, 0.9205, 0.0936]]], [[[0.7009, 0.0485, 0.2608], [0.2532, 0.2472, 0.4458], [0.3282, 0.0565, 0.9824]], [[0.8084, 0.1924, 0.601], [0.0758, 0.3304, 0.0815], [0.2501, 0.8527, 0.1709]], [[0.6403, 0.9644, 0.3155], [0.4544, 0.5377, 0.3539], [0.5884, 0.7015, 0.2746]]]]], [[[[[0.5528, 0.269, 0.0332], [0.3204, 0.3247, 0.0893], [0.574, 0.5094, 0.9067]], [[0.7323, 0.8355, 0.9684], [0.9735, 0.1304, 0.5087], [0.7114, 0.7615, 0.0771]], [[0.0114, 0.44, 0.8297], [0.5273, 0.3436, 0.0167], [0.1559, 0.5298, 0.2901]]], [[[0.5403, 0.2666, 0.3409], [0.7729, 0.9476, 0.8804], [0.898, 0.2068, 0.587]], [[0.1106, 0.5021, 0.0399], [0.269, 0.6145, 0.2498], [0.2693, 0.8814, 0.2056]], [[0.4851, 0.6173, 0.7785], [0.3498, 0.3007, 0.2234], [0.8016, 0.6572, 0.9073]]], [[[0.1614, 0.9685, 0.9481], [0.5099, 0.8296, 0.5828], [0.7277, 0.1863, 0.2745]], [[0.7546, 0.9292, 0.1415], [0.8086, 0.1028, 0.6055], [0.6315, 0.8621, 0.7095]], [[0.8394, 0.7938, 0.8673], [0.2384, 0.5208, 0.5995], [0.1178, 0.4954, 0.796]]]]], Sub24065), 
LRes51337 = reshape_layer(Sub24065, [3, 3, 9], Res51337), 
LCon68653 = conv2D_layer([[[[0.1515]], [[0.9652]]]], 2, 1,[[[[0.6195, 0.012, 0.255, 0.5937]]], [[[0.3074, 0.767, 0.6119, 0.8643]]]],[0, 0, 0, 0], 1, 1, false, 1, 1, Con68653), 
LCon87994 = conv2D_layer(Con68653, 1, 1,[[[[0.057, 0.9631], [0.2311, 0.7709], [0.7502, 0.4322], [0.6972, 0.4148]]]],[0, 0], 1, 1, true, 1, 1, Con87994), 
LZer43420 = zero_padding2D_layer(Con87994, 2, 0, 2, 0, Zer43420), 
LCon90895 = concatenate_layer([Zer43420,[[[[0.2325, 0.6571, 0.5192, 0.962, 0.0015, 0.9991, 0.2775], [0.9703, 0.0612, 0.0411, 0.5926, 0.4898, 0.9874, 0.8708], [0.9934, 0.4432, 0.8034, 0.3332, 0.1705, 0.8549, 0.3804]], [[0.0773, 0.3273, 0.061, 0.3459, 0.4267, 0.7749, 0.8201], [0.8299, 0.9095, 0.9757, 0.3378, 0.0107, 0.3314, 0.7634], [0.7809, 0.0884, 0.6041, 0.5252, 0.2004, 0.0087, 0.1532]], [[0.715, 0.9098, 0.9903, 0.6186, 0.1888, 0.2727, 0.6632], [0.7365, 0.5006, 0.5411, 0.4207, 0.7431, 0.4769, 0.8554], [0.4053, 0.3784, 0.1037, 0.7705, 0.4021, 0.5823, 0.9969]]]]], 3, Con90895), 
LMin37235 = minimum_layer([Res51337,Con90895], Min37235), 
LGlo13399 = global_max_pool2D_layer(Min37235, Glo13399), 
exec_layers([LSub24065,LRes51337,LCon68653,LCon87994,LZer43420,LCon90895,LMin37235,LGlo13399],["Sub24065","Res51337","Con68653","Con87994","Zer43420","Con90895","Min37235","Glo13399"],Glo13399,"Glo13399")

Actual (Unparsed): [[0.0000000, 0.1706000, 0.8299000, 0.6167000, 0.5826000, 0.3332000, 0.4021000, 0.4876000, 0.6632000]]

Expected (Unparsed): [[0,0.17060000000000008,0.8299,0.6167,0.5826,0.3332,0.4021,0.48760000000000003,0.6632]]

Actual:   [[0, 0.1706, 0.8299, 0.6167, 0.5826, 0.3332, 0.4021, 0.4876, 0.6632]]

Expected: [[0, 0.1707, 0.8299, 0.6167, 0.5826, 0.3332, 0.4021, 0.4877, 0.6632]]