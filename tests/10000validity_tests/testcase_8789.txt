import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub64968 = tf.keras.layers.Input(shape=([3, 2, 3]))
in1Sub64968 = tf.keras.layers.Input(shape=([3, 2, 3]))
in0Con98703 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in0Con9820 = tf.keras.layers.Input(shape=([16]))

Sub64968 = keras.layers.Subtract(name = 'Sub64968', )([in0Sub64968,in1Sub64968])
Res94940 = keras.layers.Reshape((3, 6), name = 'Res94940', )(Sub64968)
Bat92281 = keras.layers.BatchNormalization(axis=1, epsilon=0.3013353693527814,  name = 'Bat92281', )(Res94940)
ELU25241 = keras.layers.ELU(alpha=3.8003129332215497, name = 'ELU25241', )(Bat92281)
Fla31294 = keras.layers.Flatten(name = 'Fla31294', )(ELU25241)
Con98703 = keras.layers.Conv3DTranspose(2, (1, 1, 1),strides=(1, 1, 1), padding='valid', name = 'Con98703', )(in0Con98703)
Glo86245 = keras.layers.GlobalMaxPool3D(name = 'Glo86245', )(Con98703)
Con9820 = keras.layers.Concatenate(axis=1, name = 'Con9820', )([Glo86245,in0Con9820])
Mul82935 = keras.layers.Multiply(name = 'Mul82935', )([Fla31294,Con9820])
model = tf.keras.models.Model(inputs=[in0Sub64968,in1Sub64968,in0Con98703,in0Con9820], outputs=Mul82935)
w = model.get_layer('Bat92281').get_weights() 
w[0] = np.array([0.0989, 0.675, 0.332])
w[1] = np.array([0.6791, 0.0748, 0.1516])
w[2] = np.array([0.9647, 0.6614, 0.5898])
w[3] = np.array([0.6267, 0.8488, 0.6175])
model.get_layer('Bat92281').set_weights(w) 
w = model.get_layer('Con98703').get_weights() 
w[0] = np.array([[[[[0.1999, 0.6775], [0.3651, 0.931]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con98703').set_weights(w) 
in0Sub64968 = tf.constant([[[[0.7477, 0.545, 0.8719], [0.3503, 0.2681, 0.6083]], [[0.4814, 0.1375, 0.1361], [0.1632, 0.6828, 0.5189]], [[0.4541, 0.098, 0.0079], [0.9665, 0.006, 0.4121]]]])
in1Sub64968 = tf.constant([[[[0.7883, 0.8046, 0.8101], [0.8542, 0.5428, 0.5358]], [[0.7835, 0.2552, 0.4328], [0.4149, 0.2024, 0.3203]], [[0.7989, 0.7895, 0.4334], [0.0952, 0.9733, 0.1917]]]])
in0Con98703 = tf.constant([[[[[0.2325, 0.0595]]]]])
in0Con9820 = tf.constant([[0.39, 0.8909, 0.613, 0.291, 0.2644, 0.3512, 0.577, 0.4677, 0.9042, 0.9066, 0.4637, 0.1962, 0.0165, 0.0601, 0.7971, 0.1553]])
print (np.array2string(model.predict([in0Sub64968,in1Sub64968,in0Con98703,in0Con9820],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul82935.png')

LSub64968 = subtract_layer([[[[0.7477, 0.545, 0.8719], [0.3503, 0.2681, 0.6083]], [[0.4814, 0.1375, 0.1361], [0.1632, 0.6828, 0.5189]], [[0.4541, 0.098, 0.0079], [0.9665, 0.006, 0.4121]]]], [[[[0.7883, 0.8046, 0.8101], [0.8542, 0.5428, 0.5358]], [[0.7835, 0.2552, 0.4328], [0.4149, 0.2024, 0.3203]], [[0.7989, 0.7895, 0.4334], [0.0952, 0.9733, 0.1917]]]], Sub64968), 
LRes94940 = reshape_layer(Sub64968, [3, 6], Res94940), 
LBat92281 = batch_normalization_layer(Res94940, 1, 0.3013353693527814, [0.0989, 0.675, 0.332], [0.6791, 0.0748, 0.1516], [0.9647, 0.6614, 0.5898], [0.6267, 0.8488, 0.6175], Bat92281), 
LELU25241 = elu_layer(Bat92281, 3.8003129332215497, ELU25241), 
LFla31294 = flatten_layer(ELU25241, Fla31294), 
LCon98703 = conv3D_transpose_layer([[[[[0.2325, 0.0595]]]]], 1, 1, 1,[[[[[0.1999, 0.6775], [0.3651, 0.931]]]]],[0, 0], 1, 1, 1, false, Con98703), 
LGlo86245 = global_max_pool3D_layer(Con98703, Glo86245), 
LCon9820 = concatenate_layer([Glo86245,[[0.39, 0.8909, 0.613, 0.291, 0.2644, 0.3512, 0.577, 0.4677, 0.9042, 0.9066, 0.4637, 0.1962, 0.0165, 0.0601, 0.7971, 0.1553]]], 1, Con9820), 
LMul82935 = multiply_layer([Fla31294,Con9820], Mul82935), 
exec_layers([LSub64968,LRes94940,LBat92281,LELU25241,LFla31294,LCon98703,LGlo86245,LCon9820,LMul82935],["Sub64968","Res94940","Bat92281","ELU25241","Fla31294","Con98703","Glo86245","Con9820","Mul82935"],Mul82935,"Mul82935")

Actual (Unparsed): [[0.0499806, 0.0776324, 0.2286982, 0.4706884, 0.3382898, 0.1709637, -0.4143344, -0.4538345, -0.8998147, -0.6992563, -0.1318373, -0.6706671, -0.2786160, -0.1889163, -0.0113692, 0.0149708, -0.9735597, 0.0036740]]

Expected (Unparsed): [[0.049980590222887734,0.0776324464371406,0.22869816878646235,0.47068838777120603,0.3382898461680059,0.17096368008770307,-0.41433437807150797,-0.45383443508153326,-0.8998146781650237,-0.699256283419597,-0.131837250018946,-0.6706670153746733,-0.2786160276791498,-0.18891634075322236,-0.011369209147210587,0.014970815754791833,-0.9735597545622487,0.003673950730968699]]

Actual:   [[0.05, 0.0777, 0.2287, 0.4707, 0.3383, 0.171, -0.4143, -0.4538, -0.8998, -0.6992, -0.1318, -0.6706, -0.2786, -0.1889, -0.0113, 0.015, -0.9735, 0.0037]]

Expected: [[0.05, 0.0777, 0.2287, 0.4707, 0.3383, 0.171, -0.4143, -0.4538, -0.8998, -0.6992, -0.1318, -0.6706, -0.2786, -0.1889, -0.0113, 0.015, -0.9735, 0.0037]]