import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min79550 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in1Min79550 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))

Min79550 = keras.layers.Minimum(name = 'Min79550', )([in0Min79550,in1Min79550])
Con89902 = keras.layers.Conv3D(3, (1, 1, 1),strides=(1, 1, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con89902', )(Min79550)
Zer71290 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer71290', )(Con89902)
model = tf.keras.models.Model(inputs=[in0Min79550,in1Min79550], outputs=Zer71290)
w = model.get_layer('Con89902').get_weights() 
w[0] = np.array([[[[[0.7834, 0.8134, 0.4073], [0.3132, 0.2578, 0.2367]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con89902').set_weights(w) 
in0Min79550 = tf.constant([[[[[0.4276, 0.2503]]]]])
in1Min79550 = tf.constant([[[[[0.082, 0.3449]]]]])
print (np.array2string(model.predict([in0Min79550,in1Min79550],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Zer71290.png')

LMin79550 = minimum_layer([[[[[[0.4276, 0.2503]]]]], [[[[[0.082, 0.3449]]]]]], Min79550), 
LCon89902 = conv3D_layer(Min79550, 1, 1, 1,[[[[[0.7834, 0.8134, 0.4073], [0.3132, 0.2578, 0.2367]]]]],[0, 0, 0], 1, 1, 1, true, 1, 1, 1, Con89902), 
LZer71290 = zero_padding3D_layer(Con89902, 1, 1, 1, 1, 1, 1, Zer71290), 
exec_layers([LMin79550,LCon89902,LZer71290],["Min79550","Con89902","Zer71290"],Zer71290,"Zer71290")

Actual (Unparsed): [[[[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.1426328, 0.1312261, 0.0926446], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]]]]

Expected (Unparsed): [[[[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]]],[[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0.14263276,0.13122614,0.09264461],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]]],[[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]]]]]

Actual:   [[[[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0.1427, 0.1313, 0.0927], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]]]

Expected: [[[[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0.1427, 0.1313, 0.0927], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]]]