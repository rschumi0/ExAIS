import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min63847 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Min63847 = tf.keras.layers.Input(shape=([2, 2, 1]))

Min63847 = keras.layers.Minimum(name = 'Min63847', )([in0Min63847,in1Min63847])
Mas79227 = keras.layers.Masking(mask_value=1, name = 'Mas79227', )(Min63847)
Res96504 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res96504', )(Mas79227)
Con95008 = keras.layers.Conv3D(2, (1, 1, 1),strides=(5, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con95008', )(Res96504)
model = tf.keras.models.Model(inputs=[in0Min63847,in1Min63847], outputs=Con95008)
w = model.get_layer('Con95008').get_weights() 
w[0] = np.array([[[[[0.0538, 0.8132]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con95008').set_weights(w) 
in0Min63847 = tf.constant([[[[0.7068], [0.9647]], [[0.811], [0.2721]]]])
in1Min63847 = tf.constant([[[[0.3674], [0.6899]], [[0.726], [0.7483]]]])
print (np.array2string(model.predict([in0Min63847,in1Min63847],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con95008.png')

LMin63847 = minimum_layer([[[[[0.7068], [0.9647]], [[0.811], [0.2721]]]], [[[[0.3674], [0.6899]], [[0.726], [0.7483]]]]], Min63847), 
LMas79227 = masking_layer(Min63847, 1, Mas79227), 
LRes96504 = reshape_layer(Mas79227, [2, 2, 1, 1], Res96504), 
LCon95008 = conv3D_layer(Res96504, 1, 1, 1,[[[[[0.0538, 0.8132]]]]],[0, 0], 5, 1, 1, false, 1, 1, 1, Con95008), 
exec_layers([LMin63847,LMas79227,LRes96504,LCon95008],["Min63847","Mas79227","Res96504","Con95008"],Con95008,"Con95008")

Actual (Unparsed): [[[[[0.0197661, 0.2987697]], [[0.0371166, 0.5610267]]]]]

Expected (Unparsed): [[[[[0.01976612,0.29876968000000004]],[[0.037116619999999996,0.56102668]]]]]

Actual:   [[[[[0.0198, 0.2988]], [[0.0372, 0.5611]]]]]

Expected: [[[[[0.0198, 0.2988]], [[0.0372, 0.5611]]]]]