import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro23552 = tf.keras.layers.Input(shape=([3, 4]))
in0Ave77448 = tf.keras.layers.Input(shape=([1, 2, 2]))
in1Ave77448 = tf.keras.layers.Input(shape=([1, 2, 2]))

Cro23552 = keras.layers.Cropping1D(cropping=((2, 0)), name = 'Cro23552', )(in0Cro23552)
Ave77448 = keras.layers.Average(name = 'Ave77448', )([in0Ave77448,in1Ave77448])
Sep76303 = keras.layers.SeparableConv2D(3, (1, 1),strides=(1, 1), padding='valid', name = 'Sep76303', )(Ave77448)
Res82063 = keras.layers.Reshape((1, 6), name = 'Res82063', )(Sep76303)
Dot35882 = keras.layers.Dot(axes=(1, 1), name = 'Dot35882', )([Cro23552,Res82063])
Res18622 = keras.layers.Reshape((4, 6, 1), name = 'Res18622', )(Dot35882)
Res38061 = keras.layers.Reshape((4, 6, 1, 1), name = 'Res38061', )(Res18622)
Con81709 = keras.layers.Conv3D(3, (3, 4, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con81709', )(Res38061)
model = tf.keras.models.Model(inputs=[in0Cro23552,in0Ave77448,in1Ave77448], outputs=Con81709)
w = model.get_layer('Sep76303').get_weights() 
w[0] = np.array([[[[0.5787], [0.9861]]]])
w[1] = np.array([[[[0.0976, 0.4784, 0.2771], [0.0078, 0.0847, 0.5641]]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep76303').set_weights(w) 
w = model.get_layer('Con81709').get_weights() 
w[0] = np.array([[[[[0.3888, 0.9096, 0.9324]]], [[[0.0031, 0.2601, 0.2976]]], [[[0.492, 0.5788, 0.3386]]], [[[0.4408, 0.5554, 0.1814]]]], [[[[0.6599, 0.3817, 0.9376]]], [[[0.8505, 0.1614, 0.6771]]], [[[0.3318, 0.2978, 0.8579]]], [[[0.928, 0.6061, 0.1243]]]], [[[[0.9184, 0.0682, 0.2423]]], [[[0.8925, 0.2258, 0.7142]]], [[[0.7364, 0.2673, 0.1111]]], [[[0.147, 0.2764, 0.7223]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con81709').set_weights(w) 
in0Cro23552 = tf.constant([[[1.4922, 1.1041, 1.8288, 1.0886], [1.3369, 1.2426, 1.6574, 1.9786], [1.6579, 1.4141, 1.2982, 1.6178]]])
in0Ave77448 = tf.constant([[[[0.4681, 0.4562], [0.4644, 0.5009]]]])
in1Ave77448 = tf.constant([[[[0.0288, 0.5515], [0.1492, 0.7824]]]])
print (np.array2string(model.predict([in0Cro23552,in0Ave77448,in1Ave77448],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con81709.png')

LCro23552 = cropping1D_layer([[[1.4922, 1.1041, 1.8288, 1.0886], [1.3369, 1.2426, 1.6574, 1.9786], [1.6579, 1.4141, 1.2982, 1.6178]]], 2, 0, Cro23552), 
LAve77448 = average_layer([[[[[0.4681, 0.4562], [0.4644, 0.5009]]]], [[[[0.0288, 0.5515], [0.1492, 0.7824]]]]], Ave77448), 
LSep76303 = separable_conv2D_layer(Ave77448, 1, 1,[[[[[0.5787], [0.9861]]]],[[[[0.0976, 0.4784, 0.2771], [0.0078, 0.0847, 0.5641]]]]],[0, 0, 0], 1, 1, false, Sep76303), 
LRes82063 = reshape_layer(Sep76303, [1, 6], Res82063), 
LDot35882 = dot_layer(Cro23552,Res82063, 1, 1, Dot35882), 
LRes18622 = reshape_layer(Dot35882, [4, 6, 1], Res18622), 
LRes38061 = reshape_layer(Res18622, [4, 6, 1, 1], Res38061), 
LCon81709 = conv3D_layer(Res38061, 3, 4, 1,[[[[[0.3888, 0.9096, 0.9324]]], [[[0.0031, 0.2601, 0.2976]]], [[[0.492, 0.5788, 0.3386]]], [[[0.4408, 0.5554, 0.1814]]]], [[[[0.6599, 0.3817, 0.9376]]], [[[0.8505, 0.1614, 0.6771]]], [[[0.3318, 0.2978, 0.8579]]], [[[0.928, 0.6061, 0.1243]]]], [[[[0.9184, 0.0682, 0.2423]]], [[[0.8925, 0.2258, 0.7142]]], [[[0.7364, 0.2673, 0.1111]]], [[[0.147, 0.2764, 0.7223]]]]],[0, 0, 0], 1, 1, 1, false, 1, 1, 1, Con81709), 
exec_layers([LCro23552,LAve77448,LSep76303,LRes82063,LDot35882,LRes18622,LRes38061,LCon81709],["Cro23552","Ave77448","Sep76303","Res82063","Dot35882","Res18622","Res38061","Con81709"],Con81709,"Con81709")

Actual (Unparsed): [[[[[1.0790362, 0.7445027, 0.9664063]], [[1.4239947, 0.8762449, 1.3531181]], [[2.1570767, 1.8121744, 1.9130415]]], [[[1.1227279, 0.7075408, 0.9272843]], [[1.4754958, 0.8277250, 1.3697713]], [[2.1427637, 1.6736410, 1.8816459]]]]]

Expected (Unparsed): [[[[[1.0790361322999455,0.7445026376135002,0.9664062880073027]],[[1.4239946490931594,0.8762448517762667,1.3531180969581815]],[[2.157076625421446,1.8121744061500016,1.913041454065007]]],[[[1.1227278384012953,0.7075408190164906,0.9272842661636957]],[[1.475495747098979,0.8277250154795261,1.3697712514968912]],[[2.142763646164411,1.6736409772586354,1.881645902467392]]]]]

Actual:   [[[[[1.0791, 0.7446, 0.9665]], [[1.424, 0.8763, 1.3532]], [[2.1571, 1.8122, 1.9131]]], [[[1.1228, 0.7076, 0.9273]], [[1.4755, 0.8278, 1.3698]], [[2.1428, 1.6737, 1.8817]]]]]

Expected: [[[[[1.0791, 0.7446, 0.9665]], [[1.424, 0.8763, 1.3532]], [[2.1571, 1.8122, 1.9131]]], [[[1.1228, 0.7076, 0.9273]], [[1.4755, 0.8278, 1.3698]], [[2.1428, 1.6737, 1.8817]]]]]