import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro76141 = tf.keras.layers.Input(shape=([3, 4, 4, 4]))

Cro76141 = keras.layers.Cropping3D(cropping=((2, 0), (2, 0), (0, 0)), name = 'Cro76141', )(in0Cro76141)
Den37607 = keras.layers.Dense(2,name = 'Den37607', )(Cro76141)
Lay64429 = keras.layers.LayerNormalization(axis=1, epsilon=1.2633226215421982, name = 'Lay64429', )(Den37607)
model = tf.keras.models.Model(inputs=[in0Cro76141], outputs=Lay64429)
w = model.get_layer('Den37607').get_weights() 
w[0] = np.array([[0.8756, 0.3857], [0.1382, 0.8742], [0.8847, 0.5787], [0.6858, 0.1769]])
w[1] = np.array([0.9491, 0.8588])
model.get_layer('Den37607').set_weights(w) 
in0Cro76141 = tf.constant([[[[[1.8761, 1.9188, 1.8622, 1.6662], [1.8605, 1.2004, 1.2073, 1.0451], [1.4876, 1.2385, 1.9029, 1.1409], [1.9946, 1.2202, 1.1757, 1.7317]], [[1.1442, 1.3918, 1.1761, 1.1425], [1.663, 1.0597, 1.0261, 1.4582], [1.3348, 1.5911, 1.9554, 1.7677], [1.2941, 1.6864, 1.9448, 1.6828]], [[1.1622, 1.055, 1.7229, 1.6884], [1.6765, 1.6376, 1.7943, 1.8436], [1.3727, 1.6866, 1.4173, 1.9773], [1.6953, 1.3431, 1.0948, 1.7977]], [[1.641, 1.8279, 1.1928, 1.2739], [1.6618, 1.0038, 1.7607, 1.2332], [1.0983, 1.86, 1.4892, 1.37], [1.85, 1.4182, 1.0162, 1.7618]]], [[[1.3423, 1.6682, 1.4625, 1.5487], [1.1022, 1.4031, 1.1673, 1.6494], [1.417, 1.2415, 1.0791, 1.2574], [1.6177, 1.7024, 1.1549, 1.3903]], [[1.5012, 1.9265, 1.4223, 1.9487], [1.2876, 1.5283, 1.0655, 1.584], [1.2929, 1.1048, 1.0135, 1.1689], [1.1897, 1.1295, 1.0252, 1.8197]], [[1.3298, 1.3135, 1.1976, 1.2284], [1.1048, 1.0318, 1.1519, 1.5274], [1.7316, 1.0787, 1.8943, 1.0345], [1.1707, 1.8439, 1.4931, 1.0004]], [[1.1044, 1.9807, 1.2653, 1.9191], [1.0345, 1.7752, 1.1235, 1.049], [1.5951, 1.7218, 1.0993, 1.5436], [1.1175, 1.2573, 1.8291, 1.9895]]], [[[1.3331, 1.2144, 1.9642, 1.2127], [1.8565, 1.3172, 1.0531, 1.9281], [1.7489, 1.961, 1.4282, 1.1792], [1.034, 1.593, 1.0301, 1.5449]], [[1.5068, 1.2432, 1.9003, 1.7718], [1.5607, 1.14, 1.2832, 1.8358], [1.0407, 1.8924, 1.8916, 1.4281], [1.3242, 1.4189, 1.9112, 1.5198]], [[1.9311, 1.6582, 1.7464, 1.9646], [1.966, 1.1134, 1.3404, 1.0674], [1.6112, 1.4467, 1.1464, 1.6664], [1.7017, 1.6687, 1.4672, 1.5585]], [[1.1411, 1.9472, 1.9364, 1.0268], [1.5457, 1.6982, 1.3685, 1.8259], [1.0376, 1.4165, 1.0743, 1.2218], [1.556, 1.6512, 1.003, 1.5922]]]]])
print (np.array2string(model.predict([in0Cro76141],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Lay64429.png')

LCro76141 = cropping3D_layer([[[[[1.8761, 1.9188, 1.8622, 1.6662], [1.8605, 1.2004, 1.2073, 1.0451], [1.4876, 1.2385, 1.9029, 1.1409], [1.9946, 1.2202, 1.1757, 1.7317]], [[1.1442, 1.3918, 1.1761, 1.1425], [1.663, 1.0597, 1.0261, 1.4582], [1.3348, 1.5911, 1.9554, 1.7677], [1.2941, 1.6864, 1.9448, 1.6828]], [[1.1622, 1.055, 1.7229, 1.6884], [1.6765, 1.6376, 1.7943, 1.8436], [1.3727, 1.6866, 1.4173, 1.9773], [1.6953, 1.3431, 1.0948, 1.7977]], [[1.641, 1.8279, 1.1928, 1.2739], [1.6618, 1.0038, 1.7607, 1.2332], [1.0983, 1.86, 1.4892, 1.37], [1.85, 1.4182, 1.0162, 1.7618]]], [[[1.3423, 1.6682, 1.4625, 1.5487], [1.1022, 1.4031, 1.1673, 1.6494], [1.417, 1.2415, 1.0791, 1.2574], [1.6177, 1.7024, 1.1549, 1.3903]], [[1.5012, 1.9265, 1.4223, 1.9487], [1.2876, 1.5283, 1.0655, 1.584], [1.2929, 1.1048, 1.0135, 1.1689], [1.1897, 1.1295, 1.0252, 1.8197]], [[1.3298, 1.3135, 1.1976, 1.2284], [1.1048, 1.0318, 1.1519, 1.5274], [1.7316, 1.0787, 1.8943, 1.0345], [1.1707, 1.8439, 1.4931, 1.0004]], [[1.1044, 1.9807, 1.2653, 1.9191], [1.0345, 1.7752, 1.1235, 1.049], [1.5951, 1.7218, 1.0993, 1.5436], [1.1175, 1.2573, 1.8291, 1.9895]]], [[[1.3331, 1.2144, 1.9642, 1.2127], [1.8565, 1.3172, 1.0531, 1.9281], [1.7489, 1.961, 1.4282, 1.1792], [1.034, 1.593, 1.0301, 1.5449]], [[1.5068, 1.2432, 1.9003, 1.7718], [1.5607, 1.14, 1.2832, 1.8358], [1.0407, 1.8924, 1.8916, 1.4281], [1.3242, 1.4189, 1.9112, 1.5198]], [[1.9311, 1.6582, 1.7464, 1.9646], [1.966, 1.1134, 1.3404, 1.0674], [1.6112, 1.4467, 1.1464, 1.6664], [1.7017, 1.6687, 1.4672, 1.5585]], [[1.1411, 1.9472, 1.9364, 1.0268], [1.5457, 1.6982, 1.3685, 1.8259], [1.0376, 1.4165, 1.0743, 1.2218], [1.556, 1.6512, 1.003, 1.5922]]]]], 2, 0, 2, 0, 0, 0, Cro76141), 
LDen37607 = dense_layer(Cro76141, [[0.8756, 0.3857], [0.1382, 0.8742], [0.8847, 0.5787], [0.6858, 0.1769]],[0.9491, 0.8588], Den37607), 
LLay64429 = layer_normalization_layer(Den37607, 1, 1.2633226215421982, Lay64429), 
exec_layers([LCro76141,LDen37607,LLay64429],["Cro76141","Den37607","Lay64429"],Lay64429,"Lay64429")

Actual (Unparsed): [[[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]]]]

Expected (Unparsed): [[[[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0]]]]]

Actual:   [[[[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]]]]

Expected: [[[[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]]]]