import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub14864 = tf.keras.layers.Input(shape=([3, 2, 3, 3]))
in1Sub14864 = tf.keras.layers.Input(shape=([3, 2, 3, 3]))
in0Min3622 = tf.keras.layers.Input(shape=([1, 1]))
in1Min3622 = tf.keras.layers.Input(shape=([1, 1]))
in0Con72388 = tf.keras.layers.Input(shape=([53]))

Sub14864 = keras.layers.Subtract(name = 'Sub14864', )([in0Sub14864,in1Sub14864])
Res73148 = keras.layers.Reshape((3, 2, 9), name = 'Res73148', )(Sub14864)
Res26610 = keras.layers.Reshape((3, 18), name = 'Res26610', )(Res73148)
Fla59551 = keras.layers.Flatten(name = 'Fla59551', )(Res26610)
Min3622 = keras.layers.Minimum(name = 'Min3622', )([in0Min3622,in1Min3622])
Res97356 = keras.layers.Reshape((1, 1, 1), name = 'Res97356', )(Min3622)
Res2855 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res2855', )(Res97356)
Glo5716 = keras.layers.GlobalMaxPool3D(name = 'Glo5716', )(Res2855)
Con72388 = keras.layers.Concatenate(axis=1, name = 'Con72388', )([Glo5716,in0Con72388])
Ave74825 = keras.layers.Average(name = 'Ave74825', )([Fla59551,Con72388])
Res87547 = keras.layers.Reshape((54, 1), name = 'Res87547', )(Ave74825)
Res83543 = keras.layers.Reshape((54, 1, 1), name = 'Res83543', )(Res87547)
Res96838 = keras.layers.Reshape((54, 1, 1, 1), name = 'Res96838', )(Res83543)
Glo91817 = keras.layers.GlobalAveragePooling3D(name = 'Glo91817', )(Res96838)
model = tf.keras.models.Model(inputs=[in0Sub14864,in1Sub14864,in0Min3622,in1Min3622,in0Con72388], outputs=Glo91817)
in0Sub14864 = tf.constant([[[[[0.4605, 0.2446, 0.0269], [0.5757, 0.6466, 0.9001], [0.0032, 0.0526, 0.5677]], [[0.0044, 0.198, 0.5239], [0.0735, 0.1848, 0.703], [0.027, 0.9452, 0.3436]]], [[[0.2387, 0.5877, 0.3202], [0.6628, 0.4605, 0.4937], [0.8491, 0.8285, 0.9662]], [[0.4552, 0.1701, 0.1494], [0.9694, 0.6217, 0.5268], [0.8698, 0.4238, 0.7471]]], [[[0.9957, 0.254, 0.1048], [0.28, 0.8481, 0.9545], [0.7859, 0.7902, 0.0235]], [[0.7655, 0.1828, 0.9394], [0.5591, 0.1125, 0.7816], [0.1522, 0.0902, 0.5312]]]]])
in1Sub14864 = tf.constant([[[[[0.0142, 0.2516, 0.2105], [0.947, 0.501, 0.5832], [0.5684, 0.7857, 0.2411]], [[0.5759, 0.0611, 0.8134], [0.6966, 0.2567, 0.3854], [0.1369, 0.6941, 0.9723]]], [[[0.5066, 0.9765, 0.943], [0.4571, 0.3122, 0.6657], [0.7585, 0.4302, 0.8351]], [[0.8297, 0.2694, 0.1055], [0.948, 0.847, 0.9881], [0.3538, 0.3597, 0.5077]]], [[[0.1269, 0.7708, 0.0764], [0.2495, 0.4545, 0.5717], [0.2295, 0.4735, 0.8043]], [[0.059, 0.3185, 0.2192], [0.5704, 0.3923, 0.4685], [0.9144, 0.6559, 0.5256]]]]])
in0Min3622 = tf.constant([[[0.2589]]])
in1Min3622 = tf.constant([[[0.0065]]])
in0Con72388 = tf.constant([[0.8458, 0.7633, 0.0881, 0.9727, 0.2323, 0.5645, 0.5914, 0.5855, 0.228, 0.0449, 0.2506, 0.0223, 0.7164, 0.3065, 0.8988, 0.9521, 0.3745, 0.4345, 0.0917, 0.3749, 0.7441, 0.6362, 0.5888, 0.8784, 0.5365, 0.9987, 0.3961, 0.7069, 0.5644, 0.4214, 0.9948, 0.6983, 0.7281, 0.1621, 0.6782, 0.9178, 0.2937, 0.3506, 0.4999, 0.1257, 0.2995, 0.77, 0.1939, 0.0513, 0.2995, 0.1844, 0.5711, 0.8133, 0.8117, 0.4981, 0.3186, 0.728, 0.7782]])
print (np.array2string(model.predict([in0Sub14864,in1Sub14864,in0Min3622,in1Min3622,in0Con72388],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Glo91817.png')

LSub14864 = subtract_layer([[[[[0.4605, 0.2446, 0.0269], [0.5757, 0.6466, 0.9001], [0.0032, 0.0526, 0.5677]], [[0.0044, 0.198, 0.5239], [0.0735, 0.1848, 0.703], [0.027, 0.9452, 0.3436]]], [[[0.2387, 0.5877, 0.3202], [0.6628, 0.4605, 0.4937], [0.8491, 0.8285, 0.9662]], [[0.4552, 0.1701, 0.1494], [0.9694, 0.6217, 0.5268], [0.8698, 0.4238, 0.7471]]], [[[0.9957, 0.254, 0.1048], [0.28, 0.8481, 0.9545], [0.7859, 0.7902, 0.0235]], [[0.7655, 0.1828, 0.9394], [0.5591, 0.1125, 0.7816], [0.1522, 0.0902, 0.5312]]]]], [[[[[0.0142, 0.2516, 0.2105], [0.947, 0.501, 0.5832], [0.5684, 0.7857, 0.2411]], [[0.5759, 0.0611, 0.8134], [0.6966, 0.2567, 0.3854], [0.1369, 0.6941, 0.9723]]], [[[0.5066, 0.9765, 0.943], [0.4571, 0.3122, 0.6657], [0.7585, 0.4302, 0.8351]], [[0.8297, 0.2694, 0.1055], [0.948, 0.847, 0.9881], [0.3538, 0.3597, 0.5077]]], [[[0.1269, 0.7708, 0.0764], [0.2495, 0.4545, 0.5717], [0.2295, 0.4735, 0.8043]], [[0.059, 0.3185, 0.2192], [0.5704, 0.3923, 0.4685], [0.9144, 0.6559, 0.5256]]]]], Sub14864), 
LRes73148 = reshape_layer(Sub14864, [3, 2, 9], Res73148), 
LRes26610 = reshape_layer(Res73148, [3, 18], Res26610), 
LFla59551 = flatten_layer(Res26610, Fla59551), 
LMin3622 = minimum_layer([[[[0.2589]]], [[[0.0065]]]], Min3622), 
LRes97356 = reshape_layer(Min3622, [1, 1, 1], Res97356), 
LRes2855 = reshape_layer(Res97356, [1, 1, 1, 1], Res2855), 
LGlo5716 = global_max_pool3D_layer(Res2855, Glo5716), 
LCon72388 = concatenate_layer([Glo5716,[[0.8458, 0.7633, 0.0881, 0.9727, 0.2323, 0.5645, 0.5914, 0.5855, 0.228, 0.0449, 0.2506, 0.0223, 0.7164, 0.3065, 0.8988, 0.9521, 0.3745, 0.4345, 0.0917, 0.3749, 0.7441, 0.6362, 0.5888, 0.8784, 0.5365, 0.9987, 0.3961, 0.7069, 0.5644, 0.4214, 0.9948, 0.6983, 0.7281, 0.1621, 0.6782, 0.9178, 0.2937, 0.3506, 0.4999, 0.1257, 0.2995, 0.77, 0.1939, 0.0513, 0.2995, 0.1844, 0.5711, 0.8133, 0.8117, 0.4981, 0.3186, 0.728, 0.7782]]], 1, Con72388), 
LAve74825 = average_layer([Fla59551,Con72388], Ave74825), 
LRes87547 = reshape_layer(Ave74825, [54, 1], Res87547), 
LRes83543 = reshape_layer(Res87547, [54, 1, 1], Res83543), 
LRes96838 = reshape_layer(Res83543, [54, 1, 1, 1], Res96838), 
LGlo91817 = global_average_pooling3D_layer(Res96838, Glo91817), 
exec_layers([LSub14864,LRes73148,LRes26610,LFla59551,LMin3622,LRes97356,LRes2855,LGlo5716,LCon72388,LAve74825,LRes87547,LRes83543,LRes96838,LGlo91817],["Sub14864","Res73148","Res26610","Fla59551","Min3622","Res97356","Res2855","Glo5716","Con72388","Ave74825","Res87547","Res83543","Res96838","Glo91817"],Glo91817,"Glo91817")

Actual (Unparsed): [[0.2396944]]

Expected (Unparsed): [[0.2396944444444444]]

Actual:   [[0.2397]]

Expected: [[0.2397]]