import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sep58868 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Sub37902 = tf.keras.layers.Input(shape=([3, 3]))
in1Sub37902 = tf.keras.layers.Input(shape=([3, 3]))
in0Con98009 = tf.keras.layers.Input(shape=([5, 5, 2]))

Sep58868 = keras.layers.SeparableConv2D(3, (1, 1),strides=(1, 1), padding='valid', name = 'Sep58868', )(in0Sep58868)
Zer59438 = keras.layers.ZeroPadding2D(padding=((4, 0), (3, 0)), name = 'Zer59438', )(Sep58868)
Sub37902 = keras.layers.Subtract(name = 'Sub37902', )([in0Sub37902,in1Sub37902])
PRe63947 = keras.layers.PReLU(name = 'PRe63947', )(Sub37902)
Res1089 = keras.layers.Reshape((3, 3, 1), name = 'Res1089', )(PRe63947)
Zer99544 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer99544', )(Res1089)
Thr99193 = keras.layers.ThresholdedReLU(theta=3.311401798699405, name = 'Thr99193', )(Zer99544)
Con98009 = keras.layers.Concatenate(axis=3, name = 'Con98009', )([Thr99193,in0Con98009])
Max96948 = keras.layers.Maximum(name = 'Max96948', )([Zer59438,Con98009])
model = tf.keras.models.Model(inputs=[in0Sep58868,in0Sub37902,in1Sub37902,in0Con98009], outputs=Max96948)
w = model.get_layer('Sep58868').get_weights() 
w[0] = np.array([[[[0.9523], [0.5156]]]])
w[1] = np.array([[[[0.4565, 0.7322, 0.272], [0.3036, 0.3518, 0.6686]]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep58868').set_weights(w) 
w = model.get_layer('PRe63947').get_weights() 
w[0] = np.array([[0.8612, 0.6889, 0.3461], [0.3367, 0.5333, 0.6713], [0.8962, 0.2639, 0.4738]])
model.get_layer('PRe63947').set_weights(w) 
in0Sep58868 = tf.constant([[[[0.0435, 0.2797], [0.469, 0.5494]]]])
in0Sub37902 = tf.constant([[[0.1153, 0.1439, 0.9653], [0.0653, 0.635, 0.8318], [0.2588, 0.2632, 0.9015]]])
in1Sub37902 = tf.constant([[[0.54, 0.877, 0.7291], [0.8507, 0.4864, 0.5531], [0.9694, 0.7478, 0.8494]]])
in0Con98009 = tf.constant([[[[0.4096, 0.6652], [0.8671, 0.9362], [0.4631, 0.5477], [0.6705, 0.7777], [0.5458, 0.9967]], [[0.0991, 0.6715], [0.572, 0.8945], [0.3289, 0.2225], [0.0891, 0.7891], [0.6374, 0.7534]], [[0.9843, 0.655], [0.4204, 0.9389], [0.7261, 0.2033], [0.33, 0.7894], [0.8058, 0.4774]], [[0.3006, 0.8895], [0.2924, 0.9121], [0.1851, 0.0678], [0.3154, 0.3841], [0.8245, 0.3512]], [[0.8515, 0.033], [0.6419, 0.1415], [0.4054, 0.7982], [0.2657, 0.0383], [0.0479, 0.6811]]]])
print (np.array2string(model.predict([in0Sep58868,in0Sub37902,in1Sub37902,in0Con98009],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max96948.png')

LSep58868 = separable_conv2D_layer([[[[0.0435, 0.2797], [0.469, 0.5494]]]], 1, 1,[[[[[0.9523], [0.5156]]]],[[[[0.4565, 0.7322, 0.272], [0.3036, 0.3518, 0.6686]]]]],[0, 0, 0], 1, 1, false, Sep58868), 
LZer59438 = zero_padding2D_layer(Sep58868, 4, 0, 3, 0, Zer59438), 
LSub37902 = subtract_layer([[[0.1153, 0.1439, 0.9653], [0.0653, 0.635, 0.8318], [0.2588, 0.2632, 0.9015]]], [[[0.54, 0.877, 0.7291], [0.8507, 0.4864, 0.5531], [0.9694, 0.7478, 0.8494]]], Sub37902), 
LPRe63947 = prelu_layer(Sub37902, [[0.8612, 0.6889, 0.3461], [0.3367, 0.5333, 0.6713], [0.8962, 0.2639, 0.4738]], PRe63947), 
LRes1089 = reshape_layer(PRe63947, [3, 3, 1], Res1089), 
LZer99544 = zero_padding2D_layer(Res1089, 1, 1, 1, 1, Zer99544), 
LThr99193 = thresholded_relu_layer(Zer99544, 3.311401798699405, Thr99193), 
LCon98009 = concatenate_layer([Thr99193,[[[[0.4096, 0.6652], [0.8671, 0.9362], [0.4631, 0.5477], [0.6705, 0.7777], [0.5458, 0.9967]], [[0.0991, 0.6715], [0.572, 0.8945], [0.3289, 0.2225], [0.0891, 0.7891], [0.6374, 0.7534]], [[0.9843, 0.655], [0.4204, 0.9389], [0.7261, 0.2033], [0.33, 0.7894], [0.8058, 0.4774]], [[0.3006, 0.8895], [0.2924, 0.9121], [0.1851, 0.0678], [0.3154, 0.3841], [0.8245, 0.3512]], [[0.8515, 0.033], [0.6419, 0.1415], [0.4054, 0.7982], [0.2657, 0.0383], [0.0479, 0.6811]]]]], 3, Con98009), 
LMax96948 = maximum_layer([Zer59438,Con98009], Max96948), 
exec_layers([LSep58868,LZer59438,LSub37902,LPRe63947,LRes1089,LZer99544,LThr99193,LCon98009,LMax96948],["Sep58868","Zer59438","Sub37902","PRe63947","Res1089","Zer99544","Thr99193","Con98009","Max96948"],Max96948,"Max96948")

Actual (Unparsed): [[[[0.0000000, 0.4096000, 0.6652000], [0.0000000, 0.8671000, 0.9362000], [0.0000000, 0.4631000, 0.5477000], [0.0000000, 0.6705000, 0.7777000], [0.0000000, 0.5458000, 0.9967000]], [[0.0000000, 0.0991000, 0.6715000], [-0.0000000, 0.5720000, 0.8945000], [-0.0000000, 0.3289000, 0.2225000], [0.0000000, 0.0891000, 0.7891000], [0.0000000, 0.6374000, 0.7534000]], [[0.0000000, 0.9843000, 0.6550000], [-0.0000000, 0.4204000, 0.9389000], [0.0000000, 0.7261000, 0.2033000], [0.0000000, 0.3300000, 0.7894000], [0.0000000, 0.8058000, 0.4774000]], [[0.0000000, 0.3006000, 0.8895000], [-0.0000000, 0.2924000, 0.9121000], [-0.0000000, 0.1851000, 0.0678000], [0.0000000, 0.3154000, 0.3841000], [0.0000000, 0.8245000, 0.3512000]], [[0.0000000, 0.8515000, 0.0330000], [0.0000000, 0.6419000, 0.1415000], [0.0000000, 0.4054000, 0.7982000], [0.0626937, 0.2657000, 0.1076886], [0.2898870, 0.4266761, 0.6811000]]]]

Expected (Unparsed): [[[[0,0.4096,0.6652],[0,0.8671,0.9362],[0,0.4631,0.5477],[0,0.6705,0.7777],[0,0.5458,0.9967]],[[0,0.0991,0.6715],[0,0.572,0.8945],[0,0.3289,0.2225],[0,0.0891,0.7891],[0,0.6374,0.7534]],[[0,0.9843,0.655],[0,0.4204,0.9389],[0,0.7261,0.2033],[0,0.33,0.7894],[0,0.8058,0.4774]],[[0,0.3006,0.8895],[0,0.2924,0.9121],[0,0.1851,0.0678],[0,0.3154,0.3841],[0,0.8245,0.3512]],[[0,0.8515,0.033],[0,0.6419,0.1415],[0,0.4054,0.7982],[0.062693699277,0.2657,0.10768863935199999],[0.289886967854,0.42667614529199993,0.6811]]]]

Actual:   [[[[0, 0.4096, 0.6652], [0, 0.8671, 0.9362], [0, 0.4631, 0.5477], [0, 0.6705, 0.7777], [0, 0.5458, 0.9967]], [[0, 0.0991, 0.6715], [-0, 0.572, 0.8945], [-0, 0.3289, 0.2225], [0, 0.0891, 0.7891], [0, 0.6374, 0.7534]], [[0, 0.9843, 0.655], [-0, 0.4204, 0.9389], [0, 0.7261, 0.2033], [0, 0.33, 0.7894], [0, 0.8058, 0.4774]], [[0, 0.3006, 0.8895], [-0, 0.2924, 0.9121], [-0, 0.1851, 0.0678], [0, 0.3154, 0.3841], [0, 0.8245, 0.3512]], [[0, 0.8515, 0.033], [0, 0.6419, 0.1415], [0, 0.4054, 0.7982], [0.0627, 0.2657, 0.1077], [0.2899, 0.4267, 0.6811]]]]

Expected: [[[[0, 0.4096, 0.6652], [0, 0.8671, 0.9362], [0, 0.4631, 0.5477], [0, 0.6705, 0.7777], [0, 0.5458, 0.9967]], [[0, 0.0991, 0.6715], [0, 0.572, 0.8945], [0, 0.3289, 0.2225], [0, 0.0891, 0.7891], [0, 0.6374, 0.7534]], [[0, 0.9843, 0.655], [0, 0.4204, 0.9389], [0, 0.7261, 0.2033], [0, 0.33, 0.7894], [0, 0.8058, 0.4774]], [[0, 0.3006, 0.8895], [0, 0.2924, 0.9121], [0, 0.1851, 0.0678], [0, 0.3154, 0.3841], [0, 0.8245, 0.3512]], [[0, 0.8515, 0.033], [0, 0.6419, 0.1415], [0, 0.4054, 0.7982], [0.0627, 0.2657, 0.1077], [0.2899, 0.4267, 0.6811]]]]