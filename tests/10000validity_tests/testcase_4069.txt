import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro59633 = tf.keras.layers.Input(shape=([3, 4, 2, 2]))
in0Mul93299 = tf.keras.layers.Input(shape=([2, 2]))
in1Mul93299 = tf.keras.layers.Input(shape=([2, 2]))
in0Con27182 = tf.keras.layers.Input(shape=([3, 6]))

Cro59633 = keras.layers.Cropping3D(cropping=((0, 0), (0, 0), (0, 1)), name = 'Cro59633', )(in0Cro59633)
Res41219 = keras.layers.Reshape((3, 4, 2), name = 'Res41219', )(Cro59633)
Res92246 = keras.layers.Reshape((3, 8), name = 'Res92246', )(Res41219)
Mul93299 = keras.layers.Multiply(name = 'Mul93299', )([in0Mul93299,in1Mul93299])
Zer23173 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer23173', )(Mul93299)
Con27182 = keras.layers.Concatenate(axis=2, name = 'Con27182', )([Zer23173,in0Con27182])
Ave50960 = keras.layers.Average(name = 'Ave50960', )([Res92246,Con27182])
Sim52819 = keras.layers.SimpleRNN(3,name = 'Sim52819', )(Ave50960)
model = tf.keras.models.Model(inputs=[in0Cro59633,in0Mul93299,in1Mul93299,in0Con27182], outputs=Sim52819)
w = model.get_layer('Sim52819').get_weights() 
w[0] = np.array([[6, 4, 4], [6, 8, 8], [7, 6, 9], [7, 5, 2], [9, 6, 9], [7, 7, 1], [9, 1, 1], [2, 5, 1]])
w[1] = np.array([[5, 3, 7], [5, 1, 5], [9, 7, 6]])
w[2] = np.array([9, 10, 3])
model.get_layer('Sim52819').set_weights(w) 
in0Cro59633 = tf.constant([[[[[1.1633, 1.6918], [1.5317, 1.0644]], [[1.4552, 1.2942], [1.067, 1.1829]], [[1.0915, 1.2669], [1.3157, 1.9635]], [[1.5096, 1.7086], [1.3321, 1.7623]]], [[[1.1182, 1.8227], [1.8458, 1.7448]], [[1.0412, 1.1045], [1.6477, 1.0749]], [[1.7546, 1.7239], [1.5955, 1.9302]], [[1.9485, 1.2997], [1.3336, 1.8218]]], [[[1.5434, 1.211], [1.6849, 1.536]], [[1.1636, 1.5663], [1.8094, 1.3819]], [[1.53, 1.9614], [1.6526, 1.3292]], [[1.171, 1.1957], [1.9055, 1.0514]]]]])
in0Mul93299 = tf.constant([[[0.5715, 0.1895], [0.689, 0.8494]]])
in1Mul93299 = tf.constant([[[0.3805, 0.4466], [0.4353, 0.9276]]])
in0Con27182 = tf.constant([[[0.0859, 0.1588, 0.7587, 0.8535, 0.4766, 0.6206], [0.3955, 0.2344, 0.0791, 0.2527, 0.2895, 0.7107], [0.8184, 0.2853, 0.3022, 0.6188, 0.8764, 0.1175]]])
print (np.array2string(model.predict([in0Cro59633,in0Mul93299,in1Mul93299,in0Con27182],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sim52819.png')

LCro59633 = cropping3D_layer([[[[[1.1633, 1.6918], [1.5317, 1.0644]], [[1.4552, 1.2942], [1.067, 1.1829]], [[1.0915, 1.2669], [1.3157, 1.9635]], [[1.5096, 1.7086], [1.3321, 1.7623]]], [[[1.1182, 1.8227], [1.8458, 1.7448]], [[1.0412, 1.1045], [1.6477, 1.0749]], [[1.7546, 1.7239], [1.5955, 1.9302]], [[1.9485, 1.2997], [1.3336, 1.8218]]], [[[1.5434, 1.211], [1.6849, 1.536]], [[1.1636, 1.5663], [1.8094, 1.3819]], [[1.53, 1.9614], [1.6526, 1.3292]], [[1.171, 1.1957], [1.9055, 1.0514]]]]], 0, 0, 0, 0, 0, 1, Cro59633), 
LRes41219 = reshape_layer(Cro59633, [3, 4, 2], Res41219), 
LRes92246 = reshape_layer(Res41219, [3, 8], Res92246), 
LMul93299 = multiply_layer([[[[0.5715, 0.1895], [0.689, 0.8494]]], [[[0.3805, 0.4466], [0.4353, 0.9276]]]], Mul93299), 
LZer23173 = zero_padding1D_layer(Mul93299, 1, 0, Zer23173), 
LCon27182 = concatenate_layer([Zer23173,[[[0.0859, 0.1588, 0.7587, 0.8535, 0.4766, 0.6206], [0.3955, 0.2344, 0.0791, 0.2527, 0.2895, 0.7107], [0.8184, 0.2853, 0.3022, 0.6188, 0.8764, 0.1175]]]], 2, Con27182), 
LAve50960 = average_layer([Res92246,Con27182], Ave50960), 
LSim52819 = simple_rnn_layer(Ave50960,[[6, 4, 4], [6, 8, 8], [7, 6, 9], [7, 5, 2], [9, 6, 9], [7, 7, 1], [9, 1, 1], [2, 5, 1]],[[5, 3, 7], [5, 1, 5], [9, 7, 6]],[9, 10, 3], Sim52819), 
exec_layers([LCro59633,LRes41219,LRes92246,LMul93299,LZer23173,LCon27182,LAve50960,LSim52819],["Cro59633","Res41219","Res92246","Mul93299","Zer23173","Con27182","Ave50960","Sim52819"],Sim52819,"Sim52819")

Actual (Unparsed): [[1.0000000, 1.0000000, 1.0000000]]

Expected (Unparsed): [[1.0,1.0,1.0]]

Actual:   [[1, 1, 1]]

Expected: [[1, 1, 1]]