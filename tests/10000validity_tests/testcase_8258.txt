import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sim36454 = tf.keras.layers.Input(shape=([2, 1]))
in0Mul43343 = tf.keras.layers.Input(shape=([1, 2]))
in1Mul43343 = tf.keras.layers.Input(shape=([1, 2]))
in0Con22771 = tf.keras.layers.Input(shape=([3, 7]))

Sim36454 = keras.layers.SimpleRNN(1,name = 'Sim36454', )(in0Sim36454)
Res33881 = keras.layers.Reshape((1, 1), name = 'Res33881', )(Sim36454)
Res27822 = keras.layers.Reshape((1, 1, 1), name = 'Res27822', )(Res33881)
Res21766 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res21766', )(Res27822)
Zer5491 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer5491', )(Res21766)
Res79178 = keras.layers.Reshape((3, 3, 3), name = 'Res79178', )(Zer5491)
Res77253 = keras.layers.Reshape((3, 9), name = 'Res77253', )(Res79178)
Mul43343 = keras.layers.Multiply(name = 'Mul43343', )([in0Mul43343,in1Mul43343])
Max82814 = keras.layers.MaxPool1D(pool_size=(1), name = 'Max82814', )(Mul43343)
Bat89372 = keras.layers.BatchNormalization(axis=1, epsilon=0.9514570020962471,  name = 'Bat89372', )(Max82814)
Zer89534 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer89534', )(Bat89372)
Con22771 = keras.layers.Concatenate(axis=2, name = 'Con22771', )([Zer89534,in0Con22771])
Mul38851 = keras.layers.Multiply(name = 'Mul38851', )([Res77253,Con22771])
model = tf.keras.models.Model(inputs=[in0Sim36454,in0Mul43343,in1Mul43343,in0Con22771], outputs=Mul38851)
w = model.get_layer('Sim36454').get_weights() 
w[0] = np.array([[1]])
w[1] = np.array([[5]])
w[2] = np.array([4])
model.get_layer('Sim36454').set_weights(w) 
w = model.get_layer('Bat89372').get_weights() 
w[0] = np.array([0.558])
w[1] = np.array([0.4807])
w[2] = np.array([0.6251])
w[3] = np.array([0.6043])
model.get_layer('Bat89372').set_weights(w) 
in0Sim36454 = tf.constant([[[2], [2]]])
in0Mul43343 = tf.constant([[[0.8608, 0.3463]]])
in1Mul43343 = tf.constant([[[0.1699, 0.635]]])
in0Con22771 = tf.constant([[[0.5284, 0.8607, 0.7316, 0.7033, 0.4387, 0.0951, 0.9146], [0.7826, 0.9717, 0.0262, 0.8931, 0.5948, 0.3937, 0.7897], [0.4889, 0.3859, 0.3218, 0.7948, 0.9012, 0.4348, 0.7492]]])
print (np.array2string(model.predict([in0Sim36454,in0Mul43343,in1Mul43343,in0Con22771],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul38851.png')

LSim36454 = simple_rnn_layer([[[2], [2]]],[[1]],[[5]],[4], Sim36454), 
LRes33881 = reshape_layer(Sim36454, [1, 1], Res33881), 
LRes27822 = reshape_layer(Res33881, [1, 1, 1], Res27822), 
LRes21766 = reshape_layer(Res27822, [1, 1, 1, 1], Res21766), 
LZer5491 = zero_padding3D_layer(Res21766, 1, 1, 1, 1, 1, 1, Zer5491), 
LRes79178 = reshape_layer(Zer5491, [3, 3, 3], Res79178), 
LRes77253 = reshape_layer(Res79178, [3, 9], Res77253), 
LMul43343 = multiply_layer([[[[0.8608, 0.3463]]], [[[0.1699, 0.635]]]], Mul43343), 
LMax82814 = max_pool1D_layer(Mul43343, 1, Max82814), 
LBat89372 = batch_normalization_layer(Max82814, 1, 0.9514570020962471, [0.558], [0.4807], [0.6251], [0.6043], Bat89372), 
LZer89534 = zero_padding1D_layer(Bat89372, 2, 0, Zer89534), 
LCon22771 = concatenate_layer([Zer89534,[[[0.5284, 0.8607, 0.7316, 0.7033, 0.4387, 0.0951, 0.9146], [0.7826, 0.9717, 0.0262, 0.8931, 0.5948, 0.3937, 0.7897], [0.4889, 0.3859, 0.3218, 0.7948, 0.9012, 0.4348, 0.7492]]]], 2, Con22771), 
LMul38851 = multiply_layer([Res77253,Con22771], Mul38851), 
exec_layers([LSim36454,LRes33881,LRes27822,LRes21766,LZer5491,LRes79178,LRes77253,LMul43343,LMax82814,LBat89372,LZer89534,LCon22771,LMul38851],["Sim36454","Res33881","Res27822","Res21766","Zer5491","Res79178","Res77253","Mul43343","Max82814","Bat89372","Zer89534","Con22771","Mul38851"],Mul38851,"Mul38851")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0262000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0,0,0.0,0.0,0.02619999998538139,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]]]

Actual:   [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0.0262, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]]

Expected: [[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0.0262, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]]