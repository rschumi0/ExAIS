import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max5854 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Max5854 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))

Max5854 = keras.layers.Maximum(name = 'Max5854', )([in0Max5854,in1Max5854])
Mas46734 = keras.layers.Masking(mask_value=2, name = 'Mas46734', )(Max5854)
model = tf.keras.models.Model(inputs=[in0Max5854,in1Max5854], outputs=Mas46734)
in0Max5854 = tf.constant([[[[[0.9816, 0.4511], [0.4772, 0.7891]], [[0.0841, 0.7041], [0.2408, 0.3046]]], [[[0.6112, 0.7899], [0.9572, 0.2634]], [[0.0966, 0.6589], [0.8134, 0.8315]]]]])
in1Max5854 = tf.constant([[[[[0.3212, 0.7183], [0.5885, 0.9947]], [[0.2958, 0.4259], [0.1106, 0.7927]]], [[[0.2641, 0.8531], [0.4637, 0.8477]], [[0.0518, 0.9713], [0.0524, 0.4763]]]]])
print (np.array2string(model.predict([in0Max5854,in1Max5854],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mas46734.png')

LMax5854 = maximum_layer([[[[[[0.9816, 0.4511], [0.4772, 0.7891]], [[0.0841, 0.7041], [0.2408, 0.3046]]], [[[0.6112, 0.7899], [0.9572, 0.2634]], [[0.0966, 0.6589], [0.8134, 0.8315]]]]], [[[[[0.3212, 0.7183], [0.5885, 0.9947]], [[0.2958, 0.4259], [0.1106, 0.7927]]], [[[0.2641, 0.8531], [0.4637, 0.8477]], [[0.0518, 0.9713], [0.0524, 0.4763]]]]]], Max5854), 
LMas46734 = masking_layer(Max5854, 2, Mas46734), 
exec_layers([LMax5854,LMas46734],["Max5854","Mas46734"],Mas46734,"Mas46734")

Actual (Unparsed): [[[[[0.9816000, 0.7183000], [0.5885000, 0.9947000]], [[0.2958000, 0.7041000], [0.2408000, 0.7927000]]], [[[0.6112000, 0.8531000], [0.9572000, 0.8477000]], [[0.0966000, 0.9713000], [0.8134000, 0.8315000]]]]]

Expected (Unparsed): [[[[[0.9816,0.7183],[0.5885,0.9947]],[[0.2958,0.7041],[0.2408,0.7927]]],[[[0.6112,0.8531],[0.9572,0.8477]],[[0.0966,0.9713],[0.8134,0.8315]]]]]

Actual:   [[[[[0.9816, 0.7183], [0.5885, 0.9947]], [[0.2958, 0.7041], [0.2408, 0.7927]]], [[[0.6112, 0.8531], [0.9572, 0.8477]], [[0.0966, 0.9713], [0.8134, 0.8315]]]]]

Expected: [[[[[0.9816, 0.7183], [0.5885, 0.9947]], [[0.2958, 0.7041], [0.2408, 0.7927]]], [[[0.6112, 0.8531], [0.9572, 0.8477]], [[0.0966, 0.9713], [0.8134, 0.8315]]]]]