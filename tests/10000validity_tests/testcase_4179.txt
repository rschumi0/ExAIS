import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con95708 = tf.keras.layers.Input(shape=([2, 1]))
in0Cro5354 = tf.keras.layers.Input(shape=([1, 2, 3]))
in0Sub33606 = tf.keras.layers.Input(shape=([3]))
in1Sub33606 = tf.keras.layers.Input(shape=([3]))
in0Con84992 = tf.keras.layers.Input(shape=([9]))

Con95708 = keras.layers.Conv1D(2, (1),strides=(1), padding='same', dilation_rate=(1), name = 'Con95708', )(in0Con95708)
Res1038 = keras.layers.Reshape((2, 2, 1), name = 'Res1038', )(Con95708)
Res74374 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res74374', )(Res1038)
Con80499 = keras.layers.Conv3D(3, (2, 2, 1),strides=(1, 1, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con80499', )(Res74374)
Res54064 = keras.layers.Reshape((2, 2, 3), name = 'Res54064', )(Con80499)
Res30690 = keras.layers.Reshape((2, 6), name = 'Res30690', )(Res54064)
Fla11864 = keras.layers.Flatten(name = 'Fla11864', )(Res30690)
Cro5354 = keras.layers.Cropping2D(cropping=((0, 0), (0, 1)), name = 'Cro5354', )(in0Cro5354)
Res54203 = keras.layers.Reshape((1, 3), name = 'Res54203', )(Cro5354)
Fla26844 = keras.layers.Flatten(name = 'Fla26844', )(Res54203)
Sub33606 = keras.layers.Subtract(name = 'Sub33606', )([in0Sub33606,in1Sub33606])
Sub66287 = keras.layers.Subtract(name = 'Sub66287', )([Fla26844,Sub33606])
Con84992 = keras.layers.Concatenate(axis=1, name = 'Con84992', )([Sub66287,in0Con84992])
Min25318 = keras.layers.Minimum(name = 'Min25318', )([Fla11864,Con84992])
Res46929 = keras.layers.Reshape((12, 1), name = 'Res46929', )(Min25318)
Res54953 = keras.layers.Reshape((12, 1, 1), name = 'Res54953', )(Res46929)
Con1070 = keras.layers.Conv2DTranspose(3, (1, 1),strides=(1, 1), padding='same', name = 'Con1070', )(Res54953)
model = tf.keras.models.Model(inputs=[in0Con95708,in0Cro5354,in0Sub33606,in1Sub33606,in0Con84992], outputs=Con1070)
w = model.get_layer('Con95708').get_weights() 
w[0] = np.array([[[0.8131, 0.2504]]])
w[1] = np.array([0, 0])
model.get_layer('Con95708').set_weights(w) 
w = model.get_layer('Con80499').get_weights() 
w[0] = np.array([[[[[0.0878, 0.2129, 0.1526]]], [[[0.2503, 0.662, 0.5924]]]], [[[[0.2985, 0.0431, 0.813]]], [[[0.4444, 0.213, 0.6757]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con80499').set_weights(w) 
w = model.get_layer('Con1070').get_weights() 
w[0] = np.array([[[[0.1821], [0.0164], [0.4728]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con1070').set_weights(w) 
in0Con95708 = tf.constant([[[0.6039], [0.7948]]])
in0Cro5354 = tf.constant([[[[1.9744, 1.8485, 1.4244], [1.6659, 1.3562, 1.8816]]]])
in0Sub33606 = tf.constant([[0.6045, 0.4031, 0.7062]])
in1Sub33606 = tf.constant([[0.4213, 0.4076, 0.5927]])
in0Con84992 = tf.constant([[0.651, 0.4975, 0.4519, 0.0359, 0.5193, 0.938, 0.3388, 0.2539, 0.6695]])
print (np.array2string(model.predict([in0Con95708,in0Cro5354,in0Sub33606,in1Sub33606,in0Con84992],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con1070.png')

LCon95708 = conv1D_layer([[[0.6039], [0.7948]]], 1,[[[0.8131, 0.2504]]],[0, 0], 1, true, 1, Con95708), 
LRes1038 = reshape_layer(Con95708, [2, 2, 1], Res1038), 
LRes74374 = reshape_layer(Res1038, [2, 2, 1, 1], Res74374), 
LCon80499 = conv3D_layer(Res74374, 2, 2, 1,[[[[[0.0878, 0.2129, 0.1526]]], [[[0.2503, 0.662, 0.5924]]]], [[[[0.2985, 0.0431, 0.813]]], [[[0.4444, 0.213, 0.6757]]]]],[0, 0, 0], 1, 1, 1, true, 1, 1, 1, Con80499), 
LRes54064 = reshape_layer(Con80499, [2, 2, 3], Res54064), 
LRes30690 = reshape_layer(Res54064, [2, 6], Res30690), 
LFla11864 = flatten_layer(Res30690, Fla11864), 
LCro5354 = cropping2D_layer([[[[1.9744, 1.8485, 1.4244], [1.6659, 1.3562, 1.8816]]]], 0, 0, 0, 1, Cro5354), 
LRes54203 = reshape_layer(Cro5354, [1, 3], Res54203), 
LFla26844 = flatten_layer(Res54203, Fla26844), 
LSub33606 = subtract_layer([[0.6045, 0.4031, 0.7062]], [[0.4213, 0.4076, 0.5927]], Sub33606), 
LSub66287 = subtract_layer(Fla26844,Sub33606, Sub66287), 
LCon84992 = concatenate_layer([Sub66287,[[0.651, 0.4975, 0.4519, 0.0359, 0.5193, 0.938, 0.3388, 0.2539, 0.6695]]], 1, Con84992), 
LMin25318 = minimum_layer([Fla11864,Con84992], Min25318), 
LRes46929 = reshape_layer(Min25318, [12, 1], Res46929), 
LRes54953 = reshape_layer(Res46929, [12, 1, 1], Res54953), 
LCon1070 = conv2D_transpose_layer(Res54953, 1, 1,[[[[0.1821], [0.0164], [0.4728]]]],[0, 0, 0], 1, 1, true, Con1070), 
exec_layers([LCon95708,LRes1038,LRes74374,LCon80499,LRes54064,LRes30690,LFla11864,LCro5354,LRes54203,LFla26844,LSub33606,LSub66287,LCon84992,LMin25318,LRes46929,LRes54953,LCon1070],["Con95708","Res1038","Res74374","Con80499","Res54064","Res30690","Fla11864","Cro5354","Res54203","Fla26844","Sub33606","Sub66287","Con84992","Min25318","Res46929","Res54953","Con1070"],Con1070,"Con1070")

Actual (Unparsed): [[[[0.0659770, 0.0059419, 0.1713010]], [[0.0500575, 0.0045082, 0.1299681]], [[0.1501216, 0.0135200, 0.3897722]], [[0.0132357, 0.0011920, 0.0343648]], [[0.0074245, 0.0006687, 0.0192768]], [[0.0336661, 0.0030320, 0.0874099]], [[0.0065374, 0.0005888, 0.0169735]], [[0.0490462, 0.0044171, 0.1273425]], [[0.0394276, 0.0035509, 0.1023689]], [[0.0031820, 0.0002866, 0.0082616]], [[0.0077157, 0.0006949, 0.0200330]], [[0.0055304, 0.0004981, 0.0143590]]]]

Expected (Unparsed): [[[[0.0659769759570858,0.005941913265767201,0.1713010117106544]],[[0.050057497183434906,0.004508198538211601,0.1299680651747832]],[[0.15012164142823023,0.013520016031976802,0.38977216950723365]],[[0.0132356950483248,0.0011920120746432,0.034364835908006396]],[[0.007424522559429601,0.0006686555188064001,0.019276849347052802]],[[0.0336661410365136,0.0030319863426624,0.0874099477323648]],[[0.0065373900000000006,0.00058876,0.01697352]],[[0.0490462473579732,0.0044171249679888,0.1273424807844576]],[[0.039427609615941606,0.0035508665442144003,0.1023688842746688]],[[0.0031819741317696,0.0002865698833664,0.0082616000521728]],[[0.0077157436520928005,0.0006948830087552,0.020032968691430397]],[[0.0055304015092032,0.0004980702073088001,0.0143589996350976]]]]

Actual:   [[[[0.066, 0.006, 0.1714]], [[0.0501, 0.0046, 0.13]], [[0.1502, 0.0136, 0.3898]], [[0.0133, 0.0012, 0.0344]], [[0.0075, 0.0007, 0.0193]], [[0.0337, 0.0031, 0.0875]], [[0.0066, 0.0006, 0.017]], [[0.0491, 0.0045, 0.1274]], [[0.0395, 0.0036, 0.1024]], [[0.0032, 0.0003, 0.0083]], [[0.0078, 0.0007, 0.0201]], [[0.0056, 0.0005, 0.0144]]]]

Expected: [[[[0.066, 0.006, 0.1714]], [[0.0501, 0.0046, 0.13]], [[0.1502, 0.0136, 0.3898]], [[0.0133, 0.0012, 0.0344]], [[0.0075, 0.0007, 0.0193]], [[0.0337, 0.0031, 0.0875]], [[0.0066, 0.0006, 0.017]], [[0.0491, 0.0045, 0.1274]], [[0.0395, 0.0036, 0.1024]], [[0.0032, 0.0003, 0.0083]], [[0.0078, 0.0007, 0.0201]], [[0.0056, 0.0005, 0.0144]]]]