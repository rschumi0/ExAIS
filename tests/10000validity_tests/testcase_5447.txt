import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Bat84681 = tf.keras.layers.Input(shape=([4, 2, 4]))
in0Up_91883 = tf.keras.layers.Input(shape=([4, 1, 4]))

Bat84681 = keras.layers.BatchNormalization(axis=2, epsilon=0.8194214123312793,  name = 'Bat84681', )(in0Bat84681)
Res6763 = keras.layers.Reshape((4, 8), name = 'Res6763', )(Bat84681)
Up_91883 = keras.layers.UpSampling2D(size=(2, 2), name = 'Up_91883', )(in0Up_91883)
Res75890 = keras.layers.Reshape((8, 8), name = 'Res75890', )(Up_91883)
Dot15627 = keras.layers.Dot(axes=(2, 2), name = 'Dot15627', )([Res6763,Res75890])
Sof46117 = keras.layers.Softmax(axis=1, name = 'Sof46117', )(Dot15627)
model = tf.keras.models.Model(inputs=[in0Bat84681,in0Up_91883], outputs=Sof46117)
w = model.get_layer('Bat84681').get_weights() 
w[0] = np.array([0.7035, 0.5914])
w[1] = np.array([0.8026, 0.6961])
w[2] = np.array([0.6204, 0.4314])
w[3] = np.array([0.6125, 0.8389])
model.get_layer('Bat84681').set_weights(w) 
in0Bat84681 = tf.constant([[[[1.4686, 1.3583, 1.8359, 1.2181], [1.3082, 1.3839, 1.0488, 1.5107]], [[1.3563, 1.3878, 1.7215, 1.1603], [1.7499, 1.0341, 1.6407, 1.9812]], [[1.2142, 1.4129, 1.8441, 1.2851], [1.9407, 1.3591, 1.7164, 1.1376]], [[1.8653, 1.4541, 1.0141, 1.4995], [1.5518, 1.748, 1.8688, 1.389]]]])
in0Up_91883 = tf.constant([[[[1.4887, 1.4149, 1.8792, 1.9566]], [[1.3744, 1.136, 1.1161, 1.0238]], [[1.8817, 1.998, 1.2379, 1.206]], [[1.4682, 1.0837, 1.9441, 1.2126]]]])
print (np.array2string(model.predict([in0Bat84681,in0Up_91883],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sof46117.png')

LBat84681 = batch_normalization_layer([[[[1.4686, 1.3583, 1.8359, 1.2181], [1.3082, 1.3839, 1.0488, 1.5107]], [[1.3563, 1.3878, 1.7215, 1.1603], [1.7499, 1.0341, 1.6407, 1.9812]], [[1.2142, 1.4129, 1.8441, 1.2851], [1.9407, 1.3591, 1.7164, 1.1376]], [[1.8653, 1.4541, 1.0141, 1.4995], [1.5518, 1.748, 1.8688, 1.389]]]], 2, 0.8194214123312793, [0.7035, 0.5914], [0.8026, 0.6961], [0.6204, 0.4314], [0.6125, 0.8389], Bat84681), 
LRes6763 = reshape_layer(Bat84681, [4, 8], Res6763), 
LUp_91883 = up_sampling2D_layer([[[[1.4887, 1.4149, 1.8792, 1.9566]], [[1.3744, 1.136, 1.1161, 1.0238]], [[1.8817, 1.998, 1.2379, 1.206]], [[1.4682, 1.0837, 1.9441, 1.2126]]]], 2, 2, Up_91883), 
LRes75890 = reshape_layer(Up_91883, [8, 8], Res75890), 
LDot15627 = dot_layer(Res6763,Res75890, 2, 2, Dot15627), 
LSof46117 = softmax_layer(Dot15627, 1, Sof46117), 
exec_layers([LBat84681,LRes6763,LUp_91883,LRes75890,LDot15627,LSof46117],["Bat84681","Res6763","Up_91883","Res75890","Dot15627","Sof46117"],Sof46117,"Sof46117")

Actual (Unparsed): [[[0.1391453, 0.1391453, 0.1626832, 0.1626832, 0.1378260, 0.1378260, 0.1455705, 0.1455705], [0.2921241, 0.2921241, 0.2526043, 0.2526043, 0.2148613, 0.2148613, 0.2828098, 0.2828098], [0.2450893, 0.2450893, 0.2500034, 0.2500034, 0.2348357, 0.2348357, 0.2858314, 0.2858314], [0.3236412, 0.3236412, 0.3347091, 0.3347091, 0.4124771, 0.4124771, 0.2857883, 0.2857883]]]

Expected (Unparsed): [[[0.13914536613883735,0.13914536613883735,0.16268325697431255,0.16268325697431255,0.1378259865101604,0.1378259865101604,0.1455704980387519,0.1455704980387519],[0.2921241317280844,0.2921241317280844,0.25260426696646887,0.25260426696646887,0.2148612740480785,0.2148612740480785,0.2828097842168488,0.2828097842168488],[0.24508936009158205,0.24508936009158205,0.2500034078408114,0.2500034078408114,0.23483568397076512,0.23483568397076512,0.28583145343067395,0.28583145343067395],[0.32364114204149613,0.32364114204149613,0.3347090682184072,0.3347090682184072,0.412477055470996,0.412477055470996,0.28578826431372534,0.28578826431372534]]]

Actual:   [[[0.1392, 0.1392, 0.1627, 0.1627, 0.1379, 0.1379, 0.1456, 0.1456], [0.2922, 0.2922, 0.2527, 0.2527, 0.2149, 0.2149, 0.2829, 0.2829], [0.2451, 0.2451, 0.2501, 0.2501, 0.2349, 0.2349, 0.2859, 0.2859], [0.3237, 0.3237, 0.3348, 0.3348, 0.4125, 0.4125, 0.2858, 0.2858]]]

Expected: [[[0.1392, 0.1392, 0.1627, 0.1627, 0.1379, 0.1379, 0.1456, 0.1456], [0.2922, 0.2922, 0.2527, 0.2527, 0.2149, 0.2149, 0.2829, 0.2829], [0.2451, 0.2451, 0.2501, 0.2501, 0.2349, 0.2349, 0.2859, 0.2859], [0.3237, 0.3237, 0.3348, 0.3348, 0.4125, 0.4125, 0.2858, 0.2858]]]