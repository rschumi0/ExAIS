import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro17102 = tf.keras.layers.Input(shape=([1, 4, 3, 2]))
in0Con88725 = tf.keras.layers.Input(shape=([2, 4, 1]))
in0Min81073 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Min81073 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Lea21518 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Con37971 = tf.keras.layers.Input(shape=([2, 2, 2]))

Cro17102 = keras.layers.Cropping3D(cropping=((0, 0), (1, 0), (2, 0)), name = 'Cro17102', )(in0Cro17102)
Res83105 = keras.layers.Reshape((1, 3, 2), name = 'Res83105', )(Cro17102)
Sep48529 = keras.layers.SeparableConv2D(3, (1, 2),strides=(1, 1), padding='same', name = 'Sep48529', )(Res83105)
Zer49067 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer49067', )(Sep48529)
Con88725 = keras.layers.Concatenate(axis=3, name = 'Con88725', )([Zer49067,in0Con88725])
Min81073 = keras.layers.Minimum(name = 'Min81073', )([in0Min81073,in1Min81073])
Res7826 = keras.layers.Reshape((2, 2, 4), name = 'Res7826', )(Min81073)
Lea21518 = keras.layers.LeakyReLU(alpha=0.1469547287096029, name = 'Lea21518', input_shape=(1, 2, 2))(in0Lea21518)
Zer23170 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer23170', )(Lea21518)
Con37971 = keras.layers.Concatenate(axis=3, name = 'Con37971', )([Zer23170,in0Con37971])
Add92099 = keras.layers.Add(name = 'Add92099', )([Res7826,Con37971])
Mas69284 = keras.layers.Masking(mask_value=1, name = 'Mas69284', )(Add92099)
Zer3451 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer3451', )(Mas69284)
Max78457 = keras.layers.Maximum(name = 'Max78457', )([Con88725,Zer3451])
model = tf.keras.models.Model(inputs=[in0Cro17102,in0Con88725,in0Min81073,in1Min81073,in0Lea21518,in0Con37971], outputs=Max78457)
w = model.get_layer('Sep48529').get_weights() 
w[0] = np.array([[[[0.159], [0.4881]], [[0.3771], [0.6068]]]])
w[1] = np.array([[[[0.0321, 0.9706, 0.785], [0.2541, 0.5977, 0.3591]]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep48529').set_weights(w) 
in0Cro17102 = tf.constant([[[[[1.7341, 1.6053], [1.4754, 1.718], [1.198, 1.923]], [[1.2614, 1.0586], [1.6946, 1.8343], [1.1492, 1.332]], [[1.9494, 1.925], [1.7205, 1.3326], [1.7424, 1.1373]], [[1.7639, 1.185], [1.0128, 1.4998], [1.4094, 1.3344]]]]])
in0Con88725 = tf.constant([[[[0.7038], [0.0605], [0.5733], [0.6472]], [[0.2497], [0.3847], [0.9983], [0.3548]]]])
in0Min81073 = tf.constant([[[[[0.0489, 0.6663], [0.2573, 0.2779]], [[0.4884, 0.7307], [0.9485, 0.2751]]], [[[0.6754, 0.5212], [0.3295, 0.5252]], [[0.7727, 0.5906], [0.6133, 0.3301]]]]])
in1Min81073 = tf.constant([[[[[0.9128, 0.4196], [0.7102, 0.5765]], [[0.5849, 0.9294], [0.2062, 0.466]]], [[[0.4019, 0.2584], [0.3085, 0.7962]], [[0.3697, 0.9011], [0.439, 0.255]]]]])
in0Lea21518 = tf.constant([[[[0.7883, 0.7291], [0.0631, 0.1262]]]])
in0Con37971 = tf.constant([[[[0.3107, 0.4023], [0.3605, 0.886]], [[0.8811, 0.269], [0.9536, 0.3943]]]])
print (np.array2string(model.predict([in0Cro17102,in0Con88725,in0Min81073,in1Min81073,in0Lea21518,in0Con37971],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max78457.png')

LCro17102 = cropping3D_layer([[[[[1.7341, 1.6053], [1.4754, 1.718], [1.198, 1.923]], [[1.2614, 1.0586], [1.6946, 1.8343], [1.1492, 1.332]], [[1.9494, 1.925], [1.7205, 1.3326], [1.7424, 1.1373]], [[1.7639, 1.185], [1.0128, 1.4998], [1.4094, 1.3344]]]]], 0, 0, 1, 0, 2, 0, Cro17102), 
LRes83105 = reshape_layer(Cro17102, [1, 3, 2], Res83105), 
LSep48529 = separable_conv2D_layer(Res83105, 1, 2,[[[[[0.159], [0.4881]], [[0.3771], [0.6068]]]],[[[[0.0321, 0.9706, 0.785], [0.2541, 0.5977, 0.3591]]]]],[0, 0, 0], 1, 1, true, Sep48529), 
LZer49067 = zero_padding2D_layer(Sep48529, 1, 0, 1, 0, Zer49067), 
LCon88725 = concatenate_layer([Zer49067,[[[[0.7038], [0.0605], [0.5733], [0.6472]], [[0.2497], [0.3847], [0.9983], [0.3548]]]]], 3, Con88725), 
LMin81073 = minimum_layer([[[[[[0.0489, 0.6663], [0.2573, 0.2779]], [[0.4884, 0.7307], [0.9485, 0.2751]]], [[[0.6754, 0.5212], [0.3295, 0.5252]], [[0.7727, 0.5906], [0.6133, 0.3301]]]]], [[[[[0.9128, 0.4196], [0.7102, 0.5765]], [[0.5849, 0.9294], [0.2062, 0.466]]], [[[0.4019, 0.2584], [0.3085, 0.7962]], [[0.3697, 0.9011], [0.439, 0.255]]]]]], Min81073), 
LRes7826 = reshape_layer(Min81073, [2, 2, 4], Res7826), 
LLea21518 = leaky_relu_layer([[[[0.7883, 0.7291], [0.0631, 0.1262]]]], 0.1469547287096029, Lea21518), 
LZer23170 = zero_padding2D_layer(Lea21518, 1, 0, 0, 0, Zer23170), 
LCon37971 = concatenate_layer([Zer23170,[[[[0.3107, 0.4023], [0.3605, 0.886]], [[0.8811, 0.269], [0.9536, 0.3943]]]]], 3, Con37971), 
LAdd92099 = add_layer([Res7826,Con37971], Add92099), 
LMas69284 = masking_layer(Add92099, 1, Mas69284), 
LZer3451 = zero_padding2D_layer(Mas69284, 0, 0, 2, 0, Zer3451), 
LMax78457 = maximum_layer([Con88725,Zer3451], Max78457), 
exec_layers([LCro17102,LRes83105,LSep48529,LZer49067,LCon88725,LMin81073,LRes7826,LLea21518,LZer23170,LCon37971,LAdd92099,LMas69284,LZer3451,LMax78457],["Cro17102","Res83105","Sep48529","Zer49067","Con88725","Min81073","Res7826","Lea21518","Zer23170","Con37971","Add92099","Mas69284","Zer3451","Max78457"],Max78457,"Max78457")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.7038000], [0.0000000, 0.0000000, 0.0000000, 0.0605000], [0.0489000, 0.4196000, 0.5680000, 0.6802000], [0.4884000, 0.7307000, 0.5667000, 1.1611000]], [[0.0000000, 0.0000000, 0.0000000, 0.2497000], [0.3675178, 1.6161674, 1.1405171, 0.3847000], [1.1902000, 1.6005146, 1.1896000, 0.9983000], [0.4328000, 0.7168000, 1.3926000, 0.6493000]]]]

Expected (Unparsed): [[[[0,0,0,0.7038],[0,0,0,0.0605],[0.0489,0.4196,0.568,0.6801999999999999],[0.4884,0.7307,0.5667,1.1611]],[[0,0,0,0.2497],[0.36751778470799995,1.6161673533719998,1.140517130244,0.3847],[1.1902,1.600514586489,1.1896,0.9983],[0.43279999999999996,0.7168,1.3926,0.6493]]]]

Actual:   [[[[0, 0, 0, 0.7038], [0, 0, 0, 0.0605], [0.0489, 0.4196, 0.568, 0.6802], [0.4884, 0.7307, 0.5667, 1.1611]], [[0, 0, 0, 0.2497], [0.3676, 1.6162, 1.1406, 0.3847], [1.1902, 1.6006, 1.1896, 0.9983], [0.4328, 0.7168, 1.3926, 0.6493]]]]

Expected: [[[[0, 0, 0, 0.7038], [0, 0, 0, 0.0605], [0.0489, 0.4196, 0.568, 0.6802], [0.4884, 0.7307, 0.5667, 1.1611]], [[0, 0, 0, 0.2497], [0.3676, 1.6162, 1.1406, 0.3847], [1.1902, 1.6006, 1.1896, 0.9983], [0.4328, 0.7168, 1.3926, 0.6493]]]]