import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Thr59140 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Con64426 = tf.keras.layers.Input(shape=([8, 3, 1, 3]))
in0Lea50718 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Dot36587 = tf.keras.layers.Input(shape=([2]))
in1Dot36587 = tf.keras.layers.Input(shape=([2]))
in0Con83700 = tf.keras.layers.Input(shape=([7]))

Thr59140 = keras.layers.ThresholdedReLU(theta=2.4993245179588888, name = 'Thr59140', input_shape=(1, 2, 1, 1))(in0Thr59140)
Zer39518 = keras.layers.ZeroPadding3D(padding=((7, 0), (1, 0), (0, 0)), name = 'Zer39518', )(Thr59140)
Con64426 = keras.layers.Concatenate(axis=4, name = 'Con64426', )([Zer39518,in0Con64426])
Lea50718 = keras.layers.LeakyReLU(alpha=2.629141416396813, name = 'Lea50718', input_shape=(2, 2, 1, 2))(in0Lea50718)
Res16872 = keras.layers.Reshape((2, 2, 2), name = 'Res16872', )(Lea50718)
Res3448 = keras.layers.Reshape((2, 4), name = 'Res3448', )(Res16872)
Fla73752 = keras.layers.Flatten(name = 'Fla73752', )(Res3448)
Dot36587 = keras.layers.Dot(axes=(1, 1), name = 'Dot36587', )([in0Dot36587,in1Dot36587])
Con83700 = keras.layers.Concatenate(axis=1, name = 'Con83700', )([Dot36587,in0Con83700])
Sub87110 = keras.layers.Subtract(name = 'Sub87110', )([Fla73752,Con83700])
Res86884 = keras.layers.Reshape((8, 1), name = 'Res86884', )(Sub87110)
Res57155 = keras.layers.Reshape((8, 1, 1), name = 'Res57155', )(Res86884)
Res40836 = keras.layers.Reshape((8, 1, 1, 1), name = 'Res40836', )(Res57155)
Con35087 = keras.layers.Conv3DTranspose(4, (1, 1, 1),strides=(1, 1, 1), padding='same', name = 'Con35087', )(Res40836)
Zer32751 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (0, 0)), name = 'Zer32751', )(Con35087)
Min28583 = keras.layers.Minimum(name = 'Min28583', )([Con64426,Zer32751])
model = tf.keras.models.Model(inputs=[in0Thr59140,in0Con64426,in0Lea50718,in0Dot36587,in1Dot36587,in0Con83700], outputs=Min28583)
w = model.get_layer('Con35087').get_weights() 
w[0] = np.array([[[[[0.7964], [0.5144], [0.1546], [0.1367]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con35087').set_weights(w) 
in0Thr59140 = tf.constant([[[[[0.7678]], [[0.4912]]]]])
in0Con64426 = tf.constant([[[[[0.2813, 0.462, 0.5988]], [[0.1319, 0.9923, 0.05]], [[0.2517, 0.9553, 0.876]]], [[[0.8567, 0.0145, 0.9201]], [[0.375, 0.0748, 0.362]], [[0.7152, 0.7566, 0.8507]]], [[[0.5098, 0.7951, 0.7956]], [[0.8572, 0.7823, 0.7964]], [[0.6407, 0.0584, 0.9407]]], [[[0.9712, 0.7129, 0.3305]], [[0.3043, 0.7553, 0.5524]], [[0.1772, 0.3911, 0.1209]]], [[[0.5041, 0.5102, 0.1078]], [[0.5442, 0.0125, 0.3529]], [[0.2266, 0.2623, 0.0797]]], [[[0.3698, 0.9991, 0.9878]], [[0.1384, 0.3224, 0.2809]], [[0.4064, 0.1836, 0.9117]]], [[[0.4645, 0.5892, 0.5171]], [[0.9781, 0.8519, 0.9187]], [[0.867, 0.6987, 0.8398]]], [[[0.2498, 0.9633, 0.2483]], [[0.4315, 0.8045, 0.8727]], [[0.3694, 0.1456, 0.7341]]]]])
in0Lea50718 = tf.constant([[[[[0.386, 0.285]], [[0.2868, 0.3897]]], [[[0.5473, 0.1723]], [[0.5902, 0.8]]]]])
in0Dot36587 = tf.constant([[0.0188, 0.4979]])
in1Dot36587 = tf.constant([[0.0391, 0.0007]])
in0Con83700 = tf.constant([[0.5814, 0.4453, 0.4658, 0.97, 0.726, 0.349, 0.5016]])
print (np.array2string(model.predict([in0Thr59140,in0Con64426,in0Lea50718,in0Dot36587,in1Dot36587,in0Con83700],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min28583.png')

LThr59140 = thresholded_relu_layer([[[[[0.7678]], [[0.4912]]]]], 2.4993245179588888, Thr59140), 
LZer39518 = zero_padding3D_layer(Thr59140, 7, 0, 1, 0, 0, 0, Zer39518), 
LCon64426 = concatenate_layer([Zer39518,[[[[[0.2813, 0.462, 0.5988]], [[0.1319, 0.9923, 0.05]], [[0.2517, 0.9553, 0.876]]], [[[0.8567, 0.0145, 0.9201]], [[0.375, 0.0748, 0.362]], [[0.7152, 0.7566, 0.8507]]], [[[0.5098, 0.7951, 0.7956]], [[0.8572, 0.7823, 0.7964]], [[0.6407, 0.0584, 0.9407]]], [[[0.9712, 0.7129, 0.3305]], [[0.3043, 0.7553, 0.5524]], [[0.1772, 0.3911, 0.1209]]], [[[0.5041, 0.5102, 0.1078]], [[0.5442, 0.0125, 0.3529]], [[0.2266, 0.2623, 0.0797]]], [[[0.3698, 0.9991, 0.9878]], [[0.1384, 0.3224, 0.2809]], [[0.4064, 0.1836, 0.9117]]], [[[0.4645, 0.5892, 0.5171]], [[0.9781, 0.8519, 0.9187]], [[0.867, 0.6987, 0.8398]]], [[[0.2498, 0.9633, 0.2483]], [[0.4315, 0.8045, 0.8727]], [[0.3694, 0.1456, 0.7341]]]]]], 4, Con64426), 
LLea50718 = leaky_relu_layer([[[[[0.386, 0.285]], [[0.2868, 0.3897]]], [[[0.5473, 0.1723]], [[0.5902, 0.8]]]]], 2.629141416396813, Lea50718), 
LRes16872 = reshape_layer(Lea50718, [2, 2, 2], Res16872), 
LRes3448 = reshape_layer(Res16872, [2, 4], Res3448), 
LFla73752 = flatten_layer(Res3448, Fla73752), 
LDot36587 = dot_layer([[0.0188, 0.4979]], [[0.0391, 0.0007]], 1, 1, Dot36587), 
LCon83700 = concatenate_layer([Dot36587,[[0.5814, 0.4453, 0.4658, 0.97, 0.726, 0.349, 0.5016]]], 1, Con83700), 
LSub87110 = subtract_layer(Fla73752,Con83700, Sub87110), 
LRes86884 = reshape_layer(Sub87110, [8, 1], Res86884), 
LRes57155 = reshape_layer(Res86884, [8, 1, 1], Res57155), 
LRes40836 = reshape_layer(Res57155, [8, 1, 1, 1], Res40836), 
LCon35087 = conv3D_transpose_layer(Res40836, 1, 1, 1,[[[[[0.7964], [0.5144], [0.1546], [0.1367]]]]],[0, 0, 0, 0], 1, 1, 1, true, Con35087), 
LZer32751 = zero_padding3D_layer(Con35087, 0, 0, 2, 0, 0, 0, Zer32751), 
LMin28583 = minimum_layer([Con64426,Zer32751], Min28583), 
exec_layers([LThr59140,LZer39518,LCon64426,LLea50718,LRes16872,LRes3448,LFla73752,LDot36587,LCon83700,LSub87110,LRes86884,LRes57155,LRes40836,LCon35087,LZer32751,LMin28583],["Thr59140","Zer39518","Con64426","Lea50718","Res16872","Res3448","Fla73752","Dot36587","Con83700","Sub87110","Res86884","Res57155","Res40836","Con35087","Zer32751","Min28583"],Min28583,"Min28583")

Actual (Unparsed): [[[[[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.1980010, 0.0595081, 0.0526181]]], [[[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[-0.2360529, -0.1524682, -0.0458234, -0.0405179]]], [[[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[-0.1262294, -0.0815324, -0.0245041, -0.0216670]]], [[[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[-0.0606060, -0.0391458, -0.0117651, -0.0104029]]], [[[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[-0.3366383, -0.2174369, -0.0653494, -0.0577831]]], [[[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[-0.4409667, -0.2848233, -0.0856020, -0.0756908]]], [[[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.1240733, 0.0372895, 0.0329720]]], [[[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.1534970, 0.0461326, 0.0407913]]]]]

Expected (Unparsed): [[[[[0,0,0,0]],[[0,0,0,0]],[[0,0.198000991016,0.059508073893999994,0.05261807051299999]]],[[[0,0,0,0]],[[0,0,0,0]],[[-0.23605296000000003,-0.15246816000000002,-0.04582344000000001,-0.040517880000000006]]],[[[0,0,0,0]],[[0,0,0,0]],[[-0.1262294,-0.08153239999999998,-0.024504099999999994,-0.021666949999999994]]],[[[0,0,0,0]],[[0,0,0,0]],[[-0.06060604,-0.03914584,-0.011765059999999999,-0.01040287]]],[[[0,0,0,0]],[[0,0,0,0]],[[-0.33663827999999996,-0.21743687999999997,-0.06534941999999999,-0.05778308999999999]]],[[[0,0,0,0]],[[0,0,0,0]],[[-0.44096668,-0.28482327999999996,-0.08560201999999999,-0.07569079]]],[[[0,0,0,0]],[[0,0,0,0]],[[0,0.12407327999999998,0.03728951999999999,0.032972039999999994]]],[[[0,0,0,0]],[[0,0,0,0]],[[0,0.15349696,0.046132639999999996,0.04079128]]]]]

Actual:   [[[[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[0, 0.1981, 0.0596, 0.0527]]], [[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[-0.236, -0.1524, -0.0458, -0.0405]]], [[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[-0.1262, -0.0815, -0.0245, -0.0216]]], [[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[-0.0606, -0.0391, -0.0117, -0.0104]]], [[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[-0.3366, -0.2174, -0.0653, -0.0577]]], [[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[-0.4409, -0.2848, -0.0856, -0.0756]]], [[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[0, 0.1241, 0.0373, 0.033]]], [[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[0, 0.1535, 0.0462, 0.0408]]]]]

Expected: [[[[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[0, 0.1981, 0.0596, 0.0527]]], [[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[-0.236, -0.1524, -0.0458, -0.0405]]], [[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[-0.1262, -0.0815, -0.0245, -0.0216]]], [[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[-0.0606, -0.0391, -0.0117, -0.0104]]], [[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[-0.3366, -0.2174, -0.0653, -0.0577]]], [[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[-0.4409, -0.2848, -0.0856, -0.0756]]], [[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[0, 0.1241, 0.0373, 0.033]]], [[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[0, 0.1535, 0.0462, 0.0408]]]]]