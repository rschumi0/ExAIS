import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Up_10187 = tf.keras.layers.Input(shape=([2, 1, 3, 2]))
in0Ave92125 = tf.keras.layers.Input(shape=([2, 1]))
in0Con10335 = tf.keras.layers.Input(shape=([1, 23]))
in0Ave30041 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in1Ave30041 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))

Up_10187 = keras.layers.UpSampling3D(size=(1, 2, 2), name = 'Up_10187', )(in0Up_10187)
Res21035 = keras.layers.Reshape((2, 2, 12), name = 'Res21035', )(Up_10187)
Res92493 = keras.layers.Reshape((2, 24), name = 'Res92493', )(Res21035)
Cro47883 = keras.layers.Cropping1D(cropping=((1, 0)), name = 'Cro47883', )(Res92493)
Ave92125 = keras.layers.AveragePooling1D(pool_size=(2), name = 'Ave92125', )(in0Ave92125)
Con10335 = keras.layers.Concatenate(axis=2, name = 'Con10335', )([Ave92125,in0Con10335])
Add79406 = keras.layers.Add(name = 'Add79406', )([Cro47883,Con10335])
Res23373 = keras.layers.Reshape((1, 24, 1), name = 'Res23373', )(Add79406)
Res96093 = keras.layers.Reshape((1, 24, 1, 1), name = 'Res96093', )(Res23373)
Zer59984 = keras.layers.ZeroPadding3D(padding=((1, 0), (23, 0), (0, 0)), name = 'Zer59984', )(Res96093)
Ave30041 = keras.layers.Average(name = 'Ave30041', )([in0Ave30041,in1Ave30041])
Mas32124 = keras.layers.Masking(mask_value=2, name = 'Mas32124', )(Ave30041)
Zer2049 = keras.layers.ZeroPadding3D(padding=((0, 0), (46, 0), (0, 0)), name = 'Zer2049', )(Mas32124)
Sub4106 = keras.layers.Subtract(name = 'Sub4106', )([Zer59984,Zer2049])
model = tf.keras.models.Model(inputs=[in0Up_10187,in0Ave92125,in0Con10335,in0Ave30041,in1Ave30041], outputs=Sub4106)
in0Up_10187 = tf.constant([[[[[1.6407, 1.2163], [1.1897, 1.091], [1.1408, 1.7443]]], [[[1.4826, 1.9177], [1.14, 1.351], [1.4426, 1.6678]]]]])
in0Ave92125 = tf.constant([[[1.0717], [1.7683]]])
in0Con10335 = tf.constant([[[0.3438, 0.4669, 0.3575, 0.556, 0.2073, 0.4399, 0.3489, 0.6243, 0.5131, 0.1634, 0.0066, 0.8063, 0.4638, 0.2583, 0.7221, 0.0603, 0.8563, 0.5242, 0.5356, 0.3472, 0.6134, 0.9855, 0.4653]]])
in0Ave30041 = tf.constant([[[[[0.8356]]], [[[0.9475]]]]])
in1Ave30041 = tf.constant([[[[[0.6683]]], [[[0.2769]]]]])
print (np.array2string(model.predict([in0Up_10187,in0Ave92125,in0Con10335,in0Ave30041,in1Ave30041],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub4106.png')

LUp_10187 = up_sampling3D_layer([[[[[1.6407, 1.2163], [1.1897, 1.091], [1.1408, 1.7443]]], [[[1.4826, 1.9177], [1.14, 1.351], [1.4426, 1.6678]]]]], 1, 2, 2, Up_10187), 
LRes21035 = reshape_layer(Up_10187, [2, 2, 12], Res21035), 
LRes92493 = reshape_layer(Res21035, [2, 24], Res92493), 
LCro47883 = cropping1D_layer(Res92493, 1, 0, Cro47883), 
LAve92125 = average_pooling1D_layer([[[1.0717], [1.7683]]], 2, Ave92125), 
LCon10335 = concatenate_layer([Ave92125,[[[0.3438, 0.4669, 0.3575, 0.556, 0.2073, 0.4399, 0.3489, 0.6243, 0.5131, 0.1634, 0.0066, 0.8063, 0.4638, 0.2583, 0.7221, 0.0603, 0.8563, 0.5242, 0.5356, 0.3472, 0.6134, 0.9855, 0.4653]]]], 2, Con10335), 
LAdd79406 = add_layer([Cro47883,Con10335], Add79406), 
LRes23373 = reshape_layer(Add79406, [1, 24, 1], Res23373), 
LRes96093 = reshape_layer(Res23373, [1, 24, 1, 1], Res96093), 
LZer59984 = zero_padding3D_layer(Res96093, 1, 0, 23, 0, 0, 0, Zer59984), 
LAve30041 = average_layer([[[[[[0.8356]]], [[[0.9475]]]]], [[[[[0.6683]]], [[[0.2769]]]]]], Ave30041), 
LMas32124 = masking_layer(Ave30041, 2, Mas32124), 
LZer2049 = zero_padding3D_layer(Mas32124, 0, 0, 46, 0, 0, 0, Zer2049), 
LSub4106 = subtract_layer(Zer59984,Zer2049, Sub4106), 
exec_layers([LUp_10187,LRes21035,LRes92493,LCro47883,LAve92125,LCon10335,LAdd79406,LRes23373,LRes96093,LZer59984,LAve30041,LMas32124,LZer2049,LSub4106],["Up_10187","Res21035","Res92493","Cro47883","Ave92125","Con10335","Add79406","Res23373","Res96093","Zer59984","Ave30041","Mas32124","Zer2049","Sub4106"],Sub4106,"Sub4106")

Actual (Unparsed

Expected (Unparsed): [[[[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[-0.75195]]],[[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[2.9025999999999996]],[[2.2615]],[[1.9495]],[[2.2752]],[[1.696]],[[1.5583]],[[1.5798999999999999]],[[1.6999]],[[2.0669]],[[2.1809]],[[1.606]],[[1.6743999999999999]],[[2.2889]],[[2.3815]],[[1.7409]],[[2.6398]],[[1.2003]],[[2.2073]],[[1.6642]],[[1.8866]],[[1.7898]],[[2.2812]],[[2.4281]],[[1.5208999999999997]]]]]

Actual

Expected