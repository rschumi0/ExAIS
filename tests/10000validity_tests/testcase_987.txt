import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Up_62098 = tf.keras.layers.Input(shape=([4, 1, 4, 1]))
in0ReL44803 = tf.keras.layers.Input(shape=([2, 2, 1, 1]))
in0Glo26062 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in0Con65820 = tf.keras.layers.Input(shape=([95]))
in0Add72038 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in1Add72038 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in0Glo51111 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Con93260 = tf.keras.layers.Input(shape=([92]))

Up_62098 = keras.layers.UpSampling3D(size=(1, 1, 2), name = 'Up_62098', )(in0Up_62098)
Zer75767 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (0, 0)), name = 'Zer75767', )(Up_62098)
ReL44803 = keras.layers.ReLU(max_value=9.67932763475074, negative_slope=7.277148387035011, threshold=0.0017683861878425855, name = 'ReL44803', input_shape=(2, 2, 1, 1))(in0ReL44803)
Zer34116 = keras.layers.ZeroPadding3D(padding=((2, 0), (1, 0), (7, 0)), name = 'Zer34116', )(ReL44803)
Add27076 = keras.layers.Add(name = 'Add27076', )([Zer75767,Zer34116])
Res81116 = keras.layers.Reshape((4, 3, 8), name = 'Res81116', )(Add27076)
Res93004 = keras.layers.Reshape((4, 24), name = 'Res93004', )(Res81116)
Fla63323 = keras.layers.Flatten(name = 'Fla63323', )(Res93004)
Glo26062 = keras.layers.GlobalMaxPool3D(name = 'Glo26062', )(in0Glo26062)
Con65820 = keras.layers.Concatenate(axis=1, name = 'Con65820', )([Glo26062,in0Con65820])
Min63907 = keras.layers.Minimum(name = 'Min63907', )([Fla63323,Con65820])
Add72038 = keras.layers.Add(name = 'Add72038', )([in0Add72038,in1Add72038])
Glo51111 = keras.layers.GlobalMaxPool2D(name = 'Glo51111', )(in0Glo51111)
Res68415 = keras.layers.Reshape((2, 1), name = 'Res68415', )(Glo51111)
Res26722 = keras.layers.Reshape((2, 1, 1), name = 'Res26722', )(Res68415)
Res46148 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res46148', )(Res26722)
Up_98895 = keras.layers.UpSampling3D(size=(1, 1, 1), name = 'Up_98895', )(Res46148)
Zer2967 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (1, 0)), name = 'Zer2967', )(Up_98895)
Ave73646 = keras.layers.Average(name = 'Ave73646', )([Add72038,Zer2967])
Fla3777 = keras.layers.Flatten(name = 'Fla3777', )(Ave73646)
Con93260 = keras.layers.Concatenate(axis=1, name = 'Con93260', )([Fla3777,in0Con93260])
Ave20859 = keras.layers.Average(name = 'Ave20859', )([Min63907,Con93260])
model = tf.keras.models.Model(inputs=[in0Up_62098,in0ReL44803,in0Glo26062,in0Con65820,in0Add72038,in1Add72038,in0Glo51111,in0Con93260], outputs=Ave20859)
in0Up_62098 = tf.constant([[[[[1.0835], [1.6425], [1.3201], [1.1485]]], [[[1.7046], [1.8987], [1.8588], [1.6614]]], [[[1.6294], [1.5992], [1.4926], [1.4665]]], [[[1.6764], [1.0207], [1.6942], [1.94]]]]])
in0ReL44803 = tf.constant([[[[[0.9881]], [[0.3345]]], [[[0.4511]], [[0.8114]]]]])
in0Glo26062 = tf.constant([[[[[1.4478]]], [[[1.9753]]]]])
in0Con65820 = tf.constant([[0.694, 0.4392, 0.2424, 0.327, 0.4731, 0.7395, 0.1002, 0.6483, 0.5815, 0.6409, 0.4877, 0.3774, 0.5065, 0.5065, 0.9226, 0.4276, 0.3704, 0.8007, 0.7521, 0.2669, 0.3686, 0.0105, 0.8358, 0.1793, 0.1846, 0.6343, 0.5298, 0.4008, 0.7933, 0.6861, 0.5696, 0.5645, 0.3217, 0.8366, 0.6005, 0.0842, 0.9255, 0.2679, 0.7836, 0.0692, 0.9643, 0.5534, 0.119, 0.1209, 0.107, 0.389, 0.8693, 0.8869, 0.3856, 0.8044, 0.7412, 0.5677, 0.6291, 0.5556, 0.2909, 0.6623, 0.1556, 0.7676, 0.3515, 0.1162, 0.0799, 0.5311, 0.1542, 0.6927, 0.0997, 0.085, 0.2092, 0.8259, 0.1664, 0.4165, 0.9468, 0.4351, 0.0161, 0.6002, 0.5796, 0.1799, 0.1393, 0.96, 0.6392, 0.4172, 0.4029, 0.1881, 0.1666, 0.6873, 0.1997, 0.8839, 0.5902, 0.8983, 0.7017, 0.5859, 0.9128, 0.5038, 0.5169, 0.2607, 0.9464]])
in0Add72038 = tf.constant([[[[[0.8758], [0.4464]]], [[[0.0342], [0.7147]]]]])
in1Add72038 = tf.constant([[[[[0.9413], [0.9359]]], [[[0.0048], [0.6381]]]]])
in0Glo51111 = tf.constant([[[[1.9903, 1.0615]], [[1.3256, 1.7884]]]])
in0Con93260 = tf.constant([[0.8116, 0.4472, 0.6267, 0.8996, 0.7237, 0.485, 0.4376, 0.5463, 0.3178, 0.7115, 0.4901, 0.7172, 0.1072, 0.6988, 0.285, 0.277, 0.2841, 0.8515, 0.0266, 0.9194, 0.7287, 0.0017, 0.9614, 0.1073, 0.6125, 0.2878, 0.4147, 0.1163, 0.1075, 0.2011, 0.2285, 0.6709, 0.5754, 0.9329, 0.7475, 0.6087, 0.8831, 0.054, 0.8509, 0.12, 0.1662, 0.1221, 0.7765, 0.369, 0.445, 0.0267, 0.6526, 0.7222, 0.9887, 0.753, 0.7142, 0.3861, 0.2177, 0.7742, 0.1561, 0.9877, 0.2334, 0.4685, 0.4576, 0.5165, 0.7793, 0.7951, 0.7935, 0.0948, 0.5431, 0.9619, 0.8465, 0.2387, 0.2376, 0.9714, 0.9273, 0.6334, 0.8191, 0.7392, 0.8191, 0.9538, 0.5399, 0.948, 0.1701, 0.9363, 0.2664, 0.9186, 0.579, 0.7271, 0.6431, 0.5606, 0.7391, 0.518, 0.2321, 0.8999, 0.1364, 0.6164]])
print (np.array2string(model.predict([in0Up_62098,in0ReL44803,in0Glo26062,in0Con65820,in0Add72038,in1Add72038,in0Glo51111,in0Con93260],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave20859.png')

LUp_62098 = up_sampling3D_layer([[[[[1.0835], [1.6425], [1.3201], [1.1485]]], [[[1.7046], [1.8987], [1.8588], [1.6614]]], [[[1.6294], [1.5992], [1.4926], [1.4665]]], [[[1.6764], [1.0207], [1.6942], [1.94]]]]], 1, 1, 2, Up_62098), 
LZer75767 = zero_padding3D_layer(Up_62098, 0, 0, 2, 0, 0, 0, Zer75767), 
LReL44803 = relu_layer([[[[[0.9881]], [[0.3345]]], [[[0.4511]], [[0.8114]]]]], 9.67932763475074, 7.277148387035011, 0.0017683861878425855, ReL44803), 
LZer34116 = zero_padding3D_layer(ReL44803, 2, 0, 1, 0, 7, 0, Zer34116), 
LAdd27076 = add_layer([Zer75767,Zer34116], Add27076), 
LRes81116 = reshape_layer(Add27076, [4, 3, 8], Res81116), 
LRes93004 = reshape_layer(Res81116, [4, 24], Res93004), 
LFla63323 = flatten_layer(Res93004, Fla63323), 
LGlo26062 = global_max_pool3D_layer([[[[[1.4478]]], [[[1.9753]]]]], Glo26062), 
LCon65820 = concatenate_layer([Glo26062,[[0.694, 0.4392, 0.2424, 0.327, 0.4731, 0.7395, 0.1002, 0.6483, 0.5815, 0.6409, 0.4877, 0.3774, 0.5065, 0.5065, 0.9226, 0.4276, 0.3704, 0.8007, 0.7521, 0.2669, 0.3686, 0.0105, 0.8358, 0.1793, 0.1846, 0.6343, 0.5298, 0.4008, 0.7933, 0.6861, 0.5696, 0.5645, 0.3217, 0.8366, 0.6005, 0.0842, 0.9255, 0.2679, 0.7836, 0.0692, 0.9643, 0.5534, 0.119, 0.1209, 0.107, 0.389, 0.8693, 0.8869, 0.3856, 0.8044, 0.7412, 0.5677, 0.6291, 0.5556, 0.2909, 0.6623, 0.1556, 0.7676, 0.3515, 0.1162, 0.0799, 0.5311, 0.1542, 0.6927, 0.0997, 0.085, 0.2092, 0.8259, 0.1664, 0.4165, 0.9468, 0.4351, 0.0161, 0.6002, 0.5796, 0.1799, 0.1393, 0.96, 0.6392, 0.4172, 0.4029, 0.1881, 0.1666, 0.6873, 0.1997, 0.8839, 0.5902, 0.8983, 0.7017, 0.5859, 0.9128, 0.5038, 0.5169, 0.2607, 0.9464]]], 1, Con65820), 
LMin63907 = minimum_layer([Fla63323,Con65820], Min63907), 
LAdd72038 = add_layer([[[[[[0.8758], [0.4464]]], [[[0.0342], [0.7147]]]]], [[[[[0.9413], [0.9359]]], [[[0.0048], [0.6381]]]]]], Add72038), 
LGlo51111 = global_max_pool2D_layer([[[[1.9903, 1.0615]], [[1.3256, 1.7884]]]], Glo51111), 
LRes68415 = reshape_layer(Glo51111, [2, 1], Res68415), 
LRes26722 = reshape_layer(Res68415, [2, 1, 1], Res26722), 
LRes46148 = reshape_layer(Res26722, [2, 1, 1, 1], Res46148), 
LUp_98895 = up_sampling3D_layer(Res46148, 1, 1, 1, Up_98895), 
LZer2967 = zero_padding3D_layer(Up_98895, 0, 0, 0, 0, 1, 0, Zer2967), 
LAve73646 = average_layer([Add72038,Zer2967], Ave73646), 
LFla3777 = flatten_layer(Ave73646, Fla3777), 
LCon93260 = concatenate_layer([Fla3777,[[0.8116, 0.4472, 0.6267, 0.8996, 0.7237, 0.485, 0.4376, 0.5463, 0.3178, 0.7115, 0.4901, 0.7172, 0.1072, 0.6988, 0.285, 0.277, 0.2841, 0.8515, 0.0266, 0.9194, 0.7287, 0.0017, 0.9614, 0.1073, 0.6125, 0.2878, 0.4147, 0.1163, 0.1075, 0.2011, 0.2285, 0.6709, 0.5754, 0.9329, 0.7475, 0.6087, 0.8831, 0.054, 0.8509, 0.12, 0.1662, 0.1221, 0.7765, 0.369, 0.445, 0.0267, 0.6526, 0.7222, 0.9887, 0.753, 0.7142, 0.3861, 0.2177, 0.7742, 0.1561, 0.9877, 0.2334, 0.4685, 0.4576, 0.5165, 0.7793, 0.7951, 0.7935, 0.0948, 0.5431, 0.9619, 0.8465, 0.2387, 0.2376, 0.9714, 0.9273, 0.6334, 0.8191, 0.7392, 0.8191, 0.9538, 0.5399, 0.948, 0.1701, 0.9363, 0.2664, 0.9186, 0.579, 0.7271, 0.6431, 0.5606, 0.7391, 0.518, 0.2321, 0.8999, 0.1364, 0.6164]]], 1, Con93260), 
LAve20859 = average_layer([Min63907,Con93260], Ave20859), 
exec_layers([LUp_62098,LZer75767,LReL44803,LZer34116,LAdd27076,LRes81116,LRes93004,LFla63323,LGlo26062,LCon65820,LMin63907,LAdd72038,LGlo51111,LRes68415,LRes26722,LRes46148,LUp_98895,LZer2967,LAve73646,LFla3777,LCon93260,LAve20859],["Up_62098","Zer75767","ReL44803","Zer34116","Add27076","Res81116","Res93004","Fla63323","Glo26062","Con65820","Min63907","Add72038","Glo51111","Res68415","Res26722","Res46148","Up_98895","Zer2967","Ave73646","Fla3777","Con93260","Ave20859"],Ave20859,"Ave20859")

Actual (Unparsed): [[0.4542750, 0.8431500, 0.0097500, 0.7853000, 0.4058000, 0.2236000, 0.3133500, 0.4498000, 0.3618500, 0.2425000, 0.2188000, 0.2731500, 0.1589000, 0.3557500, 0.2450500, 0.3586000, 0.2674000, 0.5346000, 0.5428500, 0.5145500, 0.2755000, 0.6100500, 0.0185500, 0.8776000, 0.3643500, 0.0008500, 0.4807000, 0.0536500, 0.3062500, 0.1439000, 0.2073500, 0.0581500, 0.0537500, 0.1005500, 0.1142500, 0.3354500, 0.2877000, 0.4664500, 0.3737500, 0.3043500, 0.4761500, 0.5091500, 0.7021500, 0.1195000, 0.1435500, 0.1145500, 0.5827500, 0.6191500, 0.2225000, 0.0133500, 0.3263000, 0.3611000, 0.4943500, 0.3765000, 0.3571000, 0.1930500, 0.1088500, 0.3871000, 0.0780500, 0.4938500, 0.1167000, 0.2342500, 0.2288000, 0.3353500, 0.7360000, 0.4474000, 0.4392500, 0.1520000, 0.6845000, 0.5641500, 0.6315000, 0.5927500, 0.1188000, 0.4857000, 0.4636500, 0.3167000, 0.4095500, 0.3696000, 0.4095500, 0.4769000, 0.2699500, 0.4740000, 0.0850500, 0.4681500, 0.1332000, 0.4593000, 0.2895000, 0.5891000, 0.7707000, 0.6311500, 0.6625000, 0.7154000, 0.3679500, 0.7084000, 0.1985500, 0.7814000]]

Expected (Unparsed): [[0.454275,0.84315,0.00975,0.7853,0.4058,0.2236,0.31335,0.4498,0.36185,0.2425,0.2188,0.27315,0.1589,0.35575,0.24505,0.3586,0.26739999999999997,0.5346,0.5428499999999999,0.5145500000000001,0.2755,0.61005,0.01855,0.8775999999999999,0.36435,0.00085,0.4807,0.05365,0.30625,0.1439,0.20735,0.05815,0.05375,0.10055,0.11425,0.33545,0.2877,0.46645,0.37375,0.30435,0.47615,0.50915,0.70215,0.1195,0.14354999999999998,0.11455,0.58275,0.61915,0.2225,0.01335,0.3263,0.3611,0.49435,0.3765,0.3571,0.19305,0.10885,0.3871,0.07805,0.49385,0.1167,0.23425,0.2288,0.33535,0.736,0.4474,0.43925,0.152,0.6845,0.5641499999999999,0.6315,0.59275,0.1188,0.4857,0.46365,0.3167,0.40955,0.3696,0.40955,0.4769,0.26995,0.474,0.08505,0.46815,0.1332,0.4593,0.2895,0.5891,0.7706999999999999,0.63115,0.6625,0.7154,0.36795,0.7084,0.19855,0.7814]]

Actual:   [[0.4543, 0.8432, 0.0098, 0.7853, 0.4058, 0.2236, 0.3134, 0.4498, 0.3619, 0.2425, 0.2188, 0.2732, 0.1589, 0.3558, 0.2451, 0.3586, 0.2674, 0.5346, 0.5429, 0.5146, 0.2755, 0.6101, 0.0186, 0.8776, 0.3644, 0.0009, 0.4807, 0.0537, 0.3063, 0.1439, 0.2074, 0.0582, 0.0538, 0.1006, 0.1143, 0.3355, 0.2877, 0.4665, 0.3738, 0.3044, 0.4762, 0.5092, 0.7022, 0.1195, 0.1436, 0.1146, 0.5828, 0.6192, 0.2225, 0.0134, 0.3263, 0.3611, 0.4944, 0.3765, 0.3571, 0.1931, 0.1089, 0.3871, 0.0781, 0.4939, 0.1167, 0.2343, 0.2288, 0.3354, 0.736, 0.4474, 0.4393, 0.152, 0.6845, 0.5642, 0.6315, 0.5928, 0.1188, 0.4857, 0.4637, 0.3167, 0.4096, 0.3696, 0.4096, 0.4769, 0.27, 0.474, 0.0851, 0.4682, 0.1332, 0.4593, 0.2895, 0.5891, 0.7707, 0.6312, 0.6625, 0.7154, 0.368, 0.7084, 0.1986, 0.7814]]

Expected: [[0.4543, 0.8432, 0.0098, 0.7853, 0.4058, 0.2236, 0.3134, 0.4498, 0.3619, 0.2425, 0.2188, 0.2732, 0.1589, 0.3558, 0.2451, 0.3586, 0.2674, 0.5346, 0.5429, 0.5146, 0.2755, 0.6101, 0.0186, 0.8776, 0.3644, 0.0009, 0.4807, 0.0537, 0.3063, 0.1439, 0.2074, 0.0582, 0.0538, 0.1006, 0.1143, 0.3355, 0.2877, 0.4665, 0.3738, 0.3044, 0.4762, 0.5092, 0.7022, 0.1195, 0.1436, 0.1146, 0.5828, 0.6192, 0.2225, 0.0134, 0.3263, 0.3611, 0.4944, 0.3765, 0.3571, 0.1931, 0.1089, 0.3871, 0.0781, 0.4939, 0.1167, 0.2343, 0.2288, 0.3354, 0.736, 0.4474, 0.4393, 0.152, 0.6845, 0.5642, 0.6315, 0.5928, 0.1188, 0.4857, 0.4637, 0.3167, 0.4096, 0.3696, 0.4096, 0.4769, 0.27, 0.474, 0.0851, 0.4682, 0.1332, 0.4593, 0.2895, 0.5891, 0.7707, 0.6312, 0.6625, 0.7154, 0.368, 0.7084, 0.1986, 0.7814]]