import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot47899 = tf.keras.layers.Input(shape=([2, 2]))
in1Dot47899 = tf.keras.layers.Input(shape=([2, 2]))
in0Con18030 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in0Min77367 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in1Min77367 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))

Dot47899 = keras.layers.Dot(axes=(2, 1), name = 'Dot47899', )([in0Dot47899,in1Dot47899])
LST44791 = keras.layers.LSTM(2,recurrent_activation='sigmoid', name = 'LST44791', )(Dot47899)
Res68253 = keras.layers.Reshape((2, 1), name = 'Res68253', )(LST44791)
Res48408 = keras.layers.Reshape((2, 1, 1), name = 'Res48408', )(Res68253)
Res56299 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res56299', )(Res48408)
Cro68194 = keras.layers.Cropping3D(cropping=((0, 1), (0, 0), (0, 0)), name = 'Cro68194', )(Res56299)
Sof67520 = keras.layers.Softmax(axis=1, name = 'Sof67520', )(Cro68194)
Zer12373 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (1, 0)), name = 'Zer12373', )(Sof67520)
Con18030 = keras.layers.Concatenate(axis=4, name = 'Con18030', )([Zer12373,in0Con18030])
Min77367 = keras.layers.Minimum(name = 'Min77367', )([in0Min77367,in1Min77367])
Min76843 = keras.layers.Minimum(name = 'Min76843', )([Con18030,Min77367])
model = tf.keras.models.Model(inputs=[in0Dot47899,in1Dot47899,in0Con18030,in0Min77367,in1Min77367], outputs=Min76843)
w = model.get_layer('LST44791').get_weights() 
w[0] = np.array([[5, 5, 2, 1, 5, 9, 4, 7], [5, 2, 10, 5, 6, 10, 10, 1]])
w[1] = np.array([[7, 10, 7, 2, 9, 8, 8, 2], [4, 3, 1, 10, 5, 9, 7, 3]])
w[2] = np.array([4, 9, 3, 10, 7, 7, 8, 5])
model.get_layer('LST44791').set_weights(w) 
in0Dot47899 = tf.constant([[[0.797, 0.4149], [0.2667, 0.7232]]])
in1Dot47899 = tf.constant([[[0.939, 0.0771], [0.033, 0.8243]]])
in0Con18030 = tf.constant([[[[[0.8446], [0.9645]]], [[[0.3838], [0.5415]]]]])
in0Min77367 = tf.constant([[[[[0.2459, 0.1461], [0.4597, 0.5911]]], [[[0.6902, 0.3371], [0.5697, 0.3613]]]]])
in1Min77367 = tf.constant([[[[[0.8745, 0.2448], [0.4926, 0.2593]]], [[[0.4671, 0.3053], [0.9403, 0.3072]]]]])
print (np.array2string(model.predict([in0Dot47899,in1Dot47899,in0Con18030,in0Min77367,in1Min77367],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min76843.png')

LDot47899 = dot_layer([[[0.797, 0.4149], [0.2667, 0.7232]]], [[[0.939, 0.0771], [0.033, 0.8243]]], 2, 1, Dot47899), 
LLST44791 = lstm_layer(Dot47899,[[5, 5, 2, 1, 5, 9, 4, 7], [5, 2, 10, 5, 6, 10, 10, 1]],[[7, 10, 7, 2, 9, 8, 8, 2], [4, 3, 1, 10, 5, 9, 7, 3]],[4, 9, 3, 10, 7, 7, 8, 5], LST44791), 
LRes68253 = reshape_layer(LST44791, [2, 1], Res68253), 
LRes48408 = reshape_layer(Res68253, [2, 1, 1], Res48408), 
LRes56299 = reshape_layer(Res48408, [2, 1, 1, 1], Res56299), 
LCro68194 = cropping3D_layer(Res56299, 0, 1, 0, 0, 0, 0, Cro68194), 
LSof67520 = softmax_layer(Cro68194, 1, Sof67520), 
LZer12373 = zero_padding3D_layer(Sof67520, 1, 0, 0, 0, 1, 0, Zer12373), 
LCon18030 = concatenate_layer([Zer12373,[[[[[0.8446], [0.9645]]], [[[0.3838], [0.5415]]]]]], 4, Con18030), 
LMin77367 = minimum_layer([[[[[[0.2459, 0.1461], [0.4597, 0.5911]]], [[[0.6902, 0.3371], [0.5697, 0.3613]]]]], [[[[[0.8745, 0.2448], [0.4926, 0.2593]]], [[[0.4671, 0.3053], [0.9403, 0.3072]]]]]], Min77367), 
LMin76843 = minimum_layer([Con18030,Min77367], Min76843), 
exec_layers([LDot47899,LLST44791,LRes68253,LRes48408,LRes56299,LCro68194,LSof67520,LZer12373,LCon18030,LMin77367,LMin76843],["Dot47899","LST44791","Res68253","Res48408","Res56299","Cro68194","Sof67520","Zer12373","Con18030","Min77367","Min76843"],Min76843,"Min76843")

Actual (Unparsed): [[[[[0.0000000, 0.1461000], [0.0000000, 0.2593000]]], [[[0.0000000, 0.3053000], [0.5697000, 0.3072000]]]]]

Expected (Unparsed): [[[[[0,0.1461],[0,0.2593]]],[[[0,0.3053],[0.5697,0.3072]]]]]

Actual:   [[[[[0, 0.1461], [0, 0.2593]]], [[[0, 0.3053], [0.5697, 0.3072]]]]]

Expected: [[[[[0, 0.1461], [0, 0.2593]]], [[[0, 0.3053], [0.5697, 0.3072]]]]]