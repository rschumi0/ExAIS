import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Thr54824 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con45235 = tf.keras.layers.Input(shape=([46]))
in0Fla39291 = tf.keras.layers.Input(shape=([4, 3, 4]))
in0Lea96640 = tf.keras.layers.Input(shape=([2, 2, 1]))

Thr54824 = keras.layers.ThresholdedReLU(theta=6.743567412696568, name = 'Thr54824', input_shape=(1, 1, 2))(in0Thr54824)
Res74356 = keras.layers.Reshape((1, 2), name = 'Res74356', )(Thr54824)
Fla46608 = keras.layers.Flatten(name = 'Fla46608', )(Res74356)
Con45235 = keras.layers.Concatenate(axis=1, name = 'Con45235', )([Fla46608,in0Con45235])
Fla39291 = keras.layers.Flatten(name = 'Fla39291', )(in0Fla39291)
Mul22283 = keras.layers.Multiply(name = 'Mul22283', )([Con45235,Fla39291])
Res85068 = keras.layers.Reshape((48, 1), name = 'Res85068', )(Mul22283)
Sep43585 = keras.layers.SeparableConv1D(3, (44),strides=(5), padding='same', name = 'Sep43585', )(Res85068)
Res95298 = keras.layers.Reshape((10, 3, 1), name = 'Res95298', )(Sep43585)
Lea96640 = keras.layers.LeakyReLU(alpha=4.859122785712034, name = 'Lea96640', input_shape=(2, 2, 1))(in0Lea96640)
Zer66571 = keras.layers.ZeroPadding2D(padding=((8, 0), (1, 0)), name = 'Zer66571', )(Lea96640)
Add43947 = keras.layers.Add(name = 'Add43947', )([Res95298,Zer66571])
model = tf.keras.models.Model(inputs=[in0Thr54824,in0Con45235,in0Fla39291,in0Lea96640], outputs=Add43947)
w = model.get_layer('Sep43585').get_weights() 
w[0] = np.array([[[0.7487]], [[0.3063]], [[0.8559]], [[0.7642]], [[0.9269]], [[0.9983]], [[0.85]], [[0.2039]], [[0.4069]], [[0.9388]], [[0.9612]], [[0.9446]], [[0.8967]], [[0.8864]], [[0.6668]], [[0.9494]], [[0.002]], [[0.8481]], [[0.9223]], [[0.665]], [[0.5969]], [[0.5182]], [[0.4138]], [[0.2217]], [[0.5423]], [[0.3686]], [[0.6948]], [[0.0256]], [[0.1747]], [[0.0238]], [[0.8322]], [[0.5911]], [[0.4583]], [[0.3719]], [[0.9166]], [[0.1781]], [[0.9445]], [[0.7174]], [[0.8144]], [[0.039]], [[0.7139]], [[0.1654]], [[0.8329]], [[0.855]]])
w[1] = np.array([[[0.7258, 0.4438, 0.6661]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep43585').set_weights(w) 
in0Thr54824 = tf.constant([[[[0.5183, 0.4517]]]])
in0Con45235 = tf.constant([[0.3273, 0.7458, 0.3095, 0.0697, 0.3747, 0.59, 0.1345, 0.6517, 0.8799, 0.4301, 0.1831, 0.457, 0.9267, 0.7052, 0.1476, 0.0683, 0.196, 0.3755, 0.2852, 0.0031, 0.4109, 0.9344, 0.2994, 0.7317, 0.7581, 0.2162, 0.917, 0.8131, 0.0226, 0.0702, 0.9502, 0.0591, 0.5038, 0.4372, 0.0447, 0.3024, 0.5231, 0.4863, 0.6313, 0.1739, 0.4758, 0.2506, 0.823, 0.2716, 0.933, 0.6304]])
in0Fla39291 = tf.constant([[[[1.4652, 1.4629, 1.2714, 1.3675], [1.8372, 1.466, 1.551, 1.0862], [1.5212, 1.241, 1.7719, 1.5465]], [[1.1932, 1.2606, 1.8991, 1.8732], [1.9941, 1.0334, 1.9455, 1.6578], [1.605, 1.3425, 1.9382, 1.0197]], [[1.1703, 1.5775, 1.0016, 1.6398], [1.9229, 1.187, 1.281, 1.3518], [1.3923, 1.7504, 1.6618, 1.681]], [[1.7642, 1.5481, 1.6256, 1.9271], [1.2969, 1.7968, 1.1304, 1.0011], [1.6999, 1.9055, 1.1016, 1.2482]]]])
in0Lea96640 = tf.constant([[[[0.0326], [0.211]], [[0.976], [0.9155]]]])
print (np.array2string(model.predict([in0Thr54824,in0Con45235,in0Fla39291,in0Lea96640],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add43947.png')

LThr54824 = thresholded_relu_layer([[[[0.5183, 0.4517]]]], 6.743567412696568, Thr54824), 
LRes74356 = reshape_layer(Thr54824, [1, 2], Res74356), 
LFla46608 = flatten_layer(Res74356, Fla46608), 
LCon45235 = concatenate_layer([Fla46608,[[0.3273, 0.7458, 0.3095, 0.0697, 0.3747, 0.59, 0.1345, 0.6517, 0.8799, 0.4301, 0.1831, 0.457, 0.9267, 0.7052, 0.1476, 0.0683, 0.196, 0.3755, 0.2852, 0.0031, 0.4109, 0.9344, 0.2994, 0.7317, 0.7581, 0.2162, 0.917, 0.8131, 0.0226, 0.0702, 0.9502, 0.0591, 0.5038, 0.4372, 0.0447, 0.3024, 0.5231, 0.4863, 0.6313, 0.1739, 0.4758, 0.2506, 0.823, 0.2716, 0.933, 0.6304]]], 1, Con45235), 
LFla39291 = flatten_layer([[[[1.4652, 1.4629, 1.2714, 1.3675], [1.8372, 1.466, 1.551, 1.0862], [1.5212, 1.241, 1.7719, 1.5465]], [[1.1932, 1.2606, 1.8991, 1.8732], [1.9941, 1.0334, 1.9455, 1.6578], [1.605, 1.3425, 1.9382, 1.0197]], [[1.1703, 1.5775, 1.0016, 1.6398], [1.9229, 1.187, 1.281, 1.3518], [1.3923, 1.7504, 1.6618, 1.681]], [[1.7642, 1.5481, 1.6256, 1.9271], [1.2969, 1.7968, 1.1304, 1.0011], [1.6999, 1.9055, 1.1016, 1.2482]]]], Fla39291), 
LMul22283 = multiply_layer([Con45235,Fla39291], Mul22283), 
LRes85068 = reshape_layer(Mul22283, [48, 1], Res85068), 
LSep43585 = separable_conv1D_layer(Res85068, 44,[[[[0.7487]], [[0.3063]], [[0.8559]], [[0.7642]], [[0.9269]], [[0.9983]], [[0.85]], [[0.2039]], [[0.4069]], [[0.9388]], [[0.9612]], [[0.9446]], [[0.8967]], [[0.8864]], [[0.6668]], [[0.9494]], [[0.002]], [[0.8481]], [[0.9223]], [[0.665]], [[0.5969]], [[0.5182]], [[0.4138]], [[0.2217]], [[0.5423]], [[0.3686]], [[0.6948]], [[0.0256]], [[0.1747]], [[0.0238]], [[0.8322]], [[0.5911]], [[0.4583]], [[0.3719]], [[0.9166]], [[0.1781]], [[0.9445]], [[0.7174]], [[0.8144]], [[0.039]], [[0.7139]], [[0.1654]], [[0.8329]], [[0.855]]],[[[0.7258, 0.4438, 0.6661]]]],[0, 0, 0], 5, true, Sep43585), 
LRes95298 = reshape_layer(Sep43585, [10, 3, 1], Res95298), 
LLea96640 = leaky_relu_layer([[[[0.0326], [0.211]], [[0.976], [0.9155]]]], 4.859122785712034, Lea96640), 
LZer66571 = zero_padding2D_layer(Lea96640, 8, 0, 1, 0, Zer66571), 
LAdd43947 = add_layer([Res95298,Zer66571], Add43947), 
exec_layers([LThr54824,LRes74356,LFla46608,LCon45235,LFla39291,LMul22283,LRes85068,LSep43585,LRes95298,LLea96640,LZer66571,LAdd43947],["Thr54824","Res74356","Fla46608","Con45235","Fla39291","Mul22283","Res85068","Sep43585","Res95298","Lea96640","Zer66571","Add43947"],Add43947,"Add43947")

Actual (Unparsed): [[[[5.4738586], [3.3470632], [5.0236115]], [[7.3922096], [4.5200642], [6.7841703]], [[8.3818054], [5.1251657], [7.6923678]], [[10.1840820], [6.2271915], [9.3463999]], [[11.3802576], [6.9586089], [10.4441851]], [[12.3156585], [7.5305721], [11.3026456]], [[12.7521614], [7.7974776], [11.7032443]], [[9.3476877], [5.7157672], [8.5788024]], [[9.1746596], [5.6425669], [8.6310066]], [[7.9779712], [5.8542359], [8.2372506]]]]

Expected (Unparsed): [[[[5.473858571750484],[3.3470631498248347],[5.0236114558321825]],[[7.392209577584081],[4.520064219525787],[6.784170294335569]],[[8.381805388537714],[5.125165653669106],[7.692367827645318]],[[10.184081961551849],[6.22719147773038],[9.346399827210922]],[[11.380257538752712],[6.958608839485334],[10.444185101354623]],[[12.315658484779219],[7.5305721073918646],[11.302645517651463]],[[12.752161304789977],[7.797477524201975],[11.703244206559118]],[[9.347687685977027],[5.715767146647292],[8.578802380310412]],[[9.174659547846497],[5.642566805365494],[8.631006509810623]],[[7.977971178296806],[5.8542358899533244],[8.237250622573026]]]]

Actual:   [[[[5.4739], [3.3471], [5.0237]], [[7.3923], [4.5201], [6.7842]], [[8.3819], [5.1252], [7.6924]], [[10.1841], [6.2272], [9.3464]], [[11.3803], [6.9587], [10.4442]], [[12.3157], [7.5306], [11.3027]], [[12.7522], [7.7975], [11.7033]], [[9.3477], [5.7158], [8.5789]], [[9.1747], [5.6426], [8.6311]], [[7.978], [5.8543], [8.2373]]]]

Expected: [[[[5.4739], [3.3471], [5.0237]], [[7.3923], [4.5201], [6.7842]], [[8.3819], [5.1252], [7.6924]], [[10.1841], [6.2272], [9.3464]], [[11.3803], [6.9587], [10.4442]], [[12.3157], [7.5306], [11.3027]], [[12.7522], [7.7975], [11.7033]], [[9.3477], [5.7158], [8.5789]], [[9.1747], [5.6426], [8.6311]], [[7.978], [5.8543], [8.2373]]]]