import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add90159 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in1Add90159 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in0Con13366 = tf.keras.layers.Input(shape=([3, 2, 3]))
in0Lea52149 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))
in0Sub97322 = tf.keras.layers.Input(shape=([3, 2, 3]))
in1Sub97322 = tf.keras.layers.Input(shape=([3, 2, 3]))
in0Con37018 = tf.keras.layers.Input(shape=([3, 2, 1]))

Add90159 = keras.layers.Add(name = 'Add90159', )([in0Add90159,in1Add90159])
Res32376 = keras.layers.Reshape((1, 1, 2), name = 'Res32376', )(Add90159)
Res21047 = keras.layers.Reshape((1, 2), name = 'Res21047', )(Res32376)
Sep70396 = keras.layers.SeparableConv1D(2, (1),strides=(1), padding='same', name = 'Sep70396', )(Res21047)
Res67229 = keras.layers.Reshape((1, 2, 1), name = 'Res67229', )(Sep70396)
Dep652 = keras.layers.DepthwiseConv2D((1, 1),strides=(1, 1), padding='same', name = 'Dep652', )(Res67229)
Sof79976 = keras.layers.Softmax(axis=1, name = 'Sof79976', )(Dep652)
Zer38293 = keras.layers.ZeroPadding2D(padding=((2, 0), (0, 0)), name = 'Zer38293', )(Sof79976)
Con13366 = keras.layers.Concatenate(axis=3, name = 'Con13366', )([Zer38293,in0Con13366])
Lea52149 = keras.layers.LeakyReLU(alpha=5.268420112551675, name = 'Lea52149', input_shape=(1, 1, 2, 2))(in0Lea52149)
Res3963 = keras.layers.Reshape((1, 1, 4), name = 'Res3963', )(Lea52149)
Zer16964 = keras.layers.ZeroPadding2D(padding=((2, 0), (1, 0)), name = 'Zer16964', )(Res3963)
Sub97322 = keras.layers.Subtract(name = 'Sub97322', )([in0Sub97322,in1Sub97322])
Con37018 = keras.layers.Concatenate(axis=3, name = 'Con37018', )([Sub97322,in0Con37018])
Min12988 = keras.layers.Minimum(name = 'Min12988', )([Zer16964,Con37018])
Add8958 = keras.layers.Add(name = 'Add8958', )([Con13366,Min12988])
Sof30171 = keras.layers.Softmax(axis=1, name = 'Sof30171', )(Add8958)
model = tf.keras.models.Model(inputs=[in0Add90159,in1Add90159,in0Con13366,in0Lea52149,in0Sub97322,in1Sub97322,in0Con37018], outputs=Sof30171)
w = model.get_layer('Sep70396').get_weights() 
w[0] = np.array([[[0.5037], [0.6839]]])
w[1] = np.array([[[0.8187, 0.9482], [0.1989, 0.3108]]])
w[2] = np.array([0, 0])
model.get_layer('Sep70396').set_weights(w) 
w = model.get_layer('Dep652').get_weights() 
w[0] = np.array([[[[0.7634]]]])
w[1] = np.array([0])
model.get_layer('Dep652').set_weights(w) 
in0Add90159 = tf.constant([[[[[0.6857, 0.0353]]]]])
in1Add90159 = tf.constant([[[[[0.7827, 0.1695]]]]])
in0Con13366 = tf.constant([[[[0.6012, 0.3496, 0.9991], [0.1255, 0.6253, 0.242]], [[0.407, 0.4998, 0.3508], [0.9565, 0.4752, 0.6237]], [[0.8145, 0.345, 0.7141], [0.4456, 0.8806, 0.7674]]]])
in0Lea52149 = tf.constant([[[[[0.6178, 0.2506], [0.352, 0.2083]]]]])
in0Sub97322 = tf.constant([[[[0.4176, 0.9495, 0.1211], [0.6898, 0.61, 0.1229]], [[0.7785, 0.2768, 0.9641], [0.6036, 0.2965, 0.5133]], [[0.8168, 0.738, 0.6656], [0.9455, 0.7924, 0.2473]]]])
in1Sub97322 = tf.constant([[[[0.4587, 0.2784, 0.8911], [0.4883, 0.5047, 0.0716]], [[0.2862, 0.4826, 0.956], [0.8997, 0.0719, 0.0182]], [[0.0781, 0.6085, 0.6311], [0.8509, 0.1589, 0.284]]]])
in0Con37018 = tf.constant([[[[0.5741], [0.3542]], [[0.3312], [0.2946]], [[0.5137], [0.2047]]]])
print (np.array2string(model.predict([in0Add90159,in1Add90159,in0Con13366,in0Lea52149,in0Sub97322,in1Sub97322,in0Con37018],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sof30171.png')

LAdd90159 = add_layer([[[[[[0.6857, 0.0353]]]]], [[[[[0.7827, 0.1695]]]]]], Add90159), 
LRes32376 = reshape_layer(Add90159, [1, 1, 2], Res32376), 
LRes21047 = reshape_layer(Res32376, [1, 2], Res21047), 
LSep70396 = separable_conv1D_layer(Res21047, 1,[[[[0.5037], [0.6839]]],[[[0.8187, 0.9482], [0.1989, 0.3108]]]],[0, 0], 1, true, Sep70396), 
LRes67229 = reshape_layer(Sep70396, [1, 2, 1], Res67229), 
LDep652 = depthwise_conv2D_layer(Res67229, 1, 1,[[[[0.7634]]]],[0], 1, 1, true, Dep652), 
LSof79976 = softmax_layer(Dep652, 1, Sof79976), 
LZer38293 = zero_padding2D_layer(Sof79976, 2, 0, 0, 0, Zer38293), 
LCon13366 = concatenate_layer([Zer38293,[[[[0.6012, 0.3496, 0.9991], [0.1255, 0.6253, 0.242]], [[0.407, 0.4998, 0.3508], [0.9565, 0.4752, 0.6237]], [[0.8145, 0.345, 0.7141], [0.4456, 0.8806, 0.7674]]]]], 3, Con13366), 
LLea52149 = leaky_relu_layer([[[[[0.6178, 0.2506], [0.352, 0.2083]]]]], 5.268420112551675, Lea52149), 
LRes3963 = reshape_layer(Lea52149, [1, 1, 4], Res3963), 
LZer16964 = zero_padding2D_layer(Res3963, 2, 0, 1, 0, Zer16964), 
LSub97322 = subtract_layer([[[[0.4176, 0.9495, 0.1211], [0.6898, 0.61, 0.1229]], [[0.7785, 0.2768, 0.9641], [0.6036, 0.2965, 0.5133]], [[0.8168, 0.738, 0.6656], [0.9455, 0.7924, 0.2473]]]], [[[[0.4587, 0.2784, 0.8911], [0.4883, 0.5047, 0.0716]], [[0.2862, 0.4826, 0.956], [0.8997, 0.0719, 0.0182]], [[0.0781, 0.6085, 0.6311], [0.8509, 0.1589, 0.284]]]], Sub97322), 
LCon37018 = concatenate_layer([Sub97322,[[[[0.5741], [0.3542]], [[0.3312], [0.2946]], [[0.5137], [0.2047]]]]], 3, Con37018), 
LMin12988 = minimum_layer([Zer16964,Con37018], Min12988), 
LAdd8958 = add_layer([Con13366,Min12988], Add8958), 
LSof30171 = softmax_layer(Add8958, 1, Sof30171), 
exec_layers([LAdd90159,LRes32376,LRes21047,LSep70396,LRes67229,LDep652,LSof79976,LZer38293,LCon13366,LLea52149,LRes3963,LZer16964,LSub97322,LCon37018,LMin12988,LAdd8958,LSof30171],["Add90159","Res32376","Res21047","Sep70396","Res67229","Dep652","Sof79976","Zer38293","Con13366","Lea52149","Res3963","Zer16964","Sub97322","Con37018","Min12988","Add8958","Sof30171"],Sof30171,"Sof30171")

Actual (Unparsed): [[[[0.2051582, 0.3438700, 0.1766895, 0.4395704], [0.2113405, 0.1974287, 0.3220658, 0.2202614]], [[0.2137659, 0.2305029, 0.4434539, 0.2298663], [0.1571767, 0.4532200, 0.2771769, 0.3226328]], [[0.5810759, 0.4256271, 0.3798566, 0.3305632], [0.6314828, 0.3493512, 0.4007573, 0.4571058]]]]

Expected (Unparsed): [[[[0.20515820404100382,0.34386997137598513,0.17668948231141907,0.43957043593612066],[0.21134051949333776,0.19742874809232785,0.3220658225615096,0.22026137161918063]],[[0.2137658823694921,0.2305029350430243,0.4434539018787523,0.2298663304625316],[0.15717670297419117,0.45322004137390304,0.27717690333632433,0.32263281921869097]],[[0.5810759135895042,0.42562709358099055,0.37985661580982866,0.3305632336013477],[0.6314827775324711,0.34935121053376905,0.400757274102166,0.45710580916212845]]]]

Actual:   [[[[0.2052, 0.3439, 0.1767, 0.4396], [0.2114, 0.1975, 0.3221, 0.2203]], [[0.2138, 0.2306, 0.4435, 0.2299], [0.1572, 0.4533, 0.2772, 0.3227]], [[0.5811, 0.4257, 0.3799, 0.3306], [0.6315, 0.3494, 0.4008, 0.4572]]]]

Expected: [[[[0.2052, 0.3439, 0.1767, 0.4396], [0.2114, 0.1975, 0.3221, 0.2203]], [[0.2138, 0.2306, 0.4435, 0.2299], [0.1572, 0.4533, 0.2772, 0.3227]], [[0.5811, 0.4257, 0.3799, 0.3306], [0.6315, 0.3494, 0.4008, 0.4572]]]]