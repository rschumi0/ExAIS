import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sep71115 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Mas70942 = tf.keras.layers.Input(shape=([3, 2]))
in0Per37871 = tf.keras.layers.Input(shape=([1, 1]))
in0Con70795 = tf.keras.layers.Input(shape=([3, 1]))
in0Sub20376 = tf.keras.layers.Input(shape=([3, 3]))
in1Sub20376 = tf.keras.layers.Input(shape=([3, 3]))

Sep71115 = keras.layers.SeparableConv2D(2, (2, 1),strides=(2, 2), padding='valid', name = 'Sep71115', )(in0Sep71115)
Ave66090 = keras.layers.AveragePooling2D(pool_size=(1, 1), strides=(1, 1), padding='same', name = 'Ave66090', )(Sep71115)
Res3805 = keras.layers.Reshape((1, 1, 2, 1), name = 'Res3805', )(Ave66090)
Up_64280 = keras.layers.UpSampling3D(size=(2, 1, 2), name = 'Up_64280', )(Res3805)
Zer18254 = keras.layers.ZeroPadding3D(padding=((4, 0), (2, 0), (3, 0)), name = 'Zer18254', )(Up_64280)
Mas70942 = keras.layers.Masking(mask_value=2, name = 'Mas70942', )(in0Mas70942)
Per37871 = keras.layers.Permute((2,1), name = 'Per37871',)(in0Per37871)
Zer5656 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer5656', )(Per37871)
Con70795 = keras.layers.Concatenate(axis=2, name = 'Con70795', )([Zer5656,in0Con70795])
Max58091 = keras.layers.Maximum(name = 'Max58091', )([Mas70942,Con70795])
Res2292 = keras.layers.Reshape((3, 2, 1), name = 'Res2292', )(Max58091)
Res67210 = keras.layers.Reshape((3, 2, 1, 1), name = 'Res67210', )(Res2292)
Zer17047 = keras.layers.ZeroPadding3D(padding=((3, 0), (1, 0), (0, 0)), name = 'Zer17047', )(Res67210)
Sub20376 = keras.layers.Subtract(name = 'Sub20376', )([in0Sub20376,in1Sub20376])
Res91711 = keras.layers.Reshape((3, 3, 1), name = 'Res91711', )(Sub20376)
Res26296 = keras.layers.Reshape((3, 3, 1, 1), name = 'Res26296', )(Res91711)
Up_46620 = keras.layers.UpSampling3D(size=(2, 1, 1), name = 'Up_46620', )(Res26296)
Sub53958 = keras.layers.Subtract(name = 'Sub53958', )([Zer17047,Up_46620])
Zer27979 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (6, 0)), name = 'Zer27979', )(Sub53958)
Ave52921 = keras.layers.Average(name = 'Ave52921', )([Zer18254,Zer27979])
model = tf.keras.models.Model(inputs=[in0Sep71115,in0Mas70942,in0Per37871,in0Con70795,in0Sub20376,in1Sub20376], outputs=Ave52921)
w = model.get_layer('Sep71115').get_weights() 
w[0] = np.array([[[[0.9271], [0.0501]]], [[[0.4934], [0.0619]]]])
w[1] = np.array([[[[0.5926, 0.1465], [0.3852, 0.5517]]]])
w[2] = np.array([0, 0])
model.get_layer('Sep71115').set_weights(w) 
in0Sep71115 = tf.constant([[[[0.8374, 0.3843]], [[0.7215, 0.9018]]]])
in0Mas70942 = tf.constant([[[1.2029, 1.7335], [1.7602, 1.6197], [1.5904, 1.247]]])
in0Per37871 = tf.constant([[[1.1587]]])
in0Con70795 = tf.constant([[[0.1833], [0.0459], [0.4352]]])
in0Sub20376 = tf.constant([[[0.6176, 0.3963, 0.6954], [0.3554, 0.7484, 0.6571], [0.1427, 0.9498, 0.5581]]])
in1Sub20376 = tf.constant([[[0.2425, 0.9569, 0.0534], [0.2927, 0.02, 0.1779], [0.8921, 0.2314, 0.6589]]])
print (np.array2string(model.predict([in0Sep71115,in0Mas70942,in0Per37871,in0Con70795,in0Sub20376,in1Sub20376],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave52921.png')

LSep71115 = separable_conv2D_layer([[[[0.8374, 0.3843]], [[0.7215, 0.9018]]]], 2, 1,[[[[[0.9271], [0.0501]]], [[[0.4934], [0.0619]]]],[[[[0.5926, 0.1465], [0.3852, 0.5517]]]]],[0, 0], 2, 2, false, Sep71115), 
LAve66090 = average_pooling2D_layer(Sep71115, 1, 1, 1, 1, true, Ave66090), 
LRes3805 = reshape_layer(Ave66090, [1, 1, 2, 1], Res3805), 
LUp_64280 = up_sampling3D_layer(Res3805, 2, 1, 2, Up_64280), 
LZer18254 = zero_padding3D_layer(Up_64280, 4, 0, 2, 0, 3, 0, Zer18254), 
LMas70942 = masking_layer([[[1.2029, 1.7335], [1.7602, 1.6197], [1.5904, 1.247]]], 2, Mas70942), 
LPer37871 = permute_layer([[[1.1587]]], 2,1, Per37871), 
LZer5656 = zero_padding1D_layer(Per37871, 2, 0, Zer5656), 
LCon70795 = concatenate_layer([Zer5656,[[[0.1833], [0.0459], [0.4352]]]], 2, Con70795), 
LMax58091 = maximum_layer([Mas70942,Con70795], Max58091), 
LRes2292 = reshape_layer(Max58091, [3, 2, 1], Res2292), 
LRes67210 = reshape_layer(Res2292, [3, 2, 1, 1], Res67210), 
LZer17047 = zero_padding3D_layer(Res67210, 3, 0, 1, 0, 0, 0, Zer17047), 
LSub20376 = subtract_layer([[[0.6176, 0.3963, 0.6954], [0.3554, 0.7484, 0.6571], [0.1427, 0.9498, 0.5581]]], [[[0.2425, 0.9569, 0.0534], [0.2927, 0.02, 0.1779], [0.8921, 0.2314, 0.6589]]], Sub20376), 
LRes91711 = reshape_layer(Sub20376, [3, 3, 1], Res91711), 
LRes26296 = reshape_layer(Res91711, [3, 3, 1, 1], Res26296), 
LUp_46620 = up_sampling3D_layer(Res26296, 2, 1, 1, Up_46620), 
LSub53958 = subtract_layer(Zer17047,Up_46620, Sub53958), 
LZer27979 = zero_padding3D_layer(Sub53958, 0, 0, 0, 0, 6, 0, Zer27979), 
LAve52921 = average_layer([Zer18254,Zer27979], Ave52921), 
exec_layers([LSep71115,LAve66090,LRes3805,LUp_64280,LZer18254,LMas70942,LPer37871,LZer5656,LCon70795,LMax58091,LRes2292,LRes67210,LZer17047,LSub20376,LRes91711,LRes26296,LUp_46620,LSub53958,LZer27979,LAve52921],["Sep71115","Ave66090","Res3805","Up_64280","Zer18254","Mas70942","Per37871","Zer5656","Con70795","Max58091","Res2292","Res67210","Zer17047","Sub20376","Res91711","Res26296","Up_46620","Sub53958","Zer27979","Ave52921"],Ave52921,"Ave52921")

Actual (Unparsed): [[[[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [-0.1875500]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.2803000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [-0.3210000]]], [[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [-0.1875500]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.2803000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [-0.3210000]]], [[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [-0.0313500]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [-0.3642000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [-0.2396000]]], [[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [-0.0313500]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.2372500]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.6271500]]], [[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.3747000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.5209000]], [[0.0000000], [0.0000000], [0.0000000], [0.3499722], [0.3499722], [0.1036534], [0.9639034]]], [[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.3747000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.4360000]], [[0.0000000], [0.0000000], [0.0000000], [0.3499722], [0.3499722], [0.1036534], [0.7775534]]]]]

Expected (Unparsed): [[[[[0],[0],[0],[0],[0],[0],[-0.18755000000000002]],[[0],[0],[0],[0],[0],[0],[0.2803]],[[0],[0],[0],[0],[0],[0],[-0.321]]],[[[0],[0],[0],[0],[0],[0],[-0.18755000000000002]],[[0],[0],[0],[0],[0],[0],[0.2803]],[[0],[0],[0],[0],[0],[0],[-0.321]]],[[[0],[0],[0],[0],[0],[0],[-0.03134999999999999]],[[0],[0],[0],[0],[0],[0],[-0.36419999999999997]],[[0],[0],[0],[0],[0],[0],[-0.2396]]],[[[0],[0],[0],[0],[0],[0],[-0.03134999999999999]],[[0],[0],[0],[0],[0],[0],[0.23725000000000007]],[[0],[0],[0],[0],[0],[0],[0.62715]]],[[[0],[0],[0],[0],[0],[0],[0.37470000000000003]],[[0],[0],[0],[0],[0],[0],[0.5209]],[[0],[0],[0],[0.34997224404199995],[0.34997224404199995],[0.1036534225025],[0.9639034225024999]]],[[[0],[0],[0],[0],[0],[0],[0.37470000000000003]],[[0],[0],[0],[0],[0],[0],[0.43600000000000005]],[[0],[0],[0],[0.34997224404199995],[0.34997224404199995],[0.1036534225025],[0.7775534225025]]]]]

Actual:   [[[[[0], [0], [0], [0], [0], [0], [-0.1875]], [[0], [0], [0], [0], [0], [0], [0.2803]], [[0], [0], [0], [0], [0], [0], [-0.321]]], [[[0], [0], [0], [0], [0], [0], [-0.1875]], [[0], [0], [0], [0], [0], [0], [0.2803]], [[0], [0], [0], [0], [0], [0], [-0.321]]], [[[0], [0], [0], [0], [0], [0], [-0.0313]], [[0], [0], [0], [0], [0], [0], [-0.3642]], [[0], [0], [0], [0], [0], [0], [-0.2396]]], [[[0], [0], [0], [0], [0], [0], [-0.0313]], [[0], [0], [0], [0], [0], [0], [0.2373]], [[0], [0], [0], [0], [0], [0], [0.6272]]], [[[0], [0], [0], [0], [0], [0], [0.3747]], [[0], [0], [0], [0], [0], [0], [0.5209]], [[0], [0], [0], [0.35], [0.35], [0.1037], [0.964]]], [[[0], [0], [0], [0], [0], [0], [0.3747]], [[0], [0], [0], [0], [0], [0], [0.436]], [[0], [0], [0], [0.35], [0.35], [0.1037], [0.7776]]]]]

Expected: [[[[[0], [0], [0], [0], [0], [0], [-0.1875]], [[0], [0], [0], [0], [0], [0], [0.2803]], [[0], [0], [0], [0], [0], [0], [-0.321]]], [[[0], [0], [0], [0], [0], [0], [-0.1875]], [[0], [0], [0], [0], [0], [0], [0.2803]], [[0], [0], [0], [0], [0], [0], [-0.321]]], [[[0], [0], [0], [0], [0], [0], [-0.0313]], [[0], [0], [0], [0], [0], [0], [-0.3641]], [[0], [0], [0], [0], [0], [0], [-0.2396]]], [[[0], [0], [0], [0], [0], [0], [-0.0313]], [[0], [0], [0], [0], [0], [0], [0.2373]], [[0], [0], [0], [0], [0], [0], [0.6272]]], [[[0], [0], [0], [0], [0], [0], [0.3748]], [[0], [0], [0], [0], [0], [0], [0.5209]], [[0], [0], [0], [0.35], [0.35], [0.1037], [0.964]]], [[[0], [0], [0], [0], [0], [0], [0.3748]], [[0], [0], [0], [0], [0], [0], [0.4361]], [[0], [0], [0], [0.35], [0.35], [0.1037], [0.7776]]]]]