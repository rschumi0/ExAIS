import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min600 = tf.keras.layers.Input(shape=([1, 2, 2]))
in1Min600 = tf.keras.layers.Input(shape=([1, 2, 2]))

Min600 = keras.layers.Minimum(name = 'Min600', )([in0Min600,in1Min600])
Res2222 = keras.layers.Reshape((1, 4), name = 'Res2222', )(Min600)
Up_13640 = keras.layers.UpSampling1D(size=(2), name = 'Up_13640', )(Res2222)
Res33966 = keras.layers.Reshape((2, 4, 1), name = 'Res33966', )(Up_13640)
Res18551 = keras.layers.Reshape((2, 4, 1, 1), name = 'Res18551', )(Res33966)
Con31924 = keras.layers.Conv3DTranspose(4, (2, 3, 1),strides=(1, 2, 1), padding='same', name = 'Con31924', )(Res18551)
model = tf.keras.models.Model(inputs=[in0Min600,in1Min600], outputs=Con31924)
w = model.get_layer('Con31924').get_weights() 
w[0] = np.array([[[[[0.0344], [0.9387], [0.9468], [0.8844]]], [[[0.6235], [0.7224], [0.9831], [0.656]]], [[[0.8273], [0.7997], [0.9255], [0.6104]]]], [[[[0.4213], [0.3864], [0.4654], [0.4158]]], [[[0.27], [0.0416], [0.4001], [0.1403]]], [[[0.1241], [0.9845], [0.4599], [0.9113]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con31924').set_weights(w) 
in0Min600 = tf.constant([[[[0.4302, 0.2113], [0.3448, 0.5384]]]])
in1Min600 = tf.constant([[[[0.1564, 0.6459], [0.3551, 0.3616]]]])
print (np.array2string(model.predict([in0Min600,in1Min600],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con31924.png')

LMin600 = minimum_layer([[[[[0.4302, 0.2113], [0.3448, 0.5384]]]], [[[[0.1564, 0.6459], [0.3551, 0.3616]]]]], Min600), 
LRes2222 = reshape_layer(Min600, [1, 4], Res2222), 
LUp_13640 = up_sampling1D_layer(Res2222, 2, Up_13640), 
LRes33966 = reshape_layer(Up_13640, [2, 4, 1], Res33966), 
LRes18551 = reshape_layer(Res33966, [2, 4, 1, 1], Res18551), 
LCon31924 = conv3D_transpose_layer(Res18551, 2, 3, 1,[[[[[0.0344], [0.9387], [0.9468], [0.8844]]], [[[0.6235], [0.7224], [0.9831], [0.656]]], [[[0.8273], [0.7997], [0.9255], [0.6104]]]], [[[[0.4213], [0.3864], [0.4654], [0.4158]]], [[[0.27], [0.0416], [0.4001], [0.1403]]], [[[0.1241], [0.9845], [0.4599], [0.9113]]]]],[0, 0, 0, 0], 1, 2, 1, true, Con31924), 
exec_layers([LMin600,LRes2222,LUp_13640,LRes33966,LRes18551,LCon31924],["Min600","Res2222","Up_13640","Res33966","Res18551","Con31924"],Con31924,"Con31924")

Actual (Unparsed): [[[[[0.0053802, 0.1468127, 0.1480795, 0.1383202]], [[0.0975154, 0.1129834, 0.1537568, 0.1025984]], [[0.1366584, 0.3234204, 0.3448070, 0.2823403]], [[0.1317456, 0.1526431, 0.2077290, 0.1386128]], [[0.1866696, 0.4926404, 0.5220148, 0.4339186]], [[0.2149828, 0.2490835, 0.3389729, 0.2261888]], [[0.2976921, 0.6151705, 0.6614753, 0.5302650]], [[0.2254576, 0.2612198, 0.3554890, 0.2372096]]], [[[0.0712715, 0.2072456, 0.2208681, 0.2033513]], [[0.1397434, 0.1194896, 0.2163325, 0.1245413]], [[0.2450884, 0.5590425, 0.5150744, 0.5127261]], [[0.1887966, 0.1614332, 0.2922702, 0.1682582]], [[0.3581562, 0.8338959, 0.7796616, 0.7698442]], [[0.3080788, 0.2634272, 0.4769274, 0.2745642]], [[0.4928238, 1.0943483, 0.9883375, 0.9948345]], [[0.3230896, 0.2762624, 0.5001651, 0.2879421]]]]]

Expected (Unparsed): [[[[[0.00538016,0.14681268,0.14807952000000002,0.13832016]],[[0.09751540000000002,0.11298336000000002,0.15375684,0.1025984]],[[0.13665844000000002,0.32342039,0.34480704,0.28234028]],[[0.13174555000000002,0.15264312,0.20772902999999998,0.1386128]],[[0.18666961,0.49264036999999994,0.52201479,0.43391864]],[[0.21498280000000003,0.24908352,0.33897288,0.2261888]],[[0.29769208,0.61517048,0.66147528,0.53026496]],[[0.2254576,0.26121984,0.35548895999999996,0.2372096]]],[[[0.07127148,0.20724564,0.22086808000000002,0.20335128000000002]],[[0.13974340000000002,0.11948960000000002,0.21633248,0.12454132000000001]],[[0.24508837,0.55904251,0.51507442,0.51272614]],[[0.18879655,0.1614332,0.29227015999999995,0.16825819]],[[0.35815618,0.8338959399999999,0.77966158,0.76984417]],[[0.30807880000000004,0.26342720000000003,0.47692735999999997,0.27456424]],[[0.49282384,1.09434832,0.98833744,0.99483448]],[[0.3230896,0.27626239999999996,0.5001651199999999,0.28794208]]]]]

Actual:   [[[[[0.0054, 0.1469, 0.1481, 0.1384]], [[0.0976, 0.113, 0.1538, 0.1026]], [[0.1367, 0.3235, 0.3449, 0.2824]], [[0.1318, 0.1527, 0.2078, 0.1387]], [[0.1867, 0.4927, 0.5221, 0.434]], [[0.215, 0.2491, 0.339, 0.2262]], [[0.2977, 0.6152, 0.6615, 0.5303]], [[0.2255, 0.2613, 0.3555, 0.2373]]], [[[0.0713, 0.2073, 0.2209, 0.2034]], [[0.1398, 0.1195, 0.2164, 0.1246]], [[0.2451, 0.5591, 0.5151, 0.5128]], [[0.1888, 0.1615, 0.2923, 0.1683]], [[0.3582, 0.8339, 0.7797, 0.7699]], [[0.3081, 0.2635, 0.477, 0.2746]], [[0.4929, 1.0944, 0.9884, 0.9949]], [[0.3231, 0.2763, 0.5002, 0.288]]]]]

Expected: [[[[[0.0054, 0.1469, 0.1481, 0.1384]], [[0.0976, 0.113, 0.1538, 0.1026]], [[0.1367, 0.3235, 0.3449, 0.2824]], [[0.1318, 0.1527, 0.2078, 0.1387]], [[0.1867, 0.4927, 0.5221, 0.434]], [[0.215, 0.2491, 0.339, 0.2262]], [[0.2977, 0.6152, 0.6615, 0.5303]], [[0.2255, 0.2613, 0.3555, 0.2373]]], [[[0.0713, 0.2073, 0.2209, 0.2034]], [[0.1398, 0.1195, 0.2164, 0.1246]], [[0.2451, 0.5591, 0.5151, 0.5128]], [[0.1888, 0.1615, 0.2923, 0.1683]], [[0.3582, 0.8339, 0.7797, 0.7699]], [[0.3081, 0.2635, 0.477, 0.2746]], [[0.4929, 1.0944, 0.9884, 0.9949]], [[0.3231, 0.2763, 0.5002, 0.288]]]]]