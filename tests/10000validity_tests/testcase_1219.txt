import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max54583 = tf.keras.layers.Input(shape=([1, 2]))
in1Max54583 = tf.keras.layers.Input(shape=([1, 2]))
in0Con92265 = tf.keras.layers.Input(shape=([2, 3, 2, 1]))
in0Glo72675 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con23384 = tf.keras.layers.Input(shape=([2, 3, 2, 1]))
in0Sub55345 = tf.keras.layers.Input(shape=([2, 3, 2, 2]))
in1Sub55345 = tf.keras.layers.Input(shape=([2, 3, 2, 2]))

Max54583 = keras.layers.Maximum(name = 'Max54583', )([in0Max54583,in1Max54583])
Thr86684 = keras.layers.ThresholdedReLU(theta=2.1138723420153958, name = 'Thr86684', )(Max54583)
Up_1776 = keras.layers.UpSampling1D(size=(2), name = 'Up_1776', )(Thr86684)
Con49294 = keras.layers.Conv1D(3, (2),strides=(2), padding='same', dilation_rate=(1), name = 'Con49294', )(Up_1776)
Res6738 = keras.layers.Reshape((1, 3, 1), name = 'Res6738', )(Con49294)
Res96388 = keras.layers.Reshape((1, 3, 1, 1), name = 'Res96388', )(Res6738)
Zer54685 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (1, 0)), name = 'Zer54685', )(Res96388)
Con92265 = keras.layers.Concatenate(axis=4, name = 'Con92265', )([Zer54685,in0Con92265])
Glo72675 = keras.layers.GlobalMaxPool2D(name = 'Glo72675', )(in0Glo72675)
Res92136 = keras.layers.Reshape((2, 1), name = 'Res92136', )(Glo72675)
Res47918 = keras.layers.Reshape((2, 1, 1), name = 'Res47918', )(Res92136)
Res41469 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res41469', )(Res47918)
Zer56078 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (1, 0)), name = 'Zer56078', )(Res41469)
Con23384 = keras.layers.Concatenate(axis=4, name = 'Con23384', )([Zer56078,in0Con23384])
Sub55345 = keras.layers.Subtract(name = 'Sub55345', )([in0Sub55345,in1Sub55345])
Mul38649 = keras.layers.Multiply(name = 'Mul38649', )([Con23384,Sub55345])
Min49033 = keras.layers.Minimum(name = 'Min49033', )([Con92265,Mul38649])
model = tf.keras.models.Model(inputs=[in0Max54583,in1Max54583,in0Con92265,in0Glo72675,in0Con23384,in0Sub55345,in1Sub55345], outputs=Min49033)
w = model.get_layer('Con49294').get_weights() 
w[0] = np.array([[[0.9095, 0.0742, 0.8898], [0.9204, 0.092, 0.0323]], [[0.3402, 0.5892, 0.8688], [0.7425, 0.0369, 0.9528]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con49294').set_weights(w) 
in0Max54583 = tf.constant([[[0.4131, 0.8848]]])
in1Max54583 = tf.constant([[[0.4601, 0.0131]]])
in0Con92265 = tf.constant([[[[[0.8269], [0.2765]], [[0.7954], [0.2416]], [[0.6955], [0.5784]]], [[[0.8698], [0.6685]], [[0.2036], [0.7972]], [[0.5951], [0.1346]]]]])
in0Glo72675 = tf.constant([[[[1.7464, 1.4722], [1.9973, 1.4484]], [[1.326, 1.0077], [1.9145, 1.6552]]]])
in0Con23384 = tf.constant([[[[[0.8655], [0.379]], [[0.2129], [0.1091]], [[0.6911], [0.0588]]], [[[0.9341], [0.3881]], [[0.6233], [0.5825]], [[0.2044], [0.349]]]]])
in0Sub55345 = tf.constant([[[[[0.8199, 0.3666], [0.5156, 0.4481]], [[0.174, 0.4706], [0.0621, 0.9491]], [[0.6813, 0.206], [0.9451, 0.4751]]], [[[0.0834, 0.2458], [0.501, 0.7733]], [[0.2422, 0.727], [0.3416, 0.9192]], [[0.3085, 0.7552], [0.5403, 0.4274]]]]])
in1Sub55345 = tf.constant([[[[[0.1236, 0.3993], [0.3982, 0.51]], [[0.7916, 0.1756], [0.7993, 0.9643]], [[0.9786, 0.0213], [0.356, 0.8683]]], [[[0.5126, 0.4073], [0.6459, 0.1222]], [[0.2872, 0.5526], [0.8437, 0.8851]], [[0.3033, 0.666], [0.966, 0.1246]]]]])
print (np.array2string(model.predict([in0Max54583,in1Max54583,in0Con92265,in0Glo72675,in0Con23384,in0Sub55345,in1Sub55345],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min49033.png')

LMax54583 = maximum_layer([[[[0.4131, 0.8848]]], [[[0.4601, 0.0131]]]], Max54583), 
LThr86684 = thresholded_relu_layer(Max54583, 2.1138723420153958, Thr86684), 
LUp_1776 = up_sampling1D_layer(Thr86684, 2, Up_1776), 
LCon49294 = conv1D_layer(Up_1776, 2,[[[0.9095, 0.0742, 0.8898], [0.9204, 0.092, 0.0323]], [[0.3402, 0.5892, 0.8688], [0.7425, 0.0369, 0.9528]]],[0, 0, 0], 2, true, 1, Con49294), 
LRes6738 = reshape_layer(Con49294, [1, 3, 1], Res6738), 
LRes96388 = reshape_layer(Res6738, [1, 3, 1, 1], Res96388), 
LZer54685 = zero_padding3D_layer(Res96388, 1, 0, 0, 0, 1, 0, Zer54685), 
LCon92265 = concatenate_layer([Zer54685,[[[[[0.8269], [0.2765]], [[0.7954], [0.2416]], [[0.6955], [0.5784]]], [[[0.8698], [0.6685]], [[0.2036], [0.7972]], [[0.5951], [0.1346]]]]]], 4, Con92265), 
LGlo72675 = global_max_pool2D_layer([[[[1.7464, 1.4722], [1.9973, 1.4484]], [[1.326, 1.0077], [1.9145, 1.6552]]]], Glo72675), 
LRes92136 = reshape_layer(Glo72675, [2, 1], Res92136), 
LRes47918 = reshape_layer(Res92136, [2, 1, 1], Res47918), 
LRes41469 = reshape_layer(Res47918, [2, 1, 1, 1], Res41469), 
LZer56078 = zero_padding3D_layer(Res41469, 0, 0, 2, 0, 1, 0, Zer56078), 
LCon23384 = concatenate_layer([Zer56078,[[[[[0.8655], [0.379]], [[0.2129], [0.1091]], [[0.6911], [0.0588]]], [[[0.9341], [0.3881]], [[0.6233], [0.5825]], [[0.2044], [0.349]]]]]], 4, Con23384), 
LSub55345 = subtract_layer([[[[[0.8199, 0.3666], [0.5156, 0.4481]], [[0.174, 0.4706], [0.0621, 0.9491]], [[0.6813, 0.206], [0.9451, 0.4751]]], [[[0.0834, 0.2458], [0.501, 0.7733]], [[0.2422, 0.727], [0.3416, 0.9192]], [[0.3085, 0.7552], [0.5403, 0.4274]]]]], [[[[[0.1236, 0.3993], [0.3982, 0.51]], [[0.7916, 0.1756], [0.7993, 0.9643]], [[0.9786, 0.0213], [0.356, 0.8683]]], [[[0.5126, 0.4073], [0.6459, 0.1222]], [[0.2872, 0.5526], [0.8437, 0.8851]], [[0.3033, 0.666], [0.966, 0.1246]]]]], Sub55345), 
LMul38649 = multiply_layer([Con23384,Sub55345], Mul38649), 
LMin49033 = minimum_layer([Con92265,Mul38649], Min49033), 
exec_layers([LMax54583,LThr86684,LUp_1776,LCon49294,LRes6738,LRes96388,LZer54685,LCon92265,LGlo72675,LRes92136,LRes47918,LRes41469,LZer56078,LCon23384,LSub55345,LMul38649,LMin49033],["Max54583","Thr86684","Up_1776","Con49294","Res6738","Res96388","Zer54685","Con92265","Glo72675","Res92136","Res47918","Res41469","Zer56078","Con23384","Sub55345","Mul38649","Min49033"],Min49033,"Min49033")

Actual (Unparsed): [[[[[0.0000000, -0.0283019], [0.0000000, -0.0234601]], [[-0.0000000, 0.0628055], [-0.0000000, -0.0016583]], [[-0.0000000, 0.1276462], [0.0000000, -0.0231202]]], [[[-0.0000000, -0.1508571], [-0.0000000, 0.2526919]], [[-0.0000000, 0.1087035], [-0.0000000, 0.0198632]], [[0.0000000, 0.0182325], [-0.7046187, 0.1056772]]]]]

Expected (Unparsed): [[[[[0,-0.028301850000000007],[0,-0.023460100000000005]],[[0,0.06280550000000001],[0,-0.0016583199999999992]],[[0,0.12764617],[0,-0.023120159999999997]]],[[[0,-0.15085715000000002],[0.0,0.25269191]],[[0,0.10870352],[0.0,0.019863250000000013]],[[0,0.01823247999999999],[-0.70461864,0.1056772]]]]]

Actual:   [[[[[0, -0.0283], [0, -0.0234]], [[-0, 0.0629], [-0, -0.0016]], [[-0, 0.1277], [0, -0.0231]]], [[[-0, -0.1508], [-0, 0.2527]], [[-0, 0.1088], [-0, 0.0199]], [[0, 0.0183], [-0.7046, 0.1057]]]]]

Expected: [[[[[0, -0.0283], [0, -0.0234]], [[0, 0.0629], [0, -0.0016]], [[0, 0.1277], [0, -0.0231]]], [[[0, -0.1508], [0, 0.2527]], [[0, 0.1088], [0, 0.0199]], [[0, 0.0183], [-0.7046, 0.1057]]]]]