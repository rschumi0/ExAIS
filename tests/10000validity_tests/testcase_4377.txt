import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add52722 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Add52722 = tf.keras.layers.Input(shape=([2, 2, 2]))

Add52722 = keras.layers.Add(name = 'Add52722', )([in0Add52722,in1Add52722])
Lea52829 = keras.layers.LeakyReLU(alpha=9.321514428115794, name = 'Lea52829', )(Add52722)
Res99697 = keras.layers.Reshape((2, 2, 2, 1), name = 'Res99697', )(Lea52829)
Up_56687 = keras.layers.UpSampling3D(size=(1, 2, 2), name = 'Up_56687', )(Res99697)
model = tf.keras.models.Model(inputs=[in0Add52722,in1Add52722], outputs=Up_56687)
in0Add52722 = tf.constant([[[[0.5136, 0.5093], [0.0968, 0.1448]], [[0.8974, 0.2282], [0.3791, 0.6908]]]])
in1Add52722 = tf.constant([[[[0.11, 0.0853], [0.6505, 0.7672]], [[0.946, 0.283], [0.5611, 0.5229]]]])
print (np.array2string(model.predict([in0Add52722,in1Add52722],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Up_56687.png')

LAdd52722 = add_layer([[[[[0.5136, 0.5093], [0.0968, 0.1448]], [[0.8974, 0.2282], [0.3791, 0.6908]]]], [[[[0.11, 0.0853], [0.6505, 0.7672]], [[0.946, 0.283], [0.5611, 0.5229]]]]], Add52722), 
LLea52829 = leaky_relu_layer(Add52722, 9.321514428115794, Lea52829), 
LRes99697 = reshape_layer(Lea52829, [2, 2, 2, 1], Res99697), 
LUp_56687 = up_sampling3D_layer(Res99697, 1, 2, 2, Up_56687), 
exec_layers([LAdd52722,LLea52829,LRes99697,LUp_56687],["Add52722","Lea52829","Res99697","Up_56687"],Up_56687,"Up_56687")

Actual (Unparsed): [[[[[0.6236000], [0.6236000], [0.5946000], [0.5946000]], [[0.6236000], [0.6236000], [0.5946000], [0.5946000]], [[0.7473000], [0.7473000], [0.9120000], [0.9120000]], [[0.7473000], [0.7473000], [0.9120000], [0.9120000]]], [[[1.8434000], [1.8434000], [0.5112000], [0.5112000]], [[1.8434000], [1.8434000], [0.5112000], [0.5112000]], [[0.9402000], [0.9402000], [1.2137000], [1.2137000]], [[0.9402000], [0.9402000], [1.2137000], [1.2137000]]]]]

Expected (Unparsed): [[[[[0.6235999999999999],[0.6235999999999999],[0.5946],[0.5946]],[[0.6235999999999999],[0.6235999999999999],[0.5946],[0.5946]],[[0.7473],[0.7473],[0.912],[0.912]],[[0.7473],[0.7473],[0.912],[0.912]]],[[[1.8434],[1.8434],[0.5112],[0.5112]],[[1.8434],[1.8434],[0.5112],[0.5112]],[[0.9402],[0.9402],[1.2137],[1.2137]],[[0.9402],[0.9402],[1.2137],[1.2137]]]]]

Actual:   [[[[[0.6236], [0.6236], [0.5946], [0.5946]], [[0.6236], [0.6236], [0.5946], [0.5946]], [[0.7473], [0.7473], [0.912], [0.912]], [[0.7473], [0.7473], [0.912], [0.912]]], [[[1.8434], [1.8434], [0.5112], [0.5112]], [[1.8434], [1.8434], [0.5112], [0.5112]], [[0.9402], [0.9402], [1.2137], [1.2137]], [[0.9402], [0.9402], [1.2137], [1.2137]]]]]

Expected: [[[[[0.6236], [0.6236], [0.5946], [0.5946]], [[0.6236], [0.6236], [0.5946], [0.5946]], [[0.7473], [0.7473], [0.912], [0.912]], [[0.7473], [0.7473], [0.912], [0.912]]], [[[1.8434], [1.8434], [0.5112], [0.5112]], [[1.8434], [1.8434], [0.5112], [0.5112]], [[0.9402], [0.9402], [1.2137], [1.2137]], [[0.9402], [0.9402], [1.2137], [1.2137]]]]]