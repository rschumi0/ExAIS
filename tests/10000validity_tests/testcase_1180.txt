import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo74254 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con15506 = tf.keras.layers.Input(shape=([23]))
in0Sof74004 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con50586 = tf.keras.layers.Input(shape=([2, 3, 2, 1]))
in0Thr54890 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in0Sim88305 = tf.keras.layers.Input(shape=([2, 1]))
in0Con55739 = tf.keras.layers.Input(shape=([23]))

Glo74254 = keras.layers.GlobalMaxPool2D(name = 'Glo74254', )(in0Glo74254)
Con15506 = keras.layers.Concatenate(axis=1, name = 'Con15506', )([Glo74254,in0Con15506])
Sof74004 = keras.layers.Softmax(axis=1, name = 'Sof74004', input_shape=(1, 2, 1))(in0Sof74004)
Res42804 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res42804', )(Sof74004)
Zer81914 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (1, 0)), name = 'Zer81914', )(Res42804)
Con50586 = keras.layers.Concatenate(axis=4, name = 'Con50586', )([Zer81914,in0Con50586])
Thr54890 = keras.layers.ThresholdedReLU(theta=1.4990019003600497, name = 'Thr54890', input_shape=(2, 1, 2, 2))(in0Thr54890)
Zer93726 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (0, 0)), name = 'Zer93726', )(Thr54890)
Mul80510 = keras.layers.Multiply(name = 'Mul80510', )([Con50586,Zer93726])
Res48915 = keras.layers.Reshape((2, 3, 4), name = 'Res48915', )(Mul80510)
Res10562 = keras.layers.Reshape((2, 12), name = 'Res10562', )(Res48915)
Fla50552 = keras.layers.Flatten(name = 'Fla50552', )(Res10562)
Sim88305 = keras.layers.SimpleRNN(1,name = 'Sim88305', )(in0Sim88305)
Con55739 = keras.layers.Concatenate(axis=1, name = 'Con55739', )([Sim88305,in0Con55739])
Ave77690 = keras.layers.Average(name = 'Ave77690', )([Fla50552,Con55739])
Ave32357 = keras.layers.Average(name = 'Ave32357', )([Con15506,Ave77690])
model = tf.keras.models.Model(inputs=[in0Glo74254,in0Con15506,in0Sof74004,in0Con50586,in0Thr54890,in0Sim88305,in0Con55739], outputs=Ave32357)
w = model.get_layer('Sim88305').get_weights() 
w[0] = np.array([[3]])
w[1] = np.array([[5]])
w[2] = np.array([6])
model.get_layer('Sim88305').set_weights(w) 
in0Glo74254 = tf.constant([[[[1.0863]], [[1.7433]]]])
in0Con15506 = tf.constant([[0.1569, 0.6677, 0.5782, 0.2193, 0.8156, 0.4503, 0.3455, 0.9099, 0.2741, 0.6395, 0.8742, 0.3184, 0.5863, 0.9821, 0.3345, 0.6144, 0.8246, 0.6123, 0.8922, 0.0171, 0.2394, 0.8016, 0.4403]])
in0Sof74004 = tf.constant([[[[0.5951], [0.7255]]]])
in0Con50586 = tf.constant([[[[[0.8827], [0.2592]], [[0.3193], [0.1725]], [[0.2133], [0.7661]]], [[[0.8371], [0.1088]], [[0.1615], [0.3423]], [[0.7545], [0.4156]]]]])
in0Thr54890 = tf.constant([[[[[0.1355, 0.1509], [0.6913, 0.0479]]], [[[0.4544, 0.0133], [0.5806, 0.4377]]]]])
in0Sim88305 = tf.constant([[[2], [5]]])
in0Con55739 = tf.constant([[0.8469, 0.0027, 0.5335, 0.9387, 0.9955, 0.0822, 0.9805, 0.0045, 0.9227, 0.7074, 0.0356, 0.3909, 0.4049, 0.6749, 0.2111, 0.2866, 0.5567, 0.7199, 0.7697, 0.6565, 0.8513, 0.5231, 0.6683]])
print (np.array2string(model.predict([in0Glo74254,in0Con15506,in0Sof74004,in0Con50586,in0Thr54890,in0Sim88305,in0Con55739],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave32357.png')

LGlo74254 = global_max_pool2D_layer([[[[1.0863]], [[1.7433]]]], Glo74254), 
LCon15506 = concatenate_layer([Glo74254,[[0.1569, 0.6677, 0.5782, 0.2193, 0.8156, 0.4503, 0.3455, 0.9099, 0.2741, 0.6395, 0.8742, 0.3184, 0.5863, 0.9821, 0.3345, 0.6144, 0.8246, 0.6123, 0.8922, 0.0171, 0.2394, 0.8016, 0.4403]]], 1, Con15506), 
LSof74004 = softmax_layer([[[[0.5951], [0.7255]]]], 1, Sof74004), 
LRes42804 = reshape_layer(Sof74004, [1, 2, 1, 1], Res42804), 
LZer81914 = zero_padding3D_layer(Res42804, 1, 0, 1, 0, 1, 0, Zer81914), 
LCon50586 = concatenate_layer([Zer81914,[[[[[0.8827], [0.2592]], [[0.3193], [0.1725]], [[0.2133], [0.7661]]], [[[0.8371], [0.1088]], [[0.1615], [0.3423]], [[0.7545], [0.4156]]]]]], 4, Con50586), 
LThr54890 = thresholded_relu_layer([[[[[0.1355, 0.1509], [0.6913, 0.0479]]], [[[0.4544, 0.0133], [0.5806, 0.4377]]]]], 1.4990019003600497, Thr54890), 
LZer93726 = zero_padding3D_layer(Thr54890, 0, 0, 2, 0, 0, 0, Zer93726), 
LMul80510 = multiply_layer([Con50586,Zer93726], Mul80510), 
LRes48915 = reshape_layer(Mul80510, [2, 3, 4], Res48915), 
LRes10562 = reshape_layer(Res48915, [2, 12], Res10562), 
LFla50552 = flatten_layer(Res10562, Fla50552), 
LSim88305 = simple_rnn_layer([[[2], [5]]],[[3]],[[5]],[6], Sim88305), 
LCon55739 = concatenate_layer([Sim88305,[[0.8469, 0.0027, 0.5335, 0.9387, 0.9955, 0.0822, 0.9805, 0.0045, 0.9227, 0.7074, 0.0356, 0.3909, 0.4049, 0.6749, 0.2111, 0.2866, 0.5567, 0.7199, 0.7697, 0.6565, 0.8513, 0.5231, 0.6683]]], 1, Con55739), 
LAve77690 = average_layer([Fla50552,Con55739], Ave77690), 
LAve32357 = average_layer([Con15506,Ave77690], Ave32357), 
exec_layers([LGlo74254,LCon15506,LSof74004,LRes42804,LZer81914,LCon50586,LThr54890,LZer93726,LMul80510,LRes48915,LRes10562,LFla50552,LSim88305,LCon55739,LAve77690,LAve32357],["Glo74254","Con15506","Sof74004","Res42804","Zer81914","Con50586","Thr54890","Zer93726","Mul80510","Res48915","Res10562","Fla50552","Sim88305","Con55739","Ave77690","Ave32357"],Ave32357,"Ave32357")

Actual (Unparsed): [[1.1216500, 0.2901750, 0.3345250, 0.4224750, 0.3443250, 0.6566750, 0.2457000, 0.4178750, 0.4560750, 0.3677250, 0.4966000, 0.4460000, 0.2569250, 0.3943750, 0.6597750, 0.2200250, 0.3788500, 0.5514750, 0.4861250, 0.6385250, 0.1726750, 0.3325250, 0.5315750, 0.3872250]]

Expected (Unparsed): [[1.12165,0.290175,0.33452499999999996,0.42247500000000004,0.344325,0.656675,0.24569999999999997,0.417875,0.456075,0.36772499999999997,0.4966,0.446,0.256925,0.39437500000000003,0.659775,0.22002500000000003,0.37884999999999996,0.5514749999999999,0.486125,0.638525,0.172675,0.33252499999999996,0.531575,0.38722500000000004]]

Actual:   [[1.1217, 0.2902, 0.3346, 0.4225, 0.3444, 0.6567, 0.2457, 0.4179, 0.4561, 0.3678, 0.4966, 0.446, 0.257, 0.3944, 0.6598, 0.2201, 0.3789, 0.5515, 0.4862, 0.6386, 0.1727, 0.3326, 0.5316, 0.3873]]

Expected: [[1.1217, 0.2902, 0.3346, 0.4225, 0.3444, 0.6567, 0.2457, 0.4179, 0.4561, 0.3678, 0.4966, 0.446, 0.257, 0.3944, 0.6598, 0.2201, 0.3789, 0.5515, 0.4862, 0.6386, 0.1727, 0.3326, 0.5316, 0.3873]]