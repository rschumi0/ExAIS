import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave40162 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in1Ave40162 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in0Loc62267 = tf.keras.layers.Input(shape=([2, 1]))
in0Con27437 = tf.keras.layers.Input(shape=([3]))

Ave40162 = keras.layers.Average(name = 'Ave40162', )([in0Ave40162,in1Ave40162])
Res47157 = keras.layers.Reshape((1, 2, 2), name = 'Res47157', )(Ave40162)
Res31676 = keras.layers.Reshape((1, 4), name = 'Res31676', )(Res47157)
Fla50086 = keras.layers.Flatten(name = 'Fla50086', )(Res31676)
Loc62267 = keras.layers.LocallyConnected1D(4, (1),strides=(8), name = 'Loc62267', )(in0Loc62267)
Res83022 = keras.layers.Reshape((1, 4, 1), name = 'Res83022', )(Loc62267)
Glo39900 = keras.layers.GlobalMaxPool2D(name = 'Glo39900', )(Res83022)
Con27437 = keras.layers.Concatenate(axis=1, name = 'Con27437', )([Glo39900,in0Con27437])
Mul37589 = keras.layers.Multiply(name = 'Mul37589', )([Fla50086,Con27437])
Res29200 = keras.layers.Reshape((4, 1), name = 'Res29200', )(Mul37589)
Res50858 = keras.layers.Reshape((4, 1, 1), name = 'Res50858', )(Res29200)
Cro80457 = keras.layers.Cropping2D(cropping=((1, 0), (0, 0)), name = 'Cro80457', )(Res50858)
Ave90395 = keras.layers.AveragePooling2D(pool_size=(1, 1), strides=(1, 1), padding='same', name = 'Ave90395', )(Cro80457)
model = tf.keras.models.Model(inputs=[in0Ave40162,in1Ave40162,in0Loc62267,in0Con27437], outputs=Ave90395)
w = model.get_layer('Loc62267').get_weights() 
w[0] = np.array([[[0.5425, 0.7389, 0.4161, 0.7707]]])
w[1] = np.array([[0, 0, 0, 0]])
model.get_layer('Loc62267').set_weights(w) 
in0Ave40162 = tf.constant([[[[[0.2902], [0.7705]], [[0.3659], [0.2481]]]]])
in1Ave40162 = tf.constant([[[[[0.2302], [0.0027]], [[0.2523], [0.4034]]]]])
in0Loc62267 = tf.constant([[[0.3324], [0.3116]]])
in0Con27437 = tf.constant([[0.0818, 0.636, 0.2732]])
print (np.array2string(model.predict([in0Ave40162,in1Ave40162,in0Loc62267,in0Con27437],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave90395.png')

LAve40162 = average_layer([[[[[[0.2902], [0.7705]], [[0.3659], [0.2481]]]]], [[[[[0.2302], [0.0027]], [[0.2523], [0.4034]]]]]], Ave40162), 
LRes47157 = reshape_layer(Ave40162, [1, 2, 2], Res47157), 
LRes31676 = reshape_layer(Res47157, [1, 4], Res31676), 
LFla50086 = flatten_layer(Res31676, Fla50086), 
LLoc62267 = locally_connected1D_layer([[[0.3324], [0.3116]]], 1,[[[0.5425, 0.7389, 0.4161, 0.7707]]],[[0, 0, 0, 0]], 8, Loc62267), 
LRes83022 = reshape_layer(Loc62267, [1, 4, 1], Res83022), 
LGlo39900 = global_max_pool2D_layer(Res83022, Glo39900), 
LCon27437 = concatenate_layer([Glo39900,[[0.0818, 0.636, 0.2732]]], 1, Con27437), 
LMul37589 = multiply_layer([Fla50086,Con27437], Mul37589), 
LRes29200 = reshape_layer(Mul37589, [4, 1], Res29200), 
LRes50858 = reshape_layer(Res29200, [4, 1, 1], Res50858), 
LCro80457 = cropping2D_layer(Res50858, 1, 0, 0, 0, Cro80457), 
LAve90395 = average_pooling2D_layer(Cro80457, 1, 1, 1, 1, true, Ave90395), 
exec_layers([LAve40162,LRes47157,LRes31676,LFla50086,LLoc62267,LRes83022,LGlo39900,LCon27437,LMul37589,LRes29200,LRes50858,LCro80457,LAve90395],["Ave40162","Res47157","Res31676","Fla50086","Loc62267","Res83022","Glo39900","Con27437","Mul37589","Res29200","Res50858","Cro80457","Ave90395"],Ave90395,"Ave90395")

Actual (Unparsed): [[[[0.0316239]], [[0.1965876]], [[0.0889949]]]]

Expected (Unparsed): [[[[0.03162388]],[[0.19658760000000003]],[[0.0889949]]]]

Actual:   [[[[0.0317]], [[0.1966]], [[0.089]]]]

Expected: [[[[0.0317]], [[0.1966]], [[0.089]]]]