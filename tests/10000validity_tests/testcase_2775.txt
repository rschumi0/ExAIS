import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul58106 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Mul58106 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Glo43942 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con9133 = tf.keras.layers.Input(shape=([6]))
in0Mul6649 = tf.keras.layers.Input(shape=([2, 2]))
in1Mul6649 = tf.keras.layers.Input(shape=([2, 2]))

Mul58106 = keras.layers.Multiply(name = 'Mul58106', )([in0Mul58106,in1Mul58106])
Res65152 = keras.layers.Reshape((2, 4), name = 'Res65152', )(Mul58106)
Fla7969 = keras.layers.Flatten(name = 'Fla7969', )(Res65152)
Glo43942 = keras.layers.GlobalAveragePooling2D(name = 'Glo43942', )(in0Glo43942)
Con9133 = keras.layers.Concatenate(axis=1, name = 'Con9133', )([Glo43942,in0Con9133])
Mul76221 = keras.layers.Multiply(name = 'Mul76221', )([Fla7969,Con9133])
Res70325 = keras.layers.Reshape((8, 1), name = 'Res70325', )(Mul76221)
Res86637 = keras.layers.Reshape((8, 1, 1), name = 'Res86637', )(Res70325)
Up_38688 = keras.layers.UpSampling2D(size=(1, 2), name = 'Up_38688', )(Res86637)
Res48327 = keras.layers.Reshape((8, 2), name = 'Res48327', )(Up_38688)
Mul6649 = keras.layers.Multiply(name = 'Mul6649', )([in0Mul6649,in1Mul6649])
Zer81616 = keras.layers.ZeroPadding1D(padding=((6, 0)), name = 'Zer81616', )(Mul6649)
Mul85361 = keras.layers.Multiply(name = 'Mul85361', )([Res48327,Zer81616])
Per82327 = keras.layers.Permute((2,1), name = 'Per82327',)(Mul85361)
Thr41380 = keras.layers.ThresholdedReLU(theta=0.5018381745106577, name = 'Thr41380', )(Per82327)
model = tf.keras.models.Model(inputs=[in0Mul58106,in1Mul58106,in0Glo43942,in0Con9133,in0Mul6649,in1Mul6649], outputs=Thr41380)
in0Mul58106 = tf.constant([[[[0.66, 0.7347], [0.5982, 0.8272]], [[0.4245, 0.1963], [0.026, 0.976]]]])
in1Mul58106 = tf.constant([[[[0.8295, 0.2014], [0.9911, 0.1466]], [[0.3371, 0.2384], [0.8204, 0.2045]]]])
in0Glo43942 = tf.constant([[[[1.3849, 1.3439]]]])
in0Con9133 = tf.constant([[0.2548, 0.3119, 0.9622, 0.2073, 0.6552, 0.7324]])
in0Mul6649 = tf.constant([[[0.4789, 0.1823], [0.5112, 0.8247]]])
in1Mul6649 = tf.constant([[[0.6462, 0.4947], [0.8945, 0.7305]]])
print (np.array2string(model.predict([in0Mul58106,in1Mul58106,in0Glo43942,in0Con9133,in0Mul6649,in1Mul6649],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Thr41380.png')

LMul58106 = multiply_layer([[[[[0.66, 0.7347], [0.5982, 0.8272]], [[0.4245, 0.1963], [0.026, 0.976]]]], [[[[0.8295, 0.2014], [0.9911, 0.1466]], [[0.3371, 0.2384], [0.8204, 0.2045]]]]], Mul58106), 
LRes65152 = reshape_layer(Mul58106, [2, 4], Res65152), 
LFla7969 = flatten_layer(Res65152, Fla7969), 
LGlo43942 = global_average_pooling2D_layer([[[[1.3849, 1.3439]]]], Glo43942), 
LCon9133 = concatenate_layer([Glo43942,[[0.2548, 0.3119, 0.9622, 0.2073, 0.6552, 0.7324]]], 1, Con9133), 
LMul76221 = multiply_layer([Fla7969,Con9133], Mul76221), 
LRes70325 = reshape_layer(Mul76221, [8, 1], Res70325), 
LRes86637 = reshape_layer(Res70325, [8, 1, 1], Res86637), 
LUp_38688 = up_sampling2D_layer(Res86637, 1, 2, Up_38688), 
LRes48327 = reshape_layer(Up_38688, [8, 2], Res48327), 
LMul6649 = multiply_layer([[[[0.4789, 0.1823], [0.5112, 0.8247]]], [[[0.6462, 0.4947], [0.8945, 0.7305]]]], Mul6649), 
LZer81616 = zero_padding1D_layer(Mul6649, 6, 0, Zer81616), 
LMul85361 = multiply_layer([Res48327,Zer81616], Mul85361), 
LPer82327 = permute_layer(Mul85361, 2,1, Per82327), 
LThr41380 = thresholded_relu_layer(Per82327, 0.5018381745106577, Thr41380), 
exec_layers([LMul58106,LRes65152,LFla7969,LGlo43942,LCon9133,LMul76221,LRes70325,LRes86637,LUp_38688,LRes48327,LMul6649,LZer81616,LMul85361,LPer82327,LThr41380],["Mul58106","Res65152","Fla7969","Glo43942","Con9133","Mul76221","Res70325","Res86637","Up_38688","Res48327","Mul6649","Zer81616","Mul85361","Per82327","Thr41380"],Thr41380,"Thr41380")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]]]

Actual:   [[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]]

Expected: [[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]]