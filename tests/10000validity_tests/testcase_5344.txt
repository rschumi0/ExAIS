import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Den46922 = tf.keras.layers.Input(shape=([4, 5]))
in0Con79227 = tf.keras.layers.Input(shape=([4, 4, 3]))
in0Cro59417 = tf.keras.layers.Input(shape=([4, 3, 2, 4]))

Den46922 = keras.layers.Dense(4,name = 'Den46922', )(in0Den46922)
Res28598 = keras.layers.Reshape((4, 4, 1), name = 'Res28598', )(Den46922)
Con79227 = keras.layers.Concatenate(axis=3, name = 'Con79227', )([Res28598,in0Con79227])
Cro59417 = keras.layers.Cropping3D(cropping=((1, 2), (1, 1), (1, 0)), name = 'Cro59417', )(in0Cro59417)
Res99666 = keras.layers.Reshape((1, 1, 4), name = 'Res99666', )(Cro59417)
Sep90688 = keras.layers.SeparableConv2D(4, (1, 1),strides=(1, 1), padding='same', name = 'Sep90688', )(Res99666)
Zer67558 = keras.layers.ZeroPadding2D(padding=((3, 0), (3, 0)), name = 'Zer67558', )(Sep90688)
Sub38560 = keras.layers.Subtract(name = 'Sub38560', )([Con79227,Zer67558])
Den98444 = keras.layers.Dense(1,name = 'Den98444', )(Sub38560)
model = tf.keras.models.Model(inputs=[in0Den46922,in0Con79227,in0Cro59417], outputs=Den98444)
w = model.get_layer('Den46922').get_weights() 
w[0] = np.array([[0.0465, 0.9717, 0.3173, 0.8346], [0.0208, 0.2137, 0.7016, 0.5206], [0.5388, 0.3137, 0.7231, 0.3827], [0.7335, 0.1647, 0.5738, 0.1224], [0.5696, 0.5704, 0.1656, 0.4292]])
w[1] = np.array([0.001, 0.9301, 0.0948, 0.4781])
model.get_layer('Den46922').set_weights(w) 
w = model.get_layer('Sep90688').get_weights() 
w[0] = np.array([[[[0.3502], [0.2539], [0.5644], [0.3011]]]])
w[1] = np.array([[[[0.695, 0.3652, 0.9352, 0.7245], [0.9962, 0.5444, 0.3628, 0.8891], [0.8844, 0.3985, 0.4554, 0.9243], [0.8118, 0.2452, 0.5434, 0.0398]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep90688').set_weights(w) 
w = model.get_layer('Den98444').get_weights() 
w[0] = np.array([[0.7198], [0.5847], [0.835], [0.4223]])
w[1] = np.array([0.1792])
model.get_layer('Den98444').set_weights(w) 
in0Den46922 = tf.constant([[[0.608, 0.7581, 0.7885, 0.984, 0.5513], [0.6206, 0.5037, 0.1487, 0.7441, 0.8329], [0.2067, 0.6024, 0.647, 0.9101, 0.9644], [0.5317, 0.3903, 0.4781, 0.3756, 0.7184]]])
in0Con79227 = tf.constant([[[[0.9129, 0.6463, 0.0341], [0.117, 0.8972, 0.7578], [0.068, 0.342, 0.7024], [0.4368, 0.912, 0.7522]], [[0.3358, 0.3181, 0.0702], [0.2544, 0.1054, 0.2932], [0.23, 0.9611, 0.6247], [0.4314, 0.249, 0.2147]], [[0.666, 0.7165, 0.2384], [0.1198, 0.0925, 0.3477], [0.8992, 0.0476, 0.1788], [0.5726, 0.4281, 0.9961]], [[0.1223, 0.8889, 0.3791], [0.262, 0.4402, 0.9819], [0.8395, 0.6148, 0.2508], [0.9484, 0.1586, 0.0491]]]])
in0Cro59417 = tf.constant([[[[[1.7559, 1.8135, 1.402, 1.959], [1.2088, 1.3025, 1.0313, 1.7562]], [[1.3356, 1.2459, 1.6418, 1.3606], [1.7428, 1.4627, 1.5988, 1.3359]], [[1.329, 1.5672, 1.9149, 1.8284], [1.854, 1.6306, 1.7797, 1.6329]]], [[[1.8985, 1.1758, 1.3808, 1.9621], [1.6334, 1.1005, 1.7185, 1.5534]], [[1.2984, 1.1742, 1.052, 1.3728], [1.9281, 1.214, 1.2044, 1.7174]], [[1.656, 1.9084, 1.2006, 1.9538], [1.8807, 1.5267, 1.6171, 1.4846]]], [[[1.6796, 1.4318, 1.5812, 1.7847], [1.1241, 1.3937, 1.5718, 1.5141]], [[1.5638, 1.1933, 1.0503, 1.7801], [1.5269, 1.8987, 1.4714, 1.5937]], [[1.6117, 1.5012, 1.416, 1.4479], [1.6345, 1.303, 1.4229, 1.7292]]], [[[1.3424, 1.5645, 1.5974, 1.3682], [1.1987, 1.4406, 1.2249, 1.7306]], [[1.1057, 1.1598, 1.4295, 1.2593], [1.4433, 1.7341, 1.3832, 1.7843]], [[1.47, 1.2279, 1.6915, 1.7404], [1.9564, 1.7579, 1.3616, 1.7488]]]]])
print (np.array2string(model.predict([in0Den46922,in0Con79227,in0Cro59417],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Den98444.png')

LDen46922 = dense_layer([[[0.608, 0.7581, 0.7885, 0.984, 0.5513], [0.6206, 0.5037, 0.1487, 0.7441, 0.8329], [0.2067, 0.6024, 0.647, 0.9101, 0.9644], [0.5317, 0.3903, 0.4781, 0.3756, 0.7184]]], [[0.0465, 0.9717, 0.3173, 0.8346], [0.0208, 0.2137, 0.7016, 0.5206], [0.5388, 0.3137, 0.7231, 0.3827], [0.7335, 0.1647, 0.5738, 0.1224], [0.5696, 0.5704, 0.1656, 0.4292]],[0.001, 0.9301, 0.0948, 0.4781], Den46922), 
LRes28598 = reshape_layer(Den46922, [4, 4, 1], Res28598), 
LCon79227 = concatenate_layer([Res28598,[[[[0.9129, 0.6463, 0.0341], [0.117, 0.8972, 0.7578], [0.068, 0.342, 0.7024], [0.4368, 0.912, 0.7522]], [[0.3358, 0.3181, 0.0702], [0.2544, 0.1054, 0.2932], [0.23, 0.9611, 0.6247], [0.4314, 0.249, 0.2147]], [[0.666, 0.7165, 0.2384], [0.1198, 0.0925, 0.3477], [0.8992, 0.0476, 0.1788], [0.5726, 0.4281, 0.9961]], [[0.1223, 0.8889, 0.3791], [0.262, 0.4402, 0.9819], [0.8395, 0.6148, 0.2508], [0.9484, 0.1586, 0.0491]]]]], 3, Con79227), 
LCro59417 = cropping3D_layer([[[[[1.7559, 1.8135, 1.402, 1.959], [1.2088, 1.3025, 1.0313, 1.7562]], [[1.3356, 1.2459, 1.6418, 1.3606], [1.7428, 1.4627, 1.5988, 1.3359]], [[1.329, 1.5672, 1.9149, 1.8284], [1.854, 1.6306, 1.7797, 1.6329]]], [[[1.8985, 1.1758, 1.3808, 1.9621], [1.6334, 1.1005, 1.7185, 1.5534]], [[1.2984, 1.1742, 1.052, 1.3728], [1.9281, 1.214, 1.2044, 1.7174]], [[1.656, 1.9084, 1.2006, 1.9538], [1.8807, 1.5267, 1.6171, 1.4846]]], [[[1.6796, 1.4318, 1.5812, 1.7847], [1.1241, 1.3937, 1.5718, 1.5141]], [[1.5638, 1.1933, 1.0503, 1.7801], [1.5269, 1.8987, 1.4714, 1.5937]], [[1.6117, 1.5012, 1.416, 1.4479], [1.6345, 1.303, 1.4229, 1.7292]]], [[[1.3424, 1.5645, 1.5974, 1.3682], [1.1987, 1.4406, 1.2249, 1.7306]], [[1.1057, 1.1598, 1.4295, 1.2593], [1.4433, 1.7341, 1.3832, 1.7843]], [[1.47, 1.2279, 1.6915, 1.7404], [1.9564, 1.7579, 1.3616, 1.7488]]]]], 1, 2, 1, 1, 1, 0, Cro59417), 
LRes99666 = reshape_layer(Cro59417, [1, 1, 4], Res99666), 
LSep90688 = separable_conv2D_layer(Res99666, 1, 1,[[[[[0.3502], [0.2539], [0.5644], [0.3011]]]],[[[[0.695, 0.3652, 0.9352, 0.7245], [0.9962, 0.5444, 0.3628, 0.8891], [0.8844, 0.3985, 0.4554, 0.9243], [0.8118, 0.2452, 0.5434, 0.0398]]]]],[0, 0, 0, 0], 1, 1, true, Sep90688), 
LZer67558 = zero_padding2D_layer(Sep90688, 3, 0, 3, 0, Zer67558), 
LSub38560 = subtract_layer(Con79227,Zer67558, Sub38560), 
LDen98444 = dense_layer(Sub38560, [[0.7198], [0.5847], [0.835], [0.4223]],[0.1792], Den98444), 
exec_layers([LDen46922,LRes28598,LCon79227,LCro59417,LRes99666,LSep90688,LZer67558,LSub38560,LDen98444],["Den46922","Res28598","Con79227","Cro59417","Res99666","Sep90688","Zer67558","Sub38560","Den98444"],Den98444,"Den98444")

Actual (Unparsed): [[[[2.3508139], [3.0491899], [2.2736337], [2.9814592]], [[1.4918566], [2.1845643], [2.3283685], [1.9995660]], [[2.4110568], [2.0299825], [2.0674817], [2.5425126]], [[1.8556640], [2.6634636], [2.1657142], [-1.3952016]]]]

Expected (Unparsed): [[[[2.350813933448],[3.049189889132],[2.2736337207620005],[2.9814591779660002]],[[1.491856644878],[2.184564344734],[2.328368468782],[1.999566033802]],[[2.411056770068],[2.02998251112],[2.067481659306],[2.542512634624]],[[1.8556639940379998],[2.66346360267],[2.165714171736],[-1.395201736019964]]]]

Actual:   [[[[2.3509], [3.0492], [2.2737], [2.9815]], [[1.4919], [2.1846], [2.3284], [1.9996]], [[2.4111], [2.03], [2.0675], [2.5426]], [[1.8557], [2.6635], [2.1658], [-1.3952]]]]

Expected: [[[[2.3509], [3.0492], [2.2737], [2.9815]], [[1.4919], [2.1846], [2.3284], [1.9996]], [[2.4111], [2.03], [2.0675], [2.5426]], [[1.8557], [2.6635], [2.1658], [-1.3952]]]]