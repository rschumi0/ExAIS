import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave97496 = tf.keras.layers.Input(shape=([1, 1, 2]))
in1Ave97496 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Glo66252 = tf.keras.layers.Input(shape=([1, 1]))
in0Con89440 = tf.keras.layers.Input(shape=([1]))
in0Con44822 = tf.keras.layers.Input(shape=([3, 5, 3]))
in0Den37018 = tf.keras.layers.Input(shape=([3, 5, 4]))
in0Con41556 = tf.keras.layers.Input(shape=([3, 5, 4, 1]))
in0Ave67483 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))
in1Ave67483 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))

Ave97496 = keras.layers.Average(name = 'Ave97496', )([in0Ave97496,in1Ave97496])
Res61588 = keras.layers.Reshape((1, 2), name = 'Res61588', )(Ave97496)
Fla63088 = keras.layers.Flatten(name = 'Fla63088', )(Res61588)
Glo66252 = keras.layers.GlobalMaxPool1D(name = 'Glo66252', )(in0Glo66252)
Con89440 = keras.layers.Concatenate(axis=1, name = 'Con89440', )([Glo66252,in0Con89440])
Ave94582 = keras.layers.Average(name = 'Ave94582', )([Fla63088,Con89440])
Res83112 = keras.layers.Reshape((2, 1), name = 'Res83112', )(Ave94582)
Res93916 = keras.layers.Reshape((2, 1, 1), name = 'Res93916', )(Res83112)
Zer74041 = keras.layers.ZeroPadding2D(padding=((1, 0), (4, 0)), name = 'Zer74041', )(Res93916)
Con44822 = keras.layers.Concatenate(axis=3, name = 'Con44822', )([Zer74041,in0Con44822])
Den37018 = keras.layers.Dense(4,name = 'Den37018', )(in0Den37018)
Cro61414 = keras.layers.Cropping2D(cropping=((0, 0), (0, 0)), name = 'Cro61414', )(Den37018)
Sub82030 = keras.layers.Subtract(name = 'Sub82030', )([Con44822,Cro61414])
Res28892 = keras.layers.Reshape((3, 5, 4, 1), name = 'Res28892', )(Sub82030)
Con41556 = keras.layers.Concatenate(axis=4, name = 'Con41556', )([Res28892,in0Con41556])
Ave67483 = keras.layers.Average(name = 'Ave67483', )([in0Ave67483,in1Ave67483])
Zer29156 = keras.layers.ZeroPadding3D(padding=((2, 0), (3, 0), (2, 0)), name = 'Zer29156', )(Ave67483)
Mul13715 = keras.layers.Multiply(name = 'Mul13715', )([Con41556,Zer29156])
Con3973 = keras.layers.Conv3D(4, (1, 2, 3),strides=(1, 1, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con3973', )(Mul13715)
model = tf.keras.models.Model(inputs=[in0Ave97496,in1Ave97496,in0Glo66252,in0Con89440,in0Con44822,in0Den37018,in0Con41556,in0Ave67483,in1Ave67483], outputs=Con3973)
w = model.get_layer('Den37018').get_weights() 
w[0] = np.array([[0.3186, 0.0334, 0.1303, 0.7939], [0.0612, 0.7104, 0.5359, 0.4198], [0.648, 0.6388, 0.1147, 0.8896], [0.2217, 0.1257, 0.9556, 0.7641]])
w[1] = np.array([0.2107, 0.3595, 0.6889, 0.4346])
model.get_layer('Den37018').set_weights(w) 
w = model.get_layer('Con3973').get_weights() 
w[0] = np.array([[[[[0.0769, 0.0703, 0.903, 0.3487], [0.8379, 0.3745, 0.891, 0.5888]], [[0.7972, 0.9549, 0.3664, 0.2645], [0.5812, 0.8862, 0.7679, 0.9983]], [[0.8852, 0.7165, 0.7822, 0.6415], [0.616, 0.9729, 0.9056, 0.3207]]], [[[0.532, 0.8642, 0.429, 0.3192], [0.5228, 0.859, 0.3694, 0.3561]], [[0.8413, 0.0569, 0.4879, 0.6376], [0.9253, 0.9166, 0.8169, 0.7837]], [[0.9277, 0.9557, 0.0517, 0.3604], [0.7114, 0.4953, 0.7534, 0.2836]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con3973').set_weights(w) 
in0Ave97496 = tf.constant([[[[0.9063, 0.2964]]]])
in1Ave97496 = tf.constant([[[[0.4097, 0.5135]]]])
in0Glo66252 = tf.constant([[[1.479]]])
in0Con89440 = tf.constant([[0.21]])
in0Con44822 = tf.constant([[[[0.0553, 0.0149, 0.2196], [0.7388, 0.6348, 0.7014], [0.4063, 0.8987, 0.8299], [0.2693, 0.0287, 0.0421], [0.3552, 0.5808, 0.2109]], [[0.2279, 0.4184, 0.8692], [0.6678, 0.4652, 0.0042], [0.6356, 0.2454, 0.4383], [0.5695, 0.793, 0.9771], [0.9921, 0.6506, 0.496]], [[0.372, 0.6742, 0.637], [0.4457, 0.1701, 0.3763], [0.4962, 0.8416, 0.597], [0.3858, 0.5496, 0.5721], [0.2272, 0.9706, 0.4913]]]])
in0Den37018 = tf.constant([[[[0.8455, 0.9787, 0.9034, 0.0597], [0.9481, 0.9554, 0.6015, 0.0773], [0.0114, 0.2441, 0.7582, 0.7505], [0.9733, 0.158, 0.7189, 0.4016], [0.2796, 0.8844, 0.951, 0.3029]], [[0.4771, 0.7527, 0.9468, 0.2419], [0.6622, 0.7344, 0.8673, 0.697], [0.8627, 0.3856, 0.7346, 0.6338], [0.9311, 0.137, 0.1815, 0.4479], [0.6773, 0.435, 0.1234, 0.511]], [[0.781, 0.7424, 0.2304, 0.1067], [0.488, 0.817, 0.7444, 0.2852], [0.2182, 0.006, 0.0162, 0.3076], [0.991, 0.5161, 0.1117, 0.9056], [0.0064, 0.7486, 0.9821, 0.539]]]])
in0Con41556 = tf.constant([[[[[0.5657], [0.546], [0.0344], [0.6604]], [[0.4717], [0.9815], [0.068], [0.3182]], [[0.0088], [0.0642], [0.0945], [0.7807]], [[0.2025], [0.1467], [0.9343], [0.3296]], [[0.904], [0.8331], [0.168], [0.2164]]], [[[0.2264], [0.0193], [0.7336], [0.1243]], [[0.6624], [0.3112], [0.7194], [0.1707]], [[0.5746], [0.9213], [0.1704], [0.1827]], [[0.4164], [0.8834], [0.8457], [0.2941]], [[0.8686], [0.5706], [0.6477], [0.1379]]], [[[0.057], [0.0545], [0.8733], [0.0353]], [[0.1535], [0.7988], [0.5317], [0.622]], [[0.9604], [0.5483], [0.7188], [0.2918]], [[0.5226], [0.0426], [0.4415], [0.6875]], [[0.4235], [0.3607], [0.3462], [0.2246]]]]])
in0Ave67483 = tf.constant([[[[[0.8149, 0.828], [0.9798, 0.1971]], [[0.2522, 0.3907], [0.9564, 0.0625]]]]])
in1Ave67483 = tf.constant([[[[[0.7215, 0.5524], [0.7847, 0.5297]], [[0.4622, 0.7261], [0.9078, 0.6573]]]]])
print (np.array2string(model.predict([in0Ave97496,in1Ave97496,in0Glo66252,in0Con89440,in0Con44822,in0Den37018,in0Con41556,in0Ave67483,in1Ave67483],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con3973.png')

LAve97496 = average_layer([[[[[0.9063, 0.2964]]]], [[[[0.4097, 0.5135]]]]], Ave97496), 
LRes61588 = reshape_layer(Ave97496, [1, 2], Res61588), 
LFla63088 = flatten_layer(Res61588, Fla63088), 
LGlo66252 = global_max_pool1D_layer([[[1.479]]], Glo66252), 
LCon89440 = concatenate_layer([Glo66252,[[0.21]]], 1, Con89440), 
LAve94582 = average_layer([Fla63088,Con89440], Ave94582), 
LRes83112 = reshape_layer(Ave94582, [2, 1], Res83112), 
LRes93916 = reshape_layer(Res83112, [2, 1, 1], Res93916), 
LZer74041 = zero_padding2D_layer(Res93916, 1, 0, 4, 0, Zer74041), 
LCon44822 = concatenate_layer([Zer74041,[[[[0.0553, 0.0149, 0.2196], [0.7388, 0.6348, 0.7014], [0.4063, 0.8987, 0.8299], [0.2693, 0.0287, 0.0421], [0.3552, 0.5808, 0.2109]], [[0.2279, 0.4184, 0.8692], [0.6678, 0.4652, 0.0042], [0.6356, 0.2454, 0.4383], [0.5695, 0.793, 0.9771], [0.9921, 0.6506, 0.496]], [[0.372, 0.6742, 0.637], [0.4457, 0.1701, 0.3763], [0.4962, 0.8416, 0.597], [0.3858, 0.5496, 0.5721], [0.2272, 0.9706, 0.4913]]]]], 3, Con44822), 
LDen37018 = dense_layer([[[[0.8455, 0.9787, 0.9034, 0.0597], [0.9481, 0.9554, 0.6015, 0.0773], [0.0114, 0.2441, 0.7582, 0.7505], [0.9733, 0.158, 0.7189, 0.4016], [0.2796, 0.8844, 0.951, 0.3029]], [[0.4771, 0.7527, 0.9468, 0.2419], [0.6622, 0.7344, 0.8673, 0.697], [0.8627, 0.3856, 0.7346, 0.6338], [0.9311, 0.137, 0.1815, 0.4479], [0.6773, 0.435, 0.1234, 0.511]], [[0.781, 0.7424, 0.2304, 0.1067], [0.488, 0.817, 0.7444, 0.2852], [0.2182, 0.006, 0.0162, 0.3076], [0.991, 0.5161, 0.1117, 0.9056], [0.0064, 0.7486, 0.9821, 0.539]]]], [[0.3186, 0.0334, 0.1303, 0.7939], [0.0612, 0.7104, 0.5359, 0.4198], [0.648, 0.6388, 0.1147, 0.8896], [0.2217, 0.1257, 0.9556, 0.7641]],[0.2107, 0.3595, 0.6889, 0.4346], Den37018), 
LCro61414 = cropping2D_layer(Den37018, 0, 0, 0, 0, Cro61414), 
LSub82030 = subtract_layer(Con44822,Cro61414, Sub82030), 
LRes28892 = reshape_layer(Sub82030, [3, 5, 4, 1], Res28892), 
LCon41556 = concatenate_layer([Res28892,[[[[[0.5657], [0.546], [0.0344], [0.6604]], [[0.4717], [0.9815], [0.068], [0.3182]], [[0.0088], [0.0642], [0.0945], [0.7807]], [[0.2025], [0.1467], [0.9343], [0.3296]], [[0.904], [0.8331], [0.168], [0.2164]]], [[[0.2264], [0.0193], [0.7336], [0.1243]], [[0.6624], [0.3112], [0.7194], [0.1707]], [[0.5746], [0.9213], [0.1704], [0.1827]], [[0.4164], [0.8834], [0.8457], [0.2941]], [[0.8686], [0.5706], [0.6477], [0.1379]]], [[[0.057], [0.0545], [0.8733], [0.0353]], [[0.1535], [0.7988], [0.5317], [0.622]], [[0.9604], [0.5483], [0.7188], [0.2918]], [[0.5226], [0.0426], [0.4415], [0.6875]], [[0.4235], [0.3607], [0.3462], [0.2246]]]]]], 4, Con41556), 
LAve67483 = average_layer([[[[[[0.8149, 0.828], [0.9798, 0.1971]], [[0.2522, 0.3907], [0.9564, 0.0625]]]]], [[[[[0.7215, 0.5524], [0.7847, 0.5297]], [[0.4622, 0.7261], [0.9078, 0.6573]]]]]], Ave67483), 
LZer29156 = zero_padding3D_layer(Ave67483, 2, 0, 3, 0, 2, 0, Zer29156), 
LMul13715 = multiply_layer([Con41556,Zer29156], Mul13715), 
LCon3973 = conv3D_layer(Mul13715, 1, 2, 3,[[[[[0.0769, 0.0703, 0.903, 0.3487], [0.8379, 0.3745, 0.891, 0.5888]], [[0.7972, 0.9549, 0.3664, 0.2645], [0.5812, 0.8862, 0.7679, 0.9983]], [[0.8852, 0.7165, 0.7822, 0.6415], [0.616, 0.9729, 0.9056, 0.3207]]], [[[0.532, 0.8642, 0.429, 0.3192], [0.5228, 0.859, 0.3694, 0.3561]], [[0.8413, 0.0569, 0.4879, 0.6376], [0.9253, 0.9166, 0.8169, 0.7837]], [[0.9277, 0.9557, 0.0517, 0.3604], [0.7114, 0.4953, 0.7534, 0.2836]]]]],[0, 0, 0, 0], 1, 1, 1, true, 1, 1, 1, Con3973), 
exec_layers([LAve97496,LRes61588,LFla63088,LGlo66252,LCon89440,LAve94582,LRes83112,LRes93916,LZer74041,LCon44822,LDen37018,LCro61414,LSub82030,LRes28892,LCon41556,LAve67483,LZer29156,LMul13715,LCon3973],["Ave97496","Res61588","Fla63088","Glo66252","Con89440","Ave94582","Res83112","Res93916","Zer74041","Con44822","Den37018","Cro61414","Sub82030","Res28892","Con41556","Ave67483","Zer29156","Mul13715","Con3973"],Con3973,"Con3973")

Actual (Unparsed): [[[[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.7974825, -0.8939458, 0.1730545, -0.3076090], [-1.8165050, -1.0564936, -0.1718604, -0.9143725], [-1.4212292, -0.5372732, -0.8657358, -0.9769157]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.8904370, -0.6464975, -0.4473969, -0.6451046], [-3.1619646, -2.7555822, -1.0701488, -1.3588053], [-2.0294582, -1.2103696, -1.7408613, -1.2123173]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.1174363, -0.0033654, -0.0339304, -0.1094079], [-1.3282439, -1.0391266, -1.0050007, -0.7774758], [-0.9619839, -1.2527186, -0.5356908, -0.2803351]]]]]

Expected (Unparsed): [[[[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]]],[[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]]],[[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[-0.7974824898029698,-0.8939458434959138,0.17305446526627835,-0.30760899148017923],[-1.8165050225197845,-1.0564935861313336,-0.1718604343333813,-0.9143724961927089],[-1.4212291992096342,-0.5372732041409958,-0.8657357704199261,-0.9769156966092576]],[[0.0,0.0,0.0,0.0],[-0.8904369941382791,-0.6464975140028294,-0.447396879272439,-0.6451046458222706],[-3.161964652719354,-2.7555822195461195,-1.0701487951591488,-1.3588053224030274],[-2.029458175944444,-1.2103696541779483,-1.7408613048077597,-1.212317303772359]],[[0.0,0.0,0.0,0.0],[-0.11743632234901924,-0.0033654468638340262,-0.03393040915803122,-0.109407937555134],[-1.328243870616927,-1.0391265833141454,-1.0050007467598205,-0.7774757763560368],[-0.9619839048168284,-1.252718556947756,-0.53569083951358,-0.28033514674865023]]]]]

Actual:   [[[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [-0.7974, -0.8939, 0.1731, -0.3076], [-1.8165, -1.0564, -0.1718, -0.9143], [-1.4212, -0.5372, -0.8657, -0.9769]], [[0, 0, 0, 0], [-0.8904, -0.6464, -0.4473, -0.6451], [-3.1619, -2.7555, -1.0701, -1.3588], [-2.0294, -1.2103, -1.7408, -1.2123]], [[0, 0, 0, 0], [-0.1174, -0.0033, -0.0339, -0.1094], [-1.3282, -1.0391, -1.005, -0.7774], [-0.9619, -1.2527, -0.5356, -0.2803]]]]]

Expected: [[[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [-0.7974, -0.8939, 0.1731, -0.3076], [-1.8165, -1.0564, -0.1718, -0.9143], [-1.4212, -0.5372, -0.8657, -0.9769]], [[0, 0, 0, 0], [-0.8904, -0.6464, -0.4473, -0.6451], [-3.1619, -2.7555, -1.0701, -1.3588], [-2.0294, -1.2103, -1.7408, -1.2123]], [[0, 0, 0, 0], [-0.1174, -0.0033, -0.0339, -0.1094], [-1.3282, -1.0391, -1.005, -0.7774], [-0.9619, -1.2527, -0.5356, -0.2803]]]]]