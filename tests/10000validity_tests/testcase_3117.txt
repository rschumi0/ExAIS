import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub98777 = tf.keras.layers.Input(shape=([3, 3, 3, 2]))
in1Sub98777 = tf.keras.layers.Input(shape=([3, 3, 3, 2]))
in0Con83666 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con72792 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Min28059 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in1Min28059 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Sep64383 = tf.keras.layers.Input(shape=([2, 2]))
in0Con90160 = tf.keras.layers.Input(shape=([3, 3, 3, 1]))

Sub98777 = keras.layers.Subtract(name = 'Sub98777', )([in0Sub98777,in1Sub98777])
Con83666 = keras.layers.Conv2D(2, (1, 1),strides=(1, 1), padding='valid', dilation_rate=(1, 1), name = 'Con83666', )(in0Con83666)
Res93030 = keras.layers.Reshape((2, 2, 2, 1), name = 'Res93030', )(Con83666)
Con72792 = keras.layers.Concatenate(axis=4, name = 'Con72792', )([Res93030,in0Con72792])
Min28059 = keras.layers.Minimum(name = 'Min28059', )([in0Min28059,in1Min28059])
Res59986 = keras.layers.Reshape((1, 2, 1), name = 'Res59986', )(Min28059)
Ave4725 = keras.layers.AveragePooling2D(pool_size=(1, 2), strides=(1, 1), padding='valid', name = 'Ave4725', )(Res59986)
Res98199 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res98199', )(Ave4725)
Con10174 = keras.layers.Conv3DTranspose(2, (1, 1, 1),strides=(1, 1, 1), padding='valid', name = 'Con10174', )(Res98199)
Zer23349 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (1, 0)), name = 'Zer23349', )(Con10174)
Max31610 = keras.layers.Maximum(name = 'Max31610', )([Con72792,Zer23349])
Zer65799 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (1, 0)), name = 'Zer65799', )(Max31610)
Max41104 = keras.layers.Maximum(name = 'Max41104', )([Sub98777,Zer65799])
Sep64383 = keras.layers.SeparableConv1D(4, (1),strides=(1), padding='same', name = 'Sep64383', )(in0Sep64383)
Glo23796 = keras.layers.GlobalMaxPool1D(name = 'Glo23796', )(Sep64383)
Res37032 = keras.layers.Reshape((4, 1), name = 'Res37032', )(Glo23796)
Res24188 = keras.layers.Reshape((4, 1, 1), name = 'Res24188', )(Res37032)
Res65300 = keras.layers.Reshape((4, 1, 1, 1), name = 'Res65300', )(Res24188)
Cro38471 = keras.layers.Cropping3D(cropping=((0, 3), (0, 0), (0, 0)), name = 'Cro38471', )(Res65300)
Zer96480 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (2, 0)), name = 'Zer96480', )(Cro38471)
Con90160 = keras.layers.Concatenate(axis=4, name = 'Con90160', )([Zer96480,in0Con90160])
Max82688 = keras.layers.Maximum(name = 'Max82688', )([Max41104,Con90160])
model = tf.keras.models.Model(inputs=[in0Sub98777,in1Sub98777,in0Con83666,in0Con72792,in0Min28059,in1Min28059,in0Sep64383,in0Con90160], outputs=Max82688)
w = model.get_layer('Con83666').get_weights() 
w[0] = np.array([[[[0.9778, 0.3894]]]])
w[1] = np.array([0, 0])
model.get_layer('Con83666').set_weights(w) 
w = model.get_layer('Con10174').get_weights() 
w[0] = np.array([[[[[0.7391], [0.5834]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con10174').set_weights(w) 
w = model.get_layer('Sep64383').get_weights() 
w[0] = np.array([[[0.6771], [0.878]]])
w[1] = np.array([[[0.1534, 0.5339, 0.5197, 0.5887], [0.8238, 0.7266, 0.8573, 0.8387]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep64383').set_weights(w) 
in0Sub98777 = tf.constant([[[[[0.6844, 0.8466], [0.2495, 0.8702], [0.0022, 0.3466]], [[0.5588, 0.4884], [0.7585, 0.3926], [0.2744, 0.8002]], [[0.9664, 0.0719], [0.7801, 0.9164], [0.998, 0.6184]]], [[[0.1522, 0.7671], [0.7877, 0.9129], [0.4467, 0.9234]], [[0.8856, 0.7315], [0.3349, 0.4551], [0.0204, 0.6934]], [[0.6432, 0.0021], [0.8221, 0.8227], [0.8561, 0.3415]]], [[[0.6155, 0.1318], [0.9216, 0.8674], [0.7478, 0.6566]], [[0.7633, 0.5621], [0.7414, 0.9327], [0.7469, 0.2368]], [[0.6713, 0.9858], [0.9757, 0.0457], [0.5619, 0.5285]]]]])
in1Sub98777 = tf.constant([[[[[0.6971, 0.5368], [0.2672, 0.2062], [0.2889, 0.793]], [[0.2556, 0.4137], [0.2664, 0.5376], [0.9525, 0.418]], [[0.5003, 0.4314], [0.8142, 0.2631], [0.3683, 0.1722]]], [[[0.1013, 0.2109], [0.8771, 0.4233], [0.4014, 0.2745]], [[0.8862, 0.0416], [0.3086, 0.7383], [0.4395, 0.5573]], [[0.3117, 0.429], [0.8704, 0.3613], [0.8635, 0.8979]]], [[[0.7825, 0.601], [0.8101, 0.6085], [0.228, 0.3528]], [[0.8408, 0.6841], [0.4086, 0.2446], [0.3912, 0.7624]], [[0.0033, 0.3338], [0.4729, 0.0303], [0.7932, 0.7134]]]]])
in0Con83666 = tf.constant([[[[0.2408], [0.5663]], [[0.597], [0.0111]]]])
in0Con72792 = tf.constant([[[[[0.8748], [0.5048]], [[0.9311], [0.1385]]], [[[0.425], [0.7612]], [[0.3333], [0.2375]]]]])
in0Min28059 = tf.constant([[[[[0.7102]], [[0.7055]]]]])
in1Min28059 = tf.constant([[[[[0.6569]], [[0.6798]]]]])
in0Sep64383 = tf.constant([[[0.9361, 0.261], [0.5222, 0.73]]])
in0Con90160 = tf.constant([[[[[0.9343], [0.8527], [0.6329]], [[0.3106], [0.7122], [0.5739]], [[0.8925], [0.8512], [0.2045]]], [[[0.3109], [0.2951], [0.0545]], [[0.2975], [0.315], [0.5058]], [[0.7031], [0.8366], [0.1955]]], [[[0.9877], [0.5802], [0.8549]], [[0.428], [0.0736], [0.5839]], [[0.0797], [0.1378], [0.304]]]]])
print (np.array2string(model.predict([in0Sub98777,in1Sub98777,in0Con83666,in0Con72792,in0Min28059,in1Min28059,in0Sep64383,in0Con90160],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max82688.png')

LSub98777 = subtract_layer([[[[[0.6844, 0.8466], [0.2495, 0.8702], [0.0022, 0.3466]], [[0.5588, 0.4884], [0.7585, 0.3926], [0.2744, 0.8002]], [[0.9664, 0.0719], [0.7801, 0.9164], [0.998, 0.6184]]], [[[0.1522, 0.7671], [0.7877, 0.9129], [0.4467, 0.9234]], [[0.8856, 0.7315], [0.3349, 0.4551], [0.0204, 0.6934]], [[0.6432, 0.0021], [0.8221, 0.8227], [0.8561, 0.3415]]], [[[0.6155, 0.1318], [0.9216, 0.8674], [0.7478, 0.6566]], [[0.7633, 0.5621], [0.7414, 0.9327], [0.7469, 0.2368]], [[0.6713, 0.9858], [0.9757, 0.0457], [0.5619, 0.5285]]]]], [[[[[0.6971, 0.5368], [0.2672, 0.2062], [0.2889, 0.793]], [[0.2556, 0.4137], [0.2664, 0.5376], [0.9525, 0.418]], [[0.5003, 0.4314], [0.8142, 0.2631], [0.3683, 0.1722]]], [[[0.1013, 0.2109], [0.8771, 0.4233], [0.4014, 0.2745]], [[0.8862, 0.0416], [0.3086, 0.7383], [0.4395, 0.5573]], [[0.3117, 0.429], [0.8704, 0.3613], [0.8635, 0.8979]]], [[[0.7825, 0.601], [0.8101, 0.6085], [0.228, 0.3528]], [[0.8408, 0.6841], [0.4086, 0.2446], [0.3912, 0.7624]], [[0.0033, 0.3338], [0.4729, 0.0303], [0.7932, 0.7134]]]]], Sub98777), 
LCon83666 = conv2D_layer([[[[0.2408], [0.5663]], [[0.597], [0.0111]]]], 1, 1,[[[[0.9778, 0.3894]]]],[0, 0], 1, 1, false, 1, 1, Con83666), 
LRes93030 = reshape_layer(Con83666, [2, 2, 2, 1], Res93030), 
LCon72792 = concatenate_layer([Res93030,[[[[[0.8748], [0.5048]], [[0.9311], [0.1385]]], [[[0.425], [0.7612]], [[0.3333], [0.2375]]]]]], 4, Con72792), 
LMin28059 = minimum_layer([[[[[[0.7102]], [[0.7055]]]]], [[[[[0.6569]], [[0.6798]]]]]], Min28059), 
LRes59986 = reshape_layer(Min28059, [1, 2, 1], Res59986), 
LAve4725 = average_pooling2D_layer(Res59986, 1, 2, 1, 1, false, Ave4725), 
LRes98199 = reshape_layer(Ave4725, [1, 1, 1, 1], Res98199), 
LCon10174 = conv3D_transpose_layer(Res98199, 1, 1, 1,[[[[[0.7391], [0.5834]]]]],[0, 0], 1, 1, 1, false, Con10174), 
LZer23349 = zero_padding3D_layer(Con10174, 1, 0, 1, 0, 1, 0, Zer23349), 
LMax31610 = maximum_layer([Con72792,Zer23349], Max31610), 
LZer65799 = zero_padding3D_layer(Max31610, 1, 0, 1, 0, 1, 0, Zer65799), 
LMax41104 = maximum_layer([Sub98777,Zer65799], Max41104), 
LSep64383 = separable_conv1D_layer([[[0.9361, 0.261], [0.5222, 0.73]]], 1,[[[[0.6771], [0.878]]],[[[0.1534, 0.5339, 0.5197, 0.5887], [0.8238, 0.7266, 0.8573, 0.8387]]]],[0, 0, 0, 0], 1, true, Sep64383), 
LGlo23796 = global_max_pool1D_layer(Sep64383, Glo23796), 
LRes37032 = reshape_layer(Glo23796, [4, 1], Res37032), 
LRes24188 = reshape_layer(Res37032, [4, 1, 1], Res24188), 
LRes65300 = reshape_layer(Res24188, [4, 1, 1, 1], Res65300), 
LCro38471 = cropping3D_layer(Res65300, 0, 3, 0, 0, 0, 0, Cro38471), 
LZer96480 = zero_padding3D_layer(Cro38471, 2, 0, 2, 0, 2, 0, Zer96480), 
LCon90160 = concatenate_layer([Zer96480,[[[[[0.9343], [0.8527], [0.6329]], [[0.3106], [0.7122], [0.5739]], [[0.8925], [0.8512], [0.2045]]], [[[0.3109], [0.2951], [0.0545]], [[0.2975], [0.315], [0.5058]], [[0.7031], [0.8366], [0.1955]]], [[[0.9877], [0.5802], [0.8549]], [[0.428], [0.0736], [0.5839]], [[0.0797], [0.1378], [0.304]]]]]], 4, Con90160), 
LMax82688 = maximum_layer([Max41104,Con90160], Max82688), 
exec_layers([LSub98777,LCon83666,LRes93030,LCon72792,LMin28059,LRes59986,LAve4725,LRes98199,LCon10174,LZer23349,LMax31610,LZer65799,LMax41104,LSep64383,LGlo23796,LRes37032,LRes24188,LRes65300,LCro38471,LZer96480,LCon90160,LMax82688],["Sub98777","Con83666","Res93030","Con72792","Min28059","Res59986","Ave4725","Res98199","Con10174","Zer23349","Max31610","Zer65799","Max41104","Sep64383","Glo23796","Res37032","Res24188","Res65300","Cro38471","Zer96480","Con90160","Max82688"],Max82688,"Max82688")

Actual (Unparsed): [[[[[0.0000000, 0.9343000], [0.0000000, 0.8527000], [0.0000000, 0.6329000]], [[0.3032000, 0.3106000], [0.4921000, 0.7122000], [0.0000000, 0.5739000]], [[0.4661000, 0.8925000], [0.0000000, 0.8512000], [0.6297000, 0.4462000]]], [[[0.0509000, 0.5562000], [0.0000000, 0.4896000], [0.0453000, 0.6489000]], [[0.0000000, 0.6899000], [0.2354542, 0.8748000], [0.0937675, 0.5058000]], [[0.3315000, 0.7031000], [0.5537281, 0.9311000], [0.2205172, 0.1955000]]], [[[0.0000000, 0.9877000], [0.1115000, 0.5802000], [0.5198000, 0.8549000]], [[0.0000000, 0.4280000], [0.5837466, 0.6881000], [0.3557000, 0.7612000]], [[0.6680000, 0.6520000], [0.5028000, 0.3333000], [0.5822458, 0.3899154]]]]]

Expected (Unparsed): [[[[[0,0.9343],[0,0.8527],[0,0.6329]],[[0.30319999999999997,0.3106],[0.4920999999999999,0.7122],[0,0.5739]],[[0.46610000000000007,0.8925],[0,0.8512],[0.6296999999999999,0.44619999999999993]]],[[[0.0509,0.5562],[0,0.48960000000000004],[0.04530000000000001,0.6489]],[[0,0.6899000000000001],[0.23545423999999998,0.8748],[0.09376752000000001,0.5058]],[[0.3315,0.7031],[0.55372814,0.9311],[0.22051722,0.1955]]],[[[0,0.9877],[0.11149999999999993,0.5802],[0.5198,0.8549]],[[0,0.428],[0.5837466,0.6880999999999999],[0.3557,0.7612]],[[0.668,0.652],[0.5028,0.3333],[0.582245792508,0.38991539000000003]]]]]

Actual:   [[[[[0, 0.9343], [0, 0.8527], [0, 0.6329]], [[0.3032, 0.3106], [0.4921, 0.7122], [0, 0.5739]], [[0.4661, 0.8925], [0, 0.8512], [0.6297, 0.4462]]], [[[0.0509, 0.5562], [0, 0.4896], [0.0453, 0.6489]], [[0, 0.6899], [0.2355, 0.8748], [0.0938, 0.5058]], [[0.3315, 0.7031], [0.5538, 0.9311], [0.2206, 0.1955]]], [[[0, 0.9877], [0.1115, 0.5802], [0.5198, 0.8549]], [[0, 0.428], [0.5838, 0.6881], [0.3557, 0.7612]], [[0.668, 0.652], [0.5028, 0.3333], [0.5823, 0.39]]]]]

Expected: [[[[[0, 0.9343], [0, 0.8527], [0, 0.6329]], [[0.3032, 0.3106], [0.4921, 0.7122], [0, 0.5739]], [[0.4662, 0.8925], [0, 0.8512], [0.6297, 0.4462]]], [[[0.0509, 0.5562], [0, 0.4897], [0.0454, 0.6489]], [[0, 0.69], [0.2355, 0.8748], [0.0938, 0.5058]], [[0.3315, 0.7031], [0.5538, 0.9311], [0.2206, 0.1955]]], [[[0, 0.9877], [0.1115, 0.5802], [0.5198, 0.8549]], [[0, 0.428], [0.5838, 0.6881], [0.3557, 0.7612]], [[0.668, 0.652], [0.5028, 0.3333], [0.5823, 0.39]]]]]