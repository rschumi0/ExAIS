import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add87056 = tf.keras.layers.Input(shape=([2, 2]))
in1Add87056 = tf.keras.layers.Input(shape=([2, 2]))
in0Glo20642 = tf.keras.layers.Input(shape=([1, 1]))
in0Con47490 = tf.keras.layers.Input(shape=([3]))
in0Con59315 = tf.keras.layers.Input(shape=([4, 2]))
in0Lea36636 = tf.keras.layers.Input(shape=([2, 2, 1]))

Add87056 = keras.layers.Add(name = 'Add87056', )([in0Add87056,in1Add87056])
Fla56964 = keras.layers.Flatten(name = 'Fla56964', )(Add87056)
Glo20642 = keras.layers.GlobalMaxPool1D(name = 'Glo20642', )(in0Glo20642)
Con47490 = keras.layers.Concatenate(axis=1, name = 'Con47490', )([Glo20642,in0Con47490])
Ave88020 = keras.layers.Average(name = 'Ave88020', )([Fla56964,Con47490])
Res50234 = keras.layers.Reshape((4, 1), name = 'Res50234', )(Ave88020)
Con59315 = keras.layers.Concatenate(axis=2, name = 'Con59315', )([Res50234,in0Con59315])
Lea36636 = keras.layers.LeakyReLU(alpha=6.638551988839525, name = 'Lea36636', input_shape=(2, 2, 1))(in0Lea36636)
Res61092 = keras.layers.Reshape((2, 2), name = 'Res61092', )(Lea36636)
Con90889 = keras.layers.Conv1D(3, (1),strides=(1), padding='same', dilation_rate=(1), name = 'Con90889', )(Res61092)
Zer72263 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer72263', )(Con90889)
Mul83894 = keras.layers.Multiply(name = 'Mul83894', )([Con59315,Zer72263])
model = tf.keras.models.Model(inputs=[in0Add87056,in1Add87056,in0Glo20642,in0Con47490,in0Con59315,in0Lea36636], outputs=Mul83894)
w = model.get_layer('Con90889').get_weights() 
w[0] = np.array([[[0.1501, 0.3575, 0.9216], [0.2879, 0.5247, 0.2555]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con90889').set_weights(w) 
in0Add87056 = tf.constant([[[0.2364, 0.4155], [0.7619, 0.2611]]])
in1Add87056 = tf.constant([[[0.1324, 0.2485], [0.537, 0.5252]]])
in0Glo20642 = tf.constant([[[1.9491]]])
in0Con47490 = tf.constant([[0.6076, 0.3885, 0.8054]])
in0Con59315 = tf.constant([[[0.3281, 0.7296], [0.0399, 0.9514], [0.9136, 0.062], [0.6139, 0.7833]]])
in0Lea36636 = tf.constant([[[[0.4475], [0.0903]], [[0.9456], [0.9869]]]])
print (np.array2string(model.predict([in0Add87056,in1Add87056,in0Glo20642,in0Con47490,in0Con59315,in0Lea36636],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul83894.png')

LAdd87056 = add_layer([[[[0.2364, 0.4155], [0.7619, 0.2611]]], [[[0.1324, 0.2485], [0.537, 0.5252]]]], Add87056), 
LFla56964 = flatten_layer(Add87056, Fla56964), 
LGlo20642 = global_max_pool1D_layer([[[1.9491]]], Glo20642), 
LCon47490 = concatenate_layer([Glo20642,[[0.6076, 0.3885, 0.8054]]], 1, Con47490), 
LAve88020 = average_layer([Fla56964,Con47490], Ave88020), 
LRes50234 = reshape_layer(Ave88020, [4, 1], Res50234), 
LCon59315 = concatenate_layer([Res50234,[[[0.3281, 0.7296], [0.0399, 0.9514], [0.9136, 0.062], [0.6139, 0.7833]]]], 2, Con59315), 
LLea36636 = leaky_relu_layer([[[[0.4475], [0.0903]], [[0.9456], [0.9869]]]], 6.638551988839525, Lea36636), 
LRes61092 = reshape_layer(Lea36636, [2, 2], Res61092), 
LCon90889 = conv1D_layer(Res61092, 1,[[[0.1501, 0.3575, 0.9216], [0.2879, 0.5247, 0.2555]]],[0, 0, 0], 1, true, 1, Con90889), 
LZer72263 = zero_padding1D_layer(Con90889, 2, 0, Zer72263), 
LMul83894 = multiply_layer([Con59315,Zer72263], Mul83894), 
exec_layers([LAdd87056,LFla56964,LGlo20642,LCon47490,LAve88020,LRes50234,LCon59315,LLea36636,LRes61092,LCon90889,LZer72263,LMul83894],["Add87056","Fla56964","Glo20642","Con47490","Ave88020","Res50234","Con59315","Lea36636","Res61092","Con90889","Zer72263","Mul83894"],Mul83894,"Mul83894")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0786051, 0.1894456, 0.0270002], [0.3390823, 0.5254238, 0.8801299]]]

Expected (Unparsed): [[[0.0,0.0,0.0],[0.0,0.0,0.0],[0.078605099144,0.18944561257599998,0.0270002343],[0.3390822942595,0.525423768177,0.8801299089029999]]]

Actual:   [[[0, 0, 0], [0, 0, 0], [0.0787, 0.1895, 0.0271], [0.3391, 0.5255, 0.8802]]]

Expected: [[[0, 0, 0], [0, 0, 0], [0.0787, 0.1895, 0.0271], [0.3391, 0.5255, 0.8802]]]