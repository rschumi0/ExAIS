import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer17403 = tf.keras.layers.Input(shape=([3, 2, 1, 4]))
in0Mul27893 = tf.keras.layers.Input(shape=([1, 2]))
in1Mul27893 = tf.keras.layers.Input(shape=([1, 2]))
in0Con20327 = tf.keras.layers.Input(shape=([48, 3]))

Zer17403 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer17403', )(in0Zer17403)
Res23827 = keras.layers.Reshape((5, 4, 12), name = 'Res23827', )(Zer17403)
Res56128 = keras.layers.Reshape((5, 48), name = 'Res56128', )(Res23827)
Per84153 = keras.layers.Permute((2,1), name = 'Per84153',)(Res56128)
Mul27893 = keras.layers.Multiply(name = 'Mul27893', )([in0Mul27893,in1Mul27893])
Zer88857 = keras.layers.ZeroPadding1D(padding=((47, 0)), name = 'Zer88857', )(Mul27893)
Con20327 = keras.layers.Concatenate(axis=2, name = 'Con20327', )([Zer88857,in0Con20327])
Sub31822 = keras.layers.Subtract(name = 'Sub31822', )([Per84153,Con20327])
Fla78905 = keras.layers.Flatten(name = 'Fla78905', )(Sub31822)
Res34860 = keras.layers.Reshape((240, 1), name = 'Res34860', )(Fla78905)
Ave88111 = keras.layers.AveragePooling1D(pool_size=(54), name = 'Ave88111', )(Res34860)
Sim30044 = keras.layers.SimpleRNN(3,name = 'Sim30044', )(Ave88111)
model = tf.keras.models.Model(inputs=[in0Zer17403,in0Mul27893,in1Mul27893,in0Con20327], outputs=Sim30044)
w = model.get_layer('Sim30044').get_weights() 
w[0] = np.array([[6, 10, 4]])
w[1] = np.array([[6, 3, 9], [10, 3, 10], [5, 7, 8]])
w[2] = np.array([7, 10, 5])
model.get_layer('Sim30044').set_weights(w) 
in0Zer17403 = tf.constant([[[[[1.0149, 1.9541, 1.5996, 1.9473]], [[1.482, 1.6662, 1.4209, 1.1214]]], [[[1.338, 1.0137, 1.4465, 1.2591]], [[1.3869, 1.342, 1.8789, 1.1967]]], [[[1.7455, 1.0283, 1.2227, 1.8942]], [[1.9107, 1.9545, 1.879, 1.2876]]]]])
in0Mul27893 = tf.constant([[[0.5093, 0.8196]]])
in1Mul27893 = tf.constant([[[0.0144, 0.7392]]])
in0Con20327 = tf.constant([[[0.7097, 0.338, 0.5982], [0.7737, 0.5723, 0.4629], [0.0312, 0.3848, 0.9004], [0.4208, 0.4874, 0.742], [0.2252, 0.6046, 0.8232], [0.0094, 0.8065, 0.6591], [0.5549, 0.0203, 0.2671], [0.6302, 0.4548, 0.4075], [0.6547, 0.9827, 0.742], [0.5566, 0.1196, 0.6655], [0.8647, 0.355, 0.7719], [0.561, 0.8802, 0.1322], [0.1727, 0.5921, 0.4769], [0.8893, 0.3529, 0.4828], [0.7556, 0.9047, 0.209], [0.6664, 0.9898, 0.0654], [0.6209, 0.1202, 0.7165], [0.824, 0.6615, 0.9661], [0.6781, 0.5095, 0.8228], [0.5253, 0.327, 0.831], [0.2694, 0.1361, 0.837], [0.8037, 0.7506, 0.4566], [0.8211, 0.0008, 0.9496], [0.1575, 0.2468, 0.9887], [0.7298, 0.8833, 0.3609], [0.038, 0.9505, 0.111], [0.7884, 0.7185, 0.2667], [0.064, 0.3536, 0.7872], [0.603, 0.1588, 0.5872], [0.8529, 0.7958, 0.5494], [0.3294, 0.6665, 0.2373], [0.217, 0.3147, 0.5226], [0.2193, 0.7049, 0.1367], [0.1852, 0.0797, 0.0403], [0.5268, 0.9519, 0.1784], [0.6017, 0.456, 0.956], [0.1975, 0.6937, 0.1679], [0.5754, 0.2501, 0.3733], [0.8886, 0.8612, 0.8073], [0.6317, 0.6197, 0.2315], [0.5094, 0.3866, 0.1223], [0.2835, 0.5137, 0.8592], [0.9223, 0.4704, 0.1486], [0.8229, 0.929, 0.5617], [0.2949, 0.8956, 0.0491], [0.2598, 0.0949, 0.5187], [0.9977, 0.0808, 0.3008], [0.5164, 0.3621, 0.6249]]])
print (np.array2string(model.predict([in0Zer17403,in0Mul27893,in1Mul27893,in0Con20327],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sim30044.png')

LZer17403 = zero_padding3D_layer([[[[[1.0149, 1.9541, 1.5996, 1.9473]], [[1.482, 1.6662, 1.4209, 1.1214]]], [[[1.338, 1.0137, 1.4465, 1.2591]], [[1.3869, 1.342, 1.8789, 1.1967]]], [[[1.7455, 1.0283, 1.2227, 1.8942]], [[1.9107, 1.9545, 1.879, 1.2876]]]]], 1, 1, 1, 1, 1, 1, Zer17403), 
LRes23827 = reshape_layer(Zer17403, [5, 4, 12], Res23827), 
LRes56128 = reshape_layer(Res23827, [5, 48], Res56128), 
LPer84153 = permute_layer(Res56128, 2,1, Per84153), 
LMul27893 = multiply_layer([[[[0.5093, 0.8196]]], [[[0.0144, 0.7392]]]], Mul27893), 
LZer88857 = zero_padding1D_layer(Mul27893, 47, 0, Zer88857), 
LCon20327 = concatenate_layer([Zer88857,[[[0.7097, 0.338, 0.5982], [0.7737, 0.5723, 0.4629], [0.0312, 0.3848, 0.9004], [0.4208, 0.4874, 0.742], [0.2252, 0.6046, 0.8232], [0.0094, 0.8065, 0.6591], [0.5549, 0.0203, 0.2671], [0.6302, 0.4548, 0.4075], [0.6547, 0.9827, 0.742], [0.5566, 0.1196, 0.6655], [0.8647, 0.355, 0.7719], [0.561, 0.8802, 0.1322], [0.1727, 0.5921, 0.4769], [0.8893, 0.3529, 0.4828], [0.7556, 0.9047, 0.209], [0.6664, 0.9898, 0.0654], [0.6209, 0.1202, 0.7165], [0.824, 0.6615, 0.9661], [0.6781, 0.5095, 0.8228], [0.5253, 0.327, 0.831], [0.2694, 0.1361, 0.837], [0.8037, 0.7506, 0.4566], [0.8211, 0.0008, 0.9496], [0.1575, 0.2468, 0.9887], [0.7298, 0.8833, 0.3609], [0.038, 0.9505, 0.111], [0.7884, 0.7185, 0.2667], [0.064, 0.3536, 0.7872], [0.603, 0.1588, 0.5872], [0.8529, 0.7958, 0.5494], [0.3294, 0.6665, 0.2373], [0.217, 0.3147, 0.5226], [0.2193, 0.7049, 0.1367], [0.1852, 0.0797, 0.0403], [0.5268, 0.9519, 0.1784], [0.6017, 0.456, 0.956], [0.1975, 0.6937, 0.1679], [0.5754, 0.2501, 0.3733], [0.8886, 0.8612, 0.8073], [0.6317, 0.6197, 0.2315], [0.5094, 0.3866, 0.1223], [0.2835, 0.5137, 0.8592], [0.9223, 0.4704, 0.1486], [0.8229, 0.929, 0.5617], [0.2949, 0.8956, 0.0491], [0.2598, 0.0949, 0.5187], [0.9977, 0.0808, 0.3008], [0.5164, 0.3621, 0.6249]]]], 2, Con20327), 
LSub31822 = subtract_layer(Per84153,Con20327, Sub31822), 
LFla78905 = flatten_layer(Sub31822, Fla78905), 
LRes34860 = reshape_layer(Fla78905, [240, 1], Res34860), 
LAve88111 = average_pooling1D_layer(Res34860, 54, Ave88111), 
LSim30044 = simple_rnn_layer(Ave88111,[[6, 10, 4]],[[6, 3, 9], [10, 3, 10], [5, 7, 8]],[7, 10, 5], Sim30044), 
exec_layers([LZer17403,LRes23827,LRes56128,LPer84153,LMul27893,LZer88857,LCon20327,LSub31822,LFla78905,LRes34860,LAve88111,LSim30044],["Zer17403","Res23827","Res56128","Per84153","Mul27893","Zer88857","Con20327","Sub31822","Fla78905","Res34860","Ave88111","Sim30044"],Sim30044,"Sim30044")

Actual (Unparsed): [[1.0000000, 1.0000000, 1.0000000]]

Expected (Unparsed): [[1.0,1.0,1.0]]

Actual:   [[1, 1, 1]]

Expected: [[1, 1, 1]]