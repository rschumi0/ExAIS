import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave11613 = tf.keras.layers.Input(shape=([1, 2]))
in1Ave11613 = tf.keras.layers.Input(shape=([1, 2]))
in0Con57938 = tf.keras.layers.Input(shape=([2, 4, 4, 3]))
in0Con24481 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))

Ave11613 = keras.layers.Average(name = 'Ave11613', )([in0Ave11613,in1Ave11613])
Res5040 = keras.layers.Reshape((1, 2, 1), name = 'Res5040', )(Ave11613)
Res5179 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res5179', )(Res5040)
Zer29959 = keras.layers.ZeroPadding3D(padding=((1, 0), (2, 0), (3, 0)), name = 'Zer29959', )(Res5179)
Con57938 = keras.layers.Concatenate(axis=4, name = 'Con57938', )([Zer29959,in0Con57938])
Con24481 = keras.layers.Conv3DTranspose(4, (1, 1, 2),strides=(1, 1, 1), padding='same', name = 'Con24481', )(in0Con24481)
Up_30435 = keras.layers.UpSampling3D(size=(2, 2, 2), name = 'Up_30435', )(Con24481)
Max74978 = keras.layers.Maximum(name = 'Max74978', )([Con57938,Up_30435])
model = tf.keras.models.Model(inputs=[in0Ave11613,in1Ave11613,in0Con57938,in0Con24481], outputs=Max74978)
w = model.get_layer('Con24481').get_weights() 
w[0] = np.array([[[[[0.5784], [0.7127], [0.3728], [0.8248]], [[0.2628], [0.7707], [0.7266], [0.387]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con24481').set_weights(w) 
in0Ave11613 = tf.constant([[[0.9872, 0.049]]])
in1Ave11613 = tf.constant([[[0.1139, 0.7903]]])
in0Con57938 = tf.constant([[[[[0.0334, 0.1621, 0.3335], [0.8023, 0.2148, 0.1465], [0.515, 0.9396, 0.1429], [0.0424, 0.7588, 0.406]], [[0.0968, 0.0163, 0.7987], [0.4978, 0.7556, 0.2528], [0.3451, 0.0543, 0.6464], [0.7982, 0.0063, 0.4318]], [[0.037, 0.8151, 0.8185], [0.7543, 0.3634, 0.6152], [0.1292, 0.6133, 0.9116], [0.0721, 0.9715, 0.9991]], [[0.8785, 0.2668, 0.7374], [0.4021, 0.1252, 0.5174], [0.9134, 0.6983, 0.9072], [0.2577, 0.8794, 0.6484]]], [[[0.6151, 0.5872, 0.2836], [0.5809, 0.0923, 0.6975], [0.3079, 0.1057, 0.4112], [0.7932, 0.217, 0.5095]], [[0.0809, 0.5747, 0.9417], [0.8203, 0.5391, 0.8261], [0.0932, 0.3993, 0.435], [0.1594, 0.724, 0.3146]], [[0.6498, 0.5088, 0.3567], [0.683, 0.2225, 0.538], [0.2884, 0.6307, 0.3466], [0.7264, 0.9426, 0.5114]], [[0.3874, 0.5346, 0.0906], [0.5501, 0.4344, 0.7143], [0.0924, 0.1334, 0.2445], [0.5226, 0.9175, 0.5554]]]]])
in0Con24481 = tf.constant([[[[[0.4862], [0.4382]], [[0.1846], [0.8772]]]]])
print (np.array2string(model.predict([in0Ave11613,in1Ave11613,in0Con57938,in0Con24481],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max74978.png')

LAve11613 = average_layer([[[[0.9872, 0.049]]], [[[0.1139, 0.7903]]]], Ave11613), 
LRes5040 = reshape_layer(Ave11613, [1, 2, 1], Res5040), 
LRes5179 = reshape_layer(Res5040, [1, 2, 1, 1], Res5179), 
LZer29959 = zero_padding3D_layer(Res5179, 1, 0, 2, 0, 3, 0, Zer29959), 
LCon57938 = concatenate_layer([Zer29959,[[[[[0.0334, 0.1621, 0.3335], [0.8023, 0.2148, 0.1465], [0.515, 0.9396, 0.1429], [0.0424, 0.7588, 0.406]], [[0.0968, 0.0163, 0.7987], [0.4978, 0.7556, 0.2528], [0.3451, 0.0543, 0.6464], [0.7982, 0.0063, 0.4318]], [[0.037, 0.8151, 0.8185], [0.7543, 0.3634, 0.6152], [0.1292, 0.6133, 0.9116], [0.0721, 0.9715, 0.9991]], [[0.8785, 0.2668, 0.7374], [0.4021, 0.1252, 0.5174], [0.9134, 0.6983, 0.9072], [0.2577, 0.8794, 0.6484]]], [[[0.6151, 0.5872, 0.2836], [0.5809, 0.0923, 0.6975], [0.3079, 0.1057, 0.4112], [0.7932, 0.217, 0.5095]], [[0.0809, 0.5747, 0.9417], [0.8203, 0.5391, 0.8261], [0.0932, 0.3993, 0.435], [0.1594, 0.724, 0.3146]], [[0.6498, 0.5088, 0.3567], [0.683, 0.2225, 0.538], [0.2884, 0.6307, 0.3466], [0.7264, 0.9426, 0.5114]], [[0.3874, 0.5346, 0.0906], [0.5501, 0.4344, 0.7143], [0.0924, 0.1334, 0.2445], [0.5226, 0.9175, 0.5554]]]]]], 4, Con57938), 
LCon24481 = conv3D_transpose_layer([[[[[0.4862], [0.4382]], [[0.1846], [0.8772]]]]], 1, 1, 2,[[[[[0.5784], [0.7127], [0.3728], [0.8248]], [[0.2628], [0.7707], [0.7266], [0.387]]]]],[0, 0, 0, 0], 1, 1, 1, true, Con24481), 
LUp_30435 = up_sampling3D_layer(Con24481, 2, 2, 2, Up_30435), 
LMax74978 = maximum_layer([Con57938,Up_30435], Max74978), 
exec_layers([LAve11613,LRes5040,LRes5179,LZer29959,LCon57938,LCon24481,LUp_30435,LMax74978],["Ave11613","Res5040","Res5179","Zer29959","Con57938","Con24481","Up_30435","Max74978"],Max74978,"Max74978")

Actual (Unparsed): [[[[[0.2812181, 0.3465147, 0.1812554, 0.4010178], [0.2812181, 0.8023000, 0.2148000, 0.4010178], [0.3812282, 0.6870195, 0.9396000, 0.5495868], [0.3812282, 0.6870195, 0.7588000, 0.5495868]], [[0.2812181, 0.3465147, 0.1812554, 0.7987000], [0.2812181, 0.4978000, 0.7556000, 0.4010178], [0.3812282, 0.6870195, 0.5166339, 0.6464000], [0.3812282, 0.7982000, 0.5166339, 0.5495868]], [[0.1067726, 0.1315644, 0.8151000, 0.8185000], [0.1067726, 0.7543000, 0.3634000, 0.6152000], [0.5558854, 0.7674517, 0.6133000, 0.9116000], [0.5558854, 0.7674517, 0.9715000, 0.9991000]], [[0.1067726, 0.8785000, 0.2668000, 0.7374000], [0.1067726, 0.4021000, 0.1252000, 0.5174000], [0.5558854, 0.9134000, 0.6983000, 0.9072000], [0.5558854, 0.7674517, 0.8794000, 0.7949548]]], [[[0.2812181, 0.6151000, 0.5872000, 0.4010178], [0.2812181, 0.5809000, 0.1812554, 0.6975000], [0.3812282, 0.6870195, 0.5166339, 0.5495868], [0.3812282, 0.7932000, 0.5166339, 0.5495868]], [[0.2812181, 0.3465147, 0.5747000, 0.9417000], [0.2812181, 0.8203000, 0.5391000, 0.8261000], [0.3812282, 0.6870195, 0.5166339, 0.5495868], [0.3812282, 0.6870195, 0.7240000, 0.5495868]], [[0.1067726, 0.6498000, 0.5088000, 0.3567000], [0.1067726, 0.6830000, 0.2225000, 0.5380000], [0.5558854, 0.7674517, 0.6307000, 0.7949548], [0.5558854, 0.7674517, 0.9426000, 0.7949548]], [[0.1067726, 0.3874000, 0.5346000, 0.1522581], [0.1067726, 0.5501000, 0.4344000, 0.7143000], [0.5558854, 0.7674517, 0.4611505, 0.7949548], [0.5558854, 0.7674517, 0.9175000, 0.7949548]]]]]

Expected (Unparsed): [[[[[0.28121808000000004,0.34651474,0.18125536,0.40101776],[0.28121808000000004,0.8023,0.2148,0.40101776],[0.38122824,0.68701948,0.9396,0.54958676],[0.38122824,0.68701948,0.7588,0.54958676]],[[0.28121808000000004,0.34651474,0.18125536,0.7987],[0.28121808000000004,0.4978,0.7556,0.40101776],[0.38122824,0.68701948,0.5166338800000001,0.6464],[0.38122824,0.7982,0.5166338800000001,0.54958676]],[[0.10677264,0.13156442,0.8151,0.8185],[0.10677264,0.7543,0.3634,0.6152],[0.55588536,0.76745166,0.6133,0.9116],[0.55588536,0.76745166,0.9715,0.9991]],[[0.10677264,0.8785,0.2668,0.7374],[0.10677264,0.4021,0.1252,0.5174],[0.55588536,0.9134,0.6983,0.9072],[0.55588536,0.76745166,0.8794,0.7949547599999999]]],[[[0.28121808000000004,0.6151,0.5872,0.40101776],[0.28121808000000004,0.5809,0.18125536,0.6975],[0.38122824,0.68701948,0.5166338800000001,0.54958676],[0.38122824,0.7932,0.5166338800000001,0.54958676]],[[0.28121808000000004,0.34651474,0.5747,0.9417],[0.28121808000000004,0.8203,0.5391,0.8261],[0.38122824,0.68701948,0.5166338800000001,0.54958676],[0.38122824,0.68701948,0.724,0.54958676]],[[0.10677264,0.6498,0.5088,0.3567],[0.10677264,0.683,0.2225,0.538],[0.55588536,0.76745166,0.6307,0.7949547599999999],[0.55588536,0.76745166,0.9426,0.7949547599999999]],[[0.10677264,0.3874,0.5346,0.15225808],[0.10677264,0.5501,0.4344,0.7143],[0.55588536,0.76745166,0.46115052,0.7949547599999999],[0.55588536,0.76745166,0.9175,0.7949547599999999]]]]]

Actual:   [[[[[0.2813, 0.3466, 0.1813, 0.4011], [0.2813, 0.8023, 0.2148, 0.4011], [0.3813, 0.6871, 0.9396, 0.5496], [0.3813, 0.6871, 0.7588, 0.5496]], [[0.2813, 0.3466, 0.1813, 0.7987], [0.2813, 0.4978, 0.7556, 0.4011], [0.3813, 0.6871, 0.5167, 0.6464], [0.3813, 0.7982, 0.5167, 0.5496]], [[0.1068, 0.1316, 0.8151, 0.8185], [0.1068, 0.7543, 0.3634, 0.6152], [0.5559, 0.7675, 0.6133, 0.9116], [0.5559, 0.7675, 0.9715, 0.9991]], [[0.1068, 0.8785, 0.2668, 0.7374], [0.1068, 0.4021, 0.1252, 0.5174], [0.5559, 0.9134, 0.6983, 0.9072], [0.5559, 0.7675, 0.8794, 0.795]]], [[[0.2813, 0.6151, 0.5872, 0.4011], [0.2813, 0.5809, 0.1813, 0.6975], [0.3813, 0.6871, 0.5167, 0.5496], [0.3813, 0.7932, 0.5167, 0.5496]], [[0.2813, 0.3466, 0.5747, 0.9417], [0.2813, 0.8203, 0.5391, 0.8261], [0.3813, 0.6871, 0.5167, 0.5496], [0.3813, 0.6871, 0.724, 0.5496]], [[0.1068, 0.6498, 0.5088, 0.3567], [0.1068, 0.683, 0.2225, 0.538], [0.5559, 0.7675, 0.6307, 0.795], [0.5559, 0.7675, 0.9426, 0.795]], [[0.1068, 0.3874, 0.5346, 0.1523], [0.1068, 0.5501, 0.4344, 0.7143], [0.5559, 0.7675, 0.4612, 0.795], [0.5559, 0.7675, 0.9175, 0.795]]]]]

Expected: [[[[[0.2813, 0.3466, 0.1813, 0.4011], [0.2813, 0.8023, 0.2148, 0.4011], [0.3813, 0.6871, 0.9396, 0.5496], [0.3813, 0.6871, 0.7588, 0.5496]], [[0.2813, 0.3466, 0.1813, 0.7987], [0.2813, 0.4978, 0.7556, 0.4011], [0.3813, 0.6871, 0.5167, 0.6464], [0.3813, 0.7982, 0.5167, 0.5496]], [[0.1068, 0.1316, 0.8151, 0.8185], [0.1068, 0.7543, 0.3634, 0.6152], [0.5559, 0.7675, 0.6133, 0.9116], [0.5559, 0.7675, 0.9715, 0.9991]], [[0.1068, 0.8785, 0.2668, 0.7374], [0.1068, 0.4021, 0.1252, 0.5174], [0.5559, 0.9134, 0.6983, 0.9072], [0.5559, 0.7675, 0.8794, 0.795]]], [[[0.2813, 0.6151, 0.5872, 0.4011], [0.2813, 0.5809, 0.1813, 0.6975], [0.3813, 0.6871, 0.5167, 0.5496], [0.3813, 0.7932, 0.5167, 0.5496]], [[0.2813, 0.3466, 0.5747, 0.9417], [0.2813, 0.8203, 0.5391, 0.8261], [0.3813, 0.6871, 0.5167, 0.5496], [0.3813, 0.6871, 0.724, 0.5496]], [[0.1068, 0.6498, 0.5088, 0.3567], [0.1068, 0.683, 0.2225, 0.538], [0.5559, 0.7675, 0.6307, 0.795], [0.5559, 0.7675, 0.9426, 0.795]], [[0.1068, 0.3874, 0.5346, 0.1523], [0.1068, 0.5501, 0.4344, 0.7143], [0.5559, 0.7675, 0.4612, 0.795], [0.5559, 0.7675, 0.9175, 0.795]]]]]