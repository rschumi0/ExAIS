import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub41438 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in1Sub41438 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in0Sof37364 = tf.keras.layers.Input(shape=([1, 2]))
in0Con96649 = tf.keras.layers.Input(shape=([3, 25]))
in0Sim23878 = tf.keras.layers.Input(shape=([2, 3]))
in0Con6064 = tf.keras.layers.Input(shape=([159]))

Sub41438 = keras.layers.Subtract(name = 'Sub41438', )([in0Sub41438,in1Sub41438])
Res62348 = keras.layers.Reshape((3, 3, 9), name = 'Res62348', )(Sub41438)
Res20457 = keras.layers.Reshape((3, 27), name = 'Res20457', )(Res62348)
Sof37364 = keras.layers.Softmax(axis=1, name = 'Sof37364', input_shape=(1, 2))(in0Sof37364)
Sof48679 = keras.layers.Softmax(axis=1, name = 'Sof48679', )(Sof37364)
Zer98958 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer98958', )(Sof48679)
Con96649 = keras.layers.Concatenate(axis=2, name = 'Con96649', )([Zer98958,in0Con96649])
Mul55167 = keras.layers.Multiply(name = 'Mul55167', )([Res20457,Con96649])
Up_7370 = keras.layers.UpSampling1D(size=(2), name = 'Up_7370', )(Mul55167)
Fla20708 = keras.layers.Flatten(name = 'Fla20708', )(Up_7370)
Sim23878 = keras.layers.SimpleRNN(3,name = 'Sim23878', )(in0Sim23878)
Con6064 = keras.layers.Concatenate(axis=1, name = 'Con6064', )([Sim23878,in0Con6064])
Max43181 = keras.layers.Maximum(name = 'Max43181', )([Fla20708,Con6064])
model = tf.keras.models.Model(inputs=[in0Sub41438,in1Sub41438,in0Sof37364,in0Con96649,in0Sim23878,in0Con6064], outputs=Max43181)
w = model.get_layer('Sim23878').get_weights() 
w[0] = np.array([[10, 6, 6], [10, 3, 4], [8, 10, 8]])
w[1] = np.array([[2, 9, 7], [6, 1, 9], [3, 8, 3]])
w[2] = np.array([7, 9, 9])
model.get_layer('Sim23878').set_weights(w) 
in0Sub41438 = tf.constant([[[[[0.8888, 0.574, 0.201], [0.8422, 0.3245, 0.0603], [0.7707, 0.4329, 0.0079]], [[0.9687, 0.7019, 0.789], [0.8283, 0.1661, 0.3708], [0.3462, 0.2557, 0.0391]], [[0.0627, 0.887, 0.3516], [0.7128, 0.1743, 0.5054], [0.2643, 0.9106, 0.2821]]], [[[0.1008, 0.4118, 0.8182], [0.0997, 0.7856, 0.1347], [0.6179, 0.9377, 0.5387]], [[0.4649, 0.1964, 0.6582], [0.4127, 0.7917, 0.9002], [0.2736, 0.6144, 0.6358]], [[0.1074, 0.2748, 0.815], [0.4415, 0.8215, 0.4984], [0.1208, 0.2857, 0.4474]]], [[[0.8385, 0.2341, 0.6657], [0.4105, 0.3942, 0.4725], [0.0793, 0.2975, 0.7063]], [[0.4742, 0.9371, 0.759], [0.5817, 0.6191, 0.4585], [0.4956, 0.6297, 0.4181]], [[0.5932, 0.2719, 0.0411], [0.3843, 0.6858, 0.049], [0.3311, 0.19, 0.551]]]]])
in1Sub41438 = tf.constant([[[[[0.0088, 0.7352, 0.2335], [0.8658, 0.4539, 0.6985], [0.0924, 0.3002, 0.3105]], [[0.4325, 0.7256, 0.6052], [0.2379, 0.8241, 0.6978], [0.9581, 0.1495, 0.0793]], [[0.1513, 0.222, 0.2925], [0.3583, 0.7222, 0.4228], [0.8976, 0.3159, 0.1119]]], [[[0.664, 0.8109, 0.9012], [0.5608, 0.9094, 0.4516], [0.9871, 0.0443, 0.5456]], [[0.899, 0.4057, 0.6147], [0.4031, 0.9081, 0.7429], [0.9435, 0.9649, 0.1747]], [[0.8135, 0.7863, 0.8172], [0.2291, 0.0787, 0.7881], [0.0102, 0.9226, 0.3978]]], [[[0.7732, 0.8878, 0.5901], [0.4103, 0.4235, 0.1153], [0.6207, 0.5338, 0.0403]], [[0.0932, 0.3511, 0.0339], [0.9036, 0.6756, 0.9043], [0.8716, 0.5969, 0.1314]], [[0.8438, 0.0673, 0.549], [0.5838, 0.2854, 0.1329], [0.9598, 0.7414, 0.4139]]]]])
in0Sof37364 = tf.constant([[[0.7199, 0.2219]]])
in0Con96649 = tf.constant([[[0.8441, 0.9689, 0.5135, 0.8205, 0.4137, 0.0078, 0.1416, 0.3898, 0.6836, 0.3745, 0.5242, 0.438, 0.9196, 0.6779, 0.7915, 0.1289, 0.7088, 0.8149, 0.1977, 0.4013, 0.4111, 0.5056, 0.1452, 0.4195, 0.6077], [0.1421, 0.8949, 0.192, 0.1486, 0.8935, 0.048, 0.4625, 0.0016, 0.7807, 0.8779, 0.7609, 0.742, 0.4758, 0.1175, 0.0647, 0.1836, 0.9175, 0.8589, 0.8653, 0.351, 0.438, 0.8135, 0.561, 0.7188, 0.9916], [0.2951, 0.0052, 0.4039, 0.2488, 0.9418, 0.7263, 0.7838, 0.7702, 0.3685, 0.8057, 0.8402, 0.2143, 0.6586, 0.6526, 0.3747, 0.5464, 0.8434, 0.9435, 0.1297, 0.515, 0.2921, 0.8121, 0.7635, 0.2425, 0.2438]]])
in0Sim23878 = tf.constant([[[1, 9, 2], [2, 2, 5]]])
in0Con6064 = tf.constant([[0.9035, 0.7901, 0.4222, 0.3358, 0.0252, 0.3328, 0.3383, 0.9267, 0.072, 0.7408, 0.1978, 0.9688, 0.8866, 0.7335, 0.7968, 0.4459, 0.0586, 0.8671, 0.2244, 0.2818, 0.5469, 0.8527, 0.9035, 0.8441, 0.1624, 0.0851, 0.637, 0.2182, 0.8148, 0.9441, 0.7796, 0.4689, 0.6484, 0.5936, 0.0745, 0.5969, 0.058, 0.0681, 0.2679, 0.7936, 0.1115, 0.4141, 0.3475, 0.8955, 0.0821, 0.5286, 0.1379, 0.6547, 0.6419, 0.1277, 0.0295, 0.5476, 0.759, 0.9686, 0.8187, 0.3721, 0.499, 0.0457, 0.9921, 0.8052, 0.7362, 0.9893, 0.3028, 0.4283, 0.2511, 0.3044, 0.1519, 0.4663, 0.808, 0.4045, 0.117, 0.6321, 0.5876, 0.621, 0.9501, 0.019, 0.7833, 0.4951, 0.5028, 0.9434, 0.261, 0.6994, 0.3343, 0.0026, 0.9287, 0.8753, 0.2039, 0.3836, 0.8658, 0.5233, 0.2607, 0.6367, 0.322, 0.8358, 0.5013, 0.7081, 0.4108, 0.0267, 0.988, 0.0186, 0.6954, 0.2751, 0.395, 0.7669, 0.8922, 0.878, 0.6809, 0.4411, 0.6029, 0.584, 0.0729, 0.7287, 0.3253, 0.3674, 0.0942, 0.629, 0.9924, 0.0952, 0.0637, 0.594, 0.9399, 0.6354, 0.3557, 0.9481, 0.5143, 0.9631, 0.718, 0.6739, 0.4981, 0.7305, 0.1185, 0.8852, 0.1505, 0.5838, 0.9116, 0.9597, 0.9418, 0.2348, 0.6018, 0.3507, 0.9933, 0.9234, 0.1156, 0.5586, 0.8245, 0.4457, 0.2893, 0.6047, 0.2584, 0.3624, 0.2286, 0.6228, 0.2374, 0.3514, 0.3053, 0.8576, 0.8628, 0.9246, 0.8143]])
print (np.array2string(model.predict([in0Sub41438,in1Sub41438,in0Sof37364,in0Con96649,in0Sim23878,in0Con6064],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max43181.png')

LSub41438 = subtract_layer([[[[[0.8888, 0.574, 0.201], [0.8422, 0.3245, 0.0603], [0.7707, 0.4329, 0.0079]], [[0.9687, 0.7019, 0.789], [0.8283, 0.1661, 0.3708], [0.3462, 0.2557, 0.0391]], [[0.0627, 0.887, 0.3516], [0.7128, 0.1743, 0.5054], [0.2643, 0.9106, 0.2821]]], [[[0.1008, 0.4118, 0.8182], [0.0997, 0.7856, 0.1347], [0.6179, 0.9377, 0.5387]], [[0.4649, 0.1964, 0.6582], [0.4127, 0.7917, 0.9002], [0.2736, 0.6144, 0.6358]], [[0.1074, 0.2748, 0.815], [0.4415, 0.8215, 0.4984], [0.1208, 0.2857, 0.4474]]], [[[0.8385, 0.2341, 0.6657], [0.4105, 0.3942, 0.4725], [0.0793, 0.2975, 0.7063]], [[0.4742, 0.9371, 0.759], [0.5817, 0.6191, 0.4585], [0.4956, 0.6297, 0.4181]], [[0.5932, 0.2719, 0.0411], [0.3843, 0.6858, 0.049], [0.3311, 0.19, 0.551]]]]], [[[[[0.0088, 0.7352, 0.2335], [0.8658, 0.4539, 0.6985], [0.0924, 0.3002, 0.3105]], [[0.4325, 0.7256, 0.6052], [0.2379, 0.8241, 0.6978], [0.9581, 0.1495, 0.0793]], [[0.1513, 0.222, 0.2925], [0.3583, 0.7222, 0.4228], [0.8976, 0.3159, 0.1119]]], [[[0.664, 0.8109, 0.9012], [0.5608, 0.9094, 0.4516], [0.9871, 0.0443, 0.5456]], [[0.899, 0.4057, 0.6147], [0.4031, 0.9081, 0.7429], [0.9435, 0.9649, 0.1747]], [[0.8135, 0.7863, 0.8172], [0.2291, 0.0787, 0.7881], [0.0102, 0.9226, 0.3978]]], [[[0.7732, 0.8878, 0.5901], [0.4103, 0.4235, 0.1153], [0.6207, 0.5338, 0.0403]], [[0.0932, 0.3511, 0.0339], [0.9036, 0.6756, 0.9043], [0.8716, 0.5969, 0.1314]], [[0.8438, 0.0673, 0.549], [0.5838, 0.2854, 0.1329], [0.9598, 0.7414, 0.4139]]]]], Sub41438), 
LRes62348 = reshape_layer(Sub41438, [3, 3, 9], Res62348), 
LRes20457 = reshape_layer(Res62348, [3, 27], Res20457), 
LSof37364 = softmax_layer([[[0.7199, 0.2219]]], 1, Sof37364), 
LSof48679 = softmax_layer(Sof37364, 1, Sof48679), 
LZer98958 = zero_padding1D_layer(Sof48679, 2, 0, Zer98958), 
LCon96649 = concatenate_layer([Zer98958,[[[0.8441, 0.9689, 0.5135, 0.8205, 0.4137, 0.0078, 0.1416, 0.3898, 0.6836, 0.3745, 0.5242, 0.438, 0.9196, 0.6779, 0.7915, 0.1289, 0.7088, 0.8149, 0.1977, 0.4013, 0.4111, 0.5056, 0.1452, 0.4195, 0.6077], [0.1421, 0.8949, 0.192, 0.1486, 0.8935, 0.048, 0.4625, 0.0016, 0.7807, 0.8779, 0.7609, 0.742, 0.4758, 0.1175, 0.0647, 0.1836, 0.9175, 0.8589, 0.8653, 0.351, 0.438, 0.8135, 0.561, 0.7188, 0.9916], [0.2951, 0.0052, 0.4039, 0.2488, 0.9418, 0.7263, 0.7838, 0.7702, 0.3685, 0.8057, 0.8402, 0.2143, 0.6586, 0.6526, 0.3747, 0.5464, 0.8434, 0.9435, 0.1297, 0.515, 0.2921, 0.8121, 0.7635, 0.2425, 0.2438]]]], 2, Con96649), 
LMul55167 = multiply_layer([Res20457,Con96649], Mul55167), 
LUp_7370 = up_sampling1D_layer(Mul55167, 2, Up_7370), 
LFla20708 = flatten_layer(Up_7370, Fla20708), 
LSim23878 = simple_rnn_layer([[[1, 9, 2], [2, 2, 5]]],[[10, 6, 6], [10, 3, 4], [8, 10, 8]],[[2, 9, 7], [6, 1, 9], [3, 8, 3]],[7, 9, 9], Sim23878), 
LCon6064 = concatenate_layer([Sim23878,[[0.9035, 0.7901, 0.4222, 0.3358, 0.0252, 0.3328, 0.3383, 0.9267, 0.072, 0.7408, 0.1978, 0.9688, 0.8866, 0.7335, 0.7968, 0.4459, 0.0586, 0.8671, 0.2244, 0.2818, 0.5469, 0.8527, 0.9035, 0.8441, 0.1624, 0.0851, 0.637, 0.2182, 0.8148, 0.9441, 0.7796, 0.4689, 0.6484, 0.5936, 0.0745, 0.5969, 0.058, 0.0681, 0.2679, 0.7936, 0.1115, 0.4141, 0.3475, 0.8955, 0.0821, 0.5286, 0.1379, 0.6547, 0.6419, 0.1277, 0.0295, 0.5476, 0.759, 0.9686, 0.8187, 0.3721, 0.499, 0.0457, 0.9921, 0.8052, 0.7362, 0.9893, 0.3028, 0.4283, 0.2511, 0.3044, 0.1519, 0.4663, 0.808, 0.4045, 0.117, 0.6321, 0.5876, 0.621, 0.9501, 0.019, 0.7833, 0.4951, 0.5028, 0.9434, 0.261, 0.6994, 0.3343, 0.0026, 0.9287, 0.8753, 0.2039, 0.3836, 0.8658, 0.5233, 0.2607, 0.6367, 0.322, 0.8358, 0.5013, 0.7081, 0.4108, 0.0267, 0.988, 0.0186, 0.6954, 0.2751, 0.395, 0.7669, 0.8922, 0.878, 0.6809, 0.4411, 0.6029, 0.584, 0.0729, 0.7287, 0.3253, 0.3674, 0.0942, 0.629, 0.9924, 0.0952, 0.0637, 0.594, 0.9399, 0.6354, 0.3557, 0.9481, 0.5143, 0.9631, 0.718, 0.6739, 0.4981, 0.7305, 0.1185, 0.8852, 0.1505, 0.5838, 0.9116, 0.9597, 0.9418, 0.2348, 0.6018, 0.3507, 0.9933, 0.9234, 0.1156, 0.5586, 0.8245, 0.4457, 0.2893, 0.6047, 0.2584, 0.3624, 0.2286, 0.6228, 0.2374, 0.3514, 0.3053, 0.8576, 0.8628, 0.9246, 0.8143]]], 1, Con6064), 
LMax43181 = maximum_layer([Fla20708,Con6064], Max43181), 
exec_layers([LSub41438,LRes62348,LRes20457,LSof37364,LSof48679,LZer98958,LCon96649,LMul55167,LUp_7370,LFla20708,LSim23878,LCon6064,LMax43181],["Sub41438","Res62348","Res20457","Sof37364","Sof48679","Zer98958","Con96649","Mul55167","Up_7370","Fla20708","Sim23878","Con6064","Max43181"],Max43181,"Max43181")

Actual (Unparsed): [[1.0000000, 1.0000000, 1.0000000, 0.9035000, 0.7901000, 0.4222000, 0.3358000, 0.0252000, 0.3328000, 0.3383000, 0.9267000, 0.0720000, 0.7408000, 0.1978000, 0.9688000, 0.8866000, 0.7335000, 0.7968000, 0.4459000, 0.5419085, 0.8671000, 0.2244000, 0.2818000, 0.5469000, 0.8527000, 0.9035000, 0.8441000, 0.1624000, 0.0851000, 0.6370000, 0.2182000, 0.8148000, 0.9441000, 0.7796000, 0.4689000, 0.6484000, 0.5936000, 0.0745000, 0.5969000, 0.3094877, 0.0681000, 0.2679000, 0.7936000, 0.1115000, 0.4141000, 0.3475000, 0.8955000, 0.0821000, 0.5286000, 0.1379000, 0.6547000, 0.6419000, 0.2494766, 0.1034305, 0.5476000, 0.7590000, 0.9686000, 0.8187000, 0.3721000, 0.4990000, 0.0457000, 0.9921000, 0.8052000, 0.7362000, 0.9893000, 0.3028000, 0.4283000, 0.2511000, 0.3044000, 0.1519000, 0.4663000, 0.8080000, 0.4045000, 0.1170000, 0.6321000, 0.5876000, 0.6210000, 0.9501000, 0.0620466, 0.7833000, 0.4951000, 0.5028000, 0.9434000, 0.2610000, 0.6994000, 0.3343000, 0.0026000, 0.9287000, 0.8753000, 0.2039000, 0.3836000, 0.8658000, 0.5233000, 0.2607000, 0.6367000, 0.3220000, 0.8358000, 0.5013000, 0.7081000, 0.4108000, 0.0267000, 0.9880000, 0.0745524, 0.6954000, 0.2751000, 0.3950000, 0.7669000, 0.8922000, 0.8780000, 0.6809000, 0.4411000, 0.6029000, 0.5840000, 0.0888714, 0.7287000, 0.3253000, 0.5220108, 0.2934462, 0.6290000, 0.9924000, 0.0952000, 0.0637000, 0.5940000, 0.9399000, 0.6354000, 0.3557000, 0.9481000, 0.5143000, 0.9631000, 0.7180000, 0.6739000, 0.4981000, 0.7305000, 0.1185000, 0.8852000, 0.1505000, 0.5838000, 0.9116000, 0.9597000, 0.9418000, 0.2348000, 0.6018000, 0.3507000, 0.9933000, 0.9234000, 0.2159410, 0.5842131, 0.8245000, 0.4457000, 0.2893000, 0.6047000, 0.2584000, 0.3624000, 0.2286000, 0.6228000, 0.2374000, 0.3514000, 0.3053000, 0.8576000, 0.8628000, 0.9246000, 0.8143000]]

Expected (Unparsed): [[1.0,1.0,1.0,0.9035,0.7901,0.4222,0.3358,0.0252,0.3328,0.3383,0.9267,0.072,0.7408,0.1978,0.9688,0.8866,0.7335,0.7968,0.4459,0.5419085,0.8671,0.2244,0.2818,0.5469,0.8527,0.9035,0.8441,0.1624,0.0851,0.637,0.2182,0.8148,0.9441,0.7796,0.4689,0.6484,0.5936,0.0745,0.5969,0.30948768000000004,0.0681,0.2679,0.7936,0.1115,0.4141,0.3475,0.8955,0.0821,0.5286,0.1379,0.6547,0.6419,0.24947665,0.10343054000000002,0.5476,0.759,0.9686,0.8187,0.3721,0.499,0.0457,0.9921,0.8052,0.7362,0.9893,0.3028,0.4283,0.2511,0.3044,0.1519,0.4663,0.808,0.4045,0.117,0.6321,0.5876,0.621,0.9501,0.06204660000000001,0.7833,0.4951,0.5028,0.9434,0.261,0.6994,0.3343,0.0026,0.9287,0.8753,0.2039,0.3836,0.8658,0.5233,0.2607,0.6367,0.322,0.8358,0.5013,0.7081,0.4108,0.0267,0.988,0.07455239999999999,0.6954,0.2751,0.395,0.7669,0.8922,0.878,0.6809,0.4411,0.6029,0.584,0.08887135999999998,0.7287,0.3253,0.5220108000000001,0.2934462,0.629,0.9924,0.0952,0.0637,0.594,0.9399,0.6354,0.3557,0.9481,0.5143,0.9631,0.718,0.6739,0.4981,0.7305,0.1185,0.8852,0.1505,0.5838,0.9116,0.9597,0.9418,0.2348,0.6018,0.3507,0.9933,0.9234,0.21594100000000002,0.58421307,0.8245,0.4457,0.2893,0.6047,0.2584,0.3624,0.2286,0.6228,0.2374,0.3514,0.3053,0.8576,0.8628,0.9246,0.8143]]

Actual:   [[1, 1, 1, 0.9035, 0.7901, 0.4222, 0.3358, 0.0252, 0.3328, 0.3383, 0.9267, 0.072, 0.7408, 0.1978, 0.9688, 0.8866, 0.7335, 0.7968, 0.4459, 0.542, 0.8671, 0.2244, 0.2818, 0.5469, 0.8527, 0.9035, 0.8441, 0.1624, 0.0851, 0.637, 0.2182, 0.8148, 0.9441, 0.7796, 0.4689, 0.6484, 0.5936, 0.0745, 0.5969, 0.3095, 0.0681, 0.2679, 0.7936, 0.1115, 0.4141, 0.3475, 0.8955, 0.0821, 0.5286, 0.1379, 0.6547, 0.6419, 0.2495, 0.1035, 0.5476, 0.759, 0.9686, 0.8187, 0.3721, 0.499, 0.0457, 0.9921, 0.8052, 0.7362, 0.9893, 0.3028, 0.4283, 0.2511, 0.3044, 0.1519, 0.4663, 0.808, 0.4045, 0.117, 0.6321, 0.5876, 0.621, 0.9501, 0.0621, 0.7833, 0.4951, 0.5028, 0.9434, 0.261, 0.6994, 0.3343, 0.0026, 0.9287, 0.8753, 0.2039, 0.3836, 0.8658, 0.5233, 0.2607, 0.6367, 0.322, 0.8358, 0.5013, 0.7081, 0.4108, 0.0267, 0.988, 0.0746, 0.6954, 0.2751, 0.395, 0.7669, 0.8922, 0.878, 0.6809, 0.4411, 0.6029, 0.584, 0.0889, 0.7287, 0.3253, 0.5221, 0.2935, 0.629, 0.9924, 0.0952, 0.0637, 0.594, 0.9399, 0.6354, 0.3557, 0.9481, 0.5143, 0.9631, 0.718, 0.6739, 0.4981, 0.7305, 0.1185, 0.8852, 0.1505, 0.5838, 0.9116, 0.9597, 0.9418, 0.2348, 0.6018, 0.3507, 0.9933, 0.9234, 0.216, 0.5843, 0.8245, 0.4457, 0.2893, 0.6047, 0.2584, 0.3624, 0.2286, 0.6228, 0.2374, 0.3514, 0.3053, 0.8576, 0.8628, 0.9246, 0.8143]]

Expected: [[1, 1, 1, 0.9035, 0.7901, 0.4222, 0.3358, 0.0252, 0.3328, 0.3383, 0.9267, 0.072, 0.7408, 0.1978, 0.9688, 0.8866, 0.7335, 0.7968, 0.4459, 0.542, 0.8671, 0.2244, 0.2818, 0.5469, 0.8527, 0.9035, 0.8441, 0.1624, 0.0851, 0.637, 0.2182, 0.8148, 0.9441, 0.7796, 0.4689, 0.6484, 0.5936, 0.0745, 0.5969, 0.3095, 0.0681, 0.2679, 0.7936, 0.1115, 0.4141, 0.3475, 0.8955, 0.0821, 0.5286, 0.1379, 0.6547, 0.6419, 0.2495, 0.1035, 0.5476, 0.759, 0.9686, 0.8187, 0.3721, 0.499, 0.0457, 0.9921, 0.8052, 0.7362, 0.9893, 0.3028, 0.4283, 0.2511, 0.3044, 0.1519, 0.4663, 0.808, 0.4045, 0.117, 0.6321, 0.5876, 0.621, 0.9501, 0.0621, 0.7833, 0.4951, 0.5028, 0.9434, 0.261, 0.6994, 0.3343, 0.0026, 0.9287, 0.8753, 0.2039, 0.3836, 0.8658, 0.5233, 0.2607, 0.6367, 0.322, 0.8358, 0.5013, 0.7081, 0.4108, 0.0267, 0.988, 0.0746, 0.6954, 0.2751, 0.395, 0.7669, 0.8922, 0.878, 0.6809, 0.4411, 0.6029, 0.584, 0.0889, 0.7287, 0.3253, 0.5221, 0.2935, 0.629, 0.9924, 0.0952, 0.0637, 0.594, 0.9399, 0.6354, 0.3557, 0.9481, 0.5143, 0.9631, 0.718, 0.6739, 0.4981, 0.7305, 0.1185, 0.8852, 0.1505, 0.5838, 0.9116, 0.9597, 0.9418, 0.2348, 0.6018, 0.3507, 0.9933, 0.9234, 0.216, 0.5843, 0.8245, 0.4457, 0.2893, 0.6047, 0.2584, 0.3624, 0.2286, 0.6228, 0.2374, 0.3514, 0.3053, 0.8576, 0.8628, 0.9246, 0.8143]]