import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Lay39291 = tf.keras.layers.Input(shape=([1]))
in0Con18852 = tf.keras.layers.Input(shape=([3, 3, 8]))
in0Sub62142 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in1Sub62142 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in0Con51247 = tf.keras.layers.Input(shape=([2, 1]))
in0Con64405 = tf.keras.layers.Input(shape=([3, 3, 8]))

Lay39291 = keras.layers.LayerNormalization(axis=1, epsilon=2.8817990005262346, name = 'Lay39291', )(in0Lay39291)
Res57024 = keras.layers.Reshape((1, 1), name = 'Res57024', )(Lay39291)
Res99183 = keras.layers.Reshape((1, 1, 1), name = 'Res99183', )(Res57024)
Zer13711 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer13711', )(Res99183)
Con18852 = keras.layers.Concatenate(axis=3, name = 'Con18852', )([Zer13711,in0Con18852])
Sub62142 = keras.layers.Subtract(name = 'Sub62142', )([in0Sub62142,in1Sub62142])
Res92416 = keras.layers.Reshape((3, 3, 9), name = 'Res92416', )(Sub62142)
Con51247 = keras.layers.Conv1D(2, (2),strides=(1), padding='valid', dilation_rate=(1), name = 'Con51247', )(in0Con51247)
Res71103 = keras.layers.Reshape((1, 2, 1), name = 'Res71103', )(Con51247)
Max54756 = keras.layers.MaxPool2D(pool_size=(1, 2), name = 'Max54756', )(Res71103)
Zer26125 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer26125', )(Max54756)
Con64405 = keras.layers.Concatenate(axis=3, name = 'Con64405', )([Zer26125,in0Con64405])
Max27932 = keras.layers.Maximum(name = 'Max27932', )([Res92416,Con64405])
Min53938 = keras.layers.Minimum(name = 'Min53938', )([Con18852,Max27932])
model = tf.keras.models.Model(inputs=[in0Lay39291,in0Con18852,in0Sub62142,in1Sub62142,in0Con51247,in0Con64405], outputs=Min53938)
w = model.get_layer('Con51247').get_weights() 
w[0] = np.array([[[0.2622, 0.0082]], [[0.1336, 0.4473]]])
w[1] = np.array([0, 0])
model.get_layer('Con51247').set_weights(w) 
in0Lay39291 = tf.constant([[1.9699]])
in0Con18852 = tf.constant([[[[0.6547, 0.6287, 0.0292, 0.2556, 0.1134, 0.2085, 0.87, 0.1118], [0.3474, 0.1944, 0.9918, 0.6402, 0.5513, 0.8039, 0.3676, 0.849], [0.275, 0.2327, 0.8594, 0.1092, 0.2336, 0.7608, 0.4722, 0.223]], [[0.3433, 0.3629, 0.3441, 0.3516, 0.3694, 0.1362, 0.643, 0.6532], [0.0574, 0.9111, 0.4766, 0.1126, 0.2511, 0.8679, 0.5118, 0.5791], [0.3009, 0.8467, 0.2464, 0.472, 0.0107, 0.3083, 0.7807, 0.9622]], [[0.4813, 0.5812, 0.4953, 0.692, 0.4706, 0.1126, 0.2567, 0.258], [0.3086, 0.929, 0.6457, 0.748, 0.9814, 0.4103, 0.2311, 0.5967], [0.7294, 0.7813, 0.0953, 0.906, 0.3933, 0.432, 0.6608, 0.16]]]])
in0Sub62142 = tf.constant([[[[[0.0914, 0.8965, 0.3031], [0.6786, 0.1983, 0.2006], [0.3699, 0.3616, 0.3565]], [[0.6629, 0.7114, 0.5172], [0.3787, 0.5514, 0.2424], [0.1849, 0.9079, 0.2058]], [[0.8929, 0.2405, 0.6428], [0.795, 0.0268, 0.6504], [0.0484, 0.6045, 0.4801]]], [[[0.9812, 0.4817, 0.6695], [0.2049, 0.2315, 0.062], [0.4224, 0.11, 0.231]], [[0.6773, 0.778, 0.4526], [0.4324, 0.2332, 0.737], [0.054, 0.9142, 0.6235]], [[0.1619, 0.6882, 0.8049], [0.9287, 0.8471, 0.2216], [0.1429, 0.0339, 0.389]]], [[[0.4732, 0.393, 0.2001], [0.6457, 0.3055, 0.4561], [0.1156, 0.7701, 0.1578]], [[0.028, 0.6134, 0.8962], [0.09, 0.5907, 0.5438], [0.5673, 0.4179, 0.1519]], [[0.2634, 0.9007, 0.1894], [0.0884, 0.8177, 0.3067], [0.0762, 0.0942, 0.1789]]]]])
in1Sub62142 = tf.constant([[[[[0.298, 0.7382, 0.2862], [0.8295, 0.5594, 0.3534], [0.9775, 0.5769, 0.9811]], [[0.8021, 0.494, 0.7303], [0.8039, 0.9433, 0.679], [0.6724, 0.3702, 0.5279]], [[0.4083, 0.4227, 0.2328], [0.5561, 0.5215, 0.9996], [0.5316, 0.3044, 0.0627]]], [[[0.2638, 0.618, 0.8255], [0.6221, 0.4542, 0.8795], [0.4513, 0.8681, 0.8093]], [[0.5966, 0.7227, 0.0725], [0.5111, 0.45, 0.2073], [0.54, 0.6826, 0.9914]], [[0.873, 0.378, 0.3264], [0.9839, 0.0361, 0.9674], [0.8986, 0.0297, 0.419]]], [[[0.8296, 0.6795, 0.3086], [0.5205, 0.321, 0.2258], [0.5718, 0.3252, 0.7368]], [[0.9632, 0.756, 0.3634], [0.9529, 0.419, 0.7157], [0.2675, 0.695, 0.6786]], [[0.6055, 0.2655, 0.889], [0.4027, 0.3878, 0.5044], [0.3146, 0.1411, 0.7893]]]]])
in0Con51247 = tf.constant([[[0.6997], [0.9637]]])
in0Con64405 = tf.constant([[[[0.7904, 0.8326, 0.0392, 0.4591, 0.6967, 0.8922, 0.9531, 0.2857], [0.3142, 0.6095, 0.8627, 0.6384, 0.9523, 0.4587, 0.4855, 0.8984], [0.1897, 0.3157, 0.8351, 0.5539, 0.9128, 0.0359, 0.1021, 0.4096]], [[0.72, 0.5854, 0.9715, 0.6984, 0.067, 0.4801, 0.379, 0.7806], [0.6622, 0.8409, 0.7301, 0.1766, 0.788, 0.1974, 0.1645, 0.5274], [0.4165, 0.286, 0.5327, 0.6977, 0.2197, 0.4794, 0.3714, 0.6506]], [[0.8296, 0.155, 0.3134, 0.904, 0.9967, 0.2682, 0.0481, 0.3554], [0.6138, 0.6273, 0.1608, 0.0067, 0.9269, 0.8864, 0.9217, 0.6586], [0.6373, 0.0694, 0.3715, 0.952, 0.015, 0.5172, 0.8533, 0.2326]]]])
print (np.array2string(model.predict([in0Lay39291,in0Con18852,in0Sub62142,in1Sub62142,in0Con51247,in0Con64405],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min53938.png')

LLay39291 = layer_normalization_layer([[1.9699]], 1, 2.8817990005262346, Lay39291), 
LRes57024 = reshape_layer(Lay39291, [1, 1], Res57024), 
LRes99183 = reshape_layer(Res57024, [1, 1, 1], Res99183), 
LZer13711 = zero_padding2D_layer(Res99183, 2, 0, 2, 0, Zer13711), 
LCon18852 = concatenate_layer([Zer13711,[[[[0.6547, 0.6287, 0.0292, 0.2556, 0.1134, 0.2085, 0.87, 0.1118], [0.3474, 0.1944, 0.9918, 0.6402, 0.5513, 0.8039, 0.3676, 0.849], [0.275, 0.2327, 0.8594, 0.1092, 0.2336, 0.7608, 0.4722, 0.223]], [[0.3433, 0.3629, 0.3441, 0.3516, 0.3694, 0.1362, 0.643, 0.6532], [0.0574, 0.9111, 0.4766, 0.1126, 0.2511, 0.8679, 0.5118, 0.5791], [0.3009, 0.8467, 0.2464, 0.472, 0.0107, 0.3083, 0.7807, 0.9622]], [[0.4813, 0.5812, 0.4953, 0.692, 0.4706, 0.1126, 0.2567, 0.258], [0.3086, 0.929, 0.6457, 0.748, 0.9814, 0.4103, 0.2311, 0.5967], [0.7294, 0.7813, 0.0953, 0.906, 0.3933, 0.432, 0.6608, 0.16]]]]], 3, Con18852), 
LSub62142 = subtract_layer([[[[[0.0914, 0.8965, 0.3031], [0.6786, 0.1983, 0.2006], [0.3699, 0.3616, 0.3565]], [[0.6629, 0.7114, 0.5172], [0.3787, 0.5514, 0.2424], [0.1849, 0.9079, 0.2058]], [[0.8929, 0.2405, 0.6428], [0.795, 0.0268, 0.6504], [0.0484, 0.6045, 0.4801]]], [[[0.9812, 0.4817, 0.6695], [0.2049, 0.2315, 0.062], [0.4224, 0.11, 0.231]], [[0.6773, 0.778, 0.4526], [0.4324, 0.2332, 0.737], [0.054, 0.9142, 0.6235]], [[0.1619, 0.6882, 0.8049], [0.9287, 0.8471, 0.2216], [0.1429, 0.0339, 0.389]]], [[[0.4732, 0.393, 0.2001], [0.6457, 0.3055, 0.4561], [0.1156, 0.7701, 0.1578]], [[0.028, 0.6134, 0.8962], [0.09, 0.5907, 0.5438], [0.5673, 0.4179, 0.1519]], [[0.2634, 0.9007, 0.1894], [0.0884, 0.8177, 0.3067], [0.0762, 0.0942, 0.1789]]]]], [[[[[0.298, 0.7382, 0.2862], [0.8295, 0.5594, 0.3534], [0.9775, 0.5769, 0.9811]], [[0.8021, 0.494, 0.7303], [0.8039, 0.9433, 0.679], [0.6724, 0.3702, 0.5279]], [[0.4083, 0.4227, 0.2328], [0.5561, 0.5215, 0.9996], [0.5316, 0.3044, 0.0627]]], [[[0.2638, 0.618, 0.8255], [0.6221, 0.4542, 0.8795], [0.4513, 0.8681, 0.8093]], [[0.5966, 0.7227, 0.0725], [0.5111, 0.45, 0.2073], [0.54, 0.6826, 0.9914]], [[0.873, 0.378, 0.3264], [0.9839, 0.0361, 0.9674], [0.8986, 0.0297, 0.419]]], [[[0.8296, 0.6795, 0.3086], [0.5205, 0.321, 0.2258], [0.5718, 0.3252, 0.7368]], [[0.9632, 0.756, 0.3634], [0.9529, 0.419, 0.7157], [0.2675, 0.695, 0.6786]], [[0.6055, 0.2655, 0.889], [0.4027, 0.3878, 0.5044], [0.3146, 0.1411, 0.7893]]]]], Sub62142), 
LRes92416 = reshape_layer(Sub62142, [3, 3, 9], Res92416), 
LCon51247 = conv1D_layer([[[0.6997], [0.9637]]], 2,[[[0.2622, 0.0082]], [[0.1336, 0.4473]]],[0, 0], 1, false, 1, Con51247), 
LRes71103 = reshape_layer(Con51247, [1, 2, 1], Res71103), 
LMax54756 = max_pool2D_layer(Res71103, 1, 2, Max54756), 
LZer26125 = zero_padding2D_layer(Max54756, 2, 0, 2, 0, Zer26125), 
LCon64405 = concatenate_layer([Zer26125,[[[[0.7904, 0.8326, 0.0392, 0.4591, 0.6967, 0.8922, 0.9531, 0.2857], [0.3142, 0.6095, 0.8627, 0.6384, 0.9523, 0.4587, 0.4855, 0.8984], [0.1897, 0.3157, 0.8351, 0.5539, 0.9128, 0.0359, 0.1021, 0.4096]], [[0.72, 0.5854, 0.9715, 0.6984, 0.067, 0.4801, 0.379, 0.7806], [0.6622, 0.8409, 0.7301, 0.1766, 0.788, 0.1974, 0.1645, 0.5274], [0.4165, 0.286, 0.5327, 0.6977, 0.2197, 0.4794, 0.3714, 0.6506]], [[0.8296, 0.155, 0.3134, 0.904, 0.9967, 0.2682, 0.0481, 0.3554], [0.6138, 0.6273, 0.1608, 0.0067, 0.9269, 0.8864, 0.9217, 0.6586], [0.6373, 0.0694, 0.3715, 0.952, 0.015, 0.5172, 0.8533, 0.2326]]]]], 3, Con64405), 
LMax27932 = maximum_layer([Res92416,Con64405], Max27932), 
LMin53938 = minimum_layer([Con18852,Max27932], Min53938), 
exec_layers([LLay39291,LRes57024,LRes99183,LZer13711,LCon18852,LSub62142,LRes92416,LCon51247,LRes71103,LMax54756,LZer26125,LCon64405,LMax27932,LMin53938],["Lay39291","Res57024","Res99183","Zer13711","Con18852","Sub62142","Res92416","Con51247","Res71103","Max54756","Zer26125","Con64405","Max27932","Min53938"],Min53938,"Min53938")

Actual (Unparsed): [[[[0.0000000, 0.6547000, 0.6287000, 0.0292000, 0.2556000, 0.1134000, 0.2085000, 0.8700000, 0.1118000], [0.0000000, 0.3142000, 0.1944000, 0.8627000, 0.6384000, 0.5513000, 0.4587000, 0.3676000, 0.8490000], [0.0000000, 0.1897000, 0.2327000, 0.8351000, 0.1092000, 0.2336000, 0.0359000, 0.3001000, 0.2230000]], [[0.0000000, 0.3433000, 0.3629000, 0.3441000, 0.3516000, 0.0670000, 0.1362000, 0.3790000, 0.6532000], [0.0000000, 0.0574000, 0.8409000, 0.4766000, 0.1126000, 0.2511000, 0.1974000, 0.2316000, 0.5274000], [0.0000000, 0.3009000, 0.4785000, 0.2464000, 0.4720000, 0.0107000, 0.3083000, 0.3714000, 0.6506000]], [[0.0000000, 0.4813000, 0.1550000, 0.3134000, 0.6920000, 0.4706000, 0.1126000, 0.2567000, 0.2580000], [0.0000000, 0.3086000, 0.6273000, 0.1608000, 0.1717000, 0.9269000, 0.4103000, 0.2311000, 0.5967000], [0.0000000, 0.6373000, 0.0694000, 0.0953000, 0.9060000, 0.0150000, 0.4320000, 0.6608000, 0.1600000]]]]

Expected (Unparsed): [[[[0,0.6547,0.6287,0.0292,0.2556,0.1134,0.2085,0.87,0.1118],[0,0.3142,0.1944,0.8627,0.6384,0.5513,0.4587,0.3676,0.849],[0,0.1897,0.2327,0.8351,0.1092,0.2336,0.0359,0.30010000000000003,0.223]],[[0,0.3433,0.3629,0.3441,0.3516,0.067,0.1362,0.379,0.6532],[0,0.0574,0.8409,0.4766,0.1126,0.2511,0.1974,0.23160000000000003,0.5274],[0,0.3009,0.4784999999999999,0.2464,0.472,0.0107,0.3083,0.3714,0.6506]],[[0,0.4813,0.155,0.3134,0.692,0.4706,0.1126,0.2567,0.258],[0,0.3086,0.6273,0.1608,0.17170000000000002,0.9269,0.4103,0.2311,0.5967],[0.0,0.6373,0.0694,0.0953,0.906,0.015,0.432,0.6608,0.16]]]]

Actual:   [[[[0, 0.6547, 0.6287, 0.0292, 0.2556, 0.1134, 0.2085, 0.87, 0.1118], [0, 0.3142, 0.1944, 0.8627, 0.6384, 0.5513, 0.4587, 0.3676, 0.849], [0, 0.1897, 0.2327, 0.8351, 0.1092, 0.2336, 0.0359, 0.3001, 0.223]], [[0, 0.3433, 0.3629, 0.3441, 0.3516, 0.067, 0.1362, 0.379, 0.6532], [0, 0.0574, 0.8409, 0.4766, 0.1126, 0.2511, 0.1974, 0.2316, 0.5274], [0, 0.3009, 0.4785, 0.2464, 0.472, 0.0107, 0.3083, 0.3714, 0.6506]], [[0, 0.4813, 0.155, 0.3134, 0.692, 0.4706, 0.1126, 0.2567, 0.258], [0, 0.3086, 0.6273, 0.1608, 0.1717, 0.9269, 0.4103, 0.2311, 0.5967], [0, 0.6373, 0.0694, 0.0953, 0.906, 0.015, 0.432, 0.6608, 0.16]]]]

Expected: [[[[0, 0.6547, 0.6287, 0.0292, 0.2556, 0.1134, 0.2085, 0.87, 0.1118], [0, 0.3142, 0.1944, 0.8627, 0.6384, 0.5513, 0.4587, 0.3676, 0.849], [0, 0.1897, 0.2327, 0.8351, 0.1092, 0.2336, 0.0359, 0.3002, 0.223]], [[0, 0.3433, 0.3629, 0.3441, 0.3516, 0.067, 0.1362, 0.379, 0.6532], [0, 0.0574, 0.8409, 0.4766, 0.1126, 0.2511, 0.1974, 0.2317, 0.5274], [0, 0.3009, 0.4785, 0.2464, 0.472, 0.0107, 0.3083, 0.3714, 0.6506]], [[0, 0.4813, 0.155, 0.3134, 0.692, 0.4706, 0.1126, 0.2567, 0.258], [0, 0.3086, 0.6273, 0.1608, 0.1718, 0.9269, 0.4103, 0.2311, 0.5967], [0, 0.6373, 0.0694, 0.0953, 0.906, 0.015, 0.432, 0.6608, 0.16]]]]