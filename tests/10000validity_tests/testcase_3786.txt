import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min74298 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Min74298 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Max90055 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Con78621 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Mul42838 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))
in1Mul42838 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))

Min74298 = keras.layers.Minimum(name = 'Min74298', )([in0Min74298,in1Min74298])
Max90055 = keras.layers.MaxPool2D(pool_size=(1, 2), name = 'Max90055', )(in0Max90055)
Zer13879 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer13879', )(Max90055)
Mul17938 = keras.layers.Multiply(name = 'Mul17938', )([Min74298,Zer13879])
Res28306 = keras.layers.Reshape((2, 2, 2, 1), name = 'Res28306', )(Mul17938)
Con78621 = keras.layers.Concatenate(axis=4, name = 'Con78621', )([Res28306,in0Con78621])
Mul42838 = keras.layers.Multiply(name = 'Mul42838', )([in0Mul42838,in1Mul42838])
Zer13170 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (0, 0)), name = 'Zer13170', )(Mul42838)
Max25740 = keras.layers.Maximum(name = 'Max25740', )([Con78621,Zer13170])
Res22698 = keras.layers.Reshape((2, 2, 4), name = 'Res22698', )(Max25740)
Zer89128 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer89128', )(Res22698)
model = tf.keras.models.Model(inputs=[in0Min74298,in1Min74298,in0Max90055,in0Con78621,in0Mul42838,in1Mul42838], outputs=Zer89128)
in0Min74298 = tf.constant([[[[0.8974, 0.7253], [0.7044, 0.8351]], [[0.1641, 0.3461], [0.2758, 0.1671]]]])
in1Min74298 = tf.constant([[[[0.6995, 0.0099], [0.5443, 0.4475]], [[0.0352, 0.5055], [0.7822, 0.2309]]]])
in0Max90055 = tf.constant([[[[1.7994, 1.8686], [1.8916, 1.063]]]])
in0Con78621 = tf.constant([[[[[0.6362], [0.7287]], [[0.0428], [0.8607]]], [[[0.1011], [0.9419]], [[0.4161], [0.5065]]]]])
in0Mul42838 = tf.constant([[[[[0.0364, 0.5313], [0.7926, 0.5943]]]]])
in1Mul42838 = tf.constant([[[[[0.0814, 0.7048], [0.3101, 0.1413]]]]])
print (np.array2string(model.predict([in0Min74298,in1Min74298,in0Max90055,in0Con78621,in0Mul42838,in1Mul42838],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Zer89128.png')

LMin74298 = minimum_layer([[[[[0.8974, 0.7253], [0.7044, 0.8351]], [[0.1641, 0.3461], [0.2758, 0.1671]]]], [[[[0.6995, 0.0099], [0.5443, 0.4475]], [[0.0352, 0.5055], [0.7822, 0.2309]]]]], Min74298), 
LMax90055 = max_pool2D_layer([[[[1.7994, 1.8686], [1.8916, 1.063]]]], 1, 2, Max90055), 
LZer13879 = zero_padding2D_layer(Max90055, 1, 0, 1, 0, Zer13879), 
LMul17938 = multiply_layer([Min74298,Zer13879], Mul17938), 
LRes28306 = reshape_layer(Mul17938, [2, 2, 2, 1], Res28306), 
LCon78621 = concatenate_layer([Res28306,[[[[[0.6362], [0.7287]], [[0.0428], [0.8607]]], [[[0.1011], [0.9419]], [[0.4161], [0.5065]]]]]], 4, Con78621), 
LMul42838 = multiply_layer([[[[[[0.0364, 0.5313], [0.7926, 0.5943]]]]], [[[[[0.0814, 0.7048], [0.3101, 0.1413]]]]]], Mul42838), 
LZer13170 = zero_padding3D_layer(Mul42838, 1, 0, 1, 0, 0, 0, Zer13170), 
LMax25740 = maximum_layer([Con78621,Zer13170], Max25740), 
LRes22698 = reshape_layer(Max25740, [2, 2, 4], Res22698), 
LZer89128 = zero_padding2D_layer(Res22698, 1, 1, 1, 1, Zer89128), 
exec_layers([LMin74298,LMax90055,LZer13879,LMul17938,LRes28306,LCon78621,LMul42838,LZer13170,LMax25740,LRes22698,LZer89128],["Min74298","Max90055","Zer13879","Mul17938","Res28306","Con78621","Mul42838","Zer13170","Max25740","Res22698","Zer89128"],Zer89128,"Zer89128")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.6362000, 0.0000000, 0.7287000], [0.0000000, 0.0428000, 0.0000000, 0.8607000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.1011000, 0.0000000, 0.9419000], [0.5217033, 0.4161000, 0.3122431, 0.5065000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]]]]

Expected (Unparsed): [[[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0.0,0.6362,0.0,0.7287],[0.0,0.0428,0.0,0.8607],[0,0,0,0]],[[0,0,0,0],[0.0,0.1011,0.0,0.9419],[0.52170328,0.4161,0.31224306,0.5065],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]]]

Actual:   [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0.6362, 0, 0.7287], [0, 0.0428, 0, 0.8607], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0.1011, 0, 0.9419], [0.5218, 0.4161, 0.3123, 0.5065], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]]

Expected: [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0.6362, 0, 0.7287], [0, 0.0428, 0, 0.8607], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0.1011, 0, 0.9419], [0.5218, 0.4161, 0.3123, 0.5065], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]]