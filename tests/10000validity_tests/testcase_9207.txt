import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul87387 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Mul87387 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Ave56805 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Ave56805 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con35639 = tf.keras.layers.Input(shape=([15]))

Mul87387 = keras.layers.Multiply(name = 'Mul87387', )([in0Mul87387,in1Mul87387])
Sof24011 = keras.layers.Softmax(axis=1, name = 'Sof24011', )(Mul87387)
Res21039 = keras.layers.Reshape((2, 2, 4), name = 'Res21039', )(Sof24011)
Res3770 = keras.layers.Reshape((2, 8), name = 'Res3770', )(Res21039)
Fla43824 = keras.layers.Flatten(name = 'Fla43824', )(Res3770)
Ave56805 = keras.layers.Average(name = 'Ave56805', )([in0Ave56805,in1Ave56805])
Glo67426 = keras.layers.GlobalAveragePooling2D(name = 'Glo67426', )(Ave56805)
Con35639 = keras.layers.Concatenate(axis=1, name = 'Con35639', )([Glo67426,in0Con35639])
Mul88860 = keras.layers.Multiply(name = 'Mul88860', )([Fla43824,Con35639])
model = tf.keras.models.Model(inputs=[in0Mul87387,in1Mul87387,in0Ave56805,in1Ave56805,in0Con35639], outputs=Mul88860)
in0Mul87387 = tf.constant([[[[[0.6726, 0.7066], [0.0559, 0.0756]], [[0.0198, 0.7949], [0.2692, 0.9466]]], [[[0.8642, 0.0489], [0.2228, 0.7163]], [[0.3059, 0.4337], [0.828, 0.0393]]]]])
in1Mul87387 = tf.constant([[[[[0.2417, 0.1918], [0.7342, 0.7332]], [[0.9603, 0.473], [0.1726, 0.7439]]], [[[0.622, 0.8057], [0.944, 0.1767]], [[0.9487, 0.6051], [0.0693, 0.1949]]]]])
in0Ave56805 = tf.constant([[[[0.3089], [0.1622]], [[0.0592], [0.5357]]]])
in1Ave56805 = tf.constant([[[[0.6583], [0.4611]], [[0.1143], [0.5008]]]])
in0Con35639 = tf.constant([[0.3762, 0.151, 0.073, 0.7308, 0.1646, 0.623, 0.6804, 0.4703, 0.6493, 0.2838, 0.0264, 0.7409, 0.7287, 0.8729, 0.3652]])
print (np.array2string(model.predict([in0Mul87387,in1Mul87387,in0Ave56805,in1Ave56805,in0Con35639],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul88860.png')

LMul87387 = multiply_layer([[[[[[0.6726, 0.7066], [0.0559, 0.0756]], [[0.0198, 0.7949], [0.2692, 0.9466]]], [[[0.8642, 0.0489], [0.2228, 0.7163]], [[0.3059, 0.4337], [0.828, 0.0393]]]]], [[[[[0.2417, 0.1918], [0.7342, 0.7332]], [[0.9603, 0.473], [0.1726, 0.7439]]], [[[0.622, 0.8057], [0.944, 0.1767]], [[0.9487, 0.6051], [0.0693, 0.1949]]]]]], Mul87387), 
LSof24011 = softmax_layer(Mul87387, 1, Sof24011), 
LRes21039 = reshape_layer(Sof24011, [2, 2, 4], Res21039), 
LRes3770 = reshape_layer(Res21039, [2, 8], Res3770), 
LFla43824 = flatten_layer(Res3770, Fla43824), 
LAve56805 = average_layer([[[[[0.3089], [0.1622]], [[0.0592], [0.5357]]]], [[[[0.6583], [0.4611]], [[0.1143], [0.5008]]]]], Ave56805), 
LGlo67426 = global_average_pooling2D_layer(Ave56805, Glo67426), 
LCon35639 = concatenate_layer([Glo67426,[[0.3762, 0.151, 0.073, 0.7308, 0.1646, 0.623, 0.6804, 0.4703, 0.6493, 0.2838, 0.0264, 0.7409, 0.7287, 0.8729, 0.3652]]], 1, Con35639), 
LMul88860 = multiply_layer([Fla43824,Con35639], Mul88860), 
exec_layers([LMul87387,LSof24011,LRes21039,LRes3770,LFla43824,LAve56805,LGlo67426,LCon35639,LMul88860],["Mul87387","Sof24011","Res21039","Res3770","Fla43824","Ave56805","Glo67426","Con35639","Mul88860"],Mul88860,"Mul88860")

Actual (Unparsed): [[0.1425951, 0.1971338, 0.0691248, 0.0352022, 0.3161544, 0.0869678, 0.3097998, 0.4541091, 0.2787271, 0.3090582, 0.1538819, 0.0136693, 0.4203762, 0.3436852, 0.4388322, 0.1214601]]

Expected (Unparsed): [[0.14259510788950555,0.19713380317721202,0.06912484310939344,0.035202236986494495,0.31615441571918806,0.08696780756253764,0.3097997751245505,0.4541091048603212,0.27872712589770554,0.30905816479807613,0.1538819173877758,0.013669327993925277,0.4203761814363076,0.3436851678564935,0.43883222519065784,0.12146007481630028]]

Actual:   [[0.1426, 0.1972, 0.0692, 0.0353, 0.3162, 0.087, 0.3098, 0.4542, 0.2788, 0.3091, 0.1539, 0.0137, 0.4204, 0.3437, 0.4389, 0.1215]]

Expected: [[0.1426, 0.1972, 0.0692, 0.0353, 0.3162, 0.087, 0.3098, 0.4542, 0.2788, 0.3091, 0.1539, 0.0137, 0.4204, 0.3437, 0.4389, 0.1215]]