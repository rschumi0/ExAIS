import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo39130 = tf.keras.layers.Input(shape=([2, 1]))
in0Den90191 = tf.keras.layers.Input(shape=([4, 4, 3]))
in0Mul12443 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in1Mul12443 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Con61376 = tf.keras.layers.Input(shape=([4, 4, 1]))
in0Con61646 = tf.keras.layers.Input(shape=([2, 2, 1]))

Glo39130 = keras.layers.GlobalAveragePooling1D(name = 'Glo39130', )(in0Glo39130)
Res59127 = keras.layers.Reshape((1, 1), name = 'Res59127', )(Glo39130)
Res87890 = keras.layers.Reshape((1, 1, 1), name = 'Res87890', )(Res59127)
Res86779 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res86779', )(Res87890)
Zer3455 = keras.layers.ZeroPadding3D(padding=((3, 0), (3, 0), (2, 0)), name = 'Zer3455', )(Res86779)
Den90191 = keras.layers.Dense(3,name = 'Den90191', )(in0Den90191)
Res8498 = keras.layers.Reshape((4, 4, 3, 1), name = 'Res8498', )(Den90191)
Mul12443 = keras.layers.Multiply(name = 'Mul12443', )([in0Mul12443,in1Mul12443])
Zer17625 = keras.layers.ZeroPadding3D(padding=((3, 0), (2, 0), (2, 0)), name = 'Zer17625', )(Mul12443)
Sub25693 = keras.layers.Subtract(name = 'Sub25693', )([Res8498,Zer17625])
Mul81648 = keras.layers.Multiply(name = 'Mul81648', )([Zer3455,Sub25693])
Res7506 = keras.layers.Reshape((4, 4, 3), name = 'Res7506', )(Mul81648)
Con61376 = keras.layers.Concatenate(axis=3, name = 'Con61376', )([Res7506,in0Con61376])
Con61646 = keras.layers.Conv2D(4, (2, 1),strides=(1, 1), padding='same', dilation_rate=(1, 1), name = 'Con61646', )(in0Con61646)
Zer47028 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer47028', )(Con61646)
Min96404 = keras.layers.Minimum(name = 'Min96404', )([Con61376,Zer47028])
Res76403 = keras.layers.Reshape((4, 16), name = 'Res76403', )(Min96404)
Ave50487 = keras.layers.AveragePooling1D(pool_size=(1), strides=(1), padding='same', name = 'Ave50487', )(Res76403)
model = tf.keras.models.Model(inputs=[in0Glo39130,in0Den90191,in0Mul12443,in1Mul12443,in0Con61376,in0Con61646], outputs=Ave50487)
w = model.get_layer('Den90191').get_weights() 
w[0] = np.array([[0.8039, 0.9762, 0.0411], [0.54, 0.1108, 0.5311], [0.8153, 0.8001, 0.35]])
w[1] = np.array([0.1911, 0.1409, 0.9094])
model.get_layer('Den90191').set_weights(w) 
w = model.get_layer('Con61646').get_weights() 
w[0] = np.array([[[[0.2913, 0.9252, 0.9569, 0.5095]]], [[[0.4291, 0.1982, 0.3327, 0.5989]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con61646').set_weights(w) 
in0Glo39130 = tf.constant([[[1.9562], [1.8753]]])
in0Den90191 = tf.constant([[[[0.3291, 0.2931, 0.7459], [0.9343, 0.6039, 0.6105], [0.7645, 0.3716, 0.8244], [0.8258, 0.5183, 0.9821]], [[0.7712, 0.8146, 0.5797], [0.5962, 0.2067, 0.3991], [0.5379, 0.0673, 0.3296], [0.6319, 0.2893, 0.281]], [[0.8431, 0.9676, 0.273], [0.913, 0.9364, 0.1537], [0.1184, 0.9122, 0.9185], [0.6232, 0.4455, 0.5846]], [[0.5948, 0.2769, 0.2336], [0.7184, 0.73, 0.8059], [0.2564, 0.4009, 0.1032], [0.1255, 0.5727, 0.0558]]]])
in0Mul12443 = tf.constant([[[[[0.7266]], [[0.0647]]]]])
in1Mul12443 = tf.constant([[[[[0.956]], [[0.7519]]]]])
in0Con61376 = tf.constant([[[[0.5585], [0.7659], [0.133], [0.2715]], [[0.9719], [0.4049], [0.6324], [0.7712]], [[0.8274], [0.6477], [0.2527], [0.6731]], [[0.9933], [0.6198], [0.0584], [0.1865]]]])
in0Con61646 = tf.constant([[[[0.776], [0.1879]], [[0.4486], [0.0233]]]])
print (np.array2string(model.predict([in0Glo39130,in0Den90191,in0Mul12443,in1Mul12443,in0Con61376,in0Con61646],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave50487.png')

LGlo39130 = global_average_pooling1D_layer([[[1.9562], [1.8753]]], Glo39130), 
LRes59127 = reshape_layer(Glo39130, [1, 1], Res59127), 
LRes87890 = reshape_layer(Res59127, [1, 1, 1], Res87890), 
LRes86779 = reshape_layer(Res87890, [1, 1, 1, 1], Res86779), 
LZer3455 = zero_padding3D_layer(Res86779, 3, 0, 3, 0, 2, 0, Zer3455), 
LDen90191 = dense_layer([[[[0.3291, 0.2931, 0.7459], [0.9343, 0.6039, 0.6105], [0.7645, 0.3716, 0.8244], [0.8258, 0.5183, 0.9821]], [[0.7712, 0.8146, 0.5797], [0.5962, 0.2067, 0.3991], [0.5379, 0.0673, 0.3296], [0.6319, 0.2893, 0.281]], [[0.8431, 0.9676, 0.273], [0.913, 0.9364, 0.1537], [0.1184, 0.9122, 0.9185], [0.6232, 0.4455, 0.5846]], [[0.5948, 0.2769, 0.2336], [0.7184, 0.73, 0.8059], [0.2564, 0.4009, 0.1032], [0.1255, 0.5727, 0.0558]]]], [[0.8039, 0.9762, 0.0411], [0.54, 0.1108, 0.5311], [0.8153, 0.8001, 0.35]],[0.1911, 0.1409, 0.9094], Den90191), 
LRes8498 = reshape_layer(Den90191, [4, 4, 3, 1], Res8498), 
LMul12443 = multiply_layer([[[[[[0.7266]], [[0.0647]]]]], [[[[[0.956]], [[0.7519]]]]]], Mul12443), 
LZer17625 = zero_padding3D_layer(Mul12443, 3, 0, 2, 0, 2, 0, Zer17625), 
LSub25693 = subtract_layer(Res8498,Zer17625, Sub25693), 
LMul81648 = multiply_layer([Zer3455,Sub25693], Mul81648), 
LRes7506 = reshape_layer(Mul81648, [4, 4, 3], Res7506), 
LCon61376 = concatenate_layer([Res7506,[[[[0.5585], [0.7659], [0.133], [0.2715]], [[0.9719], [0.4049], [0.6324], [0.7712]], [[0.8274], [0.6477], [0.2527], [0.6731]], [[0.9933], [0.6198], [0.0584], [0.1865]]]]], 3, Con61376), 
LCon61646 = conv2D_layer([[[[0.776], [0.1879]], [[0.4486], [0.0233]]]], 2, 1,[[[[0.2913, 0.9252, 0.9569, 0.5095]]], [[[0.4291, 0.1982, 0.3327, 0.5989]]]],[0, 0, 0, 0], 1, 1, true, 1, 1, Con61646), 
LZer47028 = zero_padding2D_layer(Con61646, 2, 0, 2, 0, Zer47028), 
LMin96404 = minimum_layer([Con61376,Zer47028], Min96404), 
LRes76403 = reshape_layer(Min96404, [4, 16], Res76403), 
LAve50487 = average_pooling1D_layer(Res76403, 1, 1, true, Ave50487), 
exec_layers([LGlo39130,LRes59127,LRes87890,LRes86779,LZer3455,LDen90191,LRes8498,LMul12443,LZer17625,LSub25693,LMul81648,LRes7506,LCon61376,LCon61646,LZer47028,LMin96404,LRes76403,LAve50487],["Glo39130","Res59127","Res87890","Res86779","Zer3455","Den90191","Res8498","Mul12443","Zer17625","Sub25693","Mul81648","Res7506","Con61376","Con61646","Zer47028","Min96404","Res76403","Ave50487"],Ave50487,"Ave50487")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.2527000, 0.0000000, 0.0000000, 0.0000000, 0.1096894], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0584000, 0.0000000, 0.0000000, 0.0222958, 0.0118713]]]

Expected (Unparsed): [[[0.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0.0,0.0,0],[0.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0.0,0.0,0],[0.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.2527,0.0,0.0,0.0,0.10968942000000001],[0.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0584,0.0,0.0,0.02229577,0.01187135]]]

Actual:   [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2527, 0, 0, 0, 0.1097], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0584, 0, 0, 0.0223, 0.0119]]]

Expected: [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2527, 0, 0, 0, 0.1097], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0584, 0, 0, 0.0223, 0.0119]]]