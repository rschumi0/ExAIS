import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min44907 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in1Min44907 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Con25913 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Cro39422 = tf.keras.layers.Input(shape=([3, 2, 3]))
in0Con50435 = tf.keras.layers.Input(shape=([6, 3, 3]))
in0Thr53449 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))
in0Con63873 = tf.keras.layers.Input(shape=([1, 1, 2]))

Min44907 = keras.layers.Minimum(name = 'Min44907', )([in0Min44907,in1Min44907])
Res47413 = keras.layers.Reshape((1, 2, 1), name = 'Res47413', )(Min44907)
Res65025 = keras.layers.Reshape((1, 2), name = 'Res65025', )(Res47413)
Glo2952 = keras.layers.GlobalMaxPool1D(name = 'Glo2952', )(Res65025)
Res50738 = keras.layers.Reshape((2, 1), name = 'Res50738', )(Glo2952)
Res72950 = keras.layers.Reshape((2, 1, 1), name = 'Res72950', )(Res50738)
Con25913 = keras.layers.Concatenate(axis=3, name = 'Con25913', )([Res72950,in0Con25913])
Cro39422 = keras.layers.Cropping2D(cropping=((0, 1), (0, 1)), name = 'Cro39422', )(in0Cro39422)
Thr91336 = keras.layers.ThresholdedReLU(theta=2.48504421150855, name = 'Thr91336', )(Cro39422)
Max76741 = keras.layers.Maximum(name = 'Max76741', )([Con25913,Thr91336])
Res47108 = keras.layers.Reshape((2, 3), name = 'Res47108', )(Max76741)
Fla94678 = keras.layers.Flatten(name = 'Fla94678', )(Res47108)
Res82645 = keras.layers.Reshape((6, 1), name = 'Res82645', )(Fla94678)
Res17830 = keras.layers.Reshape((6, 1, 1), name = 'Res17830', )(Res82645)
Max32095 = keras.layers.MaxPool2D(pool_size=(1, 1), name = 'Max32095', )(Res17830)
Zer48243 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer48243', )(Max32095)
Con50435 = keras.layers.Concatenate(axis=3, name = 'Con50435', )([Zer48243,in0Con50435])
Thr53449 = keras.layers.ThresholdedReLU(theta=9.56516172161207, name = 'Thr53449', input_shape=(1, 2, 2, 2))(in0Thr53449)
Res93626 = keras.layers.Reshape((1, 2, 4), name = 'Res93626', )(Thr53449)
Con63873 = keras.layers.Conv2D(4, (1, 1),strides=(7, 1), padding='same', dilation_rate=(1, 1), name = 'Con63873', )(in0Con63873)
Res44080 = keras.layers.Reshape((1, 4), name = 'Res44080', )(Con63873)
Glo2223 = keras.layers.GlobalAveragePooling1D(name = 'Glo2223', )(Res44080)
Res39810 = keras.layers.Reshape((4, 1), name = 'Res39810', )(Glo2223)
Res6646 = keras.layers.Reshape((4, 1, 1), name = 'Res6646', )(Res39810)
Sep97410 = keras.layers.SeparableConv2D(4, (1, 1),strides=(4, 4), padding='valid', name = 'Sep97410', )(Res6646)
Zer57286 = keras.layers.ZeroPadding2D(padding=((0, 0), (1, 0)), name = 'Zer57286', )(Sep97410)
Add82826 = keras.layers.Add(name = 'Add82826', )([Res93626,Zer57286])
Zer5748 = keras.layers.ZeroPadding2D(padding=((5, 0), (1, 0)), name = 'Zer5748', )(Add82826)
Ave39407 = keras.layers.Average(name = 'Ave39407', )([Con50435,Zer5748])
model = tf.keras.models.Model(inputs=[in0Min44907,in1Min44907,in0Con25913,in0Cro39422,in0Con50435,in0Thr53449,in0Con63873], outputs=Ave39407)
w = model.get_layer('Con63873').get_weights() 
w[0] = np.array([[[[0.2724, 0.7323, 0.5561, 0.2379], [0.7523, 0.5931, 0.35, 0.6856]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con63873').set_weights(w) 
w = model.get_layer('Sep97410').get_weights() 
w[0] = np.array([[[[0.7219]]]])
w[1] = np.array([[[[0.6091, 0.951, 0.8081, 0.5902]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep97410').set_weights(w) 
in0Min44907 = tf.constant([[[[[0.604]], [[0.7063]]]]])
in1Min44907 = tf.constant([[[[[0.128]], [[0.7962]]]]])
in0Con25913 = tf.constant([[[[0.2734, 0.6092]], [[0.1639, 0.9322]]]])
in0Cro39422 = tf.constant([[[[1.0694, 1.876, 1.5391], [1.0223, 1.0925, 1.4958]], [[1.1344, 1.388, 1.6866], [1.9456, 1.5996, 1.1772]], [[1.0424, 1.7573, 1.8872], [1.9058, 1.7085, 1.9684]]]])
in0Con50435 = tf.constant([[[[0.4503, 0.0203, 0.2615], [0.3091, 0.4657, 0.7146], [0.1837, 0.3055, 0.5406]], [[0.3916, 0.4598, 0.0286], [0.9226, 0.1002, 0.3352], [0.4695, 0.6287, 0.573]], [[0.4117, 0.7727, 0.4685], [0.8657, 0.5473, 0.4038], [0.1785, 0.1229, 0.0122]], [[0.5203, 0.2444, 0.8196], [0.3169, 0.5857, 0.5185], [0.6219, 0.9951, 0.5141]], [[0.1894, 0.9627, 0.8922], [0.5367, 0.003, 0.5318], [0.1875, 0.5393, 0.8918]], [[0.1453, 0.4622, 0.8369], [0.3316, 0.8758, 0.614], [0.2248, 0.8096, 0.9011]]]])
in0Thr53449 = tf.constant([[[[[0.0469, 0.8996], [0.8391, 0.9805]], [[0.7776, 0.9187], [0.3629, 0.0504]]]]])
in0Con63873 = tf.constant([[[[0.7712, 0.6012]]]])
print (np.array2string(model.predict([in0Min44907,in1Min44907,in0Con25913,in0Cro39422,in0Con50435,in0Thr53449,in0Con63873],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave39407.png')

LMin44907 = minimum_layer([[[[[[0.604]], [[0.7063]]]]], [[[[[0.128]], [[0.7962]]]]]], Min44907), 
LRes47413 = reshape_layer(Min44907, [1, 2, 1], Res47413), 
LRes65025 = reshape_layer(Res47413, [1, 2], Res65025), 
LGlo2952 = global_max_pool1D_layer(Res65025, Glo2952), 
LRes50738 = reshape_layer(Glo2952, [2, 1], Res50738), 
LRes72950 = reshape_layer(Res50738, [2, 1, 1], Res72950), 
LCon25913 = concatenate_layer([Res72950,[[[[0.2734, 0.6092]], [[0.1639, 0.9322]]]]], 3, Con25913), 
LCro39422 = cropping2D_layer([[[[1.0694, 1.876, 1.5391], [1.0223, 1.0925, 1.4958]], [[1.1344, 1.388, 1.6866], [1.9456, 1.5996, 1.1772]], [[1.0424, 1.7573, 1.8872], [1.9058, 1.7085, 1.9684]]]], 0, 1, 0, 1, Cro39422), 
LThr91336 = thresholded_relu_layer(Cro39422, 2.48504421150855, Thr91336), 
LMax76741 = maximum_layer([Con25913,Thr91336], Max76741), 
LRes47108 = reshape_layer(Max76741, [2, 3], Res47108), 
LFla94678 = flatten_layer(Res47108, Fla94678), 
LRes82645 = reshape_layer(Fla94678, [6, 1], Res82645), 
LRes17830 = reshape_layer(Res82645, [6, 1, 1], Res17830), 
LMax32095 = max_pool2D_layer(Res17830, 1, 1, Max32095), 
LZer48243 = zero_padding2D_layer(Max32095, 0, 0, 2, 0, Zer48243), 
LCon50435 = concatenate_layer([Zer48243,[[[[0.4503, 0.0203, 0.2615], [0.3091, 0.4657, 0.7146], [0.1837, 0.3055, 0.5406]], [[0.3916, 0.4598, 0.0286], [0.9226, 0.1002, 0.3352], [0.4695, 0.6287, 0.573]], [[0.4117, 0.7727, 0.4685], [0.8657, 0.5473, 0.4038], [0.1785, 0.1229, 0.0122]], [[0.5203, 0.2444, 0.8196], [0.3169, 0.5857, 0.5185], [0.6219, 0.9951, 0.5141]], [[0.1894, 0.9627, 0.8922], [0.5367, 0.003, 0.5318], [0.1875, 0.5393, 0.8918]], [[0.1453, 0.4622, 0.8369], [0.3316, 0.8758, 0.614], [0.2248, 0.8096, 0.9011]]]]], 3, Con50435), 
LThr53449 = thresholded_relu_layer([[[[[0.0469, 0.8996], [0.8391, 0.9805]], [[0.7776, 0.9187], [0.3629, 0.0504]]]]], 9.56516172161207, Thr53449), 
LRes93626 = reshape_layer(Thr53449, [1, 2, 4], Res93626), 
LCon63873 = conv2D_layer([[[[0.7712, 0.6012]]]], 1, 1,[[[[0.2724, 0.7323, 0.5561, 0.2379], [0.7523, 0.5931, 0.35, 0.6856]]]],[0, 0, 0, 0], 7, 1, true, 1, 1, Con63873), 
LRes44080 = reshape_layer(Con63873, [1, 4], Res44080), 
LGlo2223 = global_average_pooling1D_layer(Res44080, Glo2223), 
LRes39810 = reshape_layer(Glo2223, [4, 1], Res39810), 
LRes6646 = reshape_layer(Res39810, [4, 1, 1], Res6646), 
LSep97410 = separable_conv2D_layer(Res6646, 1, 1,[[[[[0.7219]]]],[[[[0.6091, 0.951, 0.8081, 0.5902]]]]],[0, 0, 0, 0], 4, 4, false, Sep97410), 
LZer57286 = zero_padding2D_layer(Sep97410, 0, 0, 1, 0, Zer57286), 
LAdd82826 = add_layer([Res93626,Zer57286], Add82826), 
LZer5748 = zero_padding2D_layer(Add82826, 5, 0, 1, 0, Zer5748), 
LAve39407 = average_layer([Con50435,Zer5748], Ave39407), 
exec_layers([LMin44907,LRes47413,LRes65025,LGlo2952,LRes50738,LRes72950,LCon25913,LCro39422,LThr91336,LMax76741,LRes47108,LFla94678,LRes82645,LRes17830,LMax32095,LZer48243,LCon50435,LThr53449,LRes93626,LCon63873,LRes44080,LGlo2223,LRes39810,LRes6646,LSep97410,LZer57286,LAdd82826,LZer5748,LAve39407],["Min44907","Res47413","Res65025","Glo2952","Res50738","Res72950","Con25913","Cro39422","Thr91336","Max76741","Res47108","Fla94678","Res82645","Res17830","Max32095","Zer48243","Con50435","Thr53449","Res93626","Con63873","Res44080","Glo2223","Res39810","Res6646","Sep97410","Zer57286","Add82826","Zer5748","Ave39407"],Ave39407,"Ave39407")

Actual (Unparsed): [[[[0.0000000, 0.2251500, 0.0101500, 0.1307500], [0.0000000, 0.1545500, 0.2328500, 0.3573000], [0.0640000, 0.0918500, 0.1527500, 0.2703000]], [[0.0000000, 0.1958000, 0.2299000, 0.0143000], [0.0000000, 0.4613000, 0.0501000, 0.1676000], [0.1367000, 0.2347500, 0.3143500, 0.2865000]], [[0.0000000, 0.2058500, 0.3863500, 0.2342500], [0.0000000, 0.4328500, 0.2736500, 0.2019000], [0.3046000, 0.0892500, 0.0614500, 0.0061000]], [[0.0000000, 0.2601500, 0.1222000, 0.4098000], [0.0000000, 0.1584500, 0.2928500, 0.2592500], [0.3531500, 0.3109500, 0.4975500, 0.2570500]], [[0.0000000, 0.0947000, 0.4813500, 0.4461000], [0.0000000, 0.2683500, 0.0015000, 0.2659000], [0.0819500, 0.0937500, 0.2696500, 0.4459000]], [[0.0000000, 0.0726500, 0.2311000, 0.4184500], [0.0000000, 0.1658000, 0.4379000, 0.3070000], [0.6117224, 0.3397632, 0.5979989, 0.5916538]]]]

Expected (Unparsed): [[[[0,0.22515,0.01015,0.13075],[0,0.15455,0.23285,0.3573],[0.064,0.09185,0.15275,0.2703]],[[0,0.1958,0.2299,0.0143],[0,0.4613,0.0501,0.1676],[0.1367,0.23475,0.31435,0.2865]],[[0,0.20585,0.38635,0.23425],[0,0.43285,0.27365,0.2019],[0.3046,0.08925,0.06145,0.0061]],[[0,0.26015,0.1222,0.4098],[0,0.15845,0.29285,0.25925],[0.35315,0.31095,0.49755,0.25705]],[[0,0.0947,0.48135,0.4461],[0,0.26835,0.0015,0.2659],[0.08195,0.09375,0.26965,0.4459]],[[0,0.07265,0.2311,0.41845],[0,0.1658,0.4379,0.307],[0.6117224038052378,0.339763168640258,0.5979989238466799,0.5916538297912516]]]]

Actual:   [[[[0, 0.2252, 0.0102, 0.1308], [0, 0.1546, 0.2329, 0.3573], [0.064, 0.0919, 0.1528, 0.2703]], [[0, 0.1958, 0.2299, 0.0143], [0, 0.4613, 0.0501, 0.1676], [0.1367, 0.2348, 0.3144, 0.2865]], [[0, 0.2059, 0.3864, 0.2343], [0, 0.4329, 0.2737, 0.2019], [0.3046, 0.0893, 0.0615, 0.0061]], [[0, 0.2602, 0.1222, 0.4098], [0, 0.1585, 0.2929, 0.2593], [0.3532, 0.311, 0.4976, 0.2571]], [[0, 0.0947, 0.4814, 0.4461], [0, 0.2684, 0.0015, 0.2659], [0.082, 0.0938, 0.2697, 0.4459]], [[0, 0.0727, 0.2311, 0.4185], [0, 0.1658, 0.4379, 0.307], [0.6118, 0.3398, 0.598, 0.5917]]]]

Expected: [[[[0, 0.2252, 0.0102, 0.1308], [0, 0.1546, 0.2329, 0.3573], [0.064, 0.0919, 0.1528, 0.2703]], [[0, 0.1958, 0.2299, 0.0143], [0, 0.4613, 0.0501, 0.1676], [0.1367, 0.2348, 0.3144, 0.2865]], [[0, 0.2059, 0.3864, 0.2343], [0, 0.4329, 0.2737, 0.2019], [0.3046, 0.0893, 0.0615, 0.0061]], [[0, 0.2602, 0.1222, 0.4098], [0, 0.1585, 0.2929, 0.2593], [0.3532, 0.311, 0.4976, 0.2571]], [[0, 0.0947, 0.4814, 0.4461], [0, 0.2684, 0.0015, 0.2659], [0.082, 0.0938, 0.2697, 0.4459]], [[0, 0.0727, 0.2311, 0.4185], [0, 0.1658, 0.4379, 0.307], [0.6118, 0.3398, 0.598, 0.5917]]]]