import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min89123 = tf.keras.layers.Input(shape=([2, 2]))
in1Min89123 = tf.keras.layers.Input(shape=([2, 2]))
in0Add98361 = tf.keras.layers.Input(shape=([1, 2]))
in1Add98361 = tf.keras.layers.Input(shape=([1, 2]))
in0Sub93133 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in1Sub93133 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in0Ave44958 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in1Ave44958 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in0Sub81927 = tf.keras.layers.Input(shape=([2]))
in1Sub81927 = tf.keras.layers.Input(shape=([2]))
in0Con41063 = tf.keras.layers.Input(shape=([2]))
in0Con77816 = tf.keras.layers.Input(shape=([77]))
in0Con99857 = tf.keras.layers.Input(shape=([3]))

Min89123 = keras.layers.Minimum(name = 'Min89123', )([in0Min89123,in1Min89123])
Add98361 = keras.layers.Add(name = 'Add98361', )([in0Add98361,in1Add98361])
Zer96513 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer96513', )(Add98361)
Ave10629 = keras.layers.Average(name = 'Ave10629', )([Min89123,Zer96513])
Fla8844 = keras.layers.Flatten(name = 'Fla8844', )(Ave10629)
Sub93133 = keras.layers.Subtract(name = 'Sub93133', )([in0Sub93133,in1Sub93133])
Res33792 = keras.layers.Reshape((3, 3, 9), name = 'Res33792', )(Sub93133)
Res50520 = keras.layers.Reshape((3, 27), name = 'Res50520', )(Res33792)
Fla82773 = keras.layers.Flatten(name = 'Fla82773', )(Res50520)
Ave44958 = keras.layers.Average(name = 'Ave44958', )([in0Ave44958,in1Ave44958])
Res32414 = keras.layers.Reshape((2, 1, 2), name = 'Res32414', )(Ave44958)
Res92815 = keras.layers.Reshape((2, 2), name = 'Res92815', )(Res32414)
Fla8915 = keras.layers.Flatten(name = 'Fla8915', )(Res92815)
Sub81927 = keras.layers.Subtract(name = 'Sub81927', )([in0Sub81927,in1Sub81927])
Con41063 = keras.layers.Concatenate(axis=1, name = 'Con41063', )([Sub81927,in0Con41063])
Sub71306 = keras.layers.Subtract(name = 'Sub71306', )([Fla8915,Con41063])
Con77816 = keras.layers.Concatenate(axis=1, name = 'Con77816', )([Sub71306,in0Con77816])
Max7643 = keras.layers.Maximum(name = 'Max7643', )([Fla82773,Con77816])
Res43822 = keras.layers.Reshape((81, 1), name = 'Res43822', )(Max7643)
Res3857 = keras.layers.Reshape((81, 1, 1), name = 'Res3857', )(Res43822)
Res5582 = keras.layers.Reshape((81, 1, 1, 1), name = 'Res5582', )(Res3857)
Glo52892 = keras.layers.GlobalAveragePooling3D(name = 'Glo52892', )(Res5582)
Con99857 = keras.layers.Concatenate(axis=1, name = 'Con99857', )([Glo52892,in0Con99857])
Max42887 = keras.layers.Maximum(name = 'Max42887', )([Fla8844,Con99857])
model = tf.keras.models.Model(inputs=[in0Min89123,in1Min89123,in0Add98361,in1Add98361,in0Sub93133,in1Sub93133,in0Ave44958,in1Ave44958,in0Sub81927,in1Sub81927,in0Con41063,in0Con77816,in0Con99857], outputs=Max42887)
in0Min89123 = tf.constant([[[0.2167, 0.1371], [0.9994, 0.9877]]])
in1Min89123 = tf.constant([[[0.2442, 0.6083], [0.8515, 0.5151]]])
in0Add98361 = tf.constant([[[0.375, 0.7315]]])
in1Add98361 = tf.constant([[[0.0445, 0.8488]]])
in0Sub93133 = tf.constant([[[[[0.9319, 0.9334, 0.4037], [0.2026, 0.3977, 0.417], [0.3771, 0.298, 0.8499]], [[0.8816, 0.6844, 0.8816], [0.6859, 0.7856, 0.9033], [0.406, 0.2626, 0.9065]], [[0.5339, 0.3153, 0.4836], [0.2105, 0.7594, 0.5276], [0.552, 0.3366, 0.0707]]], [[[0.388, 0.0795, 0.3174], [0.1611, 0.574, 0.4924], [0.5163, 0.0124, 0.184]], [[0.2078, 0.1393, 0.892], [0.5084, 0.3658, 0.1], [0.0593, 0.7919, 0.9985]], [[0.4575, 0.3409, 0.6319], [0.3945, 0.1291, 0.3751], [0.525, 0.0716, 0.0844]]], [[[0.2481, 0.4744, 0.2109], [0.771, 0.4513, 0.5001], [0.6259, 0.0906, 0.5708]], [[0.3583, 0.3383, 0.8482], [0.8892, 0.7655, 0.6182], [0.2311, 0.1279, 0.9517]], [[0.9056, 0.5375, 0.8847], [0.4197, 0.3805, 0.0743], [0.9348, 0.3755, 0.0673]]]]])
in1Sub93133 = tf.constant([[[[[0.867, 0.4526, 0.4127], [0.2745, 0.5873, 0.3868], [0.6835, 0.853, 0.8908]], [[0.6728, 0.9701, 0.2288], [0.1816, 0.7035, 0.7796], [0.4178, 0.6697, 0.4968]], [[0.8331, 0.2584, 0.4741], [0.2926, 0.0898, 0.9175], [0.4373, 0.8967, 0.7545]]], [[[0.3131, 0.265, 0.9434], [0.5553, 0.4795, 0.5797], [0.3941, 0.9423, 0.0525]], [[0.4893, 0.0117, 0.7625], [0.9943, 0.3085, 0.2523], [0.3928, 0.3961, 0.1438]], [[0.0043, 0.2767, 0.6976], [0.1556, 0.8685, 0.3043], [0.9446, 0.4437, 0.2241]]], [[[0.4962, 0.7689, 0.6683], [0.1501, 0.0128, 0.6219], [0.7143, 0.3869, 0.5923]], [[0.4156, 0.9349, 0.9105], [0.1414, 0.1342, 0.7693], [0.3674, 0.353, 0.1686]], [[0.8179, 0.5698, 0.9035], [0.0936, 0.782, 0.4884], [0.9953, 0.36, 0.0254]]]]])
in0Ave44958 = tf.constant([[[[[0.6956], [0.7541]]], [[[0.9059], [0.9011]]]]])
in1Ave44958 = tf.constant([[[[[0.0094], [0.2637]]], [[[0.0057], [0.3985]]]]])
in0Sub81927 = tf.constant([[0.1683, 0.8269]])
in1Sub81927 = tf.constant([[0.7671, 0.117]])
in0Con41063 = tf.constant([[0.493, 0.8881]])
in0Con77816 = tf.constant([[0.4142, 0.5848, 0.6229, 0.1011, 0.005, 0.9415, 0.4911, 0.2616, 0.8042, 0.6122, 0.1137, 0.0664, 0.1935, 0.4713, 0.6497, 0.7808, 0.0327, 0.5323, 0.7585, 0.8566, 0.1024, 0.2922, 0.9742, 0.5854, 0.3699, 0.4726, 0.9863, 0.6582, 0.4023, 0.2353, 0.9071, 0.1702, 0.707, 0.1286, 0.0744, 0.4301, 0.5124, 0.7327, 0.1896, 0.784, 0.5217, 0.2172, 0.6236, 0.5501, 0.4673, 0.7964, 0.5363, 0.0751, 0.8742, 0.3739, 0.0502, 0.8666, 0.3013, 0.507, 0.0943, 0.7384, 0.4697, 0.1859, 0.6925, 0.91, 0.111, 0.8263, 0.4084, 0.0426, 0.073, 0.301, 0.3786, 0.2685, 0.2047, 0.8008, 0.8668, 0.3669, 0.8093, 0.8055, 0.5547, 0.3806, 0.0018]])
in0Con99857 = tf.constant([[0.9193, 0.2514, 0.2301]])
print (np.array2string(model.predict([in0Min89123,in1Min89123,in0Add98361,in1Add98361,in0Sub93133,in1Sub93133,in0Ave44958,in1Ave44958,in0Sub81927,in1Sub81927,in0Con41063,in0Con77816,in0Con99857],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max42887.png')

LMin89123 = minimum_layer([[[[0.2167, 0.1371], [0.9994, 0.9877]]], [[[0.2442, 0.6083], [0.8515, 0.5151]]]], Min89123), 
LAdd98361 = add_layer([[[[0.375, 0.7315]]], [[[0.0445, 0.8488]]]], Add98361), 
LZer96513 = zero_padding1D_layer(Add98361, 1, 0, Zer96513), 
LAve10629 = average_layer([Min89123,Zer96513], Ave10629), 
LFla8844 = flatten_layer(Ave10629, Fla8844), 
LSub93133 = subtract_layer([[[[[0.9319, 0.9334, 0.4037], [0.2026, 0.3977, 0.417], [0.3771, 0.298, 0.8499]], [[0.8816, 0.6844, 0.8816], [0.6859, 0.7856, 0.9033], [0.406, 0.2626, 0.9065]], [[0.5339, 0.3153, 0.4836], [0.2105, 0.7594, 0.5276], [0.552, 0.3366, 0.0707]]], [[[0.388, 0.0795, 0.3174], [0.1611, 0.574, 0.4924], [0.5163, 0.0124, 0.184]], [[0.2078, 0.1393, 0.892], [0.5084, 0.3658, 0.1], [0.0593, 0.7919, 0.9985]], [[0.4575, 0.3409, 0.6319], [0.3945, 0.1291, 0.3751], [0.525, 0.0716, 0.0844]]], [[[0.2481, 0.4744, 0.2109], [0.771, 0.4513, 0.5001], [0.6259, 0.0906, 0.5708]], [[0.3583, 0.3383, 0.8482], [0.8892, 0.7655, 0.6182], [0.2311, 0.1279, 0.9517]], [[0.9056, 0.5375, 0.8847], [0.4197, 0.3805, 0.0743], [0.9348, 0.3755, 0.0673]]]]], [[[[[0.867, 0.4526, 0.4127], [0.2745, 0.5873, 0.3868], [0.6835, 0.853, 0.8908]], [[0.6728, 0.9701, 0.2288], [0.1816, 0.7035, 0.7796], [0.4178, 0.6697, 0.4968]], [[0.8331, 0.2584, 0.4741], [0.2926, 0.0898, 0.9175], [0.4373, 0.8967, 0.7545]]], [[[0.3131, 0.265, 0.9434], [0.5553, 0.4795, 0.5797], [0.3941, 0.9423, 0.0525]], [[0.4893, 0.0117, 0.7625], [0.9943, 0.3085, 0.2523], [0.3928, 0.3961, 0.1438]], [[0.0043, 0.2767, 0.6976], [0.1556, 0.8685, 0.3043], [0.9446, 0.4437, 0.2241]]], [[[0.4962, 0.7689, 0.6683], [0.1501, 0.0128, 0.6219], [0.7143, 0.3869, 0.5923]], [[0.4156, 0.9349, 0.9105], [0.1414, 0.1342, 0.7693], [0.3674, 0.353, 0.1686]], [[0.8179, 0.5698, 0.9035], [0.0936, 0.782, 0.4884], [0.9953, 0.36, 0.0254]]]]], Sub93133), 
LRes33792 = reshape_layer(Sub93133, [3, 3, 9], Res33792), 
LRes50520 = reshape_layer(Res33792, [3, 27], Res50520), 
LFla82773 = flatten_layer(Res50520, Fla82773), 
LAve44958 = average_layer([[[[[[0.6956], [0.7541]]], [[[0.9059], [0.9011]]]]], [[[[[0.0094], [0.2637]]], [[[0.0057], [0.3985]]]]]], Ave44958), 
LRes32414 = reshape_layer(Ave44958, [2, 1, 2], Res32414), 
LRes92815 = reshape_layer(Res32414, [2, 2], Res92815), 
LFla8915 = flatten_layer(Res92815, Fla8915), 
LSub81927 = subtract_layer([[0.1683, 0.8269]], [[0.7671, 0.117]], Sub81927), 
LCon41063 = concatenate_layer([Sub81927,[[0.493, 0.8881]]], 1, Con41063), 
LSub71306 = subtract_layer(Fla8915,Con41063, Sub71306), 
LCon77816 = concatenate_layer([Sub71306,[[0.4142, 0.5848, 0.6229, 0.1011, 0.005, 0.9415, 0.4911, 0.2616, 0.8042, 0.6122, 0.1137, 0.0664, 0.1935, 0.4713, 0.6497, 0.7808, 0.0327, 0.5323, 0.7585, 0.8566, 0.1024, 0.2922, 0.9742, 0.5854, 0.3699, 0.4726, 0.9863, 0.6582, 0.4023, 0.2353, 0.9071, 0.1702, 0.707, 0.1286, 0.0744, 0.4301, 0.5124, 0.7327, 0.1896, 0.784, 0.5217, 0.2172, 0.6236, 0.5501, 0.4673, 0.7964, 0.5363, 0.0751, 0.8742, 0.3739, 0.0502, 0.8666, 0.3013, 0.507, 0.0943, 0.7384, 0.4697, 0.1859, 0.6925, 0.91, 0.111, 0.8263, 0.4084, 0.0426, 0.073, 0.301, 0.3786, 0.2685, 0.2047, 0.8008, 0.8668, 0.3669, 0.8093, 0.8055, 0.5547, 0.3806, 0.0018]]], 1, Con77816), 
LMax7643 = maximum_layer([Fla82773,Con77816], Max7643), 
LRes43822 = reshape_layer(Max7643, [81, 1], Res43822), 
LRes3857 = reshape_layer(Res43822, [81, 1, 1], Res3857), 
LRes5582 = reshape_layer(Res3857, [81, 1, 1, 1], Res5582), 
LGlo52892 = global_average_pooling3D_layer(Res5582, Glo52892), 
LCon99857 = concatenate_layer([Glo52892,[[0.9193, 0.2514, 0.2301]]], 1, Con99857), 
LMax42887 = maximum_layer([Fla8844,Con99857], Max42887), 
exec_layers([LMin89123,LAdd98361,LZer96513,LAve10629,LFla8844,LSub93133,LRes33792,LRes50520,LFla82773,LAve44958,LRes32414,LRes92815,LFla8915,LSub81927,LCon41063,LSub71306,LCon77816,LMax7643,LRes43822,LRes3857,LRes5582,LGlo52892,LCon99857,LMax42887],["Min89123","Add98361","Zer96513","Ave10629","Fla8844","Sub93133","Res33792","Res50520","Fla82773","Ave44958","Res32414","Res92815","Fla8915","Sub81927","Con41063","Sub71306","Con77816","Max7643","Res43822","Res3857","Res5582","Glo52892","Con99857","Max42887"],Max42887,"Max42887")

Actual (Unparsed): [[0.4986531, 0.9193000, 0.6355000, 1.0477000]]

Expected (Unparsed): [[0.49865308641975303,0.9193,0.6355,1.0477]]

Actual:   [[0.4987, 0.9193, 0.6355, 1.0477]]

Expected: [[0.4987, 0.9193, 0.6355, 1.0477]]