import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer81681 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Glo71528 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con19073 = tf.keras.layers.Input(shape=([3, 11]))

Zer81681 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer81681', )(in0Zer81681)
Thr96269 = keras.layers.ThresholdedReLU(theta=4.047743359871351, name = 'Thr96269', )(Zer81681)
Res21207 = keras.layers.Reshape((3, 4, 3), name = 'Res21207', )(Thr96269)
Res62531 = keras.layers.Reshape((3, 12), name = 'Res62531', )(Res21207)
Glo71528 = keras.layers.GlobalMaxPool2D(name = 'Glo71528', )(in0Glo71528)
Res6141 = keras.layers.Reshape((1, 1), name = 'Res6141', )(Glo71528)
Sim88421 = keras.layers.SimpleRNN(1,name = 'Sim88421', )(Res6141)
Res90694 = keras.layers.Reshape((1, 1), name = 'Res90694', )(Sim88421)
Ave59100 = keras.layers.AveragePooling1D(pool_size=(1), name = 'Ave59100', )(Res90694)
Zer4012 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer4012', )(Ave59100)
Con19073 = keras.layers.Concatenate(axis=2, name = 'Con19073', )([Zer4012,in0Con19073])
Add84414 = keras.layers.Add(name = 'Add84414', )([Res62531,Con19073])
model = tf.keras.models.Model(inputs=[in0Zer81681,in0Glo71528,in0Con19073], outputs=Add84414)
w = model.get_layer('Sim88421').get_weights() 
w[0] = np.array([[10]])
w[1] = np.array([[5]])
w[2] = np.array([9])
model.get_layer('Sim88421').set_weights(w) 
in0Zer81681 = tf.constant([[[[[1.8084]], [[1.3215]]]]])
in0Glo71528 = tf.constant([[[[1.4525], [1.5951]], [[1.767], [1.9343]]]])
in0Con19073 = tf.constant([[[0.9868, 0.1124, 0.3899, 0.6131, 0.8034, 0.9865, 0.1698, 0.3174, 0.3624, 0.474, 0.2938], [0.656, 0.4748, 0.5159, 0.9844, 0.7568, 0.3606, 0.5907, 0.0369, 0.0916, 0.9366, 0.3138], [0.7077, 0.8968, 0.8064, 0.6534, 0.3806, 0.5797, 0.2919, 0.6494, 0.9669, 0.3091, 0.3721]]])
print (np.array2string(model.predict([in0Zer81681,in0Glo71528,in0Con19073],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add84414.png')

LZer81681 = zero_padding3D_layer([[[[[1.8084]], [[1.3215]]]]], 1, 1, 1, 1, 1, 1, Zer81681), 
LThr96269 = thresholded_relu_layer(Zer81681, 4.047743359871351, Thr96269), 
LRes21207 = reshape_layer(Thr96269, [3, 4, 3], Res21207), 
LRes62531 = reshape_layer(Res21207, [3, 12], Res62531), 
LGlo71528 = global_max_pool2D_layer([[[[1.4525], [1.5951]], [[1.767], [1.9343]]]], Glo71528), 
LRes6141 = reshape_layer(Glo71528, [1, 1], Res6141), 
LSim88421 = simple_rnn_layer(Res6141,[[10]],[[5]],[9], Sim88421), 
LRes90694 = reshape_layer(Sim88421, [1, 1], Res90694), 
LAve59100 = average_pooling1D_layer(Res90694, 1, Ave59100), 
LZer4012 = zero_padding1D_layer(Ave59100, 2, 0, Zer4012), 
LCon19073 = concatenate_layer([Zer4012,[[[0.9868, 0.1124, 0.3899, 0.6131, 0.8034, 0.9865, 0.1698, 0.3174, 0.3624, 0.474, 0.2938], [0.656, 0.4748, 0.5159, 0.9844, 0.7568, 0.3606, 0.5907, 0.0369, 0.0916, 0.9366, 0.3138], [0.7077, 0.8968, 0.8064, 0.6534, 0.3806, 0.5797, 0.2919, 0.6494, 0.9669, 0.3091, 0.3721]]]], 2, Con19073), 
LAdd84414 = add_layer([Res62531,Con19073], Add84414), 
exec_layers([LZer81681,LThr96269,LRes21207,LRes62531,LGlo71528,LRes6141,LSim88421,LRes90694,LAve59100,LZer4012,LCon19073,LAdd84414],["Zer81681","Thr96269","Res21207","Res62531","Glo71528","Res6141","Sim88421","Res90694","Ave59100","Zer4012","Con19073","Add84414"],Add84414,"Add84414")

Actual (Unparsed): [[[0.0000000, 0.9868000, 0.1124000, 0.3899000, 0.6131000, 0.8034000, 0.9865000, 0.1698000, 0.3174000, 0.3624000, 0.4740000, 0.2938000], [0.0000000, 0.6560000, 0.4748000, 0.5159000, 0.9844000, 0.7568000, 0.3606000, 0.5907000, 0.0369000, 0.0916000, 0.9366000, 0.3138000], [1.0000000, 0.7077000, 0.8968000, 0.8064000, 0.6534000, 0.3806000, 0.5797000, 0.2919000, 0.6494000, 0.9669000, 0.3091000, 0.3721000]]]

Expected (Unparsed): [[[0,0.9868,0.1124,0.3899,0.6131,0.8034,0.9865,0.1698,0.3174,0.3624,0.474,0.2938],[0,0.656,0.4748,0.5159,0.9844,0.7568,0.3606,0.5907,0.0369,0.0916,0.9366,0.3138],[1.0,0.7077,0.8968,0.8064,0.6534,0.3806,0.5797,0.2919,0.6494,0.9669,0.3091,0.3721]]]

Actual:   [[[0, 0.9868, 0.1124, 0.3899, 0.6131, 0.8034, 0.9865, 0.1698, 0.3174, 0.3624, 0.474, 0.2938], [0, 0.656, 0.4748, 0.5159, 0.9844, 0.7568, 0.3606, 0.5907, 0.0369, 0.0916, 0.9366, 0.3138], [1, 0.7077, 0.8968, 0.8064, 0.6534, 0.3806, 0.5797, 0.2919, 0.6494, 0.9669, 0.3091, 0.3721]]]

Expected: [[[0, 0.9868, 0.1124, 0.3899, 0.6131, 0.8034, 0.9865, 0.1698, 0.3174, 0.3624, 0.474, 0.2938], [0, 0.656, 0.4748, 0.5159, 0.9844, 0.7568, 0.3606, 0.5907, 0.0369, 0.0916, 0.9366, 0.3138], [1, 0.7077, 0.8968, 0.8064, 0.6534, 0.3806, 0.5797, 0.2919, 0.6494, 0.9669, 0.3091, 0.3721]]]