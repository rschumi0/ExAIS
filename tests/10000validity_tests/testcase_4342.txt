import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub51381 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in1Sub51381 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in0Glo50831 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con41553 = tf.keras.layers.Input(shape=([3, 3, 3, 1]))
in0Glo22355 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in0Con73118 = tf.keras.layers.Input(shape=([79]))

Sub51381 = keras.layers.Subtract(name = 'Sub51381', )([in0Sub51381,in1Sub51381])
Glo50831 = keras.layers.GlobalMaxPool2D(name = 'Glo50831', )(in0Glo50831)
Res79523 = keras.layers.Reshape((1, 1), name = 'Res79523', )(Glo50831)
Res10649 = keras.layers.Reshape((1, 1, 1), name = 'Res10649', )(Res79523)
Res89915 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res89915', )(Res10649)
Con47658 = keras.layers.Conv3D(2, (1, 1, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con47658', )(Res89915)
Zer95515 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (2, 0)), name = 'Zer95515', )(Con47658)
Con41553 = keras.layers.Concatenate(axis=4, name = 'Con41553', )([Zer95515,in0Con41553])
Mul41162 = keras.layers.Multiply(name = 'Mul41162', )([Sub51381,Con41553])
Res1413 = keras.layers.Reshape((3, 3, 9), name = 'Res1413', )(Mul41162)
Res79775 = keras.layers.Reshape((3, 27), name = 'Res79775', )(Res1413)
Fla22057 = keras.layers.Flatten(name = 'Fla22057', )(Res79775)
Glo22355 = keras.layers.GlobalAveragePooling3D(name = 'Glo22355', )(in0Glo22355)
Con73118 = keras.layers.Concatenate(axis=1, name = 'Con73118', )([Glo22355,in0Con73118])
Mul84872 = keras.layers.Multiply(name = 'Mul84872', )([Fla22057,Con73118])
model = tf.keras.models.Model(inputs=[in0Sub51381,in1Sub51381,in0Glo50831,in0Con41553,in0Glo22355,in0Con73118], outputs=Mul84872)
w = model.get_layer('Con47658').get_weights() 
w[0] = np.array([[[[[0.5563, 0.2046]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con47658').set_weights(w) 
in0Sub51381 = tf.constant([[[[[0.8039, 0.6636, 0.1509], [0.0191, 0.1842, 0.0771], [0.1589, 0.166, 0.548]], [[0.3924, 0.0497, 0.4068], [0.4368, 0.4801, 0.3127], [0.3032, 0.9139, 0.8889]], [[0.3831, 0.915, 0.9123], [0.3805, 0.3368, 0.354], [0.0269, 0.1196, 0.7105]]], [[[0.1191, 0.436, 0.6572], [0.6083, 0.4837, 0.563], [0.6493, 0.7578, 0.7185]], [[0.4224, 0.7262, 0.5916], [0.6033, 0.334, 0.0423], [0.7484, 0.5055, 0.834]], [[0.8199, 0.6078, 0.2846], [0.1639, 0.6336, 0.6083], [0.4196, 0.6759, 0.2704]]], [[[0.1287, 0.0517, 0.8578], [0.7521, 0.6592, 0.0815], [0.4512, 0.5054, 0.835]], [[0.0699, 0.313, 0.7278], [0.6621, 0.453, 0.2536], [0.7123, 0.9238, 0.4993]], [[0.0743, 0.2648, 0.3253], [0.5154, 0.4224, 0.3786], [0.4075, 0.0343, 0.8833]]]]])
in1Sub51381 = tf.constant([[[[[0.0128, 0.6398, 0.1119], [0.9372, 0.1642, 0.3894], [0.3978, 0.0236, 0.4179]], [[0.6554, 0.349, 0.9754], [0.8148, 0.5559, 0.8104], [0.5113, 0.1868, 0.5608]], [[0.1998, 0.3111, 0.0711], [0.3732, 0.7025, 0.4326], [0.9436, 0.1814, 0.2061]]], [[[0.4797, 0.7825, 0.7262], [0.1908, 0.979, 0.9143], [0.2569, 0.4211, 0.8833]], [[0.6816, 0.9888, 0.0876], [0.9809, 0.7184, 0.1133], [0.9897, 0.2651, 0.5267]], [[0.7635, 0.4624, 0.99], [0.6011, 0.592, 0.0093], [0.2257, 0.5695, 0.778]]], [[[0.0256, 0.2121, 0.6879], [0.3494, 0.5667, 0.7093], [0.5543, 0.6784, 0.8543]], [[0.8403, 0.0937, 0.8896], [0.0942, 0.6345, 0.7067], [0.7055, 0.2286, 0.5896]], [[0.9676, 0.9451, 0.4417], [0.0954, 0.4185, 0.4946], [0.599, 0.4839, 0.8065]]]]])
in0Glo50831 = tf.constant([[[[1.0668], [1.3068]]]])
in0Con41553 = tf.constant([[[[[0.7706], [0.5804], [0.2123]], [[0.2302], [0.5739], [0.1069]], [[0.3773], [0.1669], [0.6072]]], [[[0.9416], [0.9429], [0.6914]], [[0.6428], [0.0298], [0.8671]], [[0.5998], [0.2954], [0.6178]]], [[[0.0526], [0.8112], [0.1109]], [[0.0345], [0.7851], [0.2627]], [[0.6472], [0.5786], [0.9717]]]]])
in0Glo22355 = tf.constant([[[[[1.8096, 1.5855]], [[1.485, 1.954]]]]])
in0Con73118 = tf.constant([[0.391, 0.4064, 0.8751, 0.762, 0.3403, 0.5085, 0.0814, 0.1881, 0.3138, 0.5294, 0.3325, 0.0937, 0.9001, 0.1445, 0.4286, 0.5686, 0.4326, 0.0295, 0.1535, 0.8946, 0.0496, 0.8556, 0.2483, 0.5869, 0.9554, 0.5673, 0.986, 0.1251, 0.9291, 0.4518, 0.3023, 0.3404, 0.3296, 0.6218, 0.5251, 0.054, 0.067, 0.921, 0.3654, 0.9643, 0.2752, 0.9383, 0.9788, 0.9738, 0.7052, 0.7685, 0.5894, 0.1134, 0.1846, 0.3929, 0.3791, 0.973, 0.8372, 0.0713, 0.089, 0.0814, 0.1436, 0.9327, 0.0529, 0.9891, 0.3373, 0.0323, 0.1904, 0.9056, 0.0762, 0.503, 0.821, 0.6149, 0.8099, 0.0699, 0.0337, 0.0548, 0.7682, 0.1206, 0.7394, 0.3795, 0.0388, 0.7277, 0.471]])
print (np.array2string(model.predict([in0Sub51381,in1Sub51381,in0Glo50831,in0Con41553,in0Glo22355,in0Con73118],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul84872.png')

LSub51381 = subtract_layer([[[[[0.8039, 0.6636, 0.1509], [0.0191, 0.1842, 0.0771], [0.1589, 0.166, 0.548]], [[0.3924, 0.0497, 0.4068], [0.4368, 0.4801, 0.3127], [0.3032, 0.9139, 0.8889]], [[0.3831, 0.915, 0.9123], [0.3805, 0.3368, 0.354], [0.0269, 0.1196, 0.7105]]], [[[0.1191, 0.436, 0.6572], [0.6083, 0.4837, 0.563], [0.6493, 0.7578, 0.7185]], [[0.4224, 0.7262, 0.5916], [0.6033, 0.334, 0.0423], [0.7484, 0.5055, 0.834]], [[0.8199, 0.6078, 0.2846], [0.1639, 0.6336, 0.6083], [0.4196, 0.6759, 0.2704]]], [[[0.1287, 0.0517, 0.8578], [0.7521, 0.6592, 0.0815], [0.4512, 0.5054, 0.835]], [[0.0699, 0.313, 0.7278], [0.6621, 0.453, 0.2536], [0.7123, 0.9238, 0.4993]], [[0.0743, 0.2648, 0.3253], [0.5154, 0.4224, 0.3786], [0.4075, 0.0343, 0.8833]]]]], [[[[[0.0128, 0.6398, 0.1119], [0.9372, 0.1642, 0.3894], [0.3978, 0.0236, 0.4179]], [[0.6554, 0.349, 0.9754], [0.8148, 0.5559, 0.8104], [0.5113, 0.1868, 0.5608]], [[0.1998, 0.3111, 0.0711], [0.3732, 0.7025, 0.4326], [0.9436, 0.1814, 0.2061]]], [[[0.4797, 0.7825, 0.7262], [0.1908, 0.979, 0.9143], [0.2569, 0.4211, 0.8833]], [[0.6816, 0.9888, 0.0876], [0.9809, 0.7184, 0.1133], [0.9897, 0.2651, 0.5267]], [[0.7635, 0.4624, 0.99], [0.6011, 0.592, 0.0093], [0.2257, 0.5695, 0.778]]], [[[0.0256, 0.2121, 0.6879], [0.3494, 0.5667, 0.7093], [0.5543, 0.6784, 0.8543]], [[0.8403, 0.0937, 0.8896], [0.0942, 0.6345, 0.7067], [0.7055, 0.2286, 0.5896]], [[0.9676, 0.9451, 0.4417], [0.0954, 0.4185, 0.4946], [0.599, 0.4839, 0.8065]]]]], Sub51381), 
LGlo50831 = global_max_pool2D_layer([[[[1.0668], [1.3068]]]], Glo50831), 
LRes79523 = reshape_layer(Glo50831, [1, 1], Res79523), 
LRes10649 = reshape_layer(Res79523, [1, 1, 1], Res10649), 
LRes89915 = reshape_layer(Res10649, [1, 1, 1, 1], Res89915), 
LCon47658 = conv3D_layer(Res89915, 1, 1, 1,[[[[[0.5563, 0.2046]]]]],[0, 0], 1, 1, 1, false, 1, 1, 1, Con47658), 
LZer95515 = zero_padding3D_layer(Con47658, 2, 0, 2, 0, 2, 0, Zer95515), 
LCon41553 = concatenate_layer([Zer95515,[[[[[0.7706], [0.5804], [0.2123]], [[0.2302], [0.5739], [0.1069]], [[0.3773], [0.1669], [0.6072]]], [[[0.9416], [0.9429], [0.6914]], [[0.6428], [0.0298], [0.8671]], [[0.5998], [0.2954], [0.6178]]], [[[0.0526], [0.8112], [0.1109]], [[0.0345], [0.7851], [0.2627]], [[0.6472], [0.5786], [0.9717]]]]]], 4, Con41553), 
LMul41162 = multiply_layer([Sub51381,Con41553], Mul41162), 
LRes1413 = reshape_layer(Mul41162, [3, 3, 9], Res1413), 
LRes79775 = reshape_layer(Res1413, [3, 27], Res79775), 
LFla22057 = flatten_layer(Res79775, Fla22057), 
LGlo22355 = global_average_pooling3D_layer([[[[[1.8096, 1.5855]], [[1.485, 1.954]]]]], Glo22355), 
LCon73118 = concatenate_layer([Glo22355,[[0.391, 0.4064, 0.8751, 0.762, 0.3403, 0.5085, 0.0814, 0.1881, 0.3138, 0.5294, 0.3325, 0.0937, 0.9001, 0.1445, 0.4286, 0.5686, 0.4326, 0.0295, 0.1535, 0.8946, 0.0496, 0.8556, 0.2483, 0.5869, 0.9554, 0.5673, 0.986, 0.1251, 0.9291, 0.4518, 0.3023, 0.3404, 0.3296, 0.6218, 0.5251, 0.054, 0.067, 0.921, 0.3654, 0.9643, 0.2752, 0.9383, 0.9788, 0.9738, 0.7052, 0.7685, 0.5894, 0.1134, 0.1846, 0.3929, 0.3791, 0.973, 0.8372, 0.0713, 0.089, 0.0814, 0.1436, 0.9327, 0.0529, 0.9891, 0.3373, 0.0323, 0.1904, 0.9056, 0.0762, 0.503, 0.821, 0.6149, 0.8099, 0.0699, 0.0337, 0.0548, 0.7682, 0.1206, 0.7394, 0.3795, 0.0388, 0.7277, 0.471]]], 1, Con73118), 
LMul84872 = multiply_layer([Fla22057,Con73118], Mul84872), 
exec_layers([LSub51381,LGlo50831,LRes79523,LRes10649,LRes89915,LCon47658,LZer95515,LCon41553,LMul41162,LRes1413,LRes79775,LFla22057,LGlo22355,LCon73118,LMul84872],["Sub51381","Glo50831","Res79523","Res10649","Res89915","Con47658","Zer95515","Con41553","Mul41162","Res1413","Res79775","Fla22057","Glo22355","Con73118","Mul84872"],Mul84872,"Mul84872")

Actual (Unparsed): [[0.0000000, 0.0000000, 0.0117509, -0.0000000, 0.0000000, -0.1381193, -0.0000000, 0.0000000, 0.0022483, -0.0000000, -0.0000000, -0.0692941, -0.0000000, -0.0000000, -0.2570956, -0.0000000, 0.0000000, 0.0199430, 0.0000000, 0.0000000, 0.0487186, 0.0000000, -0.0000000, -0.0112240, -0.0000000, -0.0000000, 0.2926120, -0.0000000, -0.0000000, -0.0081278, 0.0000000, -0.0000000, -0.1001341, 0.0000000, 0.0000000, -0.0708496, -0.0000000, -0.0000000, 0.0217061, -0.0000000, -0.0000000, -0.0020403, -0.0000000, 0.0000000, 0.2608109, 0.0000000, 0.0000000, -0.3251515, -0.0000000, 0.0000000, 0.0326640, 0.0000000, 0.0000000, -0.3051282, 0.0000000, -0.0000000, 0.0007954, 0.0000000, 0.0000000, -0.4749974, -0.0000000, -0.0000000, -0.0007219, -0.0000000, 0.0000000, -0.0050551, 0.0000000, -0.0000000, -0.2920534, 0.0000000, 0.0000000, -0.0016582, -0.0000000, -0.0000000, -0.0578716, 0.0000000, 0.0000000, -0.0254711, -0.0054016, -0.0874769, 0.0351491]]

Expected (Unparsed): [[0.0,0.0,0.011750879400000002,-0.0,0.0,-0.13811929704,-0.0,0.0,0.002248286722000001,-0.0,-0.0,-0.06929407656799999,-0.0,-0.0,-0.257095590003,-0.0,0.0,0.019943013854,0.0,0.0,0.04871856066,0.0,-0.0,-0.011224051704,-0.0,-0.0,0.29261196307199994,-0.0,-0.0,-0.008127797039999994,0.0,-0.0,-0.10013408477100001,0.0,0.0,-0.07084958329599998,-0.0,-0.0,0.021706070400000003,-0.0,-0.0,-0.0020402659400000005,-0.0,0.0,0.260810881604,0.0,0.0,-0.32515152002,-0.0,0.0,0.03266397315999999,0.0,0.0,-0.30512820744,0.0,-0.0,0.0007953698600000001,0.0,0.0,-0.47499739747200004,-0.0,-0.0,-0.0007219468009999994,-0.0,0.0,-0.005055149759999999,0.0,-0.0,-0.29205335300999996,0.0,0.0,-0.0016581545189999999,-0.0,-0.0,-0.057871640256,0.0,0.0,-0.0254711292,-0.005401553595768,-0.0874769097730176,0.03514910975999999]]

Actual:   [[0, 0, 0.0118, -0, 0, -0.1381, -0, 0, 0.0023, -0, -0, -0.0692, -0, -0, -0.257, -0, 0, 0.02, 0, 0, 0.0488, 0, -0, -0.0112, -0, -0, 0.2927, -0, -0, -0.0081, 0, -0, -0.1001, 0, 0, -0.0708, -0, -0, 0.0218, -0, -0, -0.002, -0, 0, 0.2609, 0, 0, -0.3251, -0, 0, 0.0327, 0, 0, -0.3051, 0, -0, 0.0008, 0, 0, -0.4749, -0, -0, -0.0007, -0, 0, -0.005, 0, -0, -0.292, 0, 0, -0.0016, -0, -0, -0.0578, 0, 0, -0.0254, -0.0054, -0.0874, 0.0352]]

Expected: [[0, 0, 0.0118, -0, 0, -0.1381, -0, 0, 0.0023, -0, -0, -0.0692, -0, -0, -0.257, -0, 0, 0.02, 0, 0, 0.0488, 0, -0, -0.0112, -0, -0, 0.2927, -0, -0, -0.0081, 0, -0, -0.1001, 0, 0, -0.0708, -0, -0, 0.0218, -0, -0, -0.002, -0, 0, 0.2609, 0, 0, -0.3251, -0, 0, 0.0327, 0, 0, -0.3051, 0, -0, 0.0008, 0, 0, -0.4749, -0, -0, -0.0007, -0, 0, -0.005, 0, -0, -0.292, 0, 0, -0.0016, -0, -0, -0.0578, 0, 0, -0.0254, -0.0054, -0.0874, 0.0352]]