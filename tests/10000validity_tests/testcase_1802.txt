import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min50795 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Min50795 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con35432 = tf.keras.layers.Input(shape=([6]))
in0Mul98282 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Mul98282 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Glo10130 = tf.keras.layers.Input(shape=([2, 1]))
in0Con96827 = tf.keras.layers.Input(shape=([7]))
in0Con88834 = tf.keras.layers.Input(shape=([3, 3, 2]))
in0Bat62046 = tf.keras.layers.Input(shape=([3, 3]))
in0Con94268 = tf.keras.layers.Input(shape=([3, 3, 2]))
in0Cro39285 = tf.keras.layers.Input(shape=([3, 3, 3]))

Min50795 = keras.layers.Minimum(name = 'Min50795', )([in0Min50795,in1Min50795])
Res63972 = keras.layers.Reshape((2, 1), name = 'Res63972', )(Min50795)
Fla24180 = keras.layers.Flatten(name = 'Fla24180', )(Res63972)
Con35432 = keras.layers.Concatenate(axis=1, name = 'Con35432', )([Fla24180,in0Con35432])
Mul98282 = keras.layers.Multiply(name = 'Mul98282', )([in0Mul98282,in1Mul98282])
Res25305 = keras.layers.Reshape((2, 4), name = 'Res25305', )(Mul98282)
Fla95601 = keras.layers.Flatten(name = 'Fla95601', )(Res25305)
Glo10130 = keras.layers.GlobalMaxPool1D(name = 'Glo10130', )(in0Glo10130)
Con96827 = keras.layers.Concatenate(axis=1, name = 'Con96827', )([Glo10130,in0Con96827])
Ave90094 = keras.layers.Average(name = 'Ave90094', )([Fla95601,Con96827])
Dot76447 = keras.layers.Dot(axes=(1, 1), name = 'Dot76447', )([Con35432,Ave90094])
Res24469 = keras.layers.Reshape((1, 1), name = 'Res24469', )(Dot76447)
Res10177 = keras.layers.Reshape((1, 1, 1), name = 'Res10177', )(Res24469)
Zer7953 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer7953', )(Res10177)
Con88834 = keras.layers.Concatenate(axis=3, name = 'Con88834', )([Zer7953,in0Con88834])
Bat62046 = keras.layers.BatchNormalization(axis=1, epsilon=0.6496987521252422,  name = 'Bat62046', )(in0Bat62046)
Res18216 = keras.layers.Reshape((3, 3, 1), name = 'Res18216', )(Bat62046)
Con94268 = keras.layers.Concatenate(axis=3, name = 'Con94268', )([Res18216,in0Con94268])
Cro39285 = keras.layers.Cropping2D(cropping=((0, 0), (0, 2)), name = 'Cro39285', )(in0Cro39285)
Zer85139 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer85139', )(Cro39285)
Mul24160 = keras.layers.Multiply(name = 'Mul24160', )([Con94268,Zer85139])
Max93199 = keras.layers.Maximum(name = 'Max93199', )([Con88834,Mul24160])
ELU29091 = keras.layers.ELU(alpha=4.574638379192725, name = 'ELU29091', )(Max93199)
model = tf.keras.models.Model(inputs=[in0Min50795,in1Min50795,in0Con35432,in0Mul98282,in1Mul98282,in0Glo10130,in0Con96827,in0Con88834,in0Bat62046,in0Con94268,in0Cro39285], outputs=ELU29091)
w = model.get_layer('Bat62046').get_weights() 
w[0] = np.array([0.2647, 0.7218, 0.2121])
w[1] = np.array([0.0633, 0.5946, 0.095])
w[2] = np.array([0.2701, 0.7903, 0.6215])
w[3] = np.array([0.4673, 0.1923, 0.0875])
model.get_layer('Bat62046').set_weights(w) 
in0Min50795 = tf.constant([[[[0.1954]], [[0.5343]]]])
in1Min50795 = tf.constant([[[[0.3106]], [[0.6196]]]])
in0Con35432 = tf.constant([[0.51, 0.0918, 0.1242, 0.5781, 0.9072, 0.4422]])
in0Mul98282 = tf.constant([[[[0.077, 0.8735], [0.8882, 0.9277]], [[0.8542, 0.9892], [0.5352, 0.0893]]]])
in1Mul98282 = tf.constant([[[[0.5086, 0.0427], [0.0406, 0.9512]], [[0.8048, 0.0931], [0.28, 0.9939]]]])
in0Glo10130 = tf.constant([[[1.5979], [1.817]]])
in0Con96827 = tf.constant([[0.2079, 0.2375, 0.2909, 0.2255, 0.2897, 0.6466, 0.6292]])
in0Con88834 = tf.constant([[[[0.8045, 0.6239], [0.6911, 0.2733], [0.3522, 0.4025]], [[0.5069, 0.7596], [0.6402, 0.1368], [0.9744, 0.2094]], [[0.3051, 0.4883], [0.3533, 0.0696], [0.218, 0.6341]]]])
in0Bat62046 = tf.constant([[[1.7081, 1.1518, 1.7411], [1.0224, 1.9304, 1.9909], [1.874, 1.5714, 1.8785]]])
in0Con94268 = tf.constant([[[[0.0284, 0.3361], [0.0656, 0.2718], [0.6916, 0.1321]], [[0.579, 0.4698], [0.39, 0.0527], [0.5604, 0.1636]], [[0.3701, 0.712], [0.5107, 0.7747], [0.0224, 0.1785]]]])
in0Cro39285 = tf.constant([[[[1.5867, 1.6172, 1.3541], [1.9963, 1.7449, 1.4709], [1.7749, 1.7596, 1.7843]], [[1.0229, 1.8014, 1.7991], [1.9627, 1.9069, 1.0065], [1.8728, 1.7698, 1.3204]], [[1.1896, 1.9429, 1.7302], [1.8131, 1.1018, 1.6535], [1.0676, 1.4819, 1.5183]]]])
print (np.array2string(model.predict([in0Min50795,in1Min50795,in0Con35432,in0Mul98282,in1Mul98282,in0Glo10130,in0Con96827,in0Con88834,in0Bat62046,in0Con94268,in0Cro39285],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='ELU29091.png')

LMin50795 = minimum_layer([[[[[0.1954]], [[0.5343]]]], [[[[0.3106]], [[0.6196]]]]], Min50795), 
LRes63972 = reshape_layer(Min50795, [2, 1], Res63972), 
LFla24180 = flatten_layer(Res63972, Fla24180), 
LCon35432 = concatenate_layer([Fla24180,[[0.51, 0.0918, 0.1242, 0.5781, 0.9072, 0.4422]]], 1, Con35432), 
LMul98282 = multiply_layer([[[[[0.077, 0.8735], [0.8882, 0.9277]], [[0.8542, 0.9892], [0.5352, 0.0893]]]], [[[[0.5086, 0.0427], [0.0406, 0.9512]], [[0.8048, 0.0931], [0.28, 0.9939]]]]], Mul98282), 
LRes25305 = reshape_layer(Mul98282, [2, 4], Res25305), 
LFla95601 = flatten_layer(Res25305, Fla95601), 
LGlo10130 = global_max_pool1D_layer([[[1.5979], [1.817]]], Glo10130), 
LCon96827 = concatenate_layer([Glo10130,[[0.2079, 0.2375, 0.2909, 0.2255, 0.2897, 0.6466, 0.6292]]], 1, Con96827), 
LAve90094 = average_layer([Fla95601,Con96827], Ave90094), 
LDot76447 = dot_layer(Con35432,Ave90094, 1, 1, Dot76447), 
LRes24469 = reshape_layer(Dot76447, [1, 1], Res24469), 
LRes10177 = reshape_layer(Res24469, [1, 1, 1], Res10177), 
LZer7953 = zero_padding2D_layer(Res10177, 2, 0, 2, 0, Zer7953), 
LCon88834 = concatenate_layer([Zer7953,[[[[0.8045, 0.6239], [0.6911, 0.2733], [0.3522, 0.4025]], [[0.5069, 0.7596], [0.6402, 0.1368], [0.9744, 0.2094]], [[0.3051, 0.4883], [0.3533, 0.0696], [0.218, 0.6341]]]]], 3, Con88834), 
LBat62046 = batch_normalization_layer([[[1.7081, 1.1518, 1.7411], [1.0224, 1.9304, 1.9909], [1.874, 1.5714, 1.8785]]], 1, 0.6496987521252422, [0.2647, 0.7218, 0.2121], [0.0633, 0.5946, 0.095], [0.2701, 0.7903, 0.6215], [0.4673, 0.1923, 0.0875], Bat62046), 
LRes18216 = reshape_layer(Bat62046, [3, 3, 1], Res18216), 
LCon94268 = concatenate_layer([Res18216,[[[[0.0284, 0.3361], [0.0656, 0.2718], [0.6916, 0.1321]], [[0.579, 0.4698], [0.39, 0.0527], [0.5604, 0.1636]], [[0.3701, 0.712], [0.5107, 0.7747], [0.0224, 0.1785]]]]], 3, Con94268), 
LCro39285 = cropping2D_layer([[[[1.5867, 1.6172, 1.3541], [1.9963, 1.7449, 1.4709], [1.7749, 1.7596, 1.7843]], [[1.0229, 1.8014, 1.7991], [1.9627, 1.9069, 1.0065], [1.8728, 1.7698, 1.3204]], [[1.1896, 1.9429, 1.7302], [1.8131, 1.1018, 1.6535], [1.0676, 1.4819, 1.5183]]]], 0, 0, 0, 2, Cro39285), 
LZer85139 = zero_padding2D_layer(Cro39285, 0, 0, 2, 0, Zer85139), 
LMul24160 = multiply_layer([Con94268,Zer85139], Mul24160), 
LMax93199 = maximum_layer([Con88834,Mul24160], Max93199), 
LELU29091 = elu_layer(Max93199, 4.574638379192725, ELU29091), 
exec_layers([LMin50795,LRes63972,LFla24180,LCon35432,LMul98282,LRes25305,LFla95601,LGlo10130,LCon96827,LAve90094,LDot76447,LRes24469,LRes10177,LZer7953,LCon88834,LBat62046,LRes18216,LCon94268,LCro39285,LZer85139,LMul24160,LMax93199,LELU29091],["Min50795","Res63972","Fla24180","Con35432","Mul98282","Res25305","Fla95601","Glo10130","Con96827","Ave90094","Dot76447","Res24469","Res10177","Zer7953","Con88834","Bat62046","Res18216","Con94268","Cro39285","Zer85139","Mul24160","Max93199","ELU29091"],ELU29091,"ELU29091")

Actual (Unparsed): [[[[0.0000000, 0.8045000, 0.6239000], [0.0000000, 0.6911000, 0.2733000], [0.6850061, 1.1184556, 0.4025000]], [[0.0000000, 0.5069000, 0.7596000], [0.0000000, 0.6402000, 0.1368000], [1.5742509, 1.0095045, 0.2943328]], [[0.0000000, 0.3051000, 0.4883000], [0.0000000, 0.3533000, 0.0696000], [1.0575305, 0.2180000, 0.6341000]]]]

Expected (Unparsed): [[[[0,0.8045,0.6239],[0,0.6911,0.2733],[0.6850061826348167,1.11845552,0.4025]],[[0,0.5069,0.7596],[0,0.6402,0.1368],[1.574250917334296,1.0095045599999999,0.29433275999999997]],[[0,0.3051,0.4883],[0,0.3533,0.0696],[1.0575304974125,0.218,0.6341]]]]

Actual:   [[[[0, 0.8045, 0.6239], [0, 0.6911, 0.2733], [0.6851, 1.1185, 0.4025]], [[0, 0.5069, 0.7596], [0, 0.6402, 0.1368], [1.5743, 1.0096, 0.2944]], [[0, 0.3051, 0.4883], [0, 0.3533, 0.0696], [1.0576, 0.218, 0.6341]]]]

Expected: [[[[0, 0.8045, 0.6239], [0, 0.6911, 0.2733], [0.6851, 1.1185, 0.4025]], [[0, 0.5069, 0.7596], [0, 0.6402, 0.1368], [1.5743, 1.0096, 0.2944]], [[0, 0.3051, 0.4883], [0, 0.3533, 0.0696], [1.0576, 0.218, 0.6341]]]]