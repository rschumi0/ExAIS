import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub33399 = tf.keras.layers.Input(shape=([3, 3, 3, 2]))
in1Sub33399 = tf.keras.layers.Input(shape=([3, 3, 3, 2]))
in0Glo8270 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con90169 = tf.keras.layers.Input(shape=([25]))
in0Ave72864 = tf.keras.layers.Input(shape=([2, 2, 1, 1]))
in1Ave72864 = tf.keras.layers.Input(shape=([2, 2, 1, 1]))

Sub33399 = keras.layers.Subtract(name = 'Sub33399', )([in0Sub33399,in1Sub33399])
Con2426 = keras.layers.Conv3D(3, (1, 1, 1),strides=(8, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con2426', )(Sub33399)
Res63132 = keras.layers.Reshape((1, 3, 9), name = 'Res63132', )(Con2426)
Res49796 = keras.layers.Reshape((1, 27), name = 'Res49796', )(Res63132)
Fla34657 = keras.layers.Flatten(name = 'Fla34657', )(Res49796)
Glo8270 = keras.layers.GlobalAveragePooling2D(name = 'Glo8270', )(in0Glo8270)
Res41712 = keras.layers.Reshape((1, 1), name = 'Res41712', )(Glo8270)
Res68810 = keras.layers.Reshape((1, 1, 1), name = 'Res68810', )(Res41712)
Dep42122 = keras.layers.DepthwiseConv2D((1, 1),strides=(1, 1), padding='valid', name = 'Dep42122', )(Res68810)
Zer34915 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer34915', )(Dep42122)
Res22049 = keras.layers.Reshape((3, 3), name = 'Res22049', )(Zer34915)
GRU28144 = keras.layers.GRU(2,reset_after=True, recurrent_activation='sigmoid', name = 'GRU28144', )(Res22049)
Con90169 = keras.layers.Concatenate(axis=1, name = 'Con90169', )([GRU28144,in0Con90169])
Sub49214 = keras.layers.Subtract(name = 'Sub49214', )([Fla34657,Con90169])
Res15923 = keras.layers.Reshape((27, 1), name = 'Res15923', )(Sub49214)
Res57607 = keras.layers.Reshape((27, 1, 1), name = 'Res57607', )(Res15923)
Res95593 = keras.layers.Reshape((27, 1, 1, 1), name = 'Res95593', )(Res57607)
Zer90765 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (0, 0)), name = 'Zer90765', )(Res95593)
Ave72864 = keras.layers.Average(name = 'Ave72864', )([in0Ave72864,in1Ave72864])
Zer30630 = keras.layers.ZeroPadding3D(padding=((25, 0), (1, 0), (0, 0)), name = 'Zer30630', )(Ave72864)
Min58128 = keras.layers.Minimum(name = 'Min58128', )([Zer90765,Zer30630])
model = tf.keras.models.Model(inputs=[in0Sub33399,in1Sub33399,in0Glo8270,in0Con90169,in0Ave72864,in1Ave72864], outputs=Min58128)
w = model.get_layer('Con2426').get_weights() 
w[0] = np.array([[[[[0.9272, 0.3984, 0.4199], [0.4325, 0.647, 0.1283]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con2426').set_weights(w) 
w = model.get_layer('Dep42122').get_weights() 
w[0] = np.array([[[[0.5668]]]])
w[1] = np.array([0])
model.get_layer('Dep42122').set_weights(w) 
w = model.get_layer('GRU28144').get_weights() 
w[0] = np.array([[8, 6, 3, 4, 1, 9], [4, 7, 2, 10, 10, 7], [5, 3, 9, 4, 10, 4]])
w[1] = np.array([[4, 8, 7, 8, 6, 2], [3, 6, 4, 3, 6, 5]])
w[2] = np.array([[1, 3, 9, 8, 6, 6], [9, 2, 5, 9, 8, 6]])
model.get_layer('GRU28144').set_weights(w) 
in0Sub33399 = tf.constant([[[[[0.0494, 0.268], [0.6391, 0.3358], [0.1204, 0.1256]], [[0.9782, 0.4166], [0.7707, 0.4701], [0.9854, 0.125]], [[0.0326, 0.4167], [0.3072, 0.015], [0.4584, 0.3329]]], [[[0.2394, 0.3925], [0.4417, 0.7105], [0.8759, 0.5103]], [[0.4304, 0.4126], [0.2592, 0.4761], [0.7989, 0.6472]], [[0.8526, 0.5638], [0.4801, 0.4848], [0.0668, 0.287]]], [[[0.1967, 0.8599], [0.8889, 0.4198], [0.2776, 0.7737]], [[0.8885, 0.1285], [0.5948, 0.8518], [0.0013, 0.5202]], [[0.1189, 0.4984], [0.5318, 0.2036], [0.9489, 0.6388]]]]])
in1Sub33399 = tf.constant([[[[[0.7535, 0.9104], [0.449, 0.4438], [0.3386, 0.8314]], [[0.2966, 0.488], [0.6016, 0.0834], [0.8338, 0.5129]], [[0.2015, 0.6425], [0.0981, 0.3345], [0.517, 0.1556]]], [[[0.3086, 0.4662], [0.3823, 0.2711], [0.3844, 0.7094]], [[0.2479, 0.519], [0.2763, 0.3083], [0.1217, 0.3155]], [[0.5138, 0.26], [0.8349, 0.3639], [0.3834, 0.0251]]], [[[0.276, 0.585], [0.5855, 0.1945], [0.243, 0.7177]], [[0.0481, 0.6315], [0.4723, 0.9037], [0.8141, 0.2338]], [[0.2233, 0.8932], [0.5675, 0.735], [0.518, 0.9897]]]]])
in0Glo8270 = tf.constant([[[[1.4126]]]])
in0Con90169 = tf.constant([[0.7438, 0.2065, 0.7972, 0.1286, 0.8049, 0.2142, 0.9931, 0.1868, 0.4942, 0.8928, 0.4691, 0.3478, 0.2346, 0.8179, 0.738, 0.0504, 0.2636, 0.3728, 0.3854, 0.8792, 0.2898, 0.9251, 0.0864, 0.9312, 0.2828]])
in0Ave72864 = tf.constant([[[[[0.9018]], [[0.7677]]], [[[0.4916]], [[0.9784]]]]])
in1Ave72864 = tf.constant([[[[[0.0731]], [[0.0536]]], [[[0.1801]], [[0.7878]]]]])
print (np.array2string(model.predict([in0Sub33399,in1Sub33399,in0Glo8270,in0Con90169,in0Ave72864,in1Ave72864],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min58128.png')

LSub33399 = subtract_layer([[[[[0.0494, 0.268], [0.6391, 0.3358], [0.1204, 0.1256]], [[0.9782, 0.4166], [0.7707, 0.4701], [0.9854, 0.125]], [[0.0326, 0.4167], [0.3072, 0.015], [0.4584, 0.3329]]], [[[0.2394, 0.3925], [0.4417, 0.7105], [0.8759, 0.5103]], [[0.4304, 0.4126], [0.2592, 0.4761], [0.7989, 0.6472]], [[0.8526, 0.5638], [0.4801, 0.4848], [0.0668, 0.287]]], [[[0.1967, 0.8599], [0.8889, 0.4198], [0.2776, 0.7737]], [[0.8885, 0.1285], [0.5948, 0.8518], [0.0013, 0.5202]], [[0.1189, 0.4984], [0.5318, 0.2036], [0.9489, 0.6388]]]]], [[[[[0.7535, 0.9104], [0.449, 0.4438], [0.3386, 0.8314]], [[0.2966, 0.488], [0.6016, 0.0834], [0.8338, 0.5129]], [[0.2015, 0.6425], [0.0981, 0.3345], [0.517, 0.1556]]], [[[0.3086, 0.4662], [0.3823, 0.2711], [0.3844, 0.7094]], [[0.2479, 0.519], [0.2763, 0.3083], [0.1217, 0.3155]], [[0.5138, 0.26], [0.8349, 0.3639], [0.3834, 0.0251]]], [[[0.276, 0.585], [0.5855, 0.1945], [0.243, 0.7177]], [[0.0481, 0.6315], [0.4723, 0.9037], [0.8141, 0.2338]], [[0.2233, 0.8932], [0.5675, 0.735], [0.518, 0.9897]]]]], Sub33399), 
LCon2426 = conv3D_layer(Sub33399, 1, 1, 1,[[[[[0.9272, 0.3984, 0.4199], [0.4325, 0.647, 0.1283]]]]],[0, 0, 0], 8, 1, 1, false, 1, 1, 1, Con2426), 
LRes63132 = reshape_layer(Con2426, [1, 3, 9], Res63132), 
LRes49796 = reshape_layer(Res63132, [1, 27], Res49796), 
LFla34657 = flatten_layer(Res49796, Fla34657), 
LGlo8270 = global_average_pooling2D_layer([[[[1.4126]]]], Glo8270), 
LRes41712 = reshape_layer(Glo8270, [1, 1], Res41712), 
LRes68810 = reshape_layer(Res41712, [1, 1, 1], Res68810), 
LDep42122 = depthwise_conv2D_layer(Res68810, 1, 1,[[[[0.5668]]]],[0], 1, 1, false, Dep42122), 
LZer34915 = zero_padding2D_layer(Dep42122, 1, 1, 1, 1, Zer34915), 
LRes22049 = reshape_layer(Zer34915, [3, 3], Res22049), 
LGRU28144 = gru_layer(Res22049,[[8, 6, 3, 4, 1, 9], [4, 7, 2, 10, 10, 7], [5, 3, 9, 4, 10, 4]],[[4, 8, 7, 8, 6, 2], [3, 6, 4, 3, 6, 5]],[[1, 3, 9, 8, 6, 6], [9, 2, 5, 9, 8, 6]], true, GRU28144), 
LCon90169 = concatenate_layer([GRU28144,[[0.7438, 0.2065, 0.7972, 0.1286, 0.8049, 0.2142, 0.9931, 0.1868, 0.4942, 0.8928, 0.4691, 0.3478, 0.2346, 0.8179, 0.738, 0.0504, 0.2636, 0.3728, 0.3854, 0.8792, 0.2898, 0.9251, 0.0864, 0.9312, 0.2828]]], 1, Con90169), 
LSub49214 = subtract_layer(Fla34657,Con90169, Sub49214), 
LRes15923 = reshape_layer(Sub49214, [27, 1], Res15923), 
LRes57607 = reshape_layer(Res15923, [27, 1, 1], Res57607), 
LRes95593 = reshape_layer(Res57607, [27, 1, 1, 1], Res95593), 
LZer90765 = zero_padding3D_layer(Res95593, 0, 0, 2, 0, 0, 0, Zer90765), 
LAve72864 = average_layer([[[[[[0.9018]], [[0.7677]]], [[[0.4916]], [[0.9784]]]]], [[[[[0.0731]], [[0.0536]]], [[[0.1801]], [[0.7878]]]]]], Ave72864), 
LZer30630 = zero_padding3D_layer(Ave72864, 25, 0, 1, 0, 0, 0, Zer30630), 
LMin58128 = minimum_layer([Zer90765,Zer30630], Min58128), 
exec_layers([LSub33399,LCon2426,LRes63132,LRes49796,LFla34657,LGlo8270,LRes41712,LRes68810,LDep42122,LZer34915,LRes22049,LGRU28144,LCon90169,LSub49214,LRes15923,LRes57607,LRes95593,LZer90765,LAve72864,LZer30630,LMin58128],["Sub33399","Con2426","Res63132","Res49796","Fla34657","Glo8270","Res41712","Res68810","Dep42122","Zer34915","Res22049","GRU28144","Con90169","Sub49214","Res15923","Res57607","Res95593","Zer90765","Ave72864","Zer30630","Min58128"],Min58128,"Min58128")

Actual (Unparsed): [[[[[0.0000000]], [[0.0000000]], [[-0.9307712]]], [[[0.0000000]], [[0.0000000]], [[-0.7092473]]], [[[0.0000000]], [[0.0000000]], [[-1.1218715]]], [[[0.0000000]], [[0.0000000]], [[-0.0769493]]], [[[0.0000000]], [[0.0000000]], [[-0.7913402]]], [[[0.0000000]], [[0.0000000]], [[-0.0626334]]], [[[0.0000000]], [[0.0000000]], [[-1.3124735]]], [[[0.0000000]], [[0.0000000]], [[-0.7577835]]], [[[0.0000000]], [[0.0000000]], [[-1.1752763]]], [[[0.0000000]], [[0.0000000]], [[0.0000000]]], [[[0.0000000]], [[0.0000000]], [[-0.2688464]]], [[[0.0000000]], [[0.0000000]], [[-0.6157568]]], [[[0.0000000]], [[0.0000000]], [[-0.1450627]]], [[[0.0000000]], [[0.0000000]], [[-0.0302357]]], [[[0.0000000]], [[0.0000000]], [[-0.1139813]]], [[[0.0000000]], [[0.0000000]], [[-0.8451032]]], [[[0.0000000]], [[0.0000000]], [[-0.9285738]]], [[[0.0000000]], [[0.0000000]], [[-0.0365107]]], [[[0.0000000]], [[0.0000000]], [[-0.5178626]]], [[[0.0000000]], [[0.0000000]], [[-0.5861823]]], [[[0.0000000]], [[0.0000000]], [[-0.4852912]]], [[[0.0000000]], [[0.0000000]], [[-0.8235062]]], [[[0.0000000]], [[0.0000000]], [[-0.4132111]]], [[[0.0000000]], [[0.0000000]], [[-0.8782908]]], [[[0.0000000]], [[0.0000000]], [[-0.0640517]]], [[[0.0000000]], [[0.0000000]], [[-0.8398332]]], [[[0.0000000]], [[0.0000000]], [[-0.2846585]]]]]

Expected (Unparsed): [[[[[0]],[[0]],[[-0.9307712082927648]]],[[[0]],[[0]],[[-0.7092473600586748]]],[[[0]],[[0]],[[-1.12187151]]],[[[0]],[[0]],[[-0.07694927999999998]]],[[[0]],[[0]],[[-0.7913401600000001]]],[[[0]],[[0]],[[-0.06263341]]],[[[0]],[[0]],[[-1.31247354]]],[[[0]],[[0]],[[-0.7577834800000001]]],[[[0]],[[0]],[[-1.17527632]]],[[[0]],[[0]],[[0]]],[[[0]],[[0]],[[-0.26884635999999995]]],[[[0]],[[0]],[[-0.6157567800000001]]],[[[0]],[[0]],[[-0.14506272999999997]]],[[[0]],[[0]],[[-0.030235659999999942]]],[[[0]],[[0]],[[-0.1139813]]],[[[0]],[[0]],[[-0.8451032299999999]]],[[[0]],[[0]],[[-0.92857386]]],[[[0]],[[0]],[[-0.03651072999999997]]],[[[0]],[[0]],[[-0.5178625800000001]]],[[[0]],[[0]],[[-0.58618236]]],[[[0]],[[0]],[[-0.48529125]]],[[[0]],[[0]],[[-0.82350623]]],[[[0]],[[0]],[[-0.41321106]]],[[[0]],[[0]],[[-0.8782907600000001]]],[[[0]],[[0]],[[-0.06405167000000006]]],[[[0]],[[0]],[[-0.8398331400000001]]],[[[0]],[[0]],[[-0.28465855]]]]]

Actual:   [[[[[0]], [[0]], [[-0.9307]]], [[[0]], [[0]], [[-0.7092]]], [[[0]], [[0]], [[-1.1218]]], [[[0]], [[0]], [[-0.0769]]], [[[0]], [[0]], [[-0.7913]]], [[[0]], [[0]], [[-0.0626]]], [[[0]], [[0]], [[-1.3124]]], [[[0]], [[0]], [[-0.7577]]], [[[0]], [[0]], [[-1.1752]]], [[[0]], [[0]], [[0]]], [[[0]], [[0]], [[-0.2688]]], [[[0]], [[0]], [[-0.6157]]], [[[0]], [[0]], [[-0.145]]], [[[0]], [[0]], [[-0.0302]]], [[[0]], [[0]], [[-0.1139]]], [[[0]], [[0]], [[-0.8451]]], [[[0]], [[0]], [[-0.9285]]], [[[0]], [[0]], [[-0.0365]]], [[[0]], [[0]], [[-0.5178]]], [[[0]], [[0]], [[-0.5861]]], [[[0]], [[0]], [[-0.4852]]], [[[0]], [[0]], [[-0.8235]]], [[[0]], [[0]], [[-0.4132]]], [[[0]], [[0]], [[-0.8782]]], [[[0]], [[0]], [[-0.064]]], [[[0]], [[0]], [[-0.8398]]], [[[0]], [[0]], [[-0.2846]]]]]

Expected: [[[[[0]], [[0]], [[-0.9307]]], [[[0]], [[0]], [[-0.7092]]], [[[0]], [[0]], [[-1.1218]]], [[[0]], [[0]], [[-0.0769]]], [[[0]], [[0]], [[-0.7913]]], [[[0]], [[0]], [[-0.0626]]], [[[0]], [[0]], [[-1.3124]]], [[[0]], [[0]], [[-0.7577]]], [[[0]], [[0]], [[-1.1752]]], [[[0]], [[0]], [[0]]], [[[0]], [[0]], [[-0.2688]]], [[[0]], [[0]], [[-0.6157]]], [[[0]], [[0]], [[-0.145]]], [[[0]], [[0]], [[-0.0302]]], [[[0]], [[0]], [[-0.1139]]], [[[0]], [[0]], [[-0.8451]]], [[[0]], [[0]], [[-0.9285]]], [[[0]], [[0]], [[-0.0365]]], [[[0]], [[0]], [[-0.5178]]], [[[0]], [[0]], [[-0.5861]]], [[[0]], [[0]], [[-0.4852]]], [[[0]], [[0]], [[-0.8235]]], [[[0]], [[0]], [[-0.4132]]], [[[0]], [[0]], [[-0.8782]]], [[[0]], [[0]], [[-0.064]]], [[[0]], [[0]], [[-0.8398]]], [[[0]], [[0]], [[-0.2846]]]]]