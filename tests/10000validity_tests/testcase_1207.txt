import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo52278 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Con39336 = tf.keras.layers.Input(shape=([2, 1, 3]))
in0Sep18873 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Con65778 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in0Sub20891 = tf.keras.layers.Input(shape=([3, 3, 2]))
in1Sub20891 = tf.keras.layers.Input(shape=([3, 3, 2]))
in0Con81390 = tf.keras.layers.Input(shape=([3, 3, 2]))
in0Sub58288 = tf.keras.layers.Input(shape=([3, 2, 2, 3]))
in1Sub58288 = tf.keras.layers.Input(shape=([3, 2, 2, 3]))

Glo52278 = keras.layers.GlobalMaxPool3D(name = 'Glo52278', )(in0Glo52278)
Res759 = keras.layers.Reshape((2, 1), name = 'Res759', )(Glo52278)
Res90367 = keras.layers.Reshape((2, 1, 1), name = 'Res90367', )(Res759)
Con39336 = keras.layers.Concatenate(axis=3, name = 'Con39336', )([Res90367,in0Con39336])
Sep18873 = keras.layers.SeparableConv2D(4, (2, 1),strides=(1, 1), padding='same', name = 'Sep18873', )(in0Sep18873)
Sub50419 = keras.layers.Subtract(name = 'Sub50419', )([Con39336,Sep18873])
Zer71420 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer71420', )(Sub50419)
Con65778 = keras.layers.Conv3D(4, (1, 1, 1),strides=(1, 7, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con65778', )(in0Con65778)
Res47432 = keras.layers.Reshape((1, 1, 4), name = 'Res47432', )(Con65778)
Zer42208 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer42208', )(Res47432)
Sub20891 = keras.layers.Subtract(name = 'Sub20891', )([in0Sub20891,in1Sub20891])
Con81390 = keras.layers.Concatenate(axis=3, name = 'Con81390', )([Sub20891,in0Con81390])
Max63362 = keras.layers.Maximum(name = 'Max63362', )([Zer42208,Con81390])
Ave73366 = keras.layers.Average(name = 'Ave73366', )([Zer71420,Max63362])
Res6905 = keras.layers.Reshape((3, 12), name = 'Res6905', )(Ave73366)
Sub58288 = keras.layers.Subtract(name = 'Sub58288', )([in0Sub58288,in1Sub58288])
Res86054 = keras.layers.Reshape((3, 2, 6), name = 'Res86054', )(Sub58288)
Res65424 = keras.layers.Reshape((3, 12), name = 'Res65424', )(Res86054)
Max52709 = keras.layers.MaxPool1D(pool_size=(1), name = 'Max52709', )(Res65424)
Mul66664 = keras.layers.Multiply(name = 'Mul66664', )([Res6905,Max52709])
model = tf.keras.models.Model(inputs=[in0Glo52278,in0Con39336,in0Sep18873,in0Con65778,in0Sub20891,in1Sub20891,in0Con81390,in0Sub58288,in1Sub58288], outputs=Mul66664)
w = model.get_layer('Sep18873').get_weights() 
w[0] = np.array([[[[0.3337], [0.6334]]], [[[0.8993], [0.8349]]]])
w[1] = np.array([[[[0.3006, 0.1991, 0.273, 0.0559], [0.4846, 0.3673, 0.5953, 0.9222]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep18873').set_weights(w) 
w = model.get_layer('Con65778').get_weights() 
w[0] = np.array([[[[[0.1665, 0.4664, 0.6948, 0.948], [0.12, 0.1626, 0.7288, 0.5808]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con65778').set_weights(w) 
in0Glo52278 = tf.constant([[[[[1.2091, 1.0281], [1.7067, 1.9703]], [[1.1807, 1.8146], [1.6292, 1.1329]]], [[[1.6408, 1.1581], [1.5621, 1.6504]], [[1.8171, 1.5817], [1.7516, 1.7298]]]]])
in0Con39336 = tf.constant([[[[0.8797, 0.5354, 0.3848]], [[0.7754, 0.2288, 0.6007]]]])
in0Sep18873 = tf.constant([[[[0.3751, 0.9428]], [[0.2087, 0.5961]]]])
in0Con65778 = tf.constant([[[[[0.3431, 0.7786]], [[0.1753, 0.5048]]]]])
in0Sub20891 = tf.constant([[[[0.0052, 0.8188], [0.3033, 0.9335], [0.5465, 0.5013]], [[0.7761, 0.0555], [0.6627, 0.4565], [0.7394, 0.5491]], [[0.4417, 0.9607], [0.6984, 0.1666], [0.5685, 0.3034]]]])
in1Sub20891 = tf.constant([[[[0.994, 0.2556], [0.3114, 0.8595], [0.0736, 0.5995]], [[0.8039, 0.4158], [0.035, 0.532], [0.8542, 0.9575]], [[0.8423, 0.2642], [0.8865, 0.6929], [0.687, 0.7638]]]])
in0Con81390 = tf.constant([[[[0.854, 0.5439], [0.9101, 0.5221], [0.4544, 0.4981]], [[0.4393, 0.3143], [0.9652, 0.0153], [0.0378, 0.1103]], [[0.6919, 0.8647], [0.8512, 0.9055], [0.1228, 0.7437]]]])
in0Sub58288 = tf.constant([[[[[0.6454, 0.5643, 0.1986], [0.3224, 0.9807, 0.8748]], [[0.5978, 0.1596, 0.3688], [0.9468, 0.4276, 0.0233]]], [[[0.8266, 0.9192, 0.2006], [0.7689, 0.5246, 0.8908]], [[0.1538, 0.3234, 0.7174], [0.6201, 0.3174, 0.2785]]], [[[0.5732, 0.9046, 0.2724], [0.5901, 0.1099, 0.5801]], [[0.2964, 0.5119, 0.7191], [0.8019, 0.0798, 0.9405]]]]])
in1Sub58288 = tf.constant([[[[[0.6974, 0.9024, 0.8297], [0.8073, 0.794, 0.6545]], [[0.3765, 0.0165, 0.0292], [0.2125, 0.8447, 0.7018]]], [[[0.9453, 0.3506, 0.5585], [0.2458, 0.0071, 0.8757]], [[0.114, 0.5954, 0.087], [0.2489, 0.9691, 0.8905]]], [[[0.8425, 0.5222, 0.4785], [0.3218, 0.3198, 0.6655]], [[0.0299, 0.4346, 0.3046], [0.2431, 0.8285, 0.8021]]]]])
print (np.array2string(model.predict([in0Glo52278,in0Con39336,in0Sep18873,in0Con65778,in0Sub20891,in1Sub20891,in0Con81390,in0Sub58288,in1Sub58288],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul66664.png')

LGlo52278 = global_max_pool3D_layer([[[[[1.2091, 1.0281], [1.7067, 1.9703]], [[1.1807, 1.8146], [1.6292, 1.1329]]], [[[1.6408, 1.1581], [1.5621, 1.6504]], [[1.8171, 1.5817], [1.7516, 1.7298]]]]], Glo52278), 
LRes759 = reshape_layer(Glo52278, [2, 1], Res759), 
LRes90367 = reshape_layer(Res759, [2, 1, 1], Res90367), 
LCon39336 = concatenate_layer([Res90367,[[[[0.8797, 0.5354, 0.3848]], [[0.7754, 0.2288, 0.6007]]]]], 3, Con39336), 
LSep18873 = separable_conv2D_layer([[[[0.3751, 0.9428]], [[0.2087, 0.5961]]]], 2, 1,[[[[[0.3337], [0.6334]]], [[[0.8993], [0.8349]]]],[[[[0.3006, 0.1991, 0.273, 0.0559], [0.4846, 0.3673, 0.5953, 0.9222]]]]],[0, 0, 0, 0], 1, 1, true, Sep18873), 
LSub50419 = subtract_layer(Con39336,Sep18873, Sub50419), 
LZer71420 = zero_padding2D_layer(Sub50419, 1, 0, 2, 0, Zer71420), 
LCon65778 = conv3D_layer([[[[[0.3431, 0.7786]], [[0.1753, 0.5048]]]]], 1, 1, 1,[[[[[0.1665, 0.4664, 0.6948, 0.948], [0.12, 0.1626, 0.7288, 0.5808]]]]],[0, 0, 0, 0], 1, 7, 1, false, 1, 1, 1, Con65778), 
LRes47432 = reshape_layer(Con65778, [1, 1, 4], Res47432), 
LZer42208 = zero_padding2D_layer(Res47432, 2, 0, 2, 0, Zer42208), 
LSub20891 = subtract_layer([[[[0.0052, 0.8188], [0.3033, 0.9335], [0.5465, 0.5013]], [[0.7761, 0.0555], [0.6627, 0.4565], [0.7394, 0.5491]], [[0.4417, 0.9607], [0.6984, 0.1666], [0.5685, 0.3034]]]], [[[[0.994, 0.2556], [0.3114, 0.8595], [0.0736, 0.5995]], [[0.8039, 0.4158], [0.035, 0.532], [0.8542, 0.9575]], [[0.8423, 0.2642], [0.8865, 0.6929], [0.687, 0.7638]]]], Sub20891), 
LCon81390 = concatenate_layer([Sub20891,[[[[0.854, 0.5439], [0.9101, 0.5221], [0.4544, 0.4981]], [[0.4393, 0.3143], [0.9652, 0.0153], [0.0378, 0.1103]], [[0.6919, 0.8647], [0.8512, 0.9055], [0.1228, 0.7437]]]]], 3, Con81390), 
LMax63362 = maximum_layer([Zer42208,Con81390], Max63362), 
LAve73366 = average_layer([Zer71420,Max63362], Ave73366), 
LRes6905 = reshape_layer(Ave73366, [3, 12], Res6905), 
LSub58288 = subtract_layer([[[[[0.6454, 0.5643, 0.1986], [0.3224, 0.9807, 0.8748]], [[0.5978, 0.1596, 0.3688], [0.9468, 0.4276, 0.0233]]], [[[0.8266, 0.9192, 0.2006], [0.7689, 0.5246, 0.8908]], [[0.1538, 0.3234, 0.7174], [0.6201, 0.3174, 0.2785]]], [[[0.5732, 0.9046, 0.2724], [0.5901, 0.1099, 0.5801]], [[0.2964, 0.5119, 0.7191], [0.8019, 0.0798, 0.9405]]]]], [[[[[0.6974, 0.9024, 0.8297], [0.8073, 0.794, 0.6545]], [[0.3765, 0.0165, 0.0292], [0.2125, 0.8447, 0.7018]]], [[[0.9453, 0.3506, 0.5585], [0.2458, 0.0071, 0.8757]], [[0.114, 0.5954, 0.087], [0.2489, 0.9691, 0.8905]]], [[[0.8425, 0.5222, 0.4785], [0.3218, 0.3198, 0.6655]], [[0.0299, 0.4346, 0.3046], [0.2431, 0.8285, 0.8021]]]]], Sub58288), 
LRes86054 = reshape_layer(Sub58288, [3, 2, 6], Res86054), 
LRes65424 = reshape_layer(Res86054, [3, 12], Res65424), 
LMax52709 = max_pool1D_layer(Res65424, 1, Max52709), 
LMul66664 = multiply_layer([Res6905,Max52709], Mul66664), 
exec_layers([LGlo52278,LRes759,LRes90367,LCon39336,LSep18873,LSub50419,LZer71420,LCon65778,LRes47432,LZer42208,LSub20891,LCon81390,LMax63362,LAve73366,LRes6905,LSub58288,LRes86054,LRes65424,LMax52709,LMul66664],["Glo52278","Res759","Res90367","Con39336","Sep18873","Sub50419","Zer71420","Con65778","Res47432","Zer42208","Sub20891","Con81390","Max63362","Ave73366","Res6905","Sub58288","Res86054","Res65424","Max52709","Mul66664"],Mul66664,"Mul66664")

Actual (Unparsed): [[[-0.0000000, -0.0952090, -0.2694797, -0.1318685, 0.0000000, 0.0081511, 0.1007026, 0.0373563, 0.0802984, 0.0000000, -0.0947651, -0.1689804], [-0.0000000, 0.0000000, -0.0786127, 0.0822052, 0.1624174, 0.0000000, 0.0192075, -0.0020808, 0.3758728, 0.0770743, 0.0534314, 0.1628111], [-0.0000000, 0.1331708, -0.0713003, 0.1159995, -0.0000000, -0.0000000, 0.1134224, 0.0349976, 0.3972885, 0.2541073, -0.2960546, 0.0710049]]]

Expected (Unparsed): [[[-0.0,-0.09520895999999998,-0.2694797,-0.131868555,0.0,0.008151099999999996,0.100702565,0.037356255000000005,0.08029842,0.0,-0.09476512000000001,-0.168980425],[-0.0,0.0,-0.078612735,0.08220516500000001,0.16241737499999997,0.0,0.019207479999999992,-0.0020808000000000003,0.3758728135316193,0.0770742893981504,0.053431445973151026,0.16281109345262398],[-0.0,0.13317079999999998,-0.071300295,0.115999505,-0.0,-0.0,0.1134224,0.03499757500000002,0.3972885322717445,0.2541072801780986,-0.29605458628360987,0.0710048613524092]]]

Actual:   [[[-0, -0.0952, -0.2694, -0.1318, 0, 0.0082, 0.1008, 0.0374, 0.0803, 0, -0.0947, -0.1689], [-0, 0, -0.0786, 0.0823, 0.1625, 0, 0.0193, -0.002, 0.3759, 0.0771, 0.0535, 0.1629], [-0, 0.1332, -0.0713, 0.116, -0, -0, 0.1135, 0.035, 0.3973, 0.2542, -0.296, 0.0711]]]

Expected: [[[-0, -0.0952, -0.2694, -0.1318, 0, 0.0082, 0.1008, 0.0374, 0.0803, 0, -0.0947, -0.1689], [-0, 0, -0.0786, 0.0823, 0.1625, 0, 0.0193, -0.002, 0.3759, 0.0771, 0.0535, 0.1629], [-0, 0.1332, -0.0713, 0.116, -0, -0, 0.1135, 0.035, 0.3973, 0.2542, -0.296, 0.0711]]]