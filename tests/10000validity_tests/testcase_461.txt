import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Den69284 = tf.keras.layers.Input(shape=([5, 4, 5]))

Den69284 = keras.layers.Dense(4,name = 'Den69284', )(in0Den69284)
Res69853 = keras.layers.Reshape((5, 16), name = 'Res69853', )(Den69284)
LST16044 = keras.layers.LSTM(3,recurrent_activation='sigmoid', name = 'LST16044', )(Res69853)
model = tf.keras.models.Model(inputs=[in0Den69284], outputs=LST16044)
w = model.get_layer('Den69284').get_weights() 
w[0] = np.array([[0.3807, 0.509, 0.3131, 0.347], [0.0726, 0.6739, 0.8821, 0.7015], [0.7526, 0.3299, 0.5846, 0.5774], [0.8258, 0.0487, 0.777, 0.3416], [0.7806, 0.9158, 0.3239, 0.6001]])
w[1] = np.array([0.1948, 0.0612, 0.8168, 0.7268])
model.get_layer('Den69284').set_weights(w) 
w = model.get_layer('LST16044').get_weights() 
w[0] = np.array([[1, 5, 5, 7, 7, 10, 6, 6, 3, 8, 5, 4], [6, 6, 1, 2, 3, 10, 9, 2, 9, 9, 3, 3], [6, 5, 3, 10, 10, 8, 8, 6, 7, 5, 2, 8], [1, 7, 7, 5, 2, 8, 2, 10, 9, 5, 3, 4], [8, 5, 7, 7, 3, 7, 6, 8, 5, 1, 8, 3], [7, 4, 7, 7, 4, 7, 6, 7, 8, 10, 4, 2], [5, 8, 8, 4, 10, 1, 1, 3, 10, 9, 2, 1], [9, 6, 4, 4, 3, 1, 1, 8, 1, 8, 1, 10], [9, 1, 9, 8, 6, 5, 1, 5, 5, 3, 5, 1], [6, 9, 6, 3, 5, 10, 10, 7, 2, 9, 3, 1], [6, 9, 3, 6, 10, 7, 10, 1, 3, 3, 1, 2], [8, 9, 2, 1, 8, 1, 4, 1, 3, 6, 5, 4], [6, 7, 5, 4, 7, 1, 8, 1, 10, 1, 8, 6], [6, 8, 5, 4, 10, 2, 4, 6, 1, 10, 8, 10], [5, 4, 8, 5, 6, 8, 5, 10, 3, 6, 7, 1], [4, 4, 1, 10, 10, 1, 7, 5, 8, 6, 5, 10]])
w[1] = np.array([[2, 10, 6, 1, 4, 6, 3, 7, 5, 5, 3, 8], [2, 10, 3, 4, 10, 1, 10, 8, 3, 7, 5, 7], [3, 6, 6, 10, 7, 6, 3, 7, 4, 3, 9, 6]])
w[2] = np.array([1, 2, 5, 2, 3, 4, 1, 7, 3, 10, 10, 8])
model.get_layer('LST16044').set_weights(w) 
in0Den69284 = tf.constant([[[[0.7273, 0.4848, 0.8126, 0.2875, 0.2112], [0.8397, 0.3508, 0.4457, 0.9521, 0.9065], [0.4779, 0.6319, 0.3609, 0.3581, 0.0039], [0.6241, 0.7357, 0.9927, 0.7792, 0.626]], [[0.7447, 0.7723, 0.1725, 0.727, 0.516], [0.0743, 0.5615, 0.3867, 0.3283, 0.9011], [0.7756, 0.0433, 0.2622, 0.5352, 0.3727], [0.3899, 0.9409, 0.5371, 0.4773, 0.476]], [[0.6691, 0.0356, 0.6689, 0.5491, 0.8567], [0.983, 0.0623, 0.4715, 0.6083, 0.4135], [0.296, 0.6256, 0.7524, 0.7764, 0.6143], [0.4465, 0.3853, 0.0967, 0.6107, 0.115]], [[0.2153, 0.0592, 0.4843, 0.4827, 0.6047], [0.1072, 0.856, 0.0045, 0.2282, 0.3008], [0.2874, 0.3082, 0.6943, 0.991, 0.6519], [0.0455, 0.3074, 0.329, 0.417, 0.8353]], [[0.3883, 0.2536, 0.7167, 0.4371, 0.2185], [0.8787, 0.8135, 0.7745, 0.72, 0.1348], [0.1813, 0.0628, 0.4472, 0.1131, 0.9772], [0.0939, 0.3261, 0.8037, 0.1095, 0.677]]]])
print (np.array2string(model.predict([in0Den69284],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='LST16044.png')

LDen69284 = dense_layer([[[[0.7273, 0.4848, 0.8126, 0.2875, 0.2112], [0.8397, 0.3508, 0.4457, 0.9521, 0.9065], [0.4779, 0.6319, 0.3609, 0.3581, 0.0039], [0.6241, 0.7357, 0.9927, 0.7792, 0.626]], [[0.7447, 0.7723, 0.1725, 0.727, 0.516], [0.0743, 0.5615, 0.3867, 0.3283, 0.9011], [0.7756, 0.0433, 0.2622, 0.5352, 0.3727], [0.3899, 0.9409, 0.5371, 0.4773, 0.476]], [[0.6691, 0.0356, 0.6689, 0.5491, 0.8567], [0.983, 0.0623, 0.4715, 0.6083, 0.4135], [0.296, 0.6256, 0.7524, 0.7764, 0.6143], [0.4465, 0.3853, 0.0967, 0.6107, 0.115]], [[0.2153, 0.0592, 0.4843, 0.4827, 0.6047], [0.1072, 0.856, 0.0045, 0.2282, 0.3008], [0.2874, 0.3082, 0.6943, 0.991, 0.6519], [0.0455, 0.3074, 0.329, 0.417, 0.8353]], [[0.3883, 0.2536, 0.7167, 0.4371, 0.2185], [0.8787, 0.8135, 0.7745, 0.72, 0.1348], [0.1813, 0.0628, 0.4472, 0.1131, 0.9772], [0.0939, 0.3261, 0.8037, 0.1095, 0.677]]]], [[0.3807, 0.509, 0.3131, 0.347], [0.0726, 0.6739, 0.8821, 0.7015], [0.7526, 0.3299, 0.5846, 0.5774], [0.8258, 0.0487, 0.777, 0.3416], [0.7806, 0.9158, 0.3239, 0.6001]],[0.1948, 0.0612, 0.8168, 0.7268], Den69284), 
LRes69853 = reshape_layer(Den69284, [5, 16], Res69853), 
LLST16044 = lstm_layer(Res69853,[[1, 5, 5, 7, 7, 10, 6, 6, 3, 8, 5, 4], [6, 6, 1, 2, 3, 10, 9, 2, 9, 9, 3, 3], [6, 5, 3, 10, 10, 8, 8, 6, 7, 5, 2, 8], [1, 7, 7, 5, 2, 8, 2, 10, 9, 5, 3, 4], [8, 5, 7, 7, 3, 7, 6, 8, 5, 1, 8, 3], [7, 4, 7, 7, 4, 7, 6, 7, 8, 10, 4, 2], [5, 8, 8, 4, 10, 1, 1, 3, 10, 9, 2, 1], [9, 6, 4, 4, 3, 1, 1, 8, 1, 8, 1, 10], [9, 1, 9, 8, 6, 5, 1, 5, 5, 3, 5, 1], [6, 9, 6, 3, 5, 10, 10, 7, 2, 9, 3, 1], [6, 9, 3, 6, 10, 7, 10, 1, 3, 3, 1, 2], [8, 9, 2, 1, 8, 1, 4, 1, 3, 6, 5, 4], [6, 7, 5, 4, 7, 1, 8, 1, 10, 1, 8, 6], [6, 8, 5, 4, 10, 2, 4, 6, 1, 10, 8, 10], [5, 4, 8, 5, 6, 8, 5, 10, 3, 6, 7, 1], [4, 4, 1, 10, 10, 1, 7, 5, 8, 6, 5, 10]],[[2, 10, 6, 1, 4, 6, 3, 7, 5, 5, 3, 8], [2, 10, 3, 4, 10, 1, 10, 8, 3, 7, 5, 7], [3, 6, 6, 10, 7, 6, 3, 7, 4, 3, 9, 6]],[1, 2, 5, 2, 3, 4, 1, 7, 3, 10, 10, 8], LST16044), 
exec_layers([LDen69284,LRes69853,LLST16044],["Den69284","Res69853","LST16044"],LST16044,"LST16044")

Actual (Unparsed): [[0.9999092, 0.9999092, 0.9999092]]

Expected (Unparsed): [[0.9999092042625951,0.9999092042625951,0.9999092042625951]]

Actual:   [[1, 1, 1]]

Expected: [[1, 1, 1]]