import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Per39522 = tf.keras.layers.Input(shape=([3, 2]))
in0Thr40497 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in0Glo86223 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Con8836 = tf.keras.layers.Input(shape=([4, 8]))
in0Add68817 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in1Add68817 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))

Per39522 = keras.layers.Permute((2,1), name = 'Per39522',)(in0Per39522)
Res78558 = keras.layers.Reshape((2, 3, 1), name = 'Res78558', )(Per39522)
Res81116 = keras.layers.Reshape((2, 3, 1, 1), name = 'Res81116', )(Res78558)
Zer77719 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer77719', )(Res81116)
Thr40497 = keras.layers.ThresholdedReLU(theta=1.4299718601885163, name = 'Thr40497', input_shape=(1, 2, 2, 1))(in0Thr40497)
Zer77402 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (1, 0)), name = 'Zer77402', )(Thr40497)
Mul46885 = keras.layers.Multiply(name = 'Mul46885', )([Zer77719,Zer77402])
Res15084 = keras.layers.Reshape((2, 3, 3), name = 'Res15084', )(Mul46885)
Res21688 = keras.layers.Reshape((2, 9), name = 'Res21688', )(Res15084)
Zer55625 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer55625', )(Res21688)
Glo86223 = keras.layers.GlobalAveragePooling2D(name = 'Glo86223', )(in0Glo86223)
Res78408 = keras.layers.Reshape((2, 1), name = 'Res78408', )(Glo86223)
Up_80305 = keras.layers.UpSampling1D(size=(2), name = 'Up_80305', )(Res78408)
Con8836 = keras.layers.Concatenate(axis=2, name = 'Con8836', )([Up_80305,in0Con8836])
Max78478 = keras.layers.Maximum(name = 'Max78478', )([Zer55625,Con8836])
Res84555 = keras.layers.Reshape((4, 9, 1), name = 'Res84555', )(Max78478)
Res99234 = keras.layers.Reshape((4, 9, 1, 1), name = 'Res99234', )(Res84555)
Add68817 = keras.layers.Add(name = 'Add68817', )([in0Add68817,in1Add68817])
Zer14451 = keras.layers.ZeroPadding3D(padding=((2, 0), (8, 0), (0, 0)), name = 'Zer14451', )(Add68817)
Sub28899 = keras.layers.Subtract(name = 'Sub28899', )([Res99234,Zer14451])
Con59735 = keras.layers.Conv3DTranspose(2, (2, 1, 1),strides=(1, 1, 1), padding='same', name = 'Con59735', )(Sub28899)
model = tf.keras.models.Model(inputs=[in0Per39522,in0Thr40497,in0Glo86223,in0Con8836,in0Add68817,in1Add68817], outputs=Con59735)
w = model.get_layer('Con59735').get_weights() 
w[0] = np.array([[[[[0.7727], [0.3485]]]], [[[[0.8239], [0.4055]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con59735').set_weights(w) 
in0Per39522 = tf.constant([[[1.2415, 1.3183], [1.6041, 1.0088], [1.4729, 1.832]]])
in0Thr40497 = tf.constant([[[[[0.577], [0.689]], [[0.6274], [0.107]]]]])
in0Glo86223 = tf.constant([[[[1.1919, 1.9135], [1.9995, 1.6598]]]])
in0Con8836 = tf.constant([[[0.3698, 0.5027, 0.8386, 0.7849, 0.2107, 0.4913, 0.9802, 0.5341], [0.6736, 0.8856, 0.7661, 0.2783, 0.8065, 0.7661, 0.4962, 0.0582], [0.7819, 0.3756, 0.0332, 0.503, 0.1783, 0.3502, 0.4871, 0.0734], [0.1447, 0.0664, 0.1018, 0.565, 0.0773, 0.4248, 0.3076, 0.765]]])
in0Add68817 = tf.constant([[[[[0.9766]]], [[[0.7871]]]]])
in1Add68817 = tf.constant([[[[[0.4706]]], [[[0.089]]]]])
print (np.array2string(model.predict([in0Per39522,in0Thr40497,in0Glo86223,in0Con8836,in0Add68817,in1Add68817],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con59735.png')

LPer39522 = permute_layer([[[1.2415, 1.3183], [1.6041, 1.0088], [1.4729, 1.832]]], 2,1, Per39522), 
LRes78558 = reshape_layer(Per39522, [2, 3, 1], Res78558), 
LRes81116 = reshape_layer(Res78558, [2, 3, 1, 1], Res81116), 
LZer77719 = zero_padding3D_layer(Res81116, 0, 0, 0, 0, 2, 0, Zer77719), 
LThr40497 = thresholded_relu_layer([[[[[0.577], [0.689]], [[0.6274], [0.107]]]]], 1.4299718601885163, Thr40497), 
LZer77402 = zero_padding3D_layer(Thr40497, 1, 0, 1, 0, 1, 0, Zer77402), 
LMul46885 = multiply_layer([Zer77719,Zer77402], Mul46885), 
LRes15084 = reshape_layer(Mul46885, [2, 3, 3], Res15084), 
LRes21688 = reshape_layer(Res15084, [2, 9], Res21688), 
LZer55625 = zero_padding1D_layer(Res21688, 2, 0, Zer55625), 
LGlo86223 = global_average_pooling2D_layer([[[[1.1919, 1.9135], [1.9995, 1.6598]]]], Glo86223), 
LRes78408 = reshape_layer(Glo86223, [2, 1], Res78408), 
LUp_80305 = up_sampling1D_layer(Res78408, 2, Up_80305), 
LCon8836 = concatenate_layer([Up_80305,[[[0.3698, 0.5027, 0.8386, 0.7849, 0.2107, 0.4913, 0.9802, 0.5341], [0.6736, 0.8856, 0.7661, 0.2783, 0.8065, 0.7661, 0.4962, 0.0582], [0.7819, 0.3756, 0.0332, 0.503, 0.1783, 0.3502, 0.4871, 0.0734], [0.1447, 0.0664, 0.1018, 0.565, 0.0773, 0.4248, 0.3076, 0.765]]]], 2, Con8836), 
LMax78478 = maximum_layer([Zer55625,Con8836], Max78478), 
LRes84555 = reshape_layer(Max78478, [4, 9, 1], Res84555), 
LRes99234 = reshape_layer(Res84555, [4, 9, 1, 1], Res99234), 
LAdd68817 = add_layer([[[[[[0.9766]]], [[[0.7871]]]]], [[[[[0.4706]]], [[[0.089]]]]]], Add68817), 
LZer14451 = zero_padding3D_layer(Add68817, 2, 0, 8, 0, 0, 0, Zer14451), 
LSub28899 = subtract_layer(Res99234,Zer14451, Sub28899), 
LCon59735 = conv3D_transpose_layer(Sub28899, 2, 1, 1,[[[[[0.7727], [0.3485]]]], [[[[0.8239], [0.4055]]]]],[0, 0], 1, 1, 1, true, Con59735), 
exec_layers([LPer39522,LRes78558,LRes81116,LZer77719,LThr40497,LZer77402,LMul46885,LRes15084,LRes21688,LZer55625,LGlo86223,LRes78408,LUp_80305,LCon8836,LMax78478,LRes84555,LRes99234,LAdd68817,LZer14451,LSub28899,LCon59735],["Per39522","Res78558","Res81116","Zer77719","Thr40497","Zer77402","Mul46885","Res15084","Res21688","Zer55625","Glo86223","Res78408","Up_80305","Con8836","Max78478","Res84555","Res99234","Add68817","Zer14451","Sub28899","Con59735"],Con59735,"Con59735")

Actual (Unparsed): [[[[[1.2329974, 0.5561015]], [[0.2857445, 0.1288753]], [[0.3884363, 0.1751909]], [[0.6479862, 0.2922521]], [[0.6064922, 0.2735377]], [[0.1628079, 0.0734290]], [[0.3796275, 0.1712180]], [[0.7574005, 0.3415997]], [[0.4126991, 0.1861338]]], [[[2.5476947, 1.2031578]], [[0.8251690, 0.3847035]], [[1.0984776, 0.5124764]], [[1.2828880, 0.6070381]], [[0.8617215, 0.4152645]], [[0.7967783, 0.3665041]], [[0.9967475, 0.4662080]], [[1.1910005, 0.5703968]], [[0.4850161, 0.2368602]]], [[[2.6952417, 1.2697039]], [[1.1591532, 0.5456370]], [[1.0198719, 0.4900074]], [[0.6568434, 0.3222237]], [[0.6179595, 0.2881462]], [[0.8022478, 0.3891733]], [[0.9017893, 0.4326982]], [[0.7852014, 0.3709634]], [[-1.0135843, -0.4551692]]], [[[2.8525654, 1.3471341]], [[0.7560171, 0.3674884]], [[0.3607641, 0.1754462]], [[0.1060143, 0.0489399]], [[0.8509972, 0.4008690]], [[0.2066311, 0.0992397]], [[0.6167727, 0.2900489]], [[0.6390042, 0.3047176]], [[-1.2177208, -0.5957943]]]]]

Expected (Unparsed): [[[[[1.23299739,0.5561014499999999]],[[0.28574446000000003,0.1288753]],[[0.3884362900000001,0.17519095]],[[0.6479862200000001,0.29225209999999996]],[[0.6064922300000001,0.27353765]],[[0.16280789,0.07342894999999999]],[[0.37962751000000006,0.17121804999999998]],[[0.75740054,0.34159969999999995]],[[0.41269907000000006,0.18613385]]],[[[2.5476946199999997,1.2031577999999998]],[[0.8251689400000001,0.3847035]],[[1.09847765,0.5124764500000001]],[[1.28288801,0.6070381499999999]],[[0.86172152,0.41526450000000004]],[[0.7967782800000001,0.3665041]],[[0.99674754,0.46620799999999996]],[[1.19100052,0.5703968]],[[0.48501613000000005,0.23686025000000005]]],[[[2.695241685,1.2697038749999998]],[[1.1591531700000002,0.54563695]],[[1.0198719600000001,0.49000740000000004]],[[0.65684343,0.32222375]],[[0.61795947,0.28814615]],[[0.80224776,0.3891733]],[[0.90178933,0.43269825]],[[0.7852013499999999,0.37096345]],[[-1.0135842800000001,-0.4551692]]],[[[2.8525653899999996,1.3471341]],[[0.7560171,0.36748840000000005]],[[0.36076411999999997,0.17544620000000002]],[[0.10601434000000001,0.048939899999999995]],[[0.8509972,0.40086900000000003]],[[0.20663107999999997,0.09923969999999999]],[[0.61677274,0.29004890000000005]],[[0.63900421,0.30471765]],[[-1.21772079,-0.5957942500000001]]]]]

Actual:   [[[[[1.233, 0.5562]], [[0.2858, 0.1289]], [[0.3885, 0.1752]], [[0.648, 0.2923]], [[0.6065, 0.2736]], [[0.1629, 0.0735]], [[0.3797, 0.1713]], [[0.7575, 0.3416]], [[0.4127, 0.1862]]], [[[2.5477, 1.2032]], [[0.8252, 0.3848]], [[1.0985, 0.5125]], [[1.2829, 0.6071]], [[0.8618, 0.4153]], [[0.7968, 0.3666]], [[0.9968, 0.4663]], [[1.1911, 0.5704]], [[0.4851, 0.2369]]], [[[2.6953, 1.2698]], [[1.1592, 0.5457]], [[1.0199, 0.4901]], [[0.6569, 0.3223]], [[0.618, 0.2882]], [[0.8023, 0.3892]], [[0.9018, 0.4327]], [[0.7853, 0.371]], [[-1.0135, -0.4551]]], [[[2.8526, 1.3472]], [[0.7561, 0.3675]], [[0.3608, 0.1755]], [[0.1061, 0.049]], [[0.851, 0.4009]], [[0.2067, 0.0993]], [[0.6168, 0.2901]], [[0.6391, 0.3048]], [[-1.2177, -0.5957]]]]]

Expected: [[[[[1.233, 0.5562]], [[0.2858, 0.1289]], [[0.3885, 0.1752]], [[0.648, 0.2923]], [[0.6065, 0.2736]], [[0.1629, 0.0735]], [[0.3797, 0.1713]], [[0.7575, 0.3416]], [[0.4127, 0.1862]]], [[[2.5477, 1.2032]], [[0.8252, 0.3848]], [[1.0985, 0.5125]], [[1.2829, 0.6071]], [[0.8618, 0.4153]], [[0.7968, 0.3666]], [[0.9968, 0.4663]], [[1.1911, 0.5704]], [[0.4851, 0.2369]]], [[[2.6953, 1.2698]], [[1.1592, 0.5457]], [[1.0199, 0.4901]], [[0.6569, 0.3223]], [[0.618, 0.2882]], [[0.8023, 0.3892]], [[0.9018, 0.4327]], [[0.7853, 0.371]], [[-1.0135, -0.4551]]], [[[2.8526, 1.3472]], [[0.7561, 0.3675]], [[0.3608, 0.1755]], [[0.1061, 0.049]], [[0.851, 0.4009]], [[0.2067, 0.0993]], [[0.6168, 0.2901]], [[0.6391, 0.3048]], [[-1.2177, -0.5957]]]]]