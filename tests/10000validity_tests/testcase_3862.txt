import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot34828 = tf.keras.layers.Input(shape=([3]))
in1Dot34828 = tf.keras.layers.Input(shape=([3]))
in0Sub3230 = tf.keras.layers.Input(shape=([3, 2, 3]))
in1Sub3230 = tf.keras.layers.Input(shape=([3, 2, 3]))
in0Sof77068 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))

Dot34828 = keras.layers.Dot(axes=(1, 1), name = 'Dot34828', )([in0Dot34828,in1Dot34828])
Res47993 = keras.layers.Reshape((1, 1), name = 'Res47993', )(Dot34828)
Res10356 = keras.layers.Reshape((1, 1, 1), name = 'Res10356', )(Res47993)
Up_29833 = keras.layers.UpSampling2D(size=(2, 2), name = 'Up_29833', )(Res10356)
Res22580 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res22580', )(Up_29833)
Zer4485 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (2, 0)), name = 'Zer4485', )(Res22580)
Sub3230 = keras.layers.Subtract(name = 'Sub3230', )([in0Sub3230,in1Sub3230])
Res78505 = keras.layers.Reshape((3, 2, 3, 1), name = 'Res78505', )(Sub3230)
Sof77068 = keras.layers.Softmax(axis=1, name = 'Sof77068', input_shape=(2, 1, 2, 1))(in0Sof77068)
Zer38047 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (1, 0)), name = 'Zer38047', )(Sof77068)
Mul3834 = keras.layers.Multiply(name = 'Mul3834', )([Res78505,Zer38047])
Add48938 = keras.layers.Add(name = 'Add48938', )([Zer4485,Mul3834])
model = tf.keras.models.Model(inputs=[in0Dot34828,in1Dot34828,in0Sub3230,in1Sub3230,in0Sof77068], outputs=Add48938)
in0Dot34828 = tf.constant([[0.8883, 0.8896, 0.6749]])
in1Dot34828 = tf.constant([[0.1349, 0.979, 0.5762]])
in0Sub3230 = tf.constant([[[[0.5595, 0.5752, 0.5127], [0.2104, 0.711, 0.5148]], [[0.5911, 0.901, 0.0738], [0.4037, 0.4888, 0.3155]], [[0.7355, 0.8565, 0.2839], [0.8147, 0.3114, 0.4557]]]])
in1Sub3230 = tf.constant([[[[0.4427, 0.1995, 0.4216], [0.5815, 0.1533, 0.2932]], [[0.0475, 0.7667, 0.411], [0.921, 0.8379, 0.6199]], [[0.4726, 0.8502, 0.6301], [0.0588, 0.317, 0.9021]]]])
in0Sof77068 = tf.constant([[[[[0.547], [0.4537]]], [[[0.1766], [0.762]]]]])
print (np.array2string(model.predict([in0Dot34828,in1Dot34828,in0Sub3230,in1Sub3230,in0Sof77068],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add48938.png')

LDot34828 = dot_layer([[0.8883, 0.8896, 0.6749]], [[0.1349, 0.979, 0.5762]], 1, 1, Dot34828), 
LRes47993 = reshape_layer(Dot34828, [1, 1], Res47993), 
LRes10356 = reshape_layer(Res47993, [1, 1, 1], Res10356), 
LUp_29833 = up_sampling2D_layer(Res10356, 2, 2, Up_29833), 
LRes22580 = reshape_layer(Up_29833, [2, 2, 1, 1], Res22580), 
LZer4485 = zero_padding3D_layer(Res22580, 1, 0, 0, 0, 2, 0, Zer4485), 
LSub3230 = subtract_layer([[[[0.5595, 0.5752, 0.5127], [0.2104, 0.711, 0.5148]], [[0.5911, 0.901, 0.0738], [0.4037, 0.4888, 0.3155]], [[0.7355, 0.8565, 0.2839], [0.8147, 0.3114, 0.4557]]]], [[[[0.4427, 0.1995, 0.4216], [0.5815, 0.1533, 0.2932]], [[0.0475, 0.7667, 0.411], [0.921, 0.8379, 0.6199]], [[0.4726, 0.8502, 0.6301], [0.0588, 0.317, 0.9021]]]], Sub3230), 
LRes78505 = reshape_layer(Sub3230, [3, 2, 3, 1], Res78505), 
LSof77068 = softmax_layer([[[[[0.547], [0.4537]]], [[[0.1766], [0.762]]]]], 1, Sof77068), 
LZer38047 = zero_padding3D_layer(Sof77068, 1, 0, 1, 0, 1, 0, Zer38047), 
LMul3834 = multiply_layer([Res78505,Zer38047], Mul3834), 
LAdd48938 = add_layer([Zer4485,Mul3834], Add48938), 
exec_layers([LDot34828,LRes47993,LRes10356,LUp_29833,LRes22580,LZer4485,LSub3230,LRes78505,LSof77068,LZer38047,LMul3834,LAdd48938],["Dot34828","Res47993","Res10356","Up_29833","Res22580","Zer4485","Sub3230","Res78505","Sof77068","Zer38047","Mul3834","Add48938"],Add48938,"Add48938")

Actual (Unparsed): [[[[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [1.3796274]], [[0.0000000], [-0.2065121], [1.2507050]]], [[[0.0000000], [0.0000000], [1.3796274]], [[0.0000000], [-0.0022873], [1.1222911]]]]]

Expected (Unparsed): [[[[[0.0],[0.0],[0.0]],[[0.0],[0.0],[0.0]]],[[[0.0],[0.0],[1.37962745]],[[0.0],[-0.20651207008312228],[1.2507049960093648]]],[[[0.0],[0.0],[1.37962745]],[[0.0],[-0.002287288477612473],[1.1222911275999332]]]]]

Actual:   [[[[[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [1.3797]], [[0], [-0.2065], [1.2508]]], [[[0], [0], [1.3797]], [[0], [-0.0022], [1.1223]]]]]

Expected: [[[[[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [1.3797]], [[0], [-0.2065], [1.2508]]], [[[0], [0], [1.3797]], [[0], [-0.0022], [1.1223]]]]]