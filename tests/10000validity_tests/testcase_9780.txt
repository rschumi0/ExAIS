import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mas44559 = tf.keras.layers.Input(shape=([4, 1, 4]))
in0Dot74452 = tf.keras.layers.Input(shape=([2]))
in1Dot74452 = tf.keras.layers.Input(shape=([2]))
in0Con75555 = tf.keras.layers.Input(shape=([15]))
in0Con43423 = tf.keras.layers.Input(shape=([16, 1]))
in0Ave16799 = tf.keras.layers.Input(shape=([1, 2]))
in1Ave16799 = tf.keras.layers.Input(shape=([1, 2]))

Mas44559 = keras.layers.Masking(mask_value=2, name = 'Mas44559', )(in0Mas44559)
Res65398 = keras.layers.Reshape((4, 4), name = 'Res65398', )(Mas44559)
Fla44362 = keras.layers.Flatten(name = 'Fla44362', )(Res65398)
Dot74452 = keras.layers.Dot(axes=(1, 1), name = 'Dot74452', )([in0Dot74452,in1Dot74452])
Con75555 = keras.layers.Concatenate(axis=1, name = 'Con75555', )([Dot74452,in0Con75555])
Min58386 = keras.layers.Minimum(name = 'Min58386', )([Fla44362,Con75555])
Res18391 = keras.layers.Reshape((16, 1), name = 'Res18391', )(Min58386)
Con43423 = keras.layers.Concatenate(axis=2, name = 'Con43423', )([Res18391,in0Con43423])
Ave16799 = keras.layers.Average(name = 'Ave16799', )([in0Ave16799,in1Ave16799])
Up_15901 = keras.layers.UpSampling1D(size=(2), name = 'Up_15901', )(Ave16799)
Zer45331 = keras.layers.ZeroPadding1D(padding=((14, 0)), name = 'Zer45331', )(Up_15901)
Max680 = keras.layers.Maximum(name = 'Max680', )([Con43423,Zer45331])
model = tf.keras.models.Model(inputs=[in0Mas44559,in0Dot74452,in1Dot74452,in0Con75555,in0Con43423,in0Ave16799,in1Ave16799], outputs=Max680)
in0Mas44559 = tf.constant([[[[1.3389, 1.934, 1.12, 1.5598]], [[1.7002, 1.7415, 1.949, 1.7061]], [[1.733, 1.8561, 1.3747, 1.4597]], [[1.3314, 1.9845, 1.4615, 1.4182]]]])
in0Dot74452 = tf.constant([[0.9648, 0.6323]])
in1Dot74452 = tf.constant([[0.5852, 0.0504]])
in0Con75555 = tf.constant([[0.0563, 0.7473, 0.4388, 0.7365, 0.7587, 0.343, 0.8433, 0.7926, 0.7479, 0.9748, 0.0755, 0.5985, 0.0961, 0.2771, 0.3529]])
in0Con43423 = tf.constant([[[0.6251], [0.5664], [0.8357], [0.9032], [0.3865], [0.795], [0.1183], [0.3123], [0.4977], [0.3725], [0.0796], [0.7204], [0.7475], [0.4706], [0.6746], [0.4954]]])
in0Ave16799 = tf.constant([[[0.1579, 0.6301]]])
in1Ave16799 = tf.constant([[[0.7877, 0.222]]])
print (np.array2string(model.predict([in0Mas44559,in0Dot74452,in1Dot74452,in0Con75555,in0Con43423,in0Ave16799,in1Ave16799],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max680.png')

LMas44559 = masking_layer([[[[1.3389, 1.934, 1.12, 1.5598]], [[1.7002, 1.7415, 1.949, 1.7061]], [[1.733, 1.8561, 1.3747, 1.4597]], [[1.3314, 1.9845, 1.4615, 1.4182]]]], 2, Mas44559), 
LRes65398 = reshape_layer(Mas44559, [4, 4], Res65398), 
LFla44362 = flatten_layer(Res65398, Fla44362), 
LDot74452 = dot_layer([[0.9648, 0.6323]], [[0.5852, 0.0504]], 1, 1, Dot74452), 
LCon75555 = concatenate_layer([Dot74452,[[0.0563, 0.7473, 0.4388, 0.7365, 0.7587, 0.343, 0.8433, 0.7926, 0.7479, 0.9748, 0.0755, 0.5985, 0.0961, 0.2771, 0.3529]]], 1, Con75555), 
LMin58386 = minimum_layer([Fla44362,Con75555], Min58386), 
LRes18391 = reshape_layer(Min58386, [16, 1], Res18391), 
LCon43423 = concatenate_layer([Res18391,[[[0.6251], [0.5664], [0.8357], [0.9032], [0.3865], [0.795], [0.1183], [0.3123], [0.4977], [0.3725], [0.0796], [0.7204], [0.7475], [0.4706], [0.6746], [0.4954]]]], 2, Con43423), 
LAve16799 = average_layer([[[[0.1579, 0.6301]]], [[[0.7877, 0.222]]]], Ave16799), 
LUp_15901 = up_sampling1D_layer(Ave16799, 2, Up_15901), 
LZer45331 = zero_padding1D_layer(Up_15901, 14, 0, Zer45331), 
LMax680 = maximum_layer([Con43423,Zer45331], Max680), 
exec_layers([LMas44559,LRes65398,LFla44362,LDot74452,LCon75555,LMin58386,LRes18391,LCon43423,LAve16799,LUp_15901,LZer45331,LMax680],["Mas44559","Res65398","Fla44362","Dot74452","Con75555","Min58386","Res18391","Con43423","Ave16799","Up_15901","Zer45331","Max680"],Max680,"Max680")

Actual (Unparsed): [[[0.5964689, 0.6251000], [0.0563000, 0.5664000], [0.7473000, 0.8357000], [0.4388000, 0.9032000], [0.7365000, 0.3865000], [0.7587000, 0.7950000], [0.3430000, 0.1183000], [0.8433000, 0.3123000], [0.7926000, 0.4977000], [0.7479000, 0.3725000], [0.9748000, 0.0796000], [0.0755000, 0.7204000], [0.5985000, 0.7475000], [0.0961000, 0.4706000], [0.4728000, 0.6746000], [0.4728000, 0.4954000]]]

Expected (Unparsed): [[[0.5964688800000001,0.6251],[0.0563,0.5664],[0.7473,0.8357],[0.4388,0.9032],[0.7365,0.3865],[0.7587,0.795],[0.343,0.1183],[0.8433,0.3123],[0.7926,0.4977],[0.7479,0.3725],[0.9748,0.0796],[0.0755,0.7204],[0.5985,0.7475],[0.0961,0.4706],[0.4728,0.6746],[0.4728,0.4954]]]

Actual:   [[[0.5965, 0.6251], [0.0563, 0.5664], [0.7473, 0.8357], [0.4388, 0.9032], [0.7365, 0.3865], [0.7587, 0.795], [0.343, 0.1183], [0.8433, 0.3123], [0.7926, 0.4977], [0.7479, 0.3725], [0.9748, 0.0796], [0.0755, 0.7204], [0.5985, 0.7475], [0.0961, 0.4706], [0.4728, 0.6746], [0.4728, 0.4954]]]

Expected: [[[0.5965, 0.6251], [0.0563, 0.5664], [0.7473, 0.8357], [0.4388, 0.9032], [0.7365, 0.3865], [0.7587, 0.795], [0.343, 0.1183], [0.8433, 0.3123], [0.7926, 0.4977], [0.7479, 0.3725], [0.9748, 0.0796], [0.0755, 0.7204], [0.5985, 0.7475], [0.0961, 0.4706], [0.4728, 0.6746], [0.4728, 0.4954]]]