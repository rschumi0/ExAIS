import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer12319 = tf.keras.layers.Input(shape=([1, 3, 1]))

Zer12319 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer12319', )(in0Zer12319)
ELU30717 = keras.layers.ELU(alpha=0.42184934013651443, name = 'ELU30717', )(Zer12319)
Den4193 = keras.layers.Dense(3,name = 'Den4193', )(ELU30717)
model = tf.keras.models.Model(inputs=[in0Zer12319], outputs=Den4193)
w = model.get_layer('Den4193').get_weights() 
w[0] = np.array([[0.9514, 0.9456, 0.0731]])
w[1] = np.array([0.4134, 0.9136, 0.2202])
model.get_layer('Den4193').set_weights(w) 
in0Zer12319 = tf.constant([[[[1.3518], [1.1359], [1.3616]]]])
print (np.array2string(model.predict([in0Zer12319],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Den4193.png')

LZer12319 = zero_padding2D_layer([[[[1.3518], [1.1359], [1.3616]]]], 1, 1, 1, 1, Zer12319), 
LELU30717 = elu_layer(Zer12319, 0.42184934013651443, ELU30717), 
LDen4193 = dense_layer(ELU30717, [[0.9514, 0.9456, 0.0731]],[0.4134, 0.9136, 0.2202], Den4193), 
exec_layers([LZer12319,LELU30717,LDen4193],["Zer12319","ELU30717","Den4193"],Den4193,"Den4193")

Actual (Unparsed): [[[[0.4134000, 0.9136000, 0.2202000], [0.4134000, 0.9136000, 0.2202000], [0.4134000, 0.9136000, 0.2202000], [0.4134000, 0.9136000, 0.2202000], [0.4134000, 0.9136000, 0.2202000]], [[0.4134000, 0.9136000, 0.2202000], [1.6995025, 2.1918620, 0.3190166], [1.4940953, 1.9877071, 0.3032343], [1.7088263, 2.2011290, 0.3197330], [0.4134000, 0.9136000, 0.2202000]], [[0.4134000, 0.9136000, 0.2202000], [0.4134000, 0.9136000, 0.2202000], [0.4134000, 0.9136000, 0.2202000], [0.4134000, 0.9136000, 0.2202000], [0.4134000, 0.9136000, 0.2202000]]]]

Expected (Unparsed): [[[[0.4134,0.9136,0.2202],[0.4134,0.9136,0.2202],[0.4134,0.9136,0.2202],[0.4134,0.9136,0.2202],[0.4134,0.9136,0.2202]],[[0.4134,0.9136,0.2202],[1.69950252,2.19186208,0.31901658],[1.49409526,1.9877070399999999,0.30323429],[1.70882624,2.20112896,0.31973296],[0.4134,0.9136,0.2202]],[[0.4134,0.9136,0.2202],[0.4134,0.9136,0.2202],[0.4134,0.9136,0.2202],[0.4134,0.9136,0.2202],[0.4134,0.9136,0.2202]]]]

Actual:   [[[[0.4134, 0.9136, 0.2202], [0.4134, 0.9136, 0.2202], [0.4134, 0.9136, 0.2202], [0.4134, 0.9136, 0.2202], [0.4134, 0.9136, 0.2202]], [[0.4134, 0.9136, 0.2202], [1.6996, 2.1919, 0.3191], [1.4941, 1.9878, 0.3033], [1.7089, 2.2012, 0.3198], [0.4134, 0.9136, 0.2202]], [[0.4134, 0.9136, 0.2202], [0.4134, 0.9136, 0.2202], [0.4134, 0.9136, 0.2202], [0.4134, 0.9136, 0.2202], [0.4134, 0.9136, 0.2202]]]]

Expected: [[[[0.4134, 0.9136, 0.2202], [0.4134, 0.9136, 0.2202], [0.4134, 0.9136, 0.2202], [0.4134, 0.9136, 0.2202], [0.4134, 0.9136, 0.2202]], [[0.4134, 0.9136, 0.2202], [1.6996, 2.1919, 0.3191], [1.4941, 1.9878, 0.3033], [1.7089, 2.2012, 0.3198], [0.4134, 0.9136, 0.2202]], [[0.4134, 0.9136, 0.2202], [0.4134, 0.9136, 0.2202], [0.4134, 0.9136, 0.2202], [0.4134, 0.9136, 0.2202], [0.4134, 0.9136, 0.2202]]]]