import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul34676 = tf.keras.layers.Input(shape=([1, 2, 1]))
in1Mul34676 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con78419 = tf.keras.layers.Input(shape=([2, 2, 3]))
in0Up_33953 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Ave66161 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in1Ave66161 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in0Ave97649 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Ave97649 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con38868 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con52831 = tf.keras.layers.Input(shape=([2, 2, 4, 1]))
in0Max67353 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))
in1Max67353 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))

Mul34676 = keras.layers.Multiply(name = 'Mul34676', )([in0Mul34676,in1Mul34676])
Zer72358 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer72358', )(Mul34676)
Con78419 = keras.layers.Concatenate(axis=3, name = 'Con78419', )([Zer72358,in0Con78419])
Up_33953 = keras.layers.UpSampling3D(size=(1, 1, 1), name = 'Up_33953', )(in0Up_33953)
Cro38221 = keras.layers.Cropping3D(cropping=((1, 0), (0, 1), (0, 0)), name = 'Cro38221', )(Up_33953)
Zer91674 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (0, 0)), name = 'Zer91674', )(Cro38221)
Ave66161 = keras.layers.Average(name = 'Ave66161', )([in0Ave66161,in1Ave66161])
Min16542 = keras.layers.Minimum(name = 'Min16542', )([Zer91674,Ave66161])
Res47237 = keras.layers.Reshape((2, 1, 4), name = 'Res47237', )(Min16542)
Zer25494 = keras.layers.ZeroPadding2D(padding=((0, 0), (1, 0)), name = 'Zer25494', )(Res47237)
Ave97649 = keras.layers.Average(name = 'Ave97649', )([in0Ave97649,in1Ave97649])
Con38868 = keras.layers.Concatenate(axis=3, name = 'Con38868', )([Ave97649,in0Con38868])
Max59078 = keras.layers.Maximum(name = 'Max59078', )([Zer25494,Con38868])
Add76609 = keras.layers.Add(name = 'Add76609', )([Con78419,Max59078])
Res82901 = keras.layers.Reshape((2, 2, 4, 1), name = 'Res82901', )(Add76609)
Con52831 = keras.layers.Concatenate(axis=4, name = 'Con52831', )([Res82901,in0Con52831])
Max67353 = keras.layers.Maximum(name = 'Max67353', )([in0Max67353,in1Max67353])
Zer33016 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (2, 0)), name = 'Zer33016', )(Max67353)
Ave89082 = keras.layers.Average(name = 'Ave89082', )([Con52831,Zer33016])
model = tf.keras.models.Model(inputs=[in0Mul34676,in1Mul34676,in0Con78419,in0Up_33953,in0Ave66161,in1Ave66161,in0Ave97649,in1Ave97649,in0Con38868,in0Con52831,in0Max67353,in1Max67353], outputs=Ave89082)
in0Mul34676 = tf.constant([[[[0.2766], [0.8835]]]])
in1Mul34676 = tf.constant([[[[0.395], [0.8887]]]])
in0Con78419 = tf.constant([[[[0.084, 0.9974, 0.0444], [0.5856, 0.0483, 0.5835]], [[0.4614, 0.7019, 0.3203], [0.9351, 0.8248, 0.753]]]])
in0Up_33953 = tf.constant([[[[[1.5958, 1.2907], [1.8565, 1.3897]], [[1.0959, 1.5993], [1.4073, 1.7572]]], [[[1.7073, 1.231], [1.4158, 1.2493]], [[1.8535, 1.7207], [1.9347, 1.3861]]]]])
in0Ave66161 = tf.constant([[[[[0.2988, 0.0981], [0.4386, 0.3824]]], [[[0.3999, 0.9849], [0.8328, 0.5549]]]]])
in1Ave66161 = tf.constant([[[[[0.2276, 0.8747], [0.0569, 0.5001]]], [[[0.8417, 0.3912], [0.2529, 0.1233]]]]])
in0Ave97649 = tf.constant([[[[0.7269, 0.7989], [0.5202, 0.528]], [[0.0257, 0.6774], [0.7346, 0.3701]]]])
in1Ave97649 = tf.constant([[[[0.7435, 0.4699], [0.778, 0.5255]], [[0.5398, 0.5579], [0.7904, 0.8252]]]])
in0Con38868 = tf.constant([[[[0.4679, 0.4272], [0.6267, 0.2857]], [[0.5739, 0.3788], [0.4834, 0.5669]]]])
in0Con52831 = tf.constant([[[[[0.104], [0.076], [0.7883], [0.7923]], [[0.985], [0.1694], [0.5549], [0.9325]]], [[[0.382], [0.3356], [0.6383], [0.78]], [[0.0375], [0.0813], [0.2419], [0.8057]]]]])
in0Max67353 = tf.constant([[[[[0.0701, 0.6301], [0.7362, 0.1697]], [[0.0982, 0.3679], [0.6592, 0.5516]]]]])
in1Max67353 = tf.constant([[[[[0.7592, 0.8947], [0.4882, 0.387]], [[0.4199, 0.0082], [0.1533, 0.0842]]]]])
print (np.array2string(model.predict([in0Mul34676,in1Mul34676,in0Con78419,in0Up_33953,in0Ave66161,in1Ave66161,in0Ave97649,in1Ave97649,in0Con38868,in0Con52831,in0Max67353,in1Max67353],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave89082.png')

LMul34676 = multiply_layer([[[[[0.2766], [0.8835]]]], [[[[0.395], [0.8887]]]]], Mul34676), 
LZer72358 = zero_padding2D_layer(Mul34676, 1, 0, 0, 0, Zer72358), 
LCon78419 = concatenate_layer([Zer72358,[[[[0.084, 0.9974, 0.0444], [0.5856, 0.0483, 0.5835]], [[0.4614, 0.7019, 0.3203], [0.9351, 0.8248, 0.753]]]]], 3, Con78419), 
LUp_33953 = up_sampling3D_layer([[[[[1.5958, 1.2907], [1.8565, 1.3897]], [[1.0959, 1.5993], [1.4073, 1.7572]]], [[[1.7073, 1.231], [1.4158, 1.2493]], [[1.8535, 1.7207], [1.9347, 1.3861]]]]], 1, 1, 1, Up_33953), 
LCro38221 = cropping3D_layer(Up_33953, 1, 0, 0, 1, 0, 0, Cro38221), 
LZer91674 = zero_padding3D_layer(Cro38221, 1, 0, 0, 0, 0, 0, Zer91674), 
LAve66161 = average_layer([[[[[[0.2988, 0.0981], [0.4386, 0.3824]]], [[[0.3999, 0.9849], [0.8328, 0.5549]]]]], [[[[[0.2276, 0.8747], [0.0569, 0.5001]]], [[[0.8417, 0.3912], [0.2529, 0.1233]]]]]], Ave66161), 
LMin16542 = minimum_layer([Zer91674,Ave66161], Min16542), 
LRes47237 = reshape_layer(Min16542, [2, 1, 4], Res47237), 
LZer25494 = zero_padding2D_layer(Res47237, 0, 0, 1, 0, Zer25494), 
LAve97649 = average_layer([[[[[0.7269, 0.7989], [0.5202, 0.528]], [[0.0257, 0.6774], [0.7346, 0.3701]]]], [[[[0.7435, 0.4699], [0.778, 0.5255]], [[0.5398, 0.5579], [0.7904, 0.8252]]]]], Ave97649), 
LCon38868 = concatenate_layer([Ave97649,[[[[0.4679, 0.4272], [0.6267, 0.2857]], [[0.5739, 0.3788], [0.4834, 0.5669]]]]], 3, Con38868), 
LMax59078 = maximum_layer([Zer25494,Con38868], Max59078), 
LAdd76609 = add_layer([Con78419,Max59078], Add76609), 
LRes82901 = reshape_layer(Add76609, [2, 2, 4, 1], Res82901), 
LCon52831 = concatenate_layer([Res82901,[[[[[0.104], [0.076], [0.7883], [0.7923]], [[0.985], [0.1694], [0.5549], [0.9325]]], [[[0.382], [0.3356], [0.6383], [0.78]], [[0.0375], [0.0813], [0.2419], [0.8057]]]]]], 4, Con52831), 
LMax67353 = maximum_layer([[[[[[0.0701, 0.6301], [0.7362, 0.1697]], [[0.0982, 0.3679], [0.6592, 0.5516]]]]], [[[[[0.7592, 0.8947], [0.4882, 0.387]], [[0.4199, 0.0082], [0.1533, 0.0842]]]]]], Max67353), 
LZer33016 = zero_padding3D_layer(Max67353, 1, 0, 0, 0, 2, 0, Zer33016), 
LAve89082 = average_layer([Con52831,Zer33016], Ave89082), 
exec_layers([LMul34676,LZer72358,LCon78419,LUp_33953,LCro38221,LZer91674,LAve66161,LMin16542,LRes47237,LZer25494,LAve97649,LCon38868,LMax59078,LAdd76609,LRes82901,LCon52831,LMax67353,LZer33016,LAve89082],["Mul34676","Zer72358","Con78419","Up_33953","Cro38221","Zer91674","Ave66161","Min16542","Res47237","Zer25494","Ave97649","Con38868","Max59078","Add76609","Res82901","Con52831","Max67353","Zer33016","Ave89082"],Ave89082,"Ave89082")

Actual (Unparsed): [[[[[0.3676000, 0.0520000], [0.3592000, 0.0380000], [0.7326500, 0.3941500], [0.2358000, 0.3961500]], [[0.3245500, 0.4925000], [0.5561750, 0.0847000], [0.3375000, 0.2774500], [0.4346000, 0.4662500]]], [[[0.1960035, 0.1910000], [0.5395250, 0.1678000], [1.0175000, 0.7665000], [0.7176500, 0.5835000]], [[0.7738332, 0.0187500], [0.8115750, 0.0406500], [0.8937750, 0.3049000], [0.9895500, 0.6786500]]]]]

Expected (Unparsed): [[[[[0.36760000000000004,0.052],[0.3592,0.038],[0.73265,0.39415],[0.2358,0.39615]],[[0.32455,0.4925],[0.5561750000000001,0.0847],[0.3375,0.27745],[0.4346,0.46625]]],[[[0.19600349999999997,0.191],[0.539525,0.1678],[1.0174999999999998,0.7665],[0.71765,0.5835]],[[0.773833225,0.01875],[0.811575,0.04065],[0.893775,0.3049],[0.98955,0.67865]]]]]

Actual:   [[[[[0.3676, 0.052], [0.3592, 0.038], [0.7327, 0.3942], [0.2358, 0.3962]], [[0.3246, 0.4925], [0.5562, 0.0847], [0.3375, 0.2775], [0.4346, 0.4663]]], [[[0.1961, 0.191], [0.5396, 0.1678], [1.0175, 0.7665], [0.7177, 0.5835]], [[0.7739, 0.0188], [0.8116, 0.0407], [0.8938, 0.3049], [0.9896, 0.6787]]]]]

Expected: [[[[[0.3677, 0.052], [0.3592, 0.038], [0.7327, 0.3942], [0.2358, 0.3962]], [[0.3246, 0.4925], [0.5562, 0.0847], [0.3375, 0.2775], [0.4346, 0.4663]]], [[[0.1961, 0.191], [0.5396, 0.1678], [1.0175, 0.7665], [0.7177, 0.5835]], [[0.7739, 0.0188], [0.8116, 0.0407], [0.8938, 0.3049], [0.9896, 0.6787]]]]]