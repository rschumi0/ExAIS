import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add8573 = tf.keras.layers.Input(shape=([1, 2, 1]))
in1Add8573 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con78528 = tf.keras.layers.Input(shape=([2, 3, 3, 2]))
in0Sub41532 = tf.keras.layers.Input(shape=([2, 3, 3, 3]))
in1Sub41532 = tf.keras.layers.Input(shape=([2, 3, 3, 3]))

Add8573 = keras.layers.Add(name = 'Add8573', )([in0Add8573,in1Add8573])
Res79579 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res79579', )(Add8573)
Zer99364 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (2, 0)), name = 'Zer99364', )(Res79579)
Con78528 = keras.layers.Concatenate(axis=4, name = 'Con78528', )([Zer99364,in0Con78528])
Sub41532 = keras.layers.Subtract(name = 'Sub41532', )([in0Sub41532,in1Sub41532])
Add96233 = keras.layers.Add(name = 'Add96233', )([Con78528,Sub41532])
model = tf.keras.models.Model(inputs=[in0Add8573,in1Add8573,in0Con78528,in0Sub41532,in1Sub41532], outputs=Add96233)
in0Add8573 = tf.constant([[[[0.1079], [0.0338]]]])
in1Add8573 = tf.constant([[[[0.4039], [0.3795]]]])
in0Con78528 = tf.constant([[[[[0.6802, 0.7313], [0.7297, 0.8862], [0.2845, 0.3089]], [[0.0315, 0.4519], [0.6818, 0.5993], [0.5136, 0.87]], [[0.6125, 0.8383], [0.332, 0.2421], [0.6591, 0.6805]]], [[[0.7516, 0.4884], [0.3866, 0.9372], [0.1583, 0.2704]], [[0.2395, 0.6752], [0.3902, 0.3773], [0.6917, 0.4983]], [[0.5055, 0.9128], [0.2091, 0.9963], [0.9359, 0.1786]]]]])
in0Sub41532 = tf.constant([[[[[0.0538, 0.5766, 0.346], [0.3313, 0.3222, 0.7692], [0.6078, 0.0466, 0.4417]], [[0.871, 0.6008, 0.3789], [0.8832, 0.9277, 0.5532], [0.8628, 0.0314, 0.6083]], [[0.3422, 0.8428, 0.6994], [0.6031, 0.7302, 0.9049], [0.3979, 0.5858, 0.7138]]], [[[0.2049, 0.9155, 0.8446], [0.3688, 0.8523, 0.0243], [0.9535, 0.6603, 0.7202]], [[0.2832, 0.2722, 0.1739], [0.9263, 0.9818, 0.6381], [0.6209, 0.7577, 0.2397]], [[0.3463, 0.272, 0.9959], [0.1547, 0.4003, 0.1807], [0.4416, 0.6835, 0.0605]]]]])
in1Sub41532 = tf.constant([[[[[0.1736, 0.9323, 0.6255], [0.9183, 0.1049, 0.3027], [0.6845, 0.0778, 0.7984]], [[0.5451, 0.0829, 0.544], [0.4326, 0.894, 0.618], [0.5797, 0.8679, 0.6802]], [[0.3655, 0.6249, 0.5541], [0.5795, 0.4591, 0.3473], [0.2134, 0.3135, 0.505]]], [[[0.5367, 0.4499, 0.9533], [0.2276, 0.8442, 0.8008], [0.7216, 0.8819, 0.8216]], [[0.5151, 0.5944, 0.8209], [0.3207, 0.5238, 0.0606], [0.3572, 0.0755, 0.646]], [[0.1158, 0.7226, 0.2089], [0.0662, 0.937, 0.4934], [0.4811, 0.5148, 0.7146]]]]])
print (np.array2string(model.predict([in0Add8573,in1Add8573,in0Con78528,in0Sub41532,in1Sub41532],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add96233.png')

LAdd8573 = add_layer([[[[[0.1079], [0.0338]]]], [[[[0.4039], [0.3795]]]]], Add8573), 
LRes79579 = reshape_layer(Add8573, [1, 2, 1, 1], Res79579), 
LZer99364 = zero_padding3D_layer(Res79579, 1, 0, 1, 0, 2, 0, Zer99364), 
LCon78528 = concatenate_layer([Zer99364,[[[[[0.6802, 0.7313], [0.7297, 0.8862], [0.2845, 0.3089]], [[0.0315, 0.4519], [0.6818, 0.5993], [0.5136, 0.87]], [[0.6125, 0.8383], [0.332, 0.2421], [0.6591, 0.6805]]], [[[0.7516, 0.4884], [0.3866, 0.9372], [0.1583, 0.2704]], [[0.2395, 0.6752], [0.3902, 0.3773], [0.6917, 0.4983]], [[0.5055, 0.9128], [0.2091, 0.9963], [0.9359, 0.1786]]]]]], 4, Con78528), 
LSub41532 = subtract_layer([[[[[0.0538, 0.5766, 0.346], [0.3313, 0.3222, 0.7692], [0.6078, 0.0466, 0.4417]], [[0.871, 0.6008, 0.3789], [0.8832, 0.9277, 0.5532], [0.8628, 0.0314, 0.6083]], [[0.3422, 0.8428, 0.6994], [0.6031, 0.7302, 0.9049], [0.3979, 0.5858, 0.7138]]], [[[0.2049, 0.9155, 0.8446], [0.3688, 0.8523, 0.0243], [0.9535, 0.6603, 0.7202]], [[0.2832, 0.2722, 0.1739], [0.9263, 0.9818, 0.6381], [0.6209, 0.7577, 0.2397]], [[0.3463, 0.272, 0.9959], [0.1547, 0.4003, 0.1807], [0.4416, 0.6835, 0.0605]]]]], [[[[[0.1736, 0.9323, 0.6255], [0.9183, 0.1049, 0.3027], [0.6845, 0.0778, 0.7984]], [[0.5451, 0.0829, 0.544], [0.4326, 0.894, 0.618], [0.5797, 0.8679, 0.6802]], [[0.3655, 0.6249, 0.5541], [0.5795, 0.4591, 0.3473], [0.2134, 0.3135, 0.505]]], [[[0.5367, 0.4499, 0.9533], [0.2276, 0.8442, 0.8008], [0.7216, 0.8819, 0.8216]], [[0.5151, 0.5944, 0.8209], [0.3207, 0.5238, 0.0606], [0.3572, 0.0755, 0.646]], [[0.1158, 0.7226, 0.2089], [0.0662, 0.937, 0.4934], [0.4811, 0.5148, 0.7146]]]]], Sub41532), 
LAdd96233 = add_layer([Con78528,Sub41532], Add96233), 
exec_layers([LAdd8573,LRes79579,LZer99364,LCon78528,LSub41532,LAdd96233],["Add8573","Res79579","Zer99364","Con78528","Sub41532","Add96233"],Add96233,"Add96233")

Actual (Unparsed): [[[[[-0.1198000, 0.3245000, 0.4518000], [-0.5870000, 0.9470000, 1.3527000], [-0.0767000, 0.2533000, -0.0478000]], [[0.3259000, 0.5494000, 0.2868000], [0.4506000, 0.7155000, 0.5345001], [0.2831000, -0.3229000, 0.7981000]], [[-0.0233000, 0.8304000, 0.9836000], [0.0236000, 0.6031000, 0.7997000], [0.1845000, 0.9314000, 0.8893000]]], [[[-0.3318000, 1.2172000, 0.3797000], [0.1412000, 0.3947000, 0.1607000], [0.2319000, -0.0633000, 0.1690000]], [[-0.2319000, -0.0827000, 0.0282000], [0.6056000, 0.8482000, 0.9548000], [0.7755000, 1.3739000, 0.0920000]], [[0.2305000, 0.0549001, 1.6998000], [0.0885000, -0.3276000, 0.6836000], [0.3738000, 1.1046000, -0.4755000]]]]]

Expected (Unparsed): [[[[[-0.1198,0.3245,0.4518],[-0.587,0.9470000000000001,1.3527],[-0.07669999999999999,0.25329999999999997,-0.04780000000000001]],[[0.32589999999999997,0.5494,0.2868],[0.4506,0.7154999999999999,0.5345000000000001],[0.2831,-0.3229000000000001,0.7980999999999999]],[[-0.023299999999999987,0.8304,0.9836],[0.023599999999999954,0.6031,0.7997000000000001],[0.18449999999999997,0.9314,0.8893]]],[[[-0.3318,1.2172,0.3797],[0.14120000000000002,0.3947,0.16070000000000007],[0.2319,-0.06330000000000002,0.16899999999999993]],[[-0.2319,-0.08270000000000005,0.028200000000000003],[0.6056,0.8482,0.9548000000000001],[0.7755000000000001,1.3739,0.09200000000000003]],[[0.23049999999999998,0.05489999999999995,1.6998],[0.08850000000000001,-0.32760000000000006,0.6836],[0.37379999999999997,1.1046,-0.47550000000000003]]]]]

Actual:   [[[[[-0.1198, 0.3245, 0.4518], [-0.587, 0.947, 1.3527], [-0.0767, 0.2533, -0.0478]], [[0.3259, 0.5494, 0.2868], [0.4506, 0.7155, 0.5346], [0.2831, -0.3229, 0.7981]], [[-0.0233, 0.8304, 0.9836], [0.0236, 0.6031, 0.7997], [0.1845, 0.9314, 0.8893]]], [[[-0.3318, 1.2172, 0.3797], [0.1412, 0.3947, 0.1607], [0.2319, -0.0633, 0.169]], [[-0.2319, -0.0827, 0.0282], [0.6056, 0.8482, 0.9548], [0.7755, 1.3739, 0.092]], [[0.2305, 0.055, 1.6998], [0.0885, -0.3276, 0.6836], [0.3738, 1.1046, -0.4755]]]]]

Expected: [[[[[-0.1198, 0.3245, 0.4518], [-0.587, 0.9471, 1.3527], [-0.0766, 0.2533, -0.0478]], [[0.3259, 0.5494, 0.2868], [0.4506, 0.7155, 0.5346], [0.2831, -0.3229, 0.7981]], [[-0.0232, 0.8304, 0.9836], [0.0236, 0.6031, 0.7998], [0.1845, 0.9314, 0.8893]]], [[[-0.3318, 1.2172, 0.3797], [0.1413, 0.3947, 0.1608], [0.2319, -0.0633, 0.169]], [[-0.2319, -0.0827, 0.0283], [0.6056, 0.8482, 0.9549], [0.7756, 1.3739, 0.0921]], [[0.2305, 0.0549, 1.6998], [0.0886, -0.3276, 0.6836], [0.3738, 1.1046, -0.4755]]]]]