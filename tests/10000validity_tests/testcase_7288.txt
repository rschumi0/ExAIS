import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min72340 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in1Min72340 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))

Min72340 = keras.layers.Minimum(name = 'Min72340', )([in0Min72340,in1Min72340])
Res90945 = keras.layers.Reshape((2, 2, 2), name = 'Res90945', )(Min72340)
Con3131 = keras.layers.Conv2D(4, (2, 2),strides=(1, 1), padding='same', dilation_rate=(1, 1), name = 'Con3131', )(Res90945)
Res40302 = keras.layers.Reshape((2, 8), name = 'Res40302', )(Con3131)
Glo33848 = keras.layers.GlobalMaxPool1D(name = 'Glo33848', )(Res40302)
Res76765 = keras.layers.Reshape((8, 1), name = 'Res76765', )(Glo33848)
Res23981 = keras.layers.Reshape((8, 1, 1), name = 'Res23981', )(Res76765)
Res1278 = keras.layers.Reshape((8, 1, 1, 1), name = 'Res1278', )(Res23981)
Zer96442 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer96442', )(Res1278)
Con82011 = keras.layers.Conv3D(2, (1, 1, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con82011', )(Zer96442)
model = tf.keras.models.Model(inputs=[in0Min72340,in1Min72340], outputs=Con82011)
w = model.get_layer('Con3131').get_weights() 
w[0] = np.array([[[[0.7184, 0.1638, 0.2394, 0.5106], [0.8631, 0.2514, 0.8494, 0.1553]], [[0.0544, 0.3192, 0.5899, 0.5838], [0.7534, 0.4644, 0.0804, 0.1158]]], [[[0.5861, 0.3344, 0.5843, 0.4951], [0.2733, 0.5434, 0.3491, 0.2295]], [[0.7725, 0.0042, 0.9453, 0.815], [0.5942, 0.1785, 0.7692, 0.6841]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con3131').set_weights(w) 
w = model.get_layer('Con82011').get_weights() 
w[0] = np.array([[[[[0.8848, 0.8618]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con82011').set_weights(w) 
in0Min72340 = tf.constant([[[[[0.0971], [0.2359]], [[0.5255], [0.4543]]], [[[0.8332], [0.536]], [[0.3849], [0.3863]]]]])
in1Min72340 = tf.constant([[[[[0.1123], [0.8781]], [[0.5], [0.9143]]], [[[0.6263], [0.2481]], [[0.4648], [0.0552]]]]])
print (np.array2string(model.predict([in0Min72340,in1Min72340],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con82011.png')

LMin72340 = minimum_layer([[[[[[0.0971], [0.2359]], [[0.5255], [0.4543]]], [[[0.8332], [0.536]], [[0.3849], [0.3863]]]]], [[[[[0.1123], [0.8781]], [[0.5], [0.9143]]], [[[0.6263], [0.2481]], [[0.4648], [0.0552]]]]]], Min72340), 
LRes90945 = reshape_layer(Min72340, [2, 2, 2], Res90945), 
LCon3131 = conv2D_layer(Res90945, 2, 2,[[[[0.7184, 0.1638, 0.2394, 0.5106], [0.8631, 0.2514, 0.8494, 0.1553]], [[0.0544, 0.3192, 0.5899, 0.5838], [0.7534, 0.4644, 0.0804, 0.1158]]], [[[0.5861, 0.3344, 0.5843, 0.4951], [0.2733, 0.5434, 0.3491, 0.2295]], [[0.7725, 0.0042, 0.9453, 0.815], [0.5942, 0.1785, 0.7692, 0.6841]]]],[0, 0, 0, 0], 1, 1, true, 1, 1, Con3131), 
LRes40302 = reshape_layer(Con3131, [2, 8], Res40302), 
LGlo33848 = global_max_pool1D_layer(Res40302, Glo33848), 
LRes76765 = reshape_layer(Glo33848, [8, 1], Res76765), 
LRes23981 = reshape_layer(Res76765, [8, 1, 1], Res23981), 
LRes1278 = reshape_layer(Res23981, [8, 1, 1, 1], Res1278), 
LZer96442 = zero_padding3D_layer(Res1278, 1, 1, 1, 1, 1, 1, Zer96442), 
LCon82011 = conv3D_layer(Zer96442, 1, 1, 1,[[[[[0.8848, 0.8618]]]]],[0, 0], 1, 1, 1, false, 1, 1, 1, Con82011), 
exec_layers([LMin72340,LRes90945,LCon3131,LRes40302,LGlo33848,LRes76765,LRes23981,LRes1278,LZer96442,LCon82011],["Min72340","Res90945","Con3131","Res40302","Glo33848","Res76765","Res23981","Res1278","Zer96442","Con82011"],Con82011,"Con82011")

Actual (Unparsed): [[[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [1.2456628, 1.2132824], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.7091753, 0.6907406], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [1.2510714, 1.2185503], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [1.0168107, 0.9903791], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.8777060, 0.8548904], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.3139423, 0.3057815], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.6633786, 0.6461344], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.4681346, 0.4559656], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]]]]

Expected (Unparsed): [[[[[0.0,0.0],[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0],[0.0,0.0]]],[[[0.0,0.0],[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[1.24566284864,1.21328237224],[0.0,0.0]],[[0.0,0.0],[0.0,0.0],[0.0,0.0]]],[[[0.0,0.0],[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.7091753401600001,0.6907406285600001],[0.0,0.0]],[[0.0,0.0],[0.0,0.0],[0.0,0.0]]],[[[0.0,0.0],[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[1.2510713921440002,1.218550322954],[0.0,0.0]],[[0.0,0.0],[0.0,0.0],[0.0,0.0]]],[[[0.0,0.0],[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[1.016810717776,0.990379155266],[0.0,0.0]],[[0.0,0.0],[0.0,0.0],[0.0,0.0]]],[[[0.0,0.0],[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.8777060098239999,0.854890415084],[0.0,0.0]],[[0.0,0.0],[0.0,0.0],[0.0,0.0]]],[[[0.0,0.0],[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.313942311648,0.305781514668],[0.0,0.0]],[[0.0,0.0],[0.0,0.0],[0.0,0.0]]],[[[0.0,0.0],[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.663378631888,0.646134386258],[0.0,0.0]],[[0.0,0.0],[0.0,0.0],[0.0,0.0]]],[[[0.0,0.0],[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.46813456726400005,0.45596560812400005],[0.0,0.0]],[[0.0,0.0],[0.0,0.0],[0.0,0.0]]],[[[0.0,0.0],[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0],[0.0,0.0]]]]]

Actual:   [[[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [1.2457, 1.2133], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0.7092, 0.6908], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [1.2511, 1.2186], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [1.0169, 0.9904], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0.8778, 0.8549], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0.314, 0.3058], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0.6634, 0.6462], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0.4682, 0.456], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]]]]

Expected: [[[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [1.2457, 1.2133], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0.7092, 0.6908], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [1.2511, 1.2186], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [1.0169, 0.9904], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0.8778, 0.8549], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0.314, 0.3058], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0.6634, 0.6462], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0.4682, 0.456], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]]]]