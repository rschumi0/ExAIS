import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max52515 = tf.keras.layers.Input(shape=([1, 1]))
in0Con14465 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Dep7479 = tf.keras.layers.Input(shape=([2, 2, 2]))

Max52515 = keras.layers.MaxPool1D(pool_size=(1), name = 'Max52515', )(in0Max52515)
Glo40716 = keras.layers.GlobalMaxPool1D(name = 'Glo40716', )(Max52515)
Res60503 = keras.layers.Reshape((1, 1), name = 'Res60503', )(Glo40716)
Res10637 = keras.layers.Reshape((1, 1, 1), name = 'Res10637', )(Res60503)
Zer37636 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer37636', )(Res10637)
Con14465 = keras.layers.Concatenate(axis=3, name = 'Con14465', )([Zer37636,in0Con14465])
Dep7479 = keras.layers.DepthwiseConv2D((1, 2),strides=(2, 2), padding='same', name = 'Dep7479', )(in0Dep7479)
Zer3752 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer3752', )(Dep7479)
Sep20222 = keras.layers.SeparableConv2D(3, (2, 2),strides=(1, 1), padding='valid', name = 'Sep20222', )(Zer3752)
Ave70135 = keras.layers.Average(name = 'Ave70135', )([Con14465,Sep20222])
Res43687 = keras.layers.Reshape((2, 2, 3, 1), name = 'Res43687', )(Ave70135)
Up_21802 = keras.layers.UpSampling3D(size=(2, 2, 1), name = 'Up_21802', )(Res43687)
model = tf.keras.models.Model(inputs=[in0Max52515,in0Con14465,in0Dep7479], outputs=Up_21802)
w = model.get_layer('Dep7479').get_weights() 
w[0] = np.array([[[[0.1829], [0.2833]], [[0.5555], [0.0707]]]])
w[1] = np.array([0, 0])
model.get_layer('Dep7479').set_weights(w) 
w = model.get_layer('Sep20222').get_weights() 
w[0] = np.array([[[[0.2562], [0.3425]], [[0.3236], [0.7457]]], [[[0.6274], [0.9261]], [[0.4496], [0.1786]]]])
w[1] = np.array([[[[0.0996, 0.3938, 0.7292], [0.0589, 0.0391, 0.7316]]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep20222').set_weights(w) 
in0Max52515 = tf.constant([[[1.4235]]])
in0Con14465 = tf.constant([[[[0.7667, 0.0256], [0.7576, 0.9602]], [[0.9055, 0.0974], [0.6184, 0.8497]]]])
in0Dep7479 = tf.constant([[[[0.4774, 0.4727], [0.8834, 0.839]], [[0.3666, 0.3562], [0.9421, 0.1384]]]])
print (np.array2string(model.predict([in0Max52515,in0Con14465,in0Dep7479],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Up_21802.png')

LMax52515 = max_pool1D_layer([[[1.4235]]], 1, Max52515), 
LGlo40716 = global_max_pool1D_layer(Max52515, Glo40716), 
LRes60503 = reshape_layer(Glo40716, [1, 1], Res60503), 
LRes10637 = reshape_layer(Res60503, [1, 1, 1], Res10637), 
LZer37636 = zero_padding2D_layer(Res10637, 1, 0, 1, 0, Zer37636), 
LCon14465 = concatenate_layer([Zer37636,[[[[0.7667, 0.0256], [0.7576, 0.9602]], [[0.9055, 0.0974], [0.6184, 0.8497]]]]], 3, Con14465), 
LDep7479 = depthwise_conv2D_layer([[[[0.4774, 0.4727], [0.8834, 0.839]], [[0.3666, 0.3562], [0.9421, 0.1384]]]], 1, 2,[[[[0.1829], [0.2833]], [[0.5555], [0.0707]]]],[0, 0], 2, 2, true, Dep7479), 
LZer3752 = zero_padding2D_layer(Dep7479, 1, 1, 1, 1, Zer3752), 
LSep20222 = separable_conv2D_layer(Zer3752, 2, 2,[[[[[0.2562], [0.3425]], [[0.3236], [0.7457]]], [[[0.6274], [0.9261]], [[0.4496], [0.1786]]]],[[[[0.0996, 0.3938, 0.7292], [0.0589, 0.0391, 0.7316]]]]],[0, 0, 0], 1, 1, false, Sep20222), 
LAve70135 = average_layer([Con14465,Sep20222], Ave70135), 
LRes43687 = reshape_layer(Ave70135, [2, 2, 3, 1], Res43687), 
LUp_21802 = up_sampling3D_layer(Res43687, 2, 2, 1, Up_21802), 
exec_layers([LMax52515,LGlo40716,LRes60503,LRes10637,LZer37636,LCon14465,LDep7479,LZer3752,LSep20222,LAve70135,LRes43687,LUp_21802],["Max52515","Glo40716","Res60503","Res10637","Zer37636","Con14465","Dep7479","Zer3752","Sep20222","Ave70135","Res43687","Up_21802"],Up_21802,"Up_21802")

Actual (Unparsed): [[[[[0.0139588], [0.4351969], [0.1201799]], [[0.0139588], [0.4351969], [0.1201799]], [[0.0233309], [0.4537074], [0.6777890]], [[0.0233309], [0.4537074], [0.6777890]]], [[[0.0139588], [0.4351969], [0.1201799]], [[0.0139588], [0.4351969], [0.1201799]], [[0.0233309], [0.4537074], [0.6777890]], [[0.0233309], [0.4537074], [0.6777890]]], [[[0.0135589], [0.4923982], [0.1696100]], [[0.0135589], [0.4923982], [0.1696100]], [[0.7210742], [0.3396538], [0.5030550]], [[0.7210742], [0.3396538], [0.5030550]]], [[[0.0135589], [0.4923982], [0.1696100]], [[0.0135589], [0.4923982], [0.1696100]], [[0.7210742], [0.3396538], [0.5030550]], [[0.7210742], [0.3396538], [0.5030550]]]]]

Expected (Unparsed): [[[[[0.013958839616974496],[0.4351968634380307],[0.12017985618280039]],[[0.013958839616974496],[0.4351968634380307],[0.12017985618280039]],[[0.023330917534273646],[0.45370738006482814],[0.6777889617524961]],[[0.023330917534273646],[0.45370738006482814],[0.6777889617524961]]],[[[0.013958839616974496],[0.4351968634380307],[0.12017985618280039]],[[0.013958839616974496],[0.4351968634380307],[0.12017985618280039]],[[0.023330917534273646],[0.45370738006482814],[0.6777889617524961]],[[0.023330917534273646],[0.45370738006482814],[0.6777889617524961]]],[[[0.013558928044371449],[0.4923982487643207],[0.1696099907808922]],[[0.013558928044371449],[0.4923982487643207],[0.1696099907808922]],[[0.7210742103924178],[0.3396538043914335],[0.5030550115437482]],[[0.7210742103924178],[0.3396538043914335],[0.5030550115437482]]],[[[0.013558928044371449],[0.4923982487643207],[0.1696099907808922]],[[0.013558928044371449],[0.4923982487643207],[0.1696099907808922]],[[0.7210742103924178],[0.3396538043914335],[0.5030550115437482]],[[0.7210742103924178],[0.3396538043914335],[0.5030550115437482]]]]]

Actual:   [[[[[0.014], [0.4352], [0.1202]], [[0.014], [0.4352], [0.1202]], [[0.0234], [0.4538], [0.6778]], [[0.0234], [0.4538], [0.6778]]], [[[0.014], [0.4352], [0.1202]], [[0.014], [0.4352], [0.1202]], [[0.0234], [0.4538], [0.6778]], [[0.0234], [0.4538], [0.6778]]], [[[0.0136], [0.4924], [0.1697]], [[0.0136], [0.4924], [0.1697]], [[0.7211], [0.3397], [0.5031]], [[0.7211], [0.3397], [0.5031]]], [[[0.0136], [0.4924], [0.1697]], [[0.0136], [0.4924], [0.1697]], [[0.7211], [0.3397], [0.5031]], [[0.7211], [0.3397], [0.5031]]]]]

Expected: [[[[[0.014], [0.4352], [0.1202]], [[0.014], [0.4352], [0.1202]], [[0.0234], [0.4538], [0.6778]], [[0.0234], [0.4538], [0.6778]]], [[[0.014], [0.4352], [0.1202]], [[0.014], [0.4352], [0.1202]], [[0.0234], [0.4538], [0.6778]], [[0.0234], [0.4538], [0.6778]]], [[[0.0136], [0.4924], [0.1697]], [[0.0136], [0.4924], [0.1697]], [[0.7211], [0.3397], [0.5031]], [[0.7211], [0.3397], [0.5031]]], [[[0.0136], [0.4924], [0.1697]], [[0.0136], [0.4924], [0.1697]], [[0.7211], [0.3397], [0.5031]], [[0.7211], [0.3397], [0.5031]]]]]