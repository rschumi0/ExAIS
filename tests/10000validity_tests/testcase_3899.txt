import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro80059 = tf.keras.layers.Input(shape=([4, 4, 4]))
in0Ave19075 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Up_40746 = tf.keras.layers.Input(shape=([1, 1]))
in0Con80227 = tf.keras.layers.Input(shape=([2, 7]))
in0Con96453 = tf.keras.layers.Input(shape=([2, 8, 3]))
in0Cro60654 = tf.keras.layers.Input(shape=([4, 2, 4]))

Cro80059 = keras.layers.Cropping2D(cropping=((1, 2), (2, 0)), name = 'Cro80059', )(in0Cro80059)
Res97371 = keras.layers.Reshape((1, 8), name = 'Res97371', )(Cro80059)
Zer67873 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer67873', )(Res97371)
Ave19075 = keras.layers.AveragePooling2D(pool_size=(1, 1), strides=(1, 12), padding='valid', name = 'Ave19075', )(in0Ave19075)
Res37187 = keras.layers.Reshape((2, 1), name = 'Res37187', )(Ave19075)
Up_40746 = keras.layers.UpSampling1D(size=(2), name = 'Up_40746', )(in0Up_40746)
Min53053 = keras.layers.Minimum(name = 'Min53053', )([Res37187,Up_40746])
Con80227 = keras.layers.Concatenate(axis=2, name = 'Con80227', )([Min53053,in0Con80227])
Mul56868 = keras.layers.Multiply(name = 'Mul56868', )([Zer67873,Con80227])
Res79723 = keras.layers.Reshape((2, 8, 1), name = 'Res79723', )(Mul56868)
Con96453 = keras.layers.Concatenate(axis=3, name = 'Con96453', )([Res79723,in0Con96453])
Cro60654 = keras.layers.Cropping2D(cropping=((1, 1), (0, 1)), name = 'Cro60654', )(in0Cro60654)
Zer68424 = keras.layers.ZeroPadding2D(padding=((0, 0), (7, 0)), name = 'Zer68424', )(Cro60654)
Sub21427 = keras.layers.Subtract(name = 'Sub21427', )([Con96453,Zer68424])
model = tf.keras.models.Model(inputs=[in0Cro80059,in0Ave19075,in0Up_40746,in0Con80227,in0Con96453,in0Cro60654], outputs=Sub21427)
in0Cro80059 = tf.constant([[[[1.7154, 1.3171, 1.4446, 1.1304], [1.8751, 1.6293, 1.7896, 1.7562], [1.4807, 1.8611, 1.3219, 1.0309], [1.9558, 1.584, 1.0792, 1.7053]], [[1.5973, 1.653, 1.3865, 1.0028], [1.5936, 1.8035, 1.1595, 1.541], [1.545, 1.4049, 1.7135, 1.419], [1.6438, 1.6401, 1.686, 1.4185]], [[1.1795, 1.8968, 1.0202, 1.7267], [1.4452, 1.8224, 1.6903, 1.7176], [1.4374, 1.3198, 1.9998, 1.1012], [1.9652, 1.7457, 1.8317, 1.1881]], [[1.9173, 1.7054, 1.1908, 1.1051], [1.4681, 1.1387, 1.7404, 1.5484], [1.9474, 1.8349, 1.8071, 1.0586], [1.9486, 1.1269, 1.5042, 1.8677]]]])
in0Ave19075 = tf.constant([[[[1.0039], [1.2739]], [[1.2063], [1.0786]]]])
in0Up_40746 = tf.constant([[[1.8145]]])
in0Con80227 = tf.constant([[[0.1309, 0.1445, 0.7141, 0.7916, 0.8606, 0.8118, 0.9928], [0.0865, 0.5873, 0.9334, 0.1841, 0.1047, 0.1851, 0.5751]]])
in0Con96453 = tf.constant([[[[0.0498, 0.5448, 0.916], [0.7156, 0.471, 0.626], [0.4446, 0.4554, 0.6318], [0.0445, 0.7929, 0.7916], [0.3982, 0.8405, 0.7907], [0.3005, 0.858, 0.1344], [0.4502, 0.6649, 0.478], [0.1364, 0.0318, 0.0811]], [[0.6764, 0.1641, 0.7497], [0.9002, 0.4907, 0.9723], [0.8891, 0.5437, 0.5248], [0.8003, 0.375, 0.2248], [0.6409, 0.6801, 0.378], [0.0338, 0.9233, 0.7086], [0.3745, 0.4976, 0.2887], [0.1866, 0.1851, 0.8145]]]])
in0Cro60654 = tf.constant([[[[1.9616, 1.5987, 1.3137, 1.5947], [1.4258, 1.9192, 1.9941, 1.56]], [[1.9341, 1.8115, 1.0994, 1.969], [1.7496, 1.4195, 1.594, 1.417]], [[1.2454, 1.9625, 1.7089, 1.2692], [1.5356, 1.0566, 1.9146, 1.222]], [[1.8496, 1.4691, 1.7364, 1.9853], [1.8843, 1.8295, 1.5247, 1.9876]]]])
print (np.array2string(model.predict([in0Cro80059,in0Ave19075,in0Up_40746,in0Con80227,in0Con96453,in0Cro60654],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub21427.png')

LCro80059 = cropping2D_layer([[[[1.7154, 1.3171, 1.4446, 1.1304], [1.8751, 1.6293, 1.7896, 1.7562], [1.4807, 1.8611, 1.3219, 1.0309], [1.9558, 1.584, 1.0792, 1.7053]], [[1.5973, 1.653, 1.3865, 1.0028], [1.5936, 1.8035, 1.1595, 1.541], [1.545, 1.4049, 1.7135, 1.419], [1.6438, 1.6401, 1.686, 1.4185]], [[1.1795, 1.8968, 1.0202, 1.7267], [1.4452, 1.8224, 1.6903, 1.7176], [1.4374, 1.3198, 1.9998, 1.1012], [1.9652, 1.7457, 1.8317, 1.1881]], [[1.9173, 1.7054, 1.1908, 1.1051], [1.4681, 1.1387, 1.7404, 1.5484], [1.9474, 1.8349, 1.8071, 1.0586], [1.9486, 1.1269, 1.5042, 1.8677]]]], 1, 2, 2, 0, Cro80059), 
LRes97371 = reshape_layer(Cro80059, [1, 8], Res97371), 
LZer67873 = zero_padding1D_layer(Res97371, 1, 0, Zer67873), 
LAve19075 = average_pooling2D_layer([[[[1.0039], [1.2739]], [[1.2063], [1.0786]]]], 1, 1, 1, 12, false, Ave19075), 
LRes37187 = reshape_layer(Ave19075, [2, 1], Res37187), 
LUp_40746 = up_sampling1D_layer([[[1.8145]]], 2, Up_40746), 
LMin53053 = minimum_layer([Res37187,Up_40746], Min53053), 
LCon80227 = concatenate_layer([Min53053,[[[0.1309, 0.1445, 0.7141, 0.7916, 0.8606, 0.8118, 0.9928], [0.0865, 0.5873, 0.9334, 0.1841, 0.1047, 0.1851, 0.5751]]]], 2, Con80227), 
LMul56868 = multiply_layer([Zer67873,Con80227], Mul56868), 
LRes79723 = reshape_layer(Mul56868, [2, 8, 1], Res79723), 
LCon96453 = concatenate_layer([Res79723,[[[[0.0498, 0.5448, 0.916], [0.7156, 0.471, 0.626], [0.4446, 0.4554, 0.6318], [0.0445, 0.7929, 0.7916], [0.3982, 0.8405, 0.7907], [0.3005, 0.858, 0.1344], [0.4502, 0.6649, 0.478], [0.1364, 0.0318, 0.0811]], [[0.6764, 0.1641, 0.7497], [0.9002, 0.4907, 0.9723], [0.8891, 0.5437, 0.5248], [0.8003, 0.375, 0.2248], [0.6409, 0.6801, 0.378], [0.0338, 0.9233, 0.7086], [0.3745, 0.4976, 0.2887], [0.1866, 0.1851, 0.8145]]]]], 3, Con96453), 
LCro60654 = cropping2D_layer([[[[1.9616, 1.5987, 1.3137, 1.5947], [1.4258, 1.9192, 1.9941, 1.56]], [[1.9341, 1.8115, 1.0994, 1.969], [1.7496, 1.4195, 1.594, 1.417]], [[1.2454, 1.9625, 1.7089, 1.2692], [1.5356, 1.0566, 1.9146, 1.222]], [[1.8496, 1.4691, 1.7364, 1.9853], [1.8843, 1.8295, 1.5247, 1.9876]]]], 1, 1, 0, 1, Cro60654), 
LZer68424 = zero_padding2D_layer(Cro60654, 0, 0, 7, 0, Zer68424), 
LSub21427 = subtract_layer(Con96453,Zer68424, Sub21427), 
exec_layers([LCro80059,LRes97371,LZer67873,LAve19075,LRes37187,LUp_40746,LMin53053,LCon80227,LMul56868,LRes79723,LCon96453,LCro60654,LZer68424,LSub21427],["Cro80059","Res97371","Zer67873","Ave19075","Res37187","Up_40746","Min53053","Con80227","Mul56868","Res79723","Con96453","Cro60654","Zer68424","Sub21427"],Sub21427,"Sub21427")

Actual (Unparsed): [[[[0.0000000, 0.0498000, 0.5448000, 0.9160000], [0.0000000, 0.7156000, 0.4710000, 0.6260000], [0.0000000, 0.4446000, 0.4554000, 0.6318000], [0.0000000, 0.0445000, 0.7929000, 0.7916000], [0.0000000, 0.3982000, 0.8405000, 0.7907000], [0.0000000, 0.3005000, 0.8580000, 0.1344000], [0.0000000, 0.4502000, 0.6649000, 0.4780000], [-1.9341000, -1.6751000, -1.0676000, -1.8879000]], [[1.8637335, 0.6764000, 0.1641000, 0.7497000], [0.1215238, 0.9002000, 0.4907000, 0.9723000], [1.0063386, 0.8891000, 0.5437000, 0.5248000], [1.3244946, 0.8003000, 0.3750000, 0.2248000], [0.3026236, 0.6409000, 0.6801000, 0.3780000], [0.1717185, 0.0338000, 0.9233000, 0.7086000], [0.3120786, 0.3745000, 0.4976000, 0.2887000], [-0.4296206, -1.7759000, -1.5238000, -0.4547000]]]]

Expected (Unparsed): [[[[0.0,0.0498,0.5448,0.916],[0.0,0.7156,0.471,0.626],[0.0,0.4446,0.4554,0.6318],[0.0,0.0445,0.7929,0.7916],[0.0,0.3982,0.8405,0.7907],[0.0,0.3005,0.858,0.1344],[0.0,0.4502,0.6649,0.478],[-1.9341,-1.6751,-1.0675999999999999,-1.8879000000000001]],[[1.8637334999999997,0.6764,0.1641,0.7497],[0.12152384999999999,0.9002,0.4907,0.9723],[1.0063385500000002,0.8891,0.5437,0.5248],[1.3244946,0.8003,0.375,0.2248],[0.30262358,0.6409,0.6801,0.378],[0.17171846999999998,0.0338,0.9233,0.7086],[0.3120786,0.3745,0.4976,0.2887],[-0.42962065000000005,-1.7759,-1.5238,-0.4547000000000001]]]]

Actual:   [[[[0, 0.0498, 0.5448, 0.916], [0, 0.7156, 0.471, 0.626], [0, 0.4446, 0.4554, 0.6318], [0, 0.0445, 0.7929, 0.7916], [0, 0.3982, 0.8405, 0.7907], [0, 0.3005, 0.858, 0.1344], [0, 0.4502, 0.6649, 0.478], [-1.9341, -1.6751, -1.0676, -1.8879]], [[1.8638, 0.6764, 0.1641, 0.7497], [0.1216, 0.9002, 0.4907, 0.9723], [1.0064, 0.8891, 0.5437, 0.5248], [1.3245, 0.8003, 0.375, 0.2248], [0.3027, 0.6409, 0.6801, 0.378], [0.1718, 0.0338, 0.9233, 0.7086], [0.3121, 0.3745, 0.4976, 0.2887], [-0.4296, -1.7759, -1.5238, -0.4547]]]]

Expected: [[[[0, 0.0498, 0.5448, 0.916], [0, 0.7156, 0.471, 0.626], [0, 0.4446, 0.4554, 0.6318], [0, 0.0445, 0.7929, 0.7916], [0, 0.3982, 0.8405, 0.7907], [0, 0.3005, 0.858, 0.1344], [0, 0.4502, 0.6649, 0.478], [-1.9341, -1.6751, -1.0675, -1.8879]], [[1.8638, 0.6764, 0.1641, 0.7497], [0.1216, 0.9002, 0.4907, 0.9723], [1.0064, 0.8891, 0.5437, 0.5248], [1.3245, 0.8003, 0.375, 0.2248], [0.3027, 0.6409, 0.6801, 0.378], [0.1718, 0.0338, 0.9233, 0.7086], [0.3121, 0.3745, 0.4976, 0.2887], [-0.4296, -1.7759, -1.5238, -0.4547]]]]