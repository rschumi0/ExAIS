import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add48356 = tf.keras.layers.Input(shape=([2, 1]))
in1Add48356 = tf.keras.layers.Input(shape=([2, 1]))
in0Add96866 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in1Add96866 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in0Con44382 = tf.keras.layers.Input(shape=([2, 2, 3]))
in0Min67188 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Min67188 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Mul8716 = tf.keras.layers.Input(shape=([1, 2, 2]))
in1Mul8716 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Con77190 = tf.keras.layers.Input(shape=([2, 2, 2]))

Add48356 = keras.layers.Add(name = 'Add48356', )([in0Add48356,in1Add48356])
Res75725 = keras.layers.Reshape((2, 1, 1), name = 'Res75725', )(Add48356)
Add96866 = keras.layers.Add(name = 'Add96866', )([in0Add96866,in1Add96866])
Res53085 = keras.layers.Reshape((2, 1, 1), name = 'Res53085', )(Add96866)
Max8415 = keras.layers.Maximum(name = 'Max8415', )([Res75725,Res53085])
Zer56528 = keras.layers.ZeroPadding2D(padding=((0, 0), (1, 0)), name = 'Zer56528', )(Max8415)
Con44382 = keras.layers.Concatenate(axis=3, name = 'Con44382', )([Zer56528,in0Con44382])
Min67188 = keras.layers.Minimum(name = 'Min67188', )([in0Min67188,in1Min67188])
Bat60315 = keras.layers.BatchNormalization(axis=2, epsilon=0.353003432517343,  name = 'Bat60315', )(Min67188)
Res53016 = keras.layers.Reshape((2, 2, 4), name = 'Res53016', )(Bat60315)
Mul8716 = keras.layers.Multiply(name = 'Mul8716', )([in0Mul8716,in1Mul8716])
Thr96989 = keras.layers.ThresholdedReLU(theta=2.4530339456035906, name = 'Thr96989', )(Mul8716)
Zer80238 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer80238', )(Thr96989)
Con77190 = keras.layers.Concatenate(axis=3, name = 'Con77190', )([Zer80238,in0Con77190])
Sub86032 = keras.layers.Subtract(name = 'Sub86032', )([Res53016,Con77190])
Mul18621 = keras.layers.Multiply(name = 'Mul18621', )([Con44382,Sub86032])
model = tf.keras.models.Model(inputs=[in0Add48356,in1Add48356,in0Add96866,in1Add96866,in0Con44382,in0Min67188,in1Min67188,in0Mul8716,in1Mul8716,in0Con77190], outputs=Mul18621)
w = model.get_layer('Bat60315').get_weights() 
w[0] = np.array([0.4331, 0.7601])
w[1] = np.array([0.1365, 0.2992])
w[2] = np.array([0.6748, 0.8168])
w[3] = np.array([0.3686, 0.1163])
model.get_layer('Bat60315').set_weights(w) 
in0Add48356 = tf.constant([[[0.8317], [0.0758]]])
in1Add48356 = tf.constant([[[0.6765], [0.5047]]])
in0Add96866 = tf.constant([[[[[0.7049], [0.8759]]]]])
in1Add96866 = tf.constant([[[[[0.3682], [0.5079]]]]])
in0Con44382 = tf.constant([[[[0.7705, 0.5196, 0.4454], [0.0985, 0.8046, 0.2187]], [[0.3329, 0.7721, 0.8725], [0.6732, 0.7971, 0.3647]]]])
in0Min67188 = tf.constant([[[[[0.6611, 0.7981], [0.8835, 0.7808]], [[0.3943, 0.8437], [0.4399, 0.6785]]], [[[0.1308, 0.7966], [0.1487, 0.3479]], [[0.3395, 0.2722], [0.4926, 0.388]]]]])
in1Min67188 = tf.constant([[[[[0.1385, 0.1456], [0.4148, 0.857]], [[0.0509, 0.0778], [0.3783, 0.888]]], [[[0.3671, 0.4523], [0.879, 0.9024]], [[0.2685, 0.1448], [0.8025, 0.168]]]]])
in0Mul8716 = tf.constant([[[[0.0351, 0.2063], [0.705, 0.2388]]]])
in1Mul8716 = tf.constant([[[[0.1185, 0.7131], [0.5678, 0.6377]]]])
in0Con77190 = tf.constant([[[[0.7679, 0.8366], [0.0393, 0.5624]], [[0.8261, 0.4025], [0.0732, 0.8066]]]])
print (np.array2string(model.predict([in0Add48356,in1Add48356,in0Add96866,in1Add96866,in0Con44382,in0Min67188,in1Min67188,in0Mul8716,in1Mul8716,in0Con77190],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul18621.png')

LAdd48356 = add_layer([[[[0.8317], [0.0758]]], [[[0.6765], [0.5047]]]], Add48356), 
LRes75725 = reshape_layer(Add48356, [2, 1, 1], Res75725), 
LAdd96866 = add_layer([[[[[[0.7049], [0.8759]]]]], [[[[[0.3682], [0.5079]]]]]], Add96866), 
LRes53085 = reshape_layer(Add96866, [2, 1, 1], Res53085), 
LMax8415 = maximum_layer([Res75725,Res53085], Max8415), 
LZer56528 = zero_padding2D_layer(Max8415, 0, 0, 1, 0, Zer56528), 
LCon44382 = concatenate_layer([Zer56528,[[[[0.7705, 0.5196, 0.4454], [0.0985, 0.8046, 0.2187]], [[0.3329, 0.7721, 0.8725], [0.6732, 0.7971, 0.3647]]]]], 3, Con44382), 
LMin67188 = minimum_layer([[[[[[0.6611, 0.7981], [0.8835, 0.7808]], [[0.3943, 0.8437], [0.4399, 0.6785]]], [[[0.1308, 0.7966], [0.1487, 0.3479]], [[0.3395, 0.2722], [0.4926, 0.388]]]]], [[[[[0.1385, 0.1456], [0.4148, 0.857]], [[0.0509, 0.0778], [0.3783, 0.888]]], [[[0.3671, 0.4523], [0.879, 0.9024]], [[0.2685, 0.1448], [0.8025, 0.168]]]]]], Min67188), 
LBat60315 = batch_normalization_layer(Min67188, 2, 0.353003432517343, [0.4331, 0.7601], [0.1365, 0.2992], [0.6748, 0.8168], [0.3686, 0.1163], Bat60315), 
LRes53016 = reshape_layer(Bat60315, [2, 2, 4], Res53016), 
LMul8716 = multiply_layer([[[[[0.0351, 0.2063], [0.705, 0.2388]]]], [[[[0.1185, 0.7131], [0.5678, 0.6377]]]]], Mul8716), 
LThr96989 = thresholded_relu_layer(Mul8716, 2.4530339456035906, Thr96989), 
LZer80238 = zero_padding2D_layer(Thr96989, 1, 0, 0, 0, Zer80238), 
LCon77190 = concatenate_layer([Zer80238,[[[[0.7679, 0.8366], [0.0393, 0.5624]], [[0.8261, 0.4025], [0.0732, 0.8066]]]]], 3, Con77190), 
LSub86032 = subtract_layer(Res53016,Con77190, Sub86032), 
LMul18621 = multiply_layer([Con44382,Sub86032], Mul18621), 
exec_layers([LAdd48356,LRes75725,LAdd96866,LRes53085,LMax8415,LZer56528,LCon44382,LMin67188,LBat60315,LRes53016,LMul8716,LThr96989,LZer80238,LCon77190,LSub86032,LMul18621],["Add48356","Res75725","Add96866","Res53085","Max8415","Zer56528","Con44382","Min67188","Bat60315","Res53016","Mul8716","Thr96989","Zer80238","Con77190","Sub86032","Mul18621"],Mul18621,"Mul18621")

Actual (Unparsed): [[[[-0.0000000, -0.1027157, -0.3969536, -0.2877535], [-0.8304126, -0.0512940, -0.1823499, -0.0911213]], [[-0.0000000, 0.0076764, -0.7395404, -0.3775034], [-0.4278184, -0.3005248, -0.1065831, -0.4475857]]]]

Expected (Unparsed): [[[[-0.0,-0.10271568151332419,-0.3969535749383518,-0.28775349379608983],[-0.8304125884782833,-0.051294048951358154,-0.1823499596228436,-0.09112128966768177]],[[-0.0,0.007676440436301183,-0.7395404670511544,-0.3775033607704925],[-0.42781844169993843,-0.3005248487727893,-0.10658312365269518,-0.4475857518526632]]]]

Actual:   [[[[-0, -0.1027, -0.3969, -0.2877], [-0.8304, -0.0512, -0.1823, -0.0911]], [[-0, 0.0077, -0.7395, -0.3775], [-0.4278, -0.3005, -0.1065, -0.4475]]]]

Expected: [[[[-0, -0.1027, -0.3969, -0.2877], [-0.8304, -0.0512, -0.1823, -0.0911]], [[-0, 0.0077, -0.7395, -0.3775], [-0.4278, -0.3005, -0.1065, -0.4475]]]]