import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max64157 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Max64157 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Dot92480 = tf.keras.layers.Input(shape=([3, 2]))
in1Dot92480 = tf.keras.layers.Input(shape=([3, 2]))
in0Con434 = tf.keras.layers.Input(shape=([4, 4, 4, 1]))
in0Ave74461 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Ave74461 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))

Max64157 = keras.layers.Maximum(name = 'Max64157', )([in0Max64157,in1Max64157])
Res47064 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res47064', )(Max64157)
Zer78150 = keras.layers.ZeroPadding3D(padding=((2, 0), (3, 0), (2, 0)), name = 'Zer78150', )(Res47064)
Dot92480 = keras.layers.Dot(axes=(1, 1), name = 'Dot92480', )([in0Dot92480,in1Dot92480])
Res54686 = keras.layers.Reshape((2, 2, 1), name = 'Res54686', )(Dot92480)
Res76194 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res76194', )(Res54686)
Zer91184 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer91184', )(Res76194)
Sub52852 = keras.layers.Subtract(name = 'Sub52852', )([Zer78150,Zer91184])
Zer50189 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (1, 0)), name = 'Zer50189', )(Sub52852)
Con434 = keras.layers.Concatenate(axis=4, name = 'Con434', )([Zer50189,in0Con434])
Ave74461 = keras.layers.Average(name = 'Ave74461', )([in0Ave74461,in1Ave74461])
Zer47472 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer47472', )(Ave74461)
Mul82994 = keras.layers.Multiply(name = 'Mul82994', )([Con434,Zer47472])
model = tf.keras.models.Model(inputs=[in0Max64157,in1Max64157,in0Dot92480,in1Dot92480,in0Con434,in0Ave74461,in1Ave74461], outputs=Mul82994)
in0Max64157 = tf.constant([[[[0.4568]], [[0.0718]]]])
in1Max64157 = tf.constant([[[[0.4892]], [[0.7086]]]])
in0Dot92480 = tf.constant([[[0.7723, 0.1826], [0.7467, 0.8593], [0.2254, 0.515]]])
in1Dot92480 = tf.constant([[[0.4585, 0.3576], [0.6046, 0.0556], [0.273, 0.7732]]])
in0Con434 = tf.constant([[[[[0.3288], [0.4142], [0.6197], [0.6049]], [[0.4511], [0.9814], [0.7197], [0.764]], [[0.8598], [0.7641], [0.7063], [0.2033]], [[0.6254], [0.5286], [0.3733], [0.4817]]], [[[0.8146], [0.3791], [0.2223], [0.3446]], [[0.3187], [0.7502], [0.1451], [0.806]], [[0.8465], [0.6446], [0.3388], [0.2301]], [[0.8159], [0.4252], [0.1192], [0.8458]]], [[[0.0296], [0.0745], [0.6532], [0.0566]], [[0.8299], [0.3317], [0.1446], [0.2396]], [[0.8949], [0.5365], [0.6759], [0.4675]], [[0.958], [0.3203], [0.7333], [0.7316]]], [[[0.5142], [0.5133], [0.4257], [0.7977]], [[0.0075], [0.7617], [0.5439], [0.7832]], [[0.0882], [0.39], [0.9012], [0.9083]], [[0.2734], [0.9815], [0.8466], [0.6454]]]]])
in0Ave74461 = tf.constant([[[[[0.4021, 0.5784], [0.4346, 0.5171]], [[0.117, 0.0346], [0.8168, 0.2411]]], [[[0.7475, 0.0623], [0.1023, 0.4813]], [[0.7112, 0.5478], [0.2947, 0.4245]]]]])
in1Ave74461 = tf.constant([[[[[0.7312, 0.5367], [0.487, 0.6145]], [[0.6696, 0.5611], [0.2195, 0.2672]]], [[[0.9028, 0.627], [0.8169, 0.6158]], [[0.5909, 0.6894], [0.8127, 0.3693]]]]])
print (np.array2string(model.predict([in0Max64157,in1Max64157,in0Dot92480,in1Dot92480,in0Con434,in0Ave74461,in1Ave74461],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul82994.png')

LMax64157 = maximum_layer([[[[[0.4568]], [[0.0718]]]], [[[[0.4892]], [[0.7086]]]]], Max64157), 
LRes47064 = reshape_layer(Max64157, [2, 1, 1, 1], Res47064), 
LZer78150 = zero_padding3D_layer(Res47064, 2, 0, 3, 0, 2, 0, Zer78150), 
LDot92480 = dot_layer([[[0.7723, 0.1826], [0.7467, 0.8593], [0.2254, 0.515]]], [[[0.4585, 0.3576], [0.6046, 0.0556], [0.273, 0.7732]]], 1, 1, Dot92480), 
LRes54686 = reshape_layer(Dot92480, [2, 2, 1], Res54686), 
LRes76194 = reshape_layer(Res54686, [2, 2, 1, 1], Res76194), 
LZer91184 = zero_padding3D_layer(Res76194, 1, 1, 1, 1, 1, 1, Zer91184), 
LSub52852 = subtract_layer(Zer78150,Zer91184, Sub52852), 
LZer50189 = zero_padding3D_layer(Sub52852, 0, 0, 0, 0, 1, 0, Zer50189), 
LCon434 = concatenate_layer([Zer50189,[[[[[0.3288], [0.4142], [0.6197], [0.6049]], [[0.4511], [0.9814], [0.7197], [0.764]], [[0.8598], [0.7641], [0.7063], [0.2033]], [[0.6254], [0.5286], [0.3733], [0.4817]]], [[[0.8146], [0.3791], [0.2223], [0.3446]], [[0.3187], [0.7502], [0.1451], [0.806]], [[0.8465], [0.6446], [0.3388], [0.2301]], [[0.8159], [0.4252], [0.1192], [0.8458]]], [[[0.0296], [0.0745], [0.6532], [0.0566]], [[0.8299], [0.3317], [0.1446], [0.2396]], [[0.8949], [0.5365], [0.6759], [0.4675]], [[0.958], [0.3203], [0.7333], [0.7316]]], [[[0.5142], [0.5133], [0.4257], [0.7977]], [[0.0075], [0.7617], [0.5439], [0.7832]], [[0.0882], [0.39], [0.9012], [0.9083]], [[0.2734], [0.9815], [0.8466], [0.6454]]]]]], 4, Con434), 
LAve74461 = average_layer([[[[[[0.4021, 0.5784], [0.4346, 0.5171]], [[0.117, 0.0346], [0.8168, 0.2411]]], [[[0.7475, 0.0623], [0.1023, 0.4813]], [[0.7112, 0.5478], [0.2947, 0.4245]]]]], [[[[[0.7312, 0.5367], [0.487, 0.6145]], [[0.6696, 0.5611], [0.2195, 0.2672]]], [[[0.9028, 0.627], [0.8169, 0.6158]], [[0.5909, 0.6894], [0.8127, 0.3693]]]]]], Ave74461), 
LZer47472 = zero_padding3D_layer(Ave74461, 1, 1, 1, 1, 1, 1, Zer47472), 
LMul82994 = multiply_layer([Con434,Zer47472], Mul82994), 
exec_layers([LMax64157,LRes47064,LZer78150,LDot92480,LRes54686,LRes76194,LZer91184,LSub52852,LZer50189,LCon434,LAve74461,LZer47472,LMul82994],["Max64157","Res47064","Zer78150","Dot92480","Res54686","Res76194","Zer91184","Sub52852","Zer50189","Con434","Ave74461","Zer47472","Mul82994"],Mul82994,"Mul82994")

Actual (Unparsed): [[[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.4182740], [-0.3995544, 0.0820976], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.1919941], [-0.2549144, 0.0861060], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.1143204], [-0.3418734, 0.0793203], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.3318789], [-0.2830918, 0.2682647], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]]]]

Expected (Unparsed): [[[[[0,0.0],[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0]]],[[[0,0.0],[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0.0,0.41827401],[-0.39955441305600004,0.08209758000000002],[0,0.0]],[[0,0.0],[0.0,0.19199411],[-0.254914400582,0.08610601999999999],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0]]],[[[0,0.0],[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0.0,0.114320405],[-0.34187340484800005,0.07932033],[0,0.0]],[[0,0.0],[0.0,0.33187890000000003],[-0.28309177150799997,0.26826471],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0.0,0.0]]],[[[0,0.0],[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0.0,0.0]]]]]

Actual:   [[[[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0.4183], [-0.3995, 0.0821], [0, 0]], [[0, 0], [0, 0.192], [-0.2549, 0.0862], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0.1144], [-0.3418, 0.0794], [0, 0]], [[0, 0], [0, 0.3319], [-0.283, 0.2683], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]]]]

Expected: [[[[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0.4183], [-0.3995, 0.0821], [0, 0]], [[0, 0], [0, 0.192], [-0.2549, 0.0862], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0.1144], [-0.3418, 0.0794], [0, 0]], [[0, 0], [0, 0.3319], [-0.283, 0.2683], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]]]]