import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max10386 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in1Max10386 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in0Ave96893 = tf.keras.layers.Input(shape=([1, 1]))
in1Ave96893 = tf.keras.layers.Input(shape=([1, 1]))
in0Con24806 = tf.keras.layers.Input(shape=([2, 1]))
in0Con79247 = tf.keras.layers.Input(shape=([3, 4, 2]))
in0Den68307 = tf.keras.layers.Input(shape=([3, 4, 4]))

Max10386 = keras.layers.Maximum(name = 'Max10386', )([in0Max10386,in1Max10386])
Thr25130 = keras.layers.ThresholdedReLU(theta=1.3827351530895373, name = 'Thr25130', )(Max10386)
Res75628 = keras.layers.Reshape((2, 1, 2), name = 'Res75628', )(Thr25130)
Res75668 = keras.layers.Reshape((2, 2), name = 'Res75668', )(Res75628)
Ave96893 = keras.layers.Average(name = 'Ave96893', )([in0Ave96893,in1Ave96893])
Zer4663 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer4663', )(Ave96893)
Con24806 = keras.layers.Concatenate(axis=2, name = 'Con24806', )([Zer4663,in0Con24806])
Min99897 = keras.layers.Minimum(name = 'Min99897', )([Res75668,Con24806])
Res5079 = keras.layers.Reshape((2, 2, 1), name = 'Res5079', )(Min99897)
Zer17993 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer17993', )(Res5079)
Con79247 = keras.layers.Concatenate(axis=3, name = 'Con79247', )([Zer17993,in0Con79247])
Den68307 = keras.layers.Dense(3,name = 'Den68307', )(in0Den68307)
Max41540 = keras.layers.Maximum(name = 'Max41540', )([Con79247,Den68307])
model = tf.keras.models.Model(inputs=[in0Max10386,in1Max10386,in0Ave96893,in1Ave96893,in0Con24806,in0Con79247,in0Den68307], outputs=Max41540)
w = model.get_layer('Den68307').get_weights() 
w[0] = np.array([[0.9323, 0.0984, 0.4998], [0.4759, 0.9562, 0.612], [0.1023, 0.5154, 0.3573], [0.1584, 0.9047, 0.0059]])
w[1] = np.array([0.6016, 0.6789, 0.8782])
model.get_layer('Den68307').set_weights(w) 
in0Max10386 = tf.constant([[[[[0.0728, 0.1665]]], [[[0.9489, 0.0715]]]]])
in1Max10386 = tf.constant([[[[[0.5918, 0.4846]]], [[[0.6517, 0.3274]]]]])
in0Ave96893 = tf.constant([[[0.4763]]])
in1Ave96893 = tf.constant([[[0.9155]]])
in0Con24806 = tf.constant([[[0.3652], [0.4899]]])
in0Con79247 = tf.constant([[[[0.2696, 0.7485], [0.9182, 0.3266], [0.107, 0.775], [0.1132, 0.4993]], [[0.4686, 0.5607], [0.0968, 0.1209], [0.1994, 0.3412], [0.7773, 0.2091]], [[0.1205, 0.2613], [0.8537, 0.2574], [0.6976, 0.4904], [0.7334, 0.9156]]]])
in0Den68307 = tf.constant([[[[0.1243, 0.3564, 0.4687, 0.2482], [0.5586, 0.8701, 0.414, 0.6536], [0.3549, 0.1374, 0.5264, 0.6837], [0.2635, 0.9997, 0.4464, 0.4786]], [[0.7363, 0.7407, 0.0638, 0.6683], [0.5641, 0.0539, 0.2558, 0.5179], [0.6266, 0.1232, 0.2735, 0.5775], [0.2461, 0.741, 0.4994, 0.4726]], [[0.2008, 0.473, 0.6946, 0.4978], [0.9288, 0.1013, 0.6547, 0.3615], [0.8336, 0.9738, 0.403, 0.7711], [0.8876, 0.4232, 0.662, 0.5434]]]])
print (np.array2string(model.predict([in0Max10386,in1Max10386,in0Ave96893,in1Ave96893,in0Con24806,in0Con79247,in0Den68307],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max41540.png')

LMax10386 = maximum_layer([[[[[[0.0728, 0.1665]]], [[[0.9489, 0.0715]]]]], [[[[[0.5918, 0.4846]]], [[[0.6517, 0.3274]]]]]], Max10386), 
LThr25130 = thresholded_relu_layer(Max10386, 1.3827351530895373, Thr25130), 
LRes75628 = reshape_layer(Thr25130, [2, 1, 2], Res75628), 
LRes75668 = reshape_layer(Res75628, [2, 2], Res75668), 
LAve96893 = average_layer([[[[0.4763]]], [[[0.9155]]]], Ave96893), 
LZer4663 = zero_padding1D_layer(Ave96893, 1, 0, Zer4663), 
LCon24806 = concatenate_layer([Zer4663,[[[0.3652], [0.4899]]]], 2, Con24806), 
LMin99897 = minimum_layer([Res75668,Con24806], Min99897), 
LRes5079 = reshape_layer(Min99897, [2, 2, 1], Res5079), 
LZer17993 = zero_padding2D_layer(Res5079, 1, 0, 2, 0, Zer17993), 
LCon79247 = concatenate_layer([Zer17993,[[[[0.2696, 0.7485], [0.9182, 0.3266], [0.107, 0.775], [0.1132, 0.4993]], [[0.4686, 0.5607], [0.0968, 0.1209], [0.1994, 0.3412], [0.7773, 0.2091]], [[0.1205, 0.2613], [0.8537, 0.2574], [0.6976, 0.4904], [0.7334, 0.9156]]]]], 3, Con79247), 
LDen68307 = dense_layer([[[[0.1243, 0.3564, 0.4687, 0.2482], [0.5586, 0.8701, 0.414, 0.6536], [0.3549, 0.1374, 0.5264, 0.6837], [0.2635, 0.9997, 0.4464, 0.4786]], [[0.7363, 0.7407, 0.0638, 0.6683], [0.5641, 0.0539, 0.2558, 0.5179], [0.6266, 0.1232, 0.2735, 0.5775], [0.2461, 0.741, 0.4994, 0.4726]], [[0.2008, 0.473, 0.6946, 0.4978], [0.9288, 0.1013, 0.6547, 0.3615], [0.8336, 0.9738, 0.403, 0.7711], [0.8876, 0.4232, 0.662, 0.5434]]]], [[0.9323, 0.0984, 0.4998], [0.4759, 0.9562, 0.612], [0.1023, 0.5154, 0.3573], [0.1584, 0.9047, 0.0059]],[0.6016, 0.6789, 0.8782], Den68307), 
LMax41540 = maximum_layer([Con79247,Den68307], Max41540), 
exec_layers([LMax10386,LThr25130,LRes75628,LRes75668,LAve96893,LZer4663,LCon24806,LMin99897,LRes5079,LZer17993,LCon79247,LDen68307,LMax41540],["Max10386","Thr25130","Res75628","Res75668","Ave96893","Zer4663","Con24806","Min99897","Res5079","Zer17993","Con79247","Den68307","Max41540"],Max41540,"Max41540")

Actual (Unparsed): [[[[0.9743585, 1.4980353, 1.3273728], [1.6823458, 2.3705434, 1.8416679], [1.1600107, 1.7350540, 1.3317844], [1.4444952, 2.3238055, 1.7840362]], [[1.7529371, 2.0971028, 1.7262498], [1.2613652, 1.3863301, 1.2875769], [1.3638651, 1.5217874, 1.3679019], [1.3096294, 2.0966124, 1.6359167]], [[1.1638156, 1.9592978, 1.5191534], [1.6399663, 1.5316384, 1.6404670], [2.0055658, 2.5973942, 2.0393403], [1.7843075, 2.0037125, 1.8205595]]]]

Expected (Unparsed): [[[[0.9743585400000001,1.4980353199999998,1.32737283],[1.6823458100000002,2.37054338,1.84166792],[1.16001073,1.73505399,1.3317843699999998],[1.4444952400000002,2.32380552,1.7840361599999999]],[[1.7529370800000001,2.09710279,1.72624985],[1.26136514,1.3863300699999999,1.2875769300000002],[1.3638651099999999,1.5217874299999998,1.36790188],[1.30962939,2.09661242,1.6359167399999999]],[[1.16381564,1.9592978199999997,1.5191534400000002],[1.6399663199999999,1.5316384099999998,1.640467],[2.00556584,2.5973941700000003,2.03934027],[1.7843075199999998,2.00371246,1.82055954]]]]

Actual:   [[[[0.9744, 1.4981, 1.3274], [1.6824, 2.3706, 1.8417], [1.1601, 1.7351, 1.3318], [1.4445, 2.3239, 1.7841]], [[1.753, 2.0972, 1.7263], [1.2614, 1.3864, 1.2876], [1.3639, 1.5218, 1.368], [1.3097, 2.0967, 1.636]], [[1.1639, 1.9593, 1.5192], [1.64, 1.5317, 1.6405], [2.0056, 2.5974, 2.0394], [1.7844, 2.0038, 1.8206]]]]

Expected: [[[[0.9744, 1.4981, 1.3274], [1.6824, 2.3706, 1.8417], [1.1601, 1.7351, 1.3318], [1.4445, 2.3239, 1.7841]], [[1.753, 2.0972, 1.7263], [1.2614, 1.3864, 1.2876], [1.3639, 1.5218, 1.368], [1.3097, 2.0967, 1.636]], [[1.1639, 1.9593, 1.5192], [1.64, 1.5317, 1.6405], [2.0056, 2.5974, 2.0394], [1.7844, 2.0038, 1.8206]]]]