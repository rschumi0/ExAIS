import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sep89623 = tf.keras.layers.Input(shape=([1, 1]))
in0Con45694 = tf.keras.layers.Input(shape=([2, 4, 1, 3]))
in0Max95901 = tf.keras.layers.Input(shape=([2, 2]))

Sep89623 = keras.layers.SeparableConv1D(2, (1),strides=(1), padding='valid', name = 'Sep89623', )(in0Sep89623)
Res75019 = keras.layers.Reshape((1, 2, 1), name = 'Res75019', )(Sep89623)
Res1361 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res1361', )(Res75019)
Zer60037 = keras.layers.ZeroPadding3D(padding=((1, 0), (2, 0), (0, 0)), name = 'Zer60037', )(Res1361)
Con45694 = keras.layers.Concatenate(axis=4, name = 'Con45694', )([Zer60037,in0Con45694])
Max95901 = keras.layers.MaxPool1D(pool_size=(1), strides=(1), padding='valid', name = 'Max95901', )(in0Max95901)
Res20167 = keras.layers.Reshape((2, 2, 1), name = 'Res20167', )(Max95901)
Res12532 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res12532', )(Res20167)
Con59566 = keras.layers.Conv3DTranspose(4, (1, 1, 1),strides=(1, 2, 1), padding='same', name = 'Con59566', )(Res12532)
Mul97808 = keras.layers.Multiply(name = 'Mul97808', )([Con45694,Con59566])
model = tf.keras.models.Model(inputs=[in0Sep89623,in0Con45694,in0Max95901], outputs=Mul97808)
w = model.get_layer('Sep89623').get_weights() 
w[0] = np.array([[[0.5841]]])
w[1] = np.array([[[0.2138, 0.113]]])
w[2] = np.array([0, 0])
model.get_layer('Sep89623').set_weights(w) 
w = model.get_layer('Con59566').get_weights() 
w[0] = np.array([[[[[0.6973], [0.4544], [0.1397], [0.3282]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con59566').set_weights(w) 
in0Sep89623 = tf.constant([[[0.5911]]])
in0Con45694 = tf.constant([[[[[0.8261, 0.8721, 0.0889]], [[0.6864, 0.6097, 0.6023]], [[0.7394, 0.1061, 0.4545]], [[0.4319, 0.6512, 0.7947]]], [[[0.0733, 0.9048, 0.0876]], [[0.6123, 0.8328, 0.4533]], [[0.824, 0.958, 0.6844]], [[0.0476, 0.2684, 0.2529]]]]])
in0Max95901 = tf.constant([[[1.1264, 1.4344], [1.592, 1.7192]]])
print (np.array2string(model.predict([in0Sep89623,in0Con45694,in0Max95901],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul97808.png')

LSep89623 = separable_conv1D_layer([[[0.5911]]], 1,[[[[0.5841]]],[[[0.2138, 0.113]]]],[0, 0], 1, false, Sep89623), 
LRes75019 = reshape_layer(Sep89623, [1, 2, 1], Res75019), 
LRes1361 = reshape_layer(Res75019, [1, 2, 1, 1], Res1361), 
LZer60037 = zero_padding3D_layer(Res1361, 1, 0, 2, 0, 0, 0, Zer60037), 
LCon45694 = concatenate_layer([Zer60037,[[[[[0.8261, 0.8721, 0.0889]], [[0.6864, 0.6097, 0.6023]], [[0.7394, 0.1061, 0.4545]], [[0.4319, 0.6512, 0.7947]]], [[[0.0733, 0.9048, 0.0876]], [[0.6123, 0.8328, 0.4533]], [[0.824, 0.958, 0.6844]], [[0.0476, 0.2684, 0.2529]]]]]], 4, Con45694), 
LMax95901 = max_pool1D_layer([[[1.1264, 1.4344], [1.592, 1.7192]]], 1, 1, false, Max95901), 
LRes20167 = reshape_layer(Max95901, [2, 2, 1], Res20167), 
LRes12532 = reshape_layer(Res20167, [2, 2, 1, 1], Res12532), 
LCon59566 = conv3D_transpose_layer(Res12532, 1, 1, 1,[[[[[0.6973], [0.4544], [0.1397], [0.3282]]]]],[0, 0, 0, 0], 1, 2, 1, true, Con59566), 
LMul97808 = multiply_layer([Con45694,Con59566], Mul97808), 
exec_layers([LSep89623,LRes75019,LRes1361,LZer60037,LCon45694,LMax95901,LRes20167,LRes12532,LCon59566,LMul97808],["Sep89623","Res75019","Res1361","Zer60037","Con45694","Max95901","Res20167","Res12532","Con59566","Mul97808"],Mul97808,"Mul97808")

Actual (Unparsed): [[[[[0.0000000, 0.4228278, 0.1372320, 0.0328650]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.4819345, 0.0212609, 0.2139650]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0530256, 0.2012297, 0.0457705]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0884916, 0.6437125, 0.2300850, 0.3861669]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000]]]]]

Expected (Unparsed): [[[[[0.0,0.4228278517760001,0.137231981568,0.032864950272]],[[0,0.0,0.0,0.0]],[[0.0,0.481934531584,0.021260920647999997,0.21396500136]],[[0,0.0,0.0,0.0]]],[[[0.0,0.05302557184000001,0.20122969152,0.04577050944]],[[0,0.0,0.0,0.0]],[[0.08849157688947845,0.64371249152,0.23008500591999997,0.386166841536]],[[0.0,0.0,0.0,0.0]]]]]

Actual:   [[[[[0, 0.4229, 0.1373, 0.0329]], [[0, 0, 0, 0]], [[0, 0.482, 0.0213, 0.214]], [[0, 0, 0, 0]]], [[[0, 0.0531, 0.2013, 0.0458]], [[0, 0, 0, 0]], [[0.0885, 0.6438, 0.2301, 0.3862]], [[0, 0, 0, 0]]]]]

Expected: [[[[[0, 0.4229, 0.1373, 0.0329]], [[0, 0, 0, 0]], [[0, 0.482, 0.0213, 0.214]], [[0, 0, 0, 0]]], [[[0, 0.0531, 0.2013, 0.0458]], [[0, 0, 0, 0]], [[0.0885, 0.6438, 0.2301, 0.3862]], [[0, 0, 0, 0]]]]]