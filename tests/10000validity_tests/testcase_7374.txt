import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add13783 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in1Add13783 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in0Con95451 = tf.keras.layers.Input(shape=([3, 3, 3, 1]))
in0Sub68744 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in1Sub68744 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))

Add13783 = keras.layers.Add(name = 'Add13783', )([in0Add13783,in1Add13783])
Zer81116 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (2, 0)), name = 'Zer81116', )(Add13783)
Con95451 = keras.layers.Concatenate(axis=4, name = 'Con95451', )([Zer81116,in0Con95451])
Sub68744 = keras.layers.Subtract(name = 'Sub68744', )([in0Sub68744,in1Sub68744])
Max28093 = keras.layers.Maximum(name = 'Max28093', )([Con95451,Sub68744])
Lay94653 = keras.layers.LayerNormalization(axis=1, epsilon=2.088130863026312, name = 'Lay94653', )(Max28093)
Glo19301 = keras.layers.GlobalAveragePooling3D(name = 'Glo19301', )(Lay94653)
model = tf.keras.models.Model(inputs=[in0Add13783,in1Add13783,in0Con95451,in0Sub68744,in1Sub68744], outputs=Glo19301)
in0Add13783 = tf.constant([[[[[0.5525, 0.8393]]]]])
in1Add13783 = tf.constant([[[[[0.9473, 0.8573]]]]])
in0Con95451 = tf.constant([[[[[0.179], [0.1562], [0.4591]], [[0.7222], [0.9344], [0.9878]], [[0.4212], [0.0124], [0.0892]]], [[[0.7734], [0.1813], [0.0385]], [[0.4414], [0.3024], [0.8311]], [[0.729], [0.5424], [0.8646]]], [[[0.7041], [0.1505], [0.7862]], [[0.4709], [0.8216], [0.249]], [[0.7255], [0.9801], [0.2754]]]]])
in0Sub68744 = tf.constant([[[[[0.0394, 0.83, 0.573], [0.58, 0.3753, 0.0649], [0.2181, 0.8741, 0.7566]], [[0.1067, 0.8758, 0.4945], [0.7512, 0.0734, 0.471], [0.4321, 0.8313, 0.4727]], [[0.8932, 0.0951, 0.6416], [0.3334, 0.0215, 0.2519], [0.2017, 0.5934, 0.9506]]], [[[0.4352, 0.8637, 0.3477], [0.0855, 0.0978, 0.3885], [0.348, 0.6352, 0.0562]], [[0.942, 0.1001, 0.3075], [0.6635, 0.1642, 0.0087], [0.6832, 0.7121, 0.717]], [[0.2838, 0.8317, 0.281], [0.8795, 0.7415, 0.2171], [0.6164, 0.8244, 0.2051]]], [[[0.8433, 0.6627, 0.1862], [0.9489, 0.8837, 0.0429], [0.408, 0.5072, 0.7535]], [[0.1322, 0.1433, 0.2238], [0.6934, 0.3628, 0.6792], [0.1088, 0.4558, 0.0512]], [[0.9464, 0.9337, 0.6118], [0.8511, 0.1878, 0.0019], [0.3282, 0.3992, 0.7667]]]]])
in1Sub68744 = tf.constant([[[[[0.7057, 0.2048, 0.8422], [0.9146, 0.8032, 0.9081], [0.7145, 0.4401, 0.3306]], [[0.8867, 0.0686, 0.553], [0.2039, 0.415, 0.8508], [0.9923, 0.8568, 0.5735]], [[0.2639, 0.5885, 0.7123], [0.5464, 0.2593, 0.2408], [0.8927, 0.7915, 0.3625]]], [[[0.0437, 0.3333, 0.2241], [0.7515, 0.9593, 0.3873], [0.5418, 0.8775, 0.998]], [[0.0805, 0.2153, 0.9504], [0.345, 0.4095, 0.472], [0.2894, 0.249, 0.4638]], [[0.8048, 0.8872, 0.7762], [0.6934, 0.1558, 0.5272], [0.7257, 0.3488, 0.9439]]], [[[0.4499, 0.0981, 0.9717], [0.5304, 0.8741, 0.5192], [0.831, 0.5529, 0.6417]], [[0.9257, 0.3654, 0.7941], [0.8806, 0.6428, 0.0203], [0.9004, 0.8559, 0.7024]], [[0.3485, 0.3132, 0.115], [0.8851, 0.8795, 0.2385], [0.6235, 0.501, 0.0597]]]]])
print (np.array2string(model.predict([in0Add13783,in1Add13783,in0Con95451,in0Sub68744,in1Sub68744],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Glo19301.png')

LAdd13783 = add_layer([[[[[[0.5525, 0.8393]]]]], [[[[[0.9473, 0.8573]]]]]], Add13783), 
LZer81116 = zero_padding3D_layer(Add13783, 2, 0, 2, 0, 2, 0, Zer81116), 
LCon95451 = concatenate_layer([Zer81116,[[[[[0.179], [0.1562], [0.4591]], [[0.7222], [0.9344], [0.9878]], [[0.4212], [0.0124], [0.0892]]], [[[0.7734], [0.1813], [0.0385]], [[0.4414], [0.3024], [0.8311]], [[0.729], [0.5424], [0.8646]]], [[[0.7041], [0.1505], [0.7862]], [[0.4709], [0.8216], [0.249]], [[0.7255], [0.9801], [0.2754]]]]]], 4, Con95451), 
LSub68744 = subtract_layer([[[[[0.0394, 0.83, 0.573], [0.58, 0.3753, 0.0649], [0.2181, 0.8741, 0.7566]], [[0.1067, 0.8758, 0.4945], [0.7512, 0.0734, 0.471], [0.4321, 0.8313, 0.4727]], [[0.8932, 0.0951, 0.6416], [0.3334, 0.0215, 0.2519], [0.2017, 0.5934, 0.9506]]], [[[0.4352, 0.8637, 0.3477], [0.0855, 0.0978, 0.3885], [0.348, 0.6352, 0.0562]], [[0.942, 0.1001, 0.3075], [0.6635, 0.1642, 0.0087], [0.6832, 0.7121, 0.717]], [[0.2838, 0.8317, 0.281], [0.8795, 0.7415, 0.2171], [0.6164, 0.8244, 0.2051]]], [[[0.8433, 0.6627, 0.1862], [0.9489, 0.8837, 0.0429], [0.408, 0.5072, 0.7535]], [[0.1322, 0.1433, 0.2238], [0.6934, 0.3628, 0.6792], [0.1088, 0.4558, 0.0512]], [[0.9464, 0.9337, 0.6118], [0.8511, 0.1878, 0.0019], [0.3282, 0.3992, 0.7667]]]]], [[[[[0.7057, 0.2048, 0.8422], [0.9146, 0.8032, 0.9081], [0.7145, 0.4401, 0.3306]], [[0.8867, 0.0686, 0.553], [0.2039, 0.415, 0.8508], [0.9923, 0.8568, 0.5735]], [[0.2639, 0.5885, 0.7123], [0.5464, 0.2593, 0.2408], [0.8927, 0.7915, 0.3625]]], [[[0.0437, 0.3333, 0.2241], [0.7515, 0.9593, 0.3873], [0.5418, 0.8775, 0.998]], [[0.0805, 0.2153, 0.9504], [0.345, 0.4095, 0.472], [0.2894, 0.249, 0.4638]], [[0.8048, 0.8872, 0.7762], [0.6934, 0.1558, 0.5272], [0.7257, 0.3488, 0.9439]]], [[[0.4499, 0.0981, 0.9717], [0.5304, 0.8741, 0.5192], [0.831, 0.5529, 0.6417]], [[0.9257, 0.3654, 0.7941], [0.8806, 0.6428, 0.0203], [0.9004, 0.8559, 0.7024]], [[0.3485, 0.3132, 0.115], [0.8851, 0.8795, 0.2385], [0.6235, 0.501, 0.0597]]]]], Sub68744), 
LMax28093 = maximum_layer([Con95451,Sub68744], Max28093), 
LLay94653 = layer_normalization_layer(Max28093, 1, 2.088130863026312, Lay94653), 
LGlo19301 = global_average_pooling3D_layer(Lay94653, Glo19301), 
exec_layers([LAdd13783,LZer81116,LCon95451,LSub68744,LMax28093,LLay94653,LGlo19301],["Add13783","Zer81116","Con95451","Sub68744","Max28093","Lay94653","Glo19301"],Glo19301,"Glo19301")

Actual (Unparsed): [[-0.0000000, -0.0000000, 0.0000000]]

Expected (Unparsed): [[0.0,0.0,1.3749289772556915e-17]]

Actual:   [[-0, -0, 0]]

Expected: [[0, 0, 0]]