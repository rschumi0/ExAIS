import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add97637 = tf.keras.layers.Input(shape=([2, 2]))
in1Add97637 = tf.keras.layers.Input(shape=([2, 2]))
in0Con58278 = tf.keras.layers.Input(shape=([2, 3]))
in0Sep17364 = tf.keras.layers.Input(shape=([1, 2]))
in0Con5956 = tf.keras.layers.Input(shape=([2, 4, 11]))
in0Con37590 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))

Add97637 = keras.layers.Add(name = 'Add97637', )([in0Add97637,in1Add97637])
Glo22121 = keras.layers.GlobalMaxPool1D(name = 'Glo22121', )(Add97637)
Res77140 = keras.layers.Reshape((2, 1), name = 'Res77140', )(Glo22121)
Con58278 = keras.layers.Concatenate(axis=2, name = 'Con58278', )([Res77140,in0Con58278])
Sep17364 = keras.layers.SeparableConv1D(4, (1),strides=(1), padding='same', name = 'Sep17364', )(in0Sep17364)
Zer41227 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer41227', )(Sep17364)
Mul63605 = keras.layers.Multiply(name = 'Mul63605', )([Con58278,Zer41227])
Res53797 = keras.layers.Reshape((2, 4, 1), name = 'Res53797', )(Mul63605)
Con5956 = keras.layers.Concatenate(axis=3, name = 'Con5956', )([Res53797,in0Con5956])
Con37590 = keras.layers.Conv3DTranspose(4, (1, 1, 2),strides=(1, 1, 1), padding='valid', name = 'Con37590', )(in0Con37590)
Res26207 = keras.layers.Reshape((1, 2, 12), name = 'Res26207', )(Con37590)
Max56897 = keras.layers.MaxPool2D(pool_size=(1, 1), name = 'Max56897', )(Res26207)
Zer41885 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer41885', )(Max56897)
Mul34073 = keras.layers.Multiply(name = 'Mul34073', )([Con5956,Zer41885])
model = tf.keras.models.Model(inputs=[in0Add97637,in1Add97637,in0Con58278,in0Sep17364,in0Con5956,in0Con37590], outputs=Mul34073)
w = model.get_layer('Sep17364').get_weights() 
w[0] = np.array([[[0.3471], [0.1786]]])
w[1] = np.array([[[0.3747, 0.4679, 0.7962, 0.3824], [0.8945, 0.9877, 0.0702, 0.5698]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep17364').set_weights(w) 
w = model.get_layer('Con37590').get_weights() 
w[0] = np.array([[[[[0.348, 0.6249], [0.3168, 0.7233], [0.8952, 0.5721], [0.0522, 0.8411]], [[0.9631, 0.5609], [0.427, 0.7113], [0.2057, 0.9009], [0.8788, 0.1689]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con37590').set_weights(w) 
in0Add97637 = tf.constant([[[0.6284, 0.8297], [0.5413, 0.9392]]])
in1Add97637 = tf.constant([[[0.0796, 0.0272], [0.4706, 0.871]]])
in0Con58278 = tf.constant([[[0.8949, 0.5097, 0.6743], [0.2527, 0.5351, 0.97]]])
in0Sep17364 = tf.constant([[[0.09, 0.6213]]])
in0Con5956 = tf.constant([[[[0.4481, 0.7937, 0.033, 0.9897, 0.8621, 0.6927, 0.974, 0.9609, 0.4491, 0.2588, 0.8536], [0.3271, 0.3937, 0.5111, 0.0916, 0.8599, 0.6026, 0.8211, 0.979, 0.6152, 0.6057, 0.596], [0.7827, 0.1512, 0.6456, 0.2227, 0.6862, 0.9297, 0.4661, 0.3248, 0.8836, 0.1556, 0.7437], [0.9261, 0.3473, 0.241, 0.3304, 0.6827, 0.2786, 0.544, 0.4745, 0.9509, 0.0108, 0.0215]], [[0.9674, 0.0904, 0.1886, 0.9636, 0.7327, 0.0678, 0.3739, 0.0314, 0.711, 0.1217, 0.836], [0.4057, 0.0282, 0.9784, 0.1817, 0.9745, 0.3355, 0.8654, 0.6477, 0.1343, 0.9011, 0.3604], [0.3358, 0.9643, 0.5032, 0.9351, 0.4048, 0.2388, 0.4247, 0.9053, 0.2501, 0.9936, 0.8798], [0.381, 0.0002, 0.1295, 0.0213, 0.7298, 0.2378, 0.8471, 0.2669, 0.007, 0.7137, 0.541]]]])
in0Con37590 = tf.constant([[[[[0.8654, 0.9398], [0.7645, 0.824]], [[0.2129, 0.9356], [0.7138, 0.8573]]]]])
print (np.array2string(model.predict([in0Add97637,in1Add97637,in0Con58278,in0Sep17364,in0Con5956,in0Con37590],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul34073.png')

LAdd97637 = add_layer([[[[0.6284, 0.8297], [0.5413, 0.9392]]], [[[0.0796, 0.0272], [0.4706, 0.871]]]], Add97637), 
LGlo22121 = global_max_pool1D_layer(Add97637, Glo22121), 
LRes77140 = reshape_layer(Glo22121, [2, 1], Res77140), 
LCon58278 = concatenate_layer([Res77140,[[[0.8949, 0.5097, 0.6743], [0.2527, 0.5351, 0.97]]]], 2, Con58278), 
LSep17364 = separable_conv1D_layer([[[0.09, 0.6213]]], 1,[[[[0.3471], [0.1786]]],[[[0.3747, 0.4679, 0.7962, 0.3824], [0.8945, 0.9877, 0.0702, 0.5698]]]],[0, 0, 0, 0], 1, true, Sep17364), 
LZer41227 = zero_padding1D_layer(Sep17364, 1, 0, Zer41227), 
LMul63605 = multiply_layer([Con58278,Zer41227], Mul63605), 
LRes53797 = reshape_layer(Mul63605, [2, 4, 1], Res53797), 
LCon5956 = concatenate_layer([Res53797,[[[[0.4481, 0.7937, 0.033, 0.9897, 0.8621, 0.6927, 0.974, 0.9609, 0.4491, 0.2588, 0.8536], [0.3271, 0.3937, 0.5111, 0.0916, 0.8599, 0.6026, 0.8211, 0.979, 0.6152, 0.6057, 0.596], [0.7827, 0.1512, 0.6456, 0.2227, 0.6862, 0.9297, 0.4661, 0.3248, 0.8836, 0.1556, 0.7437], [0.9261, 0.3473, 0.241, 0.3304, 0.6827, 0.2786, 0.544, 0.4745, 0.9509, 0.0108, 0.0215]], [[0.9674, 0.0904, 0.1886, 0.9636, 0.7327, 0.0678, 0.3739, 0.0314, 0.711, 0.1217, 0.836], [0.4057, 0.0282, 0.9784, 0.1817, 0.9745, 0.3355, 0.8654, 0.6477, 0.1343, 0.9011, 0.3604], [0.3358, 0.9643, 0.5032, 0.9351, 0.4048, 0.2388, 0.4247, 0.9053, 0.2501, 0.9936, 0.8798], [0.381, 0.0002, 0.1295, 0.0213, 0.7298, 0.2378, 0.8471, 0.2669, 0.007, 0.7137, 0.541]]]]], 3, Con5956), 
LCon37590 = conv3D_transpose_layer([[[[[0.8654, 0.9398], [0.7645, 0.824]], [[0.2129, 0.9356], [0.7138, 0.8573]]]]], 1, 1, 2,[[[[[0.348, 0.6249], [0.3168, 0.7233], [0.8952, 0.5721], [0.0522, 0.8411]], [[0.9631, 0.5609], [0.427, 0.7113], [0.2057, 0.9009], [0.8788, 0.1689]]]]],[0, 0, 0, 0], 1, 1, 1, false, Con37590), 
LRes26207 = reshape_layer(Con37590, [1, 2, 12], Res26207), 
LMax56897 = max_pool2D_layer(Res26207, 1, 1, Max56897), 
LZer41885 = zero_padding2D_layer(Max56897, 1, 0, 2, 0, Zer41885), 
LMul34073 = multiply_layer([Con5956,Zer41885], Mul34073), 
exec_layers([LAdd97637,LGlo22121,LRes77140,LCon58278,LSep17364,LZer41227,LMul63605,LRes53797,LCon5956,LCon37590,LRes26207,LMax56897,LZer41885,LMul34073],["Add97637","Glo22121","Res77140","Con58278","Sep17364","Zer41227","Mul63605","Res53797","Con5956","Con37590","Res26207","Max56897","Zer41885","Mul34073"],Mul34073,"Mul34073")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0155277, 0.3203250, 1.2655142, 0.4204939, 2.0025767, 0.7594851, 0.5206961, 0.7016974, 1.0849763, 0.2282294, 0.8938418, 0.7135321], [0.0480344, 0.2835273, 0.0001452, 0.1033470, 0.0322472, 1.1695902, 0.4794359, 0.9347365, 0.3118247, 0.0064021, 0.6560118, 0.4176982]]]]

Expected (Unparsed): [[[[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.015527741521331417,0.32032501294800003,1.265514205938,0.4204938769119999,2.0025766460159997,0.759485088032,0.5206960927200001,0.701697426288,1.0849762942149999,0.22822943026999998,0.8938418148,0.71353205276],[0.04803440658237687,0.2835273222,0.000145168968,0.10334702692999999,0.03224716056,1.169590258798,0.479435870948,0.934736518725,0.311824701415,0.00640213063,0.656011793151,0.4176982068100001]]]]

Actual:   [[[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.0156, 0.3204, 1.2656, 0.4205, 2.0026, 0.7595, 0.5207, 0.7017, 1.085, 0.2283, 0.8939, 0.7136], [0.0481, 0.2836, 0.0002, 0.1034, 0.0323, 1.1696, 0.4795, 0.9348, 0.3119, 0.0065, 0.6561, 0.4177]]]]

Expected: [[[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0.0156, 0.3204, 1.2656, 0.4205, 2.0026, 0.7595, 0.5207, 0.7017, 1.085, 0.2283, 0.8939, 0.7136], [0.0481, 0.2836, 0.0002, 0.1034, 0.0323, 1.1696, 0.4795, 0.9348, 0.3119, 0.0065, 0.6561, 0.4177]]]]