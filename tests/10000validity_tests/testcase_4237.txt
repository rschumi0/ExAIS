import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer97377 = tf.keras.layers.Input(shape=([4, 1, 2, 1]))
in0Mul64635 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in1Mul64635 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in0Con2698 = tf.keras.layers.Input(shape=([71]))

Zer97377 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer97377', )(in0Zer97377)
Res56758 = keras.layers.Reshape((6, 3, 4), name = 'Res56758', )(Zer97377)
Res7388 = keras.layers.Reshape((6, 12), name = 'Res7388', )(Res56758)
Fla85373 = keras.layers.Flatten(name = 'Fla85373', )(Res7388)
Mul64635 = keras.layers.Multiply(name = 'Mul64635', )([in0Mul64635,in1Mul64635])
Res92613 = keras.layers.Reshape((2, 1, 2), name = 'Res92613', )(Mul64635)
Res27353 = keras.layers.Reshape((2, 2), name = 'Res27353', )(Res92613)
Cro7875 = keras.layers.Cropping1D(cropping=((1, 0)), name = 'Cro7875', )(Res27353)
Res86633 = keras.layers.Reshape((1, 2, 1), name = 'Res86633', )(Cro7875)
Cro55915 = keras.layers.Cropping2D(cropping=((0, 0), (1, 0)), name = 'Cro55915', )(Res86633)
Res77370 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res77370', )(Cro55915)
Glo93137 = keras.layers.GlobalMaxPool3D(name = 'Glo93137', )(Res77370)
Con2698 = keras.layers.Concatenate(axis=1, name = 'Con2698', )([Glo93137,in0Con2698])
Ave56749 = keras.layers.Average(name = 'Ave56749', )([Fla85373,Con2698])
model = tf.keras.models.Model(inputs=[in0Zer97377,in0Mul64635,in1Mul64635,in0Con2698], outputs=Ave56749)
in0Zer97377 = tf.constant([[[[[1.8811], [1.689]]], [[[1.9938], [1.9836]]], [[[1.7233], [1.2226]]], [[[1.4524], [1.7818]]]]])
in0Mul64635 = tf.constant([[[[[0.2607, 0.9989]]], [[[0.0297, 0.3606]]]]])
in1Mul64635 = tf.constant([[[[[0.6523, 0.3764]]], [[[0.7613, 0.6743]]]]])
in0Con2698 = tf.constant([[0.667, 0.3668, 0.4409, 0.4788, 0.496, 0.5788, 0.5875, 0.1518, 0.0014, 0.9915, 0.6948, 0.3583, 0.718, 0.0686, 0.7708, 0.3005, 0.757, 0.3478, 0.0275, 0.8729, 0.3586, 0.4714, 0.5852, 0.5281, 0.6996, 0.5224, 0.4029, 0.6179, 0.8343, 0.6835, 0.0636, 0.8687, 0.9632, 0.6513, 0.1166, 0.4541, 0.315, 0.6846, 0.0438, 0.4659, 0.8068, 0.6417, 0.5559, 0.4526, 0.3015, 0.8724, 0.849, 0.0939, 0.7228, 0.3694, 0.6543, 0.0094, 0.5066, 0.1543, 0.4007, 0.1639, 0.8671, 0.4784, 0.5766, 0.3221, 0.1416, 0.0497, 0.4228, 0.5316, 0.0372, 0.163, 0.4207, 0.6695, 0.9523, 0.3087, 0.6483]])
print (np.array2string(model.predict([in0Zer97377,in0Mul64635,in1Mul64635,in0Con2698],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave56749.png')

LZer97377 = zero_padding3D_layer([[[[[1.8811], [1.689]]], [[[1.9938], [1.9836]]], [[[1.7233], [1.2226]]], [[[1.4524], [1.7818]]]]], 1, 1, 1, 1, 1, 1, Zer97377), 
LRes56758 = reshape_layer(Zer97377, [6, 3, 4], Res56758), 
LRes7388 = reshape_layer(Res56758, [6, 12], Res7388), 
LFla85373 = flatten_layer(Res7388, Fla85373), 
LMul64635 = multiply_layer([[[[[[0.2607, 0.9989]]], [[[0.0297, 0.3606]]]]], [[[[[0.6523, 0.3764]]], [[[0.7613, 0.6743]]]]]], Mul64635), 
LRes92613 = reshape_layer(Mul64635, [2, 1, 2], Res92613), 
LRes27353 = reshape_layer(Res92613, [2, 2], Res27353), 
LCro7875 = cropping1D_layer(Res27353, 1, 0, Cro7875), 
LRes86633 = reshape_layer(Cro7875, [1, 2, 1], Res86633), 
LCro55915 = cropping2D_layer(Res86633, 0, 0, 1, 0, Cro55915), 
LRes77370 = reshape_layer(Cro55915, [1, 1, 1, 1], Res77370), 
LGlo93137 = global_max_pool3D_layer(Res77370, Glo93137), 
LCon2698 = concatenate_layer([Glo93137,[[0.667, 0.3668, 0.4409, 0.4788, 0.496, 0.5788, 0.5875, 0.1518, 0.0014, 0.9915, 0.6948, 0.3583, 0.718, 0.0686, 0.7708, 0.3005, 0.757, 0.3478, 0.0275, 0.8729, 0.3586, 0.4714, 0.5852, 0.5281, 0.6996, 0.5224, 0.4029, 0.6179, 0.8343, 0.6835, 0.0636, 0.8687, 0.9632, 0.6513, 0.1166, 0.4541, 0.315, 0.6846, 0.0438, 0.4659, 0.8068, 0.6417, 0.5559, 0.4526, 0.3015, 0.8724, 0.849, 0.0939, 0.7228, 0.3694, 0.6543, 0.0094, 0.5066, 0.1543, 0.4007, 0.1639, 0.8671, 0.4784, 0.5766, 0.3221, 0.1416, 0.0497, 0.4228, 0.5316, 0.0372, 0.163, 0.4207, 0.6695, 0.9523, 0.3087, 0.6483]]], 1, Con2698), 
LAve56749 = average_layer([Fla85373,Con2698], Ave56749), 
exec_layers([LZer97377,LRes56758,LRes7388,LFla85373,LMul64635,LRes92613,LRes27353,LCro7875,LRes86633,LCro55915,LRes77370,LGlo93137,LCon2698,LAve56749],["Zer97377","Res56758","Res7388","Fla85373","Mul64635","Res92613","Res27353","Cro7875","Res86633","Cro55915","Res77370","Glo93137","Con2698","Ave56749"],Ave56749,"Ave56749")

Actual (Unparsed): [[0.1215763, 0.3335000, 0.1834000, 0.2204500, 0.2394000, 0.2480000, 0.2894000, 0.2937500, 0.0759000, 0.0007000, 0.4957500, 0.3474000, 0.1791500, 0.3590000, 0.0343000, 0.3854000, 0.1502500, 1.3190500, 1.0184000, 0.0137500, 0.4364500, 0.1793000, 0.2357000, 0.2926000, 0.2640500, 0.3498000, 0.2612000, 0.2014500, 0.3089500, 1.4140500, 1.3335500, 0.0318000, 0.4343500, 0.4816000, 0.3256500, 0.0583000, 0.2270500, 0.1575000, 0.3423000, 0.0219000, 0.2329500, 1.2650500, 0.9321500, 0.2779500, 0.2263000, 0.1507500, 0.4362000, 0.4245000, 0.0469500, 0.3614000, 0.1847000, 0.3271500, 0.0047000, 0.9795000, 0.9680500, 0.2003500, 0.0819500, 0.4335500, 0.2392000, 0.2883000, 0.1610500, 0.0708000, 0.0248500, 0.2114000, 0.2658000, 0.0186000, 0.0815000, 0.2103500, 0.3347500, 0.4761500, 0.1543500, 0.3241500]]

Expected (Unparsed): [[0.12157628999999999,0.3335,0.1834,0.22045,0.2394,0.248,0.2894,0.29375,0.0759,0.0007,0.49575,0.3474,0.17915,0.359,0.0343,0.3854,0.15025,1.31905,1.0184,0.01375,0.43645,0.1793,0.2357,0.2926,0.26405,0.3498,0.2612,0.20145,0.30895,1.41405,1.33355,0.0318,0.43435,0.4816,0.32565,0.0583,0.22705,0.1575,0.3423,0.0219,0.23295,1.26505,0.93215,0.27795,0.2263,0.15075,0.4362,0.4245,0.04695,0.3614,0.1847,0.32715,0.0047,0.9795,0.9680500000000001,0.20035,0.08195,0.43355,0.2392,0.2883,0.16105,0.0708,0.02485,0.2114,0.2658,0.0186,0.0815,0.21035,0.33475,0.47615,0.15435,0.32415]]

Actual:   [[0.1216, 0.3335, 0.1834, 0.2205, 0.2394, 0.248, 0.2894, 0.2938, 0.0759, 0.0007, 0.4958, 0.3474, 0.1792, 0.359, 0.0343, 0.3854, 0.1503, 1.3191, 1.0184, 0.0138, 0.4365, 0.1793, 0.2357, 0.2926, 0.2641, 0.3498, 0.2612, 0.2015, 0.309, 1.4141, 1.3336, 0.0318, 0.4344, 0.4816, 0.3257, 0.0583, 0.2271, 0.1575, 0.3423, 0.0219, 0.233, 1.2651, 0.9322, 0.278, 0.2263, 0.1508, 0.4362, 0.4245, 0.047, 0.3614, 0.1847, 0.3272, 0.0047, 0.9795, 0.9681, 0.2004, 0.082, 0.4336, 0.2392, 0.2883, 0.1611, 0.0708, 0.0249, 0.2114, 0.2658, 0.0186, 0.0815, 0.2104, 0.3348, 0.4762, 0.1544, 0.3242]]

Expected: [[0.1216, 0.3335, 0.1834, 0.2205, 0.2394, 0.248, 0.2894, 0.2938, 0.0759, 0.0007, 0.4958, 0.3474, 0.1792, 0.359, 0.0343, 0.3854, 0.1503, 1.3191, 1.0184, 0.0138, 0.4365, 0.1793, 0.2357, 0.2926, 0.2641, 0.3498, 0.2612, 0.2015, 0.309, 1.4141, 1.3336, 0.0318, 0.4344, 0.4816, 0.3257, 0.0583, 0.2271, 0.1575, 0.3423, 0.0219, 0.233, 1.2651, 0.9322, 0.278, 0.2263, 0.1508, 0.4362, 0.4245, 0.047, 0.3614, 0.1847, 0.3272, 0.0047, 0.9795, 0.9681, 0.2004, 0.082, 0.4336, 0.2392, 0.2883, 0.1611, 0.0708, 0.0249, 0.2114, 0.2658, 0.0186, 0.0815, 0.2104, 0.3348, 0.4762, 0.1544, 0.3242]]