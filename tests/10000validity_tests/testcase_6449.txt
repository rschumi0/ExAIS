import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max13761 = tf.keras.layers.Input(shape=([2, 2]))
in0Con55056 = tf.keras.layers.Input(shape=([1, 3]))
in0Cro44137 = tf.keras.layers.Input(shape=([1, 4]))

Max13761 = keras.layers.MaxPool1D(pool_size=(1), name = 'Max13761', )(in0Max13761)
Res55079 = keras.layers.Reshape((2, 2, 1), name = 'Res55079', )(Max13761)
Res21994 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res21994', )(Res55079)
Con92078 = keras.layers.Conv3D(3, (1, 1, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con92078', )(Res21994)
Res1932 = keras.layers.Reshape((2, 2, 3), name = 'Res1932', )(Con92078)
Res33348 = keras.layers.Reshape((2, 6), name = 'Res33348', )(Res1932)
Sep47622 = keras.layers.SeparableConv1D(3, (1),strides=(1), padding='valid', name = 'Sep47622', )(Res33348)
Res82874 = keras.layers.Reshape((2, 3, 1), name = 'Res82874', )(Sep47622)
Max36076 = keras.layers.MaxPool2D(pool_size=(2, 2), name = 'Max36076', )(Res82874)
Res60106 = keras.layers.Reshape((1, 1), name = 'Res60106', )(Max36076)
Con55056 = keras.layers.Concatenate(axis=2, name = 'Con55056', )([Res60106,in0Con55056])
Cro44137 = keras.layers.Cropping1D(cropping=((0, 0)), name = 'Cro44137', )(in0Cro44137)
Max46844 = keras.layers.Maximum(name = 'Max46844', )([Con55056,Cro44137])
model = tf.keras.models.Model(inputs=[in0Max13761,in0Con55056,in0Cro44137], outputs=Max46844)
w = model.get_layer('Con92078').get_weights() 
w[0] = np.array([[[[[0.357, 0.5374, 0.3853]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con92078').set_weights(w) 
w = model.get_layer('Sep47622').get_weights() 
w[0] = np.array([[[0.0211], [0.2007], [0.1913], [0.7738], [0.4071], [0.2431]]])
w[1] = np.array([[[0.9048, 0.69, 0.7603], [0.6352, 0.6499, 0.941], [0.0858, 0.145, 0.5223], [0.9038, 0.7387, 0.2333], [0.2233, 0.6635, 0.3554], [0.6308, 0.1158, 0.4634]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep47622').set_weights(w) 
in0Max13761 = tf.constant([[[1.6182, 1.0047], [1.3068, 1.1878]]])
in0Con55056 = tf.constant([[[0.2957, 0.1794, 0.6893]]])
in0Cro44137 = tf.constant([[[1.3436, 1.3208, 1.2876, 1.6994]]])
print (np.array2string(model.predict([in0Max13761,in0Con55056,in0Cro44137],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max46844.png')

LMax13761 = max_pool1D_layer([[[1.6182, 1.0047], [1.3068, 1.1878]]], 1, Max13761), 
LRes55079 = reshape_layer(Max13761, [2, 2, 1], Res55079), 
LRes21994 = reshape_layer(Res55079, [2, 2, 1, 1], Res21994), 
LCon92078 = conv3D_layer(Res21994, 1, 1, 1,[[[[[0.357, 0.5374, 0.3853]]]]],[0, 0, 0], 1, 1, 1, false, 1, 1, 1, Con92078), 
LRes1932 = reshape_layer(Con92078, [2, 2, 3], Res1932), 
LRes33348 = reshape_layer(Res1932, [2, 6], Res33348), 
LSep47622 = separable_conv1D_layer(Res33348, 1,[[[[0.0211], [0.2007], [0.1913], [0.7738], [0.4071], [0.2431]]],[[[0.9048, 0.69, 0.7603], [0.6352, 0.6499, 0.941], [0.0858, 0.145, 0.5223], [0.9038, 0.7387, 0.2333], [0.2233, 0.6635, 0.3554], [0.6308, 0.1158, 0.4634]]]],[0, 0, 0], 1, false, Sep47622), 
LRes82874 = reshape_layer(Sep47622, [2, 3, 1], Res82874), 
LMax36076 = max_pool2D_layer(Res82874, 2, 2, Max36076), 
LRes60106 = reshape_layer(Max36076, [1, 1], Res60106), 
LCon55056 = concatenate_layer([Res60106,[[[0.2957, 0.1794, 0.6893]]]], 2, Con55056), 
LCro44137 = cropping1D_layer([[[1.3436, 1.3208, 1.2876, 1.6994]]], 0, 0, Cro44137), 
LMax46844 = maximum_layer([Con55056,Cro44137], Max46844), 
exec_layers([LMax13761,LRes55079,LRes21994,LCon92078,LRes1932,LRes33348,LSep47622,LRes82874,LMax36076,LRes60106,LCon55056,LCro44137,LMax46844],["Max13761","Res55079","Res21994","Con92078","Res1932","Res33348","Sep47622","Res82874","Max36076","Res60106","Con55056","Cro44137","Max46844"],Max46844,"Max46844")

Actual (Unparsed): [[[1.3436000, 1.3207999, 1.2876000, 1.6993999]]]

Expected (Unparsed): [[[1.3436,1.3208,1.2876,1.6994]]]

Actual:   [[[1.3436, 1.3208, 1.2876, 1.6994]]]

Expected: [[[1.3436, 1.3208, 1.2876, 1.6994]]]