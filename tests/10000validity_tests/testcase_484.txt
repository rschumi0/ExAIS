import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro49347 = tf.keras.layers.Input(shape=([2, 4]))
in0Con23250 = tf.keras.layers.Input(shape=([1, 4, 1, 2]))
in0Fla43339 = tf.keras.layers.Input(shape=([4, 4]))

Cro49347 = keras.layers.Cropping1D(cropping=((1, 0)), name = 'Cro49347', )(in0Cro49347)
Res39132 = keras.layers.Reshape((1, 4, 1), name = 'Res39132', )(Cro49347)
Res69102 = keras.layers.Reshape((1, 4, 1, 1), name = 'Res69102', )(Res39132)
Con23250 = keras.layers.Concatenate(axis=4, name = 'Con23250', )([Res69102,in0Con23250])
Fla43339 = keras.layers.Flatten(name = 'Fla43339', )(in0Fla43339)
Res29260 = keras.layers.Reshape((16, 1), name = 'Res29260', )(Fla43339)
Ave64989 = keras.layers.AveragePooling1D(pool_size=(1), strides=(4), padding='same', name = 'Ave64989', )(Res29260)
Res75489 = keras.layers.Reshape((4, 1, 1), name = 'Res75489', )(Ave64989)
Res96908 = keras.layers.Reshape((4, 1, 1, 1), name = 'Res96908', )(Res75489)
Con87926 = keras.layers.Conv3D(3, (4, 1, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con87926', )(Res96908)
Zer78234 = keras.layers.ZeroPadding3D(padding=((0, 0), (3, 0), (0, 0)), name = 'Zer78234', )(Con87926)
Min89723 = keras.layers.Minimum(name = 'Min89723', )([Con23250,Zer78234])
model = tf.keras.models.Model(inputs=[in0Cro49347,in0Con23250,in0Fla43339], outputs=Min89723)
w = model.get_layer('Con87926').get_weights() 
w[0] = np.array([[[[[0.9145, 0.058, 0.4349]]]], [[[[0.1689, 0.2386, 0.9145]]]], [[[[0.192, 0.9483, 0.6076]]]], [[[[0.5413, 0.1958, 0.3748]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con87926').set_weights(w) 
in0Cro49347 = tf.constant([[[1.3784, 1.6928, 1.7001, 1.8653], [1.6788, 1.0091, 1.7943, 1.6289]]])
in0Con23250 = tf.constant([[[[[0.1872, 0.8749]], [[0.7128, 0.1304]], [[0.6529, 0.5603]], [[0.4375, 0.2585]]]]])
in0Fla43339 = tf.constant([[[1.9081, 1.5286, 1.0258, 1.8841], [1.8967, 1.8844, 1.5823, 1.6367], [1.7793, 1.0479, 1.7317, 1.7231], [1.919, 1.5005, 1.5088, 1.297]]])
print (np.array2string(model.predict([in0Cro49347,in0Con23250,in0Fla43339],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min89723.png')

LCro49347 = cropping1D_layer([[[1.3784, 1.6928, 1.7001, 1.8653], [1.6788, 1.0091, 1.7943, 1.6289]]], 1, 0, Cro49347), 
LRes39132 = reshape_layer(Cro49347, [1, 4, 1], Res39132), 
LRes69102 = reshape_layer(Res39132, [1, 4, 1, 1], Res69102), 
LCon23250 = concatenate_layer([Res69102,[[[[[0.1872, 0.8749]], [[0.7128, 0.1304]], [[0.6529, 0.5603]], [[0.4375, 0.2585]]]]]], 4, Con23250), 
LFla43339 = flatten_layer([[[1.9081, 1.5286, 1.0258, 1.8841], [1.8967, 1.8844, 1.5823, 1.6367], [1.7793, 1.0479, 1.7317, 1.7231], [1.919, 1.5005, 1.5088, 1.297]]], Fla43339), 
LRes29260 = reshape_layer(Fla43339, [16, 1], Res29260), 
LAve64989 = average_pooling1D_layer(Res29260, 1, 4, true, Ave64989), 
LRes75489 = reshape_layer(Ave64989, [4, 1, 1], Res75489), 
LRes96908 = reshape_layer(Res75489, [4, 1, 1, 1], Res96908), 
LCon87926 = conv3D_layer(Res96908, 4, 1, 1,[[[[[0.9145, 0.058, 0.4349]]]], [[[[0.1689, 0.2386, 0.9145]]]], [[[[0.192, 0.9483, 0.6076]]]], [[[[0.5413, 0.1958, 0.3748]]]]],[0, 0, 0], 1, 1, 1, false, 1, 1, 1, Con87926), 
LZer78234 = zero_padding3D_layer(Con87926, 0, 0, 3, 0, 0, 0, Zer78234), 
LMin89723 = minimum_layer([Con23250,Zer78234], Min89723), 
exec_layers([LCro49347,LRes39132,LRes69102,LCon23250,LFla43339,LRes29260,LAve64989,LRes75489,LRes96908,LCon87926,LZer78234,LMin89723],["Cro49347","Res39132","Res69102","Con23250","Fla43339","Res29260","Ave64989","Res75489","Res96908","Con87926","Zer78234","Min89723"],Min89723,"Min89723")

Actual (Unparsed): [[[[[0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000]], [[1.6289001, 0.4375000, 0.2585000]]]]]

Expected (Unparsed): [[[[[0,0,0]],[[0,0,0]],[[0,0,0]],[[1.6289,0.4375,0.2585]]]]]

Actual:   [[[[[0, 0, 0]], [[0, 0, 0]], [[0, 0, 0]], [[1.629, 0.4375, 0.2585]]]]]

Expected: [[[[[0, 0, 0]], [[0, 0, 0]], [[0, 0, 0]], [[1.6289, 0.4375, 0.2585]]]]]