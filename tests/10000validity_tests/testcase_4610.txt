import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave68 = tf.keras.layers.Input(shape=([2, 2]))
in1Ave68 = tf.keras.layers.Input(shape=([2, 2]))

Ave68 = keras.layers.Average(name = 'Ave68', )([in0Ave68,in1Ave68])
Sep79591 = keras.layers.SeparableConv1D(3, (2),strides=(1), padding='same', name = 'Sep79591', )(Ave68)
Res70373 = keras.layers.Reshape((2, 3, 1), name = 'Res70373', )(Sep79591)
Res37828 = keras.layers.Reshape((2, 3, 1, 1), name = 'Res37828', )(Res70373)
Zer14878 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer14878', )(Res37828)
model = tf.keras.models.Model(inputs=[in0Ave68,in1Ave68], outputs=Zer14878)
w = model.get_layer('Sep79591').get_weights() 
w[0] = np.array([[[0.1189], [0.0739]], [[0.5172], [0.7962]]])
w[1] = np.array([[[0.1969, 0.8703, 0.9445], [0.3099, 0.5863, 0.2854]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep79591').set_weights(w) 
in0Ave68 = tf.constant([[[0.5372, 0.8165], [0.9708, 0.8833]]])
in1Ave68 = tf.constant([[[0.3614, 0.6013], [0.5528, 0.5034]]])
print (np.array2string(model.predict([in0Ave68,in1Ave68],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Zer14878.png')

LAve68 = average_layer([[[[0.5372, 0.8165], [0.9708, 0.8833]]], [[[0.3614, 0.6013], [0.5528, 0.5034]]]], Ave68), 
LSep79591 = separable_conv1D_layer(Ave68, 2,[[[[0.1189], [0.0739]], [[0.5172], [0.7962]]],[[[0.1969, 0.8703, 0.9445], [0.3099, 0.5863, 0.2854]]]],[0, 0, 0], 1, true, Sep79591), 
LRes70373 = reshape_layer(Sep79591, [2, 3, 1], Res70373), 
LRes37828 = reshape_layer(Res70373, [2, 3, 1, 1], Res37828), 
LZer14878 = zero_padding3D_layer(Res37828, 1, 1, 1, 1, 1, 1, Zer14878), 
exec_layers([LAve68,LSep79591,LRes70373,LRes37828,LZer14878],["Ave68","Sep79591","Res70373","Res37828","Zer14878"],Zer14878,"Zer14878")

Actual (Unparsed): [[[[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.2754117], [0.0000000]], [[0.0000000], [0.7437728], [0.0000000]], [[0.0000000], [0.5950978], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0337136], [0.0000000]], [[0.0000000], [0.1088712], [0.0000000]], [[0.0000000], [0.1001744], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]]]]

Expected (Unparsed): [[[[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]]],[[[0],[0],[0]],[[0],[0.275411709839],[0]],[[0],[0.7437727986930001],[0]],[[0],[0.595097829977],[0]],[[0],[0],[0]]],[[[0],[0],[0]],[[0],[0.0337136434315],[0]],[[0],[0.10887122146549999],[0]],[[0],[0.100174426341],[0]],[[0],[0],[0]]],[[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]]]]]

Actual:   [[[[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0.2755], [0]], [[0], [0.7438], [0]], [[0], [0.5951], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0.0338], [0]], [[0], [0.1089], [0]], [[0], [0.1002], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]]]]

Expected: [[[[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0.2755], [0]], [[0], [0.7438], [0]], [[0], [0.5951], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0.0338], [0]], [[0], [0.1089], [0]], [[0], [0.1002], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]]]]