import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro28435 = tf.keras.layers.Input(shape=([3, 2]))

Cro28435 = keras.layers.Cropping1D(cropping=((2, 0)), name = 'Cro28435', )(in0Cro28435)
Res63002 = keras.layers.Reshape((1, 2, 1), name = 'Res63002', )(Cro28435)
Res25247 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res25247', )(Res63002)
Con50158 = keras.layers.Conv3D(4, (1, 2, 1),strides=(1, 1, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con50158', )(Res25247)
model = tf.keras.models.Model(inputs=[in0Cro28435], outputs=Con50158)
w = model.get_layer('Con50158').get_weights() 
w[0] = np.array([[[[[0.8942, 0.7915, 0.5213, 0.4823]]], [[[0.1714, 0.9485, 0.9261, 0.3449]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con50158').set_weights(w) 
in0Cro28435 = tf.constant([[[1.3303, 1.2627], [1.2381, 1.5435], [1.3138, 1.7131]]])
print (np.array2string(model.predict([in0Cro28435],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con50158.png')

LCro28435 = cropping1D_layer([[[1.3303, 1.2627], [1.2381, 1.5435], [1.3138, 1.7131]]], 2, 0, Cro28435), 
LRes63002 = reshape_layer(Cro28435, [1, 2, 1], Res63002), 
LRes25247 = reshape_layer(Res63002, [1, 2, 1, 1], Res25247), 
LCon50158 = conv3D_layer(Res25247, 1, 2, 1,[[[[[0.8942, 0.7915, 0.5213, 0.4823]]], [[[0.1714, 0.9485, 0.9261, 0.3449]]]]],[0, 0, 0, 0], 1, 1, 1, true, 1, 1, 1, Con50158), 
exec_layers([LCro28435,LRes63002,LRes25247,LCon50158],["Cro28435","Res63002","Res25247","Con50158"],Con50158,"Con50158")

Actual (Unparsed): [[[[[1.4684253, 2.6647480, 2.2713858, 1.2244939]], [[1.5318540, 1.3559186, 0.8930390, 0.8262281]]]]]

Expected (Unparsed): [[[[[1.4684253,2.66474805,2.27138585,1.22449393]],[[1.5318540200000001,1.35591865,0.89303903,0.8262281300000001]]]]]

Actual:   [[[[[1.4685, 2.6648, 2.2714, 1.2245]], [[1.5319, 1.356, 0.8931, 0.8263]]]]]

Expected: [[[[[1.4685, 2.6648, 2.2714, 1.2245]], [[1.5319, 1.356, 0.8931, 0.8263]]]]]