import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer41227 = tf.keras.layers.Input(shape=([4, 3, 1]))
in0Con83169 = tf.keras.layers.Input(shape=([6, 5, 2]))
in0Con64323 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Glo88233 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con24963 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Ave18430 = tf.keras.layers.Input(shape=([1, 2, 2]))
in1Ave18430 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Con36565 = tf.keras.layers.Input(shape=([2, 4, 1]))

Zer41227 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer41227', )(in0Zer41227)
Con83169 = keras.layers.Concatenate(axis=3, name = 'Con83169', )([Zer41227,in0Con83169])
Con64323 = keras.layers.Conv2DTranspose(3, (1, 1),strides=(1, 2), padding='same', name = 'Con64323', )(in0Con64323)
Glo88233 = keras.layers.GlobalMaxPool2D(name = 'Glo88233', )(in0Glo88233)
Res12801 = keras.layers.Reshape((1, 1), name = 'Res12801', )(Glo88233)
Res33965 = keras.layers.Reshape((1, 1, 1), name = 'Res33965', )(Res12801)
Zer7575 = keras.layers.ZeroPadding2D(padding=((0, 0), (1, 0)), name = 'Zer7575', )(Res33965)
Con24963 = keras.layers.Concatenate(axis=3, name = 'Con24963', )([Zer7575,in0Con24963])
Ave18430 = keras.layers.Average(name = 'Ave18430', )([in0Ave18430,in1Ave18430])
Mul81423 = keras.layers.Multiply(name = 'Mul81423', )([Con24963,Ave18430])
Zer82676 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer82676', )(Mul81423)
Con36565 = keras.layers.Concatenate(axis=3, name = 'Con36565', )([Zer82676,in0Con36565])
Ave36455 = keras.layers.Average(name = 'Ave36455', )([Con64323,Con36565])
Zer29261 = keras.layers.ZeroPadding2D(padding=((4, 0), (1, 0)), name = 'Zer29261', )(Ave36455)
Mul65869 = keras.layers.Multiply(name = 'Mul65869', )([Con83169,Zer29261])
model = tf.keras.models.Model(inputs=[in0Zer41227,in0Con83169,in0Con64323,in0Glo88233,in0Con24963,in0Ave18430,in1Ave18430,in0Con36565], outputs=Mul65869)
w = model.get_layer('Con64323').get_weights() 
w[0] = np.array([[[[0.8282], [0.0455], [0.4325]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con64323').set_weights(w) 
in0Zer41227 = tf.constant([[[[1.3649], [1.0292], [1.1375]], [[1.323], [1.0674], [1.3064]], [[1.7203], [1.2264], [1.0904]], [[1.1362], [1.2924], [1.3324]]]])
in0Con83169 = tf.constant([[[[0.9029, 0.3545], [0.5334, 0.8005], [0.4247, 0.6917], [0.3584, 0.0074], [0.853, 0.9837]], [[0.2174, 0.499], [0.4349, 0.5458], [0.3015, 0.7131], [0.9262, 0.8619], [0.2293, 0.8604]], [[0.0506, 0.0865], [0.5426, 0.3026], [0.6826, 0.855], [0.5469, 0.0057], [0.8487, 0.6023]], [[0.6288, 0.4686], [0.6938, 0.5296], [0.8134, 0.164], [0.0175, 0.9446], [0.8581, 0.324]], [[0.8472, 0.9507], [0.625, 0.8523], [0.7899, 0.3641], [0.8212, 0.2505], [0.5757, 0.2947]], [[0.4495, 0.7109], [0.2943, 0.0464], [0.4768, 0.9443], [0.3113, 0.86], [0.2914, 0.8895]]]])
in0Con64323 = tf.constant([[[[0.3806], [0.8649]], [[0.0164], [0.9835]]]])
in0Glo88233 = tf.constant([[[[1.0359]], [[1.0244]]]])
in0Con24963 = tf.constant([[[[0.6816], [0.1504]]]])
in0Ave18430 = tf.constant([[[[0.0509, 0.9727], [0.5682, 0.4608]]]])
in1Ave18430 = tf.constant([[[[0.9164, 0.7906], [0.6894, 0.302]]]])
in0Con36565 = tf.constant([[[[0.1394], [0.857], [0.3769], [0.8406]], [[0.4659], [0.7184], [0.6286], [0.0936]]]])
print (np.array2string(model.predict([in0Zer41227,in0Con83169,in0Con64323,in0Glo88233,in0Con24963,in0Ave18430,in1Ave18430,in0Con36565],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul65869.png')

LZer41227 = zero_padding2D_layer([[[[1.3649], [1.0292], [1.1375]], [[1.323], [1.0674], [1.3064]], [[1.7203], [1.2264], [1.0904]], [[1.1362], [1.2924], [1.3324]]]], 1, 1, 1, 1, Zer41227), 
LCon83169 = concatenate_layer([Zer41227,[[[[0.9029, 0.3545], [0.5334, 0.8005], [0.4247, 0.6917], [0.3584, 0.0074], [0.853, 0.9837]], [[0.2174, 0.499], [0.4349, 0.5458], [0.3015, 0.7131], [0.9262, 0.8619], [0.2293, 0.8604]], [[0.0506, 0.0865], [0.5426, 0.3026], [0.6826, 0.855], [0.5469, 0.0057], [0.8487, 0.6023]], [[0.6288, 0.4686], [0.6938, 0.5296], [0.8134, 0.164], [0.0175, 0.9446], [0.8581, 0.324]], [[0.8472, 0.9507], [0.625, 0.8523], [0.7899, 0.3641], [0.8212, 0.2505], [0.5757, 0.2947]], [[0.4495, 0.7109], [0.2943, 0.0464], [0.4768, 0.9443], [0.3113, 0.86], [0.2914, 0.8895]]]]], 3, Con83169), 
LCon64323 = conv2D_transpose_layer([[[[0.3806], [0.8649]], [[0.0164], [0.9835]]]], 1, 1,[[[[0.8282], [0.0455], [0.4325]]]],[0, 0, 0], 1, 2, true, Con64323), 
LGlo88233 = global_max_pool2D_layer([[[[1.0359]], [[1.0244]]]], Glo88233), 
LRes12801 = reshape_layer(Glo88233, [1, 1], Res12801), 
LRes33965 = reshape_layer(Res12801, [1, 1, 1], Res33965), 
LZer7575 = zero_padding2D_layer(Res33965, 0, 0, 1, 0, Zer7575), 
LCon24963 = concatenate_layer([Zer7575,[[[[0.6816], [0.1504]]]]], 3, Con24963), 
LAve18430 = average_layer([[[[[0.0509, 0.9727], [0.5682, 0.4608]]]], [[[[0.9164, 0.7906], [0.6894, 0.302]]]]], Ave18430), 
LMul81423 = multiply_layer([Con24963,Ave18430], Mul81423), 
LZer82676 = zero_padding2D_layer(Mul81423, 1, 0, 2, 0, Zer82676), 
LCon36565 = concatenate_layer([Zer82676,[[[[0.1394], [0.857], [0.3769], [0.8406]], [[0.4659], [0.7184], [0.6286], [0.0936]]]]], 3, Con36565), 
LAve36455 = average_layer([Con64323,Con36565], Ave36455), 
LZer29261 = zero_padding2D_layer(Ave36455, 4, 0, 1, 0, Zer29261), 
LMul65869 = multiply_layer([Con83169,Zer29261], Mul65869), 
exec_layers([LZer41227,LCon83169,LCon64323,LGlo88233,LRes12801,LRes33965,LZer7575,LCon24963,LAve18430,LMul81423,LZer82676,LCon36565,LAve36455,LZer29261,LMul65869],["Zer41227","Con83169","Con64323","Glo88233","Res12801","Res33965","Zer7575","Con24963","Ave18430","Mul81423","Zer82676","Con36565","Ave36455","Zer29261","Mul65869"],Mul65869,"Mul65869")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.1790725, 0.0054117, 0.1295536], [0.0000000, 0.0000000, 0.1560169], [0.4772058, 0.0161583, 0.0940589], [0.0000000, 0.0000000, 0.1238624]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0001098, 0.0109734], [0.0000000, 0.0000000, 0.3391926], [0.0000000, 0.1005004, 0.4532044], [0.0000000, 0.0083577, 0.0416286]]]]

Expected (Unparsed): [[[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0.17907245985200002,0.005411656250000001,0.12955364842499997],[0.0,0.0,0.15601684999999998],[0.477205841916,0.01615832127,0.0940588985625],[0,0.0,0.12386241]],[[0,0.0,0.0],[0.0,0.00010980333,0.010973437599999998],[0,0.0,0.33919256000000003],[0.0,0.1005003861785,0.45320441250000004],[0.0,0.008357724991999998,0.0416286]]]]

Actual:   [[[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0.1791, 0.0055, 0.1296], [0, 0, 0.1561], [0.4773, 0.0162, 0.0941], [0, 0, 0.1239]], [[0, 0, 0], [0, 0.0002, 0.011], [0, 0, 0.3392], [0, 0.1006, 0.4533], [0, 0.0084, 0.0417]]]]

Expected: [[[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0.1791, 0.0055, 0.1296], [0, 0, 0.1561], [0.4773, 0.0162, 0.0941], [0, 0, 0.1239]], [[0, 0, 0], [0, 0.0002, 0.011], [0, 0, 0.3392], [0, 0.1006, 0.4533], [0, 0.0084, 0.0417]]]]