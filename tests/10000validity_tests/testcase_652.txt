import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot97626 = tf.keras.layers.Input(shape=([3, 2]))
in1Dot97626 = tf.keras.layers.Input(shape=([3, 2]))
in0Min58061 = tf.keras.layers.Input(shape=([1, 1]))
in1Min58061 = tf.keras.layers.Input(shape=([1, 1]))
in0Con32723 = tf.keras.layers.Input(shape=([2, 1]))
in0Con61585 = tf.keras.layers.Input(shape=([2, 2]))
in0Ave21444 = tf.keras.layers.Input(shape=([1, 2, 2]))

Dot97626 = keras.layers.Dot(axes=(1, 1), name = 'Dot97626', )([in0Dot97626,in1Dot97626])
Min58061 = keras.layers.Minimum(name = 'Min58061', )([in0Min58061,in1Min58061])
Zer92204 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer92204', )(Min58061)
Con32723 = keras.layers.Concatenate(axis=2, name = 'Con32723', )([Zer92204,in0Con32723])
Add66427 = keras.layers.Add(name = 'Add66427', )([Dot97626,Con32723])
Con61585 = keras.layers.Concatenate(axis=2, name = 'Con61585', )([Add66427,in0Con61585])
Ave21444 = keras.layers.AveragePooling2D(pool_size=(1, 1), strides=(1, 1), padding='valid', name = 'Ave21444', )(in0Ave21444)
Thr24689 = keras.layers.ThresholdedReLU(theta=2.954386534341371, name = 'Thr24689', )(Ave21444)
Res55233 = keras.layers.Reshape((1, 4), name = 'Res55233', )(Thr24689)
Zer16950 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer16950', )(Res55233)
Dot87928 = keras.layers.Dot(axes=(1, 1), name = 'Dot87928', )([Con61585,Zer16950])
Zer7936 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer7936', )(Dot87928)
model = tf.keras.models.Model(inputs=[in0Dot97626,in1Dot97626,in0Min58061,in1Min58061,in0Con32723,in0Con61585,in0Ave21444], outputs=Zer7936)
in0Dot97626 = tf.constant([[[0.3313, 0.7722], [0.1685, 0.0968], [0.1223, 0.9156]]])
in1Dot97626 = tf.constant([[[0.0098, 0.9613], [0.1888, 0.499], [0.7863, 0.6076]]])
in0Min58061 = tf.constant([[[0.3545]]])
in1Min58061 = tf.constant([[[0.5268]]])
in0Con32723 = tf.constant([[[0.6553], [0.2484]]])
in0Con61585 = tf.constant([[[0.2261, 0.793], [0.9757, 0.8006]]])
in0Ave21444 = tf.constant([[[[1.3755, 1.7928], [1.54, 1.8978]]]])
print (np.array2string(model.predict([in0Dot97626,in1Dot97626,in0Min58061,in1Min58061,in0Con32723,in0Con61585,in0Ave21444],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Zer7936.png')

LDot97626 = dot_layer([[[0.3313, 0.7722], [0.1685, 0.0968], [0.1223, 0.9156]]], [[[0.0098, 0.9613], [0.1888, 0.499], [0.7863, 0.6076]]], 1, 1, Dot97626), 
LMin58061 = minimum_layer([[[[0.3545]]], [[[0.5268]]]], Min58061), 
LZer92204 = zero_padding1D_layer(Min58061, 1, 0, Zer92204), 
LCon32723 = concatenate_layer([Zer92204,[[[0.6553], [0.2484]]]], 2, Con32723), 
LAdd66427 = add_layer([Dot97626,Con32723], Add66427), 
LCon61585 = concatenate_layer([Add66427,[[[0.2261, 0.793], [0.9757, 0.8006]]]], 2, Con61585), 
LAve21444 = average_pooling2D_layer([[[[1.3755, 1.7928], [1.54, 1.8978]]]], 1, 1, 1, 1, false, Ave21444), 
LThr24689 = thresholded_relu_layer(Ave21444, 2.954386534341371, Thr24689), 
LRes55233 = reshape_layer(Thr24689, [1, 4], Res55233), 
LZer16950 = zero_padding1D_layer(Res55233, 1, 0, Zer16950), 
LDot87928 = dot_layer(Con61585,Zer16950, 1, 1, Dot87928), 
LZer7936 = zero_padding1D_layer(Dot87928, 1, 1, Zer7936), 
exec_layers([LDot97626,LMin58061,LZer92204,LCon32723,LAdd66427,LCon61585,LAve21444,LThr24689,LRes55233,LZer16950,LDot87928,LZer7936],["Dot97626","Min58061","Zer92204","Con32723","Add66427","Con61585","Ave21444","Thr24689","Res55233","Zer16950","Dot87928","Zer7936"],Zer7936,"Zer7936")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0,0,0,0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0,0,0,0]]]

Actual:   [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]

Expected: [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]