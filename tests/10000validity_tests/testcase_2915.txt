import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave85385 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Ave85385 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Mul66930 = tf.keras.layers.Input(shape=([2, 2, 1, 1]))
in1Mul66930 = tf.keras.layers.Input(shape=([2, 2, 1, 1]))
in0Sub34654 = tf.keras.layers.Input(shape=([3, 3]))
in1Sub34654 = tf.keras.layers.Input(shape=([3, 3]))

Ave85385 = keras.layers.Average(name = 'Ave85385', )([in0Ave85385,in1Ave85385])
Res87002 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res87002', )(Ave85385)
Zer48425 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (0, 0)), name = 'Zer48425', )(Res87002)
Mul66930 = keras.layers.Multiply(name = 'Mul66930', )([in0Mul66930,in1Mul66930])
Sub34654 = keras.layers.Subtract(name = 'Sub34654', )([in0Sub34654,in1Sub34654])
Res16080 = keras.layers.Reshape((3, 3, 1), name = 'Res16080', )(Sub34654)
Res4019 = keras.layers.Reshape((3, 3, 1, 1), name = 'Res4019', )(Res16080)
Cro85163 = keras.layers.Cropping3D(cropping=((1, 1), (2, 0), (0, 0)), name = 'Cro85163', )(Res4019)
Zer79442 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (0, 0)), name = 'Zer79442', )(Cro85163)
Sub68947 = keras.layers.Subtract(name = 'Sub68947', )([Mul66930,Zer79442])
Mul57033 = keras.layers.Multiply(name = 'Mul57033', )([Zer48425,Sub68947])
Den13493 = keras.layers.Dense(2,name = 'Den13493', )(Mul57033)
model = tf.keras.models.Model(inputs=[in0Ave85385,in1Ave85385,in0Mul66930,in1Mul66930,in0Sub34654,in1Sub34654], outputs=Den13493)
w = model.get_layer('Den13493').get_weights() 
w[0] = np.array([[0.1345, 0.0059]])
w[1] = np.array([0.5572, 0.7057])
model.get_layer('Den13493').set_weights(w) 
in0Ave85385 = tf.constant([[[[0.7957]], [[0.2166]]]])
in1Ave85385 = tf.constant([[[[0.8252]], [[0.6942]]]])
in0Mul66930 = tf.constant([[[[[0.9778]], [[0.2313]]], [[[0.8463]], [[0.0208]]]]])
in1Mul66930 = tf.constant([[[[[0.5971]], [[0.0992]]], [[[0.6043]], [[0.2473]]]]])
in0Sub34654 = tf.constant([[[0.7052, 0.164, 0.2169], [0.1633, 0.1589, 0.9398], [0.8014, 0.6718, 0.0142]]])
in1Sub34654 = tf.constant([[[0.4771, 0.8643, 0.8675], [0.3505, 0.7385, 0.037], [0.7216, 0.0295, 0.5792]]])
print (np.array2string(model.predict([in0Ave85385,in1Ave85385,in0Mul66930,in1Mul66930,in0Sub34654,in1Sub34654],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Den13493.png')

LAve85385 = average_layer([[[[[0.7957]], [[0.2166]]]], [[[[0.8252]], [[0.6942]]]]], Ave85385), 
LRes87002 = reshape_layer(Ave85385, [2, 1, 1, 1], Res87002), 
LZer48425 = zero_padding3D_layer(Res87002, 0, 0, 1, 0, 0, 0, Zer48425), 
LMul66930 = multiply_layer([[[[[[0.9778]], [[0.2313]]], [[[0.8463]], [[0.0208]]]]], [[[[[0.5971]], [[0.0992]]], [[[0.6043]], [[0.2473]]]]]], Mul66930), 
LSub34654 = subtract_layer([[[0.7052, 0.164, 0.2169], [0.1633, 0.1589, 0.9398], [0.8014, 0.6718, 0.0142]]], [[[0.4771, 0.8643, 0.8675], [0.3505, 0.7385, 0.037], [0.7216, 0.0295, 0.5792]]], Sub34654), 
LRes16080 = reshape_layer(Sub34654, [3, 3, 1], Res16080), 
LRes4019 = reshape_layer(Res16080, [3, 3, 1, 1], Res4019), 
LCro85163 = cropping3D_layer(Res4019, 1, 1, 2, 0, 0, 0, Cro85163), 
LZer79442 = zero_padding3D_layer(Cro85163, 1, 0, 1, 0, 0, 0, Zer79442), 
LSub68947 = subtract_layer(Mul66930,Zer79442, Sub68947), 
LMul57033 = multiply_layer([Zer48425,Sub68947], Mul57033), 
LDen13493 = dense_layer(Mul57033, [[0.1345, 0.0059]],[0.5572, 0.7057], Den13493), 
exec_layers([LAve85385,LRes87002,LZer48425,LMul66930,LSub34654,LRes16080,LRes4019,LCro85163,LZer79442,LSub68947,LMul57033,LDen13493],["Ave85385","Res87002","Zer48425","Mul66930","Sub34654","Res16080","Res4019","Cro85163","Zer79442","Sub68947","Mul57033","Den13493"],Den13493,"Den13493")

Actual (Unparsed): [[[[[0.5572000, 0.7057000]], [[0.5597011, 0.7058097]]], [[[0.5572000, 0.7057000]], [[0.5022174, 0.7032881]]]]]

Expected (Unparsed): [[[[[0.5572,0.7057]],[[0.559701127410904,0.7058097148827088]]],[[[0.5572,0.7057]],[[0.502217393246992,0.7032881235699424]]]]]

Actual:   [[[[[0.5572, 0.7057]], [[0.5598, 0.7059]]], [[[0.5572, 0.7057]], [[0.5023, 0.7033]]]]]

Expected: [[[[[0.5572, 0.7057]], [[0.5598, 0.7059]]], [[[0.5572, 0.7057]], [[0.5023, 0.7033]]]]]