import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sep55496 = tf.keras.layers.Input(shape=([1, 2]))
in0Con20084 = tf.keras.layers.Input(shape=([3, 6, 2]))
in0Sub87379 = tf.keras.layers.Input(shape=([3, 2, 3]))
in1Sub87379 = tf.keras.layers.Input(shape=([3, 2, 3]))
in0GRU1084 = tf.keras.layers.Input(shape=([1, 1]))
in0Con49922 = tf.keras.layers.Input(shape=([52]))
in0Con76590 = tf.keras.layers.Input(shape=([54, 1, 3, 1]))
in0Con71929 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))

Sep55496 = keras.layers.SeparableConv1D(4, (1),strides=(1), padding='same', name = 'Sep55496', )(in0Sep55496)
Res35257 = keras.layers.Reshape((1, 4, 1), name = 'Res35257', )(Sep55496)
Zer97050 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer97050', )(Res35257)
Con20084 = keras.layers.Concatenate(axis=3, name = 'Con20084', )([Zer97050,in0Con20084])
Sub87379 = keras.layers.Subtract(name = 'Sub87379', )([in0Sub87379,in1Sub87379])
Zer53923 = keras.layers.ZeroPadding2D(padding=((0, 0), (4, 0)), name = 'Zer53923', )(Sub87379)
Ave42027 = keras.layers.Average(name = 'Ave42027', )([Con20084,Zer53923])
Res2036 = keras.layers.Reshape((3, 18), name = 'Res2036', )(Ave42027)
Fla90892 = keras.layers.Flatten(name = 'Fla90892', )(Res2036)
GRU1084 = keras.layers.GRU(2,reset_after=True, recurrent_activation='sigmoid', name = 'GRU1084', )(in0GRU1084)
Con49922 = keras.layers.Concatenate(axis=1, name = 'Con49922', )([GRU1084,in0Con49922])
Sub8100 = keras.layers.Subtract(name = 'Sub8100', )([Fla90892,Con49922])
Res65721 = keras.layers.Reshape((54, 1), name = 'Res65721', )(Sub8100)
Res26516 = keras.layers.Reshape((54, 1, 1), name = 'Res26516', )(Res65721)
Res32426 = keras.layers.Reshape((54, 1, 1, 1), name = 'Res32426', )(Res26516)
Zer43469 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer43469', )(Res32426)
Con76590 = keras.layers.Concatenate(axis=4, name = 'Con76590', )([Zer43469,in0Con76590])
Con71929 = keras.layers.Conv3D(2, (1, 1, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con71929', )(in0Con71929)
Zer19056 = keras.layers.ZeroPadding3D(padding=((53, 0), (0, 0), (1, 0)), name = 'Zer19056', )(Con71929)
Add58486 = keras.layers.Add(name = 'Add58486', )([Con76590,Zer19056])
Res69593 = keras.layers.Reshape((54, 1, 6), name = 'Res69593', )(Add58486)
Sep98201 = keras.layers.SeparableConv2D(4, (25, 1),strides=(37, 37), padding='valid', name = 'Sep98201', )(Res69593)
model = tf.keras.models.Model(inputs=[in0Sep55496,in0Con20084,in0Sub87379,in1Sub87379,in0GRU1084,in0Con49922,in0Con76590,in0Con71929], outputs=Sep98201)
w = model.get_layer('Sep55496').get_weights() 
w[0] = np.array([[[0.6799], [0.9217]]])
w[1] = np.array([[[0.9019, 0.9016, 0.4807, 0.1386], [0.1458, 0.9574, 0.6018, 0.2832]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep55496').set_weights(w) 
w = model.get_layer('GRU1084').get_weights() 
w[0] = np.array([[4, 4, 3, 3, 9, 3]])
w[1] = np.array([[2, 4, 2, 5, 7, 2], [8, 1, 9, 4, 1, 7]])
w[2] = np.array([[2, 4, 5, 10, 7, 5], [9, 3, 10, 4, 5, 4]])
model.get_layer('GRU1084').set_weights(w) 
w = model.get_layer('Con71929').get_weights() 
w[0] = np.array([[[[[0.9551, 0.9302]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con71929').set_weights(w) 
w = model.get_layer('Sep98201').get_weights() 
w[0] = np.array([[[[0.1673], [0.7199], [0.3823], [0.0213], [0.0036], [0.41]]], [[[0.4771], [0.5895], [0.2046], [0.7144], [0.5898], [0.2151]]], [[[0.2498], [0.2657], [0.0259], [0.0027], [0.6352], [0.9423]]], [[[0.0236], [0.7427], [0.0475], [0.1569], [0.2984], [0.4512]]], [[[0.1701], [0.7703], [0.5967], [0.5456], [0.8863], [0.5224]]], [[[0.3419], [0.8707], [0.6878], [0.9891], [0.9453], [0.4779]]], [[[0.2964], [0.5927], [0.5148], [0.6617], [0.8642], [0.1216]]], [[[0.4982], [0.2623], [0.6297], [0.5464], [0.2676], [0.6519]]], [[[0.577], [0.6598], [0.7715], [0.144], [0.4682], [0.2143]]], [[[0.1594], [0.7829], [0.6049], [0.7798], [0.7208], [0.6069]]], [[[0.8062], [0.5064], [0.5665], [0.5089], [0.3914], [0.3369]]], [[[0.2332], [0.7646], [0.4001], [0.9875], [0.7901], [0.1459]]], [[[0.8921], [0.1908], [0.0902], [0.2901], [0.9311], [0.2773]]], [[[0.5207], [0.6602], [0.7754], [0.1624], [0.9844], [0.9966]]], [[[0.8738], [0.2008], [0.8652], [0.6331], [0.4962], [0.1716]]], [[[0.4223], [0.4341], [0.217], [0.8653], [0.3945], [0.3913]]], [[[0.0118], [0.3592], [0.5934], [0.1136], [0.4299], [0.0881]]], [[[0.9189], [0.5416], [0.1599], [0.241], [0.5401], [0.2229]]], [[[0.3192], [0.8533], [0.9475], [0.3961], [0.9679], [0.1968]]], [[[0.2092], [0.9473], [0.6705], [0.7209], [0.0386], [0.029]]], [[[0.4133], [0.845], [0.2161], [0.7586], [0.82], [0.3657]]], [[[0.4997], [0.9512], [0.4047], [0.1015], [0.4056], [0.2849]]], [[[0.5495], [0.671], [0.1417], [0.6414], [0.0024], [0.9772]]], [[[0.5403], [0.6256], [0.9507], [0.0529], [0.0468], [0.4227]]], [[[0.1493], [0.4112], [0.6988], [0.2241], [0.1518], [0.9416]]]])
w[1] = np.array([[[[0.8593, 0.7582, 0.9846, 0.3833], [0.5651, 0.49, 0.34, 0.9011], [0.0121, 0.5733, 0.3647, 0.9332], [0.2279, 0.7403, 0.4687, 0.0849], [0.8565, 0.3349, 0.7851, 0.7624], [0.8148, 0.407, 0.1625, 0.7635]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep98201').set_weights(w) 
in0Sep55496 = tf.constant([[[0.5721, 0.9842]]])
in0Con20084 = tf.constant([[[[0.9402, 0.9155], [0.8357, 0.6147], [0.9373, 0.9324], [0.1194, 0.1081], [0.9339, 0.5273], [0.0094, 0.2033]], [[0.1872, 0.9698], [0.0809, 0.3633], [0.65, 0.5068], [0.3307, 0.8758], [0.6978, 0.1561], [0.4036, 0.5303]], [[0.8366, 0.5715], [0.0854, 0.4396], [0.1179, 0.5781], [0.7762, 0.4689], [0.1276, 0.9361], [0.7513, 0.7766]]]])
in0Sub87379 = tf.constant([[[[0.2111, 0.4195, 0.4369], [0.5011, 0.9909, 0.0527]], [[0.4825, 0.8202, 0.5174], [0.4, 0.0369, 0.0797]], [[0.1522, 0.8602, 0.2752], [0.0295, 0.7086, 0.666]]]])
in1Sub87379 = tf.constant([[[[0.5713, 0.6891, 0.4691], [0.9539, 0.3451, 0.16]], [[0.5788, 0.31, 0.4711], [0.2716, 0.5423, 0.8824]], [[0.5479, 0.5466, 0.2316], [0.5353, 0.7144, 0.1717]]]])
in0GRU1084 = tf.constant([[[6]]])
in0Con49922 = tf.constant([[0.5217, 0.0058, 0.7296, 0.6499, 0.9046, 0.1866, 0.5202, 0.6794, 0.9738, 0.5866, 0.9378, 0.9274, 0.3743, 0.0861, 0.2229, 0.3691, 0.3458, 0.6663, 0.7066, 0.0567, 0.4171, 0.0574, 0.3243, 0.4185, 0.3425, 0.9304, 0.0424, 0.0209, 0.8404, 0.8978, 0.9379, 0.4302, 0.3503, 0.6843, 0.5326, 0.2395, 0.3289, 0.8364, 0.9928, 0.1568, 0.5771, 0.249, 0.9755, 0.2925, 0.7079, 0.6052, 0.2276, 0.427, 0.1461, 0.5495, 0.525, 0.0927]])
in0Con76590 = tf.constant([[[[[0.5505], [0.82], [0.6468]]], [[[0.894], [0.6889], [0.2626]]], [[[0.2325], [0.6339], [0.483]]], [[[0.3646], [0.9508], [0.8385]]], [[[0.3651], [0.9413], [0.8863]]], [[[0.2571], [0.1275], [0.9643]]], [[[0.9906], [0.8014], [0.6103]]], [[[0.27], [0.2754], [0.1771]]], [[[0.6172], [0.0844], [0.3949]]], [[[0.4905], [0.1976], [0.0566]]], [[[0.3925], [0.6789], [0.777]]], [[[0.185], [0.996], [0.1957]]], [[[0.7456], [0.7514], [0.7399]]], [[[0.5041], [0.019], [0.1346]]], [[[0.3645], [0.5799], [0.7779]]], [[[0.1674], [0.3952], [0.8051]]], [[[0.0586], [0.5197], [0.5417]]], [[[0.3461], [0.1209], [0.4446]]], [[[0.5741], [0.3535], [0.5499]]], [[[0.108], [0.6283], [0.0954]]], [[[0.8634], [0.6366], [0.4744]]], [[[0.4403], [0.9884], [0.9663]]], [[[0.1421], [0.9441], [0.351]]], [[[0.5492], [0.4361], [0.1632]]], [[[0.4765], [0.9888], [0.3024]]], [[[0.7152], [0.9367], [0.7091]]], [[[0.7034], [0.0396], [0.2029]]], [[[0.8389], [0.6533], [0.7716]]], [[[0.461], [0.5917], [0.3236]]], [[[0.1382], [0.7297], [0.5579]]], [[[0.6842], [0.8061], [0.6848]]], [[[0.4881], [0.9676], [0.17]]], [[[0.4385], [0.3465], [0.3594]]], [[[0.1557], [0.1471], [0.6378]]], [[[0.7076], [0.2298], [0.7301]]], [[[0.2701], [0.7153], [0.4572]]], [[[0.1692], [0.5089], [0.0375]]], [[[0.1311], [0.8277], [0.8945]]], [[[0.9369], [0.7076], [0.9808]]], [[[0.3523], [0.6699], [0.5236]]], [[[0.28], [0.1043], [0.5726]]], [[[0.0499], [0.1874], [0.4102]]], [[[0.8961], [0.2367], [0.5119]]], [[[0.6083], [0.7982], [0.8469]]], [[[0.0537], [0.4072], [0.5442]]], [[[0.539], [0.0216], [0.8863]]], [[[0.8893], [0.862], [0.3259]]], [[[0.2033], [0.8193], [0.2561]]], [[[0.07], [0.5801], [0.314]]], [[[0.6118], [0.5633], [0.737]]], [[[0.562], [0.9378], [0.9616]]], [[[0.5841], [0.1039], [0.2078]]], [[[0.2048], [0.6387], [0.7107]]], [[[0.5157], [0.264], [0.3381]]]]])
in0Con71929 = tf.constant([[[[[0.4025], [0.1442]]]]])
print (np.array2string(model.predict([in0Sep55496,in0Con20084,in0Sub87379,in1Sub87379,in0GRU1084,in0Con49922,in0Con76590,in0Con71929],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sep98201.png')

LSep55496 = separable_conv1D_layer([[[0.5721, 0.9842]]], 1,[[[[0.6799], [0.9217]]],[[[0.9019, 0.9016, 0.4807, 0.1386], [0.1458, 0.9574, 0.6018, 0.2832]]]],[0, 0, 0, 0], 1, true, Sep55496), 
LRes35257 = reshape_layer(Sep55496, [1, 4, 1], Res35257), 
LZer97050 = zero_padding2D_layer(Res35257, 2, 0, 2, 0, Zer97050), 
LCon20084 = concatenate_layer([Zer97050,[[[[0.9402, 0.9155], [0.8357, 0.6147], [0.9373, 0.9324], [0.1194, 0.1081], [0.9339, 0.5273], [0.0094, 0.2033]], [[0.1872, 0.9698], [0.0809, 0.3633], [0.65, 0.5068], [0.3307, 0.8758], [0.6978, 0.1561], [0.4036, 0.5303]], [[0.8366, 0.5715], [0.0854, 0.4396], [0.1179, 0.5781], [0.7762, 0.4689], [0.1276, 0.9361], [0.7513, 0.7766]]]]], 3, Con20084), 
LSub87379 = subtract_layer([[[[0.2111, 0.4195, 0.4369], [0.5011, 0.9909, 0.0527]], [[0.4825, 0.8202, 0.5174], [0.4, 0.0369, 0.0797]], [[0.1522, 0.8602, 0.2752], [0.0295, 0.7086, 0.666]]]], [[[[0.5713, 0.6891, 0.4691], [0.9539, 0.3451, 0.16]], [[0.5788, 0.31, 0.4711], [0.2716, 0.5423, 0.8824]], [[0.5479, 0.5466, 0.2316], [0.5353, 0.7144, 0.1717]]]], Sub87379), 
LZer53923 = zero_padding2D_layer(Sub87379, 0, 0, 4, 0, Zer53923), 
LAve42027 = average_layer([Con20084,Zer53923], Ave42027), 
LRes2036 = reshape_layer(Ave42027, [3, 18], Res2036), 
LFla90892 = flatten_layer(Res2036, Fla90892), 
LGRU1084 = gru_layer([[[6]]],[[4, 4, 3, 3, 9, 3]],[[2, 4, 2, 5, 7, 2], [8, 1, 9, 4, 1, 7]],[[2, 4, 5, 10, 7, 5], [9, 3, 10, 4, 5, 4]], true, GRU1084), 
LCon49922 = concatenate_layer([GRU1084,[[0.5217, 0.0058, 0.7296, 0.6499, 0.9046, 0.1866, 0.5202, 0.6794, 0.9738, 0.5866, 0.9378, 0.9274, 0.3743, 0.0861, 0.2229, 0.3691, 0.3458, 0.6663, 0.7066, 0.0567, 0.4171, 0.0574, 0.3243, 0.4185, 0.3425, 0.9304, 0.0424, 0.0209, 0.8404, 0.8978, 0.9379, 0.4302, 0.3503, 0.6843, 0.5326, 0.2395, 0.3289, 0.8364, 0.9928, 0.1568, 0.5771, 0.249, 0.9755, 0.2925, 0.7079, 0.6052, 0.2276, 0.427, 0.1461, 0.5495, 0.525, 0.0927]]], 1, Con49922), 
LSub8100 = subtract_layer(Fla90892,Con49922, Sub8100), 
LRes65721 = reshape_layer(Sub8100, [54, 1], Res65721), 
LRes26516 = reshape_layer(Res65721, [54, 1, 1], Res26516), 
LRes32426 = reshape_layer(Res26516, [54, 1, 1, 1], Res32426), 
LZer43469 = zero_padding3D_layer(Res32426, 0, 0, 0, 0, 2, 0, Zer43469), 
LCon76590 = concatenate_layer([Zer43469,[[[[[0.5505], [0.82], [0.6468]]], [[[0.894], [0.6889], [0.2626]]], [[[0.2325], [0.6339], [0.483]]], [[[0.3646], [0.9508], [0.8385]]], [[[0.3651], [0.9413], [0.8863]]], [[[0.2571], [0.1275], [0.9643]]], [[[0.9906], [0.8014], [0.6103]]], [[[0.27], [0.2754], [0.1771]]], [[[0.6172], [0.0844], [0.3949]]], [[[0.4905], [0.1976], [0.0566]]], [[[0.3925], [0.6789], [0.777]]], [[[0.185], [0.996], [0.1957]]], [[[0.7456], [0.7514], [0.7399]]], [[[0.5041], [0.019], [0.1346]]], [[[0.3645], [0.5799], [0.7779]]], [[[0.1674], [0.3952], [0.8051]]], [[[0.0586], [0.5197], [0.5417]]], [[[0.3461], [0.1209], [0.4446]]], [[[0.5741], [0.3535], [0.5499]]], [[[0.108], [0.6283], [0.0954]]], [[[0.8634], [0.6366], [0.4744]]], [[[0.4403], [0.9884], [0.9663]]], [[[0.1421], [0.9441], [0.351]]], [[[0.5492], [0.4361], [0.1632]]], [[[0.4765], [0.9888], [0.3024]]], [[[0.7152], [0.9367], [0.7091]]], [[[0.7034], [0.0396], [0.2029]]], [[[0.8389], [0.6533], [0.7716]]], [[[0.461], [0.5917], [0.3236]]], [[[0.1382], [0.7297], [0.5579]]], [[[0.6842], [0.8061], [0.6848]]], [[[0.4881], [0.9676], [0.17]]], [[[0.4385], [0.3465], [0.3594]]], [[[0.1557], [0.1471], [0.6378]]], [[[0.7076], [0.2298], [0.7301]]], [[[0.2701], [0.7153], [0.4572]]], [[[0.1692], [0.5089], [0.0375]]], [[[0.1311], [0.8277], [0.8945]]], [[[0.9369], [0.7076], [0.9808]]], [[[0.3523], [0.6699], [0.5236]]], [[[0.28], [0.1043], [0.5726]]], [[[0.0499], [0.1874], [0.4102]]], [[[0.8961], [0.2367], [0.5119]]], [[[0.6083], [0.7982], [0.8469]]], [[[0.0537], [0.4072], [0.5442]]], [[[0.539], [0.0216], [0.8863]]], [[[0.8893], [0.862], [0.3259]]], [[[0.2033], [0.8193], [0.2561]]], [[[0.07], [0.5801], [0.314]]], [[[0.6118], [0.5633], [0.737]]], [[[0.562], [0.9378], [0.9616]]], [[[0.5841], [0.1039], [0.2078]]], [[[0.2048], [0.6387], [0.7107]]], [[[0.5157], [0.264], [0.3381]]]]]], 4, Con76590), 
LCon71929 = conv3D_layer([[[[[0.4025], [0.1442]]]]], 1, 1, 1,[[[[[0.9551, 0.9302]]]]],[0, 0], 1, 1, 1, false, 1, 1, 1, Con71929), 
LZer19056 = zero_padding3D_layer(Con71929, 53, 0, 0, 0, 1, 0, Zer19056), 
LAdd58486 = add_layer([Con76590,Zer19056], Add58486), 
LRes69593 = reshape_layer(Add58486, [54, 1, 6], Res69593), 
LSep98201 = separable_conv2D_layer(Res69593, 25, 1,[[[[[0.1673], [0.7199], [0.3823], [0.0213], [0.0036], [0.41]]], [[[0.4771], [0.5895], [0.2046], [0.7144], [0.5898], [0.2151]]], [[[0.2498], [0.2657], [0.0259], [0.0027], [0.6352], [0.9423]]], [[[0.0236], [0.7427], [0.0475], [0.1569], [0.2984], [0.4512]]], [[[0.1701], [0.7703], [0.5967], [0.5456], [0.8863], [0.5224]]], [[[0.3419], [0.8707], [0.6878], [0.9891], [0.9453], [0.4779]]], [[[0.2964], [0.5927], [0.5148], [0.6617], [0.8642], [0.1216]]], [[[0.4982], [0.2623], [0.6297], [0.5464], [0.2676], [0.6519]]], [[[0.577], [0.6598], [0.7715], [0.144], [0.4682], [0.2143]]], [[[0.1594], [0.7829], [0.6049], [0.7798], [0.7208], [0.6069]]], [[[0.8062], [0.5064], [0.5665], [0.5089], [0.3914], [0.3369]]], [[[0.2332], [0.7646], [0.4001], [0.9875], [0.7901], [0.1459]]], [[[0.8921], [0.1908], [0.0902], [0.2901], [0.9311], [0.2773]]], [[[0.5207], [0.6602], [0.7754], [0.1624], [0.9844], [0.9966]]], [[[0.8738], [0.2008], [0.8652], [0.6331], [0.4962], [0.1716]]], [[[0.4223], [0.4341], [0.217], [0.8653], [0.3945], [0.3913]]], [[[0.0118], [0.3592], [0.5934], [0.1136], [0.4299], [0.0881]]], [[[0.9189], [0.5416], [0.1599], [0.241], [0.5401], [0.2229]]], [[[0.3192], [0.8533], [0.9475], [0.3961], [0.9679], [0.1968]]], [[[0.2092], [0.9473], [0.6705], [0.7209], [0.0386], [0.029]]], [[[0.4133], [0.845], [0.2161], [0.7586], [0.82], [0.3657]]], [[[0.4997], [0.9512], [0.4047], [0.1015], [0.4056], [0.2849]]], [[[0.5495], [0.671], [0.1417], [0.6414], [0.0024], [0.9772]]], [[[0.5403], [0.6256], [0.9507], [0.0529], [0.0468], [0.4227]]], [[[0.1493], [0.4112], [0.6988], [0.2241], [0.1518], [0.9416]]]],[[[[0.8593, 0.7582, 0.9846, 0.3833], [0.5651, 0.49, 0.34, 0.9011], [0.0121, 0.5733, 0.3647, 0.9332], [0.2279, 0.7403, 0.4687, 0.0849], [0.8565, 0.3349, 0.7851, 0.7624], [0.8148, 0.407, 0.1625, 0.7635]]]]],[0, 0, 0, 0], 37, 37, false, Sep98201), 
exec_layers([LSep55496,LRes35257,LZer97050,LCon20084,LSub87379,LZer53923,LAve42027,LRes2036,LFla90892,LGRU1084,LCon49922,LSub8100,LRes65721,LRes26516,LRes32426,LZer43469,LCon76590,LCon71929,LZer19056,LAdd58486,LRes69593,LSep98201],["Sep55496","Res35257","Zer97050","Con20084","Sub87379","Zer53923","Ave42027","Res2036","Fla90892","GRU1084","Con49922","Sub8100","Res65721","Res26516","Res32426","Zer43469","Con76590","Con71929","Zer19056","Add58486","Res69593","Sep98201"],Sep98201,"Sep98201")

Actual (Unparsed): [[[[5.0634246, 8.4741375, 2.2877031, 6.6131521]]]]

Expected (Unparsed): [[[[5.063424685184485,8.474137457726494,2.2877031879434844,6.613152199468982]]]]

Actual:   [[[[5.0635, 8.4742, 2.2878, 6.6132]]]]

Expected: [[[[5.0635, 8.4742, 2.2878, 6.6132]]]]