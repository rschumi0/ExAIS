import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max63052 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Max63052 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con66898 = tf.keras.layers.Input(shape=([4, 4, 3, 1]))
in0Max21359 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))
in1Max21359 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))
in0Max77152 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Max77152 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con69540 = tf.keras.layers.Input(shape=([4, 4, 3, 1]))
in0Add43652 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Add43652 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con87695 = tf.keras.layers.Input(shape=([4, 4, 5]))
in0Dot84555 = tf.keras.layers.Input(shape=([3, 2]))
in1Dot84555 = tf.keras.layers.Input(shape=([3, 2]))
in0Con16813 = tf.keras.layers.Input(shape=([94]))

Max63052 = keras.layers.Maximum(name = 'Max63052', )([in0Max63052,in1Max63052])
Res4876 = keras.layers.Reshape((1, 1), name = 'Res4876', )(Max63052)
Con86795 = keras.layers.Conv1D(2, (1),strides=(1), padding='same', dilation_rate=(1), name = 'Con86795', )(Res4876)
Res86738 = keras.layers.Reshape((1, 2, 1), name = 'Res86738', )(Con86795)
Res22136 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res22136', )(Res86738)
Zer49831 = keras.layers.ZeroPadding3D(padding=((3, 0), (2, 0), (2, 0)), name = 'Zer49831', )(Res22136)
Con66898 = keras.layers.Concatenate(axis=4, name = 'Con66898', )([Zer49831,in0Con66898])
Max21359 = keras.layers.Maximum(name = 'Max21359', )([in0Max21359,in1Max21359])
Zer89722 = keras.layers.ZeroPadding3D(padding=((3, 0), (3, 0), (1, 0)), name = 'Zer89722', )(Max21359)
Max77152 = keras.layers.Maximum(name = 'Max77152', )([in0Max77152,in1Max77152])
Res66328 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res66328', )(Max77152)
Zer21961 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer21961', )(Res66328)
Con69540 = keras.layers.Concatenate(axis=4, name = 'Con69540', )([Zer21961,in0Con69540])
Min91911 = keras.layers.Minimum(name = 'Min91911', )([Zer89722,Con69540])
Add64320 = keras.layers.Add(name = 'Add64320', )([Con66898,Min91911])
Res96476 = keras.layers.Reshape((4, 4, 6), name = 'Res96476', )(Add64320)
Add43652 = keras.layers.Add(name = 'Add43652', )([in0Add43652,in1Add43652])
Zer37330 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer37330', )(Add43652)
Con87695 = keras.layers.Concatenate(axis=3, name = 'Con87695', )([Zer37330,in0Con87695])
Mul76488 = keras.layers.Multiply(name = 'Mul76488', )([Res96476,Con87695])
Res40625 = keras.layers.Reshape((4, 24), name = 'Res40625', )(Mul76488)
Fla23635 = keras.layers.Flatten(name = 'Fla23635', )(Res40625)
Dot84555 = keras.layers.Dot(axes=(1, 1), name = 'Dot84555', )([in0Dot84555,in1Dot84555])
Glo44561 = keras.layers.GlobalAveragePooling1D(name = 'Glo44561', )(Dot84555)
Sof2735 = keras.layers.Softmax(axis=1, name = 'Sof2735', )(Glo44561)
Con16813 = keras.layers.Concatenate(axis=1, name = 'Con16813', )([Sof2735,in0Con16813])
Min6530 = keras.layers.Minimum(name = 'Min6530', )([Fla23635,Con16813])
model = tf.keras.models.Model(inputs=[in0Max63052,in1Max63052,in0Con66898,in0Max21359,in1Max21359,in0Max77152,in1Max77152,in0Con69540,in0Add43652,in1Add43652,in0Con87695,in0Dot84555,in1Dot84555,in0Con16813], outputs=Min6530)
w = model.get_layer('Con86795').get_weights() 
w[0] = np.array([[[0.7574, 0.9063]]])
w[1] = np.array([0, 0])
model.get_layer('Con86795').set_weights(w) 
in0Max63052 = tf.constant([[[[0.1241]]]])
in1Max63052 = tf.constant([[[[0.2683]]]])
in0Con66898 = tf.constant([[[[[0.3873], [0.3841], [0.506]], [[0.7458], [0.6394], [0.096]], [[0.7412], [0.8099], [0.1633]], [[0.7378], [0.3622], [0.1291]]], [[[0.2612], [0.5112], [0.1404]], [[0.4629], [0.34], [0.2623]], [[0.1098], [0.6873], [0.1698]], [[0.2365], [0.093], [0.8627]]], [[[0.4405], [0.0526], [0.709]], [[0.0479], [0.9509], [0.9231]], [[0.3434], [0.5719], [0.7891]], [[0.8046], [0.6643], [0.3325]]], [[[0.2847], [0.4717], [0.269]], [[0.7013], [0.3505], [0.4696]], [[0.9588], [0.7858], [0.0687]], [[0.5291], [0.9587], [0.1224]]]]])
in0Max21359 = tf.constant([[[[[0.859, 0.902], [0.2236, 0.5122]]]]])
in1Max21359 = tf.constant([[[[[0.3231, 0.958], [0.4744, 0.7144]]]]])
in0Max77152 = tf.constant([[[[0.0083], [0.6989]], [[0.2426], [0.3304]]]])
in1Max77152 = tf.constant([[[[0.6265], [0.7331]], [[0.0104], [0.0054]]]])
in0Con69540 = tf.constant([[[[[0.7253], [0.2324], [0.6712]], [[0.4382], [0.8393], [0.9926]], [[0.4987], [0.9153], [0.8184]], [[0.0698], [0.6867], [0.0341]]], [[[0.5011], [0.888], [0.9572]], [[0.2599], [0.6203], [0.4515]], [[0.657], [0.4413], [0.8257]], [[0.7797], [0.1397], [0.8724]]], [[[0.4753], [0.5481], [0.4292]], [[0.5681], [0.5243], [0.3997]], [[0.2191], [0.0104], [0.3396]], [[0.0793], [0.4698], [0.1432]]], [[[0.4177], [0.1471], [0.2165]], [[0.3218], [0.7961], [0.5266]], [[0.7153], [0.2545], [0.4134]], [[0.5584], [0.7261], [0.7132]]]]])
in0Add43652 = tf.constant([[[[0.5471], [0.9014]], [[0.3453], [0.1295]]]])
in1Add43652 = tf.constant([[[[0.2792], [0.515]], [[0.2921], [0.2899]]]])
in0Con87695 = tf.constant([[[[0.3325, 0.7342, 0.4341, 0.9714, 0.7505], [0.5651, 0.8158, 0.6926, 0.8068, 0.3603], [0.7115, 0.7674, 0.4707, 0.0241, 0.4134], [0.6655, 0.8121, 0.7157, 0.1473, 0.8067]], [[0.8416, 0.4125, 0.9433, 0.6313, 0.9538], [0.032, 0.6118, 0.9262, 0.7062, 0.4459], [0.578, 0.0945, 0.9006, 0.9358, 0.0775], [0.4072, 0.4521, 0.3787, 0.7489, 0.6617]], [[0.3273, 0.7271, 0.9719, 0.0838, 0.9123], [0.1546, 0.3947, 0.76, 0.5327, 0.573], [0.9705, 0.3597, 0.4887, 0.0975, 0.4799], [0.4214, 0.8905, 0.4325, 0.9537, 0.0112]], [[0.7843, 0.0861, 0.6326, 0.1374, 0.5452], [0.778, 0.0986, 0.9062, 0.2773, 0.4026], [0.9968, 0.0366, 0.0121, 0.4316, 0.3296], [0.0177, 0.8239, 0.6969, 0.6492, 0.8907]]]])
in0Dot84555 = tf.constant([[[0.7631, 0.813], [0.5511, 0.6428], [0.8569, 0.4213]]])
in1Dot84555 = tf.constant([[[0.1058, 0.8198], [0.3504, 0.4576], [0.8082, 0.3603]]])
in0Con16813 = tf.constant([[0.3258, 0.3852, 0.3378, 0.2328, 0.5572, 0.9968, 0.5593, 0.6301, 0.2001, 0.2992, 0.241, 0.3716, 0.8625, 0.3587, 0.7197, 0.6379, 0.4223, 0.2066, 0.1185, 0.7936, 0.608, 0.3515, 0.2458, 0.6484, 0.9767, 0.3731, 0.5932, 0.7631, 0.6648, 0.3064, 0.257, 0.9807, 0.2576, 0.8458, 0.846, 0.5722, 0.8748, 0.7545, 0.9523, 0.1317, 0.1007, 0.2451, 0.5618, 0.6278, 0.703, 0.514, 0.8582, 0.8275, 0.1751, 0.0571, 0.2373, 0.64, 0.0185, 0.8747, 0.9865, 0.8034, 0.333, 0.1782, 0.0107, 0.729, 0.7255, 0.755, 0.1877, 0.2549, 0.7656, 0.7175, 0.4222, 0.5179, 0.2177, 0.9632, 0.2345, 0.1499, 0.0619, 0.3112, 0.767, 0.5254, 0.8789, 0.9399, 0.4216, 0.8451, 0.5191, 0.4513, 0.9505, 0.4274, 0.1022, 0.6122, 0.7159, 0.696, 0.3009, 0.5836, 0.005, 0.0024, 0.55, 0.2368]])
print (np.array2string(model.predict([in0Max63052,in1Max63052,in0Con66898,in0Max21359,in1Max21359,in0Max77152,in1Max77152,in0Con69540,in0Add43652,in1Add43652,in0Con87695,in0Dot84555,in1Dot84555,in0Con16813],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min6530.png')

LMax63052 = maximum_layer([[[[[0.1241]]]], [[[[0.2683]]]]], Max63052), 
LRes4876 = reshape_layer(Max63052, [1, 1], Res4876), 
LCon86795 = conv1D_layer(Res4876, 1,[[[0.7574, 0.9063]]],[0, 0], 1, true, 1, Con86795), 
LRes86738 = reshape_layer(Con86795, [1, 2, 1], Res86738), 
LRes22136 = reshape_layer(Res86738, [1, 2, 1, 1], Res22136), 
LZer49831 = zero_padding3D_layer(Res22136, 3, 0, 2, 0, 2, 0, Zer49831), 
LCon66898 = concatenate_layer([Zer49831,[[[[[0.3873], [0.3841], [0.506]], [[0.7458], [0.6394], [0.096]], [[0.7412], [0.8099], [0.1633]], [[0.7378], [0.3622], [0.1291]]], [[[0.2612], [0.5112], [0.1404]], [[0.4629], [0.34], [0.2623]], [[0.1098], [0.6873], [0.1698]], [[0.2365], [0.093], [0.8627]]], [[[0.4405], [0.0526], [0.709]], [[0.0479], [0.9509], [0.9231]], [[0.3434], [0.5719], [0.7891]], [[0.8046], [0.6643], [0.3325]]], [[[0.2847], [0.4717], [0.269]], [[0.7013], [0.3505], [0.4696]], [[0.9588], [0.7858], [0.0687]], [[0.5291], [0.9587], [0.1224]]]]]], 4, Con66898), 
LMax21359 = maximum_layer([[[[[[0.859, 0.902], [0.2236, 0.5122]]]]], [[[[[0.3231, 0.958], [0.4744, 0.7144]]]]]], Max21359), 
LZer89722 = zero_padding3D_layer(Max21359, 3, 0, 3, 0, 1, 0, Zer89722), 
LMax77152 = maximum_layer([[[[[0.0083], [0.6989]], [[0.2426], [0.3304]]]], [[[[0.6265], [0.7331]], [[0.0104], [0.0054]]]]], Max77152), 
LRes66328 = reshape_layer(Max77152, [2, 2, 1, 1], Res66328), 
LZer21961 = zero_padding3D_layer(Res66328, 1, 1, 1, 1, 1, 1, Zer21961), 
LCon69540 = concatenate_layer([Zer21961,[[[[[0.7253], [0.2324], [0.6712]], [[0.4382], [0.8393], [0.9926]], [[0.4987], [0.9153], [0.8184]], [[0.0698], [0.6867], [0.0341]]], [[[0.5011], [0.888], [0.9572]], [[0.2599], [0.6203], [0.4515]], [[0.657], [0.4413], [0.8257]], [[0.7797], [0.1397], [0.8724]]], [[[0.4753], [0.5481], [0.4292]], [[0.5681], [0.5243], [0.3997]], [[0.2191], [0.0104], [0.3396]], [[0.0793], [0.4698], [0.1432]]], [[[0.4177], [0.1471], [0.2165]], [[0.3218], [0.7961], [0.5266]], [[0.7153], [0.2545], [0.4134]], [[0.5584], [0.7261], [0.7132]]]]]], 4, Con69540), 
LMin91911 = minimum_layer([Zer89722,Con69540], Min91911), 
LAdd64320 = add_layer([Con66898,Min91911], Add64320), 
LRes96476 = reshape_layer(Add64320, [4, 4, 6], Res96476), 
LAdd43652 = add_layer([[[[[0.5471], [0.9014]], [[0.3453], [0.1295]]]], [[[[0.2792], [0.515]], [[0.2921], [0.2899]]]]], Add43652), 
LZer37330 = zero_padding2D_layer(Add43652, 2, 0, 2, 0, Zer37330), 
LCon87695 = concatenate_layer([Zer37330,[[[[0.3325, 0.7342, 0.4341, 0.9714, 0.7505], [0.5651, 0.8158, 0.6926, 0.8068, 0.3603], [0.7115, 0.7674, 0.4707, 0.0241, 0.4134], [0.6655, 0.8121, 0.7157, 0.1473, 0.8067]], [[0.8416, 0.4125, 0.9433, 0.6313, 0.9538], [0.032, 0.6118, 0.9262, 0.7062, 0.4459], [0.578, 0.0945, 0.9006, 0.9358, 0.0775], [0.4072, 0.4521, 0.3787, 0.7489, 0.6617]], [[0.3273, 0.7271, 0.9719, 0.0838, 0.9123], [0.1546, 0.3947, 0.76, 0.5327, 0.573], [0.9705, 0.3597, 0.4887, 0.0975, 0.4799], [0.4214, 0.8905, 0.4325, 0.9537, 0.0112]], [[0.7843, 0.0861, 0.6326, 0.1374, 0.5452], [0.778, 0.0986, 0.9062, 0.2773, 0.4026], [0.9968, 0.0366, 0.0121, 0.4316, 0.3296], [0.0177, 0.8239, 0.6969, 0.6492, 0.8907]]]]], 3, Con87695), 
LMul76488 = multiply_layer([Res96476,Con87695], Mul76488), 
LRes40625 = reshape_layer(Mul76488, [4, 24], Res40625), 
LFla23635 = flatten_layer(Res40625, Fla23635), 
LDot84555 = dot_layer([[[0.7631, 0.813], [0.5511, 0.6428], [0.8569, 0.4213]]], [[[0.1058, 0.8198], [0.3504, 0.4576], [0.8082, 0.3603]]], 1, 1, Dot84555), 
LGlo44561 = global_average_pooling1D_layer(Dot84555, Glo44561), 
LSof2735 = softmax_layer(Glo44561, 1, Sof2735), 
LCon16813 = concatenate_layer([Sof2735,[[0.3258, 0.3852, 0.3378, 0.2328, 0.5572, 0.9968, 0.5593, 0.6301, 0.2001, 0.2992, 0.241, 0.3716, 0.8625, 0.3587, 0.7197, 0.6379, 0.4223, 0.2066, 0.1185, 0.7936, 0.608, 0.3515, 0.2458, 0.6484, 0.9767, 0.3731, 0.5932, 0.7631, 0.6648, 0.3064, 0.257, 0.9807, 0.2576, 0.8458, 0.846, 0.5722, 0.8748, 0.7545, 0.9523, 0.1317, 0.1007, 0.2451, 0.5618, 0.6278, 0.703, 0.514, 0.8582, 0.8275, 0.1751, 0.0571, 0.2373, 0.64, 0.0185, 0.8747, 0.9865, 0.8034, 0.333, 0.1782, 0.0107, 0.729, 0.7255, 0.755, 0.1877, 0.2549, 0.7656, 0.7175, 0.4222, 0.5179, 0.2177, 0.9632, 0.2345, 0.1499, 0.0619, 0.3112, 0.767, 0.5254, 0.8789, 0.9399, 0.4216, 0.8451, 0.5191, 0.4513, 0.9505, 0.4274, 0.1022, 0.6122, 0.7159, 0.696, 0.3009, 0.5836, 0.005, 0.0024, 0.55, 0.2368]]], 1, Con16813), 
LMin6530 = minimum_layer([Fla23635,Con16813], Min6530), 
exec_layers([LMax63052,LRes4876,LCon86795,LRes86738,LRes22136,LZer49831,LCon66898,LMax21359,LZer89722,LMax77152,LRes66328,LZer21961,LCon69540,LMin91911,LAdd64320,LRes96476,LAdd43652,LZer37330,LCon87695,LMul76488,LRes40625,LFla23635,LDot84555,LGlo44561,LSof2735,LCon16813,LMin6530],["Max63052","Res4876","Con86795","Res86738","Res22136","Zer49831","Con66898","Max21359","Zer89722","Max77152","Res66328","Zer21961","Con69540","Min91911","Add64320","Res96476","Add43652","Zer37330","Con87695","Mul76488","Res40625","Fla23635","Dot84555","Glo44561","Sof2735","Con16813","Min6530"],Min6530,"Min6530")

Actual (Unparsed): [[0.0000000, 0.1287773, 0.0000000, 0.1667378, 0.0000000, 0.2328000, 0.0000000, 0.4214516, 0.0000000, 0.4428485, 0.0000000, 0.0345888, 0.0000000, 0.3716000, 0.0000000, 0.3587000, 0.0000000, 0.0675082, 0.0000000, 0.2066000, 0.0000000, 0.2592265, 0.0000000, 0.1041450, 0.0000000, 0.2198259, 0.0000000, 0.3731000, 0.0000000, 0.1339135, 0.0000000, 0.0148128, 0.0000000, 0.3149080, 0.0000000, 0.1169596, 0.0000000, 0.0634644, 0.0000000, 0.6189824, 0.0000000, 0.0131595, 0.0000000, 0.0963028, 0.0000000, 0.0352191, 0.0000000, 0.5140000, 0.0000000, 0.1441757, 0.0000000, 0.0511219, 0.0000000, 0.6400000, 0.0000000, 0.0074053, 0.0000000, 0.7226840, 0.0000000, 0.1782000, 0.0000000, 0.3332697, 0.0000000, 0.2794875, 0.0000000, 0.2549000, 0.0000000, 0.3390584, 0.0000000, 0.2873098, 0.0000000, 0.0037240, 0.0000000, 0.1499000, 0.0000000, 0.2983974, 0.0000000, 0.1466588, 0.0000000, 0.5456114, 0.0000000, 0.3176231, 0.0000000, 0.1890610, 0.0000000, 0.4274000, 0.0000000, 0.0095082, 0.0877056, 0.0226435, 0.0000000, 0.0093651, 0.0000000, 0.0024000, 0.1578597, 0.2368000]]

Expected (Unparsed): [[0,0.12877725,0.0,0.16673781,0.0,0.2328,0,0.42145158000000005,0.0,0.44284843999999995,0.0,0.0345888,0,0.3716,0.0,0.3587,0.0,0.06750822,0,0.2066,0.0,0.25922654,0.0,0.10414496999999999,0,0.21982591999999998,0.0,0.3731,0.0,0.13391352,0,0.0148128,0.0,0.314908,0.0,0.11695957,0,0.06346439999999999,0.0,0.6189823799999999,0.0,0.013159500000000001,0,0.0963028,0.0,0.035219099999999996,0.0,0.514,0,0.14417565,0.0,0.05112194,0.0,0.64,0,0.007405339999999999,0.0,0.722684,0.0,0.1782,0.0,0.3332697,0.0,0.27948753,0.0,0.2549,0.0,0.33905844,0.0,0.28730975,0.0,0.0037240000000000003,0,0.1499,0.0,0.29839742,0.0,0.1466588,0,0.5456114000000001,0.0,0.3176231,0.0,0.18906096,0.0,0.4274,0.0,0.00950818,0.08770561727199999,0.02264352,0.0,0.00936507,0.0,0.0024,0.157859660268,0.2368]]

Actual:   [[0, 0.1288, 0, 0.1668, 0, 0.2328, 0, 0.4215, 0, 0.4429, 0, 0.0346, 0, 0.3716, 0, 0.3587, 0, 0.0676, 0, 0.2066, 0, 0.2593, 0, 0.1042, 0, 0.2199, 0, 0.3731, 0, 0.134, 0, 0.0149, 0, 0.315, 0, 0.117, 0, 0.0635, 0, 0.619, 0, 0.0132, 0, 0.0964, 0, 0.0353, 0, 0.514, 0, 0.1442, 0, 0.0512, 0, 0.64, 0, 0.0075, 0, 0.7227, 0, 0.1782, 0, 0.3333, 0, 0.2795, 0, 0.2549, 0, 0.3391, 0, 0.2874, 0, 0.0038, 0, 0.1499, 0, 0.2984, 0, 0.1467, 0, 0.5457, 0, 0.3177, 0, 0.1891, 0, 0.4274, 0, 0.0096, 0.0878, 0.0227, 0, 0.0094, 0, 0.0024, 0.1579, 0.2368]]

Expected: [[0, 0.1288, 0, 0.1668, 0, 0.2328, 0, 0.4215, 0, 0.4429, 0, 0.0346, 0, 0.3716, 0, 0.3587, 0, 0.0676, 0, 0.2066, 0, 0.2593, 0, 0.1042, 0, 0.2199, 0, 0.3731, 0, 0.134, 0, 0.0149, 0, 0.315, 0, 0.117, 0, 0.0635, 0, 0.619, 0, 0.0132, 0, 0.0964, 0, 0.0353, 0, 0.514, 0, 0.1442, 0, 0.0512, 0, 0.64, 0, 0.0075, 0, 0.7227, 0, 0.1782, 0, 0.3333, 0, 0.2795, 0, 0.2549, 0, 0.3391, 0, 0.2874, 0, 0.0038, 0, 0.1499, 0, 0.2984, 0, 0.1467, 0, 0.5457, 0, 0.3177, 0, 0.1891, 0, 0.4274, 0, 0.0096, 0.0878, 0.0227, 0, 0.0094, 0, 0.0024, 0.1579, 0.2368]]