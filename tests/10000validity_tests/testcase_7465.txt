import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave26729 = tf.keras.layers.Input(shape=([2, 2]))
in1Ave26729 = tf.keras.layers.Input(shape=([2, 2]))
in0Mul85384 = tf.keras.layers.Input(shape=([1, 2, 1]))
in1Mul85384 = tf.keras.layers.Input(shape=([1, 2, 1]))

Ave26729 = keras.layers.Average(name = 'Ave26729', )([in0Ave26729,in1Ave26729])
Lay75052 = keras.layers.LayerNormalization(axis=1, epsilon=1.2228084319277184, name = 'Lay75052', )(Ave26729)
Ave96892 = keras.layers.AveragePooling1D(pool_size=(1), strides=(1), padding='valid', name = 'Ave96892', )(Lay75052)
Sim49058 = keras.layers.SimpleRNN(1,name = 'Sim49058', )(Ave96892)
Res26439 = keras.layers.Reshape((1, 1), name = 'Res26439', )(Sim49058)
Res6776 = keras.layers.Reshape((1, 1, 1), name = 'Res6776', )(Res26439)
Zer75840 = keras.layers.ZeroPadding2D(padding=((0, 0), (1, 0)), name = 'Zer75840', )(Res6776)
Mul85384 = keras.layers.Multiply(name = 'Mul85384', )([in0Mul85384,in1Mul85384])
Bat16502 = keras.layers.BatchNormalization(axis=1, epsilon=0.6480577476002904,  name = 'Bat16502', )(Mul85384)
Ave90676 = keras.layers.Average(name = 'Ave90676', )([Zer75840,Bat16502])
model = tf.keras.models.Model(inputs=[in0Ave26729,in1Ave26729,in0Mul85384,in1Mul85384], outputs=Ave90676)
w = model.get_layer('Sim49058').get_weights() 
w[0] = np.array([[4], [3]])
w[1] = np.array([[4]])
w[2] = np.array([1])
model.get_layer('Sim49058').set_weights(w) 
w = model.get_layer('Bat16502').get_weights() 
w[0] = np.array([0.7388])
w[1] = np.array([0.8536])
w[2] = np.array([0.6538])
w[3] = np.array([0.0997])
model.get_layer('Bat16502').set_weights(w) 
in0Ave26729 = tf.constant([[[0.4537, 0.6979], [0.1049, 0.4861]]])
in1Ave26729 = tf.constant([[[0.4077, 0.528], [0.4018, 0.9657]]])
in0Mul85384 = tf.constant([[[[0.9129], [0.1769]]]])
in1Mul85384 = tf.constant([[[[0.0589], [0.2035]]]])
print (np.array2string(model.predict([in0Ave26729,in1Ave26729,in0Mul85384,in1Mul85384],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave90676.png')

LAve26729 = average_layer([[[[0.4537, 0.6979], [0.1049, 0.4861]]], [[[0.4077, 0.528], [0.4018, 0.9657]]]], Ave26729), 
LLay75052 = layer_normalization_layer(Ave26729, 1, 1.2228084319277184, Lay75052), 
LAve96892 = average_pooling1D_layer(Lay75052, 1, 1, false, Ave96892), 
LSim49058 = simple_rnn_layer(Ave96892,[[4], [3]],[[4]],[1], Sim49058), 
LRes26439 = reshape_layer(Sim49058, [1, 1], Res26439), 
LRes6776 = reshape_layer(Res26439, [1, 1, 1], Res6776), 
LZer75840 = zero_padding2D_layer(Res6776, 0, 0, 1, 0, Zer75840), 
LMul85384 = multiply_layer([[[[[0.9129], [0.1769]]]], [[[[0.0589], [0.2035]]]]], Mul85384), 
LBat16502 = batch_normalization_layer(Mul85384, 1, 0.6480577476002904, [0.7388], [0.8536], [0.6538], [0.0997], Bat16502), 
LAve90676 = average_layer([Zer75840,Bat16502], Ave90676), 
exec_layers([LAve26729,LLay75052,LAve96892,LSim49058,LRes26439,LRes6776,LZer75840,LMul85384,LBat16502,LAve90676],["Ave26729","Lay75052","Ave96892","Sim49058","Res26439","Res6776","Zer75840","Mul85384","Bat16502","Ave90676"],Ave90676,"Ave90676")

Actual (Unparsed): [[[[0.1704758], [0.6626239]]]]

Expected (Unparsed): [[[[0.17047584612793815],[0.6626238894547871]]]]

Actual:   [[[[0.1705], [0.6627]]]]

Expected: [[[[0.1705], [0.6627]]]]