import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con98861 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con91041 = tf.keras.layers.Input(shape=([2, 3, 4, 2]))
in0Sub59304 = tf.keras.layers.Input(shape=([2, 3, 2, 3]))
in1Sub59304 = tf.keras.layers.Input(shape=([2, 3, 2, 3]))
in0Con82001 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con96667 = tf.keras.layers.Input(shape=([2, 3, 9]))

Con98861 = keras.layers.Conv2DTranspose(3, (1, 2),strides=(1, 1), padding='same', name = 'Con98861', )(in0Con98861)
Res7076 = keras.layers.Reshape((2, 2, 3, 1), name = 'Res7076', )(Con98861)
Zer7797 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (1, 0)), name = 'Zer7797', )(Res7076)
Con91041 = keras.layers.Concatenate(axis=4, name = 'Con91041', )([Zer7797,in0Con91041])
Sub59304 = keras.layers.Subtract(name = 'Sub59304', )([in0Sub59304,in1Sub59304])
Zer17481 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer17481', )(Sub59304)
Sub54992 = keras.layers.Subtract(name = 'Sub54992', )([Con91041,Zer17481])
Res82763 = keras.layers.Reshape((2, 3, 12), name = 'Res82763', )(Sub54992)
Con82001 = keras.layers.Conv2DTranspose(3, (1, 2),strides=(1, 1), padding='valid', name = 'Con82001', )(in0Con82001)
Sep32130 = keras.layers.SeparableConv2D(3, (2, 3),strides=(1, 1), padding='valid', name = 'Sep32130', )(Con82001)
Zer58908 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer58908', )(Sep32130)
Con96667 = keras.layers.Concatenate(axis=3, name = 'Con96667', )([Zer58908,in0Con96667])
Max71566 = keras.layers.Maximum(name = 'Max71566', )([Res82763,Con96667])
model = tf.keras.models.Model(inputs=[in0Con98861,in0Con91041,in0Sub59304,in1Sub59304,in0Con82001,in0Con96667], outputs=Max71566)
w = model.get_layer('Con98861').get_weights() 
w[0] = np.array([[[[0.7378, 0.5769], [0.4498, 0.6389], [0.5206, 0.1578]], [[0.6784, 0.8774], [0.8157, 0.5629], [0.2511, 0.8438]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con98861').set_weights(w) 
w = model.get_layer('Con82001').get_weights() 
w[0] = np.array([[[[0.5834, 0.9988], [0.9384, 0.6865], [0.0692, 0.7319]], [[0.95, 0.7982], [0.8887, 0.9993], [0.2356, 0.1303]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con82001').set_weights(w) 
w = model.get_layer('Sep32130').get_weights() 
w[0] = np.array([[[[0.3747], [0.5374], [0.7096]], [[0.9927], [0.9234], [0.1247]], [[0.9174], [0.2355], [0.3738]]], [[[0.027], [0.9621], [0.3761]], [[0.1831], [0.5705], [0.3663]], [[0.9329], [0.8136], [0.3178]]]])
w[1] = np.array([[[[0.1331, 0.0642, 0.3229], [0.6742, 0.4574, 0.7076], [0.1486, 0.3972, 0.8466]]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep32130').set_weights(w) 
in0Con98861 = tf.constant([[[[0.8302, 0.4876], [0.1783, 0.1027]], [[0.8656, 0.8324], [0.052, 0.1802]]]])
in0Con91041 = tf.constant([[[[[0.0993, 0.3571], [0.6709, 0.646], [0.8171, 0.7679], [0.4194, 0.4048]], [[0.5154, 0.5426], [0.1941, 0.6668], [0.7303, 0.1622], [0.5159, 0.7611]], [[0.4189, 0.2564], [0.0795, 0.0707], [0.7507, 0.1411], [0.4879, 0.0068]]], [[[0.3608, 0.8763], [0.4214, 0.7619], [0.1657, 0.8186], [0.33, 0.6853]], [[0.9835, 0.6005], [0.8317, 0.1537], [0.4935, 0.8344], [0.7425, 0.7592]], [[0.5193, 0.608], [0.0713, 0.4789], [0.2284, 0.0143], [0.3687, 0.2508]]]]])
in0Sub59304 = tf.constant([[[[[0.0015, 0.3136, 0.9088], [0.7505, 0.1927, 0.4583]], [[0.2956, 0.907, 0.434], [0.2518, 0.1768, 0.5859]], [[0.4587, 0.4068, 0.0853], [0.1716, 0.7518, 0.1625]]], [[[0.5357, 0.2061, 0.0619], [0.9698, 0.561, 0.2297]], [[0.7127, 0.3298, 0.9973], [0.9533, 0.6661, 0.7397]], [[0.9282, 0.4153, 0.4681], [0.1702, 0.5223, 0.5139]]]]])
in1Sub59304 = tf.constant([[[[[0.9221, 0.7493, 0.3522], [0.3202, 0.5752, 0.3603]], [[0.1624, 0.8753, 0.8808], [0.6737, 0.9743, 0.7558]], [[0.2025, 0.7307, 0.358], [0.55, 0.6647, 0.5665]]], [[[0.6801, 0.5299, 0.2214], [0.5255, 0.1466, 0.2275]], [[0.2144, 0.8529, 0.4976], [0.3261, 0.1242, 0.8718]], [[0.2837, 0.2648, 0.1761], [0.5519, 0.7554, 0.2197]]]]])
in0Con82001 = tf.constant([[[[0.9603, 0.5608], [0.5318, 0.6739]], [[0.2465, 0.9516], [0.3783, 0.6159]]]])
in0Con96667 = tf.constant([[[[0.4125, 0.4596, 0.9196, 0.0239, 0.4464, 0.3241, 0.8235, 0.4059, 0.6342], [0.5701, 0.5415, 0.3984, 0.3586, 0.4555, 0.7569, 0.1306, 0.4654, 0.7767], [0.9076, 0.1603, 0.2312, 0.2838, 0.7301, 0.3953, 0.4241, 0.6428, 0.5762]], [[0.5317, 0.7832, 0.4441, 0.9039, 0.8038, 0.9936, 0.5161, 0.9234, 0.5608], [0.8976, 0.7245, 0.3728, 0.5527, 0.2483, 0.5114, 0.7907, 0.8415, 0.7871], [0.66, 0.456, 0.9324, 0.8055, 0.1586, 0.3715, 0.0662, 0.637, 0.582]]]])
print (np.array2string(model.predict([in0Con98861,in0Con91041,in0Sub59304,in1Sub59304,in0Con82001,in0Con96667],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max71566.png')

LCon98861 = conv2D_transpose_layer([[[[0.8302, 0.4876], [0.1783, 0.1027]], [[0.8656, 0.8324], [0.052, 0.1802]]]], 1, 2,[[[[0.7378, 0.5769], [0.4498, 0.6389], [0.5206, 0.1578]], [[0.6784, 0.8774], [0.8157, 0.5629], [0.2511, 0.8438]]]],[0, 0, 0], 1, 1, true, Con98861), 
LRes7076 = reshape_layer(Con98861, [2, 2, 3, 1], Res7076), 
LZer7797 = zero_padding3D_layer(Res7076, 0, 0, 1, 0, 1, 0, Zer7797), 
LCon91041 = concatenate_layer([Zer7797,[[[[[0.0993, 0.3571], [0.6709, 0.646], [0.8171, 0.7679], [0.4194, 0.4048]], [[0.5154, 0.5426], [0.1941, 0.6668], [0.7303, 0.1622], [0.5159, 0.7611]], [[0.4189, 0.2564], [0.0795, 0.0707], [0.7507, 0.1411], [0.4879, 0.0068]]], [[[0.3608, 0.8763], [0.4214, 0.7619], [0.1657, 0.8186], [0.33, 0.6853]], [[0.9835, 0.6005], [0.8317, 0.1537], [0.4935, 0.8344], [0.7425, 0.7592]], [[0.5193, 0.608], [0.0713, 0.4789], [0.2284, 0.0143], [0.3687, 0.2508]]]]]], 4, Con91041), 
LSub59304 = subtract_layer([[[[[0.0015, 0.3136, 0.9088], [0.7505, 0.1927, 0.4583]], [[0.2956, 0.907, 0.434], [0.2518, 0.1768, 0.5859]], [[0.4587, 0.4068, 0.0853], [0.1716, 0.7518, 0.1625]]], [[[0.5357, 0.2061, 0.0619], [0.9698, 0.561, 0.2297]], [[0.7127, 0.3298, 0.9973], [0.9533, 0.6661, 0.7397]], [[0.9282, 0.4153, 0.4681], [0.1702, 0.5223, 0.5139]]]]], [[[[[0.9221, 0.7493, 0.3522], [0.3202, 0.5752, 0.3603]], [[0.1624, 0.8753, 0.8808], [0.6737, 0.9743, 0.7558]], [[0.2025, 0.7307, 0.358], [0.55, 0.6647, 0.5665]]], [[[0.6801, 0.5299, 0.2214], [0.5255, 0.1466, 0.2275]], [[0.2144, 0.8529, 0.4976], [0.3261, 0.1242, 0.8718]], [[0.2837, 0.2648, 0.1761], [0.5519, 0.7554, 0.2197]]]]], Sub59304), 
LZer17481 = zero_padding3D_layer(Sub59304, 0, 0, 0, 0, 2, 0, Zer17481), 
LSub54992 = subtract_layer(Con91041,Zer17481, Sub54992), 
LRes82763 = reshape_layer(Sub54992, [2, 3, 12], Res82763), 
LCon82001 = conv2D_transpose_layer([[[[0.9603, 0.5608], [0.5318, 0.6739]], [[0.2465, 0.9516], [0.3783, 0.6159]]]], 1, 2,[[[[0.5834, 0.9988], [0.9384, 0.6865], [0.0692, 0.7319]], [[0.95, 0.7982], [0.8887, 0.9993], [0.2356, 0.1303]]]],[0, 0, 0], 1, 1, false, Con82001), 
LSep32130 = separable_conv2D_layer(Con82001, 2, 3,[[[[[0.3747], [0.5374], [0.7096]], [[0.9927], [0.9234], [0.1247]], [[0.9174], [0.2355], [0.3738]]], [[[0.027], [0.9621], [0.3761]], [[0.1831], [0.5705], [0.3663]], [[0.9329], [0.8136], [0.3178]]]],[[[[0.1331, 0.0642, 0.3229], [0.6742, 0.4574, 0.7076], [0.1486, 0.3972, 0.8466]]]]],[0, 0, 0], 1, 1, false, Sep32130), 
LZer58908 = zero_padding2D_layer(Sep32130, 1, 0, 2, 0, Zer58908), 
LCon96667 = concatenate_layer([Zer58908,[[[[0.4125, 0.4596, 0.9196, 0.0239, 0.4464, 0.3241, 0.8235, 0.4059, 0.6342], [0.5701, 0.5415, 0.3984, 0.3586, 0.4555, 0.7569, 0.1306, 0.4654, 0.7767], [0.9076, 0.1603, 0.2312, 0.2838, 0.7301, 0.3953, 0.4241, 0.6428, 0.5762]], [[0.5317, 0.7832, 0.4441, 0.9039, 0.8038, 0.9936, 0.5161, 0.9234, 0.5608], [0.8976, 0.7245, 0.3728, 0.5527, 0.2483, 0.5114, 0.7907, 0.8415, 0.7871], [0.66, 0.456, 0.9324, 0.8055, 0.1586, 0.3715, 0.0662, 0.637, 0.582]]]]], 3, Con96667), 
LMax71566 = maximum_layer([Res82763,Con96667], Max71566), 
exec_layers([LCon98861,LRes7076,LZer7797,LCon91041,LSub59304,LZer17481,LSub54992,LRes82763,LCon82001,LSep32130,LZer58908,LCon96667,LMax71566],["Con98861","Res7076","Zer7797","Con91041","Sub59304","Zer17481","Sub54992","Res82763","Con82001","Sep32130","Zer58908","Con96667","Max71566"],Max71566,"Max71566")

Actual (Unparsed): [[[[0.0000000, 0.0993000, 0.3571000, 0.4125000, 0.6709000, 0.9196000, 0.9206000, 1.2528000, 0.3241000, 0.8235000, 0.8019000, 0.6342000], [0.0000000, 0.5154000, 0.5426000, 0.8938180, 0.5415000, 0.6668000, 0.5517516, 0.6986000, 0.7569000, 0.9310454, 1.3134000, 0.9310000], [0.0000000, 0.4189000, 0.2564000, 1.1818253, 0.1603000, 0.2312000, 0.8412786, 1.0746000, 0.4138000, 1.1073292, 0.6428000, 0.5762000]], [[0.0000000, 0.3608000, 0.8763000, 0.5317000, 0.7832000, 0.7619000, 0.9039000, 0.8038000, 0.9936000, 0.5161000, 0.9234000, 0.6831000], [0.0000000, 0.9835000, 0.6005000, 1.1188512, 0.8317000, 0.3728000, 0.5527000, 1.0166000, 0.5114000, 0.7907000, 0.8415000, 0.8913000], [4.7801082, 3.4377076, 6.6569403, 1.4598938, 0.4560000, 0.9324000, 0.8055000, 0.1586000, 0.3715000, 1.3569381, 0.6370000, 0.5820000]]]]

Expected (Unparsed): [[[[0,0.0993,0.3571,0.4125,0.6709,0.9196,0.9206000000000001,1.2528000000000001,0.3241,0.8235,0.8019000000000001,0.6342],[0,0.5154,0.5426,0.893818,0.5415,0.6668,0.5517516,0.6985999999999999,0.7569,0.9310453999999999,1.3134000000000001,0.931],[0,0.4189,0.2564,1.18182529,0.1603,0.2312,0.84127855,1.0746,0.4138,1.10732914,0.6428,0.5762]],[[0,0.3608,0.8763,0.5317,0.7832,0.7619,0.9039,0.8038,0.9936,0.5161,0.9234,0.6831],[0,0.9835,0.6005,1.1188512400000001,0.8317,0.3728,0.5527,1.0166,0.5114,0.7907,0.8415,0.8913],[4.780108120718771,3.437707525847377,6.656940221876166,1.45989378,0.456,0.9324,0.8055,0.1586,0.3715,1.35693804,0.637,0.582]]]]

Actual:   [[[[0, 0.0993, 0.3571, 0.4125, 0.6709, 0.9196, 0.9206, 1.2528, 0.3241, 0.8235, 0.8019, 0.6342], [0, 0.5154, 0.5426, 0.8939, 0.5415, 0.6668, 0.5518, 0.6986, 0.7569, 0.9311, 1.3134, 0.931], [0, 0.4189, 0.2564, 1.1819, 0.1603, 0.2312, 0.8413, 1.0746, 0.4138, 1.1074, 0.6428, 0.5762]], [[0, 0.3608, 0.8763, 0.5317, 0.7832, 0.7619, 0.9039, 0.8038, 0.9936, 0.5161, 0.9234, 0.6831], [0, 0.9835, 0.6005, 1.1189, 0.8317, 0.3728, 0.5527, 1.0166, 0.5114, 0.7907, 0.8415, 0.8913], [4.7802, 3.4378, 6.657, 1.4599, 0.456, 0.9324, 0.8055, 0.1586, 0.3715, 1.357, 0.637, 0.582]]]]

Expected: [[[[0, 0.0993, 0.3571, 0.4125, 0.6709, 0.9196, 0.9207, 1.2529, 0.3241, 0.8235, 0.802, 0.6342], [0, 0.5154, 0.5426, 0.8939, 0.5415, 0.6668, 0.5518, 0.6986, 0.7569, 0.9311, 1.3135, 0.931], [0, 0.4189, 0.2564, 1.1819, 0.1603, 0.2312, 0.8413, 1.0746, 0.4138, 1.1074, 0.6428, 0.5762]], [[0, 0.3608, 0.8763, 0.5317, 0.7832, 0.7619, 0.9039, 0.8038, 0.9936, 0.5161, 0.9234, 0.6831], [0, 0.9835, 0.6005, 1.1189, 0.8317, 0.3728, 0.5527, 1.0166, 0.5114, 0.7907, 0.8415, 0.8913], [4.7802, 3.4378, 6.657, 1.4599, 0.456, 0.9324, 0.8055, 0.1586, 0.3715, 1.357, 0.637, 0.582]]]]