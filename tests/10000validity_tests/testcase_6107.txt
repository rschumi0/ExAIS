import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave69526 = tf.keras.layers.Input(shape=([1, 2, 1]))
in1Ave69526 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con55749 = tf.keras.layers.Input(shape=([3, 1]))
in0Lay88756 = tf.keras.layers.Input(shape=([4, 3]))

Ave69526 = keras.layers.Average(name = 'Ave69526', )([in0Ave69526,in1Ave69526])
Res70422 = keras.layers.Reshape((1, 2), name = 'Res70422', )(Ave69526)
PRe48955 = keras.layers.PReLU(name = 'PRe48955', )(Res70422)
Zer8220 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer8220', )(PRe48955)
Con55749 = keras.layers.Concatenate(axis=2, name = 'Con55749', )([Zer8220,in0Con55749])
Lay88756 = keras.layers.LayerNormalization(axis=2, epsilon=2.6188284407773494, name = 'Lay88756', )(in0Lay88756)
Loc4131 = keras.layers.LocallyConnected1D(3, (2),strides=(1), name = 'Loc4131', )(Lay88756)
Mul15608 = keras.layers.Multiply(name = 'Mul15608', )([Con55749,Loc4131])
Cro83875 = keras.layers.Cropping1D(cropping=((1, 0)), name = 'Cro83875', )(Mul15608)
model = tf.keras.models.Model(inputs=[in0Ave69526,in1Ave69526,in0Con55749,in0Lay88756], outputs=Cro83875)
w = model.get_layer('PRe48955').get_weights() 
w[0] = np.array([[0.5674, 0.3072]])
model.get_layer('PRe48955').set_weights(w) 
w = model.get_layer('Loc4131').get_weights() 
w[0] = np.array([[[0.5225, 0.401, 0.6219], [0.0628, 0.5419, 0.8372], [0.4517, 0.751, 0.0846], [0.4735, 0.228, 0.0272], [0.0329, 0.7629, 0.4025], [0.9868, 0.252, 0.2721]], [[0.0303, 0.6721, 0.3432], [0.3918, 0.8552, 0.5191], [0.4553, 0.8041, 0.254], [0.2856, 0.7066, 0.4731], [0.6216, 0.4017, 0.1461], [0.9088, 0.9186, 0.0518]], [[0.341, 0.4555, 0.5267], [0.1983, 0.6153, 0.4044], [0.2622, 0.1853, 0.682], [0.794, 0.381, 0.5248], [0.9174, 0.8688, 0.6775], [0.9596, 0.8021, 0.2997]]])
w[1] = np.array([[0, 0, 0], [0, 0, 0], [0, 0, 0]])
model.get_layer('Loc4131').set_weights(w) 
in0Ave69526 = tf.constant([[[[0.6761], [0.167]]]])
in1Ave69526 = tf.constant([[[[0.6354], [0.414]]]])
in0Con55749 = tf.constant([[[0.635], [0.3619], [0.2193]]])
in0Lay88756 = tf.constant([[[1.318, 1.8157, 1.4278], [1.5984, 1.5749, 1.0878], [1.1672, 1.7602, 1.4036], [1.0067, 1.115, 1.1336]]])
print (np.array2string(model.predict([in0Ave69526,in1Ave69526,in0Con55749,in0Lay88756],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Cro83875.png')

LAve69526 = average_layer([[[[[0.6761], [0.167]]]], [[[[0.6354], [0.414]]]]], Ave69526), 
LRes70422 = reshape_layer(Ave69526, [1, 2], Res70422), 
LPRe48955 = prelu_layer(Res70422, [[0.5674, 0.3072]], PRe48955), 
LZer8220 = zero_padding1D_layer(PRe48955, 2, 0, Zer8220), 
LCon55749 = concatenate_layer([Zer8220,[[[0.635], [0.3619], [0.2193]]]], 2, Con55749), 
LLay88756 = layer_normalization_layer([[[1.318, 1.8157, 1.4278], [1.5984, 1.5749, 1.0878], [1.1672, 1.7602, 1.4036], [1.0067, 1.115, 1.1336]]], 2, 2.6188284407773494, Lay88756), 
LLoc4131 = locally_connected1D_layer(Lay88756, 2,[[[0.5225, 0.401, 0.6219], [0.0628, 0.5419, 0.8372], [0.4517, 0.751, 0.0846], [0.4735, 0.228, 0.0272], [0.0329, 0.7629, 0.4025], [0.9868, 0.252, 0.2721]], [[0.0303, 0.6721, 0.3432], [0.3918, 0.8552, 0.5191], [0.4553, 0.8041, 0.254], [0.2856, 0.7066, 0.4731], [0.6216, 0.4017, 0.1461], [0.9088, 0.9186, 0.0518]], [[0.341, 0.4555, 0.5267], [0.1983, 0.6153, 0.4044], [0.2622, 0.1853, 0.682], [0.794, 0.381, 0.5248], [0.9174, 0.8688, 0.6775], [0.9596, 0.8021, 0.2997]]],[[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, Loc4131), 
LMul15608 = multiply_layer([Con55749,Loc4131], Mul15608), 
LCro83875 = cropping1D_layer(Mul15608, 1, 0, Cro83875), 
exec_layers([LAve69526,LRes70422,LPRe48955,LZer8220,LCon55749,LLay88756,LLoc4131,LMul15608,LCro83875],["Ave69526","Res70422","PRe48955","Zer8220","Con55749","Lay88756","Loc4131","Mul15608","Cro83875"],Cro83875,"Cro83875")

Actual (Unparsed): [[[-0.0000000, -0.0000000, -0.0065758], [-0.0120872, 0.0171812, -0.0068816]]]

Expected (Unparsed): [[[-0.0,-0.0,-0.006575824392356492],[-0.01208722201289836,0.017181199141583788,-0.006881554960106026]]]

Actual:   [[[-0, -0, -0.0065], [-0.012, 0.0172, -0.0068]]]

Expected: [[[-0, -0, -0.0065], [-0.012, 0.0172, -0.0068]]]