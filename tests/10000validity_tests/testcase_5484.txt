import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sof42429 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con71837 = tf.keras.layers.Input(shape=([4, 5, 3, 2]))
in0Per96156 = tf.keras.layers.Input(shape=([1, 4]))
in0Con29216 = tf.keras.layers.Input(shape=([4, 5, 3, 2]))
in0Sub90385 = tf.keras.layers.Input(shape=([2, 3, 2, 3]))
in1Sub90385 = tf.keras.layers.Input(shape=([2, 3, 2, 3]))

Sof42429 = keras.layers.Softmax(axis=1, name = 'Sof42429', input_shape=(2, 2, 2))(in0Sof42429)
Res39987 = keras.layers.Reshape((2, 2, 2, 1), name = 'Res39987', )(Sof42429)
Zer91994 = keras.layers.ZeroPadding3D(padding=((2, 0), (3, 0), (1, 0)), name = 'Zer91994', )(Res39987)
Con71837 = keras.layers.Concatenate(axis=4, name = 'Con71837', )([Zer91994,in0Con71837])
Per96156 = keras.layers.Permute((2,1), name = 'Per96156',)(in0Per96156)
Res46329 = keras.layers.Reshape((4, 1, 1), name = 'Res46329', )(Per96156)
Res55206 = keras.layers.Reshape((4, 1, 1, 1), name = 'Res55206', )(Res46329)
Zer31326 = keras.layers.ZeroPadding3D(padding=((0, 0), (4, 0), (2, 0)), name = 'Zer31326', )(Res55206)
Con29216 = keras.layers.Concatenate(axis=4, name = 'Con29216', )([Zer31326,in0Con29216])
Sub90385 = keras.layers.Subtract(name = 'Sub90385', )([in0Sub90385,in1Sub90385])
Zer28607 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (1, 0)), name = 'Zer28607', )(Sub90385)
Mul10172 = keras.layers.Multiply(name = 'Mul10172', )([Con29216,Zer28607])
Mul53947 = keras.layers.Multiply(name = 'Mul53947', )([Con71837,Mul10172])
model = tf.keras.models.Model(inputs=[in0Sof42429,in0Con71837,in0Per96156,in0Con29216,in0Sub90385,in1Sub90385], outputs=Mul53947)
in0Sof42429 = tf.constant([[[[0.3621, 0.847], [0.154, 0.7117]], [[0.7473, 0.3717], [0.4961, 0.4533]]]])
in0Con71837 = tf.constant([[[[[0.1875, 0.4725], [0.5471, 0.6836], [0.5605, 0.9696]], [[0.3184, 0.6069], [0.6375, 0.7133], [0.7812, 0.2259]], [[0.9074, 0.4014], [0.1952, 0.1852], [0.6713, 0.049]], [[0.2879, 0.0317], [0.2201, 0.1875], [0.163, 0.6354]], [[0.5712, 0.1546], [0.858, 0.247], [0.0152, 0.8066]]], [[[0.5424, 0.7562], [0.9665, 0.0165], [0.2342, 0.0093]], [[0.3835, 0.1358], [0.8256, 0.626], [0.3337, 0.1903]], [[0.156, 0.6147], [0.1123, 0.9582], [0.8473, 0.2286]], [[0.6939, 0.2366], [0.6267, 0.9245], [0.194, 0.538]], [[0.8992, 0.9944], [0.4497, 0.181], [0.4075, 0.4227]]], [[[0.7891, 0.2393], [0.9158, 0.789], [0.5532, 0.0956]], [[0.9902, 0.5842], [0.9589, 0.4087], [0.1116, 0.1378]], [[0.4453, 0.1512], [0.5554, 0.4632], [0.7349, 0.9953]], [[0.6974, 0.7195], [0.4585, 0.7364], [0.6671, 0.6633]], [[0.3406, 0.6308], [0.5555, 0.4142], [0.6254, 0.4917]]], [[[0.7106, 0.0979], [0.6334, 0.1427], [0.0021, 0.4419]], [[0.0824, 0.3567], [0.3242, 0.2024], [0.0815, 0.7225]], [[0.0163, 0.3754], [0.5117, 0.9778], [0.3324, 0.5076]], [[0.8434, 0.2212], [0.5641, 0.0645], [0.3118, 0.0734]], [[0.9312, 0.7345], [0.7655, 0.2972], [0.897, 0.7541]]]]])
in0Per96156 = tf.constant([[[1.8227, 1.7464, 1.0034, 1.1713]]])
in0Con29216 = tf.constant([[[[[0.8452, 0.2461], [0.5085, 0.8119], [0.4339, 0.1806]], [[0.2045, 0.496], [0.2271, 0.1208], [0.2337, 0.4776]], [[0.7296, 0.7083], [0.0665, 0.5629], [0.2452, 0.2017]], [[0.2454, 0.2507], [0.93, 0.7934], [0.7834, 0.1059]], [[0.7265, 0.9275], [0.4532, 0.2714], [0.4882, 0.1029]]], [[[0.9539, 0.2718], [0.7196, 0.5517], [0.7048, 0.434]], [[0.0098, 0.8725], [0.8021, 0.7028], [0.4149, 0.1681]], [[0.4989, 0.3658], [0.7592, 0.4875], [0.419, 0.2208]], [[0.0665, 0.4041], [0.6, 0.0117], [0.108, 0.3766]], [[0.3766, 0.5424], [0.3587, 0.1322], [0.0593, 0.7379]]], [[[0.4917, 0.6896], [0.3439, 0.0599], [0.907, 0.7945]], [[0.3947, 0.1128], [0.6913, 0.4811], [0.5826, 0.9746]], [[0.8367, 0.1898], [0.9351, 0.776], [0.5059, 0.3754]], [[0.4525, 0.3166], [0.6287, 0.8203], [0.5821, 0.0549]], [[0.1329, 0.9318], [0.3057, 0.6367], [0.6758, 0.1456]]], [[[0.4927, 0.2405], [0.8223, 0.1864], [0.3971, 0.405]], [[0.2392, 0.3412], [0.438, 0.681], [0.6213, 0.0902]], [[0.6912, 0.4021], [0.7474, 0.4104], [0.8407, 0.1038]], [[0.2756, 0.818], [0.6942, 0.6378], [0.6297, 0.7458]], [[0.7459, 0.8268], [0.6046, 0.17], [0.6897, 0.5819]]]]])
in0Sub90385 = tf.constant([[[[[0.0097, 0.7857, 0.5488], [0.3119, 0.8219, 0.9539]], [[0.4081, 0.7879, 0.3082], [0.4896, 0.8963, 0.1297]], [[0.0676, 0.7612, 0.6289], [0.3244, 0.2186, 0.3343]]], [[[0.1925, 0.963, 0.7645], [0.5789, 0.7029, 0.9243]], [[0.3818, 0.7684, 0.4613], [0.7159, 0.7769, 0.5291]], [[0.6713, 0.7672, 0.4069], [0.1897, 0.9764, 0.421]]]]])
in1Sub90385 = tf.constant([[[[[0.5392, 0.0479, 0.3931], [0.1081, 0.3378, 0.8227]], [[0.0718, 0.2032, 0.9073], [0.5942, 0.198, 0.3617]], [[0.999, 0.345, 0.2632], [0.7121, 0.3907, 0.8123]]], [[[0.8824, 0.1425, 0.7871], [0.7361, 0.3076, 0.0592]], [[0.4575, 0.7466, 0.8033], [0.4195, 0.725, 0.07]], [[0.0816, 0.5434, 0.854], [0.9559, 0.0729, 0.1968]]]]])
print (np.array2string(model.predict([in0Sof42429,in0Con71837,in0Per96156,in0Con29216,in0Sub90385,in1Sub90385],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul53947.png')

LSof42429 = softmax_layer([[[[0.3621, 0.847], [0.154, 0.7117]], [[0.7473, 0.3717], [0.4961, 0.4533]]]], 1, Sof42429), 
LRes39987 = reshape_layer(Sof42429, [2, 2, 2, 1], Res39987), 
LZer91994 = zero_padding3D_layer(Res39987, 2, 0, 3, 0, 1, 0, Zer91994), 
LCon71837 = concatenate_layer([Zer91994,[[[[[0.1875, 0.4725], [0.5471, 0.6836], [0.5605, 0.9696]], [[0.3184, 0.6069], [0.6375, 0.7133], [0.7812, 0.2259]], [[0.9074, 0.4014], [0.1952, 0.1852], [0.6713, 0.049]], [[0.2879, 0.0317], [0.2201, 0.1875], [0.163, 0.6354]], [[0.5712, 0.1546], [0.858, 0.247], [0.0152, 0.8066]]], [[[0.5424, 0.7562], [0.9665, 0.0165], [0.2342, 0.0093]], [[0.3835, 0.1358], [0.8256, 0.626], [0.3337, 0.1903]], [[0.156, 0.6147], [0.1123, 0.9582], [0.8473, 0.2286]], [[0.6939, 0.2366], [0.6267, 0.9245], [0.194, 0.538]], [[0.8992, 0.9944], [0.4497, 0.181], [0.4075, 0.4227]]], [[[0.7891, 0.2393], [0.9158, 0.789], [0.5532, 0.0956]], [[0.9902, 0.5842], [0.9589, 0.4087], [0.1116, 0.1378]], [[0.4453, 0.1512], [0.5554, 0.4632], [0.7349, 0.9953]], [[0.6974, 0.7195], [0.4585, 0.7364], [0.6671, 0.6633]], [[0.3406, 0.6308], [0.5555, 0.4142], [0.6254, 0.4917]]], [[[0.7106, 0.0979], [0.6334, 0.1427], [0.0021, 0.4419]], [[0.0824, 0.3567], [0.3242, 0.2024], [0.0815, 0.7225]], [[0.0163, 0.3754], [0.5117, 0.9778], [0.3324, 0.5076]], [[0.8434, 0.2212], [0.5641, 0.0645], [0.3118, 0.0734]], [[0.9312, 0.7345], [0.7655, 0.2972], [0.897, 0.7541]]]]]], 4, Con71837), 
LPer96156 = permute_layer([[[1.8227, 1.7464, 1.0034, 1.1713]]], 2,1, Per96156), 
LRes46329 = reshape_layer(Per96156, [4, 1, 1], Res46329), 
LRes55206 = reshape_layer(Res46329, [4, 1, 1, 1], Res55206), 
LZer31326 = zero_padding3D_layer(Res55206, 0, 0, 4, 0, 2, 0, Zer31326), 
LCon29216 = concatenate_layer([Zer31326,[[[[[0.8452, 0.2461], [0.5085, 0.8119], [0.4339, 0.1806]], [[0.2045, 0.496], [0.2271, 0.1208], [0.2337, 0.4776]], [[0.7296, 0.7083], [0.0665, 0.5629], [0.2452, 0.2017]], [[0.2454, 0.2507], [0.93, 0.7934], [0.7834, 0.1059]], [[0.7265, 0.9275], [0.4532, 0.2714], [0.4882, 0.1029]]], [[[0.9539, 0.2718], [0.7196, 0.5517], [0.7048, 0.434]], [[0.0098, 0.8725], [0.8021, 0.7028], [0.4149, 0.1681]], [[0.4989, 0.3658], [0.7592, 0.4875], [0.419, 0.2208]], [[0.0665, 0.4041], [0.6, 0.0117], [0.108, 0.3766]], [[0.3766, 0.5424], [0.3587, 0.1322], [0.0593, 0.7379]]], [[[0.4917, 0.6896], [0.3439, 0.0599], [0.907, 0.7945]], [[0.3947, 0.1128], [0.6913, 0.4811], [0.5826, 0.9746]], [[0.8367, 0.1898], [0.9351, 0.776], [0.5059, 0.3754]], [[0.4525, 0.3166], [0.6287, 0.8203], [0.5821, 0.0549]], [[0.1329, 0.9318], [0.3057, 0.6367], [0.6758, 0.1456]]], [[[0.4927, 0.2405], [0.8223, 0.1864], [0.3971, 0.405]], [[0.2392, 0.3412], [0.438, 0.681], [0.6213, 0.0902]], [[0.6912, 0.4021], [0.7474, 0.4104], [0.8407, 0.1038]], [[0.2756, 0.818], [0.6942, 0.6378], [0.6297, 0.7458]], [[0.7459, 0.8268], [0.6046, 0.17], [0.6897, 0.5819]]]]]], 4, Con29216), 
LSub90385 = subtract_layer([[[[[0.0097, 0.7857, 0.5488], [0.3119, 0.8219, 0.9539]], [[0.4081, 0.7879, 0.3082], [0.4896, 0.8963, 0.1297]], [[0.0676, 0.7612, 0.6289], [0.3244, 0.2186, 0.3343]]], [[[0.1925, 0.963, 0.7645], [0.5789, 0.7029, 0.9243]], [[0.3818, 0.7684, 0.4613], [0.7159, 0.7769, 0.5291]], [[0.6713, 0.7672, 0.4069], [0.1897, 0.9764, 0.421]]]]], [[[[[0.5392, 0.0479, 0.3931], [0.1081, 0.3378, 0.8227]], [[0.0718, 0.2032, 0.9073], [0.5942, 0.198, 0.3617]], [[0.999, 0.345, 0.2632], [0.7121, 0.3907, 0.8123]]], [[[0.8824, 0.1425, 0.7871], [0.7361, 0.3076, 0.0592]], [[0.4575, 0.7466, 0.8033], [0.4195, 0.725, 0.07]], [[0.0816, 0.5434, 0.854], [0.9559, 0.0729, 0.1968]]]]], Sub90385), 
LZer28607 = zero_padding3D_layer(Sub90385, 2, 0, 2, 0, 1, 0, Zer28607), 
LMul10172 = multiply_layer([Con29216,Zer28607], Mul10172), 
LMul53947 = multiply_layer([Con71837,Mul10172], Mul53947), 
exec_layers([LSof42429,LRes39987,LZer91994,LCon71837,LPer96156,LRes46329,LRes55206,LZer31326,LCon29216,LSub90385,LZer28607,LMul10172,LMul53947],["Sof42429","Res39987","Zer91994","Con71837","Per96156","Res46329","Res55206","Zer31326","Con29216","Sub90385","Zer28607","Mul10172","Mul53947"],Mul53947,"Mul53947")

Actual (Unparsed): [[[[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.3831798, 0.0559653], [0.0000000, 0.1799816, 0.0490210]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.1685450, -0.3618977], [-0.0000000, 0.2711631, -0.0084483]], [[0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0706776, 0.0964428], [-0.2195008, -0.0727373, -0.0342207]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.3137958, -0.0090691], [-0.0000000, 0.1104661, 0.0455812]], [[0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0085369, -0.0140692], [0.0000000, 0.0101901, 0.0251319]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.1035794, -0.0225893], [-0.3910702, 0.5589602, 0.0983814]]]]]

Expected (Unparsed): [[[[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0.0,0.0,0.0]]],[[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0.0,0.0,0.0]]],[[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[-0.0,0.383179779612,0.055965306239999985],[0.0,0.179981559031,0.049020993343999994]],[[0,0.0,0.0],[0.0,0.168545008065,-0.361897689972],[-0.0,0.27116309485299994,-0.00844831944]],[[0,0.0,0.0],[-0.0,0.07067756487000001,0.09644282089800002],[-0.2195007599500026,-0.07273725957199999,-0.03422074656000001]]],[[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[-0.0,0.31379577789,-0.009069134112000025],[-0.0,0.11046606320399999,0.045581150088000004]],[[0,0.0,0.0],[-0.0,0.008536841195999973,-0.014069230200000003],[0.0,0.010190069874000013,0.025131923652000003]],[[0,0.0,0.0],[0.0,0.10357940694000001,-0.0225892804],[-0.3910702034411743,0.55896012315,0.09838137911799998]]]]]

Actual:   [[[[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [-0, 0.3832, 0.056], [0, 0.18, 0.0491]], [[0, 0, 0], [0, 0.1686, -0.3618], [-0, 0.2712, -0.0084]], [[0, 0, 0], [-0, 0.0707, 0.0965], [-0.2195, -0.0727, -0.0342]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [-0, 0.3138, -0.009], [-0, 0.1105, 0.0456]], [[0, 0, 0], [-0, 0.0086, -0.014], [0, 0.0102, 0.0252]], [[0, 0, 0], [0, 0.1036, -0.0225], [-0.391, 0.559, 0.0984]]]]]

Expected: [[[[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [-0, 0.3832, 0.056], [0, 0.18, 0.0491]], [[0, 0, 0], [0, 0.1686, -0.3618], [-0, 0.2712, -0.0084]], [[0, 0, 0], [-0, 0.0707, 0.0965], [-0.2195, -0.0727, -0.0342]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [-0, 0.3138, -0.009], [-0, 0.1105, 0.0456]], [[0, 0, 0], [-0, 0.0086, -0.014], [0, 0.0102, 0.0252]], [[0, 0, 0], [0, 0.1036, -0.0225], [-0.391, 0.559, 0.0984]]]]]