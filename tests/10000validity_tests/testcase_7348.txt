import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sof53040 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Sub90670 = tf.keras.layers.Input(shape=([2, 2, 3]))
in1Sub90670 = tf.keras.layers.Input(shape=([2, 2, 3]))
in0Con11785 = tf.keras.layers.Input(shape=([2, 6, 1]))
in0Max41957 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Max41957 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con57312 = tf.keras.layers.Input(shape=([2, 6, 2]))

Sof53040 = keras.layers.Softmax(axis=1, name = 'Sof53040', input_shape=(1, 1, 2))(in0Sof53040)
Res38225 = keras.layers.Reshape((1, 1, 2, 1), name = 'Res38225', )(Sof53040)
Up_96859 = keras.layers.UpSampling3D(size=(1, 2, 2), name = 'Up_96859', )(Res38225)
Res82173 = keras.layers.Reshape((1, 2, 4), name = 'Res82173', )(Up_96859)
Zer46931 = keras.layers.ZeroPadding2D(padding=((1, 0), (4, 0)), name = 'Zer46931', )(Res82173)
Sub90670 = keras.layers.Subtract(name = 'Sub90670', )([in0Sub90670,in1Sub90670])
Res94876 = keras.layers.Reshape((2, 6), name = 'Res94876', )(Sub90670)
Max14857 = keras.layers.MaxPool1D(pool_size=(1), name = 'Max14857', )(Res94876)
Res27091 = keras.layers.Reshape((2, 6, 1), name = 'Res27091', )(Max14857)
Con11785 = keras.layers.Concatenate(axis=3, name = 'Con11785', )([Res27091,in0Con11785])
Max41957 = keras.layers.Maximum(name = 'Max41957', )([in0Max41957,in1Max41957])
Zer98187 = keras.layers.ZeroPadding2D(padding=((0, 0), (4, 0)), name = 'Zer98187', )(Max41957)
Sub84994 = keras.layers.Subtract(name = 'Sub84994', )([Con11785,Zer98187])
Con57312 = keras.layers.Concatenate(axis=3, name = 'Con57312', )([Sub84994,in0Con57312])
Mul50760 = keras.layers.Multiply(name = 'Mul50760', )([Zer46931,Con57312])
model = tf.keras.models.Model(inputs=[in0Sof53040,in0Sub90670,in1Sub90670,in0Con11785,in0Max41957,in1Max41957,in0Con57312], outputs=Mul50760)
in0Sof53040 = tf.constant([[[[0.0922, 0.7524]]]])
in0Sub90670 = tf.constant([[[[0.8152, 0.8722, 0.2228], [0.9471, 0.8894, 0.2066]], [[0.9538, 0.1314, 0.2261], [0.8261, 0.1894, 0.299]]]])
in1Sub90670 = tf.constant([[[[0.3231, 0.473, 0.6352], [0.5982, 0.4674, 0.1741]], [[0.184, 0.9834, 0.8463], [0.9217, 0.2219, 0.848]]]])
in0Con11785 = tf.constant([[[[0.0888], [0.2441], [0.0924], [0.8318], [0.4532], [0.9111]], [[0.9125], [0.303], [0.2758], [0.4934], [0.6595], [0.0887]]]])
in0Max41957 = tf.constant([[[[0.711, 0.1106], [0.9543, 0.0109]], [[0.9155, 0.5797], [0.2122, 0.3555]]]])
in1Max41957 = tf.constant([[[[0.9652, 0.6094], [0.7098, 0.7524]], [[0.172, 0.6377], [0.3931, 0.6375]]]])
in0Con57312 = tf.constant([[[[0.8872, 0.4733], [0.0379, 0.8985], [0.2125, 0.243], [0.5038, 0.1016], [0.647, 0.6228], [0.2455, 0.0008]], [[0.6204, 0.38], [0.7563, 0.3936], [0.168, 0.2215], [0.1934, 0.8139], [0.045, 0.4513], [0.2882, 0.4986]]]])
print (np.array2string(model.predict([in0Sof53040,in0Sub90670,in1Sub90670,in0Con11785,in0Max41957,in1Max41957,in0Con57312],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul50760.png')

LSof53040 = softmax_layer([[[[0.0922, 0.7524]]]], 1, Sof53040), 
LRes38225 = reshape_layer(Sof53040, [1, 1, 2, 1], Res38225), 
LUp_96859 = up_sampling3D_layer(Res38225, 1, 2, 2, Up_96859), 
LRes82173 = reshape_layer(Up_96859, [1, 2, 4], Res82173), 
LZer46931 = zero_padding2D_layer(Res82173, 1, 0, 4, 0, Zer46931), 
LSub90670 = subtract_layer([[[[0.8152, 0.8722, 0.2228], [0.9471, 0.8894, 0.2066]], [[0.9538, 0.1314, 0.2261], [0.8261, 0.1894, 0.299]]]], [[[[0.3231, 0.473, 0.6352], [0.5982, 0.4674, 0.1741]], [[0.184, 0.9834, 0.8463], [0.9217, 0.2219, 0.848]]]], Sub90670), 
LRes94876 = reshape_layer(Sub90670, [2, 6], Res94876), 
LMax14857 = max_pool1D_layer(Res94876, 1, Max14857), 
LRes27091 = reshape_layer(Max14857, [2, 6, 1], Res27091), 
LCon11785 = concatenate_layer([Res27091,[[[[0.0888], [0.2441], [0.0924], [0.8318], [0.4532], [0.9111]], [[0.9125], [0.303], [0.2758], [0.4934], [0.6595], [0.0887]]]]], 3, Con11785), 
LMax41957 = maximum_layer([[[[[0.711, 0.1106], [0.9543, 0.0109]], [[0.9155, 0.5797], [0.2122, 0.3555]]]], [[[[0.9652, 0.6094], [0.7098, 0.7524]], [[0.172, 0.6377], [0.3931, 0.6375]]]]], Max41957), 
LZer98187 = zero_padding2D_layer(Max41957, 0, 0, 4, 0, Zer98187), 
LSub84994 = subtract_layer(Con11785,Zer98187, Sub84994), 
LCon57312 = concatenate_layer([Sub84994,[[[[0.8872, 0.4733], [0.0379, 0.8985], [0.2125, 0.243], [0.5038, 0.1016], [0.647, 0.6228], [0.2455, 0.0008]], [[0.6204, 0.38], [0.7563, 0.3936], [0.168, 0.2215], [0.1934, 0.8139], [0.045, 0.4513], [0.2882, 0.4986]]]]], 3, Con57312), 
LMul50760 = multiply_layer([Zer46931,Con57312], Mul50760), 
exec_layers([LSof53040,LRes38225,LUp_96859,LRes82173,LZer46931,LSub90670,LRes94876,LMax14857,LRes27091,LCon11785,LMax41957,LZer98187,LSub84994,LCon57312,LMul50760],["Sof53040","Res38225","Up_96859","Res82173","Zer46931","Sub90670","Res94876","Max14857","Res27091","Con11785","Max41957","Zer98187","Sub84994","Con57312","Mul50760"],Mul50760,"Mul50760")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, -0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.9480000, 0.0218000, 0.0450000, 0.4513000], [-0.9421000, -0.5488000, 0.2882000, 0.4986000]]]]

Expected (Unparsed): [[[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[-0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[-0.0,-0.0,0.0,0.0],[-0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[-0.0,0.0,0.0,0.0],[-0.0,0.0,0.0,0.0],[-0.0,0.0,0.0,0.0],[-0.948,0.02179999999999993,0.045,0.4513],[-0.9420999999999999,-0.5488,0.2882,0.4986]]]]

Actual:   [[[[0, 0, 0, 0], [0, 0, 0, 0], [-0, 0, 0, 0], [0, 0, 0, 0], [-0, -0, 0, 0], [-0, 0, 0, 0]], [[0, 0, 0, 0], [-0, 0, 0, 0], [-0, 0, 0, 0], [-0, 0, 0, 0], [-0.948, 0.0218, 0.045, 0.4513], [-0.9421, -0.5488, 0.2882, 0.4986]]]]

Expected: [[[[0, 0, 0, 0], [0, 0, 0, 0], [-0, 0, 0, 0], [0, 0, 0, 0], [-0, -0, 0, 0], [-0, 0, 0, 0]], [[0, 0, 0, 0], [-0, 0, 0, 0], [-0, 0, 0, 0], [-0, 0, 0, 0], [-0.948, 0.0218, 0.045, 0.4513], [-0.942, -0.5488, 0.2882, 0.4986]]]]