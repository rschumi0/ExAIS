import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Den36068 = tf.keras.layers.Input(shape=([2, 4]))

Den36068 = keras.layers.Dense(2,name = 'Den36068', )(in0Den36068)
Glo11437 = keras.layers.GlobalAveragePooling1D(name = 'Glo11437', )(Den36068)
Res40516 = keras.layers.Reshape((2, 1), name = 'Res40516', )(Glo11437)
Res70841 = keras.layers.Reshape((2, 1, 1), name = 'Res70841', )(Res40516)
Res77090 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res77090', )(Res70841)
Con19399 = keras.layers.Conv3DTranspose(3, (2, 1, 1),strides=(2, 5, 1), padding='same', name = 'Con19399', )(Res77090)
Res61713 = keras.layers.Reshape((4, 5, 3), name = 'Res61713', )(Con19399)
Res23987 = keras.layers.Reshape((4, 15), name = 'Res23987', )(Res61713)
Zer85617 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer85617', )(Res23987)
Thr76349 = keras.layers.ThresholdedReLU(theta=4.325201664688257, name = 'Thr76349', )(Zer85617)
model = tf.keras.models.Model(inputs=[in0Den36068], outputs=Thr76349)
w = model.get_layer('Den36068').get_weights() 
w[0] = np.array([[0.8086, 0.6928], [0.9551, 0.811], [0.9767, 0.4534], [0.1794, 0.2212]])
w[1] = np.array([0.9395, 0.1134])
model.get_layer('Den36068').set_weights(w) 
w = model.get_layer('Con19399').get_weights() 
w[0] = np.array([[[[[0.5357], [0.7648], [0.3565]]]], [[[[0.4636], [0.2366], [0.1741]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con19399').set_weights(w) 
in0Den36068 = tf.constant([[[0.1726, 0.756, 0.9269, 0.6181], [0.2747, 0.876, 0.7739, 0.3625]]])
print (np.array2string(model.predict([in0Den36068],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Thr76349.png')

LDen36068 = dense_layer([[[0.1726, 0.756, 0.9269, 0.6181], [0.2747, 0.876, 0.7739, 0.3625]]], [[0.8086, 0.6928], [0.9551, 0.811], [0.9767, 0.4534], [0.1794, 0.2212]],[0.9395, 0.1134], Den36068), 
LGlo11437 = global_average_pooling1D_layer(Den36068, Glo11437), 
LRes40516 = reshape_layer(Glo11437, [2, 1], Res40516), 
LRes70841 = reshape_layer(Res40516, [2, 1, 1], Res70841), 
LRes77090 = reshape_layer(Res70841, [2, 1, 1, 1], Res77090), 
LCon19399 = conv3D_transpose_layer(Res77090, 2, 1, 1,[[[[[0.5357], [0.7648], [0.3565]]]], [[[[0.4636], [0.2366], [0.1741]]]]],[0, 0, 0], 2, 5, 1, true, Con19399), 
LRes61713 = reshape_layer(Con19399, [4, 5, 3], Res61713), 
LRes23987 = reshape_layer(Res61713, [4, 15], Res23987), 
LZer85617 = zero_padding1D_layer(Res23987, 1, 1, Zer85617), 
LThr76349 = thresholded_relu_layer(Zer85617, 4.325201664688257, Thr76349), 
exec_layers([LDen36068,LGlo11437,LRes40516,LRes70841,LRes77090,LCon19399,LRes61713,LRes23987,LZer85617,LThr76349],["Den36068","Glo11437","Res40516","Res70841","Res77090","Con19399","Res61713","Res23987","Zer85617","Thr76349"],Thr76349,"Thr76349")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]]

Actual:   [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]

Expected: [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]