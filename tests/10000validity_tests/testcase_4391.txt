import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max25243 = tf.keras.layers.Input(shape=([2, 2]))
in1Max25243 = tf.keras.layers.Input(shape=([2, 2]))
in0Con66867 = tf.keras.layers.Input(shape=([6, 7]))
in0Den10001 = tf.keras.layers.Input(shape=([3, 3, 2]))

Max25243 = keras.layers.Maximum(name = 'Max25243', )([in0Max25243,in1Max25243])
Res83451 = keras.layers.Reshape((2, 2, 1), name = 'Res83451', )(Max25243)
Glo42166 = keras.layers.GlobalAveragePooling2D(name = 'Glo42166', )(Res83451)
Res32503 = keras.layers.Reshape((1, 1), name = 'Res32503', )(Glo42166)
Res79318 = keras.layers.Reshape((1, 1, 1), name = 'Res79318', )(Res32503)
Res72917 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res72917', )(Res79318)
Con35014 = keras.layers.Conv3DTranspose(2, (1, 1, 1),strides=(1, 1, 1), padding='same', name = 'Con35014', )(Res72917)
Res37604 = keras.layers.Reshape((1, 1, 2), name = 'Res37604', )(Con35014)
Res72114 = keras.layers.Reshape((1, 2), name = 'Res72114', )(Res37604)
Zer86673 = keras.layers.ZeroPadding1D(padding=((5, 0)), name = 'Zer86673', )(Res72114)
Con66867 = keras.layers.Concatenate(axis=2, name = 'Con66867', )([Zer86673,in0Con66867])
Den10001 = keras.layers.Dense(3,name = 'Den10001', )(in0Den10001)
Res46756 = keras.layers.Reshape((3, 9), name = 'Res46756', )(Den10001)
Up_21149 = keras.layers.UpSampling1D(size=(2), name = 'Up_21149', )(Res46756)
Mul48052 = keras.layers.Multiply(name = 'Mul48052', )([Con66867,Up_21149])
model = tf.keras.models.Model(inputs=[in0Max25243,in1Max25243,in0Con66867,in0Den10001], outputs=Mul48052)
w = model.get_layer('Con35014').get_weights() 
w[0] = np.array([[[[[0.3959], [0.3179]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con35014').set_weights(w) 
w = model.get_layer('Den10001').get_weights() 
w[0] = np.array([[0.4553, 0.6554, 0.8734], [0.5619, 0.2217, 0.3435]])
w[1] = np.array([0.8312, 0.6716, 0.3715])
model.get_layer('Den10001').set_weights(w) 
in0Max25243 = tf.constant([[[0.1631, 0.5409], [0.1548, 0.8655]]])
in1Max25243 = tf.constant([[[0.712, 0.6939], [0.7542, 0.9141]]])
in0Con66867 = tf.constant([[[0.2389, 0.9554, 0.6347, 0.9588, 0.2276, 0.74, 0.0106], [0.0482, 0.8032, 0.3597, 0.7885, 0.9375, 0.8912, 0.4025], [0.9105, 0.6557, 0.0151, 0.5379, 0.6273, 0.3961, 0.6098], [0.0948, 0.5452, 0.7099, 0.2917, 0.5519, 0.7125, 0.5687], [0.8184, 0.9773, 0.616, 0.9872, 0.8147, 0.1447, 0.5645], [0.4819, 0.4655, 0.786, 0.8324, 0.7641, 0.2879, 0.1949]]])
in0Den10001 = tf.constant([[[[0.5203, 0.7178], [0.119, 0.6786], [0.4981, 0.3496]], [[0.8706, 0.3816], [0.4446, 0.6886], [0.392, 0.4879]], [[0.8577, 0.046], [0.8663, 0.0984], [0.7571, 0.3997]]]])
print (np.array2string(model.predict([in0Max25243,in1Max25243,in0Con66867,in0Den10001],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul48052.png')

LMax25243 = maximum_layer([[[[0.1631, 0.5409], [0.1548, 0.8655]]], [[[0.712, 0.6939], [0.7542, 0.9141]]]], Max25243), 
LRes83451 = reshape_layer(Max25243, [2, 2, 1], Res83451), 
LGlo42166 = global_average_pooling2D_layer(Res83451, Glo42166), 
LRes32503 = reshape_layer(Glo42166, [1, 1], Res32503), 
LRes79318 = reshape_layer(Res32503, [1, 1, 1], Res79318), 
LRes72917 = reshape_layer(Res79318, [1, 1, 1, 1], Res72917), 
LCon35014 = conv3D_transpose_layer(Res72917, 1, 1, 1,[[[[[0.3959], [0.3179]]]]],[0, 0], 1, 1, 1, true, Con35014), 
LRes37604 = reshape_layer(Con35014, [1, 1, 2], Res37604), 
LRes72114 = reshape_layer(Res37604, [1, 2], Res72114), 
LZer86673 = zero_padding1D_layer(Res72114, 5, 0, Zer86673), 
LCon66867 = concatenate_layer([Zer86673,[[[0.2389, 0.9554, 0.6347, 0.9588, 0.2276, 0.74, 0.0106], [0.0482, 0.8032, 0.3597, 0.7885, 0.9375, 0.8912, 0.4025], [0.9105, 0.6557, 0.0151, 0.5379, 0.6273, 0.3961, 0.6098], [0.0948, 0.5452, 0.7099, 0.2917, 0.5519, 0.7125, 0.5687], [0.8184, 0.9773, 0.616, 0.9872, 0.8147, 0.1447, 0.5645], [0.4819, 0.4655, 0.786, 0.8324, 0.7641, 0.2879, 0.1949]]]], 2, Con66867), 
LDen10001 = dense_layer([[[[0.5203, 0.7178], [0.119, 0.6786], [0.4981, 0.3496]], [[0.8706, 0.3816], [0.4446, 0.6886], [0.392, 0.4879]], [[0.8577, 0.046], [0.8663, 0.0984], [0.7571, 0.3997]]]], [[0.4553, 0.6554, 0.8734], [0.5619, 0.2217, 0.3435]],[0.8312, 0.6716, 0.3715], Den10001), 
LRes46756 = reshape_layer(Den10001, [3, 9], Res46756), 
LUp_21149 = up_sampling1D_layer(Res46756, 2, Up_21149), 
LMul48052 = multiply_layer([Con66867,Up_21149], Mul48052), 
exec_layers([LMax25243,LRes83451,LGlo42166,LRes32503,LRes79318,LRes72917,LCon35014,LRes37604,LRes72114,LZer86673,LCon66867,LDen10001,LRes46756,LUp_21149,LMul48052],["Max25243","Res83451","Glo42166","Res32503","Res79318","Res72917","Con35014","Res37604","Res72114","Zer86673","Con66867","Den10001","Res46756","Up_21149","Mul48052"],Mul48052,"Mul48052")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.2562189, 1.2101918, 0.5712543, 0.6793421, 0.2855072, 0.7959152, 0.0098223], [0.0000000, 0.0000000, 0.0516942, 1.0174022, 0.3237437, 0.5586788, 1.1760236, 0.9585400, 0.3729678], [0.0000000, 0.0000000, 1.1499265, 0.9314551, 0.0168464, 0.5359354, 0.8053457, 0.4106306, 0.5375182], [0.0000000, 0.0000000, 0.1197288, 0.7744842, 0.7920024, 0.2906346, 0.7085450, 0.7386375, 0.5012900], [0.0000000, 0.0000000, 0.9300430, 1.2518405, 0.7768920, 1.1470542, 1.1409866, 0.1818035, 0.6604921], [0.3795932, 0.3039207, 0.5476390, 0.5962670, 0.9912940, 0.9671879, 1.0701213, 0.3617224, 0.2280424]]]

Expected (Unparsed): [[[0.0,0.0,0.256218893048,1.210191842616,0.571254258234,0.67934211156,0.285507168692,0.7959151843999999,0.009822258284000001],[0.0,0.0,0.051694226223999995,1.017402227328,0.323743747734,0.55867882245,1.176023596875,0.9585400166719998,0.37296782635000003],[0.0,0.0,1.1499265732200001,0.9314551071039999,0.016846367246000003,0.535935449346,0.805345687053,0.41063062350299995,0.53751824121],[0.0,0.0,0.11972876347200001,0.774484252544,0.7920023912540001,0.290634635758,0.7085450098589999,0.738637513875,0.501289970115],[0.0,0.0,0.9300430017119999,1.2518405261549999,0.7768919928,1.1470541567039998,1.140986584182,0.18180351530099997,0.660492146805],[0.3795932203827884,0.30392068929622507,0.547638957142,0.596267026425,0.9912940038,0.967187884968,1.070121331746,0.36172240535699995,0.228042372741]]]

Actual:   [[[0, 0, 0.2563, 1.2102, 0.5713, 0.6794, 0.2856, 0.796, 0.0099], [0, 0, 0.0517, 1.0175, 0.3238, 0.5587, 1.1761, 0.9586, 0.373], [0, 0, 1.15, 0.9315, 0.0169, 0.536, 0.8054, 0.4107, 0.5376], [0, 0, 0.1198, 0.7745, 0.7921, 0.2907, 0.7086, 0.7387, 0.5013], [0, 0, 0.9301, 1.2519, 0.7769, 1.1471, 1.141, 0.1819, 0.6605], [0.3796, 0.304, 0.5477, 0.5963, 0.9913, 0.9672, 1.0702, 0.3618, 0.2281]]]

Expected: [[[0, 0, 0.2563, 1.2102, 0.5713, 0.6794, 0.2856, 0.796, 0.0099], [0, 0, 0.0517, 1.0175, 0.3238, 0.5587, 1.1761, 0.9586, 0.373], [0, 0, 1.15, 0.9315, 0.0169, 0.536, 0.8054, 0.4107, 0.5376], [0, 0, 0.1198, 0.7745, 0.7921, 0.2907, 0.7086, 0.7387, 0.5013], [0, 0, 0.9301, 1.2519, 0.7769, 1.1471, 1.141, 0.1819, 0.6605], [0.3796, 0.304, 0.5477, 0.5963, 0.9913, 0.9672, 1.0702, 0.3618, 0.2281]]]