import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Bat17845 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Ave50235 = tf.keras.layers.Input(shape=([1, 1]))
in0Con50997 = tf.keras.layers.Input(shape=([3]))
in0Con66304 = tf.keras.layers.Input(shape=([8, 2, 3, 1]))
in0Up_67525 = tf.keras.layers.Input(shape=([4, 2]))
in0Con67324 = tf.keras.layers.Input(shape=([8, 2, 3, 1]))
in0Max6744 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))
in1Max6744 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))

Bat17845 = keras.layers.BatchNormalization(axis=2, epsilon=0.7790366834432718,  name = 'Bat17845', )(in0Bat17845)
Res31519 = keras.layers.Reshape((1, 4), name = 'Res31519', )(Bat17845)
Sep8924 = keras.layers.SeparableConv1D(4, (1),strides=(1), padding='same', name = 'Sep8924', )(Res31519)
Fla73792 = keras.layers.Flatten(name = 'Fla73792', )(Sep8924)
Ave50235 = keras.layers.AveragePooling1D(pool_size=(1), name = 'Ave50235', )(in0Ave50235)
Res96241 = keras.layers.Reshape((1, 1, 1), name = 'Res96241', )(Ave50235)
Glo24174 = keras.layers.GlobalAveragePooling2D(name = 'Glo24174', )(Res96241)
Con50997 = keras.layers.Concatenate(axis=1, name = 'Con50997', )([Glo24174,in0Con50997])
Min86179 = keras.layers.Minimum(name = 'Min86179', )([Fla73792,Con50997])
Res77648 = keras.layers.Reshape((4, 1), name = 'Res77648', )(Min86179)
Res18632 = keras.layers.Reshape((4, 1, 1), name = 'Res18632', )(Res77648)
Res83969 = keras.layers.Reshape((4, 1, 1, 1), name = 'Res83969', )(Res18632)
Glo13468 = keras.layers.GlobalAveragePooling3D(name = 'Glo13468', )(Res83969)
Res12273 = keras.layers.Reshape((1, 1), name = 'Res12273', )(Glo13468)
Res32906 = keras.layers.Reshape((1, 1, 1), name = 'Res32906', )(Res12273)
Res78786 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res78786', )(Res32906)
Zer96167 = keras.layers.ZeroPadding3D(padding=((7, 0), (1, 0), (2, 0)), name = 'Zer96167', )(Res78786)
Con66304 = keras.layers.Concatenate(axis=4, name = 'Con66304', )([Zer96167,in0Con66304])
Up_67525 = keras.layers.UpSampling1D(size=(2), name = 'Up_67525', )(in0Up_67525)
Res71134 = keras.layers.Reshape((8, 2, 1), name = 'Res71134', )(Up_67525)
Res60944 = keras.layers.Reshape((8, 2, 1, 1), name = 'Res60944', )(Res71134)
Zer89554 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer89554', )(Res60944)
Con67324 = keras.layers.Concatenate(axis=4, name = 'Con67324', )([Zer89554,in0Con67324])
Max6744 = keras.layers.Maximum(name = 'Max6744', )([in0Max6744,in1Max6744])
Zer16068 = keras.layers.ZeroPadding3D(padding=((7, 0), (0, 0), (1, 0)), name = 'Zer16068', )(Max6744)
Mul92614 = keras.layers.Multiply(name = 'Mul92614', )([Con67324,Zer16068])
Min77527 = keras.layers.Minimum(name = 'Min77527', )([Con66304,Mul92614])
model = tf.keras.models.Model(inputs=[in0Bat17845,in0Ave50235,in0Con50997,in0Con66304,in0Up_67525,in0Con67324,in0Max6744,in1Max6744], outputs=Min77527)
w = model.get_layer('Bat17845').get_weights() 
w[0] = np.array([0.2781, 0.7172])
w[1] = np.array([0.8084, 0.2645])
w[2] = np.array([0.9483, 0.5])
w[3] = np.array([0.0008, 0.9174])
model.get_layer('Bat17845').set_weights(w) 
w = model.get_layer('Sep8924').get_weights() 
w[0] = np.array([[[0.0974], [0.0462], [0.4403], [0.049]]])
w[1] = np.array([[[0.6018, 0.8778, 0.5797, 0.1018], [0.2322, 0.2436, 0.957, 0.5033], [0.5001, 0.6589, 0.7758, 0.5233], [0.0006, 0.0617, 0.7304, 0.0285]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep8924').set_weights(w) 
in0Bat17845 = tf.constant([[[[1.9003, 1.7952], [1.4328, 1.2686]]]])
in0Ave50235 = tf.constant([[[1.4181]]])
in0Con50997 = tf.constant([[0.0984, 0.1475, 0.6198]])
in0Con66304 = tf.constant([[[[[0.7701], [0.3524], [0.914]], [[0.5197], [0.3878], [0.4669]]], [[[0.1478], [0.2419], [0.5189]], [[0.6201], [0.0755], [0.4906]]], [[[0.9785], [0.4532], [0.9102]], [[0.0235], [0.4143], [0.9574]]], [[[0.652], [0.4306], [0.4961]], [[0.3875], [0.1297], [0.1225]]], [[[0.2102], [0.7206], [0.4914]], [[0.0884], [0.0416], [0.0014]]], [[[0.7894], [0.5073], [0.713]], [[0.6248], [0.1445], [0.08]]], [[[0.1976], [0.7194], [0.473]], [[0.6439], [0.9183], [0.3153]]], [[[0.9112], [0.2291], [0.4049]], [[0.9098], [0.8844], [0.2215]]]]])
in0Up_67525 = tf.constant([[[1.0926, 1.8992], [1.7703, 1.3557], [1.8241, 1.0437], [1.6672, 1.2927]]])
in0Con67324 = tf.constant([[[[[0.3555], [0.5837], [0.2339]], [[0.7045], [0.74], [0.964]]], [[[0.8628], [0.4581], [0.6996]], [[0.1102], [0.1552], [0.9042]]], [[[0.1298], [0.4987], [0.1921]], [[0.0385], [0.7953], [0.1868]]], [[[0.6775], [0.2069], [0.1353]], [[0.1273], [0.8702], [0.152]]], [[[0.4076], [0.9809], [0.1071]], [[0.2659], [0.238], [0.1602]]], [[[0.8164], [0.6489], [0.0376]], [[0.8577], [0.3971], [0.8023]]], [[[0.5497], [0.5026], [0.7179]], [[0.1747], [1], [0.4276]]], [[[0.277], [0.3207], [0.9344]], [[0.5244], [0.2541], [0.1365]]]]])
in0Max6744 = tf.constant([[[[[0.3596, 0.6395], [0.2545, 0.7032]], [[0.0409, 0.96], [0.8923, 0.2938]]]]])
in1Max6744 = tf.constant([[[[[0.1565, 0.0629], [0.6319, 0.8183]], [[0.1934, 0.0835], [0.632, 0.2945]]]]])
print (np.array2string(model.predict([in0Bat17845,in0Ave50235,in0Con50997,in0Con66304,in0Up_67525,in0Con67324,in0Max6744,in1Max6744],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min77527.png')

LBat17845 = batch_normalization_layer([[[[1.9003, 1.7952], [1.4328, 1.2686]]]], 2, 0.7790366834432718, [0.2781, 0.7172], [0.8084, 0.2645], [0.9483, 0.5], [0.0008, 0.9174], Bat17845), 
LRes31519 = reshape_layer(Bat17845, [1, 4], Res31519), 
LSep8924 = separable_conv1D_layer(Res31519, 1,[[[[0.0974], [0.0462], [0.4403], [0.049]]],[[[0.6018, 0.8778, 0.5797, 0.1018], [0.2322, 0.2436, 0.957, 0.5033], [0.5001, 0.6589, 0.7758, 0.5233], [0.0006, 0.0617, 0.7304, 0.0285]]]],[0, 0, 0, 0], 1, true, Sep8924), 
LFla73792 = flatten_layer(Sep8924, Fla73792), 
LAve50235 = average_pooling1D_layer([[[1.4181]]], 1, Ave50235), 
LRes96241 = reshape_layer(Ave50235, [1, 1, 1], Res96241), 
LGlo24174 = global_average_pooling2D_layer(Res96241, Glo24174), 
LCon50997 = concatenate_layer([Glo24174,[[0.0984, 0.1475, 0.6198]]], 1, Con50997), 
LMin86179 = minimum_layer([Fla73792,Con50997], Min86179), 
LRes77648 = reshape_layer(Min86179, [4, 1], Res77648), 
LRes18632 = reshape_layer(Res77648, [4, 1, 1], Res18632), 
LRes83969 = reshape_layer(Res18632, [4, 1, 1, 1], Res83969), 
LGlo13468 = global_average_pooling3D_layer(Res83969, Glo13468), 
LRes12273 = reshape_layer(Glo13468, [1, 1], Res12273), 
LRes32906 = reshape_layer(Res12273, [1, 1, 1], Res32906), 
LRes78786 = reshape_layer(Res32906, [1, 1, 1, 1], Res78786), 
LZer96167 = zero_padding3D_layer(Res78786, 7, 0, 1, 0, 2, 0, Zer96167), 
LCon66304 = concatenate_layer([Zer96167,[[[[[0.7701], [0.3524], [0.914]], [[0.5197], [0.3878], [0.4669]]], [[[0.1478], [0.2419], [0.5189]], [[0.6201], [0.0755], [0.4906]]], [[[0.9785], [0.4532], [0.9102]], [[0.0235], [0.4143], [0.9574]]], [[[0.652], [0.4306], [0.4961]], [[0.3875], [0.1297], [0.1225]]], [[[0.2102], [0.7206], [0.4914]], [[0.0884], [0.0416], [0.0014]]], [[[0.7894], [0.5073], [0.713]], [[0.6248], [0.1445], [0.08]]], [[[0.1976], [0.7194], [0.473]], [[0.6439], [0.9183], [0.3153]]], [[[0.9112], [0.2291], [0.4049]], [[0.9098], [0.8844], [0.2215]]]]]], 4, Con66304), 
LUp_67525 = up_sampling1D_layer([[[1.0926, 1.8992], [1.7703, 1.3557], [1.8241, 1.0437], [1.6672, 1.2927]]], 2, Up_67525), 
LRes71134 = reshape_layer(Up_67525, [8, 2, 1], Res71134), 
LRes60944 = reshape_layer(Res71134, [8, 2, 1, 1], Res60944), 
LZer89554 = zero_padding3D_layer(Res60944, 0, 0, 0, 0, 2, 0, Zer89554), 
LCon67324 = concatenate_layer([Zer89554,[[[[[0.3555], [0.5837], [0.2339]], [[0.7045], [0.74], [0.964]]], [[[0.8628], [0.4581], [0.6996]], [[0.1102], [0.1552], [0.9042]]], [[[0.1298], [0.4987], [0.1921]], [[0.0385], [0.7953], [0.1868]]], [[[0.6775], [0.2069], [0.1353]], [[0.1273], [0.8702], [0.152]]], [[[0.4076], [0.9809], [0.1071]], [[0.2659], [0.238], [0.1602]]], [[[0.8164], [0.6489], [0.0376]], [[0.8577], [0.3971], [0.8023]]], [[[0.5497], [0.5026], [0.7179]], [[0.1747], [1], [0.4276]]], [[[0.277], [0.3207], [0.9344]], [[0.5244], [0.2541], [0.1365]]]]]], 4, Con67324), 
LMax6744 = maximum_layer([[[[[[0.3596, 0.6395], [0.2545, 0.7032]], [[0.0409, 0.96], [0.8923, 0.2938]]]]], [[[[[0.1565, 0.0629], [0.6319, 0.8183]], [[0.1934, 0.0835], [0.632, 0.2945]]]]]], Max6744), 
LZer16068 = zero_padding3D_layer(Max6744, 7, 0, 0, 0, 1, 0, Zer16068), 
LMul92614 = multiply_layer([Con67324,Zer16068], Mul92614), 
LMin77527 = minimum_layer([Con66304,Mul92614], Min77527), 
exec_layers([LBat17845,LRes31519,LSep8924,LFla73792,LAve50235,LRes96241,LGlo24174,LCon50997,LMin86179,LRes77648,LRes18632,LRes83969,LGlo13468,LRes12273,LRes32906,LRes78786,LZer96167,LCon66304,LUp_67525,LRes71134,LRes60944,LZer89554,LCon67324,LMax6744,LZer16068,LMul92614,LMin77527],["Bat17845","Res31519","Sep8924","Fla73792","Ave50235","Res96241","Glo24174","Con50997","Min86179","Res77648","Res18632","Res83969","Glo13468","Res12273","Res32906","Res78786","Zer96167","Con66304","Up_67525","Res71134","Res60944","Zer89554","Con67324","Max6744","Zer16068","Mul92614","Min77527"],Min77527,"Min77527")

Actual (Unparsed): [[[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.2050877], [0.0000000, 0.4049000]], [[0.0000000, 0.0000000], [0.0000000, 0.2439360], [0.1774979, 0.0401992]]]]]

Expected (Unparsed): [[[[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]]],[[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]]],[[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]]],[[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]]],[[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]]],[[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]]],[[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0],[0,0.0]]],[[[0,0.0],[0,0.20508764999999998],[0,0.4049]],[[0,0.0],[0,0.243936],[0.17749788045977088,0.04019925]]]]]

Actual:   [[[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0.2051], [0, 0.4049]], [[0, 0], [0, 0.244], [0.1775, 0.0402]]]]]

Expected: [[[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0.2051], [0, 0.4049]], [[0, 0], [0, 0.244], [0.1775, 0.0402]]]]]