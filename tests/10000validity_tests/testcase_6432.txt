import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min62979 = tf.keras.layers.Input(shape=([1, 1]))
in1Min62979 = tf.keras.layers.Input(shape=([1, 1]))
in0Con3586 = tf.keras.layers.Input(shape=([2, 17]))
in0Add27850 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Add27850 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con81038 = tf.keras.layers.Input(shape=([2, 17]))
in0Sub71004 = tf.keras.layers.Input(shape=([3, 2, 3, 3]))
in1Sub71004 = tf.keras.layers.Input(shape=([3, 2, 3, 3]))
in0Max91367 = tf.keras.layers.Input(shape=([1, 1, 2]))
in1Max91367 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Thr80416 = tf.keras.layers.Input(shape=([2, 2]))
in0Con95085 = tf.keras.layers.Input(shape=([2, 16]))

Min62979 = keras.layers.Minimum(name = 'Min62979', )([in0Min62979,in1Min62979])
Sim14332 = keras.layers.SimpleRNN(2,name = 'Sim14332', )(Min62979)
Res42565 = keras.layers.Reshape((2, 1), name = 'Res42565', )(Sim14332)
Con3586 = keras.layers.Concatenate(axis=2, name = 'Con3586', )([Res42565,in0Con3586])
Add27850 = keras.layers.Add(name = 'Add27850', )([in0Add27850,in1Add27850])
Res16767 = keras.layers.Reshape((2, 1), name = 'Res16767', )(Add27850)
Con81038 = keras.layers.Concatenate(axis=2, name = 'Con81038', )([Res16767,in0Con81038])
Sub71004 = keras.layers.Subtract(name = 'Sub71004', )([in0Sub71004,in1Sub71004])
Res68670 = keras.layers.Reshape((3, 2, 9), name = 'Res68670', )(Sub71004)
Res87748 = keras.layers.Reshape((3, 18), name = 'Res87748', )(Res68670)
Cro61886 = keras.layers.Cropping1D(cropping=((1, 1)), name = 'Cro61886', )(Res87748)
Zer71496 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer71496', )(Cro61886)
Mul7397 = keras.layers.Multiply(name = 'Mul7397', )([Con81038,Zer71496])
Mul1000 = keras.layers.Multiply(name = 'Mul1000', )([Con3586,Mul7397])
Max91367 = keras.layers.Maximum(name = 'Max91367', )([in0Max91367,in1Max91367])
Res80076 = keras.layers.Reshape((1, 2), name = 'Res80076', )(Max91367)
Zer6194 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer6194', )(Res80076)
Thr80416 = keras.layers.ThresholdedReLU(theta=2.157870639532061, name = 'Thr80416', input_shape=(2, 2))(in0Thr80416)
Min36310 = keras.layers.Minimum(name = 'Min36310', )([Zer6194,Thr80416])
Con95085 = keras.layers.Concatenate(axis=2, name = 'Con95085', )([Min36310,in0Con95085])
Add33808 = keras.layers.Add(name = 'Add33808', )([Mul1000,Con95085])
model = tf.keras.models.Model(inputs=[in0Min62979,in1Min62979,in0Con3586,in0Add27850,in1Add27850,in0Con81038,in0Sub71004,in1Sub71004,in0Max91367,in1Max91367,in0Thr80416,in0Con95085], outputs=Add33808)
w = model.get_layer('Sim14332').get_weights() 
w[0] = np.array([[8, 4]])
w[1] = np.array([[2, 1], [1, 5]])
w[2] = np.array([9, 1])
model.get_layer('Sim14332').set_weights(w) 
in0Min62979 = tf.constant([[[0.8181]]])
in1Min62979 = tf.constant([[[0.1299]]])
in0Con3586 = tf.constant([[[0.071, 0.336, 0.3301, 0.0055, 0.4908, 0.1692, 0.4468, 0.4399, 0.0391, 0.4279, 0.8403, 0.0151, 0.0092, 0.3936, 0.8568, 0.4575, 0.777], [0.6375, 0.6436, 0.5265, 0.9254, 0.9334, 0.701, 0.5307, 0.6228, 0.4532, 0.1872, 0.9262, 0.4614, 0.836, 0.6175, 0.6215, 0.1836, 0.7022]]])
in0Add27850 = tf.constant([[[[0.3849]], [[0.0744]]]])
in1Add27850 = tf.constant([[[[0.7378]], [[0.2492]]]])
in0Con81038 = tf.constant([[[0.5711, 0.2598, 0.2955, 0.8293, 0.2396, 0.8484, 0.1441, 0.1823, 0.0854, 0.7245, 0.6703, 0.6459, 0.1042, 0.5972, 0.3764, 0.9464, 0.284], [0.3531, 0.3009, 0.3887, 0.0022, 0.2471, 0.8625, 0.6583, 0.3989, 0.9493, 0.3445, 0.3663, 0.4898, 0.6045, 0.0608, 0.328, 0.7225, 0.9251]]])
in0Sub71004 = tf.constant([[[[[0.2335, 0.5858, 0.0917], [0.223, 0.2526, 0.4709], [0.2429, 0.4782, 0.5834]], [[0.8984, 0.0675, 0.6857], [0.1139, 0.3236, 0.4155], [0.1106, 0.3634, 0.0387]]], [[[0.5915, 0.6412, 0.3273], [0.4362, 0.6952, 0.1132], [0.3597, 0.9195, 0.8343]], [[0.1908, 0.8596, 0.186], [0.6762, 0.251, 0.9998], [0.4304, 0.5403, 0.4257]]], [[[0.9831, 0.8648, 0.2499], [0.2026, 0.3486, 0.8403], [0.2597, 0.7569, 0.6588]], [[0.7676, 0.1543, 0.4952], [0.4971, 0.9795, 0.4736], [0.1271, 0.0794, 0.6583]]]]])
in1Sub71004 = tf.constant([[[[[0.9636, 0.9489, 0.9403], [0.9578, 0.7707, 0.9237], [0.0942, 0.4903, 0.806]], [[0.5733, 0.7915, 0.4205], [0.4883, 0.6569, 0.4878], [0.511, 0.3421, 0.1076]]], [[[0.932, 0.5966, 0.4757], [0.7208, 0.3366, 0.131], [0.7909, 0.6439, 0.4428]], [[0.6449, 0.8907, 0.8039], [0.9157, 0.1837, 0.0373], [0.0284, 0.9158, 0.0485]]], [[[0.1903, 0.7641, 0.8768], [0.4577, 0.1074, 0.9778], [0.4935, 0.0654, 0.7239]], [[0.0363, 0.6728, 0.6272], [0.5462, 0.1062, 0.733], [0.4856, 0.5912, 0.8877]]]]])
in0Max91367 = tf.constant([[[[0.4497, 0.9634]]]])
in1Max91367 = tf.constant([[[[0.4823, 0.3015]]]])
in0Thr80416 = tf.constant([[[0.6438, 0.2018], [0.6735, 0.0882]]])
in0Con95085 = tf.constant([[[0.0876, 0.6257, 0.8065, 0.9961, 0.4748, 0.518, 0.1698, 0.8053, 0.4024, 0.7924, 0.1372, 0.1385, 0.5593, 0.9497, 0.781, 0.4242], [0.4017, 0.5017, 0.1458, 0.9797, 0.927, 0.4221, 0.1085, 0.9747, 0.4518, 0.5423, 0.0325, 0.644, 0.0336, 0.3035, 0.859, 0.0489]]])
print (np.array2string(model.predict([in0Min62979,in1Min62979,in0Con3586,in0Add27850,in1Add27850,in0Con81038,in0Sub71004,in1Sub71004,in0Max91367,in1Max91367,in0Thr80416,in0Con95085],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add33808.png')

LMin62979 = minimum_layer([[[[0.8181]]], [[[0.1299]]]], Min62979), 
LSim14332 = simple_rnn_layer(Min62979,[[8, 4]],[[2, 1], [1, 5]],[9, 1], Sim14332), 
LRes42565 = reshape_layer(Sim14332, [2, 1], Res42565), 
LCon3586 = concatenate_layer([Res42565,[[[0.071, 0.336, 0.3301, 0.0055, 0.4908, 0.1692, 0.4468, 0.4399, 0.0391, 0.4279, 0.8403, 0.0151, 0.0092, 0.3936, 0.8568, 0.4575, 0.777], [0.6375, 0.6436, 0.5265, 0.9254, 0.9334, 0.701, 0.5307, 0.6228, 0.4532, 0.1872, 0.9262, 0.4614, 0.836, 0.6175, 0.6215, 0.1836, 0.7022]]]], 2, Con3586), 
LAdd27850 = add_layer([[[[[0.3849]], [[0.0744]]]], [[[[0.7378]], [[0.2492]]]]], Add27850), 
LRes16767 = reshape_layer(Add27850, [2, 1], Res16767), 
LCon81038 = concatenate_layer([Res16767,[[[0.5711, 0.2598, 0.2955, 0.8293, 0.2396, 0.8484, 0.1441, 0.1823, 0.0854, 0.7245, 0.6703, 0.6459, 0.1042, 0.5972, 0.3764, 0.9464, 0.284], [0.3531, 0.3009, 0.3887, 0.0022, 0.2471, 0.8625, 0.6583, 0.3989, 0.9493, 0.3445, 0.3663, 0.4898, 0.6045, 0.0608, 0.328, 0.7225, 0.9251]]]], 2, Con81038), 
LSub71004 = subtract_layer([[[[[0.2335, 0.5858, 0.0917], [0.223, 0.2526, 0.4709], [0.2429, 0.4782, 0.5834]], [[0.8984, 0.0675, 0.6857], [0.1139, 0.3236, 0.4155], [0.1106, 0.3634, 0.0387]]], [[[0.5915, 0.6412, 0.3273], [0.4362, 0.6952, 0.1132], [0.3597, 0.9195, 0.8343]], [[0.1908, 0.8596, 0.186], [0.6762, 0.251, 0.9998], [0.4304, 0.5403, 0.4257]]], [[[0.9831, 0.8648, 0.2499], [0.2026, 0.3486, 0.8403], [0.2597, 0.7569, 0.6588]], [[0.7676, 0.1543, 0.4952], [0.4971, 0.9795, 0.4736], [0.1271, 0.0794, 0.6583]]]]], [[[[[0.9636, 0.9489, 0.9403], [0.9578, 0.7707, 0.9237], [0.0942, 0.4903, 0.806]], [[0.5733, 0.7915, 0.4205], [0.4883, 0.6569, 0.4878], [0.511, 0.3421, 0.1076]]], [[[0.932, 0.5966, 0.4757], [0.7208, 0.3366, 0.131], [0.7909, 0.6439, 0.4428]], [[0.6449, 0.8907, 0.8039], [0.9157, 0.1837, 0.0373], [0.0284, 0.9158, 0.0485]]], [[[0.1903, 0.7641, 0.8768], [0.4577, 0.1074, 0.9778], [0.4935, 0.0654, 0.7239]], [[0.0363, 0.6728, 0.6272], [0.5462, 0.1062, 0.733], [0.4856, 0.5912, 0.8877]]]]], Sub71004), 
LRes68670 = reshape_layer(Sub71004, [3, 2, 9], Res68670), 
LRes87748 = reshape_layer(Res68670, [3, 18], Res87748), 
LCro61886 = cropping1D_layer(Res87748, 1, 1, Cro61886), 
LZer71496 = zero_padding1D_layer(Cro61886, 1, 0, Zer71496), 
LMul7397 = multiply_layer([Con81038,Zer71496], Mul7397), 
LMul1000 = multiply_layer([Con3586,Mul7397], Mul1000), 
LMax91367 = maximum_layer([[[[[0.4497, 0.9634]]]], [[[[0.4823, 0.3015]]]]], Max91367), 
LRes80076 = reshape_layer(Max91367, [1, 2], Res80076), 
LZer6194 = zero_padding1D_layer(Res80076, 1, 0, Zer6194), 
LThr80416 = thresholded_relu_layer([[[0.6438, 0.2018], [0.6735, 0.0882]]], 2.157870639532061, Thr80416), 
LMin36310 = minimum_layer([Zer6194,Thr80416], Min36310), 
LCon95085 = concatenate_layer([Min36310,[[[0.0876, 0.6257, 0.8065, 0.9961, 0.4748, 0.518, 0.1698, 0.8053, 0.4024, 0.7924, 0.1372, 0.1385, 0.5593, 0.9497, 0.781, 0.4242], [0.4017, 0.5017, 0.1458, 0.9797, 0.927, 0.4221, 0.1085, 0.9747, 0.4518, 0.5423, 0.0325, 0.644, 0.0336, 0.3035, 0.859, 0.0489]]]], 2, Con95085), 
LAdd33808 = add_layer([Mul1000,Con95085], Add33808), 
exec_layers([LMin62979,LSim14332,LRes42565,LCon3586,LAdd27850,LRes16767,LCon81038,LSub71004,LRes68670,LRes87748,LCro61886,LZer71496,LMul7397,LMul1000,LMax91367,LRes80076,LZer6194,LThr80416,LMin36310,LCon95085,LAdd33808],["Min62979","Sim14332","Res42565","Con3586","Add27850","Res16767","Con81038","Sub71004","Res68670","Res87748","Cro61886","Zer71496","Mul7397","Mul1000","Max91367","Res80076","Zer6194","Thr80416","Min36310","Con95085","Add33808"],Add33808,"Add33808")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0876000, 0.6257000, 0.8065000, 0.9961000, 0.4748000, 0.5180000, 0.1698000, 0.8053000, 0.4024000, 0.7924000, 0.1372000, 0.1385000, 0.5593000, 0.9497000, 0.7810000, 0.4242000], [-0.1001179, 0.0100395, 0.3729610, 0.4434564, 0.1465301, 0.9755946, 0.6662911, 0.5183836, 0.2057623, 0.7793358, 0.4497943, 0.3326669, -0.0216255, 0.6780109, 0.0697361, 0.3854485, 0.8091896, 0.2939311]]]

Expected (Unparsed): [[[0.0,0.0,0.0876,0.6257,0.8065,0.9961,0.4748,0.518,0.1698,0.8053,0.4024,0.7924,0.1372,0.1385,0.5593,0.9497,0.781,0.4242],[-0.10011789489143065,0.010039515749999995,0.372960968784,0.44345645347000007,0.14653006656800002,0.9755945521080001,0.6662910900000001,0.5183835636359999,0.20576227118,0.779335844684,0.44979434856,0.33266688362600005,-0.021625495939999982,0.6780108626,0.0697361,0.38544850399999997,0.8091895495,0.29393108898400006]]]

Actual:   [[[0, 0, 0.0876, 0.6257, 0.8065, 0.9961, 0.4748, 0.518, 0.1698, 0.8053, 0.4024, 0.7924, 0.1372, 0.1385, 0.5593, 0.9497, 0.781, 0.4242], [-0.1001, 0.0101, 0.373, 0.4435, 0.1466, 0.9756, 0.6663, 0.5184, 0.2058, 0.7794, 0.4498, 0.3327, -0.0216, 0.6781, 0.0698, 0.3855, 0.8092, 0.294]]]

Expected: [[[0, 0, 0.0876, 0.6257, 0.8065, 0.9961, 0.4748, 0.518, 0.1698, 0.8053, 0.4024, 0.7924, 0.1372, 0.1385, 0.5593, 0.9497, 0.781, 0.4242], [-0.1001, 0.0101, 0.373, 0.4435, 0.1466, 0.9756, 0.6663, 0.5184, 0.2058, 0.7794, 0.4498, 0.3327, -0.0216, 0.6781, 0.0698, 0.3855, 0.8092, 0.294]]]