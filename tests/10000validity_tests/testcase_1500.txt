import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave35487 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in1Ave35487 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in0Con97875 = tf.keras.layers.Input(shape=([42]))
in0Max97675 = tf.keras.layers.Input(shape=([1, 1]))
in1Max97675 = tf.keras.layers.Input(shape=([1, 1]))
in0Con24025 = tf.keras.layers.Input(shape=([11, 1, 3]))
in0Con79165 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Ave64396 = tf.keras.layers.Input(shape=([2, 1]))
in1Ave64396 = tf.keras.layers.Input(shape=([2, 1]))
in0Con32531 = tf.keras.layers.Input(shape=([43]))

Ave35487 = keras.layers.Average(name = 'Ave35487', )([in0Ave35487,in1Ave35487])
Fla5743 = keras.layers.Flatten(name = 'Fla5743', )(Ave35487)
Con97875 = keras.layers.Concatenate(axis=1, name = 'Con97875', )([Fla5743,in0Con97875])
Max97675 = keras.layers.Maximum(name = 'Max97675', )([in0Max97675,in1Max97675])
Res24807 = keras.layers.Reshape((1, 1, 1), name = 'Res24807', )(Max97675)
Zer45031 = keras.layers.ZeroPadding2D(padding=((10, 0), (0, 0)), name = 'Zer45031', )(Res24807)
Con24025 = keras.layers.Concatenate(axis=3, name = 'Con24025', )([Zer45031,in0Con24025])
Con79165 = keras.layers.Conv2DTranspose(4, (1, 1),strides=(11, 1), padding='valid', name = 'Con79165', )(in0Con79165)
Add2767 = keras.layers.Add(name = 'Add2767', )([Con24025,Con79165])
Res39090 = keras.layers.Reshape((11, 4), name = 'Res39090', )(Add2767)
Fla28137 = keras.layers.Flatten(name = 'Fla28137', )(Res39090)
Ave64396 = keras.layers.Average(name = 'Ave64396', )([in0Ave64396,in1Ave64396])
Res5093 = keras.layers.Reshape((2, 1, 1), name = 'Res5093', )(Ave64396)
Res24088 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res24088', )(Res5093)
Glo28018 = keras.layers.GlobalAveragePooling3D(name = 'Glo28018', )(Res24088)
Con32531 = keras.layers.Concatenate(axis=1, name = 'Con32531', )([Glo28018,in0Con32531])
Mul31598 = keras.layers.Multiply(name = 'Mul31598', )([Fla28137,Con32531])
Min16259 = keras.layers.Minimum(name = 'Min16259', )([Con97875,Mul31598])
model = tf.keras.models.Model(inputs=[in0Ave35487,in1Ave35487,in0Con97875,in0Max97675,in1Max97675,in0Con24025,in0Con79165,in0Ave64396,in1Ave64396,in0Con32531], outputs=Min16259)
w = model.get_layer('Con79165').get_weights() 
w[0] = np.array([[[[0.3226, 0.1024], [0.1726, 0.5826], [0.5313, 0.6719], [0.6178, 0.525]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con79165').set_weights(w) 
in0Ave35487 = tf.constant([[[[[0.0837], [0.8564]]]]])
in1Ave35487 = tf.constant([[[[[0.4111], [0.464]]]]])
in0Con97875 = tf.constant([[0.9168, 0.3731, 0.6661, 0.556, 0.3074, 0.4146, 0.2084, 0.1236, 0.071, 0.2909, 0.2051, 0.2182, 0.6308, 0.1964, 0.1937, 0.9112, 0.2303, 0.7534, 0.2142, 0.2075, 0.1632, 0.7473, 0.9853, 0.276, 0.8318, 0.1294, 0.521, 0.7569, 0.1872, 0.2142, 0.1261, 0.5683, 0.884, 0.81, 0.6256, 0.2136, 0.7835, 0.6177, 0.6266, 0.4525, 0.2782, 0.6075]])
in0Max97675 = tf.constant([[[0.473]]])
in1Max97675 = tf.constant([[[0.7016]]])
in0Con24025 = tf.constant([[[[0.5543, 0.0833, 0.5287]], [[0.7537, 0.466, 0.3945]], [[0.844, 0.5032, 0.5594]], [[0.1991, 0.6647, 0.1241]], [[0.8374, 0.7249, 0.102]], [[0.3715, 0.0143, 0.1402]], [[0.0642, 0.7229, 0.1756]], [[0.644, 0.6546, 0.8296]], [[0.884, 0.0683, 0.1684]], [[0.2324, 0.9246, 0.4474]], [[0.4847, 0.0599, 0.0587]]]])
in0Con79165 = tf.constant([[[[0.7351, 0.4642]]]])
in0Ave64396 = tf.constant([[[0.1278], [0.4002]]])
in1Ave64396 = tf.constant([[[0.261], [0.0475]]])
in0Con32531 = tf.constant([[0.0216, 0.9448, 0.1707, 0.3695, 0.7461, 0.9201, 0.5447, 0.1134, 0.8706, 0.2141, 0.5523, 0.1972, 0.7426, 0.4566, 0.2636, 0.4876, 0.0405, 0.7316, 0.0312, 0.6699, 0.8246, 0.2945, 0.8795, 0.3502, 0.8201, 0.4607, 0.6939, 0.0466, 0.0328, 0.0599, 0.6209, 0.1688, 0.239, 0.3929, 0.2941, 0.0162, 0.1089, 0.1985, 0.9864, 0.2864, 0.7252, 0.7392, 0.5559]])
print (np.array2string(model.predict([in0Ave35487,in1Ave35487,in0Con97875,in0Max97675,in1Max97675,in0Con24025,in0Con79165,in0Ave64396,in1Ave64396,in0Con32531],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min16259.png')

LAve35487 = average_layer([[[[[[0.0837], [0.8564]]]]], [[[[[0.4111], [0.464]]]]]], Ave35487), 
LFla5743 = flatten_layer(Ave35487, Fla5743), 
LCon97875 = concatenate_layer([Fla5743,[[0.9168, 0.3731, 0.6661, 0.556, 0.3074, 0.4146, 0.2084, 0.1236, 0.071, 0.2909, 0.2051, 0.2182, 0.6308, 0.1964, 0.1937, 0.9112, 0.2303, 0.7534, 0.2142, 0.2075, 0.1632, 0.7473, 0.9853, 0.276, 0.8318, 0.1294, 0.521, 0.7569, 0.1872, 0.2142, 0.1261, 0.5683, 0.884, 0.81, 0.6256, 0.2136, 0.7835, 0.6177, 0.6266, 0.4525, 0.2782, 0.6075]]], 1, Con97875), 
LMax97675 = maximum_layer([[[[0.473]]], [[[0.7016]]]], Max97675), 
LRes24807 = reshape_layer(Max97675, [1, 1, 1], Res24807), 
LZer45031 = zero_padding2D_layer(Res24807, 10, 0, 0, 0, Zer45031), 
LCon24025 = concatenate_layer([Zer45031,[[[[0.5543, 0.0833, 0.5287]], [[0.7537, 0.466, 0.3945]], [[0.844, 0.5032, 0.5594]], [[0.1991, 0.6647, 0.1241]], [[0.8374, 0.7249, 0.102]], [[0.3715, 0.0143, 0.1402]], [[0.0642, 0.7229, 0.1756]], [[0.644, 0.6546, 0.8296]], [[0.884, 0.0683, 0.1684]], [[0.2324, 0.9246, 0.4474]], [[0.4847, 0.0599, 0.0587]]]]], 3, Con24025), 
LCon79165 = conv2D_transpose_layer([[[[0.7351, 0.4642]]]], 1, 1,[[[[0.3226, 0.1024], [0.1726, 0.5826], [0.5313, 0.6719], [0.6178, 0.525]]]],[0, 0, 0, 0], 11, 1, false, Con79165), 
LAdd2767 = add_layer([Con24025,Con79165], Add2767), 
LRes39090 = reshape_layer(Add2767, [11, 4], Res39090), 
LFla28137 = flatten_layer(Res39090, Fla28137), 
LAve64396 = average_layer([[[[0.1278], [0.4002]]], [[[0.261], [0.0475]]]], Ave64396), 
LRes5093 = reshape_layer(Ave64396, [2, 1, 1], Res5093), 
LRes24088 = reshape_layer(Res5093, [2, 1, 1, 1], Res24088), 
LGlo28018 = global_average_pooling3D_layer(Res24088, Glo28018), 
LCon32531 = concatenate_layer([Glo28018,[[0.0216, 0.9448, 0.1707, 0.3695, 0.7461, 0.9201, 0.5447, 0.1134, 0.8706, 0.2141, 0.5523, 0.1972, 0.7426, 0.4566, 0.2636, 0.4876, 0.0405, 0.7316, 0.0312, 0.6699, 0.8246, 0.2945, 0.8795, 0.3502, 0.8201, 0.4607, 0.6939, 0.0466, 0.0328, 0.0599, 0.6209, 0.1688, 0.239, 0.3929, 0.2941, 0.0162, 0.1089, 0.1985, 0.9864, 0.2864, 0.7252, 0.7392, 0.5559]]], 1, Con32531), 
LMul31598 = multiply_layer([Fla28137,Con32531], Mul31598), 
LMin16259 = minimum_layer([Con97875,Mul31598], Min16259), 
exec_layers([LAve35487,LFla5743,LCon97875,LMax97675,LRes24807,LZer45031,LCon24025,LCon79165,LAdd2767,LRes39090,LFla28137,LAve64396,LRes5093,LRes24088,LGlo28018,LCon32531,LMul31598,LMin16259],["Ave35487","Fla5743","Con97875","Max97675","Res24807","Zer45031","Con24025","Con79165","Add2767","Res39090","Fla28137","Ave64396","Res5093","Res24088","Glo28018","Con32531","Mul31598","Min16259"],Min16259,"Min16259")

Actual (Unparsed): [[0.0595331, 0.0205550, 0.7423810, 0.2093720, 0.0000000, 0.5560000, 0.3074000, 0.2148842, 0.0000000, 0.1236000, 0.0710000, 0.2909000, 0.0000000, 0.1478517, 0.3035020, 0.0327128, 0.0000000, 0.0339147, 0.2303000, 0.0031824, 0.0000000, 0.2075000, 0.0042113, 0.1233059, 0.0000000, 0.0526504, 0.3330400, 0.1218488, 0.0000000, 0.0211232, 0.0392105, 0.2142000, 0.0000000, 0.2112760, 0.0268351, 0.0495264, 0.0000000, 0.0253084, 0.1835331, 0.4413154, 0.2009382, 0.3515044, 0.0442781, 0.0326313]]

Expected (Unparsed): [[0.0595331487275,0.020555017488000003,0.742380955528,0.209372047446,0.0,0.556,0.3074,0.21488415,0.0,0.1236,0.071,0.2909,0.0,0.14785166,0.30350202,0.03271276,0.0,0.0339147,0.2303,0.0031823999999999997,0.0,0.2075,0.00421135,0.12330589999999998,0.0,0.052650419999999996,0.33304003,0.12184884,0.0,0.0211232,0.03921054,0.2142,0.0,0.211276,0.026835070000000003,0.04952643999999999,0.0,0.02530836,0.1835331,0.44131536000000005,0.20093824,0.35150444,0.04427808,0.03263133]]

Actual:   [[0.0596, 0.0206, 0.7424, 0.2094, 0, 0.556, 0.3074, 0.2149, 0, 0.1236, 0.071, 0.2909, 0, 0.1479, 0.3036, 0.0328, 0, 0.034, 0.2303, 0.0032, 0, 0.2075, 0.0043, 0.1234, 0, 0.0527, 0.3331, 0.1219, 0, 0.0212, 0.0393, 0.2142, 0, 0.2113, 0.0269, 0.0496, 0, 0.0254, 0.1836, 0.4414, 0.201, 0.3516, 0.0443, 0.0327]]

Expected: [[0.0596, 0.0206, 0.7424, 0.2094, 0, 0.556, 0.3074, 0.2149, 0, 0.1236, 0.071, 0.2909, 0, 0.1479, 0.3036, 0.0328, 0, 0.034, 0.2303, 0.0032, 0, 0.2075, 0.0043, 0.1234, 0, 0.0527, 0.3331, 0.1219, 0, 0.0212, 0.0393, 0.2142, 0, 0.2113, 0.0269, 0.0496, 0, 0.0254, 0.1836, 0.4414, 0.201, 0.3516, 0.0443, 0.0327]]