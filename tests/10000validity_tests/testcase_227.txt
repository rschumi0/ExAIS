import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min8882 = tf.keras.layers.Input(shape=([1, 2, 2]))
in1Min8882 = tf.keras.layers.Input(shape=([1, 2, 2]))

Min8882 = keras.layers.Minimum(name = 'Min8882', )([in0Min8882,in1Min8882])
Res45778 = keras.layers.Reshape((1, 4), name = 'Res45778', )(Min8882)
Up_63415 = keras.layers.UpSampling1D(size=(1), name = 'Up_63415', )(Res45778)
Zer52613 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer52613', )(Up_63415)
Res51939 = keras.layers.Reshape((3, 4, 1), name = 'Res51939', )(Zer52613)
Up_55846 = keras.layers.UpSampling2D(size=(2, 2), name = 'Up_55846', )(Res51939)
model = tf.keras.models.Model(inputs=[in0Min8882,in1Min8882], outputs=Up_55846)
in0Min8882 = tf.constant([[[[0.158, 0.1287], [0.8438, 0.5635]]]])
in1Min8882 = tf.constant([[[[0.9917, 0.6727], [0.1532, 0.5967]]]])
print (np.array2string(model.predict([in0Min8882,in1Min8882],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Up_55846.png')

LMin8882 = minimum_layer([[[[[0.158, 0.1287], [0.8438, 0.5635]]]], [[[[0.9917, 0.6727], [0.1532, 0.5967]]]]], Min8882), 
LRes45778 = reshape_layer(Min8882, [1, 4], Res45778), 
LUp_63415 = up_sampling1D_layer(Res45778, 1, Up_63415), 
LZer52613 = zero_padding1D_layer(Up_63415, 1, 1, Zer52613), 
LRes51939 = reshape_layer(Zer52613, [3, 4, 1], Res51939), 
LUp_55846 = up_sampling2D_layer(Res51939, 2, 2, Up_55846), 
exec_layers([LMin8882,LRes45778,LUp_63415,LZer52613,LRes51939,LUp_55846],["Min8882","Res45778","Up_63415","Zer52613","Res51939","Up_55846"],Up_55846,"Up_55846")

Actual (Unparsed): [[[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.1580000], [0.1580000], [0.1287000], [0.1287000], [0.1532000], [0.1532000], [0.5635000], [0.5635000]], [[0.1580000], [0.1580000], [0.1287000], [0.1287000], [0.1532000], [0.1532000], [0.5635000], [0.5635000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]]]]

Expected (Unparsed): [[[[0],[0],[0],[0],[0],[0],[0],[0]],[[0],[0],[0],[0],[0],[0],[0],[0]],[[0.158],[0.158],[0.1287],[0.1287],[0.1532],[0.1532],[0.5635],[0.5635]],[[0.158],[0.158],[0.1287],[0.1287],[0.1532],[0.1532],[0.5635],[0.5635]],[[0],[0],[0],[0],[0],[0],[0],[0]],[[0],[0],[0],[0],[0],[0],[0],[0]]]]

Actual:   [[[[0], [0], [0], [0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0], [0], [0], [0]], [[0.158], [0.158], [0.1287], [0.1287], [0.1532], [0.1532], [0.5635], [0.5635]], [[0.158], [0.158], [0.1287], [0.1287], [0.1532], [0.1532], [0.5635], [0.5635]], [[0], [0], [0], [0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0], [0], [0], [0]]]]

Expected: [[[[0], [0], [0], [0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0], [0], [0], [0]], [[0.158], [0.158], [0.1287], [0.1287], [0.1532], [0.1532], [0.5635], [0.5635]], [[0.158], [0.158], [0.1287], [0.1287], [0.1532], [0.1532], [0.5635], [0.5635]], [[0], [0], [0], [0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0], [0], [0], [0]]]]