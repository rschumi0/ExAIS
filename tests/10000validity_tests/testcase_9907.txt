import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Lay62714 = tf.keras.layers.Input(shape=([2, 4]))
in0Mul39341 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Mul39341 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Con76376 = tf.keras.layers.Input(shape=([6, 10, 3, 1]))
in0Min84862 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Min84862 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))

Lay62714 = keras.layers.LayerNormalization(axis=2, epsilon=1.1746817263078486, name = 'Lay62714', )(in0Lay62714)
Lea93522 = keras.layers.LeakyReLU(alpha=6.212291711561245, name = 'Lea93522', )(Lay62714)
Mul39341 = keras.layers.Multiply(name = 'Mul39341', )([in0Mul39341,in1Mul39341])
Ave91141 = keras.layers.AveragePooling2D(pool_size=(1, 2), strides=(1, 2), padding='same', name = 'Ave91141', )(Mul39341)
Res16736 = keras.layers.Reshape((2, 1, 2, 1), name = 'Res16736', )(Ave91141)
Up_46654 = keras.layers.UpSampling3D(size=(1, 2, 2), name = 'Up_46654', )(Res16736)
Res46920 = keras.layers.Reshape((2, 2, 4), name = 'Res46920', )(Up_46654)
Res75902 = keras.layers.Reshape((2, 8), name = 'Res75902', )(Res46920)
Dot60112 = keras.layers.Dot(axes=(1, 1), name = 'Dot60112', )([Lea93522,Res75902])
Res30453 = keras.layers.Reshape((4, 8, 1), name = 'Res30453', )(Dot60112)
Res51739 = keras.layers.Reshape((4, 8, 1, 1), name = 'Res51739', )(Res30453)
Zer55252 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer55252', )(Res51739)
Con76376 = keras.layers.Concatenate(axis=4, name = 'Con76376', )([Zer55252,in0Con76376])
Min84862 = keras.layers.Minimum(name = 'Min84862', )([in0Min84862,in1Min84862])
Zer14710 = keras.layers.ZeroPadding3D(padding=((4, 0), (8, 0), (1, 0)), name = 'Zer14710', )(Min84862)
Mul28472 = keras.layers.Multiply(name = 'Mul28472', )([Con76376,Zer14710])
model = tf.keras.models.Model(inputs=[in0Lay62714,in0Mul39341,in1Mul39341,in0Con76376,in0Min84862,in1Min84862], outputs=Mul28472)
in0Lay62714 = tf.constant([[[1.2517, 1.0776, 1.5892, 1.4657], [1.5728, 1.4103, 1.9297, 1.4798]]])
in0Mul39341 = tf.constant([[[[0.0677, 0.1948]], [[0.192, 0.2712]]]])
in1Mul39341 = tf.constant([[[[0.6111, 0.1916]], [[0.9701, 0.1184]]]])
in0Con76376 = tf.constant([[[[[0.0182], [0.0512], [0.7445]], [[0.944], [0.8732], [0.6508]], [[0.2416], [0.726], [0.759]], [[0.5013], [0.4881], [0.1555]], [[0.8115], [0.4693], [0.143]], [[0.62], [0.0808], [0.3706]], [[0.8373], [0.1272], [0.609]], [[0.6775], [0.0951], [0.0585]], [[0.0692], [0.3095], [0.1]], [[0.7099], [0.6716], [0.1283]]], [[[0.9525], [0.9821], [0.805]], [[0.9311], [0.7114], [0.2664]], [[0.6691], [0.1902], [0.6978]], [[0.0446], [0.9747], [0.5218]], [[0.2469], [0.9717], [0.6434]], [[0.8834], [0.339], [0.2433]], [[0.3199], [0.7985], [0.3153]], [[0.8607], [0.4259], [0.4842]], [[0.1887], [0.0041], [0.431]], [[0.6197], [0.8973], [0.099]]], [[[0.9944], [0.6337], [0.2166]], [[0.3178], [0.6371], [0.8127]], [[0.946], [0.1977], [0.6483]], [[0.2354], [0.4149], [0.7762]], [[0.9978], [0.5254], [0.3167]], [[0.1448], [0.1299], [0.6774]], [[0.3711], [0.6053], [0.6494]], [[0.765], [0.3414], [0.6767]], [[0.0719], [0.1633], [0.4862]], [[0.043], [0.011], [0.0309]]], [[[0.6149], [0.1623], [0.3995]], [[0.1889], [0.5324], [0.6599]], [[0.6021], [0.2049], [0.8087]], [[0.8217], [0.566], [0.4474]], [[0.4901], [0.4694], [0.4783]], [[0.1066], [0.5793], [0.2527]], [[0.7508], [0.7003], [0.8566]], [[0.926], [0.5367], [0.3752]], [[0.8872], [0.4877], [0.3991]], [[0.3981], [0.8669], [0.1592]]], [[[0.1966], [0.5883], [0.293]], [[0.0534], [0.7311], [0.0863]], [[0.319], [0.04], [0.2078]], [[0.7761], [0.0468], [0.7566]], [[0.1016], [0.8815], [0.9445]], [[0.9284], [0.5924], [0.7437]], [[0.0379], [0.1678], [0.3363]], [[0.5535], [0.5164], [0.1992]], [[0.9718], [0.8588], [0.921]], [[0.026], [0.4264], [0.9976]]], [[[0.1344], [0.8939], [0.7848]], [[0.2175], [0.9839], [0.0371]], [[0.2079], [0.1331], [0.3807]], [[0.0962], [0.1492], [0.347]], [[0.576], [0.7885], [0.9069]], [[0.5127], [0.2866], [0.879]], [[0.3714], [0.8551], [0.1616]], [[0.7528], [0.6774], [0.1779]], [[0.3014], [0.9203], [0.3586]], [[0.6882], [0.3145], [0.6027]]]]])
in0Min84862 = tf.constant([[[[[0.8815, 0.3347], [0.2108, 0.2932]], [[0.4428, 0.079], [0.7978, 0.204]]], [[[0.3264, 0.4158], [0.1837, 0.8323]], [[0.8149, 0.6345], [0.3784, 0.6202]]]]])
in1Min84862 = tf.constant([[[[[0.4451, 0.7326], [0.7469, 0.7467]], [[0.4718, 0.3586], [0.6244, 0.1631]]], [[[0.1644, 0.3111], [0.7104, 0.8496]], [[0.3437, 0.9078], [0.5707, 0.503]]]]])
print (np.array2string(model.predict([in0Lay62714,in0Mul39341,in1Mul39341,in0Con76376,in0Min84862,in1Min84862],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul28472.png')

LLay62714 = layer_normalization_layer([[[1.2517, 1.0776, 1.5892, 1.4657], [1.5728, 1.4103, 1.9297, 1.4798]]], 2, 1.1746817263078486, Lay62714), 
LLea93522 = leaky_relu_layer(Lay62714, 6.212291711561245, Lea93522), 
LMul39341 = multiply_layer([[[[[0.0677, 0.1948]], [[0.192, 0.2712]]]], [[[[0.6111, 0.1916]], [[0.9701, 0.1184]]]]], Mul39341), 
LAve91141 = average_pooling2D_layer(Mul39341, 1, 2, 1, 2, true, Ave91141), 
LRes16736 = reshape_layer(Ave91141, [2, 1, 2, 1], Res16736), 
LUp_46654 = up_sampling3D_layer(Res16736, 1, 2, 2, Up_46654), 
LRes46920 = reshape_layer(Up_46654, [2, 2, 4], Res46920), 
LRes75902 = reshape_layer(Res46920, [2, 8], Res75902), 
LDot60112 = dot_layer(Lea93522,Res75902, 1, 1, Dot60112), 
LRes30453 = reshape_layer(Dot60112, [4, 8, 1], Res30453), 
LRes51739 = reshape_layer(Res30453, [4, 8, 1, 1], Res51739), 
LZer55252 = zero_padding3D_layer(Res51739, 1, 1, 1, 1, 1, 1, Zer55252), 
LCon76376 = concatenate_layer([Zer55252,[[[[[0.0182], [0.0512], [0.7445]], [[0.944], [0.8732], [0.6508]], [[0.2416], [0.726], [0.759]], [[0.5013], [0.4881], [0.1555]], [[0.8115], [0.4693], [0.143]], [[0.62], [0.0808], [0.3706]], [[0.8373], [0.1272], [0.609]], [[0.6775], [0.0951], [0.0585]], [[0.0692], [0.3095], [0.1]], [[0.7099], [0.6716], [0.1283]]], [[[0.9525], [0.9821], [0.805]], [[0.9311], [0.7114], [0.2664]], [[0.6691], [0.1902], [0.6978]], [[0.0446], [0.9747], [0.5218]], [[0.2469], [0.9717], [0.6434]], [[0.8834], [0.339], [0.2433]], [[0.3199], [0.7985], [0.3153]], [[0.8607], [0.4259], [0.4842]], [[0.1887], [0.0041], [0.431]], [[0.6197], [0.8973], [0.099]]], [[[0.9944], [0.6337], [0.2166]], [[0.3178], [0.6371], [0.8127]], [[0.946], [0.1977], [0.6483]], [[0.2354], [0.4149], [0.7762]], [[0.9978], [0.5254], [0.3167]], [[0.1448], [0.1299], [0.6774]], [[0.3711], [0.6053], [0.6494]], [[0.765], [0.3414], [0.6767]], [[0.0719], [0.1633], [0.4862]], [[0.043], [0.011], [0.0309]]], [[[0.6149], [0.1623], [0.3995]], [[0.1889], [0.5324], [0.6599]], [[0.6021], [0.2049], [0.8087]], [[0.8217], [0.566], [0.4474]], [[0.4901], [0.4694], [0.4783]], [[0.1066], [0.5793], [0.2527]], [[0.7508], [0.7003], [0.8566]], [[0.926], [0.5367], [0.3752]], [[0.8872], [0.4877], [0.3991]], [[0.3981], [0.8669], [0.1592]]], [[[0.1966], [0.5883], [0.293]], [[0.0534], [0.7311], [0.0863]], [[0.319], [0.04], [0.2078]], [[0.7761], [0.0468], [0.7566]], [[0.1016], [0.8815], [0.9445]], [[0.9284], [0.5924], [0.7437]], [[0.0379], [0.1678], [0.3363]], [[0.5535], [0.5164], [0.1992]], [[0.9718], [0.8588], [0.921]], [[0.026], [0.4264], [0.9976]]], [[[0.1344], [0.8939], [0.7848]], [[0.2175], [0.9839], [0.0371]], [[0.2079], [0.1331], [0.3807]], [[0.0962], [0.1492], [0.347]], [[0.576], [0.7885], [0.9069]], [[0.5127], [0.2866], [0.879]], [[0.3714], [0.8551], [0.1616]], [[0.7528], [0.6774], [0.1779]], [[0.3014], [0.9203], [0.3586]], [[0.6882], [0.3145], [0.6027]]]]]], 4, Con76376), 
LMin84862 = minimum_layer([[[[[[0.8815, 0.3347], [0.2108, 0.2932]], [[0.4428, 0.079], [0.7978, 0.204]]], [[[0.3264, 0.4158], [0.1837, 0.8323]], [[0.8149, 0.6345], [0.3784, 0.6202]]]]], [[[[[0.4451, 0.7326], [0.7469, 0.7467]], [[0.4718, 0.3586], [0.6244, 0.1631]]], [[[0.1644, 0.3111], [0.7104, 0.8496]], [[0.3437, 0.9078], [0.5707, 0.503]]]]]], Min84862), 
LZer14710 = zero_padding3D_layer(Min84862, 4, 0, 8, 0, 1, 0, Zer14710), 
LMul28472 = multiply_layer([Con76376,Zer14710], Mul28472), 
exec_layers([LLay62714,LLea93522,LMul39341,LAve91141,LRes16736,LUp_46654,LRes46920,LRes75902,LDot60112,LRes30453,LRes51739,LZer55252,LCon76376,LMin84862,LZer14710,LMul28472],["Lay62714","Lea93522","Mul39341","Ave91141","Res16736","Up_46654","Res46920","Res75902","Dot60112","Res30453","Res51739","Zer55252","Con76376","Min84862","Zer14710","Mul28472"],Mul28472,"Mul28472")

Actual (Unparsed): [[[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [-0.0077298, 0.2874403], [0.0000000, 0.2700372]], [[0.0000000, 0.0000000], [0.0000000, 0.0336856], [0.0000000, 0.1627086]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.2863053], [0.0000000, 0.2984628]], [[0.0000000, 0.0000000], [0.0000000, 0.1995503], [0.0000000, 0.3031581]]]]]

Expected (Unparsed): [[[[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]]],[[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]]],[[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]]],[[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0.0,0.0],[0,0.0]],[[0,0.0],[0.0,0.0],[0,0.0]],[[0,0.0],[0.0,0.0],[0,0.0]],[[0,0.0],[0.0,0.0],[0,0.0]],[[0,0.0],[0.0,0.0],[0,0.0]],[[0,0.0],[0.0,0.0],[0,0.0]],[[0,0.0],[0.0,0.0],[0,0.0]],[[0,0.0],[0.0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]]],[[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.0,0.0],[0,0.0]],[[0,0.0],[-0.007729843783264507,0.28744036],[0.0,0.27003720000000003]],[[0,0.0],[0.0,0.0336856],[0.0,0.16270856]]],[[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0,0.0],[0,0.0]],[[0,0.0],[0.0,0.28630532999999997],[0.0,0.29846278]],[[0,0.0],[0.0,0.19955024999999998],[0.0,0.3031581]]]]]

Actual:   [[[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0.0077, 0.2875], [0, 0.2701]], [[0, 0], [0, 0.0337], [0, 0.1628]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0.2864], [0, 0.2985]], [[0, 0], [0, 0.1996], [0, 0.3032]]]]]

Expected: [[[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0, 0], [0, 0]], [[0, 0], [-0.0077, 0.2875], [0, 0.2701]], [[0, 0], [0, 0.0337], [0, 0.1628]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0.2864], [0, 0.2985]], [[0, 0], [0, 0.1996], [0, 0.3032]]]]]