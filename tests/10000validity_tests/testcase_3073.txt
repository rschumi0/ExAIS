import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer53558 = tf.keras.layers.Input(shape=([2, 1, 3]))
in0Sub68641 = tf.keras.layers.Input(shape=([3, 3]))
in1Sub68641 = tf.keras.layers.Input(shape=([3, 3]))
in0Con16392 = tf.keras.layers.Input(shape=([4, 6]))
in0Con14167 = tf.keras.layers.Input(shape=([4, 9, 1]))
in0Ave14549 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con94519 = tf.keras.layers.Input(shape=([4, 9, 2, 1]))
in0Mul66359 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Mul66359 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Add72680 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))
in1Add72680 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))
in0Con37068 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))

Zer53558 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer53558', )(in0Zer53558)
Res86142 = keras.layers.Reshape((4, 9), name = 'Res86142', )(Zer53558)
Sub68641 = keras.layers.Subtract(name = 'Sub68641', )([in0Sub68641,in1Sub68641])
Zer24081 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer24081', )(Sub68641)
Con16392 = keras.layers.Concatenate(axis=2, name = 'Con16392', )([Zer24081,in0Con16392])
Mul44173 = keras.layers.Multiply(name = 'Mul44173', )([Res86142,Con16392])
Res9293 = keras.layers.Reshape((4, 9, 1), name = 'Res9293', )(Mul44173)
Con14167 = keras.layers.Concatenate(axis=3, name = 'Con14167', )([Res9293,in0Con14167])
Ave14549 = keras.layers.AveragePooling2D(pool_size=(1, 2), name = 'Ave14549', )(in0Ave14549)
Zer41940 = keras.layers.ZeroPadding2D(padding=((2, 0), (8, 0)), name = 'Zer41940', )(Ave14549)
Mul79663 = keras.layers.Multiply(name = 'Mul79663', )([Con14167,Zer41940])
Res19019 = keras.layers.Reshape((4, 9, 2, 1), name = 'Res19019', )(Mul79663)
Con94519 = keras.layers.Concatenate(axis=4, name = 'Con94519', )([Res19019,in0Con94519])
Mul66359 = keras.layers.Multiply(name = 'Mul66359', )([in0Mul66359,in1Mul66359])
Add72680 = keras.layers.Add(name = 'Add72680', )([in0Add72680,in1Add72680])
Zer43580 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (1, 0)), name = 'Zer43580', )(Add72680)
Con37068 = keras.layers.Concatenate(axis=4, name = 'Con37068', )([Zer43580,in0Con37068])
Add30263 = keras.layers.Add(name = 'Add30263', )([Mul66359,Con37068])
Zer73878 = keras.layers.ZeroPadding3D(padding=((2, 0), (7, 0), (0, 0)), name = 'Zer73878', )(Add30263)
Mul66294 = keras.layers.Multiply(name = 'Mul66294', )([Con94519,Zer73878])
model = tf.keras.models.Model(inputs=[in0Zer53558,in0Sub68641,in1Sub68641,in0Con16392,in0Con14167,in0Ave14549,in0Con94519,in0Mul66359,in1Mul66359,in0Add72680,in1Add72680,in0Con37068], outputs=Mul66294)
in0Zer53558 = tf.constant([[[[1.2055, 1.9783, 1.4705]], [[1.9436, 1.0049, 1.5515]]]])
in0Sub68641 = tf.constant([[[0.0986, 0.8688, 0.4289], [0.3772, 0.439, 0.4552], [0.9701, 0.2536, 0.4785]]])
in1Sub68641 = tf.constant([[[0.8899, 0.9884, 0.3161], [0.9277, 0.894, 0.7269], [0.3451, 0.2181, 0.261]]])
in0Con16392 = tf.constant([[[0.7802, 0.414, 0.147, 0.2473, 0.4231, 0.5408], [0.6519, 0.1806, 0.1085, 0.3901, 0.5145, 0.7558], [0.5706, 0.7304, 0.9257, 0.2005, 0.6421, 0.7249], [0.4778, 0.2064, 0.7185, 0.833, 0.9086, 0.2269]]])
in0Con14167 = tf.constant([[[[0.4728], [0.0568], [0.4546], [0.1894], [0.7885], [0.7966], [0.8055], [0.3626], [0.3008]], [[0.8077], [0.7593], [0.5432], [0.9903], [0.1079], [0.769], [0.1607], [0.008], [0.0631]], [[0.3955], [0.5725], [0.0353], [0.6934], [0.1298], [0.5819], [0.1419], [0.5297], [0.6626]], [[0.5642], [0.6594], [0.5914], [0.1695], [0.4065], [0.3827], [0.3326], [0.4906], [0.8798]]]])
in0Ave14549 = tf.constant([[[[1.4166, 1.1289], [1.7863, 1.9198]], [[1.9704, 1.7395], [1.684, 1.0797]]]])
in0Con94519 = tf.constant([[[[[0.2546], [0.8326]], [[0.5419], [0.7841]], [[0.976], [0.8505]], [[0.6854], [0.318]], [[0.4074], [0.835]], [[0.0571], [0.5038]], [[0.2256], [0.3645]], [[0.3767], [0.2146]], [[0.9438], [0.5481]]], [[[0.2353], [0.1865]], [[0.5694], [0.7477]], [[0.5948], [0.5774]], [[0.3857], [0.7635]], [[0.8621], [0.7775]], [[0.995], [0.5236]], [[0.3713], [0.8193]], [[0.161], [0.7542]], [[0.6475], [0.9389]]], [[[0.9174], [0.3288]], [[0.3978], [0.3284]], [[0.8735], [0.9942]], [[0.7749], [0.8819]], [[0.6387], [0.9554]], [[0.0973], [0.7886]], [[0.8133], [0.3611]], [[0.8695], [0.1535]], [[0.0494], [0.0822]]], [[[0.6472], [0.4394]], [[0.271], [0.2946]], [[0.0153], [0.4103]], [[0.2612], [0.2916]], [[0.7095], [0.4363]], [[0.4748], [0.6341]], [[0.6989], [0.4667]], [[0.1136], [0.2208]], [[0.8708], [0.72]]]]])
in0Mul66359 = tf.constant([[[[[0.8185, 0.5137], [0.1823, 0.6505]], [[0.8961, 0.1262], [0.5744, 0.9266]]], [[[0.6586, 0.3818], [0.8234, 0.4717]], [[0.2697, 0.2644], [0.0522, 0.2508]]]]])
in1Mul66359 = tf.constant([[[[[0.7836, 0.3352], [0.1234, 0.3147]], [[0.2284, 0.7893], [0.7232, 0.7645]]], [[[0.9829, 0.3541], [0.4266, 0.2974]], [[0.7386, 0.738], [0.197, 0.3662]]]]])
in0Add72680 = tf.constant([[[[[0.6373]]]]])
in1Add72680 = tf.constant([[[[[0.5254]]]]])
in0Con37068 = tf.constant([[[[[0.0195], [0.3394]], [[0.8206], [0.3937]]], [[[0.4044], [0.4394]], [[0.5498], [0.7989]]]]])
print (np.array2string(model.predict([in0Zer53558,in0Sub68641,in1Sub68641,in0Con16392,in0Con14167,in0Ave14549,in0Con94519,in0Mul66359,in1Mul66359,in0Add72680,in1Add72680,in0Con37068],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul66294.png')

LZer53558 = zero_padding2D_layer([[[[1.2055, 1.9783, 1.4705]], [[1.9436, 1.0049, 1.5515]]]], 1, 1, 1, 1, Zer53558), 
LRes86142 = reshape_layer(Zer53558, [4, 9], Res86142), 
LSub68641 = subtract_layer([[[0.0986, 0.8688, 0.4289], [0.3772, 0.439, 0.4552], [0.9701, 0.2536, 0.4785]]], [[[0.8899, 0.9884, 0.3161], [0.9277, 0.894, 0.7269], [0.3451, 0.2181, 0.261]]], Sub68641), 
LZer24081 = zero_padding1D_layer(Sub68641, 1, 0, Zer24081), 
LCon16392 = concatenate_layer([Zer24081,[[[0.7802, 0.414, 0.147, 0.2473, 0.4231, 0.5408], [0.6519, 0.1806, 0.1085, 0.3901, 0.5145, 0.7558], [0.5706, 0.7304, 0.9257, 0.2005, 0.6421, 0.7249], [0.4778, 0.2064, 0.7185, 0.833, 0.9086, 0.2269]]]], 2, Con16392), 
LMul44173 = multiply_layer([Res86142,Con16392], Mul44173), 
LRes9293 = reshape_layer(Mul44173, [4, 9, 1], Res9293), 
LCon14167 = concatenate_layer([Res9293,[[[[0.4728], [0.0568], [0.4546], [0.1894], [0.7885], [0.7966], [0.8055], [0.3626], [0.3008]], [[0.8077], [0.7593], [0.5432], [0.9903], [0.1079], [0.769], [0.1607], [0.008], [0.0631]], [[0.3955], [0.5725], [0.0353], [0.6934], [0.1298], [0.5819], [0.1419], [0.5297], [0.6626]], [[0.5642], [0.6594], [0.5914], [0.1695], [0.4065], [0.3827], [0.3326], [0.4906], [0.8798]]]]], 3, Con14167), 
LAve14549 = average_pooling2D_layer([[[[1.4166, 1.1289], [1.7863, 1.9198]], [[1.9704, 1.7395], [1.684, 1.0797]]]], 1, 2, Ave14549), 
LZer41940 = zero_padding2D_layer(Ave14549, 2, 0, 8, 0, Zer41940), 
LMul79663 = multiply_layer([Con14167,Zer41940], Mul79663), 
LRes19019 = reshape_layer(Mul79663, [4, 9, 2, 1], Res19019), 
LCon94519 = concatenate_layer([Res19019,[[[[[0.2546], [0.8326]], [[0.5419], [0.7841]], [[0.976], [0.8505]], [[0.6854], [0.318]], [[0.4074], [0.835]], [[0.0571], [0.5038]], [[0.2256], [0.3645]], [[0.3767], [0.2146]], [[0.9438], [0.5481]]], [[[0.2353], [0.1865]], [[0.5694], [0.7477]], [[0.5948], [0.5774]], [[0.3857], [0.7635]], [[0.8621], [0.7775]], [[0.995], [0.5236]], [[0.3713], [0.8193]], [[0.161], [0.7542]], [[0.6475], [0.9389]]], [[[0.9174], [0.3288]], [[0.3978], [0.3284]], [[0.8735], [0.9942]], [[0.7749], [0.8819]], [[0.6387], [0.9554]], [[0.0973], [0.7886]], [[0.8133], [0.3611]], [[0.8695], [0.1535]], [[0.0494], [0.0822]]], [[[0.6472], [0.4394]], [[0.271], [0.2946]], [[0.0153], [0.4103]], [[0.2612], [0.2916]], [[0.7095], [0.4363]], [[0.4748], [0.6341]], [[0.6989], [0.4667]], [[0.1136], [0.2208]], [[0.8708], [0.72]]]]]], 4, Con94519), 
LMul66359 = multiply_layer([[[[[[0.8185, 0.5137], [0.1823, 0.6505]], [[0.8961, 0.1262], [0.5744, 0.9266]]], [[[0.6586, 0.3818], [0.8234, 0.4717]], [[0.2697, 0.2644], [0.0522, 0.2508]]]]], [[[[[0.7836, 0.3352], [0.1234, 0.3147]], [[0.2284, 0.7893], [0.7232, 0.7645]]], [[[0.9829, 0.3541], [0.4266, 0.2974]], [[0.7386, 0.738], [0.197, 0.3662]]]]]], Mul66359), 
LAdd72680 = add_layer([[[[[[0.6373]]]]], [[[[[0.5254]]]]]], Add72680), 
LZer43580 = zero_padding3D_layer(Add72680, 1, 0, 1, 0, 1, 0, Zer43580), 
LCon37068 = concatenate_layer([Zer43580,[[[[[0.0195], [0.3394]], [[0.8206], [0.3937]]], [[[0.4044], [0.4394]], [[0.5498], [0.7989]]]]]], 4, Con37068), 
LAdd30263 = add_layer([Mul66359,Con37068], Add30263), 
LZer73878 = zero_padding3D_layer(Add30263, 2, 0, 7, 0, 0, 0, Zer73878), 
LMul66294 = multiply_layer([Con94519,Zer73878], Mul66294), 
exec_layers([LZer53558,LRes86142,LSub68641,LZer24081,LCon16392,LMul44173,LRes9293,LCon14167,LAve14549,LZer41940,LMul79663,LRes19019,LCon94519,LMul66359,LAdd72680,LZer43580,LCon37068,LAdd30263,LZer73878,LMul66294],["Zer53558","Res86142","Sub68641","Zer24081","Con16392","Mul44173","Res9293","Con14167","Ave14549","Zer41940","Mul79663","Res19019","Con94519","Mul66359","Add72680","Zer43580","Con37068","Add30263","Zer73878","Mul66294"],Mul66294,"Mul66294")

Actual (Unparsed): [[[[[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[-0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.1666764], [0.0000000, 0.0835212]], [[0.0000000, 0.0454584], [0.4195744, 0.0905914]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0612980], [0.0000000, 0.1279941]], [[0.0000000, 0.6486826], [1.4546943, 0.6413350]]]]]

Expected (Unparsed): [[[[[0,0.0],[0.0,0.0]],[[0,0.0],[0.0,0.0]],[[0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]]],[[[-0.0,0.0],[0.0,0.0]],[[-0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]]],[[[-0.0,0.0],[0.0,0.0]],[[-0.0,0.0],[0.0,0.0]],[[-0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.16667640268000003],[0.0,0.083521245725]],[[0.0,0.045458357204],[0.4195743933826048,0.09059144454]]],[[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.0],[0.0,0.0]],[[0.0,0.061298035168],[0.0,0.127994134464]],[[0.0,0.64868260576],[1.4546942250830726,0.6413349312000001]]]]]

Actual:   [[[[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]], [[[-0, 0], [0, 0]], [[-0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]], [[[-0, 0], [0, 0]], [[-0, 0], [0, 0]], [[-0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0.1667], [0, 0.0836]], [[0, 0.0455], [0.4196, 0.0906]]], [[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0.0613], [0, 0.128]], [[0, 0.6487], [1.4547, 0.6414]]]]]

Expected: [[[[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]], [[[-0, 0], [0, 0]], [[-0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]], [[[-0, 0], [0, 0]], [[-0, 0], [0, 0]], [[-0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0.1667], [0, 0.0836]], [[0, 0.0455], [0.4196, 0.0906]]], [[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0.0613], [0, 0.128]], [[0, 0.6487], [1.4547, 0.6414]]]]]