import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave28159 = tf.keras.layers.Input(shape=([1, 1]))
in1Ave28159 = tf.keras.layers.Input(shape=([1, 1]))
in0Min98845 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in1Min98845 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in0Con9995 = tf.keras.layers.Input(shape=([1, 2]))
in0Ave97955 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in1Ave97955 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))

Ave28159 = keras.layers.Average(name = 'Ave28159', )([in0Ave28159,in1Ave28159])
Den2807 = keras.layers.Dense(2,name = 'Den2807', )(Ave28159)
Zer96395 = keras.layers.ZeroPadding1D(padding=((5, 0)), name = 'Zer96395', )(Den2807)
Min98845 = keras.layers.Minimum(name = 'Min98845', )([in0Min98845,in1Min98845])
Res61618 = keras.layers.Reshape((2, 1, 4), name = 'Res61618', )(Min98845)
Ave37912 = keras.layers.AveragePooling2D(pool_size=(2, 1), name = 'Ave37912', )(Res61618)
Res67076 = keras.layers.Reshape((1, 4), name = 'Res67076', )(Ave37912)
Con9995 = keras.layers.Concatenate(axis=2, name = 'Con9995', )([Res67076,in0Con9995])
Ave97955 = keras.layers.Average(name = 'Ave97955', )([in0Ave97955,in1Ave97955])
Res42684 = keras.layers.Reshape((1, 1, 2), name = 'Res42684', )(Ave97955)
Res4755 = keras.layers.Reshape((1, 2), name = 'Res4755', )(Res42684)
Dot94986 = keras.layers.Dot(axes=(1, 1), name = 'Dot94986', )([Con9995,Res4755])
Add10063 = keras.layers.Add(name = 'Add10063', )([Zer96395,Dot94986])
Per49666 = keras.layers.Permute((1,2), name = 'Per49666',)(Add10063)
model = tf.keras.models.Model(inputs=[in0Ave28159,in1Ave28159,in0Min98845,in1Min98845,in0Con9995,in0Ave97955,in1Ave97955], outputs=Per49666)
w = model.get_layer('Den2807').get_weights() 
w[0] = np.array([[0.1578, 0.7369]])
w[1] = np.array([0.8537, 0.3407])
model.get_layer('Den2807').set_weights(w) 
in0Ave28159 = tf.constant([[[0.3042]]])
in1Ave28159 = tf.constant([[[0.9225]]])
in0Min98845 = tf.constant([[[[[0.7409, 0.0204], [0.268, 0.0881]]], [[[0.0367, 0.9708], [0.0805, 0.8941]]]]])
in1Min98845 = tf.constant([[[[[0.0941, 0.9637], [0.1432, 0.1747]]], [[[0.9207, 0.9808], [0.7373, 0.1988]]]]])
in0Con9995 = tf.constant([[[0.996, 0.7359]]])
in0Ave97955 = tf.constant([[[[[0.6103], [0.6732]]]]])
in1Ave97955 = tf.constant([[[[[0.4679], [0.1934]]]]])
print (np.array2string(model.predict([in0Ave28159,in1Ave28159,in0Min98845,in1Min98845,in0Con9995,in0Ave97955,in1Ave97955],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Per49666.png')

LAve28159 = average_layer([[[[0.3042]]], [[[0.9225]]]], Ave28159), 
LDen2807 = dense_layer(Ave28159, [[0.1578, 0.7369]],[0.8537, 0.3407], Den2807), 
LZer96395 = zero_padding1D_layer(Den2807, 5, 0, Zer96395), 
LMin98845 = minimum_layer([[[[[[0.7409, 0.0204], [0.268, 0.0881]]], [[[0.0367, 0.9708], [0.0805, 0.8941]]]]], [[[[[0.0941, 0.9637], [0.1432, 0.1747]]], [[[0.9207, 0.9808], [0.7373, 0.1988]]]]]], Min98845), 
LRes61618 = reshape_layer(Min98845, [2, 1, 4], Res61618), 
LAve37912 = average_pooling2D_layer(Res61618, 2, 1, Ave37912), 
LRes67076 = reshape_layer(Ave37912, [1, 4], Res67076), 
LCon9995 = concatenate_layer([Res67076,[[[0.996, 0.7359]]]], 2, Con9995), 
LAve97955 = average_layer([[[[[[0.6103], [0.6732]]]]], [[[[[0.4679], [0.1934]]]]]], Ave97955), 
LRes42684 = reshape_layer(Ave97955, [1, 1, 2], Res42684), 
LRes4755 = reshape_layer(Res42684, [1, 2], Res4755), 
LDot94986 = dot_layer(Con9995,Res4755, 1, 1, Dot94986), 
LAdd10063 = add_layer([Zer96395,Dot94986], Add10063), 
LPer49666 = permute_layer(Add10063, 1,2, Per49666), 
exec_layers([LAve28159,LDen2807,LZer96395,LMin98845,LRes61618,LAve37912,LRes67076,LCon9995,LAve97955,LRes42684,LRes4755,LDot94986,LAdd10063,LPer49666],["Ave28159","Den2807","Zer96395","Min98845","Res61618","Ave37912","Res67076","Con9995","Ave97955","Res42684","Res4755","Dot94986","Add10063","Per49666"],Per49666,"Per49666")

Actual (Unparsed): [[[0.0352571, 0.0283378], [0.2671780, 0.2147435], [0.0602983, 0.0484646], [0.0773339, 0.0621569], [0.5369436, 0.4315668], [1.3472103, 1.1115431]]]

Expected (Unparsed): [[[0.03525713999999999,0.02833782],[0.26717795999999994,0.21474348000000001],[0.060298334999999995,0.048464605],[0.07733389499999999,0.062156885],[0.5369436,0.43156680000000003],[1.3472103199999999,1.111543085]]]

Actual:   [[[0.0353, 0.0284], [0.2672, 0.2148], [0.0603, 0.0485], [0.0774, 0.0622], [0.537, 0.4316], [1.3473, 1.1116]]]

Expected: [[[0.0353, 0.0284], [0.2672, 0.2148], [0.0603, 0.0485], [0.0774, 0.0622], [0.537, 0.4316], [1.3473, 1.1116]]]