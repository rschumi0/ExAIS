import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max15694 = tf.keras.layers.Input(shape=([1, 1]))
in1Max15694 = tf.keras.layers.Input(shape=([1, 1]))
in0Con68068 = tf.keras.layers.Input(shape=([2, 1]))
in0Thr10446 = tf.keras.layers.Input(shape=([2, 2]))

Max15694 = keras.layers.Maximum(name = 'Max15694', )([in0Max15694,in1Max15694])
Zer69296 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer69296', )(Max15694)
Con68068 = keras.layers.Concatenate(axis=2, name = 'Con68068', )([Zer69296,in0Con68068])
Thr10446 = keras.layers.ThresholdedReLU(theta=8.8758578326485, name = 'Thr10446', input_shape=(2, 2))(in0Thr10446)
Min68442 = keras.layers.Minimum(name = 'Min68442', )([Con68068,Thr10446])
model = tf.keras.models.Model(inputs=[in0Max15694,in1Max15694,in0Con68068,in0Thr10446], outputs=Min68442)
in0Max15694 = tf.constant([[[0.2942]]])
in1Max15694 = tf.constant([[[0.4776]]])
in0Con68068 = tf.constant([[[0.5233], [0.2985]]])
in0Thr10446 = tf.constant([[[0.8507, 0.6519], [0.4504, 0.9538]]])
print (np.array2string(model.predict([in0Max15694,in1Max15694,in0Con68068,in0Thr10446],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min68442.png')

LMax15694 = maximum_layer([[[[0.2942]]], [[[0.4776]]]], Max15694), 
LZer69296 = zero_padding1D_layer(Max15694, 1, 0, Zer69296), 
LCon68068 = concatenate_layer([Zer69296,[[[0.5233], [0.2985]]]], 2, Con68068), 
LThr10446 = thresholded_relu_layer([[[0.8507, 0.6519], [0.4504, 0.9538]]], 8.8758578326485, Thr10446), 
LMin68442 = minimum_layer([Con68068,Thr10446], Min68442), 
exec_layers([LMax15694,LZer69296,LCon68068,LThr10446,LMin68442],["Max15694","Zer69296","Con68068","Thr10446","Min68442"],Min68442,"Min68442")

Actual (Unparsed): [[[0.0000000, 0.0000000], [0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0,0],[0,0]]]

Actual:   [[[0, 0], [0, 0]]]

Expected: [[[0, 0], [0, 0]]]