import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con7589 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))

Con7589 = keras.layers.Conv3DTranspose(3, (1, 1, 1),strides=(1, 11, 1), padding='valid', name = 'Con7589', )(in0Con7589)
Res14501 = keras.layers.Reshape((1, 11, 6), name = 'Res14501', )(Con7589)
Res60607 = keras.layers.Reshape((1, 66), name = 'Res60607', )(Res14501)
Cro36976 = keras.layers.Cropping1D(cropping=((0, 0)), name = 'Cro36976', )(Res60607)
Res30089 = keras.layers.Reshape((1, 66, 1), name = 'Res30089', )(Cro36976)
Cro16762 = keras.layers.Cropping2D(cropping=((0, 0), (57, 3)), name = 'Cro16762', )(Res30089)
model = tf.keras.models.Model(inputs=[in0Con7589], outputs=Cro16762)
w = model.get_layer('Con7589').get_weights() 
w[0] = np.array([[[[[0.0961], [0.4969], [0.3881]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con7589').set_weights(w) 
in0Con7589 = tf.constant([[[[[0.385], [0.6078]]]]])
print (np.array2string(model.predict([in0Con7589],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Cro16762.png')

LCon7589 = conv3D_transpose_layer([[[[[0.385], [0.6078]]]]], 1, 1, 1,[[[[[0.0961], [0.4969], [0.3881]]]]],[0, 0, 0], 1, 11, 1, false, Con7589), 
LRes14501 = reshape_layer(Con7589, [1, 11, 6], Res14501), 
LRes60607 = reshape_layer(Res14501, [1, 66], Res60607), 
LCro36976 = cropping1D_layer(Res60607, 0, 0, Cro36976), 
LRes30089 = reshape_layer(Cro36976, [1, 66, 1], Res30089), 
LCro16762 = cropping2D_layer(Res30089, 0, 0, 57, 3, Cro16762), 
exec_layers([LCon7589,LRes14501,LRes60607,LCro36976,LRes30089,LCro16762],["Con7589","Res14501","Res60607","Cro36976","Res30089","Cro16762"],Cro16762,"Cro16762")

Actual (Unparsed): [[[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]]]]

Expected (Unparsed): [[[[0],[0],[0],[0],[0],[0]]]]

Actual:   [[[[0], [0], [0], [0], [0], [0]]]]

Expected: [[[[0], [0], [0], [0], [0], [0]]]]