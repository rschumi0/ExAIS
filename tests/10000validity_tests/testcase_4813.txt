import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub10265 = tf.keras.layers.Input(shape=([3, 2]))
in1Sub10265 = tf.keras.layers.Input(shape=([3, 2]))
in0Mul43407 = tf.keras.layers.Input(shape=([2, 1]))
in1Mul43407 = tf.keras.layers.Input(shape=([2, 1]))
in0Con66118 = tf.keras.layers.Input(shape=([3, 2]))

Sub10265 = keras.layers.Subtract(name = 'Sub10265', )([in0Sub10265,in1Sub10265])
Den41636 = keras.layers.Dense(3,name = 'Den41636', )(Sub10265)
Mul43407 = keras.layers.Multiply(name = 'Mul43407', )([in0Mul43407,in1Mul43407])
Zer77539 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer77539', )(Mul43407)
Con66118 = keras.layers.Concatenate(axis=2, name = 'Con66118', )([Zer77539,in0Con66118])
Mul76502 = keras.layers.Multiply(name = 'Mul76502', )([Den41636,Con66118])
Lay9181 = keras.layers.LayerNormalization(axis=1, epsilon=1.8720524678583774, name = 'Lay9181', )(Mul76502)
model = tf.keras.models.Model(inputs=[in0Sub10265,in1Sub10265,in0Mul43407,in1Mul43407,in0Con66118], outputs=Lay9181)
w = model.get_layer('Den41636').get_weights() 
w[0] = np.array([[0.1414, 0.3818, 0.6988], [0.1158, 0.1688, 0.5186]])
w[1] = np.array([0.1116, 0.8105, 0.5411])
model.get_layer('Den41636').set_weights(w) 
in0Sub10265 = tf.constant([[[0.9312, 0.7355], [0.8991, 0.3482], [0.4734, 0.8077]]])
in1Sub10265 = tf.constant([[[0.9978, 0.1082], [0.0396, 0.7616], [0.4528, 0.9221]]])
in0Mul43407 = tf.constant([[[0.3007], [0.6631]]])
in1Mul43407 = tf.constant([[[0.4552], [0.6077]]])
in0Con66118 = tf.constant([[[0.5243, 0.1762], [0.0482, 0.1749], [0.0027, 0.5982]]])
print (np.array2string(model.predict([in0Sub10265,in1Sub10265,in0Mul43407,in1Mul43407,in0Con66118],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Lay9181.png')

LSub10265 = subtract_layer([[[0.9312, 0.7355], [0.8991, 0.3482], [0.4734, 0.8077]]], [[[0.9978, 0.1082], [0.0396, 0.7616], [0.4528, 0.9221]]], Sub10265), 
LDen41636 = dense_layer(Sub10265, [[0.1414, 0.3818, 0.6988], [0.1158, 0.1688, 0.5186]],[0.1116, 0.8105, 0.5411], Den41636), 
LMul43407 = multiply_layer([[[[0.3007], [0.6631]]], [[[0.4552], [0.6077]]]], Mul43407), 
LZer77539 = zero_padding1D_layer(Mul43407, 1, 0, Zer77539), 
LCon66118 = concatenate_layer([Zer77539,[[[0.5243, 0.1762], [0.0482, 0.1749], [0.0027, 0.5982]]]], 2, Con66118), 
LMul76502 = multiply_layer([Den41636,Con66118], Mul76502), 
LLay9181 = layer_normalization_layer(Mul76502, 1, 1.8720524678583774, Lay9181), 
exec_layers([LSub10265,LDen41636,LMul43407,LZer77539,LCon66118,LMul76502,LLay9181],["Sub10265","Den41636","Mul43407","Zer77539","Con66118","Mul76502","Lay9181"],Lay9181,"Lay9181")

Actual (Unparsed): [[[-0.0161181, 0.2120821, -0.0413826], [0.0024142, -0.0882082, -0.0284421], [0.0137039, -0.1238739, 0.0698246]]]

Expected (Unparsed): [[[-0.01611810780352525,0.21208212384280986,-0.04138256645108112],[0.002414187624544122,-0.08820822895501096,-0.028442059307023836],[0.01370392017898113,-0.1238738948877989,0.06982462575810496]]]

Actual:   [[[-0.0161, 0.2121, -0.0413], [0.0025, -0.0882, -0.0284], [0.0138, -0.1238, 0.0699]]]

Expected: [[[-0.0161, 0.2121, -0.0413], [0.0025, -0.0882, -0.0284], [0.0138, -0.1238, 0.0699]]]