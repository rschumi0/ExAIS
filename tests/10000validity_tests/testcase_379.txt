import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul25707 = tf.keras.layers.Input(shape=([1, 1]))
in1Mul25707 = tf.keras.layers.Input(shape=([1, 1]))
in0Dot74565 = tf.keras.layers.Input(shape=([3]))
in1Dot74565 = tf.keras.layers.Input(shape=([3]))

Mul25707 = keras.layers.Multiply(name = 'Mul25707', )([in0Mul25707,in1Mul25707])
Res82513 = keras.layers.Reshape((1, 1, 1), name = 'Res82513', )(Mul25707)
Glo21096 = keras.layers.GlobalMaxPool2D(name = 'Glo21096', )(Res82513)
Den70629 = keras.layers.Dense(3,name = 'Den70629', )(Glo21096)
Res25248 = keras.layers.Reshape((3, 1), name = 'Res25248', )(Den70629)
Res97790 = keras.layers.Reshape((3, 1, 1), name = 'Res97790', )(Res25248)
Res17215 = keras.layers.Reshape((3, 1, 1, 1), name = 'Res17215', )(Res97790)
Zer64522 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (2, 0)), name = 'Zer64522', )(Res17215)
Dot74565 = keras.layers.Dot(axes=(1, 1), name = 'Dot74565', )([in0Dot74565,in1Dot74565])
Res4893 = keras.layers.Reshape((1, 1), name = 'Res4893', )(Dot74565)
Res53873 = keras.layers.Reshape((1, 1, 1), name = 'Res53873', )(Res4893)
Res7031 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res7031', )(Res53873)
Up_12336 = keras.layers.UpSampling3D(size=(1, 2, 2), name = 'Up_12336', )(Res7031)
Zer53915 = keras.layers.ZeroPadding3D(padding=((2, 0), (1, 0), (1, 0)), name = 'Zer53915', )(Up_12336)
Mul12725 = keras.layers.Multiply(name = 'Mul12725', )([Zer64522,Zer53915])
model = tf.keras.models.Model(inputs=[in0Mul25707,in1Mul25707,in0Dot74565,in1Dot74565], outputs=Mul12725)
w = model.get_layer('Den70629').get_weights() 
w[0] = np.array([[0.5967, 0.9807, 0.5582]])
w[1] = np.array([0.4284, 0.8348, 0.7464])
model.get_layer('Den70629').set_weights(w) 
in0Mul25707 = tf.constant([[[0.1519]]])
in1Mul25707 = tf.constant([[[0.5291]]])
in0Dot74565 = tf.constant([[0.4494, 0.5028, 0.398]])
in1Dot74565 = tf.constant([[0.2976, 0.3702, 0.0559]])
print (np.array2string(model.predict([in0Mul25707,in1Mul25707,in0Dot74565,in1Dot74565],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul12725.png')

LMul25707 = multiply_layer([[[[0.1519]]], [[[0.5291]]]], Mul25707), 
LRes82513 = reshape_layer(Mul25707, [1, 1, 1], Res82513), 
LGlo21096 = global_max_pool2D_layer(Res82513, Glo21096), 
LDen70629 = dense_layer(Glo21096, [[0.5967, 0.9807, 0.5582]],[0.4284, 0.8348, 0.7464], Den70629), 
LRes25248 = reshape_layer(Den70629, [3, 1], Res25248), 
LRes97790 = reshape_layer(Res25248, [3, 1, 1], Res97790), 
LRes17215 = reshape_layer(Res97790, [3, 1, 1, 1], Res17215), 
LZer64522 = zero_padding3D_layer(Res17215, 0, 0, 2, 0, 2, 0, Zer64522), 
LDot74565 = dot_layer([[0.4494, 0.5028, 0.398]], [[0.2976, 0.3702, 0.0559]], 1, 1, Dot74565), 
LRes4893 = reshape_layer(Dot74565, [1, 1], Res4893), 
LRes53873 = reshape_layer(Res4893, [1, 1, 1], Res53873), 
LRes7031 = reshape_layer(Res53873, [1, 1, 1, 1], Res7031), 
LUp_12336 = up_sampling3D_layer(Res7031, 1, 2, 2, Up_12336), 
LZer53915 = zero_padding3D_layer(Up_12336, 2, 0, 1, 0, 1, 0, Zer53915), 
LMul12725 = multiply_layer([Zer64522,Zer53915], Mul12725), 
exec_layers([LMul25707,LRes82513,LGlo21096,LDen70629,LRes25248,LRes97790,LRes17215,LZer64522,LDot74565,LRes4893,LRes53873,LRes7031,LUp_12336,LZer53915,LMul12725],["Mul25707","Res82513","Glo21096","Den70629","Res25248","Res97790","Res17215","Zer64522","Dot74565","Res4893","Res53873","Res7031","Up_12336","Zer53915","Mul12725"],Mul12725,"Mul12725")

Actual (Unparsed): [[[[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.2707117]]]]]

Expected (Unparsed): [[[[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0.0]]],[[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0.0]]],[[[0],[0],[0]],[[0],[0.0],[0.0]],[[0],[0.0],[0.2707116993424958]]]]]

Actual:   [[[[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0.2708]]]]]

Expected: [[[[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0.2708]]]]]