import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul49246 = tf.keras.layers.Input(shape=([2, 1]))
in1Mul49246 = tf.keras.layers.Input(shape=([2, 1]))
in0Con15991 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Con30730 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0ReL9437 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Con83173 = tf.keras.layers.Input(shape=([2, 3, 1]))

Mul49246 = keras.layers.Multiply(name = 'Mul49246', )([in0Mul49246,in1Mul49246])
Res97513 = keras.layers.Reshape((2, 1, 1), name = 'Res97513', )(Mul49246)
Con15991 = keras.layers.Concatenate(axis=3, name = 'Con15991', )([Res97513,in0Con15991])
Con30730 = keras.layers.Conv2D(3, (1, 1),strides=(9, 1), padding='valid', dilation_rate=(1, 1), name = 'Con30730', )(in0Con30730)
Zer87141 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer87141', )(Con30730)
Add49909 = keras.layers.Add(name = 'Add49909', )([Con15991,Zer87141])
Zer99147 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer99147', )(Add49909)
ReL9437 = keras.layers.ReLU(max_value=3.4138173424631644, negative_slope=1.0131285590838333, threshold=3.2150891669367967, name = 'ReL9437', input_shape=(1, 2, 2))(in0ReL9437)
Zer62363 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer62363', )(ReL9437)
Con83173 = keras.layers.Concatenate(axis=3, name = 'Con83173', )([Zer62363,in0Con83173])
Max99157 = keras.layers.Maximum(name = 'Max99157', )([Zer99147,Con83173])
Res31961 = keras.layers.Reshape((2, 9), name = 'Res31961', )(Max99157)
Fla90884 = keras.layers.Flatten(name = 'Fla90884', )(Res31961)
Res52045 = keras.layers.Reshape((18, 1), name = 'Res52045', )(Fla90884)
Con90083 = keras.layers.Conv1D(2, (11),strides=(1), padding='same', dilation_rate=(1), name = 'Con90083', )(Res52045)
model = tf.keras.models.Model(inputs=[in0Mul49246,in1Mul49246,in0Con15991,in0Con30730,in0ReL9437,in0Con83173], outputs=Con90083)
w = model.get_layer('Con30730').get_weights() 
w[0] = np.array([[[[0.1762, 0.0125, 0.5449], [0.7425, 0.4421, 0.3701]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con30730').set_weights(w) 
w = model.get_layer('Con90083').get_weights() 
w[0] = np.array([[[0.8542, 0.3651]], [[0.8029, 0.1127]], [[0.558, 0.4303]], [[0.3185, 0.8263]], [[0.0525, 0.7084]], [[0.9342, 0.0148]], [[0.6292, 0.5577]], [[0.9299, 0.6769]], [[0.6038, 0.7546]], [[0.0864, 0.1476]], [[0.8477, 0.4307]]])
w[1] = np.array([0, 0])
model.get_layer('Con90083').set_weights(w) 
in0Mul49246 = tf.constant([[[0.5294], [0.6422]]])
in1Mul49246 = tf.constant([[[0.6207], [0.0678]]])
in0Con15991 = tf.constant([[[[0.9521, 0.471]], [[0.5209, 0.1999]]]])
in0Con30730 = tf.constant([[[[0.4352, 0.5839]]]])
in0ReL9437 = tf.constant([[[[0.4134, 0.6569], [0.0059, 0.1962]]]])
in0Con83173 = tf.constant([[[[0.5442], [0.6013], [0.7216]], [[0.9918], [0.1873], [0.4974]]]])
print (np.array2string(model.predict([in0Mul49246,in1Mul49246,in0Con15991,in0Con30730,in0ReL9437,in0Con83173],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con90083.png')

LMul49246 = multiply_layer([[[[0.5294], [0.6422]]], [[[0.6207], [0.0678]]]], Mul49246), 
LRes97513 = reshape_layer(Mul49246, [2, 1, 1], Res97513), 
LCon15991 = concatenate_layer([Res97513,[[[[0.9521, 0.471]], [[0.5209, 0.1999]]]]], 3, Con15991), 
LCon30730 = conv2D_layer([[[[0.4352, 0.5839]]]], 1, 1,[[[[0.1762, 0.0125, 0.5449], [0.7425, 0.4421, 0.3701]]]],[0, 0, 0], 9, 1, false, 1, 1, Con30730), 
LZer87141 = zero_padding2D_layer(Con30730, 1, 0, 0, 0, Zer87141), 
LAdd49909 = add_layer([Con15991,Zer87141], Add49909), 
LZer99147 = zero_padding2D_layer(Add49909, 0, 0, 2, 0, Zer99147), 
LReL9437 = relu_layer([[[[0.4134, 0.6569], [0.0059, 0.1962]]]], 3.4138173424631644, 1.0131285590838333, 3.2150891669367967, ReL9437), 
LZer62363 = zero_padding2D_layer(ReL9437, 1, 0, 1, 0, Zer62363), 
LCon83173 = concatenate_layer([Zer62363,[[[[0.5442], [0.6013], [0.7216]], [[0.9918], [0.1873], [0.4974]]]]], 3, Con83173), 
LMax99157 = maximum_layer([Zer99147,Con83173], Max99157), 
LRes31961 = reshape_layer(Max99157, [2, 9], Res31961), 
LFla90884 = flatten_layer(Res31961, Fla90884), 
LRes52045 = reshape_layer(Fla90884, [18, 1], Res52045), 
LCon90083 = conv1D_layer(Res52045, 11,[[[0.8542, 0.3651]], [[0.8029, 0.1127]], [[0.558, 0.4303]], [[0.3185, 0.8263]], [[0.0525, 0.7084]], [[0.9342, 0.0148]], [[0.6292, 0.5577]], [[0.9299, 0.6769]], [[0.6038, 0.7546]], [[0.0864, 0.1476]], [[0.8477, 0.4307]]],[0, 0], 1, true, 1, Con90083), 
exec_layers([LMul49246,LRes97513,LCon15991,LCon30730,LZer87141,LAdd49909,LZer99147,LReL9437,LZer62363,LCon83173,LMax99157,LRes31961,LFla90884,LRes52045,LCon90083],["Mul49246","Res97513","Con15991","Con30730","Zer87141","Add49909","Zer99147","ReL9437","Zer62363","Con83173","Max99157","Res31961","Fla90884","Res52045","Con90083"],Con90083,"Con90083")

Actual (Unparsed): [[[1.0157736, 0.6273489], [0.6729160, 0.5337796], [1.7069427, 0.9203658], [1.4800889, 1.4918148], [1.4944537, 1.8324087], [2.3932121, 1.6153238], [2.8863092, 1.9387610], [2.1027952, 1.4912379], [1.7631369, 1.9638200], [2.0883187, 2.2590837], [2.6482170, 2.0817951], [3.2002653, 1.1134055], [2.5747096, 2.0732825], [2.0951799, 2.2506580], [2.2006886, 1.7622575], [2.4244334, 1.1322724], [2.0797436, 1.2850298], [0.9322393, 1.1035683]]]

Expected (Unparsed): [[[1.0157735899999998,0.6273488899999999],[0.672915976266,0.533779628406],[1.706942667312,0.920365760408],[1.480088952604,1.491814818468],[1.494453699542,1.8324086688019998],[2.393212156536,1.615323778066],[2.886309243436,1.9387609889839998],[2.1027951754500003,1.4912379240720002],[1.7631368577300002,1.9638199966540002],[2.08831865764,2.2590836789739996],[2.6482170483370004,2.081795112871],[3.200265304059,1.113405517331],[2.574709667185,2.0732824952430002],[2.095179916475,2.2506580482210006],[2.200688658767,1.762257484468],[2.4244334287909997,1.132272412586],[2.0797436168770003,1.285029793171],[0.932239324204,1.103568321717]]]

Actual:   [[[1.0158, 0.6274], [0.673, 0.5338], [1.707, 0.9204], [1.4801, 1.4919], [1.4945, 1.8325], [2.3933, 1.6154], [2.8864, 1.9388], [2.1028, 1.4913], [1.7632, 1.9639], [2.0884, 2.2591], [2.6483, 2.0818], [3.2003, 1.1135], [2.5748, 2.0733], [2.0952, 2.2507], [2.2007, 1.7623], [2.4245, 1.1323], [2.0798, 1.2851], [0.9323, 1.1036]]]

Expected: [[[1.0158, 0.6274], [0.673, 0.5338], [1.707, 0.9204], [1.4801, 1.4919], [1.4945, 1.8325], [2.3933, 1.6154], [2.8864, 1.9388], [2.1028, 1.4913], [1.7632, 1.9639], [2.0884, 2.2591], [2.6483, 2.0818], [3.2003, 1.1135], [2.5748, 2.0733], [2.0952, 2.2507], [2.2007, 1.7623], [2.4245, 1.1323], [2.0798, 1.2851], [0.9323, 1.1036]]]