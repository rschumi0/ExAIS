import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo86911 = tf.keras.layers.Input(shape=([1, 1]))
in0Con34487 = tf.keras.layers.Input(shape=([3, 3, 3, 1]))
in0Sub34090 = tf.keras.layers.Input(shape=([3, 3, 3, 2]))
in1Sub34090 = tf.keras.layers.Input(shape=([3, 3, 3, 2]))
in0Max79683 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in1Max79683 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in0Con36886 = tf.keras.layers.Input(shape=([3, 3, 3, 1]))

Glo86911 = keras.layers.GlobalMaxPool1D(name = 'Glo86911', )(in0Glo86911)
Res23171 = keras.layers.Reshape((1, 1), name = 'Res23171', )(Glo86911)
Res88733 = keras.layers.Reshape((1, 1, 1), name = 'Res88733', )(Res23171)
Res10385 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res10385', )(Res88733)
Zer38877 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (2, 0)), name = 'Zer38877', )(Res10385)
Con34487 = keras.layers.Concatenate(axis=4, name = 'Con34487', )([Zer38877,in0Con34487])
Sub34090 = keras.layers.Subtract(name = 'Sub34090', )([in0Sub34090,in1Sub34090])
Sub68706 = keras.layers.Subtract(name = 'Sub68706', )([Con34487,Sub34090])
Max79683 = keras.layers.Maximum(name = 'Max79683', )([in0Max79683,in1Max79683])
Zer23399 = keras.layers.ZeroPadding3D(padding=((2, 0), (1, 0), (1, 0)), name = 'Zer23399', )(Max79683)
Con36886 = keras.layers.Concatenate(axis=4, name = 'Con36886', )([Zer23399,in0Con36886])
Ave91994 = keras.layers.Average(name = 'Ave91994', )([Sub68706,Con36886])
model = tf.keras.models.Model(inputs=[in0Glo86911,in0Con34487,in0Sub34090,in1Sub34090,in0Max79683,in1Max79683,in0Con36886], outputs=Ave91994)
in0Glo86911 = tf.constant([[[1.3272]]])
in0Con34487 = tf.constant([[[[[0.5604], [0.1892], [0.0268]], [[0.8506], [0.8418], [0.1266]], [[0.6188], [0.0224], [0.59]]], [[[0.2224], [0.0025], [0.0277]], [[0.6585], [0.1624], [0.4255]], [[0.2559], [0.6749], [0.0022]]], [[[0.7022], [0.8598], [0.7061]], [[0.8841], [0.3114], [0.6805]], [[0.6566], [0.2642], [0.9837]]]]])
in0Sub34090 = tf.constant([[[[[0.9782, 0.7703], [0.7987, 0.8856], [0.7463, 0.8434]], [[0.0811, 0.7839], [0.8526, 0.2908], [0.7133, 0.7088]], [[0.4167, 0.3532], [0.081, 0.7182], [0.5667, 0.3856]]], [[[0.592, 0.4585], [0.8593, 0.5528], [0.572, 0.0839]], [[0.3016, 0.2436], [0.461, 0.4896], [0.332, 0.9334]], [[0.0695, 0.9349], [0.7051, 0.7634], [0.4431, 0.9921]]], [[[0.4746, 0.5454], [0.8377, 0.0287], [0.172, 0.2502]], [[0.4105, 0.1098], [0.8351, 0.2919], [0.4984, 0.2853]], [[0.7618, 0.0837], [0.7716, 0.7216], [0.7303, 0.4045]]]]])
in1Sub34090 = tf.constant([[[[[0.1265, 0.0284], [0.9609, 0.0936], [0.9127, 0.4358]], [[0.2742, 0.4661], [0.979, 0.1834], [0.7465, 0.6322]], [[0.0625, 0.5982], [0.6542, 0.5924], [0.2511, 0.8584]]], [[[0.6588, 0.5814], [0.6006, 0.3658], [0.9884, 0.637]], [[0.5038, 0.9851], [0.8394, 0.7832], [0.0778, 0.145]], [[0.3465, 0.5316], [0.6574, 0.9428], [0.2418, 0.6315]]], [[[0.4697, 0.9465], [0.7649, 0.1266], [0.6966, 0.3442]], [[0.4718, 0.814], [0.4311, 0.4579], [0.339, 0.1433]], [[0.4799, 0.4069], [0.9646, 0.4412], [0.5724, 0.8832]]]]])
in0Max79683 = tf.constant([[[[[0.7241], [0.1028]], [[0.2999], [0.5866]]]]])
in1Max79683 = tf.constant([[[[[0.4563], [0.0525]], [[0.0263], [0.8515]]]]])
in0Con36886 = tf.constant([[[[[0.8622], [0.0121], [0.576]], [[0.0502], [0.9945], [0.2513]], [[0.2175], [0.2851], [0.323]]], [[[0.4507], [0.7658], [0.3973]], [[0.4531], [0.4082], [0.3017]], [[0.1775], [0.0626], [0.8668]]], [[[0.932], [0.0639], [0.4483]], [[0.9501], [0.4579], [0.0776]], [[0.4338], [0.2144], [0.1018]]]]])
print (np.array2string(model.predict([in0Glo86911,in0Con34487,in0Sub34090,in1Sub34090,in0Max79683,in1Max79683,in0Con36886],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave91994.png')

LGlo86911 = global_max_pool1D_layer([[[1.3272]]], Glo86911), 
LRes23171 = reshape_layer(Glo86911, [1, 1], Res23171), 
LRes88733 = reshape_layer(Res23171, [1, 1, 1], Res88733), 
LRes10385 = reshape_layer(Res88733, [1, 1, 1, 1], Res10385), 
LZer38877 = zero_padding3D_layer(Res10385, 2, 0, 2, 0, 2, 0, Zer38877), 
LCon34487 = concatenate_layer([Zer38877,[[[[[0.5604], [0.1892], [0.0268]], [[0.8506], [0.8418], [0.1266]], [[0.6188], [0.0224], [0.59]]], [[[0.2224], [0.0025], [0.0277]], [[0.6585], [0.1624], [0.4255]], [[0.2559], [0.6749], [0.0022]]], [[[0.7022], [0.8598], [0.7061]], [[0.8841], [0.3114], [0.6805]], [[0.6566], [0.2642], [0.9837]]]]]], 4, Con34487), 
LSub34090 = subtract_layer([[[[[0.9782, 0.7703], [0.7987, 0.8856], [0.7463, 0.8434]], [[0.0811, 0.7839], [0.8526, 0.2908], [0.7133, 0.7088]], [[0.4167, 0.3532], [0.081, 0.7182], [0.5667, 0.3856]]], [[[0.592, 0.4585], [0.8593, 0.5528], [0.572, 0.0839]], [[0.3016, 0.2436], [0.461, 0.4896], [0.332, 0.9334]], [[0.0695, 0.9349], [0.7051, 0.7634], [0.4431, 0.9921]]], [[[0.4746, 0.5454], [0.8377, 0.0287], [0.172, 0.2502]], [[0.4105, 0.1098], [0.8351, 0.2919], [0.4984, 0.2853]], [[0.7618, 0.0837], [0.7716, 0.7216], [0.7303, 0.4045]]]]], [[[[[0.1265, 0.0284], [0.9609, 0.0936], [0.9127, 0.4358]], [[0.2742, 0.4661], [0.979, 0.1834], [0.7465, 0.6322]], [[0.0625, 0.5982], [0.6542, 0.5924], [0.2511, 0.8584]]], [[[0.6588, 0.5814], [0.6006, 0.3658], [0.9884, 0.637]], [[0.5038, 0.9851], [0.8394, 0.7832], [0.0778, 0.145]], [[0.3465, 0.5316], [0.6574, 0.9428], [0.2418, 0.6315]]], [[[0.4697, 0.9465], [0.7649, 0.1266], [0.6966, 0.3442]], [[0.4718, 0.814], [0.4311, 0.4579], [0.339, 0.1433]], [[0.4799, 0.4069], [0.9646, 0.4412], [0.5724, 0.8832]]]]], Sub34090), 
LSub68706 = subtract_layer(Con34487,Sub34090, Sub68706), 
LMax79683 = maximum_layer([[[[[[0.7241], [0.1028]], [[0.2999], [0.5866]]]]], [[[[[0.4563], [0.0525]], [[0.0263], [0.8515]]]]]], Max79683), 
LZer23399 = zero_padding3D_layer(Max79683, 2, 0, 1, 0, 1, 0, Zer23399), 
LCon36886 = concatenate_layer([Zer23399,[[[[[0.8622], [0.0121], [0.576]], [[0.0502], [0.9945], [0.2513]], [[0.2175], [0.2851], [0.323]]], [[[0.4507], [0.7658], [0.3973]], [[0.4531], [0.4082], [0.3017]], [[0.1775], [0.0626], [0.8668]]], [[[0.932], [0.0639], [0.4483]], [[0.9501], [0.4579], [0.0776]], [[0.4338], [0.2144], [0.1018]]]]]], 4, Con36886), 
LAve91994 = average_layer([Sub68706,Con36886], Ave91994), 
exec_layers([LGlo86911,LRes23171,LRes88733,LRes10385,LZer38877,LCon34487,LSub34090,LSub68706,LMax79683,LZer23399,LCon36886,LAve91994],["Glo86911","Res23171","Res88733","Res10385","Zer38877","Con34487","Sub34090","Sub68706","Max79683","Zer23399","Con36886","Ave91994"],Ave91994,"Ave91994")

Actual (Unparsed): [[[[[-0.4258500, 0.3403500], [0.0811000, -0.2953500], [0.0832000, 0.0976000]], [[0.0965500, 0.2915000], [0.0632000, 0.8644500], [0.0166000, 0.1506500]], [[-0.1771000, 0.5406500], [0.2866000, 0.0908500], [-0.1578000, 0.6929000]]], [[[0.0334000, 0.3980000], [-0.1293500, 0.2906500], [0.2082000, 0.4890500]], [[0.1011000, 0.9265500], [0.1892000, 0.4321000], [-0.1271000, -0.0306000]], [[0.1385000, 0.0150500], [-0.0238500, 0.4584500], [-0.1006500, 0.2542000]]], [[[-0.0024500, 1.0176500], [-0.0364000, 0.5108000], [0.2623000, 0.6242000]], [[0.0306500, 1.2692000], [0.1600500, 0.4676500], [-0.0283000, 0.3080500]], [[-0.1409500, 0.7068000], [0.2464500, 0.0991000], [1.0104000, 0.7821000]]]]]

Expected (Unparsed): [[[[[-0.42584999999999995,0.34035],[0.0811,-0.29535],[0.0832,0.09759999999999996]],[[0.09655,0.2915],[0.06319999999999998,0.8644499999999999],[0.016600000000000004,0.15065]],[[-0.1771,0.54065],[0.2866,0.09085000000000006],[-0.1578,0.6929]]],[[[0.03340000000000004,0.398],[-0.12934999999999997,0.2906500000000001],[0.2082,0.48905]],[[0.10110000000000002,0.92655],[0.1892,0.43210000000000004],[-0.12710000000000002,-0.03059999999999999]],[[0.13849999999999998,0.015050000000000008],[-0.023849999999999982,0.45845],[-0.10065,0.2542]]],[[[-0.0024500000000000077,1.01765],[-0.03639999999999999,0.5108],[0.2623,0.6242]],[[0.03065000000000001,1.2691999999999999],[0.16005,0.46765],[-0.028299999999999992,0.30805]],[[-0.14095000000000002,0.7068],[0.24645000000000003,0.09909999999999998],[1.0104,0.7821]]]]]

Actual:   [[[[[-0.4258, 0.3404], [0.0811, -0.2953], [0.0832, 0.0976]], [[0.0966, 0.2915], [0.0632, 0.8645], [0.0166, 0.1507]], [[-0.1771, 0.5407], [0.2866, 0.0909], [-0.1578, 0.6929]]], [[[0.0334, 0.398], [-0.1293, 0.2907], [0.2082, 0.4891]], [[0.1011, 0.9266], [0.1892, 0.4321], [-0.1271, -0.0306]], [[0.1385, 0.0151], [-0.0238, 0.4585], [-0.1006, 0.2542]]], [[[-0.0024, 1.0177], [-0.0364, 0.5108], [0.2623, 0.6242]], [[0.0307, 1.2692], [0.1601, 0.4677], [-0.0283, 0.3081]], [[-0.1409, 0.7068], [0.2465, 0.0991], [1.0104, 0.7821]]]]]

Expected: [[[[[-0.4258, 0.3404], [0.0811, -0.2953], [0.0832, 0.0976]], [[0.0966, 0.2915], [0.0632, 0.8645], [0.0167, 0.1507]], [[-0.1771, 0.5407], [0.2866, 0.0909], [-0.1578, 0.6929]]], [[[0.0335, 0.398], [-0.1293, 0.2907], [0.2082, 0.4891]], [[0.1012, 0.9266], [0.1892, 0.4322], [-0.1271, -0.0305]], [[0.1385, 0.0151], [-0.0238, 0.4585], [-0.1006, 0.2542]]], [[[-0.0024, 1.0177], [-0.0363, 0.5108], [0.2623, 0.6242]], [[0.0307, 1.2692], [0.1601, 0.4677], [-0.0282, 0.3081]], [[-0.1409, 0.7068], [0.2465, 0.0991], [1.0104, 0.7821]]]]]