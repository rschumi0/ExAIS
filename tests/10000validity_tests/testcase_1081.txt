import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot33915 = tf.keras.layers.Input(shape=([3, 3]))
in1Dot33915 = tf.keras.layers.Input(shape=([3, 3]))
in0Ave9818 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in1Ave9818 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in0Con97508 = tf.keras.layers.Input(shape=([6, 2]))

Dot33915 = keras.layers.Dot(axes=(2, 1), name = 'Dot33915', )([in0Dot33915,in1Dot33915])
Zer65945 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer65945', )(Dot33915)
Ave9818 = keras.layers.Average(name = 'Ave9818', )([in0Ave9818,in1Ave9818])
Res75842 = keras.layers.Reshape((2, 1, 2), name = 'Res75842', )(Ave9818)
Res39 = keras.layers.Reshape((2, 2), name = 'Res39', )(Res75842)
LST48562 = keras.layers.LSTM(3,recurrent_activation='sigmoid', name = 'LST48562', )(Res39)
Res59206 = keras.layers.Reshape((3, 1), name = 'Res59206', )(LST48562)
Up_67026 = keras.layers.UpSampling1D(size=(2), name = 'Up_67026', )(Res59206)
Con97508 = keras.layers.Concatenate(axis=2, name = 'Con97508', )([Up_67026,in0Con97508])
Add61682 = keras.layers.Add(name = 'Add61682', )([Zer65945,Con97508])
Lea29583 = keras.layers.LeakyReLU(alpha=0.09654282238688355, name = 'Lea29583', )(Add61682)
model = tf.keras.models.Model(inputs=[in0Dot33915,in1Dot33915,in0Ave9818,in1Ave9818,in0Con97508], outputs=Lea29583)
w = model.get_layer('LST48562').get_weights() 
w[0] = np.array([[3, 4, 9, 5, 3, 2, 6, 1, 4, 6, 6, 9], [6, 8, 5, 3, 2, 9, 9, 5, 10, 2, 3, 4]])
w[1] = np.array([[9, 6, 3, 8, 9, 7, 1, 3, 7, 8, 3, 4], [9, 5, 3, 10, 2, 4, 9, 9, 4, 8, 10, 10], [10, 7, 9, 3, 8, 4, 7, 5, 5, 4, 10, 4]])
w[2] = np.array([3, 9, 8, 2, 8, 9, 8, 9, 4, 1, 2, 2])
model.get_layer('LST48562').set_weights(w) 
in0Dot33915 = tf.constant([[[0.8187, 0.1922, 0.9211], [0.7591, 0.2775, 0.9264], [0.9877, 0.0581, 0.5224]]])
in1Dot33915 = tf.constant([[[0.8799, 0.1318, 0.4115], [0.9644, 0.3526, 0.8199], [0.2255, 0.1859, 0.8623]]])
in0Ave9818 = tf.constant([[[[[0.8676, 0.5411]]], [[[0.3627, 0.4528]]]]])
in1Ave9818 = tf.constant([[[[[0.4745, 0.5594]]], [[[0.4532, 0.6375]]]]])
in0Con97508 = tf.constant([[[0.1613, 0.3949], [0.7117, 0.2246], [0.6041, 0.2362], [0.3369, 0.5479], [0.0549, 0.9817], [0.6365, 0.5699]]])
print (np.array2string(model.predict([in0Dot33915,in1Dot33915,in0Ave9818,in1Ave9818,in0Con97508],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Lea29583.png')

LDot33915 = dot_layer([[[0.8187, 0.1922, 0.9211], [0.7591, 0.2775, 0.9264], [0.9877, 0.0581, 0.5224]]], [[[0.8799, 0.1318, 0.4115], [0.9644, 0.3526, 0.8199], [0.2255, 0.1859, 0.8623]]], 2, 1, Dot33915), 
LZer65945 = zero_padding1D_layer(Dot33915, 3, 0, Zer65945), 
LAve9818 = average_layer([[[[[[0.8676, 0.5411]]], [[[0.3627, 0.4528]]]]], [[[[[0.4745, 0.5594]]], [[[0.4532, 0.6375]]]]]], Ave9818), 
LRes75842 = reshape_layer(Ave9818, [2, 1, 2], Res75842), 
LRes39 = reshape_layer(Res75842, [2, 2], Res39), 
LLST48562 = lstm_layer(Res39,[[3, 4, 9, 5, 3, 2, 6, 1, 4, 6, 6, 9], [6, 8, 5, 3, 2, 9, 9, 5, 10, 2, 3, 4]],[[9, 6, 3, 8, 9, 7, 1, 3, 7, 8, 3, 4], [9, 5, 3, 10, 2, 4, 9, 9, 4, 8, 10, 10], [10, 7, 9, 3, 8, 4, 7, 5, 5, 4, 10, 4]],[3, 9, 8, 2, 8, 9, 8, 9, 4, 1, 2, 2], LST48562), 
LRes59206 = reshape_layer(LST48562, [3, 1], Res59206), 
LUp_67026 = up_sampling1D_layer(Res59206, 2, Up_67026), 
LCon97508 = concatenate_layer([Up_67026,[[[0.1613, 0.3949], [0.7117, 0.2246], [0.6041, 0.2362], [0.3369, 0.5479], [0.0549, 0.9817], [0.6365, 0.5699]]]], 2, Con97508), 
LAdd61682 = add_layer([Zer65945,Con97508], Add61682), 
LLea29583 = leaky_relu_layer(Add61682, 0.09654282238688355, Lea29583), 
exec_layers([LDot33915,LZer65945,LAve9818,LRes75842,LRes39,LLST48562,LRes59206,LUp_67026,LCon97508,LAdd61682,LLea29583],["Dot33915","Zer65945","Ave9818","Res75842","Res39","LST48562","Res59206","Up_67026","Con97508","Add61682","Lea29583"],Lea29583,"Lea29583")

Actual (Unparsed): [[[0.9640103, 0.1613000, 0.3949000], [0.9640103, 0.7117000, 0.2246000], [0.9640276, 0.6041000, 0.2362000], [2.0774674, 0.6838069, 1.8366444], [2.1084839, 0.4250136, 2.3204266], [2.0069376, 0.8842791, 1.4744402]]]

Expected (Unparsed): [[[0.9640102750862684,0.1613,0.3949],[0.9640102750862684,0.7117,0.2246],[0.9640275727234039,0.6041,0.2362],[2.0774674327234037,0.68380687,1.83664436],[2.108483866043863,0.42501364,2.32042662],[2.006937646043863,0.88427908,1.47444026]]]

Actual:   [[[0.9641, 0.1613, 0.3949], [0.9641, 0.7117, 0.2246], [0.9641, 0.6041, 0.2362], [2.0775, 0.6839, 1.8367], [2.1085, 0.4251, 2.3205], [2.007, 0.8843, 1.4745]]]

Expected: [[[0.9641, 0.1613, 0.3949], [0.9641, 0.7117, 0.2246], [0.9641, 0.6041, 0.2362], [2.0775, 0.6839, 1.8367], [2.1085, 0.4251, 2.3205], [2.007, 0.8843, 1.4745]]]