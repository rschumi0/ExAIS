import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro57575 = tf.keras.layers.Input(shape=([3, 1]))
in0PRe54703 = tf.keras.layers.Input(shape=([2, 1]))
in0PRe43921 = tf.keras.layers.Input(shape=([2, 1]))
in0Con96244 = tf.keras.layers.Input(shape=([3, 3]))
in0Den88571 = tf.keras.layers.Input(shape=([2, 4]))

Cro57575 = keras.layers.Cropping1D(cropping=((0, 0)), name = 'Cro57575', )(in0Cro57575)
PRe54703 = keras.layers.PReLU(name = 'PRe54703', input_shape=(2, 1))(in0PRe54703)
Zer79573 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer79573', )(PRe54703)
Min65056 = keras.layers.Minimum(name = 'Min65056', )([Cro57575,Zer79573])
PRe43921 = keras.layers.PReLU(name = 'PRe43921', input_shape=(2, 1))(in0PRe43921)
Zer13755 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer13755', )(PRe43921)
Mul64202 = keras.layers.Multiply(name = 'Mul64202', )([Min65056,Zer13755])
Con96244 = keras.layers.Concatenate(axis=2, name = 'Con96244', )([Mul64202,in0Con96244])
Den88571 = keras.layers.Dense(4,name = 'Den88571', )(in0Den88571)
Zer83489 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer83489', )(Den88571)
Max26918 = keras.layers.Maximum(name = 'Max26918', )([Con96244,Zer83489])
model = tf.keras.models.Model(inputs=[in0Cro57575,in0PRe54703,in0PRe43921,in0Con96244,in0Den88571], outputs=Max26918)
w = model.get_layer('PRe54703').get_weights() 
w[0] = np.array([[0.3821], [0.3995]])
model.get_layer('PRe54703').set_weights(w) 
w = model.get_layer('PRe43921').get_weights() 
w[0] = np.array([[0.6306], [0.5225]])
model.get_layer('PRe43921').set_weights(w) 
w = model.get_layer('Den88571').get_weights() 
w[0] = np.array([[0.1346, 0.0859, 0.2589, 0.4447], [0.2675, 0.6435, 0.074, 0.0839], [0.5674, 0.3012, 0.8842, 0.8319], [0.4898, 0.0094, 0.5516, 0.3663]])
w[1] = np.array([0.9241, 0.524, 0.5633, 0.1263])
model.get_layer('Den88571').set_weights(w) 
in0Cro57575 = tf.constant([[[1.0579], [1.1315], [1.5369]]])
in0PRe54703 = tf.constant([[[0.6303], [0.7473]]])
in0PRe43921 = tf.constant([[[0.3703], [0.1705]]])
in0Con96244 = tf.constant([[[0.0062, 0.7571, 0.2564], [0.0538, 0.2228, 0.7383], [0.6682, 0.2823, 0.4211]]])
in0Den88571 = tf.constant([[[0.2502, 0.2795, 0.1349, 0.4956], [0.4289, 0.3976, 0.2639, 0.8774]]])
print (np.array2string(model.predict([in0Cro57575,in0PRe54703,in0PRe43921,in0Con96244,in0Den88571],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max26918.png')

LCro57575 = cropping1D_layer([[[1.0579], [1.1315], [1.5369]]], 0, 0, Cro57575), 
LPRe54703 = prelu_layer([[[0.6303], [0.7473]]], [[0.3821], [0.3995]], PRe54703), 
LZer79573 = zero_padding1D_layer(PRe54703, 1, 0, Zer79573), 
LMin65056 = minimum_layer([Cro57575,Zer79573], Min65056), 
LPRe43921 = prelu_layer([[[0.3703], [0.1705]]], [[0.6306], [0.5225]], PRe43921), 
LZer13755 = zero_padding1D_layer(PRe43921, 1, 0, Zer13755), 
LMul64202 = multiply_layer([Min65056,Zer13755], Mul64202), 
LCon96244 = concatenate_layer([Mul64202,[[[0.0062, 0.7571, 0.2564], [0.0538, 0.2228, 0.7383], [0.6682, 0.2823, 0.4211]]]], 2, Con96244), 
LDen88571 = dense_layer([[[0.2502, 0.2795, 0.1349, 0.4956], [0.4289, 0.3976, 0.2639, 0.8774]]], [[0.1346, 0.0859, 0.2589, 0.4447], [0.2675, 0.6435, 0.074, 0.0839], [0.5674, 0.3012, 0.8842, 0.8319], [0.4898, 0.0094, 0.5516, 0.3663]],[0.9241, 0.524, 0.5633, 0.1263], Den88571), 
LZer83489 = zero_padding1D_layer(Den88571, 1, 0, Zer83489), 
LMax26918 = maximum_layer([Con96244,Zer83489], Max26918), 
exec_layers([LCro57575,LPRe54703,LZer79573,LMin65056,LPRe43921,LZer13755,LMul64202,LCon96244,LDen88571,LZer83489,LMax26918],["Cro57575","PRe54703","Zer79573","Min65056","PRe43921","Zer13755","Mul64202","Con96244","Den88571","Zer83489","Max26918"],Max26918,"Max26918")

Actual (Unparsed): [[[0.0000000, 0.0062000, 0.7571000, 0.2564000], [1.3518303, 0.7706410, 1.0414113, 0.7383000], [1.6676753, 0.9044324, 1.4210788, 0.8913205]]]

Expected (Unparsed): [[[0,0.0062,0.7571,0.2564],[1.3518303100000002,0.77064095,1.04141132,0.7383],[1.66767532,0.9044323500000002,1.42107883,0.8913205]]]

Actual:   [[[0, 0.0062, 0.7571, 0.2564], [1.3519, 0.7707, 1.0415, 0.7383], [1.6677, 0.9045, 1.4211, 0.8914]]]

Expected: [[[0, 0.0062, 0.7571, 0.2564], [1.3519, 0.7707, 1.0415, 0.7383], [1.6677, 0.9045, 1.4211, 0.8914]]]