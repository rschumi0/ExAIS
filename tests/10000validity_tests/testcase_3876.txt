import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Loc68026 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con38467 = tf.keras.layers.Input(shape=([1, 1]))
in0Sep99132 = tf.keras.layers.Input(shape=([1, 1]))
in0Con46938 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))
in0Sub82199 = tf.keras.layers.Input(shape=([3, 3, 2, 3]))
in1Sub82199 = tf.keras.layers.Input(shape=([3, 3, 2, 3]))
in0Ave83999 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in1Ave83999 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Con76578 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))

Loc68026 = keras.layers.LocallyConnected2D(4, (1, 1),strides=(1, 5), name = 'Loc68026', )(in0Loc68026)
Res63890 = keras.layers.Reshape((1, 4), name = 'Res63890', )(Loc68026)
Per76593 = keras.layers.Permute((2,1), name = 'Per76593',)(Res63890)
Res76464 = keras.layers.Reshape((4, 1, 1), name = 'Res76464', )(Per76593)
Ave43742 = keras.layers.AveragePooling2D(pool_size=(1, 1), strides=(4, 9), padding='same', name = 'Ave43742', )(Res76464)
Res57694 = keras.layers.Reshape((1, 1), name = 'Res57694', )(Ave43742)
Con38467 = keras.layers.Concatenate(axis=2, name = 'Con38467', )([Res57694,in0Con38467])
Sep99132 = keras.layers.SeparableConv1D(2, (1),strides=(1), padding='same', name = 'Sep99132', )(in0Sep99132)
Ave1527 = keras.layers.Average(name = 'Ave1527', )([Con38467,Sep99132])
Res18031 = keras.layers.Reshape((1, 2, 1), name = 'Res18031', )(Ave1527)
Res87532 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res87532', )(Res18031)
Zer92770 = keras.layers.ZeroPadding3D(padding=((2, 0), (1, 0), (1, 0)), name = 'Zer92770', )(Res87532)
Con46938 = keras.layers.Concatenate(axis=4, name = 'Con46938', )([Zer92770,in0Con46938])
Sub82199 = keras.layers.Subtract(name = 'Sub82199', )([in0Sub82199,in1Sub82199])
Ave83999 = keras.layers.Average(name = 'Ave83999', )([in0Ave83999,in1Ave83999])
Zer13562 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (0, 0)), name = 'Zer13562', )(Ave83999)
Con76578 = keras.layers.Concatenate(axis=4, name = 'Con76578', )([Zer13562,in0Con76578])
Ave51211 = keras.layers.Average(name = 'Ave51211', )([Sub82199,Con76578])
Sub10851 = keras.layers.Subtract(name = 'Sub10851', )([Con46938,Ave51211])
model = tf.keras.models.Model(inputs=[in0Loc68026,in0Con38467,in0Sep99132,in0Con46938,in0Sub82199,in1Sub82199,in0Ave83999,in1Ave83999,in0Con76578], outputs=Sub10851)
w = model.get_layer('Loc68026').get_weights() 
w[0] = np.array([[[0.0932, 0.8063, 0.8329, 0.3878]]])
w[1] = np.array([[[0, 0, 0, 0]]])
model.get_layer('Loc68026').set_weights(w) 
w = model.get_layer('Sep99132').get_weights() 
w[0] = np.array([[[0.4228]]])
w[1] = np.array([[[0.8753, 0.1062]]])
w[2] = np.array([0, 0])
model.get_layer('Sep99132').set_weights(w) 
in0Loc68026 = tf.constant([[[[0.4453]]]])
in0Con38467 = tf.constant([[[0.5725]]])
in0Sep99132 = tf.constant([[[0.7144]]])
in0Con46938 = tf.constant([[[[[0.7334, 0.5219], [0.7592, 0.9147]], [[0.1791, 0.7883], [0.9291, 0.1283]], [[0.1114, 0.0655], [0.5937, 0.696]]], [[[0.883, 0.2837], [0.2511, 0.7711]], [[0.7064, 0.6532], [0.712, 0.3255]], [[0.1231, 0.9475], [0.5257, 0.5017]]], [[[0.377, 0.0581], [0.2188, 0.6383]], [[0.912, 0.5213], [0.7515, 0.2491]], [[0.402, 0.008], [0.5464, 0.9136]]]]])
in0Sub82199 = tf.constant([[[[[0.03, 0.8466, 0.0992], [0.774, 0.4571, 0.4737]], [[0.0572, 0.5382, 0.2117], [0.645, 0.1352, 0.9807]], [[0.7222, 0.8763, 0.0704], [0.1706, 0.9358, 0.1307]]], [[[0.9135, 0.8277, 0.5301], [0.4758, 0.6493, 0.5142]], [[0.1321, 0.8287, 0.7503], [0.0001, 0.0935, 0.4258]], [[0.972, 0.5142, 0.4325], [0.4076, 0.4653, 0.1775]]], [[[0.2669, 0.5709, 0.1951], [0.9025, 0.437, 0.9083]], [[0.7342, 0.4413, 0.0418], [0.0279, 0.73, 0.0619]], [[0.3023, 0.9255, 0.7302], [0.546, 0.4991, 0.8702]]]]])
in1Sub82199 = tf.constant([[[[[0.5983, 0.8104, 0.7358], [0.3538, 0.4485, 0.4791]], [[0.9275, 0.1533, 0.8868], [0.1563, 0.7268, 0.5643]], [[0.359, 0.9866, 0.0631], [0.7687, 0.5717, 0.3252]]], [[[0.5961, 0.1223, 0.2821], [0.9893, 0.6578, 0.8675]], [[0.2308, 0.6099, 0.198], [0.4111, 0.6301, 0.0661]], [[0.834, 0.8376, 0.4145], [0.8431, 0.3547, 0.7748]]], [[[0.4115, 0.4294, 0.9325], [0.0771, 0.6936, 0.5444]], [[0.8558, 0.0428, 0.6406], [0.0688, 0.8095, 0.0493]], [[0.6544, 0.0427, 0.6058], [0.55, 0.0481, 0.989]]]]])
in0Ave83999 = tf.constant([[[[[0.7918], [0.3584]], [[0.3606], [0.1234]]], [[[0.7503], [0.0158]], [[0.2362], [0.718]]]]])
in1Ave83999 = tf.constant([[[[[0.745], [0.8349]], [[0.0514], [0.0031]]], [[[0.8639], [0.8946]], [[0.6743], [0.5095]]]]])
in0Con76578 = tf.constant([[[[[0.9834, 0.3166], [0.5424, 0.7758]], [[0.4799, 0.8753], [0.0064, 0.8913]], [[0.6771, 0.4516], [0.255, 0.8409]]], [[[0.054, 0.5389], [0.6238, 0.7364]], [[0.5295, 0.4669], [0.3237, 0.8084]], [[0.3746, 0.2952], [0.4377, 0.9942]]], [[[0.152, 0.5059], [0.604, 0.6168]], [[0.8016, 0.2057], [0.0912, 0.8935]], [[0.9528, 0.4612], [0.1406, 0.2554]]]]])
print (np.array2string(model.predict([in0Loc68026,in0Con38467,in0Sep99132,in0Con46938,in0Sub82199,in1Sub82199,in0Ave83999,in1Ave83999,in0Con76578],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub10851.png')

LLoc68026 = locally_connected2D_layer([[[[0.4453]]]], 1, 1,[[[0.0932, 0.8063, 0.8329, 0.3878]]],[[[0, 0, 0, 0]]], 1, 5, Loc68026), 
LRes63890 = reshape_layer(Loc68026, [1, 4], Res63890), 
LPer76593 = permute_layer(Res63890, 2,1, Per76593), 
LRes76464 = reshape_layer(Per76593, [4, 1, 1], Res76464), 
LAve43742 = average_pooling2D_layer(Res76464, 1, 1, 4, 9, true, Ave43742), 
LRes57694 = reshape_layer(Ave43742, [1, 1], Res57694), 
LCon38467 = concatenate_layer([Res57694,[[[0.5725]]]], 2, Con38467), 
LSep99132 = separable_conv1D_layer([[[0.7144]]], 1,[[[[0.4228]]],[[[0.8753, 0.1062]]]],[0, 0], 1, true, Sep99132), 
LAve1527 = average_layer([Con38467,Sep99132], Ave1527), 
LRes18031 = reshape_layer(Ave1527, [1, 2, 1], Res18031), 
LRes87532 = reshape_layer(Res18031, [1, 2, 1, 1], Res87532), 
LZer92770 = zero_padding3D_layer(Res87532, 2, 0, 1, 0, 1, 0, Zer92770), 
LCon46938 = concatenate_layer([Zer92770,[[[[[0.7334, 0.5219], [0.7592, 0.9147]], [[0.1791, 0.7883], [0.9291, 0.1283]], [[0.1114, 0.0655], [0.5937, 0.696]]], [[[0.883, 0.2837], [0.2511, 0.7711]], [[0.7064, 0.6532], [0.712, 0.3255]], [[0.1231, 0.9475], [0.5257, 0.5017]]], [[[0.377, 0.0581], [0.2188, 0.6383]], [[0.912, 0.5213], [0.7515, 0.2491]], [[0.402, 0.008], [0.5464, 0.9136]]]]]], 4, Con46938), 
LSub82199 = subtract_layer([[[[[0.03, 0.8466, 0.0992], [0.774, 0.4571, 0.4737]], [[0.0572, 0.5382, 0.2117], [0.645, 0.1352, 0.9807]], [[0.7222, 0.8763, 0.0704], [0.1706, 0.9358, 0.1307]]], [[[0.9135, 0.8277, 0.5301], [0.4758, 0.6493, 0.5142]], [[0.1321, 0.8287, 0.7503], [0.0001, 0.0935, 0.4258]], [[0.972, 0.5142, 0.4325], [0.4076, 0.4653, 0.1775]]], [[[0.2669, 0.5709, 0.1951], [0.9025, 0.437, 0.9083]], [[0.7342, 0.4413, 0.0418], [0.0279, 0.73, 0.0619]], [[0.3023, 0.9255, 0.7302], [0.546, 0.4991, 0.8702]]]]], [[[[[0.5983, 0.8104, 0.7358], [0.3538, 0.4485, 0.4791]], [[0.9275, 0.1533, 0.8868], [0.1563, 0.7268, 0.5643]], [[0.359, 0.9866, 0.0631], [0.7687, 0.5717, 0.3252]]], [[[0.5961, 0.1223, 0.2821], [0.9893, 0.6578, 0.8675]], [[0.2308, 0.6099, 0.198], [0.4111, 0.6301, 0.0661]], [[0.834, 0.8376, 0.4145], [0.8431, 0.3547, 0.7748]]], [[[0.4115, 0.4294, 0.9325], [0.0771, 0.6936, 0.5444]], [[0.8558, 0.0428, 0.6406], [0.0688, 0.8095, 0.0493]], [[0.6544, 0.0427, 0.6058], [0.55, 0.0481, 0.989]]]]], Sub82199), 
LAve83999 = average_layer([[[[[[0.7918], [0.3584]], [[0.3606], [0.1234]]], [[[0.7503], [0.0158]], [[0.2362], [0.718]]]]], [[[[[0.745], [0.8349]], [[0.0514], [0.0031]]], [[[0.8639], [0.8946]], [[0.6743], [0.5095]]]]]], Ave83999), 
LZer13562 = zero_padding3D_layer(Ave83999, 1, 0, 1, 0, 0, 0, Zer13562), 
LCon76578 = concatenate_layer([Zer13562,[[[[[0.9834, 0.3166], [0.5424, 0.7758]], [[0.4799, 0.8753], [0.0064, 0.8913]], [[0.6771, 0.4516], [0.255, 0.8409]]], [[[0.054, 0.5389], [0.6238, 0.7364]], [[0.5295, 0.4669], [0.3237, 0.8084]], [[0.3746, 0.2952], [0.4377, 0.9942]]], [[[0.152, 0.5059], [0.604, 0.6168]], [[0.8016, 0.2057], [0.0912, 0.8935]], [[0.9528, 0.4612], [0.1406, 0.2554]]]]]], 4, Con76578), 
LAve51211 = average_layer([Sub82199,Con76578], Ave51211), 
LSub10851 = subtract_layer(Con46938,Ave51211, Sub10851), 
exec_layers([LLoc68026,LRes63890,LPer76593,LRes76464,LAve43742,LRes57694,LCon38467,LSep99132,LAve1527,LRes18031,LRes87532,LZer92770,LCon46938,LSub82199,LAve83999,LZer13562,LCon76578,LAve51211,LSub10851],["Loc68026","Res63890","Per76593","Res76464","Ave43742","Res57694","Con38467","Sep99132","Ave1527","Res18031","Res87532","Zer92770","Con46938","Sub82199","Ave83999","Zer13562","Con76578","Ave51211","Sub10851"],Sub10851,"Sub10851")

Actual (Unparsed): [[[[[0.2841500, 0.2236000, 0.6819000], [-0.2101000, 0.4837000, 0.5295000]], [[0.4351500, -0.2533000, 0.6882000], [-0.2443500, 1.2217000, -0.5255500]], [[-0.1816000, -0.1720000, -0.1639500], [0.2990500, 0.2841500, 0.3728000]]], [[[-0.1587000, 0.5033000, -0.1097500], [0.2567500, -0.0565500, 0.5795500]], [[-0.3348500, 0.3322500, 0.1436000], [-0.0928250, 0.8184500, -0.2585500]], [[-0.1720000, 0.0975000, 0.7909000], [0.1861250, 0.2515500, 0.3032500]]], [[[0.0723000, 0.2302500, 0.1738500], [-0.4127000, 0.0451000, 0.1479500]], [[-0.3427500, 0.3119500, 0.7178500], [-0.0542076, 0.7456500, -0.2039500]], [[-0.0515750, -0.5158000, -0.2848000], [-0.0025862, 0.2506000, 0.8453000]]]]]

Expected (Unparsed): [[[[[0.28415,0.22360000000000002,0.6819000000000001],[-0.2101,0.4837,0.5295]],[[0.43515,-0.25329999999999997,0.6882],[-0.24435,1.2217,-0.5255500000000001]],[[-0.18159999999999998,-0.172,-0.16394999999999998],[0.29905000000000004,0.28415,0.37279999999999996]]],[[[-0.1587,0.5033,-0.10975000000000001],[0.25675,-0.05654999999999999,0.57955]],[[-0.33485,0.33225000000000005,0.14359999999999995],[-0.09282499999999999,0.8184499999999999,-0.25854999999999995]],[[-0.172,0.09750000000000002,0.7908999999999999],[0.18612499999999998,0.25154999999999994,0.3032500000000001]]],[[[0.07229999999999998,0.23025,0.17385],[-0.41269999999999996,0.0451,0.14794999999999997]],[[-0.34274999999999994,0.31195000000000006,0.71785],[-0.054207572752,0.7456499999999999,-0.20394999999999996]],[[-0.05157500000000001,-0.5157999999999999,-0.28479999999999994],[-0.002586234207999971,0.2506,0.8452999999999999]]]]]

Actual:   [[[[[0.2842, 0.2236, 0.6819], [-0.2101, 0.4837, 0.5295]], [[0.4352, -0.2533, 0.6882], [-0.2443, 1.2217, -0.5255]], [[-0.1816, -0.172, -0.1639], [0.2991, 0.2842, 0.3728]]], [[[-0.1587, 0.5033, -0.1097], [0.2568, -0.0565, 0.5796]], [[-0.3348, 0.3323, 0.1436], [-0.0928, 0.8185, -0.2585]], [[-0.172, 0.0975, 0.7909], [0.1862, 0.2516, 0.3033]]], [[[0.0723, 0.2303, 0.1739], [-0.4127, 0.0451, 0.148]], [[-0.3427, 0.312, 0.7179], [-0.0542, 0.7457, -0.2039]], [[-0.0515, -0.5158, -0.2848], [-0.0025, 0.2506, 0.8453]]]]]

Expected: [[[[[0.2842, 0.2237, 0.682], [-0.2101, 0.4837, 0.5295]], [[0.4352, -0.2532, 0.6882], [-0.2443, 1.2217, -0.5255]], [[-0.1815, -0.172, -0.1639], [0.2991, 0.2842, 0.3728]]], [[[-0.1587, 0.5033, -0.1097], [0.2568, -0.0565, 0.5796]], [[-0.3348, 0.3323, 0.1436], [-0.0928, 0.8185, -0.2585]], [[-0.172, 0.0976, 0.7909], [0.1862, 0.2516, 0.3033]]], [[[0.0723, 0.2303, 0.1739], [-0.4126, 0.0451, 0.148]], [[-0.3427, 0.312, 0.7179], [-0.0542, 0.7457, -0.2039]], [[-0.0515, -0.5157, -0.2847], [-0.0025, 0.2506, 0.8453]]]]]