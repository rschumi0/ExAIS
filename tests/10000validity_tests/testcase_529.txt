import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Loc37075 = tf.keras.layers.Input(shape=([2, 1]))
in0Con81288 = tf.keras.layers.Input(shape=([6, 8, 1]))
in0Min47721 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in1Min47721 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in0Add88517 = tf.keras.layers.Input(shape=([1, 2]))
in1Add88517 = tf.keras.layers.Input(shape=([1, 2]))
in0Con39571 = tf.keras.layers.Input(shape=([6, 8, 1]))

Loc37075 = keras.layers.LocallyConnected1D(3, (1),strides=(1), name = 'Loc37075', )(in0Loc37075)
Mas14487 = keras.layers.Masking(mask_value=1, name = 'Mas14487', )(Loc37075)
Res48337 = keras.layers.Reshape((2, 3, 1), name = 'Res48337', )(Mas14487)
Zer62839 = keras.layers.ZeroPadding2D(padding=((4, 0), (5, 0)), name = 'Zer62839', )(Res48337)
Con81288 = keras.layers.Concatenate(axis=3, name = 'Con81288', )([Zer62839,in0Con81288])
Min47721 = keras.layers.Minimum(name = 'Min47721', )([in0Min47721,in1Min47721])
Res35660 = keras.layers.Reshape((1, 1, 2), name = 'Res35660', )(Min47721)
Zer53958 = keras.layers.ZeroPadding2D(padding=((5, 0), (7, 0)), name = 'Zer53958', )(Res35660)
Add88517 = keras.layers.Add(name = 'Add88517', )([in0Add88517,in1Add88517])
Res75424 = keras.layers.Reshape((1, 2, 1), name = 'Res75424', )(Add88517)
Zer63454 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer63454', )(Res75424)
Up_49749 = keras.layers.UpSampling2D(size=(2, 2), name = 'Up_49749', )(Zer63454)
Con39571 = keras.layers.Concatenate(axis=3, name = 'Con39571', )([Up_49749,in0Con39571])
Min62862 = keras.layers.Minimum(name = 'Min62862', )([Zer53958,Con39571])
Max73761 = keras.layers.Maximum(name = 'Max73761', )([Con81288,Min62862])
model = tf.keras.models.Model(inputs=[in0Loc37075,in0Con81288,in0Min47721,in1Min47721,in0Add88517,in1Add88517,in0Con39571], outputs=Max73761)
w = model.get_layer('Loc37075').get_weights() 
w[0] = np.array([[[0.8878, 0.1467, 0.4538]], [[0.4563, 0.5936, 0.8222]]])
w[1] = np.array([[0, 0, 0], [0, 0, 0]])
model.get_layer('Loc37075').set_weights(w) 
in0Loc37075 = tf.constant([[[0.7455], [0.9554]]])
in0Con81288 = tf.constant([[[[0.7462], [0.5461], [0.587], [0.8977], [0.5585], [0.4226], [0.1844], [0.0911]], [[0.8581], [0.221], [0.0537], [0.8368], [0.9319], [0.8619], [0.8217], [0.5743]], [[0.1873], [0.0363], [0.336], [0.2369], [0.4276], [0.2392], [0.5329], [0.6902]], [[0.1119], [0.0561], [0.4683], [0.035], [0.4493], [0.8577], [0.9264], [0.9109]], [[0.7858], [0.0592], [0.2151], [0.6363], [0.7663], [0.7502], [0.853], [0.8793]], [[0.1803], [0.8142], [0.8613], [0.5636], [0.2309], [0.6193], [0.281], [0.8859]]]])
in0Min47721 = tf.constant([[[[[0.5345], [0.4507]]]]])
in1Min47721 = tf.constant([[[[[0.9581], [0.7645]]]]])
in0Add88517 = tf.constant([[[0.8942, 0.8976]]])
in1Add88517 = tf.constant([[[0.9424, 0.8514]]])
in0Con39571 = tf.constant([[[[0.1984], [0.4486], [0.6003], [0.2276], [0.2946], [0.1555], [0.6307], [0.7969]], [[0.9673], [0.175], [0.1521], [0.5882], [0.5465], [0.3123], [0.2406], [0.925]], [[0.8258], [0.5208], [0.288], [0.8014], [0.6952], [0.0853], [0.8593], [0.5345]], [[0.7804], [0.0252], [0.6896], [0.9727], [0.9086], [0.2819], [0.5664], [0.3316]], [[0.7702], [0.2772], [0.9082], [0.8942], [0.9715], [0.988], [0.6927], [0.0082]], [[0.7871], [0.766], [0.016], [0.0421], [0.3109], [0.7522], [0.9706], [0.2184]]]])
print (np.array2string(model.predict([in0Loc37075,in0Con81288,in0Min47721,in1Min47721,in0Add88517,in1Add88517,in0Con39571],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max73761.png')

LLoc37075 = locally_connected1D_layer([[[0.7455], [0.9554]]], 1,[[[0.8878, 0.1467, 0.4538]], [[0.4563, 0.5936, 0.8222]]],[[0, 0, 0], [0, 0, 0]], 1, Loc37075), 
LMas14487 = masking_layer(Loc37075, 1, Mas14487), 
LRes48337 = reshape_layer(Mas14487, [2, 3, 1], Res48337), 
LZer62839 = zero_padding2D_layer(Res48337, 4, 0, 5, 0, Zer62839), 
LCon81288 = concatenate_layer([Zer62839,[[[[0.7462], [0.5461], [0.587], [0.8977], [0.5585], [0.4226], [0.1844], [0.0911]], [[0.8581], [0.221], [0.0537], [0.8368], [0.9319], [0.8619], [0.8217], [0.5743]], [[0.1873], [0.0363], [0.336], [0.2369], [0.4276], [0.2392], [0.5329], [0.6902]], [[0.1119], [0.0561], [0.4683], [0.035], [0.4493], [0.8577], [0.9264], [0.9109]], [[0.7858], [0.0592], [0.2151], [0.6363], [0.7663], [0.7502], [0.853], [0.8793]], [[0.1803], [0.8142], [0.8613], [0.5636], [0.2309], [0.6193], [0.281], [0.8859]]]]], 3, Con81288), 
LMin47721 = minimum_layer([[[[[[0.5345], [0.4507]]]]], [[[[[0.9581], [0.7645]]]]]], Min47721), 
LRes35660 = reshape_layer(Min47721, [1, 1, 2], Res35660), 
LZer53958 = zero_padding2D_layer(Res35660, 5, 0, 7, 0, Zer53958), 
LAdd88517 = add_layer([[[[0.8942, 0.8976]]], [[[0.9424, 0.8514]]]], Add88517), 
LRes75424 = reshape_layer(Add88517, [1, 2, 1], Res75424), 
LZer63454 = zero_padding2D_layer(Res75424, 1, 1, 1, 1, Zer63454), 
LUp_49749 = up_sampling2D_layer(Zer63454, 2, 2, Up_49749), 
LCon39571 = concatenate_layer([Up_49749,[[[[0.1984], [0.4486], [0.6003], [0.2276], [0.2946], [0.1555], [0.6307], [0.7969]], [[0.9673], [0.175], [0.1521], [0.5882], [0.5465], [0.3123], [0.2406], [0.925]], [[0.8258], [0.5208], [0.288], [0.8014], [0.6952], [0.0853], [0.8593], [0.5345]], [[0.7804], [0.0252], [0.6896], [0.9727], [0.9086], [0.2819], [0.5664], [0.3316]], [[0.7702], [0.2772], [0.9082], [0.8942], [0.9715], [0.988], [0.6927], [0.0082]], [[0.7871], [0.766], [0.016], [0.0421], [0.3109], [0.7522], [0.9706], [0.2184]]]]], 3, Con39571), 
LMin62862 = minimum_layer([Zer53958,Con39571], Min62862), 
LMax73761 = maximum_layer([Con81288,Min62862], Max73761), 
exec_layers([LLoc37075,LMas14487,LRes48337,LZer62839,LCon81288,LMin47721,LRes35660,LZer53958,LAdd88517,LRes75424,LZer63454,LUp_49749,LCon39571,LMin62862,LMax73761],["Loc37075","Mas14487","Res48337","Zer62839","Con81288","Min47721","Res35660","Zer53958","Add88517","Res75424","Zer63454","Up_49749","Con39571","Min62862","Max73761"],Max73761,"Max73761")

Actual (Unparsed): [[[[0.0000000, 0.7462000], [0.0000000, 0.5461000], [0.0000000, 0.5870000], [0.0000000, 0.8977000], [0.0000000, 0.5585000], [0.0000000, 0.4226000], [0.0000000, 0.1844000], [0.0000000, 0.0911000]], [[0.0000000, 0.8581000], [0.0000000, 0.2210000], [0.0000000, 0.0537000], [0.0000000, 0.8368000], [0.0000000, 0.9319000], [0.0000000, 0.8619000], [0.0000000, 0.8217000], [0.0000000, 0.5743000]], [[0.0000000, 0.1873000], [0.0000000, 0.0363000], [0.0000000, 0.3360000], [0.0000000, 0.2369000], [0.0000000, 0.4276000], [0.0000000, 0.2392000], [0.0000000, 0.5329000], [0.0000000, 0.6902000]], [[0.0000000, 0.1119000], [0.0000000, 0.0561000], [0.0000000, 0.4683000], [0.0000000, 0.0350000], [0.0000000, 0.4493000], [0.0000000, 0.8577000], [0.0000000, 0.9264000], [0.0000000, 0.9109000]], [[0.0000000, 0.7858000], [0.0000000, 0.0592000], [0.0000000, 0.2151000], [0.0000000, 0.6363000], [0.0000000, 0.7663000], [0.6618549, 0.7502000], [0.1093649, 0.8530000], [0.3383079, 0.8793000]], [[0.0000000, 0.1803000], [0.0000000, 0.8142000], [0.0000000, 0.8613000], [0.0000000, 0.5636000], [0.0000000, 0.2309000], [0.4359490, 0.6193000], [0.5671254, 0.2810000], [0.7855299, 0.8859000]]]]

Expected (Unparsed): [[[[0,0.7462],[0,0.5461],[0,0.587],[0,0.8977],[0,0.5585],[0,0.4226],[0,0.1844],[0,0.0911]],[[0,0.8581],[0,0.221],[0,0.0537],[0,0.8368],[0,0.9319],[0,0.8619],[0,0.8217],[0,0.5743]],[[0,0.1873],[0,0.0363],[0,0.336],[0,0.2369],[0,0.4276],[0,0.2392],[0,0.5329],[0,0.6902]],[[0,0.1119],[0,0.0561],[0,0.4683],[0,0.035],[0,0.4493],[0,0.8577],[0,0.9264],[0,0.9109]],[[0,0.7858],[0,0.0592],[0,0.2151],[0,0.6363],[0,0.7663],[0.6618549,0.7502],[0.10936485,0.853],[0.3383079,0.8793]],[[0,0.1803],[0,0.8142],[0,0.8613],[0,0.5636],[0,0.2309],[0.43594902,0.6193],[0.56712544,0.281],[0.78552988,0.8859]]]]

Actual:   [[[[0, 0.7462], [0, 0.5461], [0, 0.587], [0, 0.8977], [0, 0.5585], [0, 0.4226], [0, 0.1844], [0, 0.0911]], [[0, 0.8581], [0, 0.221], [0, 0.0537], [0, 0.8368], [0, 0.9319], [0, 0.8619], [0, 0.8217], [0, 0.5743]], [[0, 0.1873], [0, 0.0363], [0, 0.336], [0, 0.2369], [0, 0.4276], [0, 0.2392], [0, 0.5329], [0, 0.6902]], [[0, 0.1119], [0, 0.0561], [0, 0.4683], [0, 0.035], [0, 0.4493], [0, 0.8577], [0, 0.9264], [0, 0.9109]], [[0, 0.7858], [0, 0.0592], [0, 0.2151], [0, 0.6363], [0, 0.7663], [0.6619, 0.7502], [0.1094, 0.853], [0.3384, 0.8793]], [[0, 0.1803], [0, 0.8142], [0, 0.8613], [0, 0.5636], [0, 0.2309], [0.436, 0.6193], [0.5672, 0.281], [0.7856, 0.8859]]]]

Expected: [[[[0, 0.7462], [0, 0.5461], [0, 0.587], [0, 0.8977], [0, 0.5585], [0, 0.4226], [0, 0.1844], [0, 0.0911]], [[0, 0.8581], [0, 0.221], [0, 0.0537], [0, 0.8368], [0, 0.9319], [0, 0.8619], [0, 0.8217], [0, 0.5743]], [[0, 0.1873], [0, 0.0363], [0, 0.336], [0, 0.2369], [0, 0.4276], [0, 0.2392], [0, 0.5329], [0, 0.6902]], [[0, 0.1119], [0, 0.0561], [0, 0.4683], [0, 0.035], [0, 0.4493], [0, 0.8577], [0, 0.9264], [0, 0.9109]], [[0, 0.7858], [0, 0.0592], [0, 0.2151], [0, 0.6363], [0, 0.7663], [0.6619, 0.7502], [0.1094, 0.853], [0.3384, 0.8793]], [[0, 0.1803], [0, 0.8142], [0, 0.8613], [0, 0.5636], [0, 0.2309], [0.436, 0.6193], [0.5672, 0.281], [0.7856, 0.8859]]]]