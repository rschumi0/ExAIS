import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Thr9932 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con53375 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Mul99718 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Mul99718 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Fla78587 = tf.keras.layers.Input(shape=([3, 4, 1]))
in0Con44140 = tf.keras.layers.Input(shape=([12, 1, 1]))
in0Ave93437 = tf.keras.layers.Input(shape=([1, 1, 2]))
in1Ave93437 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con64636 = tf.keras.layers.Input(shape=([12, 3, 2]))

Thr9932 = keras.layers.ThresholdedReLU(theta=1.8905268922765903, name = 'Thr9932', input_shape=(1, 1, 2))(in0Thr9932)
Res86825 = keras.layers.Reshape((1, 1, 2, 1), name = 'Res86825', )(Thr9932)
Zer1156 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (0, 0)), name = 'Zer1156', )(Res86825)
Con53375 = keras.layers.Concatenate(axis=4, name = 'Con53375', )([Zer1156,in0Con53375])
Mul99718 = keras.layers.Multiply(name = 'Mul99718', )([in0Mul99718,in1Mul99718])
Sub77377 = keras.layers.Subtract(name = 'Sub77377', )([Con53375,Mul99718])
Res44317 = keras.layers.Reshape((2, 2, 4), name = 'Res44317', )(Sub77377)
Zer32268 = keras.layers.ZeroPadding2D(padding=((10, 0), (1, 0)), name = 'Zer32268', )(Res44317)
Fla78587 = keras.layers.Flatten(name = 'Fla78587', )(in0Fla78587)
Res8951 = keras.layers.Reshape((12, 1), name = 'Res8951', )(Fla78587)
Res24841 = keras.layers.Reshape((12, 1, 1), name = 'Res24841', )(Res8951)
Con44140 = keras.layers.Concatenate(axis=3, name = 'Con44140', )([Res24841,in0Con44140])
Ave93437 = keras.layers.Average(name = 'Ave93437', )([in0Ave93437,in1Ave93437])
Sof20319 = keras.layers.Softmax(axis=1, name = 'Sof20319', )(Ave93437)
Zer28943 = keras.layers.ZeroPadding2D(padding=((11, 0), (0, 0)), name = 'Zer28943', )(Sof20319)
Add59002 = keras.layers.Add(name = 'Add59002', )([Con44140,Zer28943])
Zer10060 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer10060', )(Add59002)
Con64636 = keras.layers.Concatenate(axis=3, name = 'Con64636', )([Zer10060,in0Con64636])
Ave84314 = keras.layers.Average(name = 'Ave84314', )([Zer32268,Con64636])
model = tf.keras.models.Model(inputs=[in0Thr9932,in0Con53375,in0Mul99718,in1Mul99718,in0Fla78587,in0Con44140,in0Ave93437,in1Ave93437,in0Con64636], outputs=Ave84314)
in0Thr9932 = tf.constant([[[[0.5699, 0.0792]]]])
in0Con53375 = tf.constant([[[[[0.485], [0.1987]], [[0.8474], [0.4198]]], [[[0.9181], [0.9887]], [[0.3693], [0.4612]]]]])
in0Mul99718 = tf.constant([[[[[0.8709, 0.126], [0.8348, 0.3991]], [[0.4744, 0.6014], [0.4472, 0.0269]]], [[[0.8385, 0.4181], [0.7641, 0.1644]], [[0.7228, 0.356], [0.2391, 0.5457]]]]])
in1Mul99718 = tf.constant([[[[[0.4889, 0.314], [0.2629, 0.7257]], [[0.6088, 0.9033], [0.802, 0.3486]]], [[[0.2792, 0.4872], [0.8458, 0.6112]], [[0.7318, 0.8871], [0.9691, 0.0909]]]]])
in0Fla78587 = tf.constant([[[[1.5143], [1.9447], [1.6313], [1.3431]], [[1.2244], [1.8817], [1.191], [1.1911]], [[1.9257], [1.9283], [1.9967], [1.4253]]]])
in0Con44140 = tf.constant([[[[0.5008]], [[0.6011]], [[0.1045]], [[0.6065]], [[0.8068]], [[0.1447]], [[0.7229]], [[0.1889]], [[0.8668]], [[0.6918]], [[0.1568]], [[0.1001]]]])
in0Ave93437 = tf.constant([[[[0.7477, 0.0088]]]])
in1Ave93437 = tf.constant([[[[0.3295, 0.7141]]]])
in0Con64636 = tf.constant([[[[0.1446, 0.2489], [0.9217, 0.8143], [0.7811, 0.4114]], [[0.8454, 0.6568], [0.7025, 0.4189], [0.6405, 0.0685]], [[0.4174, 0.3042], [0.4299, 0.1733], [0.1453, 0.3532]], [[0.6785, 0.1317], [0.1871, 0.353], [0.6962, 0.677]], [[0.3269, 0.1547], [0.1117, 0.4206], [0.4264, 0.8432]], [[0.0151, 0.1219], [0.9562, 0.9379], [0.1956, 0.0134]], [[0.33, 0.9506], [0.6601, 0.4438], [0.5539, 0.319]], [[0.4074, 0.5544], [0.8856, 0.2017], [0.2532, 0.4425]], [[0.9107, 0.8715], [0.358, 0.279], [0.6841, 0.4788]], [[0.9867, 0.1468], [0.3614, 0.7667], [0.9509, 0.946]], [[0.0495, 0.9159], [0.1264, 0.5717], [0.4427, 0.0749]], [[0.4177, 0.7105], [0.1791, 0.2843], [0.5498, 0.0288]]]])
print (np.array2string(model.predict([in0Thr9932,in0Con53375,in0Mul99718,in1Mul99718,in0Fla78587,in0Con44140,in0Ave93437,in1Ave93437,in0Con64636],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave84314.png')

LThr9932 = thresholded_relu_layer([[[[0.5699, 0.0792]]]], 1.8905268922765903, Thr9932), 
LRes86825 = reshape_layer(Thr9932, [1, 1, 2, 1], Res86825), 
LZer1156 = zero_padding3D_layer(Res86825, 1, 0, 1, 0, 0, 0, Zer1156), 
LCon53375 = concatenate_layer([Zer1156,[[[[[0.485], [0.1987]], [[0.8474], [0.4198]]], [[[0.9181], [0.9887]], [[0.3693], [0.4612]]]]]], 4, Con53375), 
LMul99718 = multiply_layer([[[[[[0.8709, 0.126], [0.8348, 0.3991]], [[0.4744, 0.6014], [0.4472, 0.0269]]], [[[0.8385, 0.4181], [0.7641, 0.1644]], [[0.7228, 0.356], [0.2391, 0.5457]]]]], [[[[[0.4889, 0.314], [0.2629, 0.7257]], [[0.6088, 0.9033], [0.802, 0.3486]]], [[[0.2792, 0.4872], [0.8458, 0.6112]], [[0.7318, 0.8871], [0.9691, 0.0909]]]]]], Mul99718), 
LSub77377 = subtract_layer(Con53375,Mul99718, Sub77377), 
LRes44317 = reshape_layer(Sub77377, [2, 2, 4], Res44317), 
LZer32268 = zero_padding2D_layer(Res44317, 10, 0, 1, 0, Zer32268), 
LFla78587 = flatten_layer([[[[1.5143], [1.9447], [1.6313], [1.3431]], [[1.2244], [1.8817], [1.191], [1.1911]], [[1.9257], [1.9283], [1.9967], [1.4253]]]], Fla78587), 
LRes8951 = reshape_layer(Fla78587, [12, 1], Res8951), 
LRes24841 = reshape_layer(Res8951, [12, 1, 1], Res24841), 
LCon44140 = concatenate_layer([Res24841,[[[[0.5008]], [[0.6011]], [[0.1045]], [[0.6065]], [[0.8068]], [[0.1447]], [[0.7229]], [[0.1889]], [[0.8668]], [[0.6918]], [[0.1568]], [[0.1001]]]]], 3, Con44140), 
LAve93437 = average_layer([[[[[0.7477, 0.0088]]]], [[[[0.3295, 0.7141]]]]], Ave93437), 
LSof20319 = softmax_layer(Ave93437, 1, Sof20319), 
LZer28943 = zero_padding2D_layer(Sof20319, 11, 0, 0, 0, Zer28943), 
LAdd59002 = add_layer([Con44140,Zer28943], Add59002), 
LZer10060 = zero_padding2D_layer(Add59002, 0, 0, 2, 0, Zer10060), 
LCon64636 = concatenate_layer([Zer10060,[[[[0.1446, 0.2489], [0.9217, 0.8143], [0.7811, 0.4114]], [[0.8454, 0.6568], [0.7025, 0.4189], [0.6405, 0.0685]], [[0.4174, 0.3042], [0.4299, 0.1733], [0.1453, 0.3532]], [[0.6785, 0.1317], [0.1871, 0.353], [0.6962, 0.677]], [[0.3269, 0.1547], [0.1117, 0.4206], [0.4264, 0.8432]], [[0.0151, 0.1219], [0.9562, 0.9379], [0.1956, 0.0134]], [[0.33, 0.9506], [0.6601, 0.4438], [0.5539, 0.319]], [[0.4074, 0.5544], [0.8856, 0.2017], [0.2532, 0.4425]], [[0.9107, 0.8715], [0.358, 0.279], [0.6841, 0.4788]], [[0.9867, 0.1468], [0.3614, 0.7667], [0.9509, 0.946]], [[0.0495, 0.9159], [0.1264, 0.5717], [0.4427, 0.0749]], [[0.4177, 0.7105], [0.1791, 0.2843], [0.5498, 0.0288]]]]], 3, Con64636), 
LAve84314 = average_layer([Zer32268,Con64636], Ave84314), 
exec_layers([LThr9932,LRes86825,LZer1156,LCon53375,LMul99718,LSub77377,LRes44317,LZer32268,LFla78587,LRes8951,LRes24841,LCon44140,LAve93437,LSof20319,LZer28943,LAdd59002,LZer10060,LCon64636,LAve84314],["Thr9932","Res86825","Zer1156","Con53375","Mul99718","Sub77377","Res44317","Zer32268","Fla78587","Res8951","Res24841","Con44140","Ave93437","Sof20319","Zer28943","Add59002","Zer10060","Con64636","Ave84314"],Ave84314,"Ave84314")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0723000, 0.1244500], [0.0000000, 0.0000000, 0.4608500, 0.4071500], [0.7571500, 0.2504000, 0.3905500, 0.2057000]], [[0.0000000, 0.0000000, 0.4227000, 0.3284000], [0.0000000, 0.0000000, 0.3512500, 0.2094500], [0.9723500, 0.3005500, 0.3202500, 0.0342500]], [[0.0000000, 0.0000000, 0.2087000, 0.1521000], [0.0000000, 0.0000000, 0.2149500, 0.0866500], [0.8156500, 0.0522500, 0.0726500, 0.1766000]], [[0.0000000, 0.0000000, 0.3392500, 0.0658500], [0.0000000, 0.0000000, 0.0935500, 0.1765000], [0.6715500, 0.3032500, 0.3481000, 0.3385000]], [[0.0000000, 0.0000000, 0.1634500, 0.0773500], [0.0000000, 0.0000000, 0.0558500, 0.2103000], [0.6122000, 0.4034000, 0.2132000, 0.4216000]], [[0.0000000, 0.0000000, 0.0075500, 0.0609500], [0.0000000, 0.0000000, 0.4781000, 0.4689500], [0.9408500, 0.0723500, 0.0978000, 0.0067000]], [[0.0000000, 0.0000000, 0.1650000, 0.4753000], [0.0000000, 0.0000000, 0.3300500, 0.2219000], [0.5955000, 0.3614500, 0.2769500, 0.1595000]], [[0.0000000, 0.0000000, 0.2037000, 0.2772000], [0.0000000, 0.0000000, 0.4428000, 0.1008500], [0.5955500, 0.0944500, 0.1266000, 0.2212500]], [[0.0000000, 0.0000000, 0.4553500, 0.4357500], [0.0000000, 0.0000000, 0.1790000, 0.1395000], [0.9628500, 0.4334000, 0.3420500, 0.2394000]], [[0.0000000, 0.0000000, 0.4933500, 0.0734000], [0.0000000, 0.0000000, 0.1807000, 0.3833500], [0.9641500, 0.3459000, 0.4754500, 0.4730000]], [[0.0000000, 0.0000000, 0.0247500, 0.4579500], [-0.2128915, 0.2227180, -0.0465345, 0.2403865], [0.8539427, 0.2304777, 0.0420228, 0.2426613]], [[0.0000000, 0.0000000, 0.2088500, 0.3552500], [-0.1170546, 0.3572008, -0.2335879, 0.5862593], [0.9481775, 0.5767962, 0.1590441, 0.2201979]]]]

Expected (Unparsed): [[[[0,0,0.0723,0.12445],[0,0,0.46085,0.40715],[0.75715,0.2504,0.39055,0.2057]],[[0,0,0.4227,0.3284],[0,0,0.35125,0.20945],[0.97235,0.30055,0.32025,0.03425]],[[0,0,0.2087,0.1521],[0,0,0.21495,0.08665],[0.81565,0.05225,0.07265,0.1766]],[[0,0,0.33925,0.06585],[0,0,0.09355,0.1765],[0.67155,0.30325,0.3481,0.3385]],[[0,0,0.16345,0.07735],[0,0,0.05585,0.2103],[0.6122,0.4034,0.2132,0.4216]],[[0,0,0.00755,0.06095],[0,0,0.4781,0.46895],[0.94085,0.07235,0.0978,0.0067]],[[0,0,0.165,0.4753],[0,0,0.33005,0.2219],[0.5955,0.36145,0.27695,0.1595]],[[0,0,0.2037,0.2772],[0,0,0.4428,0.10085],[0.59555,0.09445,0.1266,0.22125]],[[0,0,0.45535,0.43575],[0,0,0.179,0.1395],[0.96285,0.4334,0.34205,0.2394]],[[0,0,0.49335,0.0734],[0,0,0.1807,0.38335],[0.96415,0.3459,0.47545,0.473]],[[0,0,0.02475,0.45795],[-0.212891505,0.222718,-0.04653446,0.24038656499999997],[0.85394264,0.23047768999999999,0.0420228,0.24266133]],[[0,0,0.20885,0.35525],[-0.11705460000000001,0.35720084,-0.23358788999999996,0.58625936],[0.94817748,0.5767962000000001,0.159044095,0.22019793499999998]]]]

Actual:   [[[[0, 0, 0.0723, 0.1245], [0, 0, 0.4609, 0.4072], [0.7572, 0.2504, 0.3906, 0.2057]], [[0, 0, 0.4227, 0.3284], [0, 0, 0.3513, 0.2095], [0.9724, 0.3006, 0.3203, 0.0343]], [[0, 0, 0.2087, 0.1521], [0, 0, 0.215, 0.0867], [0.8157, 0.0523, 0.0727, 0.1766]], [[0, 0, 0.3393, 0.0659], [0, 0, 0.0936, 0.1765], [0.6716, 0.3033, 0.3481, 0.3385]], [[0, 0, 0.1635, 0.0774], [0, 0, 0.0559, 0.2103], [0.6122, 0.4034, 0.2132, 0.4216]], [[0, 0, 0.0076, 0.061], [0, 0, 0.4781, 0.469], [0.9409, 0.0724, 0.0978, 0.0067]], [[0, 0, 0.165, 0.4753], [0, 0, 0.3301, 0.2219], [0.5955, 0.3615, 0.277, 0.1595]], [[0, 0, 0.2037, 0.2772], [0, 0, 0.4428, 0.1009], [0.5956, 0.0945, 0.1266, 0.2213]], [[0, 0, 0.4554, 0.4358], [0, 0, 0.179, 0.1395], [0.9629, 0.4334, 0.3421, 0.2394]], [[0, 0, 0.4934, 0.0734], [0, 0, 0.1807, 0.3834], [0.9642, 0.3459, 0.4755, 0.473]], [[0, 0, 0.0248, 0.458], [-0.2128, 0.2228, -0.0465, 0.2404], [0.854, 0.2305, 0.0421, 0.2427]], [[0, 0, 0.2089, 0.3553], [-0.117, 0.3573, -0.2335, 0.5863], [0.9482, 0.5768, 0.1591, 0.2202]]]]

Expected: [[[[0, 0, 0.0723, 0.1245], [0, 0, 0.4609, 0.4072], [0.7572, 0.2504, 0.3906, 0.2057]], [[0, 0, 0.4227, 0.3284], [0, 0, 0.3513, 0.2095], [0.9724, 0.3006, 0.3203, 0.0343]], [[0, 0, 0.2087, 0.1521], [0, 0, 0.215, 0.0867], [0.8157, 0.0523, 0.0727, 0.1766]], [[0, 0, 0.3393, 0.0659], [0, 0, 0.0936, 0.1765], [0.6716, 0.3033, 0.3481, 0.3385]], [[0, 0, 0.1635, 0.0774], [0, 0, 0.0559, 0.2103], [0.6122, 0.4034, 0.2132, 0.4216]], [[0, 0, 0.0076, 0.061], [0, 0, 0.4781, 0.469], [0.9409, 0.0724, 0.0978, 0.0067]], [[0, 0, 0.165, 0.4753], [0, 0, 0.3301, 0.2219], [0.5955, 0.3615, 0.277, 0.1595]], [[0, 0, 0.2037, 0.2772], [0, 0, 0.4428, 0.1009], [0.5956, 0.0945, 0.1266, 0.2213]], [[0, 0, 0.4554, 0.4358], [0, 0, 0.179, 0.1395], [0.9629, 0.4334, 0.3421, 0.2394]], [[0, 0, 0.4934, 0.0734], [0, 0, 0.1807, 0.3834], [0.9642, 0.3459, 0.4755, 0.473]], [[0, 0, 0.0248, 0.458], [-0.2128, 0.2228, -0.0465, 0.2404], [0.854, 0.2305, 0.0421, 0.2427]], [[0, 0, 0.2089, 0.3553], [-0.117, 0.3573, -0.2335, 0.5863], [0.9482, 0.5768, 0.1591, 0.2202]]]]