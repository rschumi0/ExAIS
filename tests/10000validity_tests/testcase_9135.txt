import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Den187 = tf.keras.layers.Input(shape=([2, 4, 2]))
in0Max47876 = tf.keras.layers.Input(shape=([1, 1]))
in1Max47876 = tf.keras.layers.Input(shape=([1, 1]))
in0Con18408 = tf.keras.layers.Input(shape=([2, 15]))

Den187 = keras.layers.Dense(4,name = 'Den187', )(in0Den187)
Res94695 = keras.layers.Reshape((2, 16), name = 'Res94695', )(Den187)
Max47876 = keras.layers.Maximum(name = 'Max47876', )([in0Max47876,in1Max47876])
Zer86441 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer86441', )(Max47876)
Con18408 = keras.layers.Concatenate(axis=2, name = 'Con18408', )([Zer86441,in0Con18408])
Mul81660 = keras.layers.Multiply(name = 'Mul81660', )([Res94695,Con18408])
model = tf.keras.models.Model(inputs=[in0Den187,in0Max47876,in1Max47876,in0Con18408], outputs=Mul81660)
w = model.get_layer('Den187').get_weights() 
w[0] = np.array([[0.5234, 0.1985, 0.4929, 0.3606], [0.9656, 0.8488, 0.4919, 0.9194]])
w[1] = np.array([0.5819, 0.4381, 0.8617, 0.2576])
model.get_layer('Den187').set_weights(w) 
in0Den187 = tf.constant([[[[0.6694, 0.0823], [0.165, 0.2507], [0.4332, 0.6084], [0.1485, 0.6577]], [[0.834, 0.0356], [0.8346, 0.1113], [0.2662, 0.4644], [0.106, 0.9592]]]])
in0Max47876 = tf.constant([[[0.7192]]])
in1Max47876 = tf.constant([[[0.1058]]])
in0Con18408 = tf.constant([[[0.9774, 0.541, 0.1678, 0.033, 0.7774, 0.7737, 0.5083, 0.4189, 0.8081, 0.6066, 0.6308, 0.5183, 0.9432, 0.7668, 0.0883], [0.834, 0.6591, 0.2375, 0.7258, 0.6034, 0.4187, 0.9216, 0.3595, 0.1524, 0.842, 0.63, 0.1391, 0.0942, 0.7306, 0.7956]]])
print (np.array2string(model.predict([in0Den187,in0Max47876,in1Max47876,in0Con18408],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul81660.png')

LDen187 = dense_layer([[[[0.6694, 0.0823], [0.165, 0.2507], [0.4332, 0.6084], [0.1485, 0.6577]], [[0.834, 0.0356], [0.8346, 0.1113], [0.2662, 0.4644], [0.106, 0.9592]]]], [[0.5234, 0.1985, 0.4929, 0.3606], [0.9656, 0.8488, 0.4919, 0.9194]],[0.5819, 0.4381, 0.8617, 0.2576], Den187), 
LRes94695 = reshape_layer(Den187, [2, 16], Res94695), 
LMax47876 = maximum_layer([[[[0.7192]]], [[[0.1058]]]], Max47876), 
LZer86441 = zero_padding1D_layer(Max47876, 1, 0, Zer86441), 
LCon18408 = concatenate_layer([Zer86441,[[[0.9774, 0.541, 0.1678, 0.033, 0.7774, 0.7737, 0.5083, 0.4189, 0.8081, 0.6066, 0.6308, 0.5183, 0.9432, 0.7668, 0.0883], [0.834, 0.6591, 0.2375, 0.7258, 0.6034, 0.4187, 0.9216, 0.3595, 0.1524, 0.842, 0.63, 0.1391, 0.0942, 0.7306, 0.7956]]]], 2, Con18408), 
LMul81660 = multiply_layer([Res94695,Con18408], Mul81660), 
exec_layers([LDen187,LRes94695,LMax47876,LZer86441,LCon18408,LMul81660],["Den187","Res94695","Max47876","Zer86441","Con18408","Mul81660"],Mul81660,"Mul81660")

Actual (Unparsed): [[[0.0000000, 0.6263493, 0.6665827, 0.0964266, 0.0300411, 0.5314669, 0.8250333, 0.2783413, 0.5848296, 0.8408281, 0.8337694, 0.6138787, 0.6710430, 0.9675657, 0.9649551, 0.0808685], [0.7571673, 0.5286445, 0.8504303, 0.1403794, 0.8173966, 0.4213177, 0.5559594, 0.6090725, 0.4204905, 0.1348928, 1.0283753, 0.4917535, 0.2174945, 0.1199458, 1.0124493, 0.9369877]]]

Expected (Unparsed): [[[0.0,0.626349333636,0.6665826708300001,0.09642664922800001,0.03004111836,0.531466913484,0.8250333160710001,0.278341308414,0.584829607688,0.8408281469719999,0.833769419184,0.6138787143040001,0.671043020366,0.967565695032,0.9649551371040002,0.080868537784],[0.757167258432,0.52864447752,0.8504302971840001,0.140379372,0.8173966277359999,0.421317738436,0.555959410547,0.609072519168,0.42049051233999996,0.134892809208,1.02837530228,0.4917534804,0.21749452327200003,0.11994579823200001,1.012449319128,0.936987730848]]]

Actual:   [[[0, 0.6264, 0.6666, 0.0965, 0.0301, 0.5315, 0.8251, 0.2784, 0.5849, 0.8409, 0.8338, 0.6139, 0.6711, 0.9676, 0.965, 0.0809], [0.7572, 0.5287, 0.8505, 0.1404, 0.8174, 0.4214, 0.556, 0.6091, 0.4205, 0.1349, 1.0284, 0.4918, 0.2175, 0.12, 1.0125, 0.937]]]

Expected: [[[0, 0.6264, 0.6666, 0.0965, 0.0301, 0.5315, 0.8251, 0.2784, 0.5849, 0.8409, 0.8338, 0.6139, 0.6711, 0.9676, 0.965, 0.0809], [0.7572, 0.5287, 0.8505, 0.1404, 0.8174, 0.4214, 0.556, 0.6091, 0.4205, 0.1349, 1.0284, 0.4918, 0.2175, 0.12, 1.0125, 0.937]]]