import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con97860 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con79221 = tf.keras.layers.Input(shape=([5, 1]))
in0Den76403 = tf.keras.layers.Input(shape=([5, 3]))
in0Min33415 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in1Min33415 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))

Con97860 = keras.layers.Conv2DTranspose(3, (1, 1),strides=(2, 1), padding='same', name = 'Con97860', )(in0Con97860)
Res25404 = keras.layers.Reshape((4, 3), name = 'Res25404', )(Con97860)
Zer91038 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer91038', )(Res25404)
Con79221 = keras.layers.Concatenate(axis=2, name = 'Con79221', )([Zer91038,in0Con79221])
Den76403 = keras.layers.Dense(4,name = 'Den76403', )(in0Den76403)
Min33415 = keras.layers.Minimum(name = 'Min33415', )([in0Min33415,in1Min33415])
Res76312 = keras.layers.Reshape((2, 2, 2), name = 'Res76312', )(Min33415)
Res15959 = keras.layers.Reshape((2, 4), name = 'Res15959', )(Res76312)
Glo84797 = keras.layers.GlobalMaxPool1D(name = 'Glo84797', )(Res15959)
Res76486 = keras.layers.Reshape((4, 1), name = 'Res76486', )(Glo84797)
Loc79330 = keras.layers.LocallyConnected1D(4, (2),strides=(1), name = 'Loc79330', )(Res76486)
Zer48179 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer48179', )(Loc79330)
Mul60186 = keras.layers.Multiply(name = 'Mul60186', )([Den76403,Zer48179])
Max25916 = keras.layers.Maximum(name = 'Max25916', )([Con79221,Mul60186])
Sof50608 = keras.layers.Softmax(axis=1, name = 'Sof50608', )(Max25916)
model = tf.keras.models.Model(inputs=[in0Con97860,in0Con79221,in0Den76403,in0Min33415,in1Min33415], outputs=Sof50608)
w = model.get_layer('Con97860').get_weights() 
w[0] = np.array([[[[0.8782], [0.586], [0.9718]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con97860').set_weights(w) 
w = model.get_layer('Den76403').get_weights() 
w[0] = np.array([[0.7196, 0.2235, 0.8964, 0.5155], [0.132, 0.6496, 0.7606, 0.6888], [0.5096, 0.6284, 0.3294, 0.8964]])
w[1] = np.array([0.1445, 0.838, 0.0623, 0.6506])
model.get_layer('Den76403').set_weights(w) 
w = model.get_layer('Loc79330').get_weights() 
w[0] = np.array([[[0.3522, 0.7682, 0.5939, 0.5321], [0.4479, 0.136, 0.1155, 0.2622]], [[0.6696, 0.3133, 0.5779, 0.8681], [0.7279, 0.0252, 0.6749, 0.9629]], [[0.7895, 0.4814, 0.6577, 0.8334], [0.5403, 0.7212, 0.5685, 0.5901]]])
w[1] = np.array([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])
model.get_layer('Loc79330').set_weights(w) 
in0Con97860 = tf.constant([[[[0.4789]], [[0.5004]]]])
in0Con79221 = tf.constant([[[0.7215], [0.6101], [0.2445], [0.5755], [0.4787]]])
in0Den76403 = tf.constant([[[0.8381, 0.7634, 0.1941], [0.4085, 0.028, 0.5089], [0.4859, 0.0382, 0.2923], [0.487, 0.0494, 0.6722], [0.6228, 0.4405, 0.1509]]])
in0Min33415 = tf.constant([[[[[0.6059], [0.7651]], [[0.2432], [0.7823]]], [[[0.8125], [0.4663]], [[0.7268], [0.3799]]]]])
in1Min33415 = tf.constant([[[[[0.1107], [0.4375]], [[0.1184], [0.482]]], [[[0.289], [0.1491]], [[0.7747], [0.9428]]]]])
print (np.array2string(model.predict([in0Con97860,in0Con79221,in0Den76403,in0Min33415,in1Min33415],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sof50608.png')

LCon97860 = conv2D_transpose_layer([[[[0.4789]], [[0.5004]]]], 1, 1,[[[[0.8782], [0.586], [0.9718]]]],[0, 0, 0], 2, 1, true, Con97860), 
LRes25404 = reshape_layer(Con97860, [4, 3], Res25404), 
LZer91038 = zero_padding1D_layer(Res25404, 1, 0, Zer91038), 
LCon79221 = concatenate_layer([Zer91038,[[[0.7215], [0.6101], [0.2445], [0.5755], [0.4787]]]], 2, Con79221), 
LDen76403 = dense_layer([[[0.8381, 0.7634, 0.1941], [0.4085, 0.028, 0.5089], [0.4859, 0.0382, 0.2923], [0.487, 0.0494, 0.6722], [0.6228, 0.4405, 0.1509]]], [[0.7196, 0.2235, 0.8964, 0.5155], [0.132, 0.6496, 0.7606, 0.6888], [0.5096, 0.6284, 0.3294, 0.8964]],[0.1445, 0.838, 0.0623, 0.6506], Den76403), 
LMin33415 = minimum_layer([[[[[[0.6059], [0.7651]], [[0.2432], [0.7823]]], [[[0.8125], [0.4663]], [[0.7268], [0.3799]]]]], [[[[[0.1107], [0.4375]], [[0.1184], [0.482]]], [[[0.289], [0.1491]], [[0.7747], [0.9428]]]]]], Min33415), 
LRes76312 = reshape_layer(Min33415, [2, 2, 2], Res76312), 
LRes15959 = reshape_layer(Res76312, [2, 4], Res15959), 
LGlo84797 = global_max_pool1D_layer(Res15959, Glo84797), 
LRes76486 = reshape_layer(Glo84797, [4, 1], Res76486), 
LLoc79330 = locally_connected1D_layer(Res76486, 2,[[[0.3522, 0.7682, 0.5939, 0.5321], [0.4479, 0.136, 0.1155, 0.2622]], [[0.6696, 0.3133, 0.5779, 0.8681], [0.7279, 0.0252, 0.6749, 0.9629]], [[0.7895, 0.4814, 0.6577, 0.8334], [0.5403, 0.7212, 0.5685, 0.5901]]],[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 1, Loc79330), 
LZer48179 = zero_padding1D_layer(Loc79330, 2, 0, Zer48179), 
LMul60186 = multiply_layer([Den76403,Zer48179], Mul60186), 
LMax25916 = maximum_layer([Con79221,Mul60186], Max25916), 
LSof50608 = softmax_layer(Max25916, 1, Sof50608), 
exec_layers([LCon97860,LRes25404,LZer91038,LCon79221,LDen76403,LMin33415,LRes76312,LRes15959,LGlo84797,LRes76486,LLoc79330,LZer48179,LMul60186,LMax25916,LSof50608],["Con97860","Res25404","Zer91038","Con79221","Den76403","Min33415","Res76312","Res15959","Glo84797","Res76486","Loc79330","Zer48179","Mul60186","Max25916","Sof50608"],Sof50608,"Sof50608")

Actual (Unparsed): [[[0.1320653, 0.1310995, 0.1311045, 0.1464766], [0.2011129, 0.1735719, 0.2088028, 0.1310352], [0.1601769, 0.1814767, 0.1505733, 0.0979748], [0.2642961, 0.1757726, 0.2302894, 0.3746867], [0.2423487, 0.3380792, 0.2792300, 0.2498267]]]

Expected (Unparsed): [[[0.13206532357133163,0.13109952169794803,0.13110454562948692,0.14647663395009144],[0.20111294299885357,0.17357193812026173,0.20880276184799457,0.13103519097402772],[0.160176897942728,0.18147669033486907,0.1505733323059945,0.09797479530833514],[0.26429609002525817,0.1757726049592672,0.2302893732525175,0.3746866520710239],[0.24234874546182858,0.33807924488765395,0.27922998696400647,0.2498267276965219]]]

Actual:   [[[0.1321, 0.1311, 0.1312, 0.1465], [0.2012, 0.1736, 0.2089, 0.1311], [0.1602, 0.1815, 0.1506, 0.098], [0.2643, 0.1758, 0.2303, 0.3747], [0.2424, 0.3381, 0.2793, 0.2499]]]

Expected: [[[0.1321, 0.1311, 0.1312, 0.1465], [0.2012, 0.1736, 0.2089, 0.1311], [0.1602, 0.1815, 0.1506, 0.098], [0.2643, 0.1758, 0.2303, 0.3747], [0.2424, 0.3381, 0.2793, 0.2499]]]