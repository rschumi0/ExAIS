import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave18693 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in1Ave18693 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))

Ave18693 = keras.layers.Average(name = 'Ave18693', )([in0Ave18693,in1Ave18693])
Con67996 = keras.layers.Conv3DTranspose(2, (1, 1, 1),strides=(1, 1, 1), padding='valid', name = 'Con67996', )(Ave18693)
Zer15573 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer15573', )(Con67996)
model = tf.keras.models.Model(inputs=[in0Ave18693,in1Ave18693], outputs=Zer15573)
w = model.get_layer('Con67996').get_weights() 
w[0] = np.array([[[[[0.2014, 0.2008], [0.9846, 0.6019]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con67996').set_weights(w) 
in0Ave18693 = tf.constant([[[[[0.3713, 0.1686]]]]])
in1Ave18693 = tf.constant([[[[[0.742, 0.8439]]]]])
print (np.array2string(model.predict([in0Ave18693,in1Ave18693],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Zer15573.png')

LAve18693 = average_layer([[[[[[0.3713, 0.1686]]]]], [[[[[0.742, 0.8439]]]]]], Ave18693), 
LCon67996 = conv3D_transpose_layer(Ave18693, 1, 1, 1,[[[[[0.2014, 0.2008], [0.9846, 0.6019]]]]],[0, 0], 1, 1, 1, false, Con67996), 
LZer15573 = zero_padding3D_layer(Con67996, 1, 1, 1, 1, 1, 1, Zer15573), 
exec_layers([LAve18693,LCon67996,LZer15573],["Ave18693","Con67996","Zer15573"],Zer15573,"Zer15573")

Actual (Unparsed): [[[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.2137643, 0.8527895], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]]]]

Expected (Unparsed): [[[[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0]]],[[[0,0],[0,0],[0,0]],[[0,0],[0.21376430999999999,0.852789465],[0,0]],[[0,0],[0,0],[0,0]]],[[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0]]]]]

Actual:   [[[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0.2138, 0.8528], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]]]]

Expected: [[[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0.2138, 0.8528], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]]]]