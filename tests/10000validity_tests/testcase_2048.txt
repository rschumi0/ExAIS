import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max26543 = tf.keras.layers.Input(shape=([2, 2]))
in1Max26543 = tf.keras.layers.Input(shape=([2, 2]))
in0Sep99759 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con3708 = tf.keras.layers.Input(shape=([2, 1, 8, 3]))
in0Con76451 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in0Add88477 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in1Add88477 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in0Con4120 = tf.keras.layers.Input(shape=([2, 1, 8, 2]))

Max26543 = keras.layers.Maximum(name = 'Max26543', )([in0Max26543,in1Max26543])
Sep99759 = keras.layers.SeparableConv2D(2, (1, 1),strides=(2, 2), padding='same', name = 'Sep99759', )(in0Sep99759)
Res83875 = keras.layers.Reshape((1, 2), name = 'Res83875', )(Sep99759)
Max11706 = keras.layers.MaxPool1D(pool_size=(1), name = 'Max11706', )(Res83875)
Zer45402 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer45402', )(Max11706)
Max77155 = keras.layers.Maximum(name = 'Max77155', )([Max26543,Zer45402])
Res25804 = keras.layers.Reshape((2, 2, 1), name = 'Res25804', )(Max77155)
Res15370 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res15370', )(Res25804)
Glo58565 = keras.layers.GlobalMaxPool3D(name = 'Glo58565', )(Res15370)
Res20349 = keras.layers.Reshape((1, 1), name = 'Res20349', )(Glo58565)
Res89987 = keras.layers.Reshape((1, 1, 1), name = 'Res89987', )(Res20349)
Res29982 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res29982', )(Res89987)
Zer70299 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (7, 0)), name = 'Zer70299', )(Res29982)
Con3708 = keras.layers.Concatenate(axis=4, name = 'Con3708', )([Zer70299,in0Con3708])
Con76451 = keras.layers.Conv3DTranspose(4, (1, 1, 1),strides=(2, 1, 8), padding='same', name = 'Con76451', )(in0Con76451)
Add88477 = keras.layers.Add(name = 'Add88477', )([in0Add88477,in1Add88477])
Zer10917 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (7, 0)), name = 'Zer10917', )(Add88477)
Con4120 = keras.layers.Concatenate(axis=4, name = 'Con4120', )([Zer10917,in0Con4120])
Max38300 = keras.layers.Maximum(name = 'Max38300', )([Con76451,Con4120])
Mul73486 = keras.layers.Multiply(name = 'Mul73486', )([Con3708,Max38300])
model = tf.keras.models.Model(inputs=[in0Max26543,in1Max26543,in0Sep99759,in0Con3708,in0Con76451,in0Add88477,in1Add88477,in0Con4120], outputs=Mul73486)
w = model.get_layer('Sep99759').get_weights() 
w[0] = np.array([[[[0.8594]]]])
w[1] = np.array([[[[0.6348, 0.3178]]]])
w[2] = np.array([0, 0])
model.get_layer('Sep99759').set_weights(w) 
w = model.get_layer('Con76451').get_weights() 
w[0] = np.array([[[[[0.8251, 0.5758], [0.3925, 0.7454], [0.4061, 0.6751], [0.5756, 0.4698]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con76451').set_weights(w) 
in0Max26543 = tf.constant([[[0.5332, 0.9822], [0.5195, 0.9407]]])
in1Max26543 = tf.constant([[[0.9511, 0.6471], [0.3789, 0.2132]]])
in0Sep99759 = tf.constant([[[[0.3137]], [[0.9097]]]])
in0Con3708 = tf.constant([[[[[0.3482, 0.1968, 0.213], [0.7007, 0.1395, 0.6619], [0.0214, 0.0901, 0.5311], [0.8428, 0.0519, 0.5283], [0.7457, 0.3004, 0.7411], [0.1353, 0.424, 0.8397], [0.1744, 0.2486, 0.7829], [0.881, 0.971, 0.5101]]], [[[0.4942, 0.3702, 0.909], [0.9999, 0.1985, 0.3707], [0.6679, 0.053, 0.2213], [0.7572, 0.789, 0.8782], [0.1034, 0.3685, 0.5853], [0.7358, 0.0209, 0.564], [0.2677, 0.2244, 0.0301], [0.3789, 0.9966, 0.1777]]]]])
in0Con76451 = tf.constant([[[[[0.9746, 0.1237]]]]])
in0Add88477 = tf.constant([[[[[0.5741, 0.2287]]]]])
in1Add88477 = tf.constant([[[[[0.731, 0.5274]]]]])
in0Con4120 = tf.constant([[[[[0.9873, 0.2606], [0.5193, 0.8886], [0.6476, 0.7584], [0.2309, 0.1851], [0.6229, 0.6783], [0.1816, 0.7635], [0.9366, 0.4183], [0.0244, 0.2973]]], [[[0.9998, 0.1416], [0.4492, 0.3886], [0.4295, 0.5005], [0.2353, 0.2029], [0.3573, 0.9281], [0.3616, 0.8608], [0.8221, 0.1307], [0.5408, 0.7313]]]]])
print (np.array2string(model.predict([in0Max26543,in1Max26543,in0Sep99759,in0Con3708,in0Con76451,in0Add88477,in1Add88477,in0Con4120],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul73486.png')

LMax26543 = maximum_layer([[[[0.5332, 0.9822], [0.5195, 0.9407]]], [[[0.9511, 0.6471], [0.3789, 0.2132]]]], Max26543), 
LSep99759 = separable_conv2D_layer([[[[0.3137]], [[0.9097]]]], 1, 1,[[[[[0.8594]]]],[[[[0.6348, 0.3178]]]]],[0, 0], 2, 2, true, Sep99759), 
LRes83875 = reshape_layer(Sep99759, [1, 2], Res83875), 
LMax11706 = max_pool1D_layer(Res83875, 1, Max11706), 
LZer45402 = zero_padding1D_layer(Max11706, 1, 0, Zer45402), 
LMax77155 = maximum_layer([Max26543,Zer45402], Max77155), 
LRes25804 = reshape_layer(Max77155, [2, 2, 1], Res25804), 
LRes15370 = reshape_layer(Res25804, [2, 2, 1, 1], Res15370), 
LGlo58565 = global_max_pool3D_layer(Res15370, Glo58565), 
LRes20349 = reshape_layer(Glo58565, [1, 1], Res20349), 
LRes89987 = reshape_layer(Res20349, [1, 1, 1], Res89987), 
LRes29982 = reshape_layer(Res89987, [1, 1, 1, 1], Res29982), 
LZer70299 = zero_padding3D_layer(Res29982, 1, 0, 0, 0, 7, 0, Zer70299), 
LCon3708 = concatenate_layer([Zer70299,[[[[[0.3482, 0.1968, 0.213], [0.7007, 0.1395, 0.6619], [0.0214, 0.0901, 0.5311], [0.8428, 0.0519, 0.5283], [0.7457, 0.3004, 0.7411], [0.1353, 0.424, 0.8397], [0.1744, 0.2486, 0.7829], [0.881, 0.971, 0.5101]]], [[[0.4942, 0.3702, 0.909], [0.9999, 0.1985, 0.3707], [0.6679, 0.053, 0.2213], [0.7572, 0.789, 0.8782], [0.1034, 0.3685, 0.5853], [0.7358, 0.0209, 0.564], [0.2677, 0.2244, 0.0301], [0.3789, 0.9966, 0.1777]]]]]], 4, Con3708), 
LCon76451 = conv3D_transpose_layer([[[[[0.9746, 0.1237]]]]], 1, 1, 1,[[[[[0.8251, 0.5758], [0.3925, 0.7454], [0.4061, 0.6751], [0.5756, 0.4698]]]]],[0, 0, 0, 0], 2, 1, 8, true, Con76451), 
LAdd88477 = add_layer([[[[[[0.5741, 0.2287]]]]], [[[[[0.731, 0.5274]]]]]], Add88477), 
LZer10917 = zero_padding3D_layer(Add88477, 1, 0, 0, 0, 7, 0, Zer10917), 
LCon4120 = concatenate_layer([Zer10917,[[[[[0.9873, 0.2606], [0.5193, 0.8886], [0.6476, 0.7584], [0.2309, 0.1851], [0.6229, 0.6783], [0.1816, 0.7635], [0.9366, 0.4183], [0.0244, 0.2973]]], [[[0.9998, 0.1416], [0.4492, 0.3886], [0.4295, 0.5005], [0.2353, 0.2029], [0.3573, 0.9281], [0.3616, 0.8608], [0.8221, 0.1307], [0.5408, 0.7313]]]]]], 4, Con4120), 
LMax38300 = maximum_layer([Con76451,Con4120], Max38300), 
LMul73486 = multiply_layer([Con3708,Max38300], Mul73486), 
exec_layers([LMax26543,LSep99759,LRes83875,LMax11706,LZer45402,LMax77155,LRes25804,LRes15370,LGlo58565,LRes20349,LRes89987,LRes29982,LZer70299,LCon3708,LCon76451,LAdd88477,LZer10917,LCon4120,LMax38300,LMul73486],["Max26543","Sep99759","Res83875","Max11706","Zer45402","Max77155","Res25804","Res15370","Glo58565","Res20349","Res89987","Res29982","Zer70299","Con3708","Con76451","Add88477","Zer10917","Con4120","Max38300","Mul73486"],Mul73486,"Mul73486")

Actual (Unparsed): [[[[[0.0000000, 0.1653032, 0.1943006, 0.1318670], [0.0000000, 0.0000000, 0.0724424, 0.5881643], [0.0000000, 0.0000000, 0.0583488, 0.4027862], [0.0000000, 0.0000000, 0.0119837, 0.0977883], [0.0000000, 0.0000000, 0.1871192, 0.5026882], [0.0000000, 0.0000000, 0.0769984, 0.6411109], [0.0000000, 0.0000000, 0.2328388, 0.3274871], [0.0000000, 0.0000000, 0.0236924, 0.1516527]]], [[[0.0000000, 0.0000000, 0.3701260, 0.1287144], [0.0000000, 0.0000000, 0.0891662, 0.1440540], [0.0000000, 0.0000000, 0.0227635, 0.1107607], [0.0000000, 0.0000000, 0.1856517, 0.1781868], [0.0000000, 0.0000000, 0.1316651, 0.5432170], [0.0000000, 0.0000000, 0.0075574, 0.4854912], [0.0000000, 0.0000000, 0.1844792, 0.0039341], [1.2818693, 0.2864863, 0.5389612, 0.1299520]]]]]

Expected (Unparsed): [[[[[0.0,0.16530324233600002,0.19430064,0.13186702626],[0,0.0,0.07244235,0.58816434],[0,0.0,0.05834875999999999,0.40278624],[0,0.0,0.01198371,0.09778832999999999],[0,0.0,0.18711916,0.50268813],[0,0.0,0.07699840000000001,0.64111095],[0,0.0,0.23283875999999998,0.32748707000000005],[0,0.0,0.023692400000000002,0.15165273]]],[[[0,0.0,0.37012596,0.1287144],[0,0.0,0.0891662,0.14405401999999998],[0,0.0,0.0227635,0.11076064999999999],[0,0.0,0.1856517,0.17818678],[0,0.0,0.13166505,0.54321693],[0,0.0,0.007557439999999999,0.48549119999999996],[0,0.0,0.18447924,0.0039340700000000004],[1.28186922,0.28648629000000003,0.53896128,0.12995200999999998]]]]]

Actual:   [[[[[0, 0.1654, 0.1944, 0.1319], [0, 0, 0.0725, 0.5882], [0, 0, 0.0584, 0.4028], [0, 0, 0.012, 0.0978], [0, 0, 0.1872, 0.5027], [0, 0, 0.077, 0.6412], [0, 0, 0.2329, 0.3275], [0, 0, 0.0237, 0.1517]]], [[[0, 0, 0.3702, 0.1288], [0, 0, 0.0892, 0.1441], [0, 0, 0.0228, 0.1108], [0, 0, 0.1857, 0.1782], [0, 0, 0.1317, 0.5433], [0, 0, 0.0076, 0.4855], [0, 0, 0.1845, 0.004], [1.2819, 0.2865, 0.539, 0.13]]]]]

Expected: [[[[[0, 0.1654, 0.1944, 0.1319], [0, 0, 0.0725, 0.5882], [0, 0, 0.0584, 0.4028], [0, 0, 0.012, 0.0978], [0, 0, 0.1872, 0.5027], [0, 0, 0.077, 0.6412], [0, 0, 0.2329, 0.3275], [0, 0, 0.0237, 0.1517]]], [[[0, 0, 0.3702, 0.1288], [0, 0, 0.0892, 0.1441], [0, 0, 0.0228, 0.1108], [0, 0, 0.1857, 0.1782], [0, 0, 0.1317, 0.5433], [0, 0, 0.0076, 0.4855], [0, 0, 0.1845, 0.004], [1.2819, 0.2865, 0.539, 0.13]]]]]