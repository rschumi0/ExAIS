import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min36810 = tf.keras.layers.Input(shape=([2, 2]))
in1Min36810 = tf.keras.layers.Input(shape=([2, 2]))
in0Con33890 = tf.keras.layers.Input(shape=([2, 3, 1]))
in0Cro8682 = tf.keras.layers.Input(shape=([3, 4, 4]))
in0Mul97410 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in1Mul97410 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Con8635 = tf.keras.layers.Input(shape=([1, 2, 7, 2]))

Min36810 = keras.layers.Minimum(name = 'Min36810', )([in0Min36810,in1Min36810])
Con2680 = keras.layers.Conv1D(3, (1),strides=(1), padding='same', dilation_rate=(1), name = 'Con2680', )(Min36810)
Res37649 = keras.layers.Reshape((2, 3, 1), name = 'Res37649', )(Con2680)
Con33890 = keras.layers.Concatenate(axis=3, name = 'Con33890', )([Res37649,in0Con33890])
Cro8682 = keras.layers.Cropping2D(cropping=((2, 0), (0, 3)), name = 'Cro8682', )(in0Cro8682)
Res50113 = keras.layers.Reshape((1, 1, 4, 1), name = 'Res50113', )(Cro8682)
Con83126 = keras.layers.Conv3D(3, (1, 1, 3),strides=(1, 1, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con83126', )(Res50113)
Zer11787 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (3, 0)), name = 'Zer11787', )(Con83126)
Mul97410 = keras.layers.Multiply(name = 'Mul97410', )([in0Mul97410,in1Mul97410])
Zer93487 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (6, 0)), name = 'Zer93487', )(Mul97410)
Con8635 = keras.layers.Concatenate(axis=4, name = 'Con8635', )([Zer93487,in0Con8635])
Min68653 = keras.layers.Minimum(name = 'Min68653', )([Zer11787,Con8635])
Res89495 = keras.layers.Reshape((1, 2, 21), name = 'Res89495', )(Min68653)
Loc33013 = keras.layers.LocallyConnected2D(2, (1, 2),strides=(1, 2), name = 'Loc33013', )(Res89495)
Zer74888 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer74888', )(Loc33013)
Min54850 = keras.layers.Minimum(name = 'Min54850', )([Con33890,Zer74888])
model = tf.keras.models.Model(inputs=[in0Min36810,in1Min36810,in0Con33890,in0Cro8682,in0Mul97410,in1Mul97410,in0Con8635], outputs=Min54850)
w = model.get_layer('Con2680').get_weights() 
w[0] = np.array([[[0.2602, 0.0356, 0.8299], [0.7245, 0.4745, 0.2112]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con2680').set_weights(w) 
w = model.get_layer('Con83126').get_weights() 
w[0] = np.array([[[[[0.4425, 0.6864, 0.0834]], [[0.2311, 0.7226, 0.4409]], [[0.6145, 0.9375, 0.6908]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con83126').set_weights(w) 
w = model.get_layer('Loc33013').get_weights() 
w[0] = np.array([[[0.7247, 0.6236], [0.9277, 0.7787], [0.0357, 0.0365], [0.4543, 0.0396], [0.2523, 0.5043], [0.5748, 0.92], [0.5731, 0.7707], [0.6561, 0.8562], [0.437, 0.7836], [0.2715, 0.9955], [0.9224, 0.407], [0.9961, 0.7632], [0.18, 0.7004], [0.4926, 0.5487], [0.1915, 0.5365], [0.3497, 0.0132], [0.5218, 0.8958], [0.2074, 0.9187], [0.7571, 0.6497], [0.9376, 0.18], [0.0113, 0.0237], [0.0348, 0.0484], [0.2165, 0.219], [0.9146, 0.9496], [0.918, 0.8632], [0.5209, 0.5212], [0.9422, 0.0581], [0.4959, 0.8194], [0.6177, 0.7988], [0.1813, 0.4988], [0.1954, 0.4498], [0.8893, 0.0077], [0.7355, 0.7791], [0.2031, 0.4885], [0.0065, 0.7779], [0.5537, 0.122], [0.878, 0.1199], [0.9521, 0.1143], [0.2783, 0.6536], [0.5533, 0.3892], [0.0349, 0.7623], [0.6784, 0.3179]]])
w[1] = np.array([[[0, 0]]])
model.get_layer('Loc33013').set_weights(w) 
in0Min36810 = tf.constant([[[0.5613, 0.3105], [0.702, 0.8318]]])
in1Min36810 = tf.constant([[[0.9994, 0.7005], [0.6945, 0.5856]]])
in0Con33890 = tf.constant([[[[0.3469], [0.3328], [0.813]], [[0.4345], [0.5419], [0.0209]]]])
in0Cro8682 = tf.constant([[[[1.1914, 1.0738, 1.7564, 1.8179], [1.7857, 1.0532, 1.4886, 1.6306], [1.5475, 1.0506, 1.4302, 1.1431], [1.2043, 1.589, 1.2063, 1.6792]], [[1.8228, 1.7779, 1.1122, 1.309], [1.5279, 1.5985, 1.651, 1.1497], [1.5149, 1.4377, 1.7663, 1.8077], [1.8628, 1.7397, 1.6426, 1.4865]], [[1.6118, 1.7392, 1.9793, 1.5744], [1.933, 1.9841, 1.5898, 1.9798], [1.9887, 1.7612, 1.0229, 1.0856], [1.2588, 1.596, 1.6623, 1.9596]]]])
in0Mul97410 = tf.constant([[[[[0.6918]], [[0.7146]]]]])
in1Mul97410 = tf.constant([[[[[0.4155]], [[0.3733]]]]])
in0Con8635 = tf.constant([[[[[0.4835, 0.7769], [0.684, 0.7373], [0.0084, 0.2803], [0.6135, 0.9483], [0.6449, 0.9897], [0.3532, 0.2158], [0.9895, 0.5087]], [[0.2969, 0.7666], [0.567, 0.0593], [0.95, 0.0051], [0.1453, 0.2378], [0.9062, 0.3176], [0.3936, 0.4504], [0.2483, 0.958]]]]])
print (np.array2string(model.predict([in0Min36810,in1Min36810,in0Con33890,in0Cro8682,in0Mul97410,in1Mul97410,in0Con8635],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min54850.png')

LMin36810 = minimum_layer([[[[0.5613, 0.3105], [0.702, 0.8318]]], [[[0.9994, 0.7005], [0.6945, 0.5856]]]], Min36810), 
LCon2680 = conv1D_layer(Min36810, 1,[[[0.2602, 0.0356, 0.8299], [0.7245, 0.4745, 0.2112]]],[0, 0, 0], 1, true, 1, Con2680), 
LRes37649 = reshape_layer(Con2680, [2, 3, 1], Res37649), 
LCon33890 = concatenate_layer([Res37649,[[[[0.3469], [0.3328], [0.813]], [[0.4345], [0.5419], [0.0209]]]]], 3, Con33890), 
LCro8682 = cropping2D_layer([[[[1.1914, 1.0738, 1.7564, 1.8179], [1.7857, 1.0532, 1.4886, 1.6306], [1.5475, 1.0506, 1.4302, 1.1431], [1.2043, 1.589, 1.2063, 1.6792]], [[1.8228, 1.7779, 1.1122, 1.309], [1.5279, 1.5985, 1.651, 1.1497], [1.5149, 1.4377, 1.7663, 1.8077], [1.8628, 1.7397, 1.6426, 1.4865]], [[1.6118, 1.7392, 1.9793, 1.5744], [1.933, 1.9841, 1.5898, 1.9798], [1.9887, 1.7612, 1.0229, 1.0856], [1.2588, 1.596, 1.6623, 1.9596]]]], 2, 0, 0, 3, Cro8682), 
LRes50113 = reshape_layer(Cro8682, [1, 1, 4, 1], Res50113), 
LCon83126 = conv3D_layer(Res50113, 1, 1, 3,[[[[[0.4425, 0.6864, 0.0834]], [[0.2311, 0.7226, 0.4409]], [[0.6145, 0.9375, 0.6908]]]]],[0, 0, 0], 1, 1, 1, true, 1, 1, 1, Con83126), 
LZer11787 = zero_padding3D_layer(Con83126, 0, 0, 1, 0, 3, 0, Zer11787), 
LMul97410 = multiply_layer([[[[[[0.6918]], [[0.7146]]]]], [[[[[0.4155]], [[0.3733]]]]]], Mul97410), 
LZer93487 = zero_padding3D_layer(Mul97410, 0, 0, 0, 0, 6, 0, Zer93487), 
LCon8635 = concatenate_layer([Zer93487,[[[[[0.4835, 0.7769], [0.684, 0.7373], [0.0084, 0.2803], [0.6135, 0.9483], [0.6449, 0.9897], [0.3532, 0.2158], [0.9895, 0.5087]], [[0.2969, 0.7666], [0.567, 0.0593], [0.95, 0.0051], [0.1453, 0.2378], [0.9062, 0.3176], [0.3936, 0.4504], [0.2483, 0.958]]]]]], 4, Con8635), 
LMin68653 = minimum_layer([Zer11787,Con8635], Min68653), 
LRes89495 = reshape_layer(Min68653, [1, 2, 21], Res89495), 
LLoc33013 = locally_connected2D_layer(Res89495, 1, 2,[[[0.7247, 0.6236], [0.9277, 0.7787], [0.0357, 0.0365], [0.4543, 0.0396], [0.2523, 0.5043], [0.5748, 0.92], [0.5731, 0.7707], [0.6561, 0.8562], [0.437, 0.7836], [0.2715, 0.9955], [0.9224, 0.407], [0.9961, 0.7632], [0.18, 0.7004], [0.4926, 0.5487], [0.1915, 0.5365], [0.3497, 0.0132], [0.5218, 0.8958], [0.2074, 0.9187], [0.7571, 0.6497], [0.9376, 0.18], [0.0113, 0.0237], [0.0348, 0.0484], [0.2165, 0.219], [0.9146, 0.9496], [0.918, 0.8632], [0.5209, 0.5212], [0.9422, 0.0581], [0.4959, 0.8194], [0.6177, 0.7988], [0.1813, 0.4988], [0.1954, 0.4498], [0.8893, 0.0077], [0.7355, 0.7791], [0.2031, 0.4885], [0.0065, 0.7779], [0.5537, 0.122], [0.878, 0.1199], [0.9521, 0.1143], [0.2783, 0.6536], [0.5533, 0.3892], [0.0349, 0.7623], [0.6784, 0.3179]]],[[[0, 0]]], 1, 2, Loc33013), 
LZer74888 = zero_padding2D_layer(Loc33013, 1, 0, 2, 0, Zer74888), 
LMin54850 = minimum_layer([Con33890,Zer74888], Min54850), 
exec_layers([LMin36810,LCon2680,LRes37649,LCon33890,LCro8682,LRes50113,LCon83126,LZer11787,LMul97410,LZer93487,LCon8635,LMin68653,LRes89495,LLoc33013,LZer74888,LMin54850],["Min36810","Con2680","Res37649","Con33890","Cro8682","Res50113","Con83126","Zer11787","Mul97410","Zer93487","Con8635","Min68653","Res89495","Loc33013","Zer74888","Min54850"],Min54850,"Min54850")

Actual (Unparsed): [[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.7000443, 0.0209000]]]]

Expected (Unparsed): [[[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0.70004427,0.0209]]]]

Actual:   [[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0.7001, 0.0209]]]]

Expected: [[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0.7001, 0.0209]]]]