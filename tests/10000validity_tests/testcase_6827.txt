import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con24741 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))
in0Sub67127 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in1Sub67127 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))

Con24741 = keras.layers.Conv3DTranspose(3, (1, 1, 1),strides=(1, 1, 9), padding='valid', name = 'Con24741', )(in0Con24741)
Zer10469 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (15, 0)), name = 'Zer10469', )(Con24741)
Sub67127 = keras.layers.Subtract(name = 'Sub67127', )([in0Sub67127,in1Sub67127])
Lea7021 = keras.layers.LeakyReLU(alpha=4.852744322520865, name = 'Lea7021', )(Sub67127)
Zer30370 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (30, 0)), name = 'Zer30370', )(Lea7021)
Mul45128 = keras.layers.Multiply(name = 'Mul45128', )([Zer10469,Zer30370])
Res24095 = keras.layers.Reshape((3, 3, 99), name = 'Res24095', )(Mul45128)
Res68735 = keras.layers.Reshape((3, 297), name = 'Res68735', )(Res24095)
LST92408 = keras.layers.LSTM(1,recurrent_activation='sigmoid', name = 'LST92408', )(Res68735)
model = tf.keras.models.Model(inputs=[in0Con24741,in0Sub67127,in1Sub67127], outputs=LST92408)
w = model.get_layer('Con24741').get_weights() 
w[0] = np.array([[[[[0.7638, 0.6974], [0.8708, 0.9928], [0.2976, 0.8921]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con24741').set_weights(w) 
w = model.get_layer('LST92408').get_weights() 
w[0] = np.array([[1, 2, 9, 5], [4, 5, 4, 10], [2, 1, 4, 2], [2, 4, 4, 10], [2, 6, 2, 8], [10, 8, 6, 1], [8, 1, 8, 10], [10, 5, 5, 1], [3, 4, 4, 6], [3, 1, 5, 5], [1, 6, 5, 10], [10, 5, 1, 10], [6, 2, 4, 5], [10, 6, 8, 6], [8, 9, 3, 7], [5, 7, 7, 10], [3, 4, 1, 8], [3, 8, 7, 8], [8, 7, 5, 8], [7, 6, 9, 6], [1, 3, 6, 6], [3, 8, 6, 5], [9, 10, 7, 1], [2, 1, 6, 5], [9, 9, 7, 5], [10, 5, 5, 7], [4, 6, 4, 2], [7, 9, 2, 5], [3, 1, 6, 7], [4, 10, 2, 2], [10, 2, 4, 7], [5, 7, 1, 9], [9, 4, 6, 4], [3, 10, 1, 1], [5, 9, 1, 3], [1, 4, 8, 8], [8, 2, 10, 5], [6, 5, 4, 1], [2, 9, 6, 9], [5, 10, 6, 4], [3, 3, 10, 6], [1, 7, 4, 2], [9, 2, 2, 4], [9, 7, 8, 5], [8, 9, 2, 6], [5, 8, 1, 8], [4, 2, 8, 2], [9, 6, 4, 8], [7, 4, 7, 2], [10, 3, 8, 2], [5, 10, 8, 5], [4, 9, 3, 9], [8, 10, 7, 3], [1, 4, 10, 9], [9, 3, 6, 3], [5, 7, 8, 1], [7, 1, 6, 1], [4, 1, 4, 8], [2, 10, 1, 5], [3, 7, 4, 2], [8, 5, 1, 9], [10, 6, 8, 6], [10, 6, 1, 7], [4, 8, 7, 3], [6, 6, 2, 1], [8, 4, 9, 9], [8, 1, 8, 6], [10, 2, 9, 7], [8, 1, 1, 9], [7, 4, 5, 7], [9, 2, 8, 3], [2, 6, 2, 2], [2, 2, 7, 7], [5, 9, 10, 3], [1, 9, 3, 6], [3, 9, 1, 10], [4, 10, 3, 6], [3, 8, 2, 3], [9, 1, 9, 6], [5, 10, 4, 4], [5, 4, 2, 2], [9, 6, 4, 9], [2, 4, 2, 6], [9, 4, 9, 6], [2, 5, 10, 2], [5, 9, 4, 8], [2, 1, 7, 1], [5, 7, 4, 10], [8, 6, 3, 7], [3, 4, 9, 3], [1, 10, 9, 1], [7, 5, 10, 10], [4, 10, 8, 2], [10, 9, 8, 10], [2, 1, 7, 6], [2, 7, 2, 4], [4, 8, 4, 1], [6, 4, 8, 3], [9, 6, 6, 3], [7, 8, 6, 6], [1, 5, 10, 3], [6, 2, 4, 6], [4, 3, 1, 5], [10, 5, 8, 2], [7, 10, 5, 6], [10, 4, 5, 8], [2, 1, 7, 9], [4, 1, 8, 6], [9, 8, 7, 2], [3, 10, 4, 1], [5, 1, 3, 4], [1, 3, 9, 2], [3, 10, 3, 3], [9, 7, 3, 6], [8, 4, 10, 4], [7, 2, 2, 3], [10, 9, 7, 8], [5, 8, 1, 9], [3, 1, 6, 8], [3, 10, 1, 4], [8, 5, 6, 1], [10, 7, 7, 10], [4, 10, 1, 3], [6, 9, 3, 5], [7, 7, 10, 9], [5, 7, 4, 9], [2, 6, 3, 1], [10, 3, 6, 5], [7, 7, 1, 3], [4, 9, 8, 7], [1, 8, 6, 3], [7, 1, 4, 7], [6, 3, 6, 4], [6, 8, 10, 1], [5, 2, 10, 6], [5, 10, 5, 1], [7, 2, 10, 2], [5, 8, 10, 2], [7, 3, 7, 1], [3, 6, 10, 10], [1, 9, 5, 6], [7, 3, 6, 1], [4, 5, 9, 8], [6, 3, 6, 6], [6, 9, 1, 4], [8, 10, 8, 8], [6, 2, 4, 10], [5, 2, 2, 9], [5, 3, 1, 8], [1, 3, 5, 10], [9, 4, 2, 6], [6, 6, 8, 10], [6, 5, 8, 8], [2, 1, 1, 5], [5, 4, 4, 10], [1, 6, 6, 7], [7, 9, 4, 9], [8, 9, 4, 4], [5, 3, 4, 5], [2, 7, 8, 4], [8, 9, 10, 3], [9, 5, 8, 4], [4, 7, 7, 6], [2, 1, 1, 2], [2, 5, 6, 4], [10, 5, 9, 1], [5, 5, 9, 8], [8, 1, 9, 8], [8, 7, 1, 2], [5, 4, 3, 5], [8, 9, 10, 1], [7, 2, 9, 5], [7, 4, 7, 5], [9, 2, 6, 9], [1, 8, 8, 1], [9, 5, 2, 7], [10, 10, 8, 10], [1, 4, 2, 2], [5, 7, 3, 3], [4, 7, 7, 4], [10, 2, 8, 3], [4, 7, 4, 6], [3, 3, 7, 9], [7, 10, 8, 2], [9, 1, 9, 10], [2, 6, 4, 9], [3, 5, 7, 10], [9, 1, 4, 9], [3, 6, 2, 1], [10, 10, 3, 2], [3, 7, 3, 3], [8, 4, 9, 10], [6, 2, 6, 3], [2, 2, 8, 1], [9, 6, 4, 1], [1, 5, 1, 4], [4, 10, 7, 9], [4, 10, 10, 5], [10, 1, 10, 3], [6, 8, 5, 10], [3, 5, 6, 1], [2, 10, 3, 10], [3, 6, 4, 6], [7, 5, 6, 5], [7, 6, 6, 3], [10, 10, 5, 8], [1, 3, 4, 8], [7, 3, 8, 2], [2, 6, 5, 3], [4, 3, 2, 7], [10, 9, 7, 8], [5, 8, 10, 9], [5, 3, 5, 8], [8, 7, 5, 7], [4, 1, 7, 8], [3, 8, 8, 5], [4, 7, 4, 10], [6, 2, 5, 1], [9, 6, 3, 8], [10, 5, 8, 10], [8, 2, 2, 2], [9, 3, 8, 10], [3, 4, 7, 2], [3, 3, 6, 7], [10, 9, 5, 10], [4, 3, 8, 1], [8, 4, 6, 10], [7, 1, 9, 8], [4, 4, 10, 6], [4, 5, 5, 6], [3, 10, 6, 2], [10, 4, 3, 6], [6, 2, 3, 4], [8, 9, 10, 2], [5, 6, 4, 7], [6, 8, 1, 9], [10, 2, 3, 1], [4, 2, 5, 3], [5, 1, 10, 6], [1, 3, 2, 4], [8, 5, 10, 3], [10, 9, 8, 10], [10, 7, 7, 4], [3, 8, 6, 7], [1, 5, 4, 2], [3, 10, 5, 4], [9, 6, 1, 3], [6, 10, 9, 4], [9, 4, 6, 4], [6, 2, 1, 8], [10, 2, 7, 10], [3, 8, 7, 1], [5, 10, 1, 3], [3, 6, 6, 10], [9, 9, 9, 7], [1, 4, 3, 6], [3, 9, 1, 4], [8, 2, 9, 8], [6, 4, 4, 6], [9, 6, 7, 3], [2, 6, 2, 5], [9, 2, 7, 5], [1, 2, 8, 5], [2, 2, 8, 8], [6, 1, 9, 10], [2, 7, 3, 8], [8, 9, 2, 1], [5, 6, 2, 7], [9, 6, 9, 2], [6, 1, 3, 3], [10, 1, 10, 7], [2, 2, 9, 10], [5, 6, 6, 1], [9, 1, 9, 9], [6, 3, 9, 10], [1, 10, 8, 7], [8, 4, 6, 10], [10, 4, 3, 3], [1, 9, 3, 7], [10, 1, 2, 10], [3, 8, 10, 3], [5, 5, 2, 9], [6, 3, 5, 9], [4, 9, 2, 1], [7, 8, 7, 7], [7, 4, 6, 3], [4, 4, 8, 6], [7, 3, 10, 9], [10, 1, 1, 9], [9, 9, 8, 9], [3, 8, 7, 3], [5, 4, 7, 2], [3, 8, 4, 8], [2, 10, 5, 9], [9, 2, 9, 8], [4, 3, 10, 2], [4, 7, 3, 6]])
w[1] = np.array([[6, 2, 2, 4]])
w[2] = np.array([10, 4, 3, 7])
model.get_layer('LST92408').set_weights(w) 
in0Con24741 = tf.constant([[[[[0.3019, 0.1421], [0.7533, 0.7262]]]]])
in0Sub67127 = tf.constant([[[[[0.092, 0.4167, 0.2303], [0.073, 0.751, 0.4539], [0.8257, 0.9523, 0.1217]], [[0.7623, 0.0219, 0.6497], [0.0565, 0.7073, 0.7519], [0.712, 0.6747, 0.925]], [[0.0102, 0.6983, 0.7527], [0.942, 0.395, 0.086], [0.7116, 0.4119, 0.895]]], [[[0.6599, 0.4101, 0.3158], [0.6907, 0.4821, 0.3558], [0.327, 0.3394, 0.7192]], [[0.0058, 0.2929, 0.4822], [0.1843, 0.5465, 0.4488], [0.125, 0.4414, 0.91]], [[0.5461, 0.6248, 0.7156], [0.8173, 0.5489, 0.7416], [0.654, 0.3204, 0.9373]]], [[[0.5041, 0.189, 0.6567], [0.9365, 0.1828, 0.3735], [0.2268, 0.1876, 0.3627]], [[0.0725, 0.1597, 0.471], [0.965, 0.8284, 0.2382], [0.1023, 0.0801, 0.045]], [[0.9256, 0.5271, 0.6415], [0.8786, 0.8531, 0.4627], [0.2996, 0.8672, 0.4096]]]]])
in1Sub67127 = tf.constant([[[[[0.6546, 0.3289, 0.3826], [0.0069, 0.949, 0.0477], [0.4456, 0.186, 0.9169]], [[0.0172, 0.3133, 0.9772], [0.7062, 0.2397, 0.5121], [0.8285, 0.1511, 0.6827]], [[0.6723, 0.9791, 0.4181], [0.7163, 0.5988, 0.3665], [0.6336, 0.4722, 0.5049]]], [[[0.0332, 0.001, 0.7063], [0.2302, 0.5223, 0.893], [0.4795, 0.5648, 0.9379]], [[0.2816, 0.8586, 0.5116], [0.1887, 0.6562, 0.8825], [0.4315, 0.4271, 0.2715]], [[0.24, 0.5373, 0.8515], [0.167, 0.4618, 0.1289], [0.8481, 0.9023, 0.9411]]], [[[0.2952, 0.9159, 0.3662], [0.7681, 0.5475, 0.9378], [0.3338, 0.1862, 0.9942]], [[0.1426, 0.669, 0.4611], [0.2202, 0.5332, 0.1998], [0.0922, 0.9888, 0.6516]], [[0.3315, 0.5863, 0.2529], [0.2948, 0.4029, 0.4692], [0.728, 0.1997, 0.6411]]]]])
print (np.array2string(model.predict([in0Con24741,in0Sub67127,in1Sub67127],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='LST92408.png')

LCon24741 = conv3D_transpose_layer([[[[[0.3019, 0.1421], [0.7533, 0.7262]]]]], 1, 1, 1,[[[[[0.7638, 0.6974], [0.8708, 0.9928], [0.2976, 0.8921]]]]],[0, 0, 0], 1, 1, 9, false, Con24741), 
LZer10469 = zero_padding3D_layer(Con24741, 2, 0, 2, 0, 15, 0, Zer10469), 
LSub67127 = subtract_layer([[[[[0.092, 0.4167, 0.2303], [0.073, 0.751, 0.4539], [0.8257, 0.9523, 0.1217]], [[0.7623, 0.0219, 0.6497], [0.0565, 0.7073, 0.7519], [0.712, 0.6747, 0.925]], [[0.0102, 0.6983, 0.7527], [0.942, 0.395, 0.086], [0.7116, 0.4119, 0.895]]], [[[0.6599, 0.4101, 0.3158], [0.6907, 0.4821, 0.3558], [0.327, 0.3394, 0.7192]], [[0.0058, 0.2929, 0.4822], [0.1843, 0.5465, 0.4488], [0.125, 0.4414, 0.91]], [[0.5461, 0.6248, 0.7156], [0.8173, 0.5489, 0.7416], [0.654, 0.3204, 0.9373]]], [[[0.5041, 0.189, 0.6567], [0.9365, 0.1828, 0.3735], [0.2268, 0.1876, 0.3627]], [[0.0725, 0.1597, 0.471], [0.965, 0.8284, 0.2382], [0.1023, 0.0801, 0.045]], [[0.9256, 0.5271, 0.6415], [0.8786, 0.8531, 0.4627], [0.2996, 0.8672, 0.4096]]]]], [[[[[0.6546, 0.3289, 0.3826], [0.0069, 0.949, 0.0477], [0.4456, 0.186, 0.9169]], [[0.0172, 0.3133, 0.9772], [0.7062, 0.2397, 0.5121], [0.8285, 0.1511, 0.6827]], [[0.6723, 0.9791, 0.4181], [0.7163, 0.5988, 0.3665], [0.6336, 0.4722, 0.5049]]], [[[0.0332, 0.001, 0.7063], [0.2302, 0.5223, 0.893], [0.4795, 0.5648, 0.9379]], [[0.2816, 0.8586, 0.5116], [0.1887, 0.6562, 0.8825], [0.4315, 0.4271, 0.2715]], [[0.24, 0.5373, 0.8515], [0.167, 0.4618, 0.1289], [0.8481, 0.9023, 0.9411]]], [[[0.2952, 0.9159, 0.3662], [0.7681, 0.5475, 0.9378], [0.3338, 0.1862, 0.9942]], [[0.1426, 0.669, 0.4611], [0.2202, 0.5332, 0.1998], [0.0922, 0.9888, 0.6516]], [[0.3315, 0.5863, 0.2529], [0.2948, 0.4029, 0.4692], [0.728, 0.1997, 0.6411]]]]], Sub67127), 
LLea7021 = leaky_relu_layer(Sub67127, 4.852744322520865, Lea7021), 
LZer30370 = zero_padding3D_layer(Lea7021, 0, 0, 0, 0, 30, 0, Zer30370), 
LMul45128 = multiply_layer([Zer10469,Zer30370], Mul45128), 
LRes24095 = reshape_layer(Mul45128, [3, 3, 99], Res24095), 
LRes68735 = reshape_layer(Res24095, [3, 297], Res68735), 
LLST92408 = lstm_layer(Res68735,[[1, 2, 9, 5], [4, 5, 4, 10], [2, 1, 4, 2], [2, 4, 4, 10], [2, 6, 2, 8], [10, 8, 6, 1], [8, 1, 8, 10], [10, 5, 5, 1], [3, 4, 4, 6], [3, 1, 5, 5], [1, 6, 5, 10], [10, 5, 1, 10], [6, 2, 4, 5], [10, 6, 8, 6], [8, 9, 3, 7], [5, 7, 7, 10], [3, 4, 1, 8], [3, 8, 7, 8], [8, 7, 5, 8], [7, 6, 9, 6], [1, 3, 6, 6], [3, 8, 6, 5], [9, 10, 7, 1], [2, 1, 6, 5], [9, 9, 7, 5], [10, 5, 5, 7], [4, 6, 4, 2], [7, 9, 2, 5], [3, 1, 6, 7], [4, 10, 2, 2], [10, 2, 4, 7], [5, 7, 1, 9], [9, 4, 6, 4], [3, 10, 1, 1], [5, 9, 1, 3], [1, 4, 8, 8], [8, 2, 10, 5], [6, 5, 4, 1], [2, 9, 6, 9], [5, 10, 6, 4], [3, 3, 10, 6], [1, 7, 4, 2], [9, 2, 2, 4], [9, 7, 8, 5], [8, 9, 2, 6], [5, 8, 1, 8], [4, 2, 8, 2], [9, 6, 4, 8], [7, 4, 7, 2], [10, 3, 8, 2], [5, 10, 8, 5], [4, 9, 3, 9], [8, 10, 7, 3], [1, 4, 10, 9], [9, 3, 6, 3], [5, 7, 8, 1], [7, 1, 6, 1], [4, 1, 4, 8], [2, 10, 1, 5], [3, 7, 4, 2], [8, 5, 1, 9], [10, 6, 8, 6], [10, 6, 1, 7], [4, 8, 7, 3], [6, 6, 2, 1], [8, 4, 9, 9], [8, 1, 8, 6], [10, 2, 9, 7], [8, 1, 1, 9], [7, 4, 5, 7], [9, 2, 8, 3], [2, 6, 2, 2], [2, 2, 7, 7], [5, 9, 10, 3], [1, 9, 3, 6], [3, 9, 1, 10], [4, 10, 3, 6], [3, 8, 2, 3], [9, 1, 9, 6], [5, 10, 4, 4], [5, 4, 2, 2], [9, 6, 4, 9], [2, 4, 2, 6], [9, 4, 9, 6], [2, 5, 10, 2], [5, 9, 4, 8], [2, 1, 7, 1], [5, 7, 4, 10], [8, 6, 3, 7], [3, 4, 9, 3], [1, 10, 9, 1], [7, 5, 10, 10], [4, 10, 8, 2], [10, 9, 8, 10], [2, 1, 7, 6], [2, 7, 2, 4], [4, 8, 4, 1], [6, 4, 8, 3], [9, 6, 6, 3], [7, 8, 6, 6], [1, 5, 10, 3], [6, 2, 4, 6], [4, 3, 1, 5], [10, 5, 8, 2], [7, 10, 5, 6], [10, 4, 5, 8], [2, 1, 7, 9], [4, 1, 8, 6], [9, 8, 7, 2], [3, 10, 4, 1], [5, 1, 3, 4], [1, 3, 9, 2], [3, 10, 3, 3], [9, 7, 3, 6], [8, 4, 10, 4], [7, 2, 2, 3], [10, 9, 7, 8], [5, 8, 1, 9], [3, 1, 6, 8], [3, 10, 1, 4], [8, 5, 6, 1], [10, 7, 7, 10], [4, 10, 1, 3], [6, 9, 3, 5], [7, 7, 10, 9], [5, 7, 4, 9], [2, 6, 3, 1], [10, 3, 6, 5], [7, 7, 1, 3], [4, 9, 8, 7], [1, 8, 6, 3], [7, 1, 4, 7], [6, 3, 6, 4], [6, 8, 10, 1], [5, 2, 10, 6], [5, 10, 5, 1], [7, 2, 10, 2], [5, 8, 10, 2], [7, 3, 7, 1], [3, 6, 10, 10], [1, 9, 5, 6], [7, 3, 6, 1], [4, 5, 9, 8], [6, 3, 6, 6], [6, 9, 1, 4], [8, 10, 8, 8], [6, 2, 4, 10], [5, 2, 2, 9], [5, 3, 1, 8], [1, 3, 5, 10], [9, 4, 2, 6], [6, 6, 8, 10], [6, 5, 8, 8], [2, 1, 1, 5], [5, 4, 4, 10], [1, 6, 6, 7], [7, 9, 4, 9], [8, 9, 4, 4], [5, 3, 4, 5], [2, 7, 8, 4], [8, 9, 10, 3], [9, 5, 8, 4], [4, 7, 7, 6], [2, 1, 1, 2], [2, 5, 6, 4], [10, 5, 9, 1], [5, 5, 9, 8], [8, 1, 9, 8], [8, 7, 1, 2], [5, 4, 3, 5], [8, 9, 10, 1], [7, 2, 9, 5], [7, 4, 7, 5], [9, 2, 6, 9], [1, 8, 8, 1], [9, 5, 2, 7], [10, 10, 8, 10], [1, 4, 2, 2], [5, 7, 3, 3], [4, 7, 7, 4], [10, 2, 8, 3], [4, 7, 4, 6], [3, 3, 7, 9], [7, 10, 8, 2], [9, 1, 9, 10], [2, 6, 4, 9], [3, 5, 7, 10], [9, 1, 4, 9], [3, 6, 2, 1], [10, 10, 3, 2], [3, 7, 3, 3], [8, 4, 9, 10], [6, 2, 6, 3], [2, 2, 8, 1], [9, 6, 4, 1], [1, 5, 1, 4], [4, 10, 7, 9], [4, 10, 10, 5], [10, 1, 10, 3], [6, 8, 5, 10], [3, 5, 6, 1], [2, 10, 3, 10], [3, 6, 4, 6], [7, 5, 6, 5], [7, 6, 6, 3], [10, 10, 5, 8], [1, 3, 4, 8], [7, 3, 8, 2], [2, 6, 5, 3], [4, 3, 2, 7], [10, 9, 7, 8], [5, 8, 10, 9], [5, 3, 5, 8], [8, 7, 5, 7], [4, 1, 7, 8], [3, 8, 8, 5], [4, 7, 4, 10], [6, 2, 5, 1], [9, 6, 3, 8], [10, 5, 8, 10], [8, 2, 2, 2], [9, 3, 8, 10], [3, 4, 7, 2], [3, 3, 6, 7], [10, 9, 5, 10], [4, 3, 8, 1], [8, 4, 6, 10], [7, 1, 9, 8], [4, 4, 10, 6], [4, 5, 5, 6], [3, 10, 6, 2], [10, 4, 3, 6], [6, 2, 3, 4], [8, 9, 10, 2], [5, 6, 4, 7], [6, 8, 1, 9], [10, 2, 3, 1], [4, 2, 5, 3], [5, 1, 10, 6], [1, 3, 2, 4], [8, 5, 10, 3], [10, 9, 8, 10], [10, 7, 7, 4], [3, 8, 6, 7], [1, 5, 4, 2], [3, 10, 5, 4], [9, 6, 1, 3], [6, 10, 9, 4], [9, 4, 6, 4], [6, 2, 1, 8], [10, 2, 7, 10], [3, 8, 7, 1], [5, 10, 1, 3], [3, 6, 6, 10], [9, 9, 9, 7], [1, 4, 3, 6], [3, 9, 1, 4], [8, 2, 9, 8], [6, 4, 4, 6], [9, 6, 7, 3], [2, 6, 2, 5], [9, 2, 7, 5], [1, 2, 8, 5], [2, 2, 8, 8], [6, 1, 9, 10], [2, 7, 3, 8], [8, 9, 2, 1], [5, 6, 2, 7], [9, 6, 9, 2], [6, 1, 3, 3], [10, 1, 10, 7], [2, 2, 9, 10], [5, 6, 6, 1], [9, 1, 9, 9], [6, 3, 9, 10], [1, 10, 8, 7], [8, 4, 6, 10], [10, 4, 3, 3], [1, 9, 3, 7], [10, 1, 2, 10], [3, 8, 10, 3], [5, 5, 2, 9], [6, 3, 5, 9], [4, 9, 2, 1], [7, 8, 7, 7], [7, 4, 6, 3], [4, 4, 8, 6], [7, 3, 10, 9], [10, 1, 1, 9], [9, 9, 8, 9], [3, 8, 7, 3], [5, 4, 7, 2], [3, 8, 4, 8], [2, 10, 5, 9], [9, 2, 9, 8], [4, 3, 10, 2], [4, 7, 3, 6]],[[6, 2, 2, 4]],[10, 4, 3, 7], LST92408), 
exec_layers([LCon24741,LZer10469,LSub67127,LLea7021,LZer30370,LMul45128,LRes24095,LRes68735,LLST92408],["Con24741","Zer10469","Sub67127","Lea7021","Zer30370","Mul45128","Res24095","Res68735","LST92408"],LST92408,"LST92408")

Actual (Unparsed): [[0.9948893]]

Expected (Unparsed): [[0.9948892537374778]]

Actual:   [[0.9949]]

Expected: [[0.9949]]