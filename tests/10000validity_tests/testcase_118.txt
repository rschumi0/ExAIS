import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max82236 = tf.keras.layers.Input(shape=([2, 2]))
in1Max82236 = tf.keras.layers.Input(shape=([2, 2]))
in0Con22907 = tf.keras.layers.Input(shape=([5, 3, 3]))
in0Den49385 = tf.keras.layers.Input(shape=([5, 3, 5]))
in0Ave36633 = tf.keras.layers.Input(shape=([1, 2]))

Max82236 = keras.layers.Maximum(name = 'Max82236', )([in0Max82236,in1Max82236])
Res59089 = keras.layers.Reshape((2, 2, 1), name = 'Res59089', )(Max82236)
Zer90346 = keras.layers.ZeroPadding2D(padding=((3, 0), (1, 0)), name = 'Zer90346', )(Res59089)
Con22907 = keras.layers.Concatenate(axis=3, name = 'Con22907', )([Zer90346,in0Con22907])
Den49385 = keras.layers.Dense(4,name = 'Den49385', )(in0Den49385)
Ave36633 = keras.layers.AveragePooling1D(pool_size=(1), name = 'Ave36633', )(in0Ave36633)
Res17684 = keras.layers.Reshape((1, 2, 1), name = 'Res17684', )(Ave36633)
Sep42114 = keras.layers.SeparableConv2D(4, (1, 1),strides=(1, 1), padding='valid', name = 'Sep42114', )(Res17684)
Lea67372 = keras.layers.LeakyReLU(alpha=4.50034992609911, name = 'Lea67372', )(Sep42114)
Zer99215 = keras.layers.ZeroPadding2D(padding=((4, 0), (1, 0)), name = 'Zer99215', )(Lea67372)
Max8653 = keras.layers.Maximum(name = 'Max8653', )([Den49385,Zer99215])
Mul27009 = keras.layers.Multiply(name = 'Mul27009', )([Con22907,Max8653])
Thr75894 = keras.layers.ThresholdedReLU(theta=5.653514673151543, name = 'Thr75894', )(Mul27009)
model = tf.keras.models.Model(inputs=[in0Max82236,in1Max82236,in0Con22907,in0Den49385,in0Ave36633], outputs=Thr75894)
w = model.get_layer('Den49385').get_weights() 
w[0] = np.array([[0.1988, 0.1009, 0.8562, 0.6894], [0.9763, 0.5987, 0.4417, 0.3798], [0.7495, 0.3149, 0.1454, 0.4629], [0.5456, 0.0582, 0.2294, 0.6774], [0.4205, 0.8215, 0.3413, 0.0805]])
w[1] = np.array([0.4678, 0.3314, 0.9362, 0.1251])
model.get_layer('Den49385').set_weights(w) 
w = model.get_layer('Sep42114').get_weights() 
w[0] = np.array([[[[0.8753]]]])
w[1] = np.array([[[[0.4273, 0.1893, 0.5068, 0.4356]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep42114').set_weights(w) 
in0Max82236 = tf.constant([[[0.5744, 0.8519], [0.2966, 0.2898]]])
in1Max82236 = tf.constant([[[0.7231, 0.3466], [0.0564, 0.1399]]])
in0Con22907 = tf.constant([[[[0.1524, 0.2995, 0.0685], [0.7247, 0.2752, 0.5567], [0.7938, 0.9101, 0.8455]], [[0.0626, 0.865, 0.2008], [0.3809, 0.7729, 0.5132], [0.4889, 0.8043, 0.8913]], [[0.0252, 0.5372, 0.3682], [0.9301, 0.2465, 0.0794], [0.4364, 0.7279, 0.9946]], [[0.0581, 0.7099, 0.8867], [0.5614, 0.6971, 0.9873], [0.1892, 0.749, 0.595]], [[0.8298, 0.6955, 0.4332], [0.0546, 0.5673, 0.3791], [0.4753, 0.4152, 0.9235]]]])
in0Den49385 = tf.constant([[[[0.2934, 0.7408, 0.9195, 0.7423, 0.2716], [0.287, 0.0144, 0.2049, 0.4531, 0.6997], [0.8327, 0.6972, 0.7338, 0.7462, 0.507]], [[0.5274, 0.9452, 0.1919, 0.0591, 0.1095], [0.6072, 0.1809, 0.5883, 0.7545, 0.0809], [0.8137, 0.9329, 0.4725, 0.8678, 0.7628]], [[0.5505, 0.1353, 0.217, 0.2592, 0.238], [0.4154, 0.7807, 0.6777, 0.838, 0.8926], [0.7879, 0.2481, 0.2633, 0.5965, 0.094]], [[0.1326, 0.0141, 0.0421, 0.5097, 0.2177], [0.8562, 0.5066, 0.0093, 0.4954, 0.4852], [0.8948, 0.7788, 0.83, 0.8078, 0.0442]], [[0.5744, 0.2439, 0.9415, 0.7342, 0.5318], [0.5932, 0.1506, 0.978, 0.3917, 0.6487], [0.7203, 0.404, 0.0889, 0.1511, 0.201]]]])
in0Ave36633 = tf.constant([[[1.6574, 1.7882]]])
print (np.array2string(model.predict([in0Max82236,in1Max82236,in0Con22907,in0Den49385,in0Ave36633],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Thr75894.png')

LMax82236 = maximum_layer([[[[0.5744, 0.8519], [0.2966, 0.2898]]], [[[0.7231, 0.3466], [0.0564, 0.1399]]]], Max82236), 
LRes59089 = reshape_layer(Max82236, [2, 2, 1], Res59089), 
LZer90346 = zero_padding2D_layer(Res59089, 3, 0, 1, 0, Zer90346), 
LCon22907 = concatenate_layer([Zer90346,[[[[0.1524, 0.2995, 0.0685], [0.7247, 0.2752, 0.5567], [0.7938, 0.9101, 0.8455]], [[0.0626, 0.865, 0.2008], [0.3809, 0.7729, 0.5132], [0.4889, 0.8043, 0.8913]], [[0.0252, 0.5372, 0.3682], [0.9301, 0.2465, 0.0794], [0.4364, 0.7279, 0.9946]], [[0.0581, 0.7099, 0.8867], [0.5614, 0.6971, 0.9873], [0.1892, 0.749, 0.595]], [[0.8298, 0.6955, 0.4332], [0.0546, 0.5673, 0.3791], [0.4753, 0.4152, 0.9235]]]]], 3, Con22907), 
LDen49385 = dense_layer([[[[0.2934, 0.7408, 0.9195, 0.7423, 0.2716], [0.287, 0.0144, 0.2049, 0.4531, 0.6997], [0.8327, 0.6972, 0.7338, 0.7462, 0.507]], [[0.5274, 0.9452, 0.1919, 0.0591, 0.1095], [0.6072, 0.1809, 0.5883, 0.7545, 0.0809], [0.8137, 0.9329, 0.4725, 0.8678, 0.7628]], [[0.5505, 0.1353, 0.217, 0.2592, 0.238], [0.4154, 0.7807, 0.6777, 0.838, 0.8926], [0.7879, 0.2481, 0.2633, 0.5965, 0.094]], [[0.1326, 0.0141, 0.0421, 0.5097, 0.2177], [0.8562, 0.5066, 0.0093, 0.4954, 0.4852], [0.8948, 0.7788, 0.83, 0.8078, 0.0442]], [[0.5744, 0.2439, 0.9415, 0.7342, 0.5318], [0.5932, 0.1506, 0.978, 0.3917, 0.6487], [0.7203, 0.404, 0.0889, 0.1511, 0.201]]]], [[0.1988, 0.1009, 0.8562, 0.6894], [0.9763, 0.5987, 0.4417, 0.3798], [0.7495, 0.3149, 0.1454, 0.4629], [0.5456, 0.0582, 0.2294, 0.6774], [0.4205, 0.8215, 0.3413, 0.0805]],[0.4678, 0.3314, 0.9362, 0.1251], Den49385), 
LAve36633 = average_pooling1D_layer([[[1.6574, 1.7882]]], 1, Ave36633), 
LRes17684 = reshape_layer(Ave36633, [1, 2, 1], Res17684), 
LSep42114 = separable_conv2D_layer(Res17684, 1, 1,[[[[[0.8753]]]],[[[[0.4273, 0.1893, 0.5068, 0.4356]]]]],[0, 0, 0, 0], 1, 1, false, Sep42114), 
LLea67372 = leaky_relu_layer(Sep42114, 4.50034992609911, Lea67372), 
LZer99215 = zero_padding2D_layer(Lea67372, 4, 0, 1, 0, Zer99215), 
LMax8653 = maximum_layer([Den49385,Zer99215], Max8653), 
LMul27009 = multiply_layer([Con22907,Max8653], Mul27009), 
LThr75894 = thresholded_relu_layer(Mul27009, 5.653514673151543, Thr75894), 
exec_layers([LMax82236,LRes59089,LZer90346,LCon22907,LDen49385,LAve36633,LRes17684,LSep42114,LLea67372,LZer99215,LMax8653,LMul27009,LThr75894],["Max82236","Res59089","Zer90346","Con22907","Den49385","Ave36633","Res17684","Sep42114","Lea67372","Zer99215","Max8653","Mul27009","Thr75894"],Thr75894,"Thr75894")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]]]]

Expected (Unparsed): [[[[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0]]]]

Actual:   [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]]

Expected: [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]]