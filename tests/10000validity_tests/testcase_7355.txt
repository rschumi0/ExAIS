import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Loc39513 = tf.keras.layers.Input(shape=([2, 2]))
in0Con15278 = tf.keras.layers.Input(shape=([15]))
in0Sub85773 = tf.keras.layers.Input(shape=([3, 2, 3]))
in1Sub85773 = tf.keras.layers.Input(shape=([3, 2, 3]))
in0Mas96575 = tf.keras.layers.Input(shape=([4]))
in0Con81655 = tf.keras.layers.Input(shape=([14]))
in0Lea8631 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con67650 = tf.keras.layers.Input(shape=([16]))

Loc39513 = keras.layers.LocallyConnected1D(3, (2),strides=(1), name = 'Loc39513', )(in0Loc39513)
Fla49609 = keras.layers.Flatten(name = 'Fla49609', )(Loc39513)
Con15278 = keras.layers.Concatenate(axis=1, name = 'Con15278', )([Fla49609,in0Con15278])
Sub85773 = keras.layers.Subtract(name = 'Sub85773', )([in0Sub85773,in1Sub85773])
Res96709 = keras.layers.Reshape((3, 6), name = 'Res96709', )(Sub85773)
Fla3497 = keras.layers.Flatten(name = 'Fla3497', )(Res96709)
Mas96575 = keras.layers.Masking(mask_value=2, name = 'Mas96575', )(in0Mas96575)
Con81655 = keras.layers.Concatenate(axis=1, name = 'Con81655', )([Mas96575,in0Con81655])
Max55013 = keras.layers.Maximum(name = 'Max55013', )([Fla3497,Con81655])
Mul61512 = keras.layers.Multiply(name = 'Mul61512', )([Con15278,Max55013])
Lea8631 = keras.layers.LeakyReLU(alpha=6.615245101196534, name = 'Lea8631', input_shape=(1, 2, 1))(in0Lea8631)
Dep46564 = keras.layers.DepthwiseConv2D((1, 1),strides=(1, 1), padding='valid', name = 'Dep46564', )(Lea8631)
Res3784 = keras.layers.Reshape((1, 2), name = 'Res3784', )(Dep46564)
Glo61470 = keras.layers.GlobalMaxPool1D(name = 'Glo61470', )(Res3784)
Con67650 = keras.layers.Concatenate(axis=1, name = 'Con67650', )([Glo61470,in0Con67650])
Mul90702 = keras.layers.Multiply(name = 'Mul90702', )([Mul61512,Con67650])
model = tf.keras.models.Model(inputs=[in0Loc39513,in0Con15278,in0Sub85773,in1Sub85773,in0Mas96575,in0Con81655,in0Lea8631,in0Con67650], outputs=Mul90702)
w = model.get_layer('Loc39513').get_weights() 
w[0] = np.array([[[0.0937, 0.4295, 0.5433], [0.2139, 0.0427, 0.6417], [0.2617, 0.4363, 0.7553], [0.47, 0.8176, 0.2365]]])
w[1] = np.array([[0, 0, 0]])
model.get_layer('Loc39513').set_weights(w) 
w = model.get_layer('Dep46564').get_weights() 
w[0] = np.array([[[[0.1985]]]])
w[1] = np.array([0])
model.get_layer('Dep46564').set_weights(w) 
in0Loc39513 = tf.constant([[[0.6791, 0.5871], [0.4101, 0.0612]]])
in0Con15278 = tf.constant([[0.3947, 0.3739, 0.5749, 0.7801, 0.8962, 0.3153, 0.7003, 0.4616, 0.8865, 0.9463, 0.8899, 0.9265, 0.804, 0.8255, 0.8305]])
in0Sub85773 = tf.constant([[[[0.4388, 0.0397, 0.8039], [0.8049, 0.4229, 0.336]], [[0.0691, 0.9627, 0.8133], [0.4148, 0.7607, 0.3373]], [[0.6793, 0.3033, 0.9446], [0.0435, 0.5981, 0.4819]]]])
in1Sub85773 = tf.constant([[[[0.244, 0.8326, 0.7455], [0.4567, 0.0211, 0.0407]], [[0.7235, 0.4613, 0.7758], [0.1093, 0.9695, 0.5188]], [[0.4414, 0.572, 0.4541], [0.93, 0.6286, 0.3789]]]])
in0Mas96575 = tf.constant([[1.5138, 1.6227, 1.0326, 1.439]])
in0Con81655 = tf.constant([[0.6182, 0.1655, 0.7801, 0.4411, 0.2198, 0.2436, 0.2479, 0.3065, 0.483, 0.7762, 0.089, 0.6184, 0.7725, 0.4883]])
in0Lea8631 = tf.constant([[[[0.0896], [0.6952]]]])
in0Con67650 = tf.constant([[0.9164, 0.021, 0.7906, 0.1552, 0.1554, 0.1597, 0.9732, 0.2905, 0.902, 0.2465, 0.9173, 0.1457, 0.0213, 0.6514, 0.1483, 0.7745]])
print (np.array2string(model.predict([in0Loc39513,in0Con15278,in0Sub85773,in1Sub85773,in0Mas96575,in0Con81655,in0Lea8631,in0Con67650],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul90702.png')

LLoc39513 = locally_connected1D_layer([[[0.6791, 0.5871], [0.4101, 0.0612]]], 2,[[[0.0937, 0.4295, 0.5433], [0.2139, 0.0427, 0.6417], [0.2617, 0.4363, 0.7553], [0.47, 0.8176, 0.2365]]],[[0, 0, 0]], 1, Loc39513), 
LFla49609 = flatten_layer(Loc39513, Fla49609), 
LCon15278 = concatenate_layer([Fla49609,[[0.3947, 0.3739, 0.5749, 0.7801, 0.8962, 0.3153, 0.7003, 0.4616, 0.8865, 0.9463, 0.8899, 0.9265, 0.804, 0.8255, 0.8305]]], 1, Con15278), 
LSub85773 = subtract_layer([[[[0.4388, 0.0397, 0.8039], [0.8049, 0.4229, 0.336]], [[0.0691, 0.9627, 0.8133], [0.4148, 0.7607, 0.3373]], [[0.6793, 0.3033, 0.9446], [0.0435, 0.5981, 0.4819]]]], [[[[0.244, 0.8326, 0.7455], [0.4567, 0.0211, 0.0407]], [[0.7235, 0.4613, 0.7758], [0.1093, 0.9695, 0.5188]], [[0.4414, 0.572, 0.4541], [0.93, 0.6286, 0.3789]]]], Sub85773), 
LRes96709 = reshape_layer(Sub85773, [3, 6], Res96709), 
LFla3497 = flatten_layer(Res96709, Fla3497), 
LMas96575 = masking_layer([[1.5138, 1.6227, 1.0326, 1.439]], 2, Mas96575), 
LCon81655 = concatenate_layer([Mas96575,[[0.6182, 0.1655, 0.7801, 0.4411, 0.2198, 0.2436, 0.2479, 0.3065, 0.483, 0.7762, 0.089, 0.6184, 0.7725, 0.4883]]], 1, Con81655), 
LMax55013 = maximum_layer([Fla3497,Con81655], Max55013), 
LMul61512 = multiply_layer([Con15278,Max55013], Mul61512), 
LLea8631 = leaky_relu_layer([[[[0.0896], [0.6952]]]], 6.615245101196534, Lea8631), 
LDep46564 = depthwise_conv2D_layer(Lea8631, 1, 1,[[[[0.1985]]]],[0], 1, 1, false, Dep46564), 
LRes3784 = reshape_layer(Dep46564, [1, 2], Res3784), 
LGlo61470 = global_max_pool1D_layer(Res3784, Glo61470), 
LCon67650 = concatenate_layer([Glo61470,[[0.9164, 0.021, 0.7906, 0.1552, 0.1554, 0.1597, 0.9732, 0.2905, 0.902, 0.2465, 0.9173, 0.1457, 0.0213, 0.6514, 0.1483, 0.7745]]], 1, Con67650), 
LMul90702 = multiply_layer([Mul61512,Con67650], Mul90702), 
exec_layers([LLoc39513,LFla49609,LCon15278,LSub85773,LRes96709,LFla3497,LMas96575,LCon81655,LMax55013,LMul61512,LLea8631,LDep46564,LRes3784,LGlo61470,LCon67650,LMul90702],["Loc39513","Fla49609","Con15278","Sub85773","Res96709","Fla3497","Mas96575","Con81655","Max55013","Mul61512","Lea8631","Dep46564","Res3784","Glo61470","Con67650","Mul90702"],Mul90702,"Mul90702")

Actual (Unparsed): [[0.0087583, 0.1221990, 1.0124377, 0.0119274, 0.1827432, 0.0263480, 0.0945696, 0.0717619, 0.0674456, 0.0621500, 0.1032164, 0.0669771, 0.4192638, 0.1006409, 0.0096797, 0.3238719, 0.0945707, 0.3140854]]

Expected (Unparsed): [[0.0087583129141786,0.12219896682102753,1.012437623452255,0.0119274393,0.182743221188,0.026347988944,0.094569603954,0.07176194239600002,0.067445621208,0.062150049325,0.10321643728,0.066977069625,0.41926379817,0.100640873366,0.009679747725,0.32387191104,0.09457072462499999,0.314085424675]]

Actual:   [[0.0088, 0.1222, 1.0125, 0.012, 0.1828, 0.0264, 0.0946, 0.0718, 0.0675, 0.0622, 0.1033, 0.067, 0.4193, 0.1007, 0.0097, 0.3239, 0.0946, 0.3141]]

Expected: [[0.0088, 0.1222, 1.0125, 0.012, 0.1828, 0.0264, 0.0946, 0.0718, 0.0675, 0.0622, 0.1033, 0.067, 0.4193, 0.1007, 0.0097, 0.3239, 0.0946, 0.3141]]