import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max68185 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Max68185 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Ave29801 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Ave29801 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Ave36110 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Ave36110 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con82585 = tf.keras.layers.Input(shape=([2, 2, 3]))
in0Con97545 = tf.keras.layers.Input(shape=([8, 1, 3, 2]))
in0Cro23229 = tf.keras.layers.Input(shape=([3, 2, 4, 4]))

Max68185 = keras.layers.Maximum(name = 'Max68185', )([in0Max68185,in1Max68185])
ReL7591 = keras.layers.ReLU(max_value=3.952356314710296, negative_slope=7.882020079361407, threshold=1.0889824008518434, name = 'ReL7591', )(Max68185)
Res9822 = keras.layers.Reshape((2, 2, 4), name = 'Res9822', )(ReL7591)
Ave29801 = keras.layers.Average(name = 'Ave29801', )([in0Ave29801,in1Ave29801])
Glo34233 = keras.layers.GlobalMaxPool3D(name = 'Glo34233', )(Ave29801)
Res75738 = keras.layers.Reshape((2, 1), name = 'Res75738', )(Glo34233)
Res38636 = keras.layers.Reshape((2, 1, 1), name = 'Res38636', )(Res75738)
Ave36110 = keras.layers.Average(name = 'Ave36110', )([in0Ave36110,in1Ave36110])
Zer59722 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer59722', )(Ave36110)
Sub68056 = keras.layers.Subtract(name = 'Sub68056', )([Res38636,Zer59722])
Zer85824 = keras.layers.ZeroPadding2D(padding=((0, 0), (1, 0)), name = 'Zer85824', )(Sub68056)
Con82585 = keras.layers.Concatenate(axis=3, name = 'Con82585', )([Zer85824,in0Con82585])
Mul31865 = keras.layers.Multiply(name = 'Mul31865', )([Res9822,Con82585])
Res88557 = keras.layers.Reshape((2, 8), name = 'Res88557', )(Mul31865)
Glo88023 = keras.layers.GlobalMaxPool1D(name = 'Glo88023', )(Res88557)
Res36977 = keras.layers.Reshape((8, 1), name = 'Res36977', )(Glo88023)
Res30268 = keras.layers.Reshape((8, 1, 1), name = 'Res30268', )(Res36977)
Res43010 = keras.layers.Reshape((8, 1, 1, 1), name = 'Res43010', )(Res30268)
Zer34387 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer34387', )(Res43010)
Con97545 = keras.layers.Concatenate(axis=4, name = 'Con97545', )([Zer34387,in0Con97545])
Cro23229 = keras.layers.Cropping3D(cropping=((1, 1), (0, 1), (0, 2)), name = 'Cro23229', )(in0Cro23229)
Con58546 = keras.layers.Conv3DTranspose(3, (1, 1, 1),strides=(1, 1, 1), padding='valid', name = 'Con58546', )(Cro23229)
Zer37551 = keras.layers.ZeroPadding3D(padding=((7, 0), (0, 0), (1, 0)), name = 'Zer37551', )(Con58546)
Min29439 = keras.layers.Minimum(name = 'Min29439', )([Con97545,Zer37551])
model = tf.keras.models.Model(inputs=[in0Max68185,in1Max68185,in0Ave29801,in1Ave29801,in0Ave36110,in1Ave36110,in0Con82585,in0Con97545,in0Cro23229], outputs=Min29439)
w = model.get_layer('Con58546').get_weights() 
w[0] = np.array([[[[[0.0032, 0.0626, 0.0255, 0.6929], [0.2445, 0.9469, 0.7039, 0.1742], [0.5597, 0.8976, 0.8007, 0.9168]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con58546').set_weights(w) 
in0Max68185 = tf.constant([[[[[0.2954, 0.0041], [0.5203, 0.035]], [[0.2775, 0.6654], [0.1143, 0.5534]]], [[[0.8366, 0.6586], [0.7395, 0.1533]], [[0.5601, 0.8824], [0.5085, 0.0702]]]]])
in1Max68185 = tf.constant([[[[[0.5793, 0.583], [0.817, 0.6808]], [[0.8204, 0.623], [0.4147, 0.9873]]], [[[0.5055, 0.0549], [0.9636, 0.024]], [[0.282, 0.2366], [0.414, 0.6025]]]]])
in0Ave29801 = tf.constant([[[[[0.8632, 0.2439], [0.8601, 0.275]], [[0.4754, 0.9994], [0.2791, 0.517]]], [[[0.7224, 0.3666], [0.7003, 0.9112]], [[0.7025, 0.435], [0.9042, 0.5464]]]]])
in1Ave29801 = tf.constant([[[[[0.3443, 0.3648], [0.7087, 0.9377]], [[0.962, 0.4487], [0.2651, 0.5211]]], [[[0.9739, 0.5018], [0.5552, 0.1784]], [[0.5767, 0.2964], [0.4591, 0.3081]]]]])
in0Ave36110 = tf.constant([[[[0.9225]]]])
in1Ave36110 = tf.constant([[[[0.5203]]]])
in0Con82585 = tf.constant([[[[0.3536, 0.617, 0.3752], [0.7403, 0.8786, 0.2161]], [[0.2485, 0.8749, 0.4145], [0.4471, 0.3155, 0.1945]]]])
in0Con97545 = tf.constant([[[[[0.8059, 0.8169], [0.4056, 0.3543], [0.9999, 0.1147]]], [[[0.4648, 0.2119], [0.6774, 0.5077], [0.1144, 0.261]]], [[[0.7066, 0.0964], [0.3622, 0.6483], [0.3576, 0.6989]]], [[[0.0367, 0.3949], [0.1197, 0.7985], [0.7454, 0.5395]]], [[[0.9815, 0.1764], [0.4302, 0.3923], [0.2171, 0.7504]]], [[[0.728, 0.1529], [0.0941, 0.7065], [0.4247, 0.5421]]], [[[0.9496, 0.4868], [0.5178, 0.8986], [0.7613, 0.5755]]], [[[0.7947, 0.3993], [0.6848, 0.3088], [0.3729, 0.6762]]]]])
in0Cro23229 = tf.constant([[[[[1.3456, 1.6741, 1.0082, 1.6563], [1.1265, 1.636, 1.0508, 1.2579], [1.1117, 1.3929, 1.6002, 1.3234], [1.8037, 1.5565, 1.0177, 1.8636]], [[1.9777, 1.7123, 1.2356, 1.2968], [1.0092, 1.6222, 1.9067, 1.0103], [1.4288, 1.3769, 1.1483, 1.2788], [1.1136, 1.1151, 1.0945, 1.7477]]], [[[1.3565, 1.8924, 1.3766, 1.8549], [1.2925, 1.9062, 1.4739, 1.8902], [1.8088, 1.5592, 1.5964, 1.8758], [1.1162, 1.7792, 1.3946, 1.0843]], [[1.6178, 1.6059, 1.3237, 1.8093], [1.5738, 1.299, 1.9363, 1.9501], [1.3341, 1.1275, 1.7228, 1.0818], [1.585, 1.5594, 1.3751, 1.9411]]], [[[1.1407, 1.7862, 1.5106, 1.6807], [1.2987, 1.3892, 1.9593, 1.8176], [1.674, 1.482, 1.6933, 1.5344], [1.7298, 1.8508, 1.3548, 1.8773]], [[1.927, 1.4497, 1.1256, 1.4423], [1.5353, 1.1127, 1.3765, 1.338], [1.6606, 1.4894, 1.1286, 1.5718], [1.98, 1.0275, 1.8667, 1.5177]]]]])
print (np.array2string(model.predict([in0Max68185,in1Max68185,in0Ave29801,in1Ave29801,in0Ave36110,in1Ave36110,in0Con82585,in0Con97545,in0Cro23229],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min29439.png')

LMax68185 = maximum_layer([[[[[[0.2954, 0.0041], [0.5203, 0.035]], [[0.2775, 0.6654], [0.1143, 0.5534]]], [[[0.8366, 0.6586], [0.7395, 0.1533]], [[0.5601, 0.8824], [0.5085, 0.0702]]]]], [[[[[0.5793, 0.583], [0.817, 0.6808]], [[0.8204, 0.623], [0.4147, 0.9873]]], [[[0.5055, 0.0549], [0.9636, 0.024]], [[0.282, 0.2366], [0.414, 0.6025]]]]]], Max68185), 
LReL7591 = relu_layer(Max68185, 3.952356314710296, 7.882020079361407, 1.0889824008518434, ReL7591), 
LRes9822 = reshape_layer(ReL7591, [2, 2, 4], Res9822), 
LAve29801 = average_layer([[[[[[0.8632, 0.2439], [0.8601, 0.275]], [[0.4754, 0.9994], [0.2791, 0.517]]], [[[0.7224, 0.3666], [0.7003, 0.9112]], [[0.7025, 0.435], [0.9042, 0.5464]]]]], [[[[[0.3443, 0.3648], [0.7087, 0.9377]], [[0.962, 0.4487], [0.2651, 0.5211]]], [[[0.9739, 0.5018], [0.5552, 0.1784]], [[0.5767, 0.2964], [0.4591, 0.3081]]]]]], Ave29801), 
LGlo34233 = global_max_pool3D_layer(Ave29801, Glo34233), 
LRes75738 = reshape_layer(Glo34233, [2, 1], Res75738), 
LRes38636 = reshape_layer(Res75738, [2, 1, 1], Res38636), 
LAve36110 = average_layer([[[[[0.9225]]]], [[[[0.5203]]]]], Ave36110), 
LZer59722 = zero_padding2D_layer(Ave36110, 1, 0, 0, 0, Zer59722), 
LSub68056 = subtract_layer(Res38636,Zer59722, Sub68056), 
LZer85824 = zero_padding2D_layer(Sub68056, 0, 0, 1, 0, Zer85824), 
LCon82585 = concatenate_layer([Zer85824,[[[[0.3536, 0.617, 0.3752], [0.7403, 0.8786, 0.2161]], [[0.2485, 0.8749, 0.4145], [0.4471, 0.3155, 0.1945]]]]], 3, Con82585), 
LMul31865 = multiply_layer([Res9822,Con82585], Mul31865), 
LRes88557 = reshape_layer(Mul31865, [2, 8], Res88557), 
LGlo88023 = global_max_pool1D_layer(Res88557, Glo88023), 
LRes36977 = reshape_layer(Glo88023, [8, 1], Res36977), 
LRes30268 = reshape_layer(Res36977, [8, 1, 1], Res30268), 
LRes43010 = reshape_layer(Res30268, [8, 1, 1, 1], Res43010), 
LZer34387 = zero_padding3D_layer(Res43010, 0, 0, 0, 0, 2, 0, Zer34387), 
LCon97545 = concatenate_layer([Zer34387,[[[[[0.8059, 0.8169], [0.4056, 0.3543], [0.9999, 0.1147]]], [[[0.4648, 0.2119], [0.6774, 0.5077], [0.1144, 0.261]]], [[[0.7066, 0.0964], [0.3622, 0.6483], [0.3576, 0.6989]]], [[[0.0367, 0.3949], [0.1197, 0.7985], [0.7454, 0.5395]]], [[[0.9815, 0.1764], [0.4302, 0.3923], [0.2171, 0.7504]]], [[[0.728, 0.1529], [0.0941, 0.7065], [0.4247, 0.5421]]], [[[0.9496, 0.4868], [0.5178, 0.8986], [0.7613, 0.5755]]], [[[0.7947, 0.3993], [0.6848, 0.3088], [0.3729, 0.6762]]]]]], 4, Con97545), 
LCro23229 = cropping3D_layer([[[[[1.3456, 1.6741, 1.0082, 1.6563], [1.1265, 1.636, 1.0508, 1.2579], [1.1117, 1.3929, 1.6002, 1.3234], [1.8037, 1.5565, 1.0177, 1.8636]], [[1.9777, 1.7123, 1.2356, 1.2968], [1.0092, 1.6222, 1.9067, 1.0103], [1.4288, 1.3769, 1.1483, 1.2788], [1.1136, 1.1151, 1.0945, 1.7477]]], [[[1.3565, 1.8924, 1.3766, 1.8549], [1.2925, 1.9062, 1.4739, 1.8902], [1.8088, 1.5592, 1.5964, 1.8758], [1.1162, 1.7792, 1.3946, 1.0843]], [[1.6178, 1.6059, 1.3237, 1.8093], [1.5738, 1.299, 1.9363, 1.9501], [1.3341, 1.1275, 1.7228, 1.0818], [1.585, 1.5594, 1.3751, 1.9411]]], [[[1.1407, 1.7862, 1.5106, 1.6807], [1.2987, 1.3892, 1.9593, 1.8176], [1.674, 1.482, 1.6933, 1.5344], [1.7298, 1.8508, 1.3548, 1.8773]], [[1.927, 1.4497, 1.1256, 1.4423], [1.5353, 1.1127, 1.3765, 1.338], [1.6606, 1.4894, 1.1286, 1.5718], [1.98, 1.0275, 1.8667, 1.5177]]]]], 1, 1, 0, 1, 0, 2, Cro23229), 
LCon58546 = conv3D_transpose_layer(Cro23229, 1, 1, 1,[[[[[0.0032, 0.0626, 0.0255, 0.6929], [0.2445, 0.9469, 0.7039, 0.1742], [0.5597, 0.8976, 0.8007, 0.9168]]]]],[0, 0, 0], 1, 1, 1, false, Con58546), 
LZer37551 = zero_padding3D_layer(Con58546, 7, 0, 0, 0, 1, 0, Zer37551), 
LMin29439 = minimum_layer([Con97545,Zer37551], Min29439), 
exec_layers([LMax68185,LReL7591,LRes9822,LAve29801,LGlo34233,LRes75738,LRes38636,LAve36110,LZer59722,LSub68056,LZer85824,LCon82585,LMul31865,LRes88557,LGlo88023,LRes36977,LRes30268,LRes43010,LZer34387,LCon97545,LCro23229,LCon58546,LZer37551,LMin29439],["Max68185","ReL7591","Res9822","Ave29801","Glo34233","Res75738","Res38636","Ave36110","Zer59722","Sub68056","Zer85824","Con82585","Mul31865","Res88557","Glo88023","Res36977","Res30268","Res43010","Zer34387","Con97545","Cro23229","Con58546","Zer37551","Min29439"],Min29439,"Min29439")

Actual (Unparsed): [[[[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [-0.8429823, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [-0.8646346, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [-1.2071316, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [-0.0110470, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [-0.7280071, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [-1.4435305, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.6848000, 0.3088000], [-0.1731961, 0.3729000, 0.6762000]]]]]

Expected (Unparsed): [[[[[0,0,0],[0,0,0],[-0.0,0,0]]],[[[0,0,0],[0,0,0],[-0.842982257241523,0,0]]],[[[0,0,0],[0,0,0],[-0.8646344493135629,0,0]]],[[[0,0,0],[0,0,0],[-1.2071316652094777,0,0]]],[[[0,0,0],[0,0,0],[-0.011046953513307717,0,0]]],[[[0,0,0],[0,0,0],[-0.7280069529690977,0,0]]],[[[0,0,0],[0,0,0],[-1.4435304778271114,0,0]]],[[[0,0,0],[0,0.6848,0.3088],[-0.17319609492261479,0.3729,0.6762]]]]]

Actual:   [[[[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [-0.8429, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [-0.8646, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [-1.2071, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [-0.011, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [-0.728, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [-1.4435, 0, 0]]], [[[0, 0, 0], [0, 0.6848, 0.3088], [-0.1731, 0.3729, 0.6762]]]]]

Expected: [[[[[0, 0, 0], [0, 0, 0], [-0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [-0.8429, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [-0.8646, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [-1.2071, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [-0.011, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [-0.728, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [-1.4435, 0, 0]]], [[[0, 0, 0], [0, 0.6848, 0.3088], [-0.1731, 0.3729, 0.6762]]]]]