import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul59151 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Mul59151 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con19172 = tf.keras.layers.Input(shape=([2, 2, 2, 3]))
in0Cro19419 = tf.keras.layers.Input(shape=([2, 2, 3, 4]))

Mul59151 = keras.layers.Multiply(name = 'Mul59151', )([in0Mul59151,in1Mul59151])
Res57506 = keras.layers.Reshape((2, 2, 2, 1), name = 'Res57506', )(Mul59151)
Con19172 = keras.layers.Concatenate(axis=4, name = 'Con19172', )([Res57506,in0Con19172])
Cro19419 = keras.layers.Cropping3D(cropping=((0, 0), (1, 0), (2, 0)), name = 'Cro19419', )(in0Cro19419)
Zer93674 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (1, 0)), name = 'Zer93674', )(Cro19419)
Max64767 = keras.layers.Maximum(name = 'Max64767', )([Con19172,Zer93674])
Den67996 = keras.layers.Dense(3,name = 'Den67996', )(Max64767)
model = tf.keras.models.Model(inputs=[in0Mul59151,in1Mul59151,in0Con19172,in0Cro19419], outputs=Den67996)
w = model.get_layer('Den67996').get_weights() 
w[0] = np.array([[0.4673, 0.6755, 0.2578], [0.2693, 0.7279, 0.1457], [0.0232, 0.8428, 0.539], [0.1022, 0.1604, 0.1286]])
w[1] = np.array([0.8966, 0.4107, 0.3664])
model.get_layer('Den67996').set_weights(w) 
in0Mul59151 = tf.constant([[[[0.2796, 0.7975], [0.6089, 0.3533]], [[0.3607, 0.7428], [0.2142, 0.9092]]]])
in1Mul59151 = tf.constant([[[[0.0805, 0.3531], [0.7053, 0.061]], [[0.0987, 0.4415], [0.7346, 0.7642]]]])
in0Con19172 = tf.constant([[[[[0.7495, 0.4934, 0.1885], [0.137, 0.7772, 0.0304]], [[0.345, 0.9696, 0.2642], [0.0097, 0.6011, 0.871]]], [[[0.7877, 0.3934, 0.0245], [0.2685, 0.4375, 0.4374]], [[0.1074, 0.3529, 0.2811], [0.2612, 0.8634, 0.0999]]]]])
in0Cro19419 = tf.constant([[[[[1.2893, 1.0616, 1.601, 1.35], [1.2635, 1.4678, 1.1392, 1.6459], [1.2345, 1.8967, 1.0411, 1.4075]], [[1.1749, 1.797, 1.0545, 1.47], [1.4262, 1.4788, 1.7844, 1.5639], [1.5336, 1.1483, 1.0188, 1.4485]]], [[[1.0998, 1.9495, 1.5968, 1.8645], [1.8785, 1.9411, 1.8444, 1.8274], [1.1619, 1.9059, 1.5108, 1.9468]], [[1.7534, 1.5087, 1.96, 1.7843], [1.4657, 1.6008, 1.0911, 1.7446], [1.1335, 1.3997, 1.0958, 1.6304]]]]])
print (np.array2string(model.predict([in0Mul59151,in1Mul59151,in0Con19172,in0Cro19419],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Den67996.png')

LMul59151 = multiply_layer([[[[[0.2796, 0.7975], [0.6089, 0.3533]], [[0.3607, 0.7428], [0.2142, 0.9092]]]], [[[[0.0805, 0.3531], [0.7053, 0.061]], [[0.0987, 0.4415], [0.7346, 0.7642]]]]], Mul59151), 
LRes57506 = reshape_layer(Mul59151, [2, 2, 2, 1], Res57506), 
LCon19172 = concatenate_layer([Res57506,[[[[[0.7495, 0.4934, 0.1885], [0.137, 0.7772, 0.0304]], [[0.345, 0.9696, 0.2642], [0.0097, 0.6011, 0.871]]], [[[0.7877, 0.3934, 0.0245], [0.2685, 0.4375, 0.4374]], [[0.1074, 0.3529, 0.2811], [0.2612, 0.8634, 0.0999]]]]]], 4, Con19172), 
LCro19419 = cropping3D_layer([[[[[1.2893, 1.0616, 1.601, 1.35], [1.2635, 1.4678, 1.1392, 1.6459], [1.2345, 1.8967, 1.0411, 1.4075]], [[1.1749, 1.797, 1.0545, 1.47], [1.4262, 1.4788, 1.7844, 1.5639], [1.5336, 1.1483, 1.0188, 1.4485]]], [[[1.0998, 1.9495, 1.5968, 1.8645], [1.8785, 1.9411, 1.8444, 1.8274], [1.1619, 1.9059, 1.5108, 1.9468]], [[1.7534, 1.5087, 1.96, 1.7843], [1.4657, 1.6008, 1.0911, 1.7446], [1.1335, 1.3997, 1.0958, 1.6304]]]]], 0, 0, 1, 0, 2, 0, Cro19419), 
LZer93674 = zero_padding3D_layer(Cro19419, 0, 0, 1, 0, 1, 0, Zer93674), 
LMax64767 = maximum_layer([Con19172,Zer93674], Max64767), 
LDen67996 = dense_layer(Max64767, [[0.4673, 0.6755, 0.2578], [0.2693, 0.7279, 0.1457], [0.0232, 0.8428, 0.539], [0.1022, 0.1604, 0.1286]],[0.8966, 0.4107, 0.3664], Den67996), 
exec_layers([LMul59151,LRes57506,LCon19172,LCro19419,LZer93674,LMax64767,LDen67996],["Mul59151","Res57506","Con19172","Cro19419","Zer93674","Max64767","Den67996"],Den67996,"Den67996")

Actual (Unparsed): [[[[[1.1396698, 1.4175380, 0.7715884], [1.0862224, 1.3605415, 0.8817769]], [[1.2396898, 1.8114804, 1.0839711], [2.0941613, 3.3734785, 1.6644797]]], [[[1.1369948, 1.3436027, 0.7055392], [1.1770086, 1.2665528, 0.7821271]], [[1.0359688, 0.9376798, 0.6489759], [1.9952732, 3.3802773, 1.6628582]]]]]

Expected (Unparsed): [[[[[1.13966982494,1.4175379889,0.77158836084],[1.0862224149250002,1.3605415623750001,0.8817769110500001]],[[1.239689795541,1.811480378335,1.083971078426],[2.09416133,3.37347841,1.6644796899999998]]],[[[1.1369947793569999,1.3436026862950001,0.7055391510019999],[1.1770085892600002,1.2665527681,0.78212712036]],[[1.0359687918359999,0.9376798366600001,0.648975910296],[1.9952731999999997,3.3802772800000005,1.6628582299999999]]]]]

Actual:   [[[[[1.1397, 1.4176, 0.7716], [1.0863, 1.3606, 0.8818]], [[1.2397, 1.8115, 1.084], [2.0942, 3.3735, 1.6645]]], [[[1.137, 1.3437, 0.7056], [1.1771, 1.2666, 0.7822]], [[1.036, 0.9377, 0.649], [1.9953, 3.3803, 1.6629]]]]]

Expected: [[[[[1.1397, 1.4176, 0.7716], [1.0863, 1.3606, 0.8818]], [[1.2397, 1.8115, 1.084], [2.0942, 3.3735, 1.6645]]], [[[1.137, 1.3437, 0.7056], [1.1771, 1.2666, 0.7822]], [[1.036, 0.9377, 0.649], [1.9953, 3.3803, 1.6629]]]]]