import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave9515 = tf.keras.layers.Input(shape=([2, 1]))
in1Ave9515 = tf.keras.layers.Input(shape=([2, 1]))
in0Con37394 = tf.keras.layers.Input(shape=([2, 1, 3, 1]))
in0Ave18212 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in1Ave18212 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))

Ave9515 = keras.layers.Average(name = 'Ave9515', )([in0Ave9515,in1Ave9515])
Res37617 = keras.layers.Reshape((2, 1, 1), name = 'Res37617', )(Ave9515)
Sep87603 = keras.layers.SeparableConv2D(3, (1, 1),strides=(1, 1), padding='valid', name = 'Sep87603', )(Res37617)
Res62063 = keras.layers.Reshape((2, 1, 3, 1), name = 'Res62063', )(Sep87603)
Con37394 = keras.layers.Concatenate(axis=4, name = 'Con37394', )([Res62063,in0Con37394])
Ave18212 = keras.layers.Average(name = 'Ave18212', )([in0Ave18212,in1Ave18212])
Zer153 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (1, 0)), name = 'Zer153', )(Ave18212)
Ave7454 = keras.layers.Average(name = 'Ave7454', )([Con37394,Zer153])
Con16323 = keras.layers.Conv3DTranspose(3, (1, 1, 2),strides=(4, 1, 1), padding='same', name = 'Con16323', )(Ave7454)
model = tf.keras.models.Model(inputs=[in0Ave9515,in1Ave9515,in0Con37394,in0Ave18212,in1Ave18212], outputs=Con16323)
w = model.get_layer('Sep87603').get_weights() 
w[0] = np.array([[[[0.3068]]]])
w[1] = np.array([[[[0.9993, 0.25, 0.995]]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep87603').set_weights(w) 
w = model.get_layer('Con16323').get_weights() 
w[0] = np.array([[[[[0.0759, 0.0861], [0.4623, 0.1784], [0.3054, 0.5643]], [[0.5325, 0.2903], [0.9947, 0.2247], [0.3485, 0.047]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con16323').set_weights(w) 
in0Ave9515 = tf.constant([[[0.9706], [0.0376]]])
in1Ave9515 = tf.constant([[[0.124], [0.1116]]])
in0Con37394 = tf.constant([[[[[0.1346], [0.6197], [0.9355]]], [[[0.1542], [0.0493], [0.5197]]]]])
in0Ave18212 = tf.constant([[[[[0.2557, 0.961], [0.9941, 0.7226]]], [[[0.993, 0.2843], [0.2821, 0.5294]]]]])
in1Ave18212 = tf.constant([[[[[0.2583, 0.1749], [0.1251, 0.2095]]], [[[0.2124, 0.1364], [0.0428, 0.8915]]]]])
print (np.array2string(model.predict([in0Ave9515,in1Ave9515,in0Con37394,in0Ave18212,in1Ave18212],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con16323.png')

LAve9515 = average_layer([[[[0.9706], [0.0376]]], [[[0.124], [0.1116]]]], Ave9515), 
LRes37617 = reshape_layer(Ave9515, [2, 1, 1], Res37617), 
LSep87603 = separable_conv2D_layer(Res37617, 1, 1,[[[[[0.3068]]]],[[[[0.9993, 0.25, 0.995]]]]],[0, 0, 0], 1, 1, false, Sep87603), 
LRes62063 = reshape_layer(Sep87603, [2, 1, 3, 1], Res62063), 
LCon37394 = concatenate_layer([Res62063,[[[[[0.1346], [0.6197], [0.9355]]], [[[0.1542], [0.0493], [0.5197]]]]]], 4, Con37394), 
LAve18212 = average_layer([[[[[[0.2557, 0.961], [0.9941, 0.7226]]], [[[0.993, 0.2843], [0.2821, 0.5294]]]]], [[[[[0.2583, 0.1749], [0.1251, 0.2095]]], [[[0.2124, 0.1364], [0.0428, 0.8915]]]]]], Ave18212), 
LZer153 = zero_padding3D_layer(Ave18212, 0, 0, 0, 0, 1, 0, Zer153), 
LAve7454 = average_layer([Con37394,Zer153], Ave7454), 
LCon16323 = conv3D_transpose_layer(Ave7454, 1, 1, 2,[[[[[0.0759, 0.0861], [0.4623, 0.1784], [0.3054, 0.5643]], [[0.5325, 0.2903], [0.9947, 0.2247], [0.3485, 0.047]]]]],[0, 0, 0], 4, 1, 1, true, Con16323), 
exec_layers([LAve9515,LRes37617,LSep87603,LRes62063,LCon37394,LAve18212,LZer153,LAve7454,LCon16323],["Ave9515","Res37617","Sep87603","Res62063","Con37394","Ave18212","Zer153","Ave7454","Con16323"],Con16323,"Con16323")

Actual (Unparsed): [[[[[0.0121623, 0.0507919, 0.0635995], [0.1266869, 0.2736218, 0.4131506], [0.3399042, 0.5751177, 0.5864168]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]], [[[0.0075063, 0.0190413, 0.0470000], [0.0627391, 0.1924969, 0.1737753], [0.2596677, 0.4843139, 0.4874896]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]]]]

Expected (Unparsed): [[[[[0.0121623161652834,0.0507919266430898,0.0635995493528004],[0.126686913802595,0.2736218304525922,0.41315059660471104],[0.33990419904181,0.57511765274657,0.5864168352083601]]],[[[0,0,0],[0,0,0],[0,0,0]]],[[[0,0,0],[0,0,0],[0,0,0]]],[[[0,0,0],[0,0,0],[0,0,0]]],[[[0.0075062742754068,0.019041331495659602,0.0469999712346408],[0.06273914325219,0.1924968743089044,0.173775276278022],[0.25966767148962,0.48431390997514,0.4874896278527201]]],[[[0,0,0],[0,0,0],[0,0,0]]],[[[0,0,0],[0,0,0],[0,0,0]]],[[[0,0,0],[0,0,0],[0,0,0]]]]]

Actual:   [[[[[0.0122, 0.0508, 0.0636], [0.1267, 0.2737, 0.4132], [0.34, 0.5752, 0.5865]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0.0076, 0.0191, 0.047], [0.0628, 0.1925, 0.1738], [0.2597, 0.4844, 0.4875]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]]]]

Expected: [[[[[0.0122, 0.0508, 0.0636], [0.1267, 0.2737, 0.4132], [0.34, 0.5752, 0.5865]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0.0076, 0.0191, 0.047], [0.0628, 0.1925, 0.1738], [0.2597, 0.4844, 0.4875]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]]]]