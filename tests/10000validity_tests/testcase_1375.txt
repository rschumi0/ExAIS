import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add16366 = tf.keras.layers.Input(shape=([2, 2]))
in1Add16366 = tf.keras.layers.Input(shape=([2, 2]))
in0Mul58832 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in1Mul58832 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Con82004 = tf.keras.layers.Input(shape=([4, 15]))

Add16366 = keras.layers.Add(name = 'Add16366', )([in0Add16366,in1Add16366])
Up_361 = keras.layers.UpSampling1D(size=(2), name = 'Up_361', )(Add16366)
Res96482 = keras.layers.Reshape((4, 2, 1), name = 'Res96482', )(Up_361)
Sep80558 = keras.layers.SeparableConv2D(4, (2, 2),strides=(2, 2), padding='same', name = 'Sep80558', )(Res96482)
Res85221 = keras.layers.Reshape((2, 1, 4, 1), name = 'Res85221', )(Sep80558)
Zer43937 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer43937', )(Res85221)
Res59257 = keras.layers.Reshape((4, 3, 6), name = 'Res59257', )(Zer43937)
Res49747 = keras.layers.Reshape((4, 18), name = 'Res49747', )(Res59257)
Mul58832 = keras.layers.Multiply(name = 'Mul58832', )([in0Mul58832,in1Mul58832])
Res27153 = keras.layers.Reshape((2, 2, 2), name = 'Res27153', )(Mul58832)
Res34374 = keras.layers.Reshape((2, 4), name = 'Res34374', )(Res27153)
Con53694 = keras.layers.Conv1D(3, (2),strides=(1), padding='valid', dilation_rate=(1), name = 'Con53694', )(Res34374)
Zer59076 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer59076', )(Con53694)
Con82004 = keras.layers.Concatenate(axis=2, name = 'Con82004', )([Zer59076,in0Con82004])
Min11432 = keras.layers.Minimum(name = 'Min11432', )([Res49747,Con82004])
model = tf.keras.models.Model(inputs=[in0Add16366,in1Add16366,in0Mul58832,in1Mul58832,in0Con82004], outputs=Min11432)
w = model.get_layer('Sep80558').get_weights() 
w[0] = np.array([[[[0.6573]], [[0.5196]]], [[[0.8325]], [[0.241]]]])
w[1] = np.array([[[[0.8567, 0.6834, 0.886, 0.1095]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep80558').set_weights(w) 
w = model.get_layer('Con53694').get_weights() 
w[0] = np.array([[[0.8596, 0.0853, 0.6585], [0.3791, 0.3976, 0.472], [0.8004, 0.5674, 0.927], [0.0809, 0.8407, 0.9977]], [[0.1594, 0.7507, 0.8662], [0.9939, 0.9962, 0.0842], [0.0285, 0.8052, 0.2063], [0.4325, 0.0828, 0.1237]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con53694').set_weights(w) 
in0Add16366 = tf.constant([[[0.1074, 0.3362], [0.0011, 0.2251]]])
in1Add16366 = tf.constant([[[0.4613, 0.8791], [0.0675, 0.3413]]])
in0Mul58832 = tf.constant([[[[[0.2819, 0.4986]], [[0.5692, 0.1678]]], [[[0.4625, 0.0031]], [[0.0365, 0.1762]]]]])
in1Mul58832 = tf.constant([[[[[0.0709, 0.3901]], [[0.5945, 0.0774]]], [[[0.3505, 0.4529]], [[0.4034, 0.4059]]]]])
in0Con82004 = tf.constant([[[0.534, 0.1796, 0.5874, 0.8887, 0.0264, 0.2416, 0.7269, 0.7912, 0.8032, 0.2594, 0.6118, 0.4342, 0.5154, 0.334, 0.0791], [0.9421, 0.2348, 0.0784, 0.3799, 0.2172, 0.3124, 0.8513, 0.6424, 0.9463, 0.7992, 0.9784, 0.8292, 0.3863, 0.8081, 0.1284], [0.2569, 0.5837, 0.4562, 0.6854, 0.8949, 0.875, 0.3144, 0.9111, 0.341, 0.4801, 0.615, 0.9283, 0.5824, 0.7573, 0.8186], [0.0713, 0.3962, 0.2156, 0.5266, 0.9475, 0.5142, 0.6965, 0.1405, 0.6353, 0.4872, 0.2316, 0.1139, 0.8009, 0.5159, 0.9584]]])
print (np.array2string(model.predict([in0Add16366,in1Add16366,in0Mul58832,in1Mul58832,in0Con82004],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min11432.png')

LAdd16366 = add_layer([[[[0.1074, 0.3362], [0.0011, 0.2251]]], [[[0.4613, 0.8791], [0.0675, 0.3413]]]], Add16366), 
LUp_361 = up_sampling1D_layer(Add16366, 2, Up_361), 
LRes96482 = reshape_layer(Up_361, [4, 2, 1], Res96482), 
LSep80558 = separable_conv2D_layer(Res96482, 2, 2,[[[[[0.6573]], [[0.5196]]], [[[0.8325]], [[0.241]]]],[[[[0.8567, 0.6834, 0.886, 0.1095]]]]],[0, 0, 0, 0], 2, 2, true, Sep80558), 
LRes85221 = reshape_layer(Sep80558, [2, 1, 4, 1], Res85221), 
LZer43937 = zero_padding3D_layer(Res85221, 1, 1, 1, 1, 1, 1, Zer43937), 
LRes59257 = reshape_layer(Zer43937, [4, 3, 6], Res59257), 
LRes49747 = reshape_layer(Res59257, [4, 18], Res49747), 
LMul58832 = multiply_layer([[[[[[0.2819, 0.4986]], [[0.5692, 0.1678]]], [[[0.4625, 0.0031]], [[0.0365, 0.1762]]]]], [[[[[0.0709, 0.3901]], [[0.5945, 0.0774]]], [[[0.3505, 0.4529]], [[0.4034, 0.4059]]]]]], Mul58832), 
LRes27153 = reshape_layer(Mul58832, [2, 2, 2], Res27153), 
LRes34374 = reshape_layer(Res27153, [2, 4], Res34374), 
LCon53694 = conv1D_layer(Res34374, 2,[[[0.8596, 0.0853, 0.6585], [0.3791, 0.3976, 0.472], [0.8004, 0.5674, 0.927], [0.0809, 0.8407, 0.9977]], [[0.1594, 0.7507, 0.8662], [0.9939, 0.9962, 0.0842], [0.0285, 0.8052, 0.2063], [0.4325, 0.0828, 0.1237]]],[0, 0, 0], 1, false, 1, Con53694), 
LZer59076 = zero_padding1D_layer(Con53694, 3, 0, Zer59076), 
LCon82004 = concatenate_layer([Zer59076,[[[0.534, 0.1796, 0.5874, 0.8887, 0.0264, 0.2416, 0.7269, 0.7912, 0.8032, 0.2594, 0.6118, 0.4342, 0.5154, 0.334, 0.0791], [0.9421, 0.2348, 0.0784, 0.3799, 0.2172, 0.3124, 0.8513, 0.6424, 0.9463, 0.7992, 0.9784, 0.8292, 0.3863, 0.8081, 0.1284], [0.2569, 0.5837, 0.4562, 0.6854, 0.8949, 0.875, 0.3144, 0.9111, 0.341, 0.4801, 0.615, 0.9283, 0.5824, 0.7573, 0.8186], [0.0713, 0.3962, 0.2156, 0.5266, 0.9475, 0.5142, 0.6965, 0.1405, 0.6353, 0.4872, 0.2316, 0.1139, 0.8009, 0.5159, 0.9584]]]], 2, Con82004), 
LMin11432 = minimum_layer([Res49747,Con82004], Min11432), 
exec_layers([LAdd16366,LUp_361,LRes96482,LSep80558,LRes85221,LZer43937,LRes59257,LRes49747,LMul58832,LRes27153,LRes34374,LCon53694,LZer59076,LCon82004,LMin11432],["Add16366","Up_361","Res96482","Sep80558","Res85221","Zer43937","Res59257","Res49747","Mul58832","Res27153","Res34374","Con53694","Zer59076","Con82004","Min11432"],Min11432,"Min11432")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.2172000, 0.3124000, 0.8513000, 0.1939909, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.4566246, 0.3642550, 0.3144000, 0.0583640, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0.2172,0.3124,0.8513,0.19399090518,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0.45662462960399997,0.364255015608,0.3144,0.058363951139999995,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]]

Actual:   [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0.2172, 0.3124, 0.8513, 0.194, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0.4567, 0.3643, 0.3144, 0.0584, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]

Expected: [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0.2172, 0.3124, 0.8513, 0.194, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0.4567, 0.3643, 0.3144, 0.0584, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]