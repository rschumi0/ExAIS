import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add57432 = tf.keras.layers.Input(shape=([2, 2]))
in1Add57432 = tf.keras.layers.Input(shape=([2, 2]))
in0Max66705 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in1Max66705 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Con40221 = tf.keras.layers.Input(shape=([5]))
in0Sub37118 = tf.keras.layers.Input(shape=([2]))
in1Sub37118 = tf.keras.layers.Input(shape=([2]))
in0Con59553 = tf.keras.layers.Input(shape=([6]))
in0Con81886 = tf.keras.layers.Input(shape=([8, 7, 1]))
in0Con43631 = tf.keras.layers.Input(shape=([1, 2]))
in0Con32167 = tf.keras.layers.Input(shape=([5, 4, 1]))
in0Zer90978 = tf.keras.layers.Input(shape=([1, 3]))
in0Con99941 = tf.keras.layers.Input(shape=([5, 4, 1]))
in0Den98408 = tf.keras.layers.Input(shape=([5, 4, 3]))

Add57432 = keras.layers.Add(name = 'Add57432', )([in0Add57432,in1Add57432])
Loc79080 = keras.layers.LocallyConnected1D(4, (1),strides=(1), name = 'Loc79080', )(Add57432)
Fla76364 = keras.layers.Flatten(name = 'Fla76364', )(Loc79080)
Max66705 = keras.layers.Maximum(name = 'Max66705', )([in0Max66705,in1Max66705])
Res18712 = keras.layers.Reshape((2, 2, 2), name = 'Res18712', )(Max66705)
Res17567 = keras.layers.Reshape((2, 4), name = 'Res17567', )(Res18712)
LST68965 = keras.layers.LSTM(3,recurrent_activation='sigmoid', name = 'LST68965', )(Res17567)
Con40221 = keras.layers.Concatenate(axis=1, name = 'Con40221', )([LST68965,in0Con40221])
Ave8883 = keras.layers.Average(name = 'Ave8883', )([Fla76364,Con40221])
Sub37118 = keras.layers.Subtract(name = 'Sub37118', )([in0Sub37118,in1Sub37118])
Con59553 = keras.layers.Concatenate(axis=1, name = 'Con59553', )([Sub37118,in0Con59553])
Sub92026 = keras.layers.Subtract(name = 'Sub92026', )([Ave8883,Con59553])
Res33494 = keras.layers.Reshape((8, 1), name = 'Res33494', )(Sub92026)
Res36018 = keras.layers.Reshape((8, 1, 1), name = 'Res36018', )(Res33494)
Zer46966 = keras.layers.ZeroPadding2D(padding=((0, 0), (6, 0)), name = 'Zer46966', )(Res36018)
Con81886 = keras.layers.Concatenate(axis=3, name = 'Con81886', )([Zer46966,in0Con81886])
Con43631 = keras.layers.Conv1D(3, (1),strides=(1), padding='same', dilation_rate=(1), name = 'Con43631', )(in0Con43631)
Res43533 = keras.layers.Reshape((1, 3, 1), name = 'Res43533', )(Con43631)
Zer96310 = keras.layers.ZeroPadding2D(padding=((4, 0), (1, 0)), name = 'Zer96310', )(Res43533)
Con32167 = keras.layers.Concatenate(axis=3, name = 'Con32167', )([Zer96310,in0Con32167])
Zer90978 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer90978', )(in0Zer90978)
Res91308 = keras.layers.Reshape((3, 3, 1), name = 'Res91308', )(Zer90978)
Zer65469 = keras.layers.ZeroPadding2D(padding=((2, 0), (1, 0)), name = 'Zer65469', )(Res91308)
Con99941 = keras.layers.Concatenate(axis=3, name = 'Con99941', )([Zer65469,in0Con99941])
Den98408 = keras.layers.Dense(2,name = 'Den98408', )(in0Den98408)
Mul89059 = keras.layers.Multiply(name = 'Mul89059', )([Con99941,Den98408])
Max28172 = keras.layers.Maximum(name = 'Max28172', )([Con32167,Mul89059])
Zer63246 = keras.layers.ZeroPadding2D(padding=((3, 0), (3, 0)), name = 'Zer63246', )(Max28172)
Ave85518 = keras.layers.Average(name = 'Ave85518', )([Con81886,Zer63246])
model = tf.keras.models.Model(inputs=[in0Add57432,in1Add57432,in0Max66705,in1Max66705,in0Con40221,in0Sub37118,in1Sub37118,in0Con59553,in0Con81886,in0Con43631,in0Con32167,in0Zer90978,in0Con99941,in0Den98408], outputs=Ave85518)
w = model.get_layer('Loc79080').get_weights() 
w[0] = np.array([[[0.1111, 0.5777, 0.7002, 0.1068], [0.4266, 0.8761, 0.5282, 0.9149]], [[0.4154, 0.1391, 0.9381, 0.3134], [0.7893, 0.2497, 0.2055, 0.9972]]])
w[1] = np.array([[0, 0, 0, 0], [0, 0, 0, 0]])
model.get_layer('Loc79080').set_weights(w) 
w = model.get_layer('LST68965').get_weights() 
w[0] = np.array([[2, 5, 6, 6, 6, 1, 8, 2, 2, 10, 10, 3], [3, 10, 3, 6, 7, 3, 8, 9, 7, 5, 1, 7], [6, 6, 6, 5, 6, 1, 1, 2, 10, 1, 9, 9], [9, 7, 10, 8, 4, 8, 3, 3, 10, 5, 8, 6]])
w[1] = np.array([[2, 7, 1, 5, 4, 3, 5, 6, 6, 8, 1, 2], [3, 3, 6, 7, 3, 6, 2, 7, 7, 3, 5, 1], [3, 9, 5, 4, 3, 4, 3, 9, 3, 1, 6, 6]])
w[2] = np.array([10, 9, 3, 3, 3, 9, 1, 2, 7, 3, 3, 6])
model.get_layer('LST68965').set_weights(w) 
w = model.get_layer('Con43631').get_weights() 
w[0] = np.array([[[0.7335, 0.5664, 0.4268], [0.0732, 0.7564, 0.3813]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con43631').set_weights(w) 
w = model.get_layer('Den98408').get_weights() 
w[0] = np.array([[0.1835, 0.9601], [0.6286, 0.5869], [0.9625, 0.2445]])
w[1] = np.array([0.1918, 0.201])
model.get_layer('Den98408').set_weights(w) 
in0Add57432 = tf.constant([[[0.1975, 0.2845], [0.9187, 0.21]]])
in1Add57432 = tf.constant([[[0.7168, 0.8134], [0.5344, 0.8492]]])
in0Max66705 = tf.constant([[[[[0.9879], [0.3972]], [[0.8513], [0.4972]]], [[[0.9976], [0.1466]], [[0.4887], [0.3103]]]]])
in1Max66705 = tf.constant([[[[[0.4978], [0.3314]], [[0.1755], [0.9428]]], [[[0.2512], [0.5254]], [[0.9431], [0.5284]]]]])
in0Con40221 = tf.constant([[0.1919, 0.8662, 0.6107, 0.3655, 0.3096]])
in0Sub37118 = tf.constant([[0.7474, 0.1519]])
in1Sub37118 = tf.constant([[0.5063, 0.7162]])
in0Con59553 = tf.constant([[0.9147, 0.3101, 0.5937, 0.2423, 0.1397, 0.0204]])
in0Con81886 = tf.constant([[[[0.5292], [0.2533], [0.0273], [0.159], [0.6037], [0.0249], [0.7182]], [[0.7184], [0.668], [0.9418], [0.3596], [0.7975], [0.2908], [0.229]], [[0.3296], [0.3015], [0.61], [0.607], [0.8522], [0.194], [0.5313]], [[0.4542], [0.481], [0.1043], [0.8973], [0.4323], [0.9892], [0.1213]], [[0.1629], [0.4004], [0.0979], [0.8303], [0.1009], [0.4089], [0.9764]], [[0.7475], [0.3251], [0.0533], [0.7275], [0.4436], [0.9685], [0.4968]], [[0.1394], [0.8117], [0.6823], [0.0217], [0.8241], [0.1327], [0.2313]], [[0.0608], [0.4954], [0.8153], [0.3542], [0.2755], [0.5391], [0.951]]]])
in0Con43631 = tf.constant([[[0.222, 0.2274]]])
in0Con32167 = tf.constant([[[[0.3256], [0.8565], [0.7527], [0.5193]], [[0.3387], [0.589], [0.8758], [0.0236]], [[0.2401], [0.411], [0.5868], [0.143]], [[0.2202], [0.0149], [0.7744], [0.5023]], [[0.4868], [0.7418], [0.7369], [0.6464]]]])
in0Zer90978 = tf.constant([[[1.7768, 1.7536, 1.7335]]])
in0Con99941 = tf.constant([[[[0.3434], [0.8796], [0.709], [0.8502]], [[0.4257], [0.2885], [0.4371], [0.7847]], [[0.7411], [0.9259], [0.9285], [0.4661]], [[0.5316], [0.0089], [0.1798], [0.8112]], [[0.6342], [0.4354], [0.9712], [0.9805]]]])
in0Den98408 = tf.constant([[[[0.4929, 0.8944, 0.1446], [0.2561, 0.0612, 0.3796], [0.984, 0.2332, 0.1617], [0.0111, 0.6733, 0.8025]], [[0.5658, 0.817, 0.3534], [0.9499, 0.7936, 0.1292], [0.0576, 0.1813, 0.263], [0.9955, 0.2846, 0.9106]], [[0.1254, 0.3727, 0.4154], [0.6513, 0.6549, 0.4266], [0.162, 0.2768, 0.7018], [0.9576, 0.0205, 0.0646]], [[0.9072, 0.4377, 0.527], [0.9762, 0.0833, 0.3966], [0.9637, 0.6421, 0.41], [0.9266, 0.0497, 0.8176]], [[0.8707, 0.8903, 0.062], [0.6551, 0.6577, 0.0077], [0.7828, 0.9986, 0.1129], [0.3781, 0.6439, 0.0486]]]])
print (np.array2string(model.predict([in0Add57432,in1Add57432,in0Max66705,in1Max66705,in0Con40221,in0Sub37118,in1Sub37118,in0Con59553,in0Con81886,in0Con43631,in0Con32167,in0Zer90978,in0Con99941,in0Den98408],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave85518.png')

LAdd57432 = add_layer([[[[0.1975, 0.2845], [0.9187, 0.21]]], [[[0.7168, 0.8134], [0.5344, 0.8492]]]], Add57432), 
LLoc79080 = locally_connected1D_layer(Add57432, 1,[[[0.1111, 0.5777, 0.7002, 0.1068], [0.4266, 0.8761, 0.5282, 0.9149]], [[0.4154, 0.1391, 0.9381, 0.3134], [0.7893, 0.2497, 0.2055, 0.9972]]],[[0, 0, 0, 0], [0, 0, 0, 0]], 1, Loc79080), 
LFla76364 = flatten_layer(Loc79080, Fla76364), 
LMax66705 = maximum_layer([[[[[[0.9879], [0.3972]], [[0.8513], [0.4972]]], [[[0.9976], [0.1466]], [[0.4887], [0.3103]]]]], [[[[[0.4978], [0.3314]], [[0.1755], [0.9428]]], [[[0.2512], [0.5254]], [[0.9431], [0.5284]]]]]], Max66705), 
LRes18712 = reshape_layer(Max66705, [2, 2, 2], Res18712), 
LRes17567 = reshape_layer(Res18712, [2, 4], Res17567), 
LLST68965 = lstm_layer(Res17567,[[2, 5, 6, 6, 6, 1, 8, 2, 2, 10, 10, 3], [3, 10, 3, 6, 7, 3, 8, 9, 7, 5, 1, 7], [6, 6, 6, 5, 6, 1, 1, 2, 10, 1, 9, 9], [9, 7, 10, 8, 4, 8, 3, 3, 10, 5, 8, 6]],[[2, 7, 1, 5, 4, 3, 5, 6, 6, 8, 1, 2], [3, 3, 6, 7, 3, 6, 2, 7, 7, 3, 5, 1], [3, 9, 5, 4, 3, 4, 3, 9, 3, 1, 6, 6]],[10, 9, 3, 3, 3, 9, 1, 2, 7, 3, 3, 6], LST68965), 
LCon40221 = concatenate_layer([LST68965,[[0.1919, 0.8662, 0.6107, 0.3655, 0.3096]]], 1, Con40221), 
LAve8883 = average_layer([Fla76364,Con40221], Ave8883), 
LSub37118 = subtract_layer([[0.7474, 0.1519]], [[0.5063, 0.7162]], Sub37118), 
LCon59553 = concatenate_layer([Sub37118,[[0.9147, 0.3101, 0.5937, 0.2423, 0.1397, 0.0204]]], 1, Con59553), 
LSub92026 = subtract_layer(Ave8883,Con59553, Sub92026), 
LRes33494 = reshape_layer(Sub92026, [8, 1], Res33494), 
LRes36018 = reshape_layer(Res33494, [8, 1, 1], Res36018), 
LZer46966 = zero_padding2D_layer(Res36018, 0, 0, 6, 0, Zer46966), 
LCon81886 = concatenate_layer([Zer46966,[[[[0.5292], [0.2533], [0.0273], [0.159], [0.6037], [0.0249], [0.7182]], [[0.7184], [0.668], [0.9418], [0.3596], [0.7975], [0.2908], [0.229]], [[0.3296], [0.3015], [0.61], [0.607], [0.8522], [0.194], [0.5313]], [[0.4542], [0.481], [0.1043], [0.8973], [0.4323], [0.9892], [0.1213]], [[0.1629], [0.4004], [0.0979], [0.8303], [0.1009], [0.4089], [0.9764]], [[0.7475], [0.3251], [0.0533], [0.7275], [0.4436], [0.9685], [0.4968]], [[0.1394], [0.8117], [0.6823], [0.0217], [0.8241], [0.1327], [0.2313]], [[0.0608], [0.4954], [0.8153], [0.3542], [0.2755], [0.5391], [0.951]]]]], 3, Con81886), 
LCon43631 = conv1D_layer([[[0.222, 0.2274]]], 1,[[[0.7335, 0.5664, 0.4268], [0.0732, 0.7564, 0.3813]]],[0, 0, 0], 1, true, 1, Con43631), 
LRes43533 = reshape_layer(Con43631, [1, 3, 1], Res43533), 
LZer96310 = zero_padding2D_layer(Res43533, 4, 0, 1, 0, Zer96310), 
LCon32167 = concatenate_layer([Zer96310,[[[[0.3256], [0.8565], [0.7527], [0.5193]], [[0.3387], [0.589], [0.8758], [0.0236]], [[0.2401], [0.411], [0.5868], [0.143]], [[0.2202], [0.0149], [0.7744], [0.5023]], [[0.4868], [0.7418], [0.7369], [0.6464]]]]], 3, Con32167), 
LZer90978 = zero_padding1D_layer([[[1.7768, 1.7536, 1.7335]]], 1, 1, Zer90978), 
LRes91308 = reshape_layer(Zer90978, [3, 3, 1], Res91308), 
LZer65469 = zero_padding2D_layer(Res91308, 2, 0, 1, 0, Zer65469), 
LCon99941 = concatenate_layer([Zer65469,[[[[0.3434], [0.8796], [0.709], [0.8502]], [[0.4257], [0.2885], [0.4371], [0.7847]], [[0.7411], [0.9259], [0.9285], [0.4661]], [[0.5316], [0.0089], [0.1798], [0.8112]], [[0.6342], [0.4354], [0.9712], [0.9805]]]]], 3, Con99941), 
LDen98408 = dense_layer([[[[0.4929, 0.8944, 0.1446], [0.2561, 0.0612, 0.3796], [0.984, 0.2332, 0.1617], [0.0111, 0.6733, 0.8025]], [[0.5658, 0.817, 0.3534], [0.9499, 0.7936, 0.1292], [0.0576, 0.1813, 0.263], [0.9955, 0.2846, 0.9106]], [[0.1254, 0.3727, 0.4154], [0.6513, 0.6549, 0.4266], [0.162, 0.2768, 0.7018], [0.9576, 0.0205, 0.0646]], [[0.9072, 0.4377, 0.527], [0.9762, 0.0833, 0.3966], [0.9637, 0.6421, 0.41], [0.9266, 0.0497, 0.8176]], [[0.8707, 0.8903, 0.062], [0.6551, 0.6577, 0.0077], [0.7828, 0.9986, 0.1129], [0.3781, 0.6439, 0.0486]]]], [[0.1835, 0.9601], [0.6286, 0.5869], [0.9625, 0.2445]],[0.1918, 0.201], Den98408), 
LMul89059 = multiply_layer([Con99941,Den98408], Mul89059), 
LMax28172 = maximum_layer([Con32167,Mul89059], Max28172), 
LZer63246 = zero_padding2D_layer(Max28172, 3, 0, 3, 0, Zer63246), 
LAve85518 = average_layer([Con81886,Zer63246], Ave85518), 
exec_layers([LAdd57432,LLoc79080,LFla76364,LMax66705,LRes18712,LRes17567,LLST68965,LCon40221,LAve8883,LSub37118,LCon59553,LSub92026,LRes33494,LRes36018,LZer46966,LCon81886,LCon43631,LRes43533,LZer96310,LCon32167,LZer90978,LRes91308,LZer65469,LCon99941,LDen98408,LMul89059,LMax28172,LZer63246,LAve85518],["Add57432","Loc79080","Fla76364","Max66705","Res18712","Res17567","LST68965","Con40221","Ave8883","Sub37118","Con59553","Sub92026","Res33494","Res36018","Zer46966","Con81886","Con43631","Res43533","Zer96310","Con32167","Zer90978","Res91308","Zer65469","Con99941","Den98408","Mul89059","Max28172","Zer63246","Ave85518"],Ave85518,"Ave85518")

Actual (Unparsed): [[[[0.0000000, 0.2646000], [0.0000000, 0.1266500], [0.0000000, 0.0136500], [0.0000000, 0.0795000], [0.0000000, 0.3018500], [0.0000000, 0.0124500], [0.2629426, 0.3591000]], [[0.0000000, 0.3592000], [0.0000000, 0.3340000], [0.0000000, 0.4709000], [0.0000000, 0.1798000], [0.0000000, 0.3987500], [0.0000000, 0.1454000], [0.8956722, 0.1145000]], [[0.0000000, 0.1648000], [0.0000000, 0.1507500], [0.0000000, 0.3050000], [0.0000000, 0.3035000], [0.0000000, 0.4261000], [0.0000000, 0.0970000], [0.0886828, 0.2656500]], [[0.0000000, 0.2271000], [0.0000000, 0.2405000], [0.0000000, 0.0521500], [0.0000000, 0.6606156], [0.0000000, 0.6444000], [0.0000000, 0.9632983], [0.1684540, 0.4020173]], [[0.0000000, 0.0814500], [0.0000000, 0.2002000], [0.0000000, 0.0489500], [0.0000000, 0.6940108], [0.0000000, 0.3449500], [0.0000000, 0.6423500], [0.2796111, 1.0949508]], [[0.0000000, 0.3737500], [0.0000000, 0.1625500], [0.0000000, 0.0266500], [0.0000000, 0.6015318], [0.0000000, 0.8305689], [0.0000000, 0.8048519], [0.1481771, 0.5159922]], [[0.0000000, 0.0697000], [0.0000000, 0.4058500], [0.0000000, 0.3411500], [0.0000000, 0.3983174], [0.7151821, 0.4195000], [1.0231274, 0.4535500], [1.4395055, 0.6509206]], [[0.0000000, 0.0304000], [0.0000000, 0.2477000], [0.0000000, 0.4076500], [0.0000000, 0.6764168], [0.0897413, 0.5086500], [0.1488731, 1.0301204], [0.5358376, 0.9431011]]]]

Expected (Unparsed): [[[[0,0.2646],[0,0.12665],[0,0.01365],[0,0.0795],[0,0.30185],[0,0.01245],[0.26294261251878964,0.3591]],[[0,0.3592],[0,0.334],[0,0.4709],[0,0.1798],[0,0.39875],[0,0.1454],[0.8956722200178073,0.1145]],[[0,0.1648],[0,0.15075],[0,0.305],[0,0.3035],[0,0.4261],[0,0.097],[0.08868280501855269,0.26565]],[[0,0.2271],[0,0.2405],[0,0.05215],[0,0.660615598795],[0,0.6444000000000001],[0,0.963298321585],[0.16845398749999999,0.4020172580629999]],[[0,0.08145],[0,0.2002],[0,0.04895],[0,0.694010783113],[0,0.34495],[0,0.64235],[0.279611075,1.0949508306265001]],[[0,0.37375],[0,0.16255],[0,0.02665],[0,0.6015317386085],[0,0.830568898438],[0,0.804851867135],[0.14817711249999999,0.5159921839255001]],[[0,0.0697],[0,0.40585],[0,0.34115],[0,0.39831738502999997],[0.7151820600719999,0.41950000000000004],[1.023127407168,0.45355],[1.43950552921,0.650920640424]],[[0,0.0304],[0,0.2477],[0,0.40765],[0,0.676416802894],[0.08974134,0.50865],[0.14887308,1.030120354152],[0.535837555,0.9431011461550001]]]]

Actual:   [[[[0, 0.2646], [0, 0.1267], [0, 0.0137], [0, 0.0795], [0, 0.3019], [0, 0.0125], [0.263, 0.3591]], [[0, 0.3592], [0, 0.334], [0, 0.4709], [0, 0.1798], [0, 0.3988], [0, 0.1454], [0.8957, 0.1145]], [[0, 0.1648], [0, 0.1508], [0, 0.305], [0, 0.3035], [0, 0.4261], [0, 0.097], [0.0887, 0.2657]], [[0, 0.2271], [0, 0.2405], [0, 0.0522], [0, 0.6607], [0, 0.6444], [0, 0.9633], [0.1685, 0.4021]], [[0, 0.0815], [0, 0.2002], [0, 0.049], [0, 0.6941], [0, 0.345], [0, 0.6424], [0.2797, 1.095]], [[0, 0.3738], [0, 0.1626], [0, 0.0267], [0, 0.6016], [0, 0.8306], [0, 0.8049], [0.1482, 0.516]], [[0, 0.0697], [0, 0.4059], [0, 0.3412], [0, 0.3984], [0.7152, 0.4195], [1.0232, 0.4536], [1.4396, 0.651]], [[0, 0.0304], [0, 0.2477], [0, 0.4077], [0, 0.6765], [0.0898, 0.5087], [0.1489, 1.0302], [0.5359, 0.9432]]]]

Expected: [[[[0, 0.2646], [0, 0.1267], [0, 0.0137], [0, 0.0795], [0, 0.3019], [0, 0.0125], [0.263, 0.3591]], [[0, 0.3592], [0, 0.334], [0, 0.4709], [0, 0.1798], [0, 0.3988], [0, 0.1454], [0.8957, 0.1145]], [[0, 0.1648], [0, 0.1508], [0, 0.305], [0, 0.3035], [0, 0.4261], [0, 0.097], [0.0887, 0.2657]], [[0, 0.2271], [0, 0.2405], [0, 0.0522], [0, 0.6607], [0, 0.6445], [0, 0.9633], [0.1685, 0.4021]], [[0, 0.0815], [0, 0.2002], [0, 0.049], [0, 0.6941], [0, 0.345], [0, 0.6424], [0.2797, 1.095]], [[0, 0.3738], [0, 0.1626], [0, 0.0267], [0, 0.6016], [0, 0.8306], [0, 0.8049], [0.1482, 0.516]], [[0, 0.0697], [0, 0.4059], [0, 0.3412], [0, 0.3984], [0.7152, 0.4196], [1.0232, 0.4536], [1.4396, 0.651]], [[0, 0.0304], [0, 0.2477], [0, 0.4077], [0, 0.6765], [0.0898, 0.5087], [0.1489, 1.0302], [0.5359, 0.9432]]]]