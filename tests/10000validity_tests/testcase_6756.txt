import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add24773 = tf.keras.layers.Input(shape=([2, 1]))
in1Add24773 = tf.keras.layers.Input(shape=([2, 1]))
in0Con11634 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Add27254 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Add27254 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))

Add24773 = keras.layers.Add(name = 'Add24773', )([in0Add24773,in1Add24773])
Max85902 = keras.layers.MaxPool1D(pool_size=(1), name = 'Max85902', )(Add24773)
Sep72491 = keras.layers.SeparableConv1D(2, (1),strides=(1), padding='same', name = 'Sep72491', )(Max85902)
Res98195 = keras.layers.Reshape((2, 2, 1), name = 'Res98195', )(Sep72491)
Res42986 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res42986', )(Res98195)
Zer92639 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (1, 0)), name = 'Zer92639', )(Res42986)
Con11634 = keras.layers.Concatenate(axis=4, name = 'Con11634', )([Zer92639,in0Con11634])
Add27254 = keras.layers.Add(name = 'Add27254', )([in0Add27254,in1Add27254])
Max22347 = keras.layers.Maximum(name = 'Max22347', )([Con11634,Add27254])
model = tf.keras.models.Model(inputs=[in0Add24773,in1Add24773,in0Con11634,in0Add27254,in1Add27254], outputs=Max22347)
w = model.get_layer('Sep72491').get_weights() 
w[0] = np.array([[[0.6588]]])
w[1] = np.array([[[0.5025, 0.5089]]])
w[2] = np.array([0, 0])
model.get_layer('Sep72491').set_weights(w) 
in0Add24773 = tf.constant([[[0.2059], [0.557]]])
in1Add24773 = tf.constant([[[0.8559], [0.0304]]])
in0Con11634 = tf.constant([[[[[0.4428], [0.2057]], [[0.1563], [0.182]]], [[[0.7782], [0.4935]], [[0.1161], [0.7062]]]]])
in0Add27254 = tf.constant([[[[[0.6518, 0.7996], [0.1087, 0.7599]], [[0.2062, 0.5442], [0.3523, 0.8541]]], [[[0.4671, 0.8781], [0.3318, 0.8381]], [[0.5329, 0.9656], [0.0104, 0.6451]]]]])
in1Add27254 = tf.constant([[[[[0.971, 0.6187], [0.5525, 0.8761]], [[0.3709, 0.6123], [0.8934, 0.6797]]], [[[0.3697, 0.6508], [0.9148, 0.6144]], [[0.844, 0.4029], [0.7618, 0.1885]]]]])
print (np.array2string(model.predict([in0Add24773,in1Add24773,in0Con11634,in0Add27254,in1Add27254],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max22347.png')

LAdd24773 = add_layer([[[[0.2059], [0.557]]], [[[0.8559], [0.0304]]]], Add24773), 
LMax85902 = max_pool1D_layer(Add24773, 1, Max85902), 
LSep72491 = separable_conv1D_layer(Max85902, 1,[[[[0.6588]]],[[[0.5025, 0.5089]]]],[0, 0], 1, true, Sep72491), 
LRes98195 = reshape_layer(Sep72491, [2, 2, 1], Res98195), 
LRes42986 = reshape_layer(Res98195, [2, 2, 1, 1], Res42986), 
LZer92639 = zero_padding3D_layer(Res42986, 0, 0, 0, 0, 1, 0, Zer92639), 
LCon11634 = concatenate_layer([Zer92639,[[[[[0.4428], [0.2057]], [[0.1563], [0.182]]], [[[0.7782], [0.4935]], [[0.1161], [0.7062]]]]]], 4, Con11634), 
LAdd27254 = add_layer([[[[[[0.6518, 0.7996], [0.1087, 0.7599]], [[0.2062, 0.5442], [0.3523, 0.8541]]], [[[0.4671, 0.8781], [0.3318, 0.8381]], [[0.5329, 0.9656], [0.0104, 0.6451]]]]], [[[[[0.971, 0.6187], [0.5525, 0.8761]], [[0.3709, 0.6123], [0.8934, 0.6797]]], [[[0.3697, 0.6508], [0.9148, 0.6144]], [[0.844, 0.4029], [0.7618, 0.1885]]]]]], Add27254), 
LMax22347 = maximum_layer([Con11634,Add27254], Max22347), 
exec_layers([LAdd24773,LMax85902,LSep72491,LRes98195,LRes42986,LZer92639,LCon11634,LAdd27254,LMax22347],["Add24773","Max85902","Sep72491","Res98195","Res42986","Zer92639","Con11634","Add27254","Max22347"],Max22347,"Max22347")

Actual (Unparsed): [[[[[1.6228000, 1.4183000], [0.6612000, 1.6360000]], [[0.5771000, 1.1565000], [1.2457000, 1.5338000]]], [[[0.8368000, 1.5289000], [1.2466000, 1.4525000]], [[1.3769000, 1.3685000], [0.7722000, 0.8336000]]]]]

Expected (Unparsed): [[[[[1.6228,1.4183],[0.6612,1.6360000000000001]],[[0.5771,1.1564999999999999],[1.2457,1.5337999999999998]]],[[[0.8368,1.5289000000000001],[1.2466,1.4525]],[[1.3769,1.3685],[0.7722,0.8336]]]]]

Actual:   [[[[[1.6228, 1.4183], [0.6612, 1.636]], [[0.5771, 1.1565], [1.2457, 1.5338]]], [[[0.8368, 1.5289], [1.2466, 1.4525]], [[1.3769, 1.3685], [0.7722, 0.8336]]]]]

Expected: [[[[[1.6228, 1.4183], [0.6612, 1.6361]], [[0.5771, 1.1565], [1.2457, 1.5338]]], [[[0.8368, 1.529], [1.2466, 1.4525]], [[1.3769, 1.3685], [0.7722, 0.8336]]]]]