import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add77564 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Add77564 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con71033 = tf.keras.layers.Input(shape=([2, 2]))
in0Ave6365 = tf.keras.layers.Input(shape=([1, 2, 2]))
in1Ave6365 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Lay10509 = tf.keras.layers.Input(shape=([2, 3, 3]))
in0Con23171 = tf.keras.layers.Input(shape=([2, 1]))
in0Max25203 = tf.keras.layers.Input(shape=([2, 2]))
in1Max25203 = tf.keras.layers.Input(shape=([2, 2]))
in0Con5351 = tf.keras.layers.Input(shape=([2, 1]))

Add77564 = keras.layers.Add(name = 'Add77564', )([in0Add77564,in1Add77564])
Up_80273 = keras.layers.UpSampling2D(size=(2, 1), name = 'Up_80273', )(Add77564)
Fla56231 = keras.layers.Flatten(name = 'Fla56231', )(Up_80273)
Res76719 = keras.layers.Reshape((2, 1), name = 'Res76719', )(Fla56231)
Con71033 = keras.layers.Concatenate(axis=2, name = 'Con71033', )([Res76719,in0Con71033])
Ave6365 = keras.layers.Average(name = 'Ave6365', )([in0Ave6365,in1Ave6365])
Res67256 = keras.layers.Reshape((1, 4), name = 'Res67256', )(Ave6365)
Loc81954 = keras.layers.LocallyConnected1D(3, (1),strides=(1), name = 'Loc81954', )(Res67256)
Zer86573 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer86573', )(Loc81954)
Lay10509 = keras.layers.LayerNormalization(axis=1, epsilon=2.3506882747680784, name = 'Lay10509', )(in0Lay10509)
Res99298 = keras.layers.Reshape((2, 3, 3, 1), name = 'Res99298', )(Lay10509)
Glo96901 = keras.layers.GlobalMaxPool3D(name = 'Glo96901', )(Res99298)
Res76219 = keras.layers.Reshape((1, 1), name = 'Res76219', )(Glo96901)
Zer14259 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer14259', )(Res76219)
Con23171 = keras.layers.Concatenate(axis=2, name = 'Con23171', )([Zer14259,in0Con23171])
Max25203 = keras.layers.Maximum(name = 'Max25203', )([in0Max25203,in1Max25203])
Ave47289 = keras.layers.Average(name = 'Ave47289', )([Con23171,Max25203])
Con5351 = keras.layers.Concatenate(axis=2, name = 'Con5351', )([Ave47289,in0Con5351])
Mul2150 = keras.layers.Multiply(name = 'Mul2150', )([Zer86573,Con5351])
Add85582 = keras.layers.Add(name = 'Add85582', )([Con71033,Mul2150])
model = tf.keras.models.Model(inputs=[in0Add77564,in1Add77564,in0Con71033,in0Ave6365,in1Ave6365,in0Lay10509,in0Con23171,in0Max25203,in1Max25203,in0Con5351], outputs=Add85582)
w = model.get_layer('Loc81954').get_weights() 
w[0] = np.array([[[0.1885, 0.486, 0.1345], [0.4126, 0.8232, 0.5286], [0.9337, 0.954, 0.4834], [0.7098, 0.5473, 0.4313]]])
w[1] = np.array([[0, 0, 0]])
model.get_layer('Loc81954').set_weights(w) 
in0Add77564 = tf.constant([[[[0.9756]]]])
in1Add77564 = tf.constant([[[[0.4718]]]])
in0Con71033 = tf.constant([[[0.8821, 0.6309], [0.4304, 0.3022]]])
in0Ave6365 = tf.constant([[[[0.6015, 0.9666], [0.7045, 0.5194]]]])
in1Ave6365 = tf.constant([[[[0.4754, 0.0585], [0.2744, 0.0156]]]])
in0Lay10509 = tf.constant([[[[1.5595, 1.224, 1.1708], [1.7035, 1.4834, 1.7747], [1.2879, 1.73, 1.8972]], [[1.7476, 1.2149, 1.2543], [1.0663, 1.4377, 1.4566], [1.8798, 1.9659, 1.1527]]]])
in0Con23171 = tf.constant([[[0.2706], [0.1883]]])
in0Max25203 = tf.constant([[[0.8418, 0.8796], [0.5523, 0.9647]]])
in1Max25203 = tf.constant([[[0.3878, 0.0216], [0.8593, 0.1425]]])
in0Con5351 = tf.constant([[[0.0729], [0.7126]]])
print (np.array2string(model.predict([in0Add77564,in1Add77564,in0Con71033,in0Ave6365,in1Ave6365,in0Lay10509,in0Con23171,in0Max25203,in1Max25203,in0Con5351],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add85582.png')

LAdd77564 = add_layer([[[[[0.9756]]]], [[[[0.4718]]]]], Add77564), 
LUp_80273 = up_sampling2D_layer(Add77564, 2, 1, Up_80273), 
LFla56231 = flatten_layer(Up_80273, Fla56231), 
LRes76719 = reshape_layer(Fla56231, [2, 1], Res76719), 
LCon71033 = concatenate_layer([Res76719,[[[0.8821, 0.6309], [0.4304, 0.3022]]]], 2, Con71033), 
LAve6365 = average_layer([[[[[0.6015, 0.9666], [0.7045, 0.5194]]]], [[[[0.4754, 0.0585], [0.2744, 0.0156]]]]], Ave6365), 
LRes67256 = reshape_layer(Ave6365, [1, 4], Res67256), 
LLoc81954 = locally_connected1D_layer(Res67256, 1,[[[0.1885, 0.486, 0.1345], [0.4126, 0.8232, 0.5286], [0.9337, 0.954, 0.4834], [0.7098, 0.5473, 0.4313]]],[[0, 0, 0]], 1, Loc81954), 
LZer86573 = zero_padding1D_layer(Loc81954, 1, 0, Zer86573), 
LLay10509 = layer_normalization_layer([[[[1.5595, 1.224, 1.1708], [1.7035, 1.4834, 1.7747], [1.2879, 1.73, 1.8972]], [[1.7476, 1.2149, 1.2543], [1.0663, 1.4377, 1.4566], [1.8798, 1.9659, 1.1527]]]], 1, 2.3506882747680784, Lay10509), 
LRes99298 = reshape_layer(Lay10509, [2, 3, 3, 1], Res99298), 
LGlo96901 = global_max_pool3D_layer(Res99298, Glo96901), 
LRes76219 = reshape_layer(Glo96901, [1, 1], Res76219), 
LZer14259 = zero_padding1D_layer(Res76219, 1, 0, Zer14259), 
LCon23171 = concatenate_layer([Zer14259,[[[0.2706], [0.1883]]]], 2, Con23171), 
LMax25203 = maximum_layer([[[[0.8418, 0.8796], [0.5523, 0.9647]]], [[[0.3878, 0.0216], [0.8593, 0.1425]]]], Max25203), 
LAve47289 = average_layer([Con23171,Max25203], Ave47289), 
LCon5351 = concatenate_layer([Ave47289,[[[0.0729], [0.7126]]]], 2, Con5351), 
LMul2150 = multiply_layer([Zer86573,Con5351], Mul2150), 
LAdd85582 = add_layer([Con71033,Mul2150], Add85582), 
exec_layers([LAdd77564,LUp_80273,LFla56231,LRes76719,LCon71033,LAve6365,LRes67256,LLoc81954,LZer86573,LLay10509,LRes99298,LGlo96901,LRes76219,LZer14259,LCon23171,LMax25203,LAve47289,LCon5351,LMul2150,LAdd85582],["Add77564","Up_80273","Fla56231","Res76719","Con71033","Ave6365","Res67256","Loc81954","Zer86573","Lay10509","Res99298","Glo96901","Res76219","Zer14259","Con23171","Max25203","Ave47289","Con5351","Mul2150","Add85582"],Add85582,"Add85582")

Actual (Unparsed): [[[1.4474000, 0.8821000, 0.6309000], [1.9730309, 1.1780951, 0.7976910]]]

Expected (Unparsed): [[[1.4474,0.8821,0.6309],[1.973030886979414,1.178095082115,0.7976909715210001]]]

Actual:   [[[1.4474, 0.8821, 0.6309], [1.9731, 1.1781, 0.7977]]]

Expected: [[[1.4474, 0.8821, 0.6309], [1.9731, 1.1781, 0.7977]]]