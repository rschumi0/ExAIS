import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min14890 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in1Min14890 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Con49059 = tf.keras.layers.Input(shape=([8, 2]))
in0Den91209 = tf.keras.layers.Input(shape=([3, 3]))
in0Min92113 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Min92113 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Min37335 = tf.keras.layers.Input(shape=([2, 2]))
in1Min37335 = tf.keras.layers.Input(shape=([2, 2]))
in0Con81706 = tf.keras.layers.Input(shape=([8, 1]))

Min14890 = keras.layers.Minimum(name = 'Min14890', )([in0Min14890,in1Min14890])
Fla19121 = keras.layers.Flatten(name = 'Fla19121', )(Min14890)
Res80960 = keras.layers.Reshape((8, 1), name = 'Res80960', )(Fla19121)
Con49059 = keras.layers.Concatenate(axis=2, name = 'Con49059', )([Res80960,in0Con49059])
Den91209 = keras.layers.Dense(3,name = 'Den91209', )(in0Den91209)
Zer20150 = keras.layers.ZeroPadding1D(padding=((5, 0)), name = 'Zer20150', )(Den91209)
Add26046 = keras.layers.Add(name = 'Add26046', )([Con49059,Zer20150])
Min92113 = keras.layers.Minimum(name = 'Min92113', )([in0Min92113,in1Min92113])
Res18462 = keras.layers.Reshape((2, 2), name = 'Res18462', )(Min92113)
Min37335 = keras.layers.Minimum(name = 'Min37335', )([in0Min37335,in1Min37335])
Max3114 = keras.layers.Maximum(name = 'Max3114', )([Res18462,Min37335])
Zer51056 = keras.layers.ZeroPadding1D(padding=((6, 0)), name = 'Zer51056', )(Max3114)
Con81706 = keras.layers.Concatenate(axis=2, name = 'Con81706', )([Zer51056,in0Con81706])
Add69532 = keras.layers.Add(name = 'Add69532', )([Add26046,Con81706])
model = tf.keras.models.Model(inputs=[in0Min14890,in1Min14890,in0Con49059,in0Den91209,in0Min92113,in1Min92113,in0Min37335,in1Min37335,in0Con81706], outputs=Add69532)
w = model.get_layer('Den91209').get_weights() 
w[0] = np.array([[0.632, 0.6069, 0.5535], [0.3989, 0.9483, 0.2352], [0.0277, 0.1888, 0.213]])
w[1] = np.array([0.6031, 0.1964, 0.6587])
model.get_layer('Den91209').set_weights(w) 
in0Min14890 = tf.constant([[[[[0.9798], [0.4664]], [[0.496], [0.318]]], [[[0.0135], [0.3746]], [[0.0758], [0.9471]]]]])
in1Min14890 = tf.constant([[[[[0.0406], [0.5485]], [[0.5134], [0.9686]]], [[[0.9823], [0.0125]], [[0.7505], [0.9525]]]]])
in0Con49059 = tf.constant([[[0.9654, 0.0411], [0.4986, 0.0649], [0.0752, 0.0602], [0.0087, 0.2672], [0.3177, 0.1624], [0.4707, 0.6645], [0.4284, 0.4166], [0.9456, 0.8342]]])
in0Den91209 = tf.constant([[[0.9232, 0.5997, 0.1522], [0.0796, 0.6549, 0.1753], [0.2983, 0.4585, 0.1331]]])
in0Min92113 = tf.constant([[[[0.1643], [0.058]], [[0.8966], [0.423]]]])
in1Min92113 = tf.constant([[[[0.1077], [0.5107]], [[0.9198], [0.3803]]]])
in0Min37335 = tf.constant([[[0.1197, 0.4634], [0.1252, 0.2672]]])
in1Min37335 = tf.constant([[[0.7995, 0.2867], [0.2734, 0.7421]]])
in0Con81706 = tf.constant([[[0.2226], [0.8832], [0.8167], [0.3611], [0.9245], [0.8232], [0.083], [0.6767]]])
print (np.array2string(model.predict([in0Min14890,in1Min14890,in0Con49059,in0Den91209,in0Min92113,in1Min92113,in0Min37335,in1Min37335,in0Con81706],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add69532.png')

LMin14890 = minimum_layer([[[[[[0.9798], [0.4664]], [[0.496], [0.318]]], [[[0.0135], [0.3746]], [[0.0758], [0.9471]]]]], [[[[[0.0406], [0.5485]], [[0.5134], [0.9686]]], [[[0.9823], [0.0125]], [[0.7505], [0.9525]]]]]], Min14890), 
LFla19121 = flatten_layer(Min14890, Fla19121), 
LRes80960 = reshape_layer(Fla19121, [8, 1], Res80960), 
LCon49059 = concatenate_layer([Res80960,[[[0.9654, 0.0411], [0.4986, 0.0649], [0.0752, 0.0602], [0.0087, 0.2672], [0.3177, 0.1624], [0.4707, 0.6645], [0.4284, 0.4166], [0.9456, 0.8342]]]], 2, Con49059), 
LDen91209 = dense_layer([[[0.9232, 0.5997, 0.1522], [0.0796, 0.6549, 0.1753], [0.2983, 0.4585, 0.1331]]], [[0.632, 0.6069, 0.5535], [0.3989, 0.9483, 0.2352], [0.0277, 0.1888, 0.213]],[0.6031, 0.1964, 0.6587], Den91209), 
LZer20150 = zero_padding1D_layer(Den91209, 5, 0, Zer20150), 
LAdd26046 = add_layer([Con49059,Zer20150], Add26046), 
LMin92113 = minimum_layer([[[[[0.1643], [0.058]], [[0.8966], [0.423]]]], [[[[0.1077], [0.5107]], [[0.9198], [0.3803]]]]], Min92113), 
LRes18462 = reshape_layer(Min92113, [2, 2], Res18462), 
LMin37335 = minimum_layer([[[[0.1197, 0.4634], [0.1252, 0.2672]]], [[[0.7995, 0.2867], [0.2734, 0.7421]]]], Min37335), 
LMax3114 = maximum_layer([Res18462,Min37335], Max3114), 
LZer51056 = zero_padding1D_layer(Max3114, 6, 0, Zer51056), 
LCon81706 = concatenate_layer([Zer51056,[[[0.2226], [0.8832], [0.8167], [0.3611], [0.9245], [0.8232], [0.083], [0.6767]]]], 2, Con81706), 
LAdd69532 = add_layer([Add26046,Con81706], Add69532), 
exec_layers([LMin14890,LFla19121,LRes80960,LCon49059,LDen91209,LZer20150,LAdd26046,LMin92113,LRes18462,LMin37335,LMax3114,LZer51056,LCon81706,LAdd69532],["Min14890","Fla19121","Res80960","Con49059","Den91209","Zer20150","Add26046","Min92113","Res18462","Min37335","Max3114","Zer51056","Con81706","Add69532"],Add69532,"Add69532")

Actual (Unparsed): [[[0.0406000, 0.9654000, 0.2637000], [0.4664000, 0.4986000, 0.9481000], [0.4960000, 0.0752000, 0.8769000], [0.3180000, 0.0087000, 0.6283000], [0.0135000, 0.3177000, 1.0869000], [1.4424987, 1.8248209, 2.8308592], [1.1150026, 1.6139476, 1.3937300], [2.8219081, 2.1632631, 2.4708986]]]

Expected (Unparsed): [[[0.0406,0.9654,0.2637],[0.4664,0.4986,0.9480999999999999],[0.496,0.0752,0.8769],[0.318,0.0087,0.6283],[0.0135,0.3177,1.0869],[1.44249867,1.8248209500000003,2.8308592399999997],[1.11500262,1.61394755,1.3937299799999998],[2.82190812,2.1632631,2.47089855]]]

Actual:   [[[0.0406, 0.9654, 0.2637], [0.4664, 0.4986, 0.9481], [0.496, 0.0752, 0.8769], [0.318, 0.0087, 0.6283], [0.0135, 0.3177, 1.0869], [1.4425, 1.8249, 2.8309], [1.1151, 1.614, 1.3938], [2.822, 2.1633, 2.4709]]]

Expected: [[[0.0406, 0.9654, 0.2637], [0.4664, 0.4986, 0.9481], [0.496, 0.0752, 0.8769], [0.318, 0.0087, 0.6283], [0.0135, 0.3177, 1.0869], [1.4425, 1.8249, 2.8309], [1.1151, 1.614, 1.3938], [2.822, 2.1633, 2.4709]]]