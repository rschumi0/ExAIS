import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Fla36957 = tf.keras.layers.Input(shape=([2, 3, 2]))
in0Min28317 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))
in1Min28317 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))
in0Con33492 = tf.keras.layers.Input(shape=([10]))
in0Max91157 = tf.keras.layers.Input(shape=([2, 2]))
in1Max91157 = tf.keras.layers.Input(shape=([2, 2]))
in0Con71401 = tf.keras.layers.Input(shape=([9, 2]))

Fla36957 = keras.layers.Flatten(name = 'Fla36957', )(in0Fla36957)
Res87546 = keras.layers.Reshape((12, 1), name = 'Res87546', )(Fla36957)
Zer70727 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer70727', )(Res87546)
Fla83961 = keras.layers.Flatten(name = 'Fla83961', )(Zer70727)
Min28317 = keras.layers.Minimum(name = 'Min28317', )([in0Min28317,in1Min28317])
Res13723 = keras.layers.Reshape((1, 1, 4), name = 'Res13723', )(Min28317)
Res33227 = keras.layers.Reshape((1, 4), name = 'Res33227', )(Res13723)
Glo89174 = keras.layers.GlobalMaxPool1D(name = 'Glo89174', )(Res33227)
Con33492 = keras.layers.Concatenate(axis=1, name = 'Con33492', )([Glo89174,in0Con33492])
Add44970 = keras.layers.Add(name = 'Add44970', )([Fla83961,Con33492])
Res64388 = keras.layers.Reshape((14, 1), name = 'Res64388', )(Add44970)
Loc86306 = keras.layers.LocallyConnected1D(4, (6),strides=(1), name = 'Loc86306', )(Res64388)
Max91157 = keras.layers.Maximum(name = 'Max91157', )([in0Max91157,in1Max91157])
Thr37749 = keras.layers.ThresholdedReLU(theta=3.2442547753950643, name = 'Thr37749', )(Max91157)
Zer66331 = keras.layers.ZeroPadding1D(padding=((7, 0)), name = 'Zer66331', )(Thr37749)
Con71401 = keras.layers.Concatenate(axis=2, name = 'Con71401', )([Zer66331,in0Con71401])
Mul3831 = keras.layers.Multiply(name = 'Mul3831', )([Loc86306,Con71401])
model = tf.keras.models.Model(inputs=[in0Fla36957,in0Min28317,in1Min28317,in0Con33492,in0Max91157,in1Max91157,in0Con71401], outputs=Mul3831)
w = model.get_layer('Loc86306').get_weights() 
w[0] = np.array([[[0.7392, 0.2264, 0.2268, 0.4025], [0.2802, 0.8438, 0.8522, 0.6038], [0.8336, 0.1201, 0.7601, 0.7513], [0.2167, 0.9393, 0.9519, 0.9551], [0.5045, 0.9071, 0.4849, 0.4771], [0.5154, 0.4845, 0.8726, 0.907]], [[0.5963, 0.9765, 0.9123, 0.7455], [0.3093, 0.428, 0.2087, 0.474], [0.4639, 0.8563, 0.6421, 0.334], [0.3018, 0.4063, 0.0339, 0.4619], [0.5454, 0.9536, 0.3066, 0.7275], [0.4486, 0.3992, 0.5053, 0.612]], [[0.951, 0.401, 0.1479, 0.7263], [0.5322, 0.5713, 0.5098, 0.1185], [0.3835, 0.229, 0.6089, 0.3504], [0.0717, 0.6447, 0.8566, 0.4292], [0.9593, 0.3386, 0.5665, 0.0769], [0.2574, 0.4019, 0.7708, 0.4895]], [[0.7437, 0.9969, 0.086, 0.6931], [0.8539, 0.1665, 0.6902, 0.8402], [0.0686, 0.8272, 0.8248, 0.3039], [0.2615, 0.3593, 0.6215, 0.229], [0.9478, 0.5172, 0.4657, 0.2747], [0.1775, 0.4768, 0.5575, 0.6456]], [[0.1573, 0.718, 0.8073, 0.1492], [0.5492, 0.0904, 0.711, 0.9411], [0.797, 0.8557, 0.3922, 0.8229], [0.7604, 0.7144, 0.5681, 0.4418], [0.399, 0.8293, 0.7991, 0.5114], [0.2415, 0.639, 0.0157, 0.2165]], [[0.9002, 0.8166, 0.9812, 0.2961], [0.9458, 0.0776, 0.0463, 0.9097], [0.0452, 0.6616, 0.2765, 0.2827], [0.3829, 0.2248, 0.795, 0.2982], [0.0356, 0.5653, 0.9715, 0.6597], [0.1509, 0.0737, 0.911, 0.9829]], [[0.4925, 0.0537, 0.5453, 0.1891], [0.158, 0.0888, 0.5196, 0.8762], [0.0485, 0.4435, 0.9744, 0.9164], [0.9766, 0.0844, 0.277, 0.3937], [0.1353, 0.2811, 0.7264, 0.1351], [0.0187, 0.9038, 0.2722, 0.5115]], [[0.784, 0.4749, 0.3211, 0.8895], [0.4771, 0.7483, 0.7805, 0.0993], [0.5034, 0.0951, 0.5896, 0.5523], [0.2209, 0.2532, 0.1215, 0.1883], [0.5545, 0.0632, 0.0075, 0.2614], [0.0893, 0.6589, 0.1263, 0.0858]], [[0.185, 0.2036, 0.7345, 0.2515], [0.2723, 0.6743, 0.9678, 0.4953], [0.643, 0.3808, 0.2364, 0.3651], [0.7231, 0.88, 0.3574, 0.052], [0.0344, 0.6933, 0.6199, 0.279], [0.7896, 0.7697, 0.3625, 0.9363]]])
w[1] = np.array([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])
model.get_layer('Loc86306').set_weights(w) 
in0Fla36957 = tf.constant([[[[1.5721, 1.5086], [1.3686, 1.5246], [1.1414, 1.0849]], [[1.1807, 1.7249], [1.58, 1.664], [1.6483, 1.7897]]]])
in0Min28317 = tf.constant([[[[[0.022, 0.6399], [0.1524, 0.0736]]]]])
in1Min28317 = tf.constant([[[[[0.9682, 0.6126], [0.4152, 0.7497]]]]])
in0Con33492 = tf.constant([[0.5828, 0.5521, 0.0986, 0.1226, 0.3334, 0.1138, 0.12, 0.5167, 0.2112, 0.8797]])
in0Max91157 = tf.constant([[[0.0472, 0.544], [0.2749, 0.942]]])
in1Max91157 = tf.constant([[[0.4733, 0.8227], [0.1888, 0.3002]]])
in0Con71401 = tf.constant([[[0.0056, 0.8626], [0.0298, 0.1481], [0.8539, 0.1265], [0.5208, 0.9391], [0.103, 0.2022], [0.8299, 0.1313], [0.2664, 0.6744], [0.6991, 0.9045], [0.5306, 0.0478]]])
print (np.array2string(model.predict([in0Fla36957,in0Min28317,in1Min28317,in0Con33492,in0Max91157,in1Max91157,in0Con71401],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul3831.png')

LFla36957 = flatten_layer([[[[1.5721, 1.5086], [1.3686, 1.5246], [1.1414, 1.0849]], [[1.1807, 1.7249], [1.58, 1.664], [1.6483, 1.7897]]]], Fla36957), 
LRes87546 = reshape_layer(Fla36957, [12, 1], Res87546), 
LZer70727 = zero_padding1D_layer(Res87546, 1, 1, Zer70727), 
LFla83961 = flatten_layer(Zer70727, Fla83961), 
LMin28317 = minimum_layer([[[[[[0.022, 0.6399], [0.1524, 0.0736]]]]], [[[[[0.9682, 0.6126], [0.4152, 0.7497]]]]]], Min28317), 
LRes13723 = reshape_layer(Min28317, [1, 1, 4], Res13723), 
LRes33227 = reshape_layer(Res13723, [1, 4], Res33227), 
LGlo89174 = global_max_pool1D_layer(Res33227, Glo89174), 
LCon33492 = concatenate_layer([Glo89174,[[0.5828, 0.5521, 0.0986, 0.1226, 0.3334, 0.1138, 0.12, 0.5167, 0.2112, 0.8797]]], 1, Con33492), 
LAdd44970 = add_layer([Fla83961,Con33492], Add44970), 
LRes64388 = reshape_layer(Add44970, [14, 1], Res64388), 
LLoc86306 = locally_connected1D_layer(Res64388, 6,[[[0.7392, 0.2264, 0.2268, 0.4025], [0.2802, 0.8438, 0.8522, 0.6038], [0.8336, 0.1201, 0.7601, 0.7513], [0.2167, 0.9393, 0.9519, 0.9551], [0.5045, 0.9071, 0.4849, 0.4771], [0.5154, 0.4845, 0.8726, 0.907]], [[0.5963, 0.9765, 0.9123, 0.7455], [0.3093, 0.428, 0.2087, 0.474], [0.4639, 0.8563, 0.6421, 0.334], [0.3018, 0.4063, 0.0339, 0.4619], [0.5454, 0.9536, 0.3066, 0.7275], [0.4486, 0.3992, 0.5053, 0.612]], [[0.951, 0.401, 0.1479, 0.7263], [0.5322, 0.5713, 0.5098, 0.1185], [0.3835, 0.229, 0.6089, 0.3504], [0.0717, 0.6447, 0.8566, 0.4292], [0.9593, 0.3386, 0.5665, 0.0769], [0.2574, 0.4019, 0.7708, 0.4895]], [[0.7437, 0.9969, 0.086, 0.6931], [0.8539, 0.1665, 0.6902, 0.8402], [0.0686, 0.8272, 0.8248, 0.3039], [0.2615, 0.3593, 0.6215, 0.229], [0.9478, 0.5172, 0.4657, 0.2747], [0.1775, 0.4768, 0.5575, 0.6456]], [[0.1573, 0.718, 0.8073, 0.1492], [0.5492, 0.0904, 0.711, 0.9411], [0.797, 0.8557, 0.3922, 0.8229], [0.7604, 0.7144, 0.5681, 0.4418], [0.399, 0.8293, 0.7991, 0.5114], [0.2415, 0.639, 0.0157, 0.2165]], [[0.9002, 0.8166, 0.9812, 0.2961], [0.9458, 0.0776, 0.0463, 0.9097], [0.0452, 0.6616, 0.2765, 0.2827], [0.3829, 0.2248, 0.795, 0.2982], [0.0356, 0.5653, 0.9715, 0.6597], [0.1509, 0.0737, 0.911, 0.9829]], [[0.4925, 0.0537, 0.5453, 0.1891], [0.158, 0.0888, 0.5196, 0.8762], [0.0485, 0.4435, 0.9744, 0.9164], [0.9766, 0.0844, 0.277, 0.3937], [0.1353, 0.2811, 0.7264, 0.1351], [0.0187, 0.9038, 0.2722, 0.5115]], [[0.784, 0.4749, 0.3211, 0.8895], [0.4771, 0.7483, 0.7805, 0.0993], [0.5034, 0.0951, 0.5896, 0.5523], [0.2209, 0.2532, 0.1215, 0.1883], [0.5545, 0.0632, 0.0075, 0.2614], [0.0893, 0.6589, 0.1263, 0.0858]], [[0.185, 0.2036, 0.7345, 0.2515], [0.2723, 0.6743, 0.9678, 0.4953], [0.643, 0.3808, 0.2364, 0.3651], [0.7231, 0.88, 0.3574, 0.052], [0.0344, 0.6933, 0.6199, 0.279], [0.7896, 0.7697, 0.3625, 0.9363]]],[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 1, Loc86306), 
LMax91157 = maximum_layer([[[[0.0472, 0.544], [0.2749, 0.942]]], [[[0.4733, 0.8227], [0.1888, 0.3002]]]], Max91157), 
LThr37749 = thresholded_relu_layer(Max91157, 3.2442547753950643, Thr37749), 
LZer66331 = zero_padding1D_layer(Thr37749, 7, 0, Zer66331), 
LCon71401 = concatenate_layer([Zer66331,[[[0.0056, 0.8626], [0.0298, 0.1481], [0.8539, 0.1265], [0.5208, 0.9391], [0.103, 0.2022], [0.8299, 0.1313], [0.2664, 0.6744], [0.6991, 0.9045], [0.5306, 0.0478]]]], 2, Con71401), 
LMul3831 = multiply_layer([Loc86306,Con71401], Mul3831), 
exec_layers([LFla36957,LRes87546,LZer70727,LFla83961,LMin28317,LRes13723,LRes33227,LGlo89174,LCon33492,LAdd44970,LRes64388,LLoc86306,LMax91157,LThr37749,LZer66331,LCon71401,LMul3831],["Fla36957","Res87546","Zer70727","Fla83961","Min28317","Res13723","Res33227","Glo89174","Con33492","Add44970","Res64388","Loc86306","Max91157","Thr37749","Zer66331","Con71401","Mul3831"],Mul3831,"Mul3831")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0392099, 5.6023944], [0.0000000, 0.0000000, 0.1327435, 0.8630430], [0.0000000, 0.0000000, 4.6023330, 0.4518004], [0.0000000, 0.0000000, 2.8463541, 4.9234737], [0.0000000, 0.0000000, 0.5954776, 0.9861697], [0.0000000, 0.0000000, 5.7959553, 0.7131162], [0.0000000, 0.0000000, 1.5138335, 3.5522281], [0.0000000, 0.0000000, 2.4533968, 3.0506033], [0.0000000, 0.0000000, 3.1336382, 0.1674164]]]

Expected (Unparsed): [[[0.0,0.0,0.039209932048,5.6023941398920005],[0.0,0.0,0.132743493272,0.8630429694760001],[0.0,0.0,4.602332979759,0.45180039949],[0.0,0.0,2.846354170632,4.9234735119040005],[0.0,0.0,0.5954776224200001,0.986169706548],[0.0,0.0,5.79595512501,0.713116130649],[0.0,0.0,1.5138334378800002,3.552228267816],[0.0,0.0,2.453396673013,3.0506032606499995],[0.0,0.0,3.1336380407499997,0.16741635476]]]

Actual:   [[[0, 0, 0.0393, 5.6024], [0, 0, 0.1328, 0.8631], [0, 0, 4.6024, 0.4519], [0, 0, 2.8464, 4.9235], [0, 0, 0.5955, 0.9862], [0, 0, 5.796, 0.7132], [0, 0, 1.5139, 3.5523], [0, 0, 2.4534, 3.0507], [0, 0, 3.1337, 0.1675]]]

Expected: [[[0, 0, 0.0393, 5.6024], [0, 0, 0.1328, 0.8631], [0, 0, 4.6024, 0.4519], [0, 0, 2.8464, 4.9235], [0, 0, 0.5955, 0.9862], [0, 0, 5.796, 0.7132], [0, 0, 1.5139, 3.5523], [0, 0, 2.4534, 3.0507], [0, 0, 3.1337, 0.1675]]]