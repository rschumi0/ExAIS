import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot90148 = tf.keras.layers.Input(shape=([2]))
in1Dot90148 = tf.keras.layers.Input(shape=([2]))
in0Sim12880 = tf.keras.layers.Input(shape=([3, 3]))
in0Con23172 = tf.keras.layers.Input(shape=([3, 3, 2, 1]))
in0Sub70666 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))
in1Sub70666 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))

Dot90148 = keras.layers.Dot(axes=(1, 1), name = 'Dot90148', )([in0Dot90148,in1Dot90148])
Sim12880 = keras.layers.SimpleRNN(1,name = 'Sim12880', )(in0Sim12880)
Res71346 = keras.layers.Reshape((1, 1), name = 'Res71346', )(Sim12880)
Glo46730 = keras.layers.GlobalMaxPool1D(name = 'Glo46730', )(Res71346)
Min5226 = keras.layers.Minimum(name = 'Min5226', )([Dot90148,Glo46730])
Res62816 = keras.layers.Reshape((1, 1), name = 'Res62816', )(Min5226)
Res57766 = keras.layers.Reshape((1, 1, 1), name = 'Res57766', )(Res62816)
Res96997 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res96997', )(Res57766)
Zer44224 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (1, 0)), name = 'Zer44224', )(Res96997)
Con23172 = keras.layers.Concatenate(axis=4, name = 'Con23172', )([Zer44224,in0Con23172])
Sub70666 = keras.layers.Subtract(name = 'Sub70666', )([in0Sub70666,in1Sub70666])
Max78131 = keras.layers.Maximum(name = 'Max78131', )([Con23172,Sub70666])
model = tf.keras.models.Model(inputs=[in0Dot90148,in1Dot90148,in0Sim12880,in0Con23172,in0Sub70666,in1Sub70666], outputs=Max78131)
w = model.get_layer('Sim12880').get_weights() 
w[0] = np.array([[10], [8], [5]])
w[1] = np.array([[3]])
w[2] = np.array([5])
model.get_layer('Sim12880').set_weights(w) 
in0Dot90148 = tf.constant([[0.0485, 0.9132]])
in1Dot90148 = tf.constant([[0.839, 0.2657]])
in0Sim12880 = tf.constant([[[1, 9, 8], [4, 5, 7], [1, 2, 5]]])
in0Con23172 = tf.constant([[[[[0.4637], [0.9205]], [[0.9852], [0.3667]], [[0.4938], [0.9349]]], [[[0.3187], [0.8784]], [[0.2935], [0.3704]], [[0.3441], [0.8522]]], [[[0.591], [0.3785]], [[0.1979], [0.948]], [[0.2431], [0.7944]]]]])
in0Sub70666 = tf.constant([[[[[0.1343, 0.7043], [0.893, 0.65]], [[0.2081, 0.0126], [0.9092, 0.693]], [[0.2955, 0.2685], [0.326, 0.3614]]], [[[0.161, 0.3875], [0.1023, 0.4602]], [[0.5462, 0.617], [0.1868, 0.268]], [[0.6488, 0.6671], [0.0008, 0.5368]]], [[[0.2357, 0.6166], [0.0992, 0.6197]], [[0.4211, 0.7988], [0.9266, 0.3404]], [[0.9797, 0.0698], [0.6921, 0.3024]]]]])
in1Sub70666 = tf.constant([[[[[0.6971, 0.0896], [0.7838, 0.9556]], [[0.6619, 0.502], [0.8105, 0.8879]], [[0.596, 0.1932], [0.3174, 0.488]]], [[[0.2872, 0.1291], [0.4552, 0.3401]], [[0.9387, 0.6209], [0.3987, 0.4518]], [[0.786, 0.2582], [0.1108, 0.6938]]], [[[0.6405, 0.1574], [0.1236, 0.6321]], [[0.116, 0.625], [0.3728, 0.2741]], [[0.1715, 0.8089], [0.7586, 0.1147]]]]])
print (np.array2string(model.predict([in0Dot90148,in1Dot90148,in0Sim12880,in0Con23172,in0Sub70666,in1Sub70666],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max78131.png')

LDot90148 = dot_layer([[0.0485, 0.9132]], [[0.839, 0.2657]], 1, 1, Dot90148), 
LSim12880 = simple_rnn_layer([[[1, 9, 8], [4, 5, 7], [1, 2, 5]]],[[10], [8], [5]],[[3]],[5], Sim12880), 
LRes71346 = reshape_layer(Sim12880, [1, 1], Res71346), 
LGlo46730 = global_max_pool1D_layer(Res71346, Glo46730), 
LMin5226 = minimum_layer([Dot90148,Glo46730], Min5226), 
LRes62816 = reshape_layer(Min5226, [1, 1], Res62816), 
LRes57766 = reshape_layer(Res62816, [1, 1, 1], Res57766), 
LRes96997 = reshape_layer(Res57766, [1, 1, 1, 1], Res96997), 
LZer44224 = zero_padding3D_layer(Res96997, 2, 0, 2, 0, 1, 0, Zer44224), 
LCon23172 = concatenate_layer([Zer44224,[[[[[0.4637], [0.9205]], [[0.9852], [0.3667]], [[0.4938], [0.9349]]], [[[0.3187], [0.8784]], [[0.2935], [0.3704]], [[0.3441], [0.8522]]], [[[0.591], [0.3785]], [[0.1979], [0.948]], [[0.2431], [0.7944]]]]]], 4, Con23172), 
LSub70666 = subtract_layer([[[[[0.1343, 0.7043], [0.893, 0.65]], [[0.2081, 0.0126], [0.9092, 0.693]], [[0.2955, 0.2685], [0.326, 0.3614]]], [[[0.161, 0.3875], [0.1023, 0.4602]], [[0.5462, 0.617], [0.1868, 0.268]], [[0.6488, 0.6671], [0.0008, 0.5368]]], [[[0.2357, 0.6166], [0.0992, 0.6197]], [[0.4211, 0.7988], [0.9266, 0.3404]], [[0.9797, 0.0698], [0.6921, 0.3024]]]]], [[[[[0.6971, 0.0896], [0.7838, 0.9556]], [[0.6619, 0.502], [0.8105, 0.8879]], [[0.596, 0.1932], [0.3174, 0.488]]], [[[0.2872, 0.1291], [0.4552, 0.3401]], [[0.9387, 0.6209], [0.3987, 0.4518]], [[0.786, 0.2582], [0.1108, 0.6938]]], [[[0.6405, 0.1574], [0.1236, 0.6321]], [[0.116, 0.625], [0.3728, 0.2741]], [[0.1715, 0.8089], [0.7586, 0.1147]]]]], Sub70666), 
LMax78131 = maximum_layer([Con23172,Sub70666], Max78131), 
exec_layers([LDot90148,LSim12880,LRes71346,LGlo46730,LMin5226,LRes62816,LRes57766,LRes96997,LZer44224,LCon23172,LSub70666,LMax78131],["Dot90148","Sim12880","Res71346","Glo46730","Min5226","Res62816","Res57766","Res96997","Zer44224","Con23172","Sub70666","Max78131"],Max78131,"Max78131")

Actual (Unparsed): [[[[[0.0000000, 0.6147000], [0.1092000, 0.9205000]], [[0.0000000, 0.9852000], [0.0987000, 0.3667000]], [[0.0000000, 0.4938000], [0.0086000, 0.9349000]]], [[[0.0000000, 0.3187000], [0.0000000, 0.8784000]], [[0.0000000, 0.2935000], [0.0000000, 0.3704000]], [[0.0000000, 0.4089000], [0.0000000, 0.8522000]]], [[[0.0000000, 0.5910000], [0.0000000, 0.3785000]], [[0.3051000, 0.1979000], [0.5538000, 0.9480000]], [[0.8082000, 0.2431000], [0.2833288, 0.7944000]]]]]

Expected (Unparsed): [[[[[0,0.6147],[0.10919999999999996,0.9205]],[[0,0.9852],[0.09870000000000001,0.3667]],[[0,0.4938],[0.008599999999999997,0.9349]]],[[[0,0.3187],[0,0.8784]],[[0,0.2935],[0,0.3704]],[[0,0.40890000000000004],[0,0.8522]]],[[[0,0.591],[0,0.3785]],[[0.3051,0.1979],[0.5538,0.948]],[[0.8082,0.2431],[0.28332874,0.7944]]]]]

Actual:   [[[[[0, 0.6147], [0.1092, 0.9205]], [[0, 0.9852], [0.0987, 0.3667]], [[0, 0.4938], [0.0086, 0.9349]]], [[[0, 0.3187], [0, 0.8784]], [[0, 0.2935], [0, 0.3704]], [[0, 0.4089], [0, 0.8522]]], [[[0, 0.591], [0, 0.3785]], [[0.3051, 0.1979], [0.5538, 0.948]], [[0.8082, 0.2431], [0.2834, 0.7944]]]]]

Expected: [[[[[0, 0.6147], [0.1092, 0.9205]], [[0, 0.9852], [0.0988, 0.3667]], [[0, 0.4938], [0.0086, 0.9349]]], [[[0, 0.3187], [0, 0.8784]], [[0, 0.2935], [0, 0.3704]], [[0, 0.409], [0, 0.8522]]], [[[0, 0.591], [0, 0.3785]], [[0.3051, 0.1979], [0.5538, 0.948]], [[0.8082, 0.2431], [0.2834, 0.7944]]]]]