import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add79138 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Add79138 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Add81240 = tf.keras.layers.Input(shape=([2, 1]))
in1Add81240 = tf.keras.layers.Input(shape=([2, 1]))
in0Con52159 = tf.keras.layers.Input(shape=([2, 6, 8]))
in0Den74384 = tf.keras.layers.Input(shape=([4, 2, 4]))
in0Con68369 = tf.keras.layers.Input(shape=([2, 6, 8]))
in0Sub90903 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in1Sub90903 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in0Add10167 = tf.keras.layers.Input(shape=([1, 2]))
in1Add10167 = tf.keras.layers.Input(shape=([1, 2]))
in0Con12718 = tf.keras.layers.Input(shape=([2, 52]))

Add79138 = keras.layers.Add(name = 'Add79138', )([in0Add79138,in1Add79138])
Res31383 = keras.layers.Reshape((1, 1), name = 'Res31383', )(Add79138)
Zer97427 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer97427', )(Res31383)
Add81240 = keras.layers.Add(name = 'Add81240', )([in0Add81240,in1Add81240])
Sub24079 = keras.layers.Subtract(name = 'Sub24079', )([Zer97427,Add81240])
Con14963 = keras.layers.Conv1D(2, (1),strides=(1), padding='valid', dilation_rate=(1), name = 'Con14963', )(Sub24079)
Res35040 = keras.layers.Reshape((2, 2, 1), name = 'Res35040', )(Con14963)
Zer57556 = keras.layers.ZeroPadding2D(padding=((0, 0), (4, 0)), name = 'Zer57556', )(Res35040)
Con52159 = keras.layers.Concatenate(axis=3, name = 'Con52159', )([Zer57556,in0Con52159])
Den74384 = keras.layers.Dense(3,name = 'Den74384', )(in0Den74384)
Res45111 = keras.layers.Reshape((4, 6), name = 'Res45111', )(Den74384)
Max38738 = keras.layers.MaxPool1D(pool_size=(2), name = 'Max38738', )(Res45111)
Res50774 = keras.layers.Reshape((2, 6, 1), name = 'Res50774', )(Max38738)
Con68369 = keras.layers.Concatenate(axis=3, name = 'Con68369', )([Res50774,in0Con68369])
Sub90903 = keras.layers.Subtract(name = 'Sub90903', )([in0Sub90903,in1Sub90903])
Res6103 = keras.layers.Reshape((3, 3, 9), name = 'Res6103', )(Sub90903)
Dep30671 = keras.layers.DepthwiseConv2D((2, 2),strides=(2, 2), padding='same', name = 'Dep30671', )(Res6103)
Zer5004 = keras.layers.ZeroPadding2D(padding=((0, 0), (4, 0)), name = 'Zer5004', )(Dep30671)
Mul66262 = keras.layers.Multiply(name = 'Mul66262', )([Con68369,Zer5004])
Ave28723 = keras.layers.Average(name = 'Ave28723', )([Con52159,Mul66262])
Res769 = keras.layers.Reshape((2, 54), name = 'Res769', )(Ave28723)
Add10167 = keras.layers.Add(name = 'Add10167', )([in0Add10167,in1Add10167])
Bat5464 = keras.layers.BatchNormalization(axis=1, epsilon=0.7862977065699399,  name = 'Bat5464', )(Add10167)
Zer70995 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer70995', )(Bat5464)
Con12718 = keras.layers.Concatenate(axis=2, name = 'Con12718', )([Zer70995,in0Con12718])
Min14447 = keras.layers.Minimum(name = 'Min14447', )([Res769,Con12718])
model = tf.keras.models.Model(inputs=[in0Add79138,in1Add79138,in0Add81240,in1Add81240,in0Con52159,in0Den74384,in0Con68369,in0Sub90903,in1Sub90903,in0Add10167,in1Add10167,in0Con12718], outputs=Min14447)
w = model.get_layer('Con14963').get_weights() 
w[0] = np.array([[[0.9987, 0.8906]]])
w[1] = np.array([0, 0])
model.get_layer('Con14963').set_weights(w) 
w = model.get_layer('Den74384').get_weights() 
w[0] = np.array([[0.4164, 0.6106, 0.0649], [0.7368, 0.7984, 0.7798], [0.4578, 0.5647, 0.6516], [0.7144, 0.7287, 0.8563]])
w[1] = np.array([0.7845, 0.755, 0.8273])
model.get_layer('Den74384').set_weights(w) 
w = model.get_layer('Dep30671').get_weights() 
w[0] = np.array([[[[0.6688], [0.6773], [0.15], [0.063], [0.2426], [0.8718], [0.855], [0.8816], [0.8579]], [[0.2112], [0.9834], [0.1014], [0.495], [0.8756], [0.9542], [0.5658], [0.9541], [0.5162]]], [[[0.8336], [0.3112], [0.0592], [0.8513], [0.7303], [0.7999], [0.0015], [0.9451], [0.711]], [[0.0346], [0.1622], [0.1271], [0.455], [0.5099], [0.5232], [0.3227], [0.7839], [0.5322]]]])
w[1] = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0])
model.get_layer('Dep30671').set_weights(w) 
w = model.get_layer('Bat5464').get_weights() 
w[0] = np.array([0.2658])
w[1] = np.array([0.2527])
w[2] = np.array([0.2163])
w[3] = np.array([0.2729])
model.get_layer('Bat5464').set_weights(w) 
in0Add79138 = tf.constant([[[[0.6629]]]])
in1Add79138 = tf.constant([[[[0.0317]]]])
in0Add81240 = tf.constant([[[0.3133], [0.2708]]])
in1Add81240 = tf.constant([[[0.1895], [0.6094]]])
in0Con52159 = tf.constant([[[[0.1501, 0.6366, 0.4702, 0.5777, 0.7592, 0.5259, 0.2538, 0.3695], [0.6884, 0.6857, 0.2041, 0.1996, 0.1329, 0.5786, 0.6829, 0.6022], [0.3612, 0.6818, 0.5715, 0.4203, 0.4543, 0.1883, 0.3698, 0.9345], [0.8586, 0.8583, 0.7838, 0.4236, 0.2095, 0.1164, 0.4001, 0.5231], [0.8319, 0.7575, 0.9503, 0.0954, 0.4307, 0.3029, 0.2297, 0.5813], [0.749, 0.1313, 0.9462, 0.9623, 0.3864, 0.9958, 0.6522, 0.5325]], [[0.55, 0.4377, 0.4373, 0.65, 0.2385, 0.9068, 0.2451, 0.5211], [0.2481, 0.1058, 0.5192, 0.8514, 0.4358, 0.1935, 0.3785, 0.8969], [0.8702, 0.9973, 0.6776, 0.0414, 0.8629, 0.3183, 0.116, 0.5336], [0.3811, 0.7386, 0.0261, 0.4287, 0.0139, 0.0859, 0.5919, 0.0964], [0.4879, 0.851, 0.0299, 0.8798, 0.7119, 0.4094, 0.6954, 0.6212], [0.4655, 0.8532, 0.1717, 0.8063, 0.1415, 0.606, 0.1441, 0.0192]]]])
in0Den74384 = tf.constant([[[[0.9441, 0.135, 0.0551, 0.6367], [0.8108, 0.6479, 0.8538, 0.061]], [[0.8119, 0.2634, 0.6429, 0.9657], [0.5761, 0.8183, 0.453, 0.8956]], [[0.3246, 0.5556, 0.0175, 0.8195], [0.161, 0.5563, 0.6932, 0.5646]], [[0.9221, 0.3304, 0.7784, 0.3626], [0.4053, 0.6949, 0.8191, 0.3531]]]])
in0Con68369 = tf.constant([[[[0.8052, 0.0321, 0.7518, 0.2034, 0.058, 0.5104, 0.394, 0.4289], [0.3484, 0.9398, 0.8193, 0.1108, 0.6303, 0.0241, 0.4914, 0.9587], [0.3368, 0.359, 0.1675, 0.0858, 0.0411, 0.7658, 0.6759, 0.0385], [0.0433, 0.9612, 0.2219, 0.3424, 0.995, 0.9348, 0.1226, 0.0908], [0.7606, 0.035, 0.1004, 0.492, 0.3335, 0.1692, 0.5235, 0.9682], [0.773, 0.7133, 0.2718, 0.3488, 0.8104, 0.6957, 0.2269, 0.9394]], [[0.9835, 0.5709, 0.7395, 0.7623, 0.901, 0.4309, 0.8094, 0.0641], [0.5157, 0.8158, 0.1286, 0.2624, 0.0871, 0.3798, 0.5857, 0.8675], [0.8545, 0.5448, 0.3057, 0.5525, 0.3078, 0.9302, 0.8088, 0.4728], [0.3426, 0.788, 0.4113, 0.1348, 0.5187, 0.8898, 0.5653, 0.6037], [0.1001, 0.314, 0.4315, 0.6043, 0.5506, 0.3651, 0.6197, 0.1161], [0.6823, 0.4181, 0.6902, 0.396, 0.7085, 0.8279, 0.7111, 0.9688]]]])
in0Sub90903 = tf.constant([[[[[0.13, 0.3555, 0.0421], [0.5062, 0.7877, 0.7993], [0.7486, 0.4446, 0.1894]], [[0.205, 0.3637, 0.0743], [0.8254, 0.0818, 0.8472], [0.764, 0.1229, 0.26]], [[0.3385, 0.0545, 0.1058], [0.6721, 0.2382, 0.5238], [0.4398, 0.0891, 0.4056]]], [[[0.4841, 0.7819, 0.6049], [0.7919, 0.6496, 0.9418], [0.1972, 0.622, 0.7711]], [[0.6132, 0.1395, 0.1886], [0.5107, 0.3326, 0.381], [0.4263, 0.5027, 0.8848]], [[0.2736, 0.7008, 0.6307], [0.5912, 0.1797, 0.6619], [0.041, 0.7854, 0.5656]]], [[[0.588, 0.3061, 0.3138], [0.1591, 0.3801, 0.4568], [0.078, 0.6271, 0.2496]], [[0.3057, 0.4829, 0.0173], [0.1913, 0.6024, 0.1441], [0.901, 0.5293, 0.0791]], [[0.3698, 0.7497, 0.1839], [0.3739, 0.7336, 0.5867], [0.8165, 0.1491, 0.5277]]]]])
in1Sub90903 = tf.constant([[[[[0.363, 0.682, 0.465], [0.0029, 0.8265, 0.8396], [0.6128, 0.0827, 0.8751]], [[0.3595, 0.1606, 0.6728], [0.5163, 0.2938, 0.9295], [0.7787, 0.5898, 0.4814]], [[0.974, 0.3883, 0.3541], [0.7001, 0.419, 0.4854], [0.8848, 0.291, 0.1758]]], [[[0.6126, 0.9891, 0.1387], [0.147, 0.124, 0.0005], [0.8133, 0.5174, 0.6366]], [[0.3853, 0.7522, 0.1237], [0.2186, 0.5685, 0.5939], [0.6983, 0.5375, 0.762]], [[0.1619, 0.9902, 0.5316], [0.8686, 0.1419, 0.3789], [0.1663, 0.7258, 0.1935]]], [[[0.6205, 0.4875, 0.0507], [0.0985, 0.7893, 0.4981], [0.456, 0.5548, 0.3124]], [[0.3445, 0.8124, 0.3987], [0.2346, 0.9266, 0.0576], [0.3614, 0.495, 0.3198]], [[0.268, 0.9464, 0.0487], [0.3344, 0.4449, 0.6544], [0.1278, 0.126, 0.9999]]]]])
in0Add10167 = tf.constant([[[0.5734, 0.7948]]])
in1Add10167 = tf.constant([[[0.0217, 0.3685]]])
in0Con12718 = tf.constant([[[0.2189, 0.9353, 0.6215, 0.8539, 0.6531, 0.7761, 0.9576, 0.9112, 0.018, 0.3533, 0.6497, 0.2883, 0.2318, 0.0879, 0.7855, 0.6868, 0.5522, 0.6504, 0.2417, 0.1087, 0.9051, 0.7875, 0.0434, 0.7185, 0.2888, 0.5479, 0.814, 0.3489, 0.6248, 0.3293, 0.513, 0.1166, 0.681, 0.428, 0.742, 0.834, 0.8523, 0.1924, 0.3876, 0.7746, 0.6543, 0.4559, 0.2672, 0.8742, 0.7568, 0.6599, 0.7442, 0.6414, 0.2637, 0.9583, 0.9861, 0.8851], [0.7352, 0.647, 0.6562, 0.8672, 0.1351, 0.4551, 0.3474, 0.6423, 0.4911, 0.5963, 0.9943, 0.1545, 0.5546, 0.9872, 0.8333, 0.1258, 0.1629, 0.7121, 0.219, 0.8983, 0.3196, 0.6361, 0.7504, 0.1622, 0.2376, 0.0512, 0.714, 0.9452, 0.713, 0.3784, 0.8059, 0.322, 0.24, 0.2403, 0.4621, 0.055, 0.2158, 0.6717, 0.8953, 0.7783, 0.434, 0.8404, 0.1132, 0.396, 0.8204, 0.4141, 0.7769, 0.0845, 0.0261, 0.6264, 0.7468, 0.6565]]])
print (np.array2string(model.predict([in0Add79138,in1Add79138,in0Add81240,in1Add81240,in0Con52159,in0Den74384,in0Con68369,in0Sub90903,in1Sub90903,in0Add10167,in1Add10167,in0Con12718],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min14447.png')

LAdd79138 = add_layer([[[[[0.6629]]]], [[[[0.0317]]]]], Add79138), 
LRes31383 = reshape_layer(Add79138, [1, 1], Res31383), 
LZer97427 = zero_padding1D_layer(Res31383, 1, 0, Zer97427), 
LAdd81240 = add_layer([[[[0.3133], [0.2708]]], [[[0.1895], [0.6094]]]], Add81240), 
LSub24079 = subtract_layer(Zer97427,Add81240, Sub24079), 
LCon14963 = conv1D_layer(Sub24079, 1,[[[0.9987, 0.8906]]],[0, 0], 1, false, 1, Con14963), 
LRes35040 = reshape_layer(Con14963, [2, 2, 1], Res35040), 
LZer57556 = zero_padding2D_layer(Res35040, 0, 0, 4, 0, Zer57556), 
LCon52159 = concatenate_layer([Zer57556,[[[[0.1501, 0.6366, 0.4702, 0.5777, 0.7592, 0.5259, 0.2538, 0.3695], [0.6884, 0.6857, 0.2041, 0.1996, 0.1329, 0.5786, 0.6829, 0.6022], [0.3612, 0.6818, 0.5715, 0.4203, 0.4543, 0.1883, 0.3698, 0.9345], [0.8586, 0.8583, 0.7838, 0.4236, 0.2095, 0.1164, 0.4001, 0.5231], [0.8319, 0.7575, 0.9503, 0.0954, 0.4307, 0.3029, 0.2297, 0.5813], [0.749, 0.1313, 0.9462, 0.9623, 0.3864, 0.9958, 0.6522, 0.5325]], [[0.55, 0.4377, 0.4373, 0.65, 0.2385, 0.9068, 0.2451, 0.5211], [0.2481, 0.1058, 0.5192, 0.8514, 0.4358, 0.1935, 0.3785, 0.8969], [0.8702, 0.9973, 0.6776, 0.0414, 0.8629, 0.3183, 0.116, 0.5336], [0.3811, 0.7386, 0.0261, 0.4287, 0.0139, 0.0859, 0.5919, 0.0964], [0.4879, 0.851, 0.0299, 0.8798, 0.7119, 0.4094, 0.6954, 0.6212], [0.4655, 0.8532, 0.1717, 0.8063, 0.1415, 0.606, 0.1441, 0.0192]]]]], 3, Con52159), 
LDen74384 = dense_layer([[[[0.9441, 0.135, 0.0551, 0.6367], [0.8108, 0.6479, 0.8538, 0.061]], [[0.8119, 0.2634, 0.6429, 0.9657], [0.5761, 0.8183, 0.453, 0.8956]], [[0.3246, 0.5556, 0.0175, 0.8195], [0.161, 0.5563, 0.6932, 0.5646]], [[0.9221, 0.3304, 0.7784, 0.3626], [0.4053, 0.6949, 0.8191, 0.3531]]]], [[0.4164, 0.6106, 0.0649], [0.7368, 0.7984, 0.7798], [0.4578, 0.5647, 0.6516], [0.7144, 0.7287, 0.8563]],[0.7845, 0.755, 0.8273], Den74384), 
LRes45111 = reshape_layer(Den74384, [4, 6], Res45111), 
LMax38738 = max_pool1D_layer(Res45111, 2, Max38738), 
LRes50774 = reshape_layer(Max38738, [2, 6, 1], Res50774), 
LCon68369 = concatenate_layer([Res50774,[[[[0.8052, 0.0321, 0.7518, 0.2034, 0.058, 0.5104, 0.394, 0.4289], [0.3484, 0.9398, 0.8193, 0.1108, 0.6303, 0.0241, 0.4914, 0.9587], [0.3368, 0.359, 0.1675, 0.0858, 0.0411, 0.7658, 0.6759, 0.0385], [0.0433, 0.9612, 0.2219, 0.3424, 0.995, 0.9348, 0.1226, 0.0908], [0.7606, 0.035, 0.1004, 0.492, 0.3335, 0.1692, 0.5235, 0.9682], [0.773, 0.7133, 0.2718, 0.3488, 0.8104, 0.6957, 0.2269, 0.9394]], [[0.9835, 0.5709, 0.7395, 0.7623, 0.901, 0.4309, 0.8094, 0.0641], [0.5157, 0.8158, 0.1286, 0.2624, 0.0871, 0.3798, 0.5857, 0.8675], [0.8545, 0.5448, 0.3057, 0.5525, 0.3078, 0.9302, 0.8088, 0.4728], [0.3426, 0.788, 0.4113, 0.1348, 0.5187, 0.8898, 0.5653, 0.6037], [0.1001, 0.314, 0.4315, 0.6043, 0.5506, 0.3651, 0.6197, 0.1161], [0.6823, 0.4181, 0.6902, 0.396, 0.7085, 0.8279, 0.7111, 0.9688]]]]], 3, Con68369), 
LSub90903 = subtract_layer([[[[[0.13, 0.3555, 0.0421], [0.5062, 0.7877, 0.7993], [0.7486, 0.4446, 0.1894]], [[0.205, 0.3637, 0.0743], [0.8254, 0.0818, 0.8472], [0.764, 0.1229, 0.26]], [[0.3385, 0.0545, 0.1058], [0.6721, 0.2382, 0.5238], [0.4398, 0.0891, 0.4056]]], [[[0.4841, 0.7819, 0.6049], [0.7919, 0.6496, 0.9418], [0.1972, 0.622, 0.7711]], [[0.6132, 0.1395, 0.1886], [0.5107, 0.3326, 0.381], [0.4263, 0.5027, 0.8848]], [[0.2736, 0.7008, 0.6307], [0.5912, 0.1797, 0.6619], [0.041, 0.7854, 0.5656]]], [[[0.588, 0.3061, 0.3138], [0.1591, 0.3801, 0.4568], [0.078, 0.6271, 0.2496]], [[0.3057, 0.4829, 0.0173], [0.1913, 0.6024, 0.1441], [0.901, 0.5293, 0.0791]], [[0.3698, 0.7497, 0.1839], [0.3739, 0.7336, 0.5867], [0.8165, 0.1491, 0.5277]]]]], [[[[[0.363, 0.682, 0.465], [0.0029, 0.8265, 0.8396], [0.6128, 0.0827, 0.8751]], [[0.3595, 0.1606, 0.6728], [0.5163, 0.2938, 0.9295], [0.7787, 0.5898, 0.4814]], [[0.974, 0.3883, 0.3541], [0.7001, 0.419, 0.4854], [0.8848, 0.291, 0.1758]]], [[[0.6126, 0.9891, 0.1387], [0.147, 0.124, 0.0005], [0.8133, 0.5174, 0.6366]], [[0.3853, 0.7522, 0.1237], [0.2186, 0.5685, 0.5939], [0.6983, 0.5375, 0.762]], [[0.1619, 0.9902, 0.5316], [0.8686, 0.1419, 0.3789], [0.1663, 0.7258, 0.1935]]], [[[0.6205, 0.4875, 0.0507], [0.0985, 0.7893, 0.4981], [0.456, 0.5548, 0.3124]], [[0.3445, 0.8124, 0.3987], [0.2346, 0.9266, 0.0576], [0.3614, 0.495, 0.3198]], [[0.268, 0.9464, 0.0487], [0.3344, 0.4449, 0.6544], [0.1278, 0.126, 0.9999]]]]], Sub90903), 
LRes6103 = reshape_layer(Sub90903, [3, 3, 9], Res6103), 
LDep30671 = depthwise_conv2D_layer(Res6103, 2, 2,[[[[0.6688], [0.6773], [0.15], [0.063], [0.2426], [0.8718], [0.855], [0.8816], [0.8579]], [[0.2112], [0.9834], [0.1014], [0.495], [0.8756], [0.9542], [0.5658], [0.9541], [0.5162]]], [[[0.8336], [0.3112], [0.0592], [0.8513], [0.7303], [0.7999], [0.0015], [0.9451], [0.711]], [[0.0346], [0.1622], [0.1271], [0.455], [0.5099], [0.5232], [0.3227], [0.7839], [0.5322]]]],[0, 0, 0, 0, 0, 0, 0, 0, 0], 2, 2, true, Dep30671), 
LZer5004 = zero_padding2D_layer(Dep30671, 0, 0, 4, 0, Zer5004), 
LMul66262 = multiply_layer([Con68369,Zer5004], Mul66262), 
LAve28723 = average_layer([Con52159,Mul66262], Ave28723), 
LRes769 = reshape_layer(Ave28723, [2, 54], Res769), 
LAdd10167 = add_layer([[[[0.5734, 0.7948]]], [[[0.0217, 0.3685]]]], Add10167), 
LBat5464 = batch_normalization_layer(Add10167, 1, 0.7862977065699399, [0.2658], [0.2527], [0.2163], [0.2729], Bat5464), 
LZer70995 = zero_padding1D_layer(Bat5464, 1, 0, Zer70995), 
LCon12718 = concatenate_layer([Zer70995,[[[0.2189, 0.9353, 0.6215, 0.8539, 0.6531, 0.7761, 0.9576, 0.9112, 0.018, 0.3533, 0.6497, 0.2883, 0.2318, 0.0879, 0.7855, 0.6868, 0.5522, 0.6504, 0.2417, 0.1087, 0.9051, 0.7875, 0.0434, 0.7185, 0.2888, 0.5479, 0.814, 0.3489, 0.6248, 0.3293, 0.513, 0.1166, 0.681, 0.428, 0.742, 0.834, 0.8523, 0.1924, 0.3876, 0.7746, 0.6543, 0.4559, 0.2672, 0.8742, 0.7568, 0.6599, 0.7442, 0.6414, 0.2637, 0.9583, 0.9861, 0.8851], [0.7352, 0.647, 0.6562, 0.8672, 0.1351, 0.4551, 0.3474, 0.6423, 0.4911, 0.5963, 0.9943, 0.1545, 0.5546, 0.9872, 0.8333, 0.1258, 0.1629, 0.7121, 0.219, 0.8983, 0.3196, 0.6361, 0.7504, 0.1622, 0.2376, 0.0512, 0.714, 0.9452, 0.713, 0.3784, 0.8059, 0.322, 0.24, 0.2403, 0.4621, 0.055, 0.2158, 0.6717, 0.8953, 0.7783, 0.434, 0.8404, 0.1132, 0.396, 0.8204, 0.4141, 0.7769, 0.0845, 0.0261, 0.6264, 0.7468, 0.6565]]]], 2, Con12718), 
LMin14447 = minimum_layer([Res769,Con12718], Min14447), 
exec_layers([LAdd79138,LRes31383,LZer97427,LAdd81240,LSub24079,LCon14963,LRes35040,LZer57556,LCon52159,LDen74384,LRes45111,LMax38738,LRes50774,LCon68369,LSub90903,LRes6103,LDep30671,LZer5004,LMul66262,LAve28723,LRes769,LAdd10167,LBat5464,LZer70995,LCon12718,LMin14447],["Add79138","Res31383","Zer97427","Add81240","Sub24079","Con14963","Res35040","Zer57556","Con52159","Den74384","Res45111","Max38738","Res50774","Con68369","Sub90903","Res6103","Dep30671","Zer5004","Mul66262","Ave28723","Res769","Add10167","Bat5464","Zer70995","Con12718","Min14447"],Min14447,"Min14447")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.2189000, 0.2351000, 0.2888500, 0.3796000, 0.2629500, 0.1269000, 0.1847500, 0.0000000, 0.0180000, 0.3428500, 0.1020500, 0.0998000, 0.0664500, 0.0879000, 0.3414500, 0.3011000, 0.0000000, 0.1806000, 0.2417000, 0.1087000, 0.2101500, 0.2271500, 0.0434000, 0.1849000, 0.2888000, 0.0000000, 0.4293000, 0.3489000, 0.3919000, 0.2118000, 0.1047500, 0.0582000, 0.2000500, 0.2615500, -0.6349320, 0.3454916, 0.3772052, 0.1924000, 0.0645560, 0.3033761, 0.1530653, 0.1004955, 0.0284783, -0.6495499, 0.2523103, 0.0544589, 0.4407674, 0.4783148, 0.2637000, 0.3654864, 0.3122969, 0.4831145], [0.0000000, 0.2750000, 0.2188500, 0.2186500, 0.3250000, 0.1192500, 0.1351000, 0.1225500, 0.2605500, 0.0000000, 0.1240500, 0.0529000, 0.2596000, 0.1545000, 0.2179000, 0.0967500, 0.1892500, 0.1258000, 0.0000000, 0.4351000, 0.2190000, 0.3388000, 0.0207000, 0.4314500, 0.1591500, 0.0580000, 0.2376000, 0.0000000, 0.1905500, 0.3693000, 0.0130500, 0.2143500, 0.0069500, 0.0429500, 0.2400000, 0.0482000, -0.1267573, 0.0550000, 0.2158000, 0.0111494, 0.3241338, 0.3687605, 0.2014352, 0.3775898, 0.1132000, -0.0066807, 0.1873003, 0.4141000, 0.0867088, 0.0845000, 0.0261000, 0.5467497, 0.0792908, -0.1866306]]]

Expected (Unparsed): [[[0.0,0,0.2189,0.2351,0.28885,0.3796,0.26295,0.1269,0.18475,0.0,0.018,0.34285,0.10205,0.0998,0.06645,0.0879,0.34145,0.3011,0.0,0.1806,0.2417,0.1087,0.21015,0.22715,0.0434,0.1849,0.2888,0.0,0.4293,0.3489,0.3919,0.2118,0.10475,0.0582,0.20005,0.26155,-0.634931989470206,0.345491632653,0.377205186275,0.1924,0.06455596673999998,0.3033760560325,0.153065283874,0.10049549650750002,0.028478359295000033,-0.6495499646705782,0.25231033627,0.054458936438000004,0.440767403142,0.47831482454400004,0.2637,0.3654863928425,0.312296869774,0.483114491844],[0.0,0.275,0.21885,0.21865,0.325,0.11925,0.1351,0.12255,0.26055,0.0,0.12405,0.0529,0.2596,0.1545,0.2179,0.09675,0.18925,0.1258,0.0,0.4351,0.219,0.3388,0.0207,0.43145,0.15915,0.058,0.2376,0.0,0.19055,0.3693,0.01305,0.21435,0.00695,0.04295,0.24,0.0482,-0.1267573091047425,0.055,0.2158,0.011149412724999998,0.32413381390400003,0.368760523888,0.201435217384,0.3775897763035,0.1132,-0.006680681778406458,0.18730032195350002,0.4141,0.08670878135,0.0845,0.0261,0.546749697075,0.079290761528,-0.186630624072]]]

Actual:   [[[0, 0, 0.2189, 0.2351, 0.2889, 0.3796, 0.263, 0.1269, 0.1848, 0, 0.018, 0.3429, 0.1021, 0.0998, 0.0665, 0.0879, 0.3415, 0.3011, 0, 0.1806, 0.2417, 0.1087, 0.2102, 0.2272, 0.0434, 0.1849, 0.2888, 0, 0.4293, 0.3489, 0.3919, 0.2118, 0.1048, 0.0582, 0.2001, 0.2616, -0.6349, 0.3455, 0.3773, 0.1924, 0.0646, 0.3034, 0.1531, 0.1005, 0.0285, -0.6495, 0.2524, 0.0545, 0.4408, 0.4784, 0.2637, 0.3655, 0.3123, 0.4832], [0, 0.275, 0.2189, 0.2187, 0.325, 0.1193, 0.1351, 0.1226, 0.2606, 0, 0.1241, 0.0529, 0.2596, 0.1545, 0.2179, 0.0968, 0.1893, 0.1258, 0, 0.4351, 0.219, 0.3388, 0.0207, 0.4315, 0.1592, 0.058, 0.2376, 0, 0.1906, 0.3693, 0.0131, 0.2144, 0.007, 0.043, 0.24, 0.0482, -0.1267, 0.055, 0.2158, 0.0112, 0.3242, 0.3688, 0.2015, 0.3776, 0.1132, -0.0066, 0.1874, 0.4141, 0.0868, 0.0845, 0.0261, 0.5468, 0.0793, -0.1866]]]

Expected: [[[0, 0, 0.2189, 0.2351, 0.2889, 0.3796, 0.263, 0.1269, 0.1848, 0, 0.018, 0.3429, 0.1021, 0.0998, 0.0665, 0.0879, 0.3415, 0.3011, 0, 0.1806, 0.2417, 0.1087, 0.2102, 0.2272, 0.0434, 0.1849, 0.2888, 0, 0.4293, 0.3489, 0.3919, 0.2118, 0.1048, 0.0582, 0.2001, 0.2616, -0.6349, 0.3455, 0.3773, 0.1924, 0.0646, 0.3034, 0.1531, 0.1005, 0.0285, -0.6495, 0.2524, 0.0545, 0.4408, 0.4784, 0.2637, 0.3655, 0.3123, 0.4832], [0, 0.275, 0.2189, 0.2187, 0.325, 0.1193, 0.1351, 0.1226, 0.2606, 0, 0.1241, 0.0529, 0.2596, 0.1545, 0.2179, 0.0968, 0.1893, 0.1258, 0, 0.4351, 0.219, 0.3388, 0.0207, 0.4315, 0.1592, 0.058, 0.2376, 0, 0.1906, 0.3693, 0.0131, 0.2144, 0.007, 0.043, 0.24, 0.0482, -0.1267, 0.055, 0.2158, 0.0112, 0.3242, 0.3688, 0.2015, 0.3776, 0.1132, -0.0066, 0.1874, 0.4141, 0.0868, 0.0845, 0.0261, 0.5468, 0.0793, -0.1866]]]