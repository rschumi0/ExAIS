import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add44005 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Add44005 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Con22523 = tf.keras.layers.Input(shape=([3, 71]))
in0Zer36190 = tf.keras.layers.Input(shape=([2, 4, 1, 4]))

Add44005 = keras.layers.Add(name = 'Add44005', )([in0Add44005,in1Add44005])
Res12516 = keras.layers.Reshape((2, 2), name = 'Res12516', )(Add44005)
Sim63692 = keras.layers.SimpleRNN(3,name = 'Sim63692', )(Res12516)
Res91023 = keras.layers.Reshape((3, 1), name = 'Res91023', )(Sim63692)
Con22523 = keras.layers.Concatenate(axis=2, name = 'Con22523', )([Res91023,in0Con22523])
Zer36190 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer36190', )(in0Zer36190)
ReL89623 = keras.layers.ReLU(max_value=2.141652369436806, negative_slope=7.224947755700405, threshold=6.9289595711951035, name = 'ReL89623', )(Zer36190)
Mas32007 = keras.layers.Masking(mask_value=2, name = 'Mas32007', )(ReL89623)
Res88294 = keras.layers.Reshape((4, 6, 12), name = 'Res88294', )(Mas32007)
Res76227 = keras.layers.Reshape((4, 72), name = 'Res76227', )(Res88294)
Dot71802 = keras.layers.Dot(axes=(2, 2), name = 'Dot71802', )([Con22523,Res76227])
model = tf.keras.models.Model(inputs=[in0Add44005,in1Add44005,in0Con22523,in0Zer36190], outputs=Dot71802)
w = model.get_layer('Sim63692').get_weights() 
w[0] = np.array([[3, 6, 6], [10, 5, 7]])
w[1] = np.array([[10, 4, 5], [2, 8, 8], [6, 4, 1]])
w[2] = np.array([1, 2, 8])
model.get_layer('Sim63692').set_weights(w) 
in0Add44005 = tf.constant([[[[0.1425, 0.3982]], [[0.5042, 0.3751]]]])
in1Add44005 = tf.constant([[[[0.366, 0.8156]], [[0.8349, 0.5655]]]])
in0Con22523 = tf.constant([[[0.1181, 0.8568, 0.5777, 0.3994, 0.7533, 0.1802, 0.4746, 0.9149, 0.4206, 0.4647, 0.2256, 0.3788, 0.2174, 0.3294, 0.9218, 0.7948, 0.2208, 0.089, 0.8392, 0.865, 0.2746, 0.1709, 0.8495, 0.6075, 0.7703, 0.9123, 0.8148, 0.6302, 0.9515, 0.3724, 0.1168, 0.4135, 0.8703, 0.1483, 0.4026, 0.7672, 0.6286, 0.6979, 0.9591, 0.091, 0.9482, 0.3414, 0.8687, 0.1913, 0.4329, 0.9368, 0.243, 0.1841, 0.1067, 0.2103, 0.3864, 0.4496, 0.9426, 0.8545, 0.6937, 0.6936, 0.1365, 0.8062, 0.4571, 0.9197, 0.8158, 0.5629, 0.5216, 0.5169, 0.7286, 0.0048, 0.9109, 0.7301, 0.2088, 0.9516, 0.1231], [0.4938, 0.3757, 0.6015, 0.7895, 0.9836, 0.0953, 0.0767, 0.7821, 0.2664, 0.7005, 0.5293, 0.6597, 0.1171, 0.8512, 0.6507, 0.5472, 0.4083, 0.1995, 0.9699, 0.161, 0.478, 0.7168, 0.0287, 0.7108, 0.5322, 0.6405, 0.3756, 0.8356, 0.4511, 0.0011, 0.3344, 0.5662, 0.3309, 0.6018, 0.6733, 0.5433, 0.7167, 0.1412, 0.6217, 0.3678, 0.7606, 0.8918, 0.1697, 0.0112, 0.4724, 0.9786, 0.2155, 0.6706, 0.8221, 0.8365, 0.9265, 0.3196, 0.7006, 0.8683, 0.6262, 0.4745, 0.6474, 0.6749, 0.6258, 0.3739, 0.8142, 0.4815, 0.684, 0.8501, 0.8495, 0.5481, 0.1954, 0.6646, 0.2611, 0.4165, 0.7845], [0.9699, 0.3408, 0.8227, 0.7126, 0.8653, 0.9218, 0.9812, 0.3934, 0.7228, 0.079, 0.7354, 0.3572, 0.0691, 0.3796, 0.7595, 0.2027, 0.3364, 0.4457, 0.5972, 0.4329, 0.7157, 0.3976, 0.8258, 0.5839, 0.6832, 0.2165, 0.0466, 0.725, 0.5083, 0.1829, 0.7205, 0.2318, 0.1962, 0.3284, 0.0883, 0.7175, 0.8722, 0.2715, 0.5498, 0.1449, 0.5704, 0.9012, 0.9071, 0.4347, 0.7554, 0.1143, 0.8232, 0.3357, 0.6755, 0.2223, 0.6947, 0.9312, 0.8222, 0.6977, 0.8914, 0.9155, 0.3552, 0.6485, 0.9781, 0.6959, 0.3399, 0.7802, 0.0996, 0.449, 0.0399, 0.6345, 0.1868, 0.4928, 0.3109, 0.5765, 0.0164]]])
in0Zer36190 = tf.constant([[[[[1.5171, 1.912, 1.0182, 1.0895]], [[1.049, 1.0229, 1.0954, 1.7533]], [[1.6308, 1.8849, 1.3416, 1.6073]], [[1.7666, 1.9357, 1.5721, 1.8981]]], [[[1.5129, 1.4533, 1.0758, 1.9647]], [[1.1482, 1.4651, 1.5481, 1.6567]], [[1.3512, 1.375, 1.0513, 1.9475]], [[1.2977, 1.6885, 1.3377, 1.4245]]]]])
print (np.array2string(model.predict([in0Add44005,in1Add44005,in0Con22523,in0Zer36190],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Dot71802.png')

LAdd44005 = add_layer([[[[[0.1425, 0.3982]], [[0.5042, 0.3751]]]], [[[[0.366, 0.8156]], [[0.8349, 0.5655]]]]], Add44005), 
LRes12516 = reshape_layer(Add44005, [2, 2], Res12516), 
LSim63692 = simple_rnn_layer(Res12516,[[3, 6, 6], [10, 5, 7]],[[10, 4, 5], [2, 8, 8], [6, 4, 1]],[1, 2, 8], Sim63692), 
LRes91023 = reshape_layer(Sim63692, [3, 1], Res91023), 
LCon22523 = concatenate_layer([Res91023,[[[0.1181, 0.8568, 0.5777, 0.3994, 0.7533, 0.1802, 0.4746, 0.9149, 0.4206, 0.4647, 0.2256, 0.3788, 0.2174, 0.3294, 0.9218, 0.7948, 0.2208, 0.089, 0.8392, 0.865, 0.2746, 0.1709, 0.8495, 0.6075, 0.7703, 0.9123, 0.8148, 0.6302, 0.9515, 0.3724, 0.1168, 0.4135, 0.8703, 0.1483, 0.4026, 0.7672, 0.6286, 0.6979, 0.9591, 0.091, 0.9482, 0.3414, 0.8687, 0.1913, 0.4329, 0.9368, 0.243, 0.1841, 0.1067, 0.2103, 0.3864, 0.4496, 0.9426, 0.8545, 0.6937, 0.6936, 0.1365, 0.8062, 0.4571, 0.9197, 0.8158, 0.5629, 0.5216, 0.5169, 0.7286, 0.0048, 0.9109, 0.7301, 0.2088, 0.9516, 0.1231], [0.4938, 0.3757, 0.6015, 0.7895, 0.9836, 0.0953, 0.0767, 0.7821, 0.2664, 0.7005, 0.5293, 0.6597, 0.1171, 0.8512, 0.6507, 0.5472, 0.4083, 0.1995, 0.9699, 0.161, 0.478, 0.7168, 0.0287, 0.7108, 0.5322, 0.6405, 0.3756, 0.8356, 0.4511, 0.0011, 0.3344, 0.5662, 0.3309, 0.6018, 0.6733, 0.5433, 0.7167, 0.1412, 0.6217, 0.3678, 0.7606, 0.8918, 0.1697, 0.0112, 0.4724, 0.9786, 0.2155, 0.6706, 0.8221, 0.8365, 0.9265, 0.3196, 0.7006, 0.8683, 0.6262, 0.4745, 0.6474, 0.6749, 0.6258, 0.3739, 0.8142, 0.4815, 0.684, 0.8501, 0.8495, 0.5481, 0.1954, 0.6646, 0.2611, 0.4165, 0.7845], [0.9699, 0.3408, 0.8227, 0.7126, 0.8653, 0.9218, 0.9812, 0.3934, 0.7228, 0.079, 0.7354, 0.3572, 0.0691, 0.3796, 0.7595, 0.2027, 0.3364, 0.4457, 0.5972, 0.4329, 0.7157, 0.3976, 0.8258, 0.5839, 0.6832, 0.2165, 0.0466, 0.725, 0.5083, 0.1829, 0.7205, 0.2318, 0.1962, 0.3284, 0.0883, 0.7175, 0.8722, 0.2715, 0.5498, 0.1449, 0.5704, 0.9012, 0.9071, 0.4347, 0.7554, 0.1143, 0.8232, 0.3357, 0.6755, 0.2223, 0.6947, 0.9312, 0.8222, 0.6977, 0.8914, 0.9155, 0.3552, 0.6485, 0.9781, 0.6959, 0.3399, 0.7802, 0.0996, 0.449, 0.0399, 0.6345, 0.1868, 0.4928, 0.3109, 0.5765, 0.0164]]]], 2, Con22523), 
LZer36190 = zero_padding3D_layer([[[[[1.5171, 1.912, 1.0182, 1.0895]], [[1.049, 1.0229, 1.0954, 1.7533]], [[1.6308, 1.8849, 1.3416, 1.6073]], [[1.7666, 1.9357, 1.5721, 1.8981]]], [[[1.5129, 1.4533, 1.0758, 1.9647]], [[1.1482, 1.4651, 1.5481, 1.6567]], [[1.3512, 1.375, 1.0513, 1.9475]], [[1.2977, 1.6885, 1.3377, 1.4245]]]]], 1, 1, 1, 1, 1, 1, Zer36190), 
LReL89623 = relu_layer(Zer36190, 2.141652369436806, 7.224947755700405, 6.9289595711951035, ReL89623), 
LMas32007 = masking_layer(ReL89623, 2, Mas32007), 
LRes88294 = reshape_layer(Mas32007, [4, 6, 12], Res88294), 
LRes76227 = reshape_layer(Res88294, [4, 72], Res76227), 
LDot71802 = dot_layer(Con22523,Res76227, 2, 2, Dot71802), 
exec_layers([LAdd44005,LRes12516,LSim63692,LRes91023,LCon22523,LZer36190,LReL89623,LMas32007,LRes88294,LRes76227,LDot71802],["Add44005","Res12516","Sim63692","Res91023","Con22523","Zer36190","ReL89623","Mas32007","Res88294","Res76227","Dot71802"],Dot71802,"Dot71802")

Actual (Unparsed): [[[-1970.9061748, -1870.1264994, -1870.1960017, -1970.9061748], [-1979.5717869, -1887.2860187, -1891.5750783, -1979.5717869], [-1923.7833935, -1816.8315298, -1822.6613889, -1923.7833935]]]

Expected (Unparsed): [[[-1970.9061601865712,-1870.126485543196,-1870.1959886736122,-1970.9061601865712],[-1979.5717834899224,-1887.2860156477814,-1891.5750764051663,-1979.5717834899224],[-1923.7833917553469,-1816.8315285594172,-1822.6613883943842,-1923.7833917553469]]]

Actual:   [[[-1970.9061, -1870.1264, -1870.196, -1970.9061], [-1979.5717, -1887.286, -1891.575, -1979.5717], [-1923.7833, -1816.8315, -1822.6613, -1923.7833]]]

Expected: [[[-1970.9061, -1870.1264, -1870.1959, -1970.9061], [-1979.5717, -1887.286, -1891.575, -1979.5717], [-1923.7833, -1816.8315, -1822.6613, -1923.7833]]]