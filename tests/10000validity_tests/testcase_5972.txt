import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con11431 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Add14323 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in1Add14323 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in0Con72000 = tf.keras.layers.Input(shape=([1, 2]))

Con11431 = keras.layers.Conv2D(3, (1, 1),strides=(1, 1), padding='valid', dilation_rate=(1, 1), name = 'Con11431', )(in0Con11431)
Res15850 = keras.layers.Reshape((1, 6), name = 'Res15850', )(Con11431)
Add14323 = keras.layers.Add(name = 'Add14323', )([in0Add14323,in1Add14323])
Res97298 = keras.layers.Reshape((2, 1, 4), name = 'Res97298', )(Add14323)
Res21828 = keras.layers.Reshape((2, 4), name = 'Res21828', )(Res97298)
Sep33858 = keras.layers.SeparableConv1D(4, (1),strides=(2), padding='valid', name = 'Sep33858', )(Res21828)
Con72000 = keras.layers.Concatenate(axis=2, name = 'Con72000', )([Sep33858,in0Con72000])
Mul68063 = keras.layers.Multiply(name = 'Mul68063', )([Res15850,Con72000])
model = tf.keras.models.Model(inputs=[in0Con11431,in0Add14323,in1Add14323,in0Con72000], outputs=Mul68063)
w = model.get_layer('Con11431').get_weights() 
w[0] = np.array([[[[0.6344, 0.7694, 0.0191], [0.6682, 0.0206, 0.5832]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con11431').set_weights(w) 
w = model.get_layer('Sep33858').get_weights() 
w[0] = np.array([[[0.3032], [0.6971], [0.3086], [0.8696]]])
w[1] = np.array([[[0.9528, 0.9941, 0.9499, 0.2652], [0.8267, 0.321, 0.0978, 0.7279], [0.7462, 0.7414, 0.6136, 0.6724], [0.1519, 0.3659, 0.9758, 0.924]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep33858').set_weights(w) 
in0Con11431 = tf.constant([[[[0.1006, 0.8621], [0.9372, 0.5166]]]])
in0Add14323 = tf.constant([[[[[0.9506, 0.2889], [0.9479, 0.7837]]], [[[0.4543, 0.8573], [0.4518, 0.9638]]]]])
in1Add14323 = tf.constant([[[[[0.8295, 0.3157], [0.9029, 0.7316]]], [[[0.9457, 0.2631], [0.2391, 0.3088]]]]])
in0Con72000 = tf.constant([[[0.267, 0.8913]]])
print (np.array2string(model.predict([in0Con11431,in0Add14323,in1Add14323,in0Con72000],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul68063.png')

LCon11431 = conv2D_layer([[[[0.1006, 0.8621], [0.9372, 0.5166]]]], 1, 1,[[[[0.6344, 0.7694, 0.0191], [0.6682, 0.0206, 0.5832]]]],[0, 0, 0], 1, 1, false, 1, 1, Con11431), 
LRes15850 = reshape_layer(Con11431, [1, 6], Res15850), 
LAdd14323 = add_layer([[[[[[0.9506, 0.2889], [0.9479, 0.7837]]], [[[0.4543, 0.8573], [0.4518, 0.9638]]]]], [[[[[0.8295, 0.3157], [0.9029, 0.7316]]], [[[0.9457, 0.2631], [0.2391, 0.3088]]]]]], Add14323), 
LRes97298 = reshape_layer(Add14323, [2, 1, 4], Res97298), 
LRes21828 = reshape_layer(Res97298, [2, 4], Res21828), 
LSep33858 = separable_conv1D_layer(Res21828, 1,[[[[0.3032], [0.6971], [0.3086], [0.8696]]],[[[0.9528, 0.9941, 0.9499, 0.2652], [0.8267, 0.321, 0.0978, 0.7279], [0.7462, 0.7414, 0.6136, 0.6724], [0.1519, 0.3659, 0.9758, 0.924]]]],[0, 0, 0, 0], 2, false, Sep33858), 
LCon72000 = concatenate_layer([Sep33858,[[[0.267, 0.8913]]]], 2, Con72000), 
LMul68063 = multiply_layer([Res15850,Con72000], Mul68063), 
exec_layers([LCon11431,LRes15850,LAdd14323,LRes97298,LRes21828,LSep33858,LCon72000,LMul68063],["Con11431","Res15850","Add14323","Res97298","Res21828","Sep33858","Con72000","Mul68063"],Mul68063,"Mul68063")

Actual (Unparsed): [[[0.9527971, 0.1501103, 1.1053818, 1.9279254, 0.1953702, 0.2844866]]]

Expected (Unparsed): [[[0.9527971420879094,0.15011029216305244,1.1053817546042513,1.9279254364812777,0.19537021187999998,0.28448659573199997]]]

Actual:   [[[0.9528, 0.1502, 1.1054, 1.928, 0.1954, 0.2845]]]

Expected: [[[0.9528, 0.1502, 1.1054, 1.928, 0.1954, 0.2845]]]