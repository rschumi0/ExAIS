import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub68164 = tf.keras.layers.Input(shape=([2, 2, 3, 3]))
in1Sub68164 = tf.keras.layers.Input(shape=([2, 2, 3, 3]))
in0Con66303 = tf.keras.layers.Input(shape=([1, 2]))
in0Con32343 = tf.keras.layers.Input(shape=([2, 15]))

Sub68164 = keras.layers.Subtract(name = 'Sub68164', )([in0Sub68164,in1Sub68164])
Res23524 = keras.layers.Reshape((2, 2, 9), name = 'Res23524', )(Sub68164)
Res30904 = keras.layers.Reshape((2, 18), name = 'Res30904', )(Res23524)
Con66303 = keras.layers.Conv1D(3, (1),strides=(1), padding='valid', dilation_rate=(1), name = 'Con66303', )(in0Con66303)
Zer98171 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer98171', )(Con66303)
Con32343 = keras.layers.Concatenate(axis=2, name = 'Con32343', )([Zer98171,in0Con32343])
Min7595 = keras.layers.Minimum(name = 'Min7595', )([Res30904,Con32343])
Res3798 = keras.layers.Reshape((2, 18, 1), name = 'Res3798', )(Min7595)
Res67032 = keras.layers.Reshape((2, 18, 1, 1), name = 'Res67032', )(Res3798)
Up_43558 = keras.layers.UpSampling3D(size=(2, 2, 1), name = 'Up_43558', )(Res67032)
Res89289 = keras.layers.Reshape((4, 36, 1), name = 'Res89289', )(Up_43558)
Res11289 = keras.layers.Reshape((4, 36), name = 'Res11289', )(Res89289)
Con76904 = keras.layers.Conv1D(2, (2),strides=(1), padding='same', dilation_rate=(1), name = 'Con76904', )(Res11289)
model = tf.keras.models.Model(inputs=[in0Sub68164,in1Sub68164,in0Con66303,in0Con32343], outputs=Con76904)
w = model.get_layer('Con66303').get_weights() 
w[0] = np.array([[[0.529, 0.4807, 0.4491], [0.9367, 0.8314, 0.1988]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con66303').set_weights(w) 
w = model.get_layer('Con76904').get_weights() 
w[0] = np.array([[[0.0342, 0.4955], [0.8051, 0.5269], [0.5031, 0.7505], [0.0148, 0.7013], [0.686, 0.4563], [0.7357, 0.6452], [0.8196, 0.8549], [0.6823, 0.3219], [0.9328, 0.1257], [0.0324, 0.4772], [0.4607, 0.9696], [0.1002, 0.8146], [0.2919, 0.4808], [0.9246, 0.8027], [0.7463, 0.4255], [0.7756, 0.4477], [0.9337, 0.7346], [0.5491, 0.6888], [0.1812, 0.2248], [0.7716, 0.4227], [0.7296, 0.3059], [0.4701, 0.5512], [0.7025, 0.7097], [0.4733, 0.8576], [0.4257, 0.0776], [0.8086, 0.966], [0.538, 0.5831], [0.7312, 0.1149], [0.9762, 0.6343], [0.5815, 0.9837], [0.8363, 0.0979], [0.1062, 0.3534], [0.323, 0.4201], [0.0948, 0.9515], [0.4786, 0.4806], [0.1873, 0.4345]], [[0.1546, 0.0074], [0.4912, 0.097], [0.7322, 0.9074], [0.2052, 0.5584], [0.4317, 0.921], [0.7986, 0.3763], [0.6566, 0.5973], [0.4144, 0.2634], [0.7136, 0.7047], [0.0768, 0.342], [0.4208, 0.8391], [0.9676, 0.663], [0.5696, 0.1756], [0.5112, 0.0335], [0.9438, 0.0194], [0.2526, 0.0536], [0.6129, 0.0549], [0.5501, 0.145], [0.5172, 0.9677], [0.9164, 0.2682], [0.9397, 0.4184], [0.4337, 0.9736], [0.3204, 0.1846], [0.0494, 0.4074], [0.0107, 0.6565], [0.7124, 0.9026], [0.9886, 0.7693], [0.2496, 0.8261], [0.2583, 0.8868], [0.6024, 0.4233], [0.6442, 0.1143], [0.5432, 0.504], [0.9563, 0.0088], [0.2755, 0.9491], [0.0504, 0.6819], [0.3815, 0.1793]]])
w[1] = np.array([0, 0])
model.get_layer('Con76904').set_weights(w) 
in0Sub68164 = tf.constant([[[[[0.9988, 0.1481, 0.277], [0.1957, 0.0594, 0.2726], [0.5919, 0.4767, 0.5195]], [[0.3536, 0.879, 0.6412], [0.9344, 0.5449, 0.8436], [0.8026, 0.3966, 0.6134]]], [[[0.6764, 0.3629, 0.2259], [0.56, 0.8687, 0.1665], [0.6547, 0.5444, 0.8472]], [[0.1282, 0.5216, 0.0543], [0.2216, 0.8093, 0.4655], [0.3077, 0.3782, 0.0484]]]]])
in1Sub68164 = tf.constant([[[[[0.7533, 0.3366, 0.7391], [0.2892, 0.6658, 0.0654], [0.2565, 0.6891, 0.3172]], [[0.9657, 0.6137, 0.4415], [0.8909, 0.5482, 0.1636], [0.0006, 0.5368, 0.0338]]], [[[0.8538, 0.057, 0.5919], [0.036, 0.2544, 0.1804], [0.3654, 0.9819, 0.3396]], [[0.02, 0.4574, 0.3014], [0.8528, 0.8324, 0.4694], [0.1217, 0.9294, 0.8922]]]]])
in0Con66303 = tf.constant([[[0.0091, 0.3176]]])
in0Con32343 = tf.constant([[[0.9338, 0.7896, 0.1044, 0.4003, 0.3295, 0.1372, 0.4838, 0.1894, 0.5029, 0.1519, 0.6532, 0.8162, 0.6916, 0.8085, 0.2339], [0.8112, 0.3349, 0.1688, 0.1138, 0.3433, 0.5793, 0.4264, 0.0161, 0.3857, 0.1448, 0.0673, 0.0613, 0.9946, 0.8577, 0.4954]]])
print (np.array2string(model.predict([in0Sub68164,in1Sub68164,in0Con66303,in0Con32343],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con76904.png')

LSub68164 = subtract_layer([[[[[0.9988, 0.1481, 0.277], [0.1957, 0.0594, 0.2726], [0.5919, 0.4767, 0.5195]], [[0.3536, 0.879, 0.6412], [0.9344, 0.5449, 0.8436], [0.8026, 0.3966, 0.6134]]], [[[0.6764, 0.3629, 0.2259], [0.56, 0.8687, 0.1665], [0.6547, 0.5444, 0.8472]], [[0.1282, 0.5216, 0.0543], [0.2216, 0.8093, 0.4655], [0.3077, 0.3782, 0.0484]]]]], [[[[[0.7533, 0.3366, 0.7391], [0.2892, 0.6658, 0.0654], [0.2565, 0.6891, 0.3172]], [[0.9657, 0.6137, 0.4415], [0.8909, 0.5482, 0.1636], [0.0006, 0.5368, 0.0338]]], [[[0.8538, 0.057, 0.5919], [0.036, 0.2544, 0.1804], [0.3654, 0.9819, 0.3396]], [[0.02, 0.4574, 0.3014], [0.8528, 0.8324, 0.4694], [0.1217, 0.9294, 0.8922]]]]], Sub68164), 
LRes23524 = reshape_layer(Sub68164, [2, 2, 9], Res23524), 
LRes30904 = reshape_layer(Res23524, [2, 18], Res30904), 
LCon66303 = conv1D_layer([[[0.0091, 0.3176]]], 1,[[[0.529, 0.4807, 0.4491], [0.9367, 0.8314, 0.1988]]],[0, 0, 0], 1, false, 1, Con66303), 
LZer98171 = zero_padding1D_layer(Con66303, 1, 0, Zer98171), 
LCon32343 = concatenate_layer([Zer98171,[[[0.9338, 0.7896, 0.1044, 0.4003, 0.3295, 0.1372, 0.4838, 0.1894, 0.5029, 0.1519, 0.6532, 0.8162, 0.6916, 0.8085, 0.2339], [0.8112, 0.3349, 0.1688, 0.1138, 0.3433, 0.5793, 0.4264, 0.0161, 0.3857, 0.1448, 0.0673, 0.0613, 0.9946, 0.8577, 0.4954]]]], 2, Con32343), 
LMin7595 = minimum_layer([Res30904,Con32343], Min7595), 
LRes3798 = reshape_layer(Min7595, [2, 18, 1], Res3798), 
LRes67032 = reshape_layer(Res3798, [2, 18, 1, 1], Res67032), 
LUp_43558 = up_sampling3D_layer(Res67032, 2, 2, 1, Up_43558), 
LRes89289 = reshape_layer(Up_43558, [4, 36, 1], Res89289), 
LRes11289 = reshape_layer(Res89289, [4, 36], Res11289), 
LCon76904 = conv1D_layer(Res11289, 2,[[[0.0342, 0.4955], [0.8051, 0.5269], [0.5031, 0.7505], [0.0148, 0.7013], [0.686, 0.4563], [0.7357, 0.6452], [0.8196, 0.8549], [0.6823, 0.3219], [0.9328, 0.1257], [0.0324, 0.4772], [0.4607, 0.9696], [0.1002, 0.8146], [0.2919, 0.4808], [0.9246, 0.8027], [0.7463, 0.4255], [0.7756, 0.4477], [0.9337, 0.7346], [0.5491, 0.6888], [0.1812, 0.2248], [0.7716, 0.4227], [0.7296, 0.3059], [0.4701, 0.5512], [0.7025, 0.7097], [0.4733, 0.8576], [0.4257, 0.0776], [0.8086, 0.966], [0.538, 0.5831], [0.7312, 0.1149], [0.9762, 0.6343], [0.5815, 0.9837], [0.8363, 0.0979], [0.1062, 0.3534], [0.323, 0.4201], [0.0948, 0.9515], [0.4786, 0.4806], [0.1873, 0.4345]], [[0.1546, 0.0074], [0.4912, 0.097], [0.7322, 0.9074], [0.2052, 0.5584], [0.4317, 0.921], [0.7986, 0.3763], [0.6566, 0.5973], [0.4144, 0.2634], [0.7136, 0.7047], [0.0768, 0.342], [0.4208, 0.8391], [0.9676, 0.663], [0.5696, 0.1756], [0.5112, 0.0335], [0.9438, 0.0194], [0.2526, 0.0536], [0.6129, 0.0549], [0.5501, 0.145], [0.5172, 0.9677], [0.9164, 0.2682], [0.9397, 0.4184], [0.4337, 0.9736], [0.3204, 0.1846], [0.0494, 0.4074], [0.0107, 0.6565], [0.7124, 0.9026], [0.9886, 0.7693], [0.2496, 0.8261], [0.2583, 0.8868], [0.6024, 0.4233], [0.6442, 0.1143], [0.5432, 0.504], [0.9563, 0.0088], [0.2755, 0.9491], [0.0504, 0.6819], [0.3815, 0.1793]]],[0, 0], 1, true, 1, Con76904), 
exec_layers([LSub68164,LRes23524,LRes30904,LCon66303,LZer98171,LCon32343,LMin7595,LRes3798,LRes67032,LUp_43558,LRes89289,LRes11289,LCon76904],["Sub68164","Res23524","Res30904","Con66303","Zer98171","Con32343","Min7595","Res3798","Res67032","Up_43558","Res89289","Res11289","Con76904"],Con76904,"Con76904")

Actual (Unparsed): [[[0.5098938, 0.6459107], [0.0612253, -0.4572953], [-1.3437754, -2.7250954], [-0.8019840, -1.3433322]]]

Expected (Unparsed): [[[0.5098937800000005,0.6459107400000004],[0.06122533917399986,-0.457295178742],[-1.3437752823470002,-2.725095295623999],[-0.8019839115210002,-1.3433320968819997]]]

Actual:   [[[0.5099, 0.646], [0.0613, -0.4572], [-1.3437, -2.725], [-0.8019, -1.3433]]]

Expected: [[[0.5099, 0.646], [0.0613, -0.4572], [-1.3437, -2.725], [-0.8019, -1.3433]]]