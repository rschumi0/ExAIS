import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sof92779 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))
in0Con38594 = tf.keras.layers.Input(shape=([2, 4, 4, 3]))
in0Con79801 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))

Sof92779 = keras.layers.Softmax(axis=1, name = 'Sof92779', input_shape=(1, 2, 2, 2))(in0Sof92779)
Res40884 = keras.layers.Reshape((1, 2, 4), name = 'Res40884', )(Sof92779)
Up_27842 = keras.layers.UpSampling2D(size=(2, 2), name = 'Up_27842', )(Res40884)
Res11726 = keras.layers.Reshape((2, 4, 4, 1), name = 'Res11726', )(Up_27842)
Con38594 = keras.layers.Concatenate(axis=4, name = 'Con38594', )([Res11726,in0Con38594])
Con79801 = keras.layers.Conv3D(4, (1, 1, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con79801', )(in0Con79801)
Zer11867 = keras.layers.ZeroPadding3D(padding=((1, 0), (2, 0), (3, 0)), name = 'Zer11867', )(Con79801)
Sub98199 = keras.layers.Subtract(name = 'Sub98199', )([Con38594,Zer11867])
Den24421 = keras.layers.Dense(3,name = 'Den24421', )(Sub98199)
model = tf.keras.models.Model(inputs=[in0Sof92779,in0Con38594,in0Con79801], outputs=Den24421)
w = model.get_layer('Con79801').get_weights() 
w[0] = np.array([[[[[0.2318, 0.3625, 0.7883, 0.9585]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con79801').set_weights(w) 
w = model.get_layer('Den24421').get_weights() 
w[0] = np.array([[0.6597, 0.4491, 0.774], [0.3504, 0.1047, 0.1062], [0.7071, 0.6351, 0.5721], [0.5133, 0.1723, 0.5482]])
w[1] = np.array([0.1096, 0.7934, 0.5167])
model.get_layer('Den24421').set_weights(w) 
in0Sof92779 = tf.constant([[[[[0.3153, 0.928], [0.6162, 0.6902]], [[0.0567, 0.386], [0.4728, 0.446]]]]])
in0Con38594 = tf.constant([[[[[0.0957, 0.3423, 0.8525], [0.6975, 0.6319, 0.7575], [0.0253, 0.7223, 0.5423], [0.6756, 0.8207, 0.6533]], [[0.1703, 0.7827, 0.6415], [0.3195, 0.3444, 0.5059], [0.3372, 0.5428, 0.9656], [0.6588, 0.793, 0.691]], [[0.9219, 0.8511, 0.5576], [0.3825, 0.6155, 0.7331], [0.2734, 0.1657, 0.9186], [0.5303, 0.4758, 0.2662]], [[0.6888, 0.7376, 0.4], [0.3063, 0.0682, 0.2887], [0.8006, 0.2318, 0.6677], [0.9943, 0.4279, 0.5553]]], [[[0.3939, 0.552, 0.7276], [0.4208, 0.1162, 0.9693], [0.5345, 0.9255, 0.5888], [0.8133, 0.0193, 0.5987]], [[0.0467, 0.305, 0.9085], [0.9281, 0.6741, 0.9052], [0.051, 0.3507, 0.7077], [0.7097, 0.7305, 0.1787]], [[0.2844, 0.6634, 0.7341], [0.5206, 0.2649, 0.3327], [0.0795, 0.373, 0.1758], [0.7336, 0.4763, 0.7093]], [[0.0986, 0.5038, 0.0495], [0.5739, 0.8053, 0.5265], [0.5899, 0.8979, 0.6902], [0.968, 0.6134, 0.0008]]]]])
in0Con79801 = tf.constant([[[[[0.3932]], [[0.2189]]]]])
print (np.array2string(model.predict([in0Sof92779,in0Con38594,in0Con79801],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Den24421.png')

LSof92779 = softmax_layer([[[[[0.3153, 0.928], [0.6162, 0.6902]], [[0.0567, 0.386], [0.4728, 0.446]]]]], 1, Sof92779), 
LRes40884 = reshape_layer(Sof92779, [1, 2, 4], Res40884), 
LUp_27842 = up_sampling2D_layer(Res40884, 2, 2, Up_27842), 
LRes11726 = reshape_layer(Up_27842, [2, 4, 4, 1], Res11726), 
LCon38594 = concatenate_layer([Res11726,[[[[[0.0957, 0.3423, 0.8525], [0.6975, 0.6319, 0.7575], [0.0253, 0.7223, 0.5423], [0.6756, 0.8207, 0.6533]], [[0.1703, 0.7827, 0.6415], [0.3195, 0.3444, 0.5059], [0.3372, 0.5428, 0.9656], [0.6588, 0.793, 0.691]], [[0.9219, 0.8511, 0.5576], [0.3825, 0.6155, 0.7331], [0.2734, 0.1657, 0.9186], [0.5303, 0.4758, 0.2662]], [[0.6888, 0.7376, 0.4], [0.3063, 0.0682, 0.2887], [0.8006, 0.2318, 0.6677], [0.9943, 0.4279, 0.5553]]], [[[0.3939, 0.552, 0.7276], [0.4208, 0.1162, 0.9693], [0.5345, 0.9255, 0.5888], [0.8133, 0.0193, 0.5987]], [[0.0467, 0.305, 0.9085], [0.9281, 0.6741, 0.9052], [0.051, 0.3507, 0.7077], [0.7097, 0.7305, 0.1787]], [[0.2844, 0.6634, 0.7341], [0.5206, 0.2649, 0.3327], [0.0795, 0.373, 0.1758], [0.7336, 0.4763, 0.7093]], [[0.0986, 0.5038, 0.0495], [0.5739, 0.8053, 0.5265], [0.5899, 0.8979, 0.6902], [0.968, 0.6134, 0.0008]]]]]], 4, Con38594), 
LCon79801 = conv3D_layer([[[[[0.3932]], [[0.2189]]]]], 1, 1, 1,[[[[[0.2318, 0.3625, 0.7883, 0.9585]]]]],[0, 0, 0, 0], 1, 1, 1, false, 1, 1, 1, Con79801), 
LZer11867 = zero_padding3D_layer(Con79801, 1, 0, 2, 0, 3, 0, Zer11867), 
LSub98199 = subtract_layer(Con38594,Zer11867, Sub98199), 
LDen24421 = dense_layer(Sub98199, [[0.6597, 0.4491, 0.774], [0.3504, 0.1047, 0.1062], [0.7071, 0.6351, 0.5721], [0.5133, 0.1723, 0.5482]],[0.1096, 0.7934, 0.5167], Den24421), 
exec_layers([LSof92779,LRes40884,LUp_27842,LRes11726,LCon38594,LCon79801,LZer11867,LSub98199,LDen24421],["Sof92779","Res40884","Up_27842","Res11726","Con38594","Con79801","Zer11867","Sub98199","Den24421"],Den24421,"Den24421")

Actual (Unparsed): [[[[[1.4824619, 1.6168003, 1.9640337], [1.8493452, 1.8473652, 2.1415460], [1.5672660, 1.7973199, 2.0039035], [1.9216861, 1.9470255, 2.1901102]], [[1.7117022, 1.8679536, 2.1082388], [1.3844565, 1.5818467, 1.7989965], [1.7669112, 1.7889100, 2.1663885], [1.9155641, 1.9341699, 2.1931460]], [[1.9803627, 1.9756310, 2.1811964], [1.7148483, 1.7997649, 2.0853345], [1.4537832, 1.5346358, 1.9181086], [1.4281958, 1.6460693, 1.7651539]], [[1.7375325, 1.8519871, 2.0051115], [1.0730415, 1.3676264, 1.5205116], [1.5564664, 1.5885837, 1.8743696], [1.7053063, 1.7140407, 1.9455117]]], [[[1.6711188, 1.7596820, 2.0472017], [1.4964550, 1.5273668, 1.9332372], [1.9132409, 1.9876974, 2.1997226], [1.3752401, 1.4430659, 1.7163213]], [[1.4676622, 1.5976295, 1.9681898], [2.0358015, 1.9237589, 2.2711475], [1.3984128, 1.5925060, 1.8847128], [1.6262421, 1.8115361, 1.8819525]], [[1.7148574, 1.8200874, 2.1028680], [1.3098040, 1.5225690, 1.6799232], [1.1511432, 1.5180063, 1.6089098], [1.2045310, 1.4263702, 1.5603206]], [[1.1854948, 1.5813156, 1.6165312], [1.8100746, 1.9047493, 2.1009876], [1.9651857, 1.9934403, 2.2454036], [1.2516397, 1.5567185, 1.4834238]]]]]

Expected (Unparsed): [[[[[1.48246186,1.6168002700000002,1.9640336700000005],[1.84934524,1.8473651899999999,2.1415459900000005],[1.5672660399999998,1.79731993,2.0039035500000004],[1.9216860999999998,1.94702548,2.19011025]],[[1.7117022399999997,1.86795363,2.1082388300000003],[1.3844565099999997,1.5818466599999998,1.7989965200000004],[1.7669112399999998,1.7889099999999998,2.1663884400000004],[1.9155641199999998,1.9341699599999997,2.19314606]],[[1.98036265,1.97563102,2.18119641],[1.71484828,1.79976493,2.0853344700000003],[1.45378321,1.5346358299999998,1.9181085700000002],[1.42819576,1.6460692499999998,1.7651538800000002]],[[1.73753248,1.85198712,2.0051115200000003],[1.07304145,1.36762644,1.5205116200000004],[1.5564664299999997,1.58858371,1.8743696400000003],[1.7053063,1.71404069,1.9455117100000001]]],[[[1.67111884,1.75968201,2.0472017000000005],[1.49645503,1.52736677,1.9332372400000002],[1.91324089,1.98769744,2.1997226100000002],[1.3752400599999999,1.4430659499999998,1.7163213300000002]],[[1.46766223,1.59762954,1.9681897400000004],[2.0358015099999998,1.9237589400000001,2.2711474700000003],[1.39841278,1.5925059799999999,1.8847128100000001],[1.62624214,1.81153615,1.8819525300000002]],[[1.71485743,1.8200874500000002,2.10286804],[1.3098039399999999,1.52256902,1.67992315],[1.1511432400000001,1.51800629,1.60890976],[1.204531019392,1.4263702432679999,1.560320636444]],[[1.18549477,1.5813156499999999,1.6165312],[1.8100746399999998,1.90474931,2.1009876100000002],[1.9651857099999999,1.99344028,2.2454036100000003],[1.251639700984,1.556718537211,1.4834237789129998]]]]]

Actual:   [[[[[1.4825, 1.6169, 1.9641], [1.8494, 1.8474, 2.1416], [1.5673, 1.7974, 2.004], [1.9217, 1.9471, 2.1902]], [[1.7118, 1.868, 2.1083], [1.3845, 1.5819, 1.799], [1.767, 1.789, 2.1664], [1.9156, 1.9342, 2.1932]], [[1.9804, 1.9757, 2.1812], [1.7149, 1.7998, 2.0854], [1.4538, 1.5347, 1.9182], [1.4282, 1.6461, 1.7652]], [[1.7376, 1.852, 2.0052], [1.0731, 1.3677, 1.5206], [1.5565, 1.5886, 1.8744], [1.7054, 1.7141, 1.9456]]], [[[1.6712, 1.7597, 2.0473], [1.4965, 1.5274, 1.9333], [1.9133, 1.9877, 2.1998], [1.3753, 1.4431, 1.7164]], [[1.4677, 1.5977, 1.9682], [2.0359, 1.9238, 2.2712], [1.3985, 1.5926, 1.8848], [1.6263, 1.8116, 1.882]], [[1.7149, 1.8201, 2.1029], [1.3099, 1.5226, 1.68], [1.1512, 1.5181, 1.609], [1.2046, 1.4264, 1.5604]], [[1.1855, 1.5814, 1.6166], [1.8101, 1.9048, 2.101], [1.9652, 1.9935, 2.2455], [1.2517, 1.5568, 1.4835]]]]]

Expected: [[[[[1.4825, 1.6169, 1.9641], [1.8494, 1.8474, 2.1416], [1.5673, 1.7974, 2.004], [1.9217, 1.9471, 2.1902]], [[1.7118, 1.868, 2.1083], [1.3845, 1.5819, 1.799], [1.767, 1.789, 2.1664], [1.9156, 1.9342, 2.1932]], [[1.9804, 1.9757, 2.1812], [1.7149, 1.7998, 2.0854], [1.4538, 1.5347, 1.9182], [1.4282, 1.6461, 1.7652]], [[1.7376, 1.852, 2.0052], [1.0731, 1.3677, 1.5206], [1.5565, 1.5886, 1.8744], [1.7054, 1.7141, 1.9456]]], [[[1.6712, 1.7597, 2.0473], [1.4965, 1.5274, 1.9333], [1.9133, 1.9877, 2.1998], [1.3753, 1.4431, 1.7164]], [[1.4677, 1.5977, 1.9682], [2.0359, 1.9238, 2.2712], [1.3985, 1.5926, 1.8848], [1.6263, 1.8116, 1.882]], [[1.7149, 1.8201, 2.1029], [1.3099, 1.5226, 1.68], [1.1512, 1.5181, 1.609], [1.2046, 1.4264, 1.5604]], [[1.1855, 1.5814, 1.6166], [1.8101, 1.9048, 2.101], [1.9652, 1.9935, 2.2455], [1.2517, 1.5568, 1.4835]]]]]