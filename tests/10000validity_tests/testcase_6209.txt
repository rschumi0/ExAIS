import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave82344 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Ave82344 = tf.keras.layers.Input(shape=([2, 2, 2]))

Ave82344 = keras.layers.Average(name = 'Ave82344', )([in0Ave82344,in1Ave82344])
Res21672 = keras.layers.Reshape((2, 2, 2, 1), name = 'Res21672', )(Ave82344)
Up_46863 = keras.layers.UpSampling3D(size=(2, 2, 1), name = 'Up_46863', )(Res21672)
model = tf.keras.models.Model(inputs=[in0Ave82344,in1Ave82344], outputs=Up_46863)
in0Ave82344 = tf.constant([[[[0.9854, 0.0739], [0.9815, 0.3828]], [[0.0039, 0.1536], [0.5233, 0.28]]]])
in1Ave82344 = tf.constant([[[[0.7636, 0.8561], [0.7761, 0.33]], [[0.1209, 0.4119], [0.4436, 0.4346]]]])
print (np.array2string(model.predict([in0Ave82344,in1Ave82344],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Up_46863.png')

LAve82344 = average_layer([[[[[0.9854, 0.0739], [0.9815, 0.3828]], [[0.0039, 0.1536], [0.5233, 0.28]]]], [[[[0.7636, 0.8561], [0.7761, 0.33]], [[0.1209, 0.4119], [0.4436, 0.4346]]]]], Ave82344), 
LRes21672 = reshape_layer(Ave82344, [2, 2, 2, 1], Res21672), 
LUp_46863 = up_sampling3D_layer(Res21672, 2, 2, 1, Up_46863), 
exec_layers([LAve82344,LRes21672,LUp_46863],["Ave82344","Res21672","Up_46863"],Up_46863,"Up_46863")

Actual (Unparsed): [[[[[0.8745000], [0.4650000]], [[0.8745000], [0.4650000]], [[0.8788000], [0.3564000]], [[0.8788000], [0.3564000]]], [[[0.8745000], [0.4650000]], [[0.8745000], [0.4650000]], [[0.8788000], [0.3564000]], [[0.8788000], [0.3564000]]], [[[0.0624000], [0.2827500]], [[0.0624000], [0.2827500]], [[0.4834500], [0.3573000]], [[0.4834500], [0.3573000]]], [[[0.0624000], [0.2827500]], [[0.0624000], [0.2827500]], [[0.4834500], [0.3573000]], [[0.4834500], [0.3573000]]]]]

Expected (Unparsed): [[[[[0.8745],[0.46499999999999997]],[[0.8745],[0.46499999999999997]],[[0.8788],[0.3564]],[[0.8788],[0.3564]]],[[[0.8745],[0.46499999999999997]],[[0.8745],[0.46499999999999997]],[[0.8788],[0.3564]],[[0.8788],[0.3564]]],[[[0.0624],[0.28275]],[[0.0624],[0.28275]],[[0.48345],[0.3573]],[[0.48345],[0.3573]]],[[[0.0624],[0.28275]],[[0.0624],[0.28275]],[[0.48345],[0.3573]],[[0.48345],[0.3573]]]]]

Actual:   [[[[[0.8745], [0.465]], [[0.8745], [0.465]], [[0.8788], [0.3564]], [[0.8788], [0.3564]]], [[[0.8745], [0.465]], [[0.8745], [0.465]], [[0.8788], [0.3564]], [[0.8788], [0.3564]]], [[[0.0624], [0.2828]], [[0.0624], [0.2828]], [[0.4835], [0.3573]], [[0.4835], [0.3573]]], [[[0.0624], [0.2828]], [[0.0624], [0.2828]], [[0.4835], [0.3573]], [[0.4835], [0.3573]]]]]

Expected: [[[[[0.8745], [0.465]], [[0.8745], [0.465]], [[0.8788], [0.3564]], [[0.8788], [0.3564]]], [[[0.8745], [0.465]], [[0.8745], [0.465]], [[0.8788], [0.3564]], [[0.8788], [0.3564]]], [[[0.0624], [0.2828]], [[0.0624], [0.2828]], [[0.4835], [0.3573]], [[0.4835], [0.3573]]], [[[0.0624], [0.2828]], [[0.0624], [0.2828]], [[0.4835], [0.3573]], [[0.4835], [0.3573]]]]]