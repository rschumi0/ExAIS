import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dep27189 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Con31116 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Min22388 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Min22388 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Ave22258 = tf.keras.layers.Input(shape=([1, 2]))
in0Con57707 = tf.keras.layers.Input(shape=([2, 3, 2]))
in0Sub10807 = tf.keras.layers.Input(shape=([2, 3, 3, 2]))
in1Sub10807 = tf.keras.layers.Input(shape=([2, 3, 3, 2]))

Dep27189 = keras.layers.DepthwiseConv2D((1, 2),strides=(1, 1), padding='same', name = 'Dep27189', )(in0Dep27189)
Res93274 = keras.layers.Reshape((1, 2, 2, 1), name = 'Res93274', )(Dep27189)
Zer38340 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (0, 0)), name = 'Zer38340', )(Res93274)
Con31116 = keras.layers.Concatenate(axis=4, name = 'Con31116', )([Zer38340,in0Con31116])
Min22388 = keras.layers.Minimum(name = 'Min22388', )([in0Min22388,in1Min22388])
Min58636 = keras.layers.Minimum(name = 'Min58636', )([Con31116,Min22388])
Res91050 = keras.layers.Reshape((2, 2, 4), name = 'Res91050', )(Min58636)
Cro51480 = keras.layers.Cropping2D(cropping=((1, 0), (1, 0)), name = 'Cro51480', )(Res91050)
Zer21103 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer21103', )(Cro51480)
Ave22258 = keras.layers.AveragePooling1D(pool_size=(1), name = 'Ave22258', )(in0Ave22258)
Res49189 = keras.layers.Reshape((1, 2, 1), name = 'Res49189', )(Ave22258)
Res82722 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res82722', )(Res49189)
Con7410 = keras.layers.Conv3DTranspose(2, (1, 2, 1),strides=(1, 1, 1), padding='same', name = 'Con7410', )(Res82722)
Res62258 = keras.layers.Reshape((1, 2, 2), name = 'Res62258', )(Con7410)
Zer3027 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer3027', )(Res62258)
Con57707 = keras.layers.Concatenate(axis=3, name = 'Con57707', )([Zer3027,in0Con57707])
Sub10807 = keras.layers.Subtract(name = 'Sub10807', )([in0Sub10807,in1Sub10807])
Res72123 = keras.layers.Reshape((2, 3, 6), name = 'Res72123', )(Sub10807)
Con66235 = keras.layers.Conv2DTranspose(3, (2, 2),strides=(2, 1), padding='same', name = 'Con66235', )(Res72123)
Loc81414 = keras.layers.LocallyConnected2D(4, (3, 1),strides=(1, 1), name = 'Loc81414', )(Con66235)
Sub45972 = keras.layers.Subtract(name = 'Sub45972', )([Con57707,Loc81414])
Mul90085 = keras.layers.Multiply(name = 'Mul90085', )([Zer21103,Sub45972])
model = tf.keras.models.Model(inputs=[in0Dep27189,in0Con31116,in0Min22388,in1Min22388,in0Ave22258,in0Con57707,in0Sub10807,in1Sub10807], outputs=Mul90085)
w = model.get_layer('Dep27189').get_weights() 
w[0] = np.array([[[[0.7608], [0.889]], [[0.076], [0.3493]]]])
w[1] = np.array([0, 0])
model.get_layer('Dep27189').set_weights(w) 
w = model.get_layer('Con7410').get_weights() 
w[0] = np.array([[[[[0.3411], [0.0805]]], [[[0.3903], [0.4627]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con7410').set_weights(w) 
w = model.get_layer('Con66235').get_weights() 
w[0] = np.array([[[[0.0626, 0.1506, 0.7867, 0.8575, 0.7755, 0.3183], [0.58, 0.0521, 0.7065, 0.3872, 0.5368, 0.924], [0.4245, 0.8232, 0.8258, 0.7718, 0.7215, 0.9889]], [[0.1979, 0.6019, 0.0949, 0.3273, 0.5209, 0.1077], [0.6429, 0.2669, 0.0651, 0.7256, 0.8421, 0.8695], [0.4554, 0.0547, 0.1077, 0.3739, 0.3446, 0.8861]]], [[[0.1319, 0.8243, 0.1537, 0.4496, 0.739, 0.9157], [0.6773, 0.2588, 0.4026, 0.0337, 0.9586, 0.1109], [0.6265, 0.2267, 0.5997, 0.3802, 0.1097, 0.5035]], [[0.5934, 0.735, 0.9862, 0.4217, 0.8371, 0.801], [0.4584, 0.402, 0.7214, 0.0989, 0.8299, 0.5876], [0.5727, 0.7888, 0.2808, 0.3484, 0.2738, 0.3707]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con66235').set_weights(w) 
w = model.get_layer('Loc81414').get_weights() 
w[0] = np.array([[[0.0878, 0.5093, 0.7668, 0.2301], [0.5635, 0.579, 0.9964, 0.3284], [0.4177, 0.3585, 0.0029, 0.037], [0.4558, 0.541, 0.8899, 0.6401], [0.9172, 0.3751, 0.5289, 0.4508], [0.1156, 0.8011, 0.6354, 0.0719], [0.8805, 0.9052, 0.3665, 0.1781], [0.0991, 0.3802, 0.3842, 0.2779], [0.611, 0.9489, 0.2299, 0.2647]], [[0.8112, 0.3869, 0.4186, 0.8181], [0.5831, 0.861, 0.8727, 0.8806], [0.5974, 0.7904, 0.1918, 0.5017], [0.594, 0.3343, 0.7798, 0.3125], [0.9897, 0.9076, 0.0362, 0.7774], [0.0465, 0.8402, 0.6614, 0.1537], [0.8764, 0.4032, 0.619, 0.7819], [0.7601, 0.9515, 0.4547, 0.9287], [0.6145, 0.8551, 0.4797, 0.9117]], [[0.9528, 0.2255, 0.7916, 0.6403], [0.3555, 0.1855, 0.2301, 0.0316], [0.2902, 0.5705, 0.1395, 0.9788], [0.1033, 0.5079, 0.2494, 0.6812], [0.1442, 0.2734, 0.0709, 0.1811], [0.2731, 0.1913, 0.9561, 0.8953], [0.4583, 0.1137, 0.3707, 0.777], [0.7727, 0.1924, 0.989, 0.4993], [0.8614, 0.2387, 0.9367, 0.7124]], [[0.8739, 0.9564, 0.8792, 0.9942], [0.9266, 0.7279, 0.6808, 0.5869], [0.3947, 0.4374, 0.0451, 0.3939], [0.7194, 0.0193, 0.8883, 0.9942], [0.961, 0.0387, 0.1926, 0.6284], [0.0279, 0.6265, 0.7422, 0.2038], [0.368, 0.5243, 0.4524, 0.376], [0.9225, 0.8201, 0.9689, 0.6717], [0.3103, 0.2024, 0.8365, 0.4372]], [[0.5368, 0.2002, 0.8134, 0.1193], [0.0012, 0.9311, 0.8455, 0.0154], [0.2166, 0.3362, 0.7997, 0.1678], [0.4486, 0.7474, 0.3098, 0.5151], [0.4294, 0.8981, 0.985, 0.7675], [0.4104, 0.1711, 0.7956, 0.7234], [0.0807, 0.9566, 0.6633, 0.9086], [0.2948, 0.4825, 0.1578, 0.4858], [0.1307, 0.3777, 0.7265, 0.354]], [[0.5294, 0.5267, 0.0734, 0.242], [0.656, 0.4861, 0.1391, 0.3802], [0.1645, 0.8437, 0.6349, 0.0325], [0.7509, 0.4251, 0.2345, 0.7661], [0.7335, 0.1765, 0.338, 0.8412], [0.9135, 0.8876, 0.7888, 0.5175], [0.6377, 0.6565, 0.0441, 0.3862], [0.8095, 0.1441, 0.0808, 0.0653], [0.5763, 0.2182, 0.7509, 0.7224]]])
w[1] = np.array([[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]])
model.get_layer('Loc81414').set_weights(w) 
in0Dep27189 = tf.constant([[[[0.4698, 0.7149], [0.482, 0.462]]]])
in0Con31116 = tf.constant([[[[[0.1499], [0.3633]], [[0.7468], [0.5915]]], [[[0.5093], [0.5186]], [[0.6865], [0.2898]]]]])
in0Min22388 = tf.constant([[[[[0.2323, 0.9873], [0.8779, 0.7717]], [[0.3194, 0.0111], [0.5046, 0.5338]]], [[[0.5963, 0.8684], [0.2767, 0.5938]], [[0.238, 0.0088], [0.6912, 0.5855]]]]])
in1Min22388 = tf.constant([[[[[0.0483, 0.2161], [0.7954, 0.1317]], [[0.6839, 0.5763], [0.3625, 0.9655]]], [[[0.3266, 0.7675], [0.8706, 0.7197]], [[0.6136, 0.0796], [0.0932, 0.2983]]]]])
in0Ave22258 = tf.constant([[[1.0491, 1.0551]]])
in0Con57707 = tf.constant([[[[0.14, 0.0854], [0.0164, 0.1289], [0.1828, 0.5389]], [[0.238, 0.4338], [0.2875, 0.9753], [0.8772, 0.7998]]]])
in0Sub10807 = tf.constant([[[[[0.9841, 0.8074], [0.701, 0.5434], [0.0663, 0.9986]], [[0.7146, 0.2589], [0.72, 0.0581], [0.0637, 0.6435]], [[0.6039, 0.3577], [0.0039, 0.9467], [0.9454, 0.4821]]], [[[0.8926, 0.9585], [0.5811, 0.439], [0.3978, 0.7553]], [[0.4476, 0.4678], [0.6274, 0.1548], [0.6808, 0.2727]], [[0.3841, 0.3111], [0.6083, 0.8228], [0.573, 0.0313]]]]])
in1Sub10807 = tf.constant([[[[[0.6965, 0.0856], [0.7706, 0.9425], [0.9486, 0.1908]], [[0.1032, 0.5995], [0.3397, 0.5569], [0.8759, 0.9848]], [[0.6254, 0.4553], [0.8426, 0.6254], [0.2583, 0.3361]]], [[[0.6157, 0.7269], [0.212, 0.9939], [0.4749, 0.3073]], [[0.2245, 0.3126], [0.7555, 0.3033], [0.3448, 0.8977]], [[0.0699, 0.0179], [0.6986, 0.375], [0.8486, 0.0785]]]]])
print (np.array2string(model.predict([in0Dep27189,in0Con31116,in0Min22388,in1Min22388,in0Ave22258,in0Con57707,in0Sub10807,in1Sub10807],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul90085.png')

LDep27189 = depthwise_conv2D_layer([[[[0.4698, 0.7149], [0.482, 0.462]]]], 1, 2,[[[[0.7608], [0.889]], [[0.076], [0.3493]]]],[0, 0], 1, 1, true, Dep27189), 
LRes93274 = reshape_layer(Dep27189, [1, 2, 2, 1], Res93274), 
LZer38340 = zero_padding3D_layer(Res93274, 1, 0, 0, 0, 0, 0, Zer38340), 
LCon31116 = concatenate_layer([Zer38340,[[[[[0.1499], [0.3633]], [[0.7468], [0.5915]]], [[[0.5093], [0.5186]], [[0.6865], [0.2898]]]]]], 4, Con31116), 
LMin22388 = minimum_layer([[[[[[0.2323, 0.9873], [0.8779, 0.7717]], [[0.3194, 0.0111], [0.5046, 0.5338]]], [[[0.5963, 0.8684], [0.2767, 0.5938]], [[0.238, 0.0088], [0.6912, 0.5855]]]]], [[[[[0.0483, 0.2161], [0.7954, 0.1317]], [[0.6839, 0.5763], [0.3625, 0.9655]]], [[[0.3266, 0.7675], [0.8706, 0.7197]], [[0.6136, 0.0796], [0.0932, 0.2983]]]]]], Min22388), 
LMin58636 = minimum_layer([Con31116,Min22388], Min58636), 
LRes91050 = reshape_layer(Min58636, [2, 2, 4], Res91050), 
LCro51480 = cropping2D_layer(Res91050, 1, 0, 1, 0, Cro51480), 
LZer21103 = zero_padding2D_layer(Cro51480, 1, 0, 2, 0, Zer21103), 
LAve22258 = average_pooling1D_layer([[[1.0491, 1.0551]]], 1, Ave22258), 
LRes49189 = reshape_layer(Ave22258, [1, 2, 1], Res49189), 
LRes82722 = reshape_layer(Res49189, [1, 2, 1, 1], Res82722), 
LCon7410 = conv3D_transpose_layer(Res82722, 1, 2, 1,[[[[[0.3411], [0.0805]]], [[[0.3903], [0.4627]]]]],[0, 0], 1, 1, 1, true, Con7410), 
LRes62258 = reshape_layer(Con7410, [1, 2, 2], Res62258), 
LZer3027 = zero_padding2D_layer(Res62258, 1, 0, 1, 0, Zer3027), 
LCon57707 = concatenate_layer([Zer3027,[[[[0.14, 0.0854], [0.0164, 0.1289], [0.1828, 0.5389]], [[0.238, 0.4338], [0.2875, 0.9753], [0.8772, 0.7998]]]]], 3, Con57707), 
LSub10807 = subtract_layer([[[[[0.9841, 0.8074], [0.701, 0.5434], [0.0663, 0.9986]], [[0.7146, 0.2589], [0.72, 0.0581], [0.0637, 0.6435]], [[0.6039, 0.3577], [0.0039, 0.9467], [0.9454, 0.4821]]], [[[0.8926, 0.9585], [0.5811, 0.439], [0.3978, 0.7553]], [[0.4476, 0.4678], [0.6274, 0.1548], [0.6808, 0.2727]], [[0.3841, 0.3111], [0.6083, 0.8228], [0.573, 0.0313]]]]], [[[[[0.6965, 0.0856], [0.7706, 0.9425], [0.9486, 0.1908]], [[0.1032, 0.5995], [0.3397, 0.5569], [0.8759, 0.9848]], [[0.6254, 0.4553], [0.8426, 0.6254], [0.2583, 0.3361]]], [[[0.6157, 0.7269], [0.212, 0.9939], [0.4749, 0.3073]], [[0.2245, 0.3126], [0.7555, 0.3033], [0.3448, 0.8977]], [[0.0699, 0.0179], [0.6986, 0.375], [0.8486, 0.0785]]]]], Sub10807), 
LRes72123 = reshape_layer(Sub10807, [2, 3, 6], Res72123), 
LCon66235 = conv2D_transpose_layer(Res72123, 2, 2,[[[[0.0626, 0.1506, 0.7867, 0.8575, 0.7755, 0.3183], [0.58, 0.0521, 0.7065, 0.3872, 0.5368, 0.924], [0.4245, 0.8232, 0.8258, 0.7718, 0.7215, 0.9889]], [[0.1979, 0.6019, 0.0949, 0.3273, 0.5209, 0.1077], [0.6429, 0.2669, 0.0651, 0.7256, 0.8421, 0.8695], [0.4554, 0.0547, 0.1077, 0.3739, 0.3446, 0.8861]]], [[[0.1319, 0.8243, 0.1537, 0.4496, 0.739, 0.9157], [0.6773, 0.2588, 0.4026, 0.0337, 0.9586, 0.1109], [0.6265, 0.2267, 0.5997, 0.3802, 0.1097, 0.5035]], [[0.5934, 0.735, 0.9862, 0.4217, 0.8371, 0.801], [0.4584, 0.402, 0.7214, 0.0989, 0.8299, 0.5876], [0.5727, 0.7888, 0.2808, 0.3484, 0.2738, 0.3707]]]],[0, 0, 0], 2, 1, true, Con66235), 
LLoc81414 = locally_connected2D_layer(Con66235, 3, 1,[[[0.0878, 0.5093, 0.7668, 0.2301], [0.5635, 0.579, 0.9964, 0.3284], [0.4177, 0.3585, 0.0029, 0.037], [0.4558, 0.541, 0.8899, 0.6401], [0.9172, 0.3751, 0.5289, 0.4508], [0.1156, 0.8011, 0.6354, 0.0719], [0.8805, 0.9052, 0.3665, 0.1781], [0.0991, 0.3802, 0.3842, 0.2779], [0.611, 0.9489, 0.2299, 0.2647]], [[0.8112, 0.3869, 0.4186, 0.8181], [0.5831, 0.861, 0.8727, 0.8806], [0.5974, 0.7904, 0.1918, 0.5017], [0.594, 0.3343, 0.7798, 0.3125], [0.9897, 0.9076, 0.0362, 0.7774], [0.0465, 0.8402, 0.6614, 0.1537], [0.8764, 0.4032, 0.619, 0.7819], [0.7601, 0.9515, 0.4547, 0.9287], [0.6145, 0.8551, 0.4797, 0.9117]], [[0.9528, 0.2255, 0.7916, 0.6403], [0.3555, 0.1855, 0.2301, 0.0316], [0.2902, 0.5705, 0.1395, 0.9788], [0.1033, 0.5079, 0.2494, 0.6812], [0.1442, 0.2734, 0.0709, 0.1811], [0.2731, 0.1913, 0.9561, 0.8953], [0.4583, 0.1137, 0.3707, 0.777], [0.7727, 0.1924, 0.989, 0.4993], [0.8614, 0.2387, 0.9367, 0.7124]], [[0.8739, 0.9564, 0.8792, 0.9942], [0.9266, 0.7279, 0.6808, 0.5869], [0.3947, 0.4374, 0.0451, 0.3939], [0.7194, 0.0193, 0.8883, 0.9942], [0.961, 0.0387, 0.1926, 0.6284], [0.0279, 0.6265, 0.7422, 0.2038], [0.368, 0.5243, 0.4524, 0.376], [0.9225, 0.8201, 0.9689, 0.6717], [0.3103, 0.2024, 0.8365, 0.4372]], [[0.5368, 0.2002, 0.8134, 0.1193], [0.0012, 0.9311, 0.8455, 0.0154], [0.2166, 0.3362, 0.7997, 0.1678], [0.4486, 0.7474, 0.3098, 0.5151], [0.4294, 0.8981, 0.985, 0.7675], [0.4104, 0.1711, 0.7956, 0.7234], [0.0807, 0.9566, 0.6633, 0.9086], [0.2948, 0.4825, 0.1578, 0.4858], [0.1307, 0.3777, 0.7265, 0.354]], [[0.5294, 0.5267, 0.0734, 0.242], [0.656, 0.4861, 0.1391, 0.3802], [0.1645, 0.8437, 0.6349, 0.0325], [0.7509, 0.4251, 0.2345, 0.7661], [0.7335, 0.1765, 0.338, 0.8412], [0.9135, 0.8876, 0.7888, 0.5175], [0.6377, 0.6565, 0.0441, 0.3862], [0.8095, 0.1441, 0.0808, 0.0653], [0.5763, 0.2182, 0.7509, 0.7224]]],[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]], 1, 1, Loc81414), 
LSub45972 = subtract_layer(Con57707,Loc81414, Sub45972), 
LMul90085 = multiply_layer([Zer21103,Sub45972], Mul90085), 
exec_layers([LDep27189,LRes93274,LZer38340,LCon31116,LMin22388,LMin58636,LRes91050,LCro51480,LZer21103,LAve22258,LRes49189,LRes82722,LCon7410,LRes62258,LZer3027,LCon57707,LSub10807,LRes72123,LCon66235,LLoc81414,LSub45972,LMul90085],["Dep27189","Res93274","Zer38340","Con31116","Min22388","Min58636","Res91050","Cro51480","Zer21103","Ave22258","Res49189","Res82722","Con7410","Res62258","Zer3027","Con57707","Sub10807","Res72123","Con66235","Loc81414","Sub45972","Mul90085"],Mul90085,"Mul90085")

Actual (Unparsed): [[[[-0.0000000, -0.0000000, -0.0000000, -0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[-0.0000000, -0.0000000, -0.0000000, -0.0000000], [0.0000000, -0.0000000, 0.0000000, 0.0000000], [0.1528922, 0.0086765, 0.0911761, 0.1315468]]]]

Expected (Unparsed): [[[[-0.0,-0.0,-0.0,-0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[-0.0,-0.0,-0.0,-0.0],[0.0,-0.0,0.0,0.0],[0.15289220617498808,0.008676548773745602,0.09117610468330484,0.13154685931365306]]]]

Actual:   [[[[-0, -0, -0, -0], [0, 0, 0, 0], [0, 0, 0, 0]], [[-0, -0, -0, -0], [0, -0, 0, 0], [0.1529, 0.0087, 0.0912, 0.1316]]]]

Expected: [[[[-0, -0, -0, -0], [0, 0, 0, 0], [0, 0, 0, 0]], [[-0, -0, -0, -0], [0, -0, 0, 0], [0.1529, 0.0087, 0.0912, 0.1316]]]]