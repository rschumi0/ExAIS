import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Up_91182 = tf.keras.layers.Input(shape=([1, 3, 4, 4]))
in0Cro82012 = tf.keras.layers.Input(shape=([1, 1, 4]))
in0Con68414 = tf.keras.layers.Input(shape=([1, 3, 28]))

Up_91182 = keras.layers.UpSampling3D(size=(1, 1, 2), name = 'Up_91182', )(in0Up_91182)
Res91387 = keras.layers.Reshape((1, 3, 32), name = 'Res91387', )(Up_91182)
Cro82012 = keras.layers.Cropping2D(cropping=((0, 0), (0, 0)), name = 'Cro82012', )(in0Cro82012)
Zer32823 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer32823', )(Cro82012)
Con68414 = keras.layers.Concatenate(axis=3, name = 'Con68414', )([Zer32823,in0Con68414])
Max72293 = keras.layers.Maximum(name = 'Max72293', )([Res91387,Con68414])
Res3927 = keras.layers.Reshape((1, 96), name = 'Res3927', )(Max72293)
Sep27251 = keras.layers.SeparableConv1D(4, (1),strides=(1), padding='valid', name = 'Sep27251', )(Res3927)
Lay49573 = keras.layers.LayerNormalization(axis=1, epsilon=2.2428478152104576, name = 'Lay49573', )(Sep27251)
model = tf.keras.models.Model(inputs=[in0Up_91182,in0Cro82012,in0Con68414], outputs=Lay49573)
w = model.get_layer('Sep27251').get_weights() 
w[0] = np.array([[[0.0023], [0.5958], [0.377], [0.9948], [0.2027], [0.6826], [0.8856], [0.2197], [0.2688], [0.5449], [0.4442], [0.1817], [0.2923], [0.0509], [0.5957], [0.2679], [0.4286], [0.6095], [0.6525], [0.5236], [0.45], [0.4235], [0.3462], [0.7291], [0.5781], [0.5244], [0.7103], [0.4856], [0.3052], [0.7767], [0.2664], [0.1241], [0.2044], [0.1744], [0.1316], [0.276], [0.7862], [0.9149], [0.495], [0.4966], [0.3071], [0.9349], [0.0196], [0.4245], [0.0607], [0.8192], [0.1192], [0.5743], [0.0883], [0.2495], [0.7321], [0.0111], [0.4364], [0.456], [0.1677], [0.8347], [0.0567], [0.4501], [0.837], [0.616], [0.1942], [0.1722], [0.195], [0.667], [0.6455], [0.0725], [0.0205], [0.3046], [0.5764], [0.0564], [0.2394], [0.0714], [0.6897], [0.1717], [0.8548], [0.2142], [0.4034], [0.8966], [0.1922], [0.5885], [0.3624], [0.3899], [0.5891], [0.5599], [0.0409], [0.6108], [0.8619], [0.3977], [0.416], [0.783], [0.3712], [0.1252], [0.6903], [0.2817], [0.2686], [0.7785]]])
w[1] = np.array([[[0.5226, 0.115, 0.1317, 0.445], [0.4047, 0.8738, 0.8763, 0.7749], [0.7486, 0.848, 0.5964, 0.0274], [0.556, 0.9625, 0.5268, 0.4798], [0.4189, 0.4165, 0.5612, 0.8955], [0.7603, 0.2769, 0.5948, 0.8583], [0.8413, 0.7267, 0.1664, 0.6906], [0.6544, 0.8104, 0.3792, 0.9272], [0.1061, 0.6564, 0.6216, 0.3368], [0.9547, 0.3178, 0.4432, 0.0418], [0.8143, 0.5721, 0.0494, 0.3736], [0.1608, 0.247, 0.2686, 0.7177], [0.6862, 0.8961, 0.5224, 0.7531], [0.5307, 0.943, 0.2781, 0.1707], [0.8976, 0.7283, 0.704, 0.1689], [0.3021, 0.251, 0.7593, 0.7643], [0.2409, 0.7761, 0.7525, 0.2339], [0.3807, 0.8985, 0.4772, 0.8082], [0.4594, 0.096, 0.3995, 0.0719], [0.9699, 0.2854, 0.008, 0.3982], [0.3524, 0.4015, 0.3625, 0.1407], [0.8625, 0.5608, 0.0827, 0.2388], [0.4976, 0.9413, 0.5009, 0.3528], [0.3695, 0.1151, 0.4716, 0.6406], [0.6907, 0.2001, 0.3772, 0.8092], [0.1062, 0.8667, 0.1989, 0.1329], [0.4474, 0.9281, 0.1324, 0.7142], [0.1102, 0.9724, 0.1191, 0.3842], [0.1672, 0.2524, 0.836, 0.2865], [0.0125, 0.8398, 0.143, 0.3707], [0.8059, 0.8722, 0.7206, 0.7333], [0.2361, 0.5707, 0.6469, 0.9852], [0.1545, 0.5956, 0.9625, 0.6039], [0.4423, 0.2153, 0.8503, 0.5271], [0.0725, 0.718, 0.9159, 0.0894], [0.6999, 0.4648, 0.1985, 0.7653], [0.2729, 0.999, 0.9637, 0.0843], [0.098, 0.6621, 0.0332, 0.5156], [0.5065, 0.2391, 0.3932, 0.077], [0.7765, 0.2596, 0.0882, 0.9233], [0.2435, 0.7128, 0.957, 0.1853], [0.5959, 0.1024, 0.594, 0.8934], [0.2, 0.9599, 0.0311, 0.9033], [0.9195, 0.1664, 0.0276, 0.3583], [0.3069, 0.6893, 0.5268, 0.3765], [0.2305, 0.6298, 0.7916, 0.3265], [0.9685, 0.8009, 0.9707, 0.2712], [0.5574, 0.4069, 0.3579, 0.9014], [0.7093, 0.7766, 0.4096, 0.5536], [0.9291, 0.5238, 0.6623, 0.714], [0.5564, 0.9469, 0.0526, 0.7478], [0.3331, 0.9641, 0.784, 0.4586], [0.7543, 0.3854, 0.8088, 0.4857], [0.8995, 0.8633, 0.1946, 0.4743], [0.6607, 0.4364, 0.1331, 0.4177], [0.2833, 0.1821, 0.1144, 0.5637], [0.9212, 0.1278, 0.8374, 0.7995], [0.4675, 0.2363, 0.7573, 0.4894], [0.2693, 0.9754, 0.7796, 0.3214], [0.46, 0.7125, 0.5036, 0.8408], [0.5503, 0.9298, 0.59, 0.9972], [0.6067, 0.0488, 0.2821, 0.2111], [0.817, 0.4729, 0.8441, 0.1787], [0.4933, 0.3091, 0.6993, 0.8779], [0.5937, 0.115, 0.3441, 0.011], [0.6593, 0.9301, 0.6997, 0.4265], [0.6573, 0.7989, 0.4166, 0.8981], [0.5955, 0.9699, 0.7927, 0.0097], [0.933, 0.9625, 0.3896, 0.7913], [0.7489, 0.7365, 0.1306, 0.1836], [0.351, 0.266, 0.6564, 0.3704], [0.5069, 0.9267, 0.974, 0.5114], [0.7638, 0.2362, 0.9879, 0.4311], [0.3839, 0.6522, 0.3286, 0.3774], [0.2705, 0.3323, 0.0034, 0.0478], [0.8826, 0.9831, 0.7898, 0.7017], [0.5456, 0.1874, 0.9594, 0.3253], [0.7528, 0.8881, 0.8789, 0.4964], [0.0214, 0.0284, 0.2674, 0.8085], [0.6208, 0.6989, 0.4068, 0.457], [0.0192, 0.5301, 0.4001, 0.8647], [0.2108, 0.4785, 0.6506, 0.028], [0.1799, 0.6057, 0.0967, 0.6057], [0.6329, 0.9232, 0.3774, 0.6351], [0.7893, 0.8886, 0.027, 0.1658], [0.458, 0.6749, 0.0017, 0.0259], [0.8469, 0.9087, 0.3253, 0.4026], [0.5546, 0.175, 0.41, 0.9092], [0.9751, 0.2181, 0.6527, 0.3357], [0.9084, 0.4376, 0.2395, 0.336], [0.5181, 0.9688, 0.6998, 0.892], [0.8984, 0.3707, 0.6439, 0.5119], [0.4255, 0.6976, 0.2886, 0.7713], [0.7512, 0.5254, 0.834, 0.9835], [0.7712, 0.3212, 0.4842, 0.501], [0.1477, 0.4004, 0.9264, 0.3898]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep27251').set_weights(w) 
in0Up_91182 = tf.constant([[[[[1.5484, 1.63, 1.649, 1.6493], [1.0015, 1.0796, 1.0341, 1.5368], [1.7259, 1.0642, 1.3421, 1.6256], [1.973, 1.4117, 1.2293, 1.8368]], [[1.6149, 1.5761, 1.6334, 1.6141], [1.5161, 1.4966, 1.3714, 1.2052], [1.3827, 1.9066, 1.6147, 1.3371], [1.769, 1.5184, 1.4515, 1.5875]], [[1.8328, 1.6773, 1.9858, 1.3763], [1.2485, 1.4027, 1.0671, 1.7792], [1.4093, 1.2166, 1.7983, 1.3002], [1.6812, 1.798, 1.4246, 1.3315]]]]])
in0Cro82012 = tf.constant([[[[1.0074, 1.2934, 1.0735, 1.2743]]]])
in0Con68414 = tf.constant([[[[0.9712, 0.2349, 0.6895, 0.6464, 0.7215, 0.0616, 0.8298, 0.9275, 0.6589, 0.2386, 0.0713, 0.8058, 0.4329, 0.2319, 0.7256, 0.4396, 0.7425, 0.2103, 0.2612, 0.7818, 0.8857, 0.4703, 0.3149, 0.2073, 0.6828, 0.0651, 0.5958, 0.3731], [0.7769, 0.0544, 0.2294, 0.842, 0.4408, 0.1148, 0.9143, 0.1388, 0.7935, 0.4683, 0.2428, 0.4666, 0.7679, 0.2213, 0.6783, 0.2633, 0.2595, 0.2391, 0.9725, 0.1476, 0.6349, 0.6253, 0.2591, 0.5689, 0.1805, 0.7235, 0.664, 0.6582], [0.1326, 0.3132, 0.0374, 0.3539, 0.6455, 0.3336, 0.3296, 0.8722, 0.4261, 0.036, 0.21, 0.9804, 0.7919, 0.9393, 0.7589, 0.34, 0.5946, 0.3428, 0.4479, 0.3884, 0.7905, 0.4365, 0.1731, 0.8471, 0.4388, 0.2427, 0.7999, 0.9616]]]])
print (np.array2string(model.predict([in0Up_91182,in0Cro82012,in0Con68414],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Lay49573.png')

LUp_91182 = up_sampling3D_layer([[[[[1.5484, 1.63, 1.649, 1.6493], [1.0015, 1.0796, 1.0341, 1.5368], [1.7259, 1.0642, 1.3421, 1.6256], [1.973, 1.4117, 1.2293, 1.8368]], [[1.6149, 1.5761, 1.6334, 1.6141], [1.5161, 1.4966, 1.3714, 1.2052], [1.3827, 1.9066, 1.6147, 1.3371], [1.769, 1.5184, 1.4515, 1.5875]], [[1.8328, 1.6773, 1.9858, 1.3763], [1.2485, 1.4027, 1.0671, 1.7792], [1.4093, 1.2166, 1.7983, 1.3002], [1.6812, 1.798, 1.4246, 1.3315]]]]], 1, 1, 2, Up_91182), 
LRes91387 = reshape_layer(Up_91182, [1, 3, 32], Res91387), 
LCro82012 = cropping2D_layer([[[[1.0074, 1.2934, 1.0735, 1.2743]]]], 0, 0, 0, 0, Cro82012), 
LZer32823 = zero_padding2D_layer(Cro82012, 0, 0, 2, 0, Zer32823), 
LCon68414 = concatenate_layer([Zer32823,[[[[0.9712, 0.2349, 0.6895, 0.6464, 0.7215, 0.0616, 0.8298, 0.9275, 0.6589, 0.2386, 0.0713, 0.8058, 0.4329, 0.2319, 0.7256, 0.4396, 0.7425, 0.2103, 0.2612, 0.7818, 0.8857, 0.4703, 0.3149, 0.2073, 0.6828, 0.0651, 0.5958, 0.3731], [0.7769, 0.0544, 0.2294, 0.842, 0.4408, 0.1148, 0.9143, 0.1388, 0.7935, 0.4683, 0.2428, 0.4666, 0.7679, 0.2213, 0.6783, 0.2633, 0.2595, 0.2391, 0.9725, 0.1476, 0.6349, 0.6253, 0.2591, 0.5689, 0.1805, 0.7235, 0.664, 0.6582], [0.1326, 0.3132, 0.0374, 0.3539, 0.6455, 0.3336, 0.3296, 0.8722, 0.4261, 0.036, 0.21, 0.9804, 0.7919, 0.9393, 0.7589, 0.34, 0.5946, 0.3428, 0.4479, 0.3884, 0.7905, 0.4365, 0.1731, 0.8471, 0.4388, 0.2427, 0.7999, 0.9616]]]]], 3, Con68414), 
LMax72293 = maximum_layer([Res91387,Con68414], Max72293), 
LRes3927 = reshape_layer(Max72293, [1, 96], Res3927), 
LSep27251 = separable_conv1D_layer(Res3927, 1,[[[[0.0023], [0.5958], [0.377], [0.9948], [0.2027], [0.6826], [0.8856], [0.2197], [0.2688], [0.5449], [0.4442], [0.1817], [0.2923], [0.0509], [0.5957], [0.2679], [0.4286], [0.6095], [0.6525], [0.5236], [0.45], [0.4235], [0.3462], [0.7291], [0.5781], [0.5244], [0.7103], [0.4856], [0.3052], [0.7767], [0.2664], [0.1241], [0.2044], [0.1744], [0.1316], [0.276], [0.7862], [0.9149], [0.495], [0.4966], [0.3071], [0.9349], [0.0196], [0.4245], [0.0607], [0.8192], [0.1192], [0.5743], [0.0883], [0.2495], [0.7321], [0.0111], [0.4364], [0.456], [0.1677], [0.8347], [0.0567], [0.4501], [0.837], [0.616], [0.1942], [0.1722], [0.195], [0.667], [0.6455], [0.0725], [0.0205], [0.3046], [0.5764], [0.0564], [0.2394], [0.0714], [0.6897], [0.1717], [0.8548], [0.2142], [0.4034], [0.8966], [0.1922], [0.5885], [0.3624], [0.3899], [0.5891], [0.5599], [0.0409], [0.6108], [0.8619], [0.3977], [0.416], [0.783], [0.3712], [0.1252], [0.6903], [0.2817], [0.2686], [0.7785]]],[[[0.5226, 0.115, 0.1317, 0.445], [0.4047, 0.8738, 0.8763, 0.7749], [0.7486, 0.848, 0.5964, 0.0274], [0.556, 0.9625, 0.5268, 0.4798], [0.4189, 0.4165, 0.5612, 0.8955], [0.7603, 0.2769, 0.5948, 0.8583], [0.8413, 0.7267, 0.1664, 0.6906], [0.6544, 0.8104, 0.3792, 0.9272], [0.1061, 0.6564, 0.6216, 0.3368], [0.9547, 0.3178, 0.4432, 0.0418], [0.8143, 0.5721, 0.0494, 0.3736], [0.1608, 0.247, 0.2686, 0.7177], [0.6862, 0.8961, 0.5224, 0.7531], [0.5307, 0.943, 0.2781, 0.1707], [0.8976, 0.7283, 0.704, 0.1689], [0.3021, 0.251, 0.7593, 0.7643], [0.2409, 0.7761, 0.7525, 0.2339], [0.3807, 0.8985, 0.4772, 0.8082], [0.4594, 0.096, 0.3995, 0.0719], [0.9699, 0.2854, 0.008, 0.3982], [0.3524, 0.4015, 0.3625, 0.1407], [0.8625, 0.5608, 0.0827, 0.2388], [0.4976, 0.9413, 0.5009, 0.3528], [0.3695, 0.1151, 0.4716, 0.6406], [0.6907, 0.2001, 0.3772, 0.8092], [0.1062, 0.8667, 0.1989, 0.1329], [0.4474, 0.9281, 0.1324, 0.7142], [0.1102, 0.9724, 0.1191, 0.3842], [0.1672, 0.2524, 0.836, 0.2865], [0.0125, 0.8398, 0.143, 0.3707], [0.8059, 0.8722, 0.7206, 0.7333], [0.2361, 0.5707, 0.6469, 0.9852], [0.1545, 0.5956, 0.9625, 0.6039], [0.4423, 0.2153, 0.8503, 0.5271], [0.0725, 0.718, 0.9159, 0.0894], [0.6999, 0.4648, 0.1985, 0.7653], [0.2729, 0.999, 0.9637, 0.0843], [0.098, 0.6621, 0.0332, 0.5156], [0.5065, 0.2391, 0.3932, 0.077], [0.7765, 0.2596, 0.0882, 0.9233], [0.2435, 0.7128, 0.957, 0.1853], [0.5959, 0.1024, 0.594, 0.8934], [0.2, 0.9599, 0.0311, 0.9033], [0.9195, 0.1664, 0.0276, 0.3583], [0.3069, 0.6893, 0.5268, 0.3765], [0.2305, 0.6298, 0.7916, 0.3265], [0.9685, 0.8009, 0.9707, 0.2712], [0.5574, 0.4069, 0.3579, 0.9014], [0.7093, 0.7766, 0.4096, 0.5536], [0.9291, 0.5238, 0.6623, 0.714], [0.5564, 0.9469, 0.0526, 0.7478], [0.3331, 0.9641, 0.784, 0.4586], [0.7543, 0.3854, 0.8088, 0.4857], [0.8995, 0.8633, 0.1946, 0.4743], [0.6607, 0.4364, 0.1331, 0.4177], [0.2833, 0.1821, 0.1144, 0.5637], [0.9212, 0.1278, 0.8374, 0.7995], [0.4675, 0.2363, 0.7573, 0.4894], [0.2693, 0.9754, 0.7796, 0.3214], [0.46, 0.7125, 0.5036, 0.8408], [0.5503, 0.9298, 0.59, 0.9972], [0.6067, 0.0488, 0.2821, 0.2111], [0.817, 0.4729, 0.8441, 0.1787], [0.4933, 0.3091, 0.6993, 0.8779], [0.5937, 0.115, 0.3441, 0.011], [0.6593, 0.9301, 0.6997, 0.4265], [0.6573, 0.7989, 0.4166, 0.8981], [0.5955, 0.9699, 0.7927, 0.0097], [0.933, 0.9625, 0.3896, 0.7913], [0.7489, 0.7365, 0.1306, 0.1836], [0.351, 0.266, 0.6564, 0.3704], [0.5069, 0.9267, 0.974, 0.5114], [0.7638, 0.2362, 0.9879, 0.4311], [0.3839, 0.6522, 0.3286, 0.3774], [0.2705, 0.3323, 0.0034, 0.0478], [0.8826, 0.9831, 0.7898, 0.7017], [0.5456, 0.1874, 0.9594, 0.3253], [0.7528, 0.8881, 0.8789, 0.4964], [0.0214, 0.0284, 0.2674, 0.8085], [0.6208, 0.6989, 0.4068, 0.457], [0.0192, 0.5301, 0.4001, 0.8647], [0.2108, 0.4785, 0.6506, 0.028], [0.1799, 0.6057, 0.0967, 0.6057], [0.6329, 0.9232, 0.3774, 0.6351], [0.7893, 0.8886, 0.027, 0.1658], [0.458, 0.6749, 0.0017, 0.0259], [0.8469, 0.9087, 0.3253, 0.4026], [0.5546, 0.175, 0.41, 0.9092], [0.9751, 0.2181, 0.6527, 0.3357], [0.9084, 0.4376, 0.2395, 0.336], [0.5181, 0.9688, 0.6998, 0.892], [0.8984, 0.3707, 0.6439, 0.5119], [0.4255, 0.6976, 0.2886, 0.7713], [0.7512, 0.5254, 0.834, 0.9835], [0.7712, 0.3212, 0.4842, 0.501], [0.1477, 0.4004, 0.9264, 0.3898]]]],[0, 0, 0, 0], 1, false, Sep27251), 
LLay49573 = layer_normalization_layer(Sep27251, 1, 2.2428478152104576, Lay49573), 
exec_layers([LUp_91182,LRes91387,LCro82012,LZer32823,LCon68414,LMax72293,LRes3927,LSep27251,LLay49573],["Up_91182","Res91387","Cro82012","Zer32823","Con68414","Max72293","Res3927","Sep27251","Lay49573"],Lay49573,"Lay49573")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0.0,0.0,0.0,0.0]]]

Actual:   [[[0, 0, 0, 0]]]

Expected: [[[0, 0, 0, 0]]]