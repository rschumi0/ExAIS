import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Den14846 = tf.keras.layers.Input(shape=([5, 5]))

Den14846 = keras.layers.Dense(1,name = 'Den14846', )(in0Den14846)
Den70797 = keras.layers.Dense(2,name = 'Den70797', )(Den14846)
model = tf.keras.models.Model(inputs=[in0Den14846], outputs=Den70797)
w = model.get_layer('Den14846').get_weights() 
w[0] = np.array([[0.8247], [0.8693], [0.6528], [0.6559], [0.083]])
w[1] = np.array([0.1298])
model.get_layer('Den14846').set_weights(w) 
w = model.get_layer('Den70797').get_weights() 
w[0] = np.array([[0.9828, 0.2286]])
w[1] = np.array([0.8487, 0.7269])
model.get_layer('Den70797').set_weights(w) 
in0Den14846 = tf.constant([[[0.8325, 0.1692, 0.216, 0.3975, 0.3374], [0.6874, 0.8677, 0.3559, 0.4591, 0.4812], [0.2907, 0.0312, 0.6286, 0.5461, 0.1739], [0.8729, 0.7976, 0.7533, 0.5637, 0.1894], [0.1015, 0.4951, 0.8843, 0.0104, 0.609]]])
print (np.array2string(model.predict([in0Den14846],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Den70797.png')

LDen14846 = dense_layer([[[0.8325, 0.1692, 0.216, 0.3975, 0.3374], [0.6874, 0.8677, 0.3559, 0.4591, 0.4812], [0.2907, 0.0312, 0.6286, 0.5461, 0.1739], [0.8729, 0.7976, 0.7533, 0.5637, 0.1894], [0.1015, 0.4951, 0.8843, 0.0104, 0.609]]], [[0.8247], [0.8693], [0.6528], [0.6559], [0.083]],[0.1298], Den14846), 
LDen70797 = dense_layer(Den14846, [[0.9828, 0.2286]],[0.8487, 0.7269], Den70797), 
exec_layers([LDen14846,LDen70797],["Den14846","Den70797"],Den70797,"Den70797")

Actual (Unparsed): [[[2.2179149, 1.0453804], [2.8382657, 1.1896744], [2.0080435, 0.9965642], [3.2273115, 1.2801668], [2.1052460, 1.0191735]]]

Expected (Unparsed): [[[2.217914905968,1.045380390216],[2.83826577456,1.1896744567200002],[2.008043528616,0.996564154092],[3.227311459224,1.280166767988],[2.105246045664,1.0191735307679999]]]

Actual:   [[[2.218, 1.0454], [2.8383, 1.1897], [2.0081, 0.9966], [3.2274, 1.2802], [2.1053, 1.0192]]]

Expected: [[[2.218, 1.0454], [2.8383, 1.1897], [2.0081, 0.9966], [3.2274, 1.2802], [2.1053, 1.0192]]]