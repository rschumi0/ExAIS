import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul70483 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in1Mul70483 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Con46128 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Sof69482 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))
in0Cro2974 = tf.keras.layers.Input(shape=([1, 2, 3]))
in0Con87441 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con73311 = tf.keras.layers.Input(shape=([2, 2, 4, 1]))
in0Max82720 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in1Max82720 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))

Mul70483 = keras.layers.Multiply(name = 'Mul70483', )([in0Mul70483,in1Mul70483])
Con46128 = keras.layers.Concatenate(axis=4, name = 'Con46128', )([Mul70483,in0Con46128])
Sof69482 = keras.layers.Softmax(axis=1, name = 'Sof69482', input_shape=(1, 1, 2, 2))(in0Sof69482)
Zer67226 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (0, 0)), name = 'Zer67226', )(Sof69482)
Max84957 = keras.layers.Maximum(name = 'Max84957', )([Con46128,Zer67226])
Res8088 = keras.layers.Reshape((2, 2, 4), name = 'Res8088', )(Max84957)
Cro2974 = keras.layers.Cropping2D(cropping=((0, 0), (0, 0)), name = 'Cro2974', )(in0Cro2974)
Zer10297 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer10297', )(Cro2974)
Con87441 = keras.layers.Concatenate(axis=3, name = 'Con87441', )([Zer10297,in0Con87441])
Ave58142 = keras.layers.Average(name = 'Ave58142', )([Res8088,Con87441])
Res80777 = keras.layers.Reshape((2, 2, 4, 1), name = 'Res80777', )(Ave58142)
Con73311 = keras.layers.Concatenate(axis=4, name = 'Con73311', )([Res80777,in0Con73311])
Max82720 = keras.layers.Maximum(name = 'Max82720', )([in0Max82720,in1Max82720])
Zer12406 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (3, 0)), name = 'Zer12406', )(Max82720)
Max69091 = keras.layers.Maximum(name = 'Max69091', )([Con73311,Zer12406])
model = tf.keras.models.Model(inputs=[in0Mul70483,in1Mul70483,in0Con46128,in0Sof69482,in0Cro2974,in0Con87441,in0Con73311,in0Max82720,in1Max82720], outputs=Max69091)
in0Mul70483 = tf.constant([[[[[0.0223], [0.7754]], [[0.5644], [0.6585]]], [[[0.6846], [0.2429]], [[0.7353], [0.9219]]]]])
in1Mul70483 = tf.constant([[[[[0.0289], [0.1203]], [[0.1319], [0.2745]]], [[[0.957], [0.0881]], [[0.0242], [0.297]]]]])
in0Con46128 = tf.constant([[[[[0.3897], [0.7763]], [[0.0372], [0.6594]]], [[[0.6717], [0.8519]], [[0.7169], [0.4566]]]]])
in0Sof69482 = tf.constant([[[[[0.8497, 0.1978], [0.0348, 0.4976]]]]])
in0Cro2974 = tf.constant([[[[1.5673, 1.8931, 1.3384], [1.906, 1.2656, 1.4345]]]])
in0Con87441 = tf.constant([[[[0.196], [0.4315]], [[0.9207], [0.831]]]])
in0Con73311 = tf.constant([[[[[0.2437], [0.7355], [0.7454], [0.5108]], [[0.5688], [0.1733], [0.6459], [0.0553]]], [[[0.8676], [0.8499], [0.0952], [0.0258]], [[0.8696], [0.3855], [0.4402], [0.0521]]]]])
in0Max82720 = tf.constant([[[[[0.4441, 0.7329]]], [[[0.8031, 0.9243]]]]])
in1Max82720 = tf.constant([[[[[0.1027, 0.9802]]], [[[0.1787, 0.4551]]]]])
print (np.array2string(model.predict([in0Mul70483,in1Mul70483,in0Con46128,in0Sof69482,in0Cro2974,in0Con87441,in0Con73311,in0Max82720,in1Max82720],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max69091.png')

LMul70483 = multiply_layer([[[[[[0.0223], [0.7754]], [[0.5644], [0.6585]]], [[[0.6846], [0.2429]], [[0.7353], [0.9219]]]]], [[[[[0.0289], [0.1203]], [[0.1319], [0.2745]]], [[[0.957], [0.0881]], [[0.0242], [0.297]]]]]], Mul70483), 
LCon46128 = concatenate_layer([Mul70483,[[[[[0.3897], [0.7763]], [[0.0372], [0.6594]]], [[[0.6717], [0.8519]], [[0.7169], [0.4566]]]]]], 4, Con46128), 
LSof69482 = softmax_layer([[[[[0.8497, 0.1978], [0.0348, 0.4976]]]]], 1, Sof69482), 
LZer67226 = zero_padding3D_layer(Sof69482, 1, 0, 1, 0, 0, 0, Zer67226), 
LMax84957 = maximum_layer([Con46128,Zer67226], Max84957), 
LRes8088 = reshape_layer(Max84957, [2, 2, 4], Res8088), 
LCro2974 = cropping2D_layer([[[[1.5673, 1.8931, 1.3384], [1.906, 1.2656, 1.4345]]]], 0, 0, 0, 0, Cro2974), 
LZer10297 = zero_padding2D_layer(Cro2974, 1, 0, 0, 0, Zer10297), 
LCon87441 = concatenate_layer([Zer10297,[[[[0.196], [0.4315]], [[0.9207], [0.831]]]]], 3, Con87441), 
LAve58142 = average_layer([Res8088,Con87441], Ave58142), 
LRes80777 = reshape_layer(Ave58142, [2, 2, 4, 1], Res80777), 
LCon73311 = concatenate_layer([Res80777,[[[[[0.2437], [0.7355], [0.7454], [0.5108]], [[0.5688], [0.1733], [0.6459], [0.0553]]], [[[0.8676], [0.8499], [0.0952], [0.0258]], [[0.8696], [0.3855], [0.4402], [0.0521]]]]]], 4, Con73311), 
LMax82720 = maximum_layer([[[[[[0.4441, 0.7329]]], [[[0.8031, 0.9243]]]]], [[[[[0.1027, 0.9802]]], [[[0.1787, 0.4551]]]]]], Max82720), 
LZer12406 = zero_padding3D_layer(Max82720, 0, 0, 1, 0, 3, 0, Zer12406), 
LMax69091 = maximum_layer([Con73311,Zer12406], Max69091), 
exec_layers([LMul70483,LCon46128,LSof69482,LZer67226,LMax84957,LRes8088,LCro2974,LZer10297,LCon87441,LAve58142,LRes80777,LCon73311,LMax82720,LZer12406,LMax69091],["Mul70483","Con46128","Sof69482","Zer67226","Max84957","Res8088","Cro2974","Zer10297","Con87441","Ave58142","Res80777","Con73311","Max82720","Zer12406","Max69091"],Max69091,"Max69091")

Actual (Unparsed): [[[[[0.0003222, 0.2437000], [0.1948500, 0.7355000], [0.0466403, 0.7454000], [0.4861500, 0.5108000]], [[0.0372222, 0.5688000], [0.0186000, 0.1733000], [0.0903791, 0.6459000], [0.5454500, 0.9802000]]], [[[1.1112311, 0.8676000], [1.2824000, 0.8499000], [0.6798997, 0.0952000], [0.8863000, 0.0258000]], [[1.4530000, 0.8696000], [1.1328000, 0.3855000], [1.2172500, 0.4402000], [0.9155000, 0.9243000]]]]]

Expected (Unparsed): [[[[[0.000322235,0.2437],[0.19485,0.7355],[0.04664031,0.7454],[0.48614999999999997,0.5108]],[[0.03722218,0.5688],[0.0186,0.1733],[0.090379125,0.6459],[0.54545,0.9802]]],[[[1.1112311,0.8676],[1.2824,0.8499],[0.679899745,0.0952],[0.8863,0.0258]],[[1.4529999999999998,0.8696],[1.1328,0.3855],[1.21725,0.4402],[0.9155,0.9243]]]]]

Actual:   [[[[[0.0004, 0.2437], [0.1949, 0.7355], [0.0467, 0.7454], [0.4862, 0.5108]], [[0.0373, 0.5688], [0.0186, 0.1733], [0.0904, 0.6459], [0.5455, 0.9802]]], [[[1.1113, 0.8676], [1.2824, 0.8499], [0.6799, 0.0952], [0.8863, 0.0258]], [[1.453, 0.8696], [1.1328, 0.3855], [1.2173, 0.4402], [0.9155, 0.9243]]]]]

Expected: [[[[[0.0004, 0.2437], [0.1949, 0.7355], [0.0467, 0.7454], [0.4862, 0.5108]], [[0.0373, 0.5688], [0.0186, 0.1733], [0.0904, 0.6459], [0.5455, 0.9802]]], [[[1.1113, 0.8676], [1.2824, 0.8499], [0.6799, 0.0952], [0.8863, 0.0258]], [[1.453, 0.8696], [1.1328, 0.3855], [1.2173, 0.4402], [0.9155, 0.9243]]]]]