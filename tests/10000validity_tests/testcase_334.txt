import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub37942 = tf.keras.layers.Input(shape=([3]))
in1Sub37942 = tf.keras.layers.Input(shape=([3]))
in0Con29528 = tf.keras.layers.Input(shape=([3, 4, 2]))
in0Zer8068 = tf.keras.layers.Input(shape=([1, 2, 3]))
in0Mul17676 = tf.keras.layers.Input(shape=([1, 1]))
in1Mul17676 = tf.keras.layers.Input(shape=([1, 1]))
in0Min72205 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Min72205 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con60884 = tf.keras.layers.Input(shape=([3, 4, 2]))
in0Ave87814 = tf.keras.layers.Input(shape=([1, 2]))
in1Ave87814 = tf.keras.layers.Input(shape=([1, 2]))
in0Con66992 = tf.keras.layers.Input(shape=([35]))

Sub37942 = keras.layers.Subtract(name = 'Sub37942', )([in0Sub37942,in1Sub37942])
Res75287 = keras.layers.Reshape((3, 1), name = 'Res75287', )(Sub37942)
Res94452 = keras.layers.Reshape((3, 1, 1), name = 'Res94452', )(Res75287)
Zer62589 = keras.layers.ZeroPadding2D(padding=((0, 0), (3, 0)), name = 'Zer62589', )(Res94452)
Con29528 = keras.layers.Concatenate(axis=3, name = 'Con29528', )([Zer62589,in0Con29528])
Zer8068 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer8068', )(in0Zer8068)
Sub75773 = keras.layers.Subtract(name = 'Sub75773', )([Con29528,Zer8068])
Mul17676 = keras.layers.Multiply(name = 'Mul17676', )([in0Mul17676,in1Mul17676])
Res16852 = keras.layers.Reshape((1, 1, 1), name = 'Res16852', )(Mul17676)
Zer38761 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer38761', )(Res16852)
Min72205 = keras.layers.Minimum(name = 'Min72205', )([in0Min72205,in1Min72205])
Max78160 = keras.layers.Maximum(name = 'Max78160', )([Zer38761,Min72205])
Zer18871 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer18871', )(Max78160)
Con60884 = keras.layers.Concatenate(axis=3, name = 'Con60884', )([Zer18871,in0Con60884])
Max98961 = keras.layers.Maximum(name = 'Max98961', )([Sub75773,Con60884])
Res9867 = keras.layers.Reshape((3, 12), name = 'Res9867', )(Max98961)
Fla79022 = keras.layers.Flatten(name = 'Fla79022', )(Res9867)
Ave87814 = keras.layers.Average(name = 'Ave87814', )([in0Ave87814,in1Ave87814])
Res22640 = keras.layers.Reshape((1, 2, 1), name = 'Res22640', )(Ave87814)
Res73419 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res73419', )(Res22640)
Cro87832 = keras.layers.Cropping3D(cropping=((0, 0), (0, 1), (0, 0)), name = 'Cro87832', )(Res73419)
Res78967 = keras.layers.Reshape((1, 1, 1), name = 'Res78967', )(Cro87832)
Res73341 = keras.layers.Reshape((1, 1), name = 'Res73341', )(Res78967)
Sim78737 = keras.layers.SimpleRNN(1,name = 'Sim78737', )(Res73341)
Con66992 = keras.layers.Concatenate(axis=1, name = 'Con66992', )([Sim78737,in0Con66992])
Mul11282 = keras.layers.Multiply(name = 'Mul11282', )([Fla79022,Con66992])
Res62849 = keras.layers.Reshape((36, 1), name = 'Res62849', )(Mul11282)
Res45046 = keras.layers.Reshape((36, 1, 1), name = 'Res45046', )(Res62849)
Con52294 = keras.layers.Conv2D(3, (7, 1),strides=(1, 1), padding='valid', dilation_rate=(1, 1), name = 'Con52294', )(Res45046)
model = tf.keras.models.Model(inputs=[in0Sub37942,in1Sub37942,in0Con29528,in0Zer8068,in0Mul17676,in1Mul17676,in0Min72205,in1Min72205,in0Con60884,in0Ave87814,in1Ave87814,in0Con66992], outputs=Con52294)
w = model.get_layer('Sim78737').get_weights() 
w[0] = np.array([[8]])
w[1] = np.array([[4]])
w[2] = np.array([6])
model.get_layer('Sim78737').set_weights(w) 
w = model.get_layer('Con52294').get_weights() 
w[0] = np.array([[[[0.5357, 0.3602, 0.596]]], [[[0.5064, 0.1899, 0.9615]]], [[[0.4517, 0.7212, 0.6383]]], [[[0.6804, 0.5235, 0.2172]]], [[[0.7824, 0.6311, 0.9445]]], [[[0.4691, 0.9878, 0.624]]], [[[0.267, 0.3921, 0.0599]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con52294').set_weights(w) 
in0Sub37942 = tf.constant([[0.3423, 0.7279, 0.6738]])
in1Sub37942 = tf.constant([[0.3053, 0.9296, 0.9036]])
in0Con29528 = tf.constant([[[[0.6983, 0.0729], [0.2158, 0.9479], [0.4822, 0.1292], [0.6412, 0.2755]], [[0.1293, 0.0662], [0.2908, 0.7444], [0.4246, 0.7001], [0.9234, 0.696]], [[0.4376, 0.6478], [0.9007, 0.6663], [0.3777, 0.1172], [0.0475, 0.5358]]]])
in0Zer8068 = tf.constant([[[[1.8892, 1.7037, 1.8995], [1.6678, 1.3741, 1.8775]]]])
in0Mul17676 = tf.constant([[[0.6859]]])
in1Mul17676 = tf.constant([[[0.7269]]])
in0Min72205 = tf.constant([[[[0.1245], [0.9204]], [[0.3287], [0.3002]]]])
in1Min72205 = tf.constant([[[[0.7154], [0.1213]], [[0.7268], [0.0499]]]])
in0Con60884 = tf.constant([[[[0.4828, 0.5009], [0.9715, 0.2742], [0.978, 0.7401], [0.4863, 0.5703]], [[0.2455, 0.1324], [0.1714, 0.9197], [0.738, 0.7807], [0.2933, 0.6286]], [[0.6446, 0.5975], [0.9829, 0.2839], [0.8068, 0.7971], [0.0247, 0.9952]]]])
in0Ave87814 = tf.constant([[[0.0596, 0.0827]]])
in1Ave87814 = tf.constant([[[0.5319, 0.8602]]])
in0Con66992 = tf.constant([[0.1383, 0.4885, 0.9533, 0.6222, 0.2644, 0.077, 0.6557, 0.2636, 0.3657, 0.3721, 0.098, 0.1843, 0.1943, 0.8291, 0.1796, 0.7083, 0.2221, 0.5246, 0.0736, 0.3147, 0.8411, 0.4825, 0.486, 0.2742, 0.2997, 0.8362, 0.0524, 0.7082, 0.8711, 0.2516, 0.7584, 0.4053, 0.5973, 0.231, 0.3769]])
print (np.array2string(model.predict([in0Sub37942,in1Sub37942,in0Con29528,in0Zer8068,in0Mul17676,in1Mul17676,in0Min72205,in1Min72205,in0Con60884,in0Ave87814,in1Ave87814,in0Con66992],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con52294.png')

LSub37942 = subtract_layer([[0.3423, 0.7279, 0.6738]], [[0.3053, 0.9296, 0.9036]], Sub37942), 
LRes75287 = reshape_layer(Sub37942, [3, 1], Res75287), 
LRes94452 = reshape_layer(Res75287, [3, 1, 1], Res94452), 
LZer62589 = zero_padding2D_layer(Res94452, 0, 0, 3, 0, Zer62589), 
LCon29528 = concatenate_layer([Zer62589,[[[[0.6983, 0.0729], [0.2158, 0.9479], [0.4822, 0.1292], [0.6412, 0.2755]], [[0.1293, 0.0662], [0.2908, 0.7444], [0.4246, 0.7001], [0.9234, 0.696]], [[0.4376, 0.6478], [0.9007, 0.6663], [0.3777, 0.1172], [0.0475, 0.5358]]]]], 3, Con29528), 
LZer8068 = zero_padding2D_layer([[[[1.8892, 1.7037, 1.8995], [1.6678, 1.3741, 1.8775]]]], 1, 1, 1, 1, Zer8068), 
LSub75773 = subtract_layer(Con29528,Zer8068, Sub75773), 
LMul17676 = multiply_layer([[[[0.6859]]], [[[0.7269]]]], Mul17676), 
LRes16852 = reshape_layer(Mul17676, [1, 1, 1], Res16852), 
LZer38761 = zero_padding2D_layer(Res16852, 1, 0, 1, 0, Zer38761), 
LMin72205 = minimum_layer([[[[[0.1245], [0.9204]], [[0.3287], [0.3002]]]], [[[[0.7154], [0.1213]], [[0.7268], [0.0499]]]]], Min72205), 
LMax78160 = maximum_layer([Zer38761,Min72205], Max78160), 
LZer18871 = zero_padding2D_layer(Max78160, 1, 0, 2, 0, Zer18871), 
LCon60884 = concatenate_layer([Zer18871,[[[[0.4828, 0.5009], [0.9715, 0.2742], [0.978, 0.7401], [0.4863, 0.5703]], [[0.2455, 0.1324], [0.1714, 0.9197], [0.738, 0.7807], [0.2933, 0.6286]], [[0.6446, 0.5975], [0.9829, 0.2839], [0.8068, 0.7971], [0.0247, 0.9952]]]]], 3, Con60884), 
LMax98961 = maximum_layer([Sub75773,Con60884], Max98961), 
LRes9867 = reshape_layer(Max98961, [3, 12], Res9867), 
LFla79022 = flatten_layer(Res9867, Fla79022), 
LAve87814 = average_layer([[[[0.0596, 0.0827]]], [[[0.5319, 0.8602]]]], Ave87814), 
LRes22640 = reshape_layer(Ave87814, [1, 2, 1], Res22640), 
LRes73419 = reshape_layer(Res22640, [1, 2, 1, 1], Res73419), 
LCro87832 = cropping3D_layer(Res73419, 0, 0, 0, 1, 0, 0, Cro87832), 
LRes78967 = reshape_layer(Cro87832, [1, 1, 1], Res78967), 
LRes73341 = reshape_layer(Res78967, [1, 1], Res73341), 
LSim78737 = simple_rnn_layer(Res73341,[[8]],[[4]],[6], Sim78737), 
LCon66992 = concatenate_layer([Sim78737,[[0.1383, 0.4885, 0.9533, 0.6222, 0.2644, 0.077, 0.6557, 0.2636, 0.3657, 0.3721, 0.098, 0.1843, 0.1943, 0.8291, 0.1796, 0.7083, 0.2221, 0.5246, 0.0736, 0.3147, 0.8411, 0.4825, 0.486, 0.2742, 0.2997, 0.8362, 0.0524, 0.7082, 0.8711, 0.2516, 0.7584, 0.4053, 0.5973, 0.231, 0.3769]]], 1, Con66992), 
LMul11282 = multiply_layer([Fla79022,Con66992], Mul11282), 
LRes62849 = reshape_layer(Mul11282, [36, 1], Res62849), 
LRes45046 = reshape_layer(Res62849, [36, 1, 1], Res45046), 
LCon52294 = conv2D_layer(Res45046, 7, 1,[[[[0.5357, 0.3602, 0.596]]], [[[0.5064, 0.1899, 0.9615]]], [[[0.4517, 0.7212, 0.6383]]], [[[0.6804, 0.5235, 0.2172]]], [[[0.7824, 0.6311, 0.9445]]], [[[0.4691, 0.9878, 0.624]]], [[[0.267, 0.3921, 0.0599]]]],[0, 0, 0], 1, 1, false, 1, 1, Con52294), 
exec_layers([LSub37942,LRes75287,LRes94452,LZer62589,LCon29528,LZer8068,LSub75773,LMul17676,LRes16852,LZer38761,LMin72205,LMax78160,LZer18871,LCon60884,LMax98961,LRes9867,LFla79022,LAve87814,LRes22640,LRes73419,LCro87832,LRes78967,LRes73341,LSim78737,LCon66992,LMul11282,LRes62849,LRes45046,LCon52294],["Sub37942","Res75287","Res94452","Zer62589","Con29528","Zer8068","Sub75773","Mul17676","Res16852","Zer38761","Min72205","Max78160","Zer18871","Con60884","Max98961","Res9867","Fla79022","Ave87814","Res22640","Res73419","Cro87832","Res78967","Res73341","Sim78737","Con66992","Mul11282","Res62849","Res45046","Con52294"],Con52294,"Con52294")

Actual (Unparsed): [[[[0.7499351, 0.8238562, 0.9763514]], [[0.9542347, 0.8073045, 0.6992455]], [[0.9275543, 1.3652271, 0.9979435]], [[1.0161723, 0.8982631, 1.4693999]], [[1.1097425, 0.8310687, 0.9475208]], [[0.6940948, 0.9210254, 0.7660798]], [[0.6349611, 0.4753427, 1.0042744]], [[0.6672374, 0.4566706, 0.6858825]], [[0.3088462, 0.3643313, 0.3300559]], [[0.2421314, 0.2290271, 0.3866949]], [[0.3068716, 0.2384046, 0.3172507]], [[0.2376646, 0.3120131, 0.1755908]], [[0.2819848, 0.3922262, 0.3619708]], [[0.3687026, 0.3163073, 0.3972822]], [[0.3948040, 0.4252353, 0.2975805]], [[0.3831734, 0.5215342, 0.4720189]], [[0.5939787, 0.5885873, 0.6446463]], [[0.7133413, 0.8908926, 0.6672156]], [[0.7501554, 0.8797495, 0.9020182]], [[0.8189760, 0.6622637, 0.7615491]], [[0.8499350, 1.0094982, 0.7553799]], [[0.8383231, 1.0223097, 1.2255827]], [[1.1510876, 0.9406493, 1.1860577]], [[1.1185385, 1.4599187, 0.9116935]], [[1.1814852, 1.4724154, 1.5560988]], [[1.5077036, 1.2247640, 1.4236230]], [[1.4375160, 1.7842620, 1.3725014]], [[1.3807380, 1.4161231, 1.8550798]], [[1.5158886, 1.2432712, 1.6502456]], [[1.1873025, 1.1810349, 1.1967635]]]]

Expected (Unparsed): [[[[0.749935129637,0.823856198149,0.9763513754200001]],[[0.9542346886769999,0.8073045281589999,0.699245464835]],[[0.927554252599,1.365227070586,0.9979434698259999]],[[1.016172330028,0.8982630407399999,1.4693998385079998]],[[1.109742460608,0.8310687085919999,0.947520759428]],[[0.694094760588,0.9210253839179999,0.766079754922]],[[0.6349611378,0.475342666814,1.004274347908]],[[0.667237398972,0.4566706177889999,0.685882484389]],[[0.30884616245099994,0.36433128214,0.330055920222]],[[0.24213141224199997,0.229027096775,0.38669492148499995]],[[0.30687162554,0.238404599265,0.31725065351799997]],[[0.23766459835299997,0.31201311201299997,0.175590798686]],[[0.281984786843,0.392226161281,0.361970774947]],[[0.36870254568699995,0.316307285363,0.39728216520899995]],[[0.39480393838,0.42523524202599994,0.29758048047099994]],[[0.383173408246,0.521534161677,0.47201890905799987]],[[0.593978660221,0.58858734895,0.6446462653199999]],[[0.7133412572469999,0.8908926493519999,0.667215622233]],[[0.750155417475,0.8797495461629999,0.9020182009529999]],[[0.818976011887,0.662263764999,0.7615490797419999]],[[0.8499350191169999,1.009498188807,0.755379887579]],[[0.838323126615,1.022309741526,1.2255826990599998]],[[1.151087569422,0.9406492870040001,1.1860577387059998]],[[1.118538491506,1.459918691641,0.9116935588650001]],[[1.1814852040550001,1.472415397714,1.556098766556]],[[1.507703608394,1.224764038469,1.423622977329]],[[1.4375159304599998,1.784261920534,1.3725013798870003]],[[1.380738022270161,1.4161230644983442,1.8550797990321715]],[[1.515888570588735,1.2432711956643876,1.6502456151037919]],[[1.1873025089791394,1.1810348896671814,1.1967634566633933]]]]

Actual:   [[[[0.75, 0.8239, 0.9764]], [[0.9543, 0.8074, 0.6993]], [[0.9276, 1.3653, 0.998]], [[1.0162, 0.8983, 1.4694]], [[1.1098, 0.8311, 0.9476]], [[0.6941, 0.9211, 0.7661]], [[0.635, 0.4754, 1.0043]], [[0.6673, 0.4567, 0.6859]], [[0.3089, 0.3644, 0.3301]], [[0.2422, 0.2291, 0.3867]], [[0.3069, 0.2385, 0.3173]], [[0.2377, 0.3121, 0.1756]], [[0.282, 0.3923, 0.362]], [[0.3688, 0.3164, 0.3973]], [[0.3949, 0.4253, 0.2976]], [[0.3832, 0.5216, 0.4721]], [[0.594, 0.5886, 0.6447]], [[0.7134, 0.8909, 0.6673]], [[0.7502, 0.8798, 0.9021]], [[0.819, 0.6623, 0.7616]], [[0.85, 1.0095, 0.7554]], [[0.8384, 1.0224, 1.2256]], [[1.1511, 0.9407, 1.1861]], [[1.1186, 1.46, 0.9117]], [[1.1815, 1.4725, 1.5561]], [[1.5078, 1.2248, 1.4237]], [[1.4376, 1.7843, 1.3726]], [[1.3808, 1.4162, 1.8551]], [[1.5159, 1.2433, 1.6503]], [[1.1874, 1.1811, 1.1968]]]]

Expected: [[[[0.75, 0.8239, 0.9764]], [[0.9543, 0.8074, 0.6993]], [[0.9276, 1.3653, 0.998]], [[1.0162, 0.8983, 1.4694]], [[1.1098, 0.8311, 0.9476]], [[0.6941, 0.9211, 0.7661]], [[0.635, 0.4754, 1.0043]], [[0.6673, 0.4567, 0.6859]], [[0.3089, 0.3644, 0.3301]], [[0.2422, 0.2291, 0.3867]], [[0.3069, 0.2385, 0.3173]], [[0.2377, 0.3121, 0.1756]], [[0.282, 0.3923, 0.362]], [[0.3688, 0.3164, 0.3973]], [[0.3949, 0.4253, 0.2976]], [[0.3832, 0.5216, 0.4721]], [[0.594, 0.5886, 0.6447]], [[0.7134, 0.8909, 0.6673]], [[0.7502, 0.8798, 0.9021]], [[0.819, 0.6623, 0.7616]], [[0.85, 1.0095, 0.7554]], [[0.8384, 1.0224, 1.2256]], [[1.1511, 0.9407, 1.1861]], [[1.1186, 1.46, 0.9117]], [[1.1815, 1.4725, 1.5561]], [[1.5078, 1.2248, 1.4237]], [[1.4376, 1.7843, 1.3726]], [[1.3808, 1.4162, 1.8551]], [[1.5159, 1.2433, 1.6503]], [[1.1874, 1.1811, 1.1968]]]]