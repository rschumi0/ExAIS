import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer28470 = tf.keras.layers.Input(shape=([4, 3, 4]))
in0Sub43630 = tf.keras.layers.Input(shape=([2, 3]))
in1Sub43630 = tf.keras.layers.Input(shape=([2, 3]))
in0Con79595 = tf.keras.layers.Input(shape=([8, 39]))

Zer28470 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer28470', )(in0Zer28470)
Res36023 = keras.layers.Reshape((6, 5, 4, 1), name = 'Res36023', )(Zer28470)
Zer55174 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer55174', )(Res36023)
Res49270 = keras.layers.Reshape((8, 7, 6), name = 'Res49270', )(Zer55174)
Res61031 = keras.layers.Reshape((8, 42), name = 'Res61031', )(Res49270)
Sub43630 = keras.layers.Subtract(name = 'Sub43630', )([in0Sub43630,in1Sub43630])
Zer38289 = keras.layers.ZeroPadding1D(padding=((6, 0)), name = 'Zer38289', )(Sub43630)
Con79595 = keras.layers.Concatenate(axis=2, name = 'Con79595', )([Zer38289,in0Con79595])
Mul27439 = keras.layers.Multiply(name = 'Mul27439', )([Res61031,Con79595])
Res18150 = keras.layers.Reshape((8, 42, 1), name = 'Res18150', )(Mul27439)
Con3573 = keras.layers.Conv2D(4, (2, 6),strides=(12, 7), padding='valid', dilation_rate=(1, 1), name = 'Con3573', )(Res18150)
model = tf.keras.models.Model(inputs=[in0Zer28470,in0Sub43630,in1Sub43630,in0Con79595], outputs=Con3573)
w = model.get_layer('Con3573').get_weights() 
w[0] = np.array([[[[0.5098, 0.1695, 0.8132, 0.8353]], [[0.0683, 0.841, 0.4867, 0.2592]], [[0.1988, 0.2467, 0.4901, 0.1231]], [[0.0396, 0.1228, 0.0259, 0.9527]], [[0.5062, 0.3456, 0.4937, 0.3681]], [[0.6449, 0.0871, 0.0648, 0.3821]]], [[[0.9539, 0.7695, 0.3397, 0.4095]], [[0.9979, 0.3396, 0.5758, 0.0357]], [[0.4751, 0.7624, 0.9513, 0.7359]], [[0.265, 0.7873, 0.3401, 0.1597]], [[0.8847, 0.9823, 0.1092, 0.2985]], [[0.2133, 0.7465, 0.528, 0.8393]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con3573').set_weights(w) 
in0Zer28470 = tf.constant([[[[1.5945, 1.2098, 1.6089, 1.631], [1.1517, 1.7125, 1.0472, 1.2611], [1.3714, 1.6756, 1.8998, 1.7631]], [[1.682, 1.462, 1.5985, 1.9644], [1.168, 1.2337, 1.6117, 1.1232], [1.3368, 1.8555, 1.7912, 1.9047]], [[1.6993, 1.7364, 1.2573, 1.0945], [1.1067, 1.7436, 1.1016, 1.7574], [1.7191, 1.5417, 1.7588, 1.0371]], [[1.9404, 1.7132, 1.5009, 1.5559], [1.6491, 1.7953, 1.1413, 1.4252], [1.5794, 1.9362, 1.7018, 1.2012]]]])
in0Sub43630 = tf.constant([[[0.7606, 0.2132, 0.4902], [0.7378, 0.5111, 0.7862]]])
in1Sub43630 = tf.constant([[[0.7659, 0.7725, 0.6022], [0.9632, 0.9282, 0.2608]]])
in0Con79595 = tf.constant([[[0.5831, 0.5639, 0.9222, 0.6409, 0.2927, 0.9638, 0.0278, 0.2501, 0.7278, 0.2136, 0.19, 0.2756, 0.1187, 0.813, 0.6631, 0.5061, 0.5393, 0.484, 0.5231, 0.5752, 0.3408, 0.0079, 0.4822, 0.0579, 0.6422, 0.1468, 0.4343, 0.7212, 0.6757, 0.4032, 0.0231, 0.664, 0.5256, 0.9024, 0.9045, 0.8775, 0.0771, 0.9977, 0.7933], [0.837, 0.7935, 0.2916, 0.8275, 0.0975, 0.2802, 0.6417, 0.2631, 0.5056, 0.4587, 0.3794, 0.021, 0.5635, 0.5783, 0.407, 0.1453, 0.6856, 0.2178, 0.0556, 0.8076, 0.5723, 0.8961, 0.5937, 0.0904, 0.6939, 0.9021, 0.0517, 0.4193, 0.9236, 0.4773, 0.5948, 0.1769, 0.6896, 0.5436, 0.022, 0.7298, 0.6237, 0.752, 0.0917], [0.8242, 0.5799, 0.7481, 0.2851, 0.0687, 0.0638, 0.2008, 0.3043, 0.0085, 0.5734, 0.317, 0.0744, 0.1206, 0.0827, 0.2826, 0.2666, 0.9091, 0.9178, 0.3093, 0.3954, 0.1644, 0.5751, 0.7412, 0.3522, 0.3662, 0.6057, 0.9849, 0.837, 0.1551, 0.5548, 0.8575, 0.5209, 0.7758, 0.0848, 0.3206, 0.9343, 0.4034, 0.8327, 0.4648], [0.0099, 0.3045, 0.2576, 0.0405, 0.9318, 0.8565, 0.7209, 0.7926, 0.4426, 0.5497, 0.3043, 0.3517, 0.0423, 0.2331, 0.4226, 0.4546, 0.576, 0.0261, 0.1162, 0.8276, 0.5523, 0.5187, 0.0166, 0.1492, 0.1616, 0.1071, 0.3732, 0.129, 0.3681, 0.5724, 0.1991, 0.8877, 0.6404, 0.2991, 0.551, 0.5056, 0.8533, 0.8514, 0.1905], [0.8163, 0.6463, 0.9789, 0.3934, 0.2683, 0.0538, 0.5056, 0.4692, 0.9492, 0.5395, 0.9723, 0.6346, 0.6744, 0.6574, 0.3475, 0.2415, 0.3789, 0.4425, 0.6024, 0.0066, 0.9171, 0.2875, 0.4493, 0.8075, 0.7797, 0.503, 0.0882, 0.8174, 0.1598, 0.9772, 0.3739, 0.2351, 0.2714, 0.3532, 0.4201, 0.6338, 0.8079, 0.9214, 0.2909], [0.999, 0.9593, 0.9921, 0.0934, 0.8561, 0.4586, 0.8552, 0.484, 0.4985, 0.7165, 0.5599, 0.3268, 0.2177, 0.2206, 0.6565, 0.0011, 0.6111, 0.026, 0.7292, 0.6466, 0.4961, 0.3443, 0.0188, 0.4539, 0.6945, 0.9481, 0.6855, 0.9637, 0.9699, 0.3556, 0.2943, 0.218, 0.6949, 0.5294, 0.9186, 0.5244, 0.4075, 0.1326, 0.8525], [0.5403, 0.2744, 0.2208, 0.2986, 0.3611, 0.6217, 0.6177, 0.5541, 0.3045, 0.1148, 0.1196, 0.1589, 0.1251, 0.876, 0.1072, 0.1861, 0.4618, 0.8101, 0.1034, 0.3586, 0.4275, 0.6784, 0.3085, 0.9571, 0.378, 0.0072, 0.1712, 0.5471, 0.0692, 0.7462, 0.6062, 0.3996, 0.6024, 0.7043, 0.5584, 0.1034, 0.7875, 0.1785, 0.2307], [0.2771, 0.8126, 0.8684, 0.4427, 0.4735, 0.3988, 0.1204, 0.2675, 0.3443, 0.9377, 0.7807, 0.3061, 0.8773, 0.4667, 0.4555, 0.7016, 0.0571, 0.715, 0.7712, 0.2708, 0.6086, 0.8735, 0.3099, 0.9357, 0.5805, 0.1841, 0.2521, 0.974, 0.4008, 0.9246, 0.4047, 0.4767, 0.6927, 0.8715, 0.2101, 0.7997, 0.5806, 0.8648, 0.5411]]])
print (np.array2string(model.predict([in0Zer28470,in0Sub43630,in1Sub43630,in0Con79595],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con3573.png')

LZer28470 = zero_padding2D_layer([[[[1.5945, 1.2098, 1.6089, 1.631], [1.1517, 1.7125, 1.0472, 1.2611], [1.3714, 1.6756, 1.8998, 1.7631]], [[1.682, 1.462, 1.5985, 1.9644], [1.168, 1.2337, 1.6117, 1.1232], [1.3368, 1.8555, 1.7912, 1.9047]], [[1.6993, 1.7364, 1.2573, 1.0945], [1.1067, 1.7436, 1.1016, 1.7574], [1.7191, 1.5417, 1.7588, 1.0371]], [[1.9404, 1.7132, 1.5009, 1.5559], [1.6491, 1.7953, 1.1413, 1.4252], [1.5794, 1.9362, 1.7018, 1.2012]]]], 1, 1, 1, 1, Zer28470), 
LRes36023 = reshape_layer(Zer28470, [6, 5, 4, 1], Res36023), 
LZer55174 = zero_padding3D_layer(Res36023, 1, 1, 1, 1, 1, 1, Zer55174), 
LRes49270 = reshape_layer(Zer55174, [8, 7, 6], Res49270), 
LRes61031 = reshape_layer(Res49270, [8, 42], Res61031), 
LSub43630 = subtract_layer([[[0.7606, 0.2132, 0.4902], [0.7378, 0.5111, 0.7862]]], [[[0.7659, 0.7725, 0.6022], [0.9632, 0.9282, 0.2608]]], Sub43630), 
LZer38289 = zero_padding1D_layer(Sub43630, 6, 0, Zer38289), 
LCon79595 = concatenate_layer([Zer38289,[[[0.5831, 0.5639, 0.9222, 0.6409, 0.2927, 0.9638, 0.0278, 0.2501, 0.7278, 0.2136, 0.19, 0.2756, 0.1187, 0.813, 0.6631, 0.5061, 0.5393, 0.484, 0.5231, 0.5752, 0.3408, 0.0079, 0.4822, 0.0579, 0.6422, 0.1468, 0.4343, 0.7212, 0.6757, 0.4032, 0.0231, 0.664, 0.5256, 0.9024, 0.9045, 0.8775, 0.0771, 0.9977, 0.7933], [0.837, 0.7935, 0.2916, 0.8275, 0.0975, 0.2802, 0.6417, 0.2631, 0.5056, 0.4587, 0.3794, 0.021, 0.5635, 0.5783, 0.407, 0.1453, 0.6856, 0.2178, 0.0556, 0.8076, 0.5723, 0.8961, 0.5937, 0.0904, 0.6939, 0.9021, 0.0517, 0.4193, 0.9236, 0.4773, 0.5948, 0.1769, 0.6896, 0.5436, 0.022, 0.7298, 0.6237, 0.752, 0.0917], [0.8242, 0.5799, 0.7481, 0.2851, 0.0687, 0.0638, 0.2008, 0.3043, 0.0085, 0.5734, 0.317, 0.0744, 0.1206, 0.0827, 0.2826, 0.2666, 0.9091, 0.9178, 0.3093, 0.3954, 0.1644, 0.5751, 0.7412, 0.3522, 0.3662, 0.6057, 0.9849, 0.837, 0.1551, 0.5548, 0.8575, 0.5209, 0.7758, 0.0848, 0.3206, 0.9343, 0.4034, 0.8327, 0.4648], [0.0099, 0.3045, 0.2576, 0.0405, 0.9318, 0.8565, 0.7209, 0.7926, 0.4426, 0.5497, 0.3043, 0.3517, 0.0423, 0.2331, 0.4226, 0.4546, 0.576, 0.0261, 0.1162, 0.8276, 0.5523, 0.5187, 0.0166, 0.1492, 0.1616, 0.1071, 0.3732, 0.129, 0.3681, 0.5724, 0.1991, 0.8877, 0.6404, 0.2991, 0.551, 0.5056, 0.8533, 0.8514, 0.1905], [0.8163, 0.6463, 0.9789, 0.3934, 0.2683, 0.0538, 0.5056, 0.4692, 0.9492, 0.5395, 0.9723, 0.6346, 0.6744, 0.6574, 0.3475, 0.2415, 0.3789, 0.4425, 0.6024, 0.0066, 0.9171, 0.2875, 0.4493, 0.8075, 0.7797, 0.503, 0.0882, 0.8174, 0.1598, 0.9772, 0.3739, 0.2351, 0.2714, 0.3532, 0.4201, 0.6338, 0.8079, 0.9214, 0.2909], [0.999, 0.9593, 0.9921, 0.0934, 0.8561, 0.4586, 0.8552, 0.484, 0.4985, 0.7165, 0.5599, 0.3268, 0.2177, 0.2206, 0.6565, 0.0011, 0.6111, 0.026, 0.7292, 0.6466, 0.4961, 0.3443, 0.0188, 0.4539, 0.6945, 0.9481, 0.6855, 0.9637, 0.9699, 0.3556, 0.2943, 0.218, 0.6949, 0.5294, 0.9186, 0.5244, 0.4075, 0.1326, 0.8525], [0.5403, 0.2744, 0.2208, 0.2986, 0.3611, 0.6217, 0.6177, 0.5541, 0.3045, 0.1148, 0.1196, 0.1589, 0.1251, 0.876, 0.1072, 0.1861, 0.4618, 0.8101, 0.1034, 0.3586, 0.4275, 0.6784, 0.3085, 0.9571, 0.378, 0.0072, 0.1712, 0.5471, 0.0692, 0.7462, 0.6062, 0.3996, 0.6024, 0.7043, 0.5584, 0.1034, 0.7875, 0.1785, 0.2307], [0.2771, 0.8126, 0.8684, 0.4427, 0.4735, 0.3988, 0.1204, 0.2675, 0.3443, 0.9377, 0.7807, 0.3061, 0.8773, 0.4667, 0.4555, 0.7016, 0.0571, 0.715, 0.7712, 0.2708, 0.6086, 0.8735, 0.3099, 0.9357, 0.5805, 0.1841, 0.2521, 0.974, 0.4008, 0.9246, 0.4047, 0.4767, 0.6927, 0.8715, 0.2101, 0.7997, 0.5806, 0.8648, 0.5411]]]], 2, Con79595), 
LMul27439 = multiply_layer([Res61031,Con79595], Mul27439), 
LRes18150 = reshape_layer(Mul27439, [8, 42, 1], Res18150), 
LCon3573 = conv2D_layer(Res18150, 2, 6,[[[[0.5098, 0.1695, 0.8132, 0.8353]], [[0.0683, 0.841, 0.4867, 0.2592]], [[0.1988, 0.2467, 0.4901, 0.1231]], [[0.0396, 0.1228, 0.0259, 0.9527]], [[0.5062, 0.3456, 0.4937, 0.3681]], [[0.6449, 0.0871, 0.0648, 0.3821]]], [[[0.9539, 0.7695, 0.3397, 0.4095]], [[0.9979, 0.3396, 0.5758, 0.0357]], [[0.4751, 0.7624, 0.9513, 0.7359]], [[0.265, 0.7873, 0.3401, 0.1597]], [[0.8847, 0.9823, 0.1092, 0.2985]], [[0.2133, 0.7465, 0.528, 0.8393]]]],[0, 0, 0, 0], 12, 7, false, 1, 1, Con3573), 
exec_layers([LZer28470,LRes36023,LZer55174,LRes49270,LRes61031,LSub43630,LZer38289,LCon79595,LMul27439,LRes18150,LCon3573],["Zer28470","Res36023","Zer55174","Res49270","Res61031","Sub43630","Zer38289","Con79595","Mul27439","Res18150","Con3573"],Con3573,"Con3573")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]]]]

Expected (Unparsed): [[[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]]]]

Actual:   [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]]

Expected: [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]]