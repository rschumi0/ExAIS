import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro85133 = tf.keras.layers.Input(shape=([3, 4, 3]))
in0Bat2593 = tf.keras.layers.Input(shape=([3]))
in0Con74404 = tf.keras.layers.Input(shape=([3, 5]))
in0Con58553 = tf.keras.layers.Input(shape=([2, 2]))
in0Con88335 = tf.keras.layers.Input(shape=([3, 5]))
in0Con11230 = tf.keras.layers.Input(shape=([3, 9, 1]))
in0Add78132 = tf.keras.layers.Input(shape=([1, 1, 2]))
in1Add78132 = tf.keras.layers.Input(shape=([1, 1, 2]))

Cro85133 = keras.layers.Cropping2D(cropping=((2, 0), (1, 0)), name = 'Cro85133', )(in0Cro85133)
Res81752 = keras.layers.Reshape((1, 9), name = 'Res81752', )(Cro85133)
Zer25627 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer25627', )(Res81752)
Bat2593 = keras.layers.BatchNormalization(axis=1, epsilon=0.6095564367900647,  name = 'Bat2593', )(in0Bat2593)
Res62150 = keras.layers.Reshape((3, 1), name = 'Res62150', )(Bat2593)
Con48382 = keras.layers.Conv1D(4, (2),strides=(1), padding='same', dilation_rate=(1), name = 'Con48382', )(Res62150)
Con74404 = keras.layers.Concatenate(axis=2, name = 'Con74404', )([Con48382,in0Con74404])
Min76171 = keras.layers.Minimum(name = 'Min76171', )([Zer25627,Con74404])
Con58553 = keras.layers.Conv1D(4, (1),strides=(2), padding='same', dilation_rate=(1), name = 'Con58553', )(in0Con58553)
Zer52971 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer52971', )(Con58553)
Con88335 = keras.layers.Concatenate(axis=2, name = 'Con88335', )([Zer52971,in0Con88335])
Sub99905 = keras.layers.Subtract(name = 'Sub99905', )([Min76171,Con88335])
Res35244 = keras.layers.Reshape((3, 9, 1), name = 'Res35244', )(Sub99905)
Con11230 = keras.layers.Concatenate(axis=3, name = 'Con11230', )([Res35244,in0Con11230])
Add78132 = keras.layers.Add(name = 'Add78132', )([in0Add78132,in1Add78132])
Zer46570 = keras.layers.ZeroPadding2D(padding=((2, 0), (8, 0)), name = 'Zer46570', )(Add78132)
Ave60477 = keras.layers.Average(name = 'Ave60477', )([Con11230,Zer46570])
model = tf.keras.models.Model(inputs=[in0Cro85133,in0Bat2593,in0Con74404,in0Con58553,in0Con88335,in0Con11230,in0Add78132,in1Add78132], outputs=Ave60477)
w = model.get_layer('Bat2593').get_weights() 
w[0] = np.array([0.8168, 0.5548, 0.3989])
w[1] = np.array([0.1517, 0.6744, 0.3552])
w[2] = np.array([0.1238, 0.5813, 0.6545])
w[3] = np.array([0.8618, 0.6551, 0.3571])
model.get_layer('Bat2593').set_weights(w) 
w = model.get_layer('Con48382').get_weights() 
w[0] = np.array([[[0.2729, 0.1512, 0.4225, 0.1866]], [[0.7835, 0.2766, 0.92, 0.725]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con48382').set_weights(w) 
w = model.get_layer('Con58553').get_weights() 
w[0] = np.array([[[0.9978, 0.9919, 0.5186, 0.9982], [0.6848, 0.6711, 0.4707, 0.5122]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con58553').set_weights(w) 
in0Cro85133 = tf.constant([[[[1.8674, 1.2528, 1.2983], [1.1033, 1.5947, 1.3703], [1.1527, 1.9901, 1.9138], [1.7034, 1.746, 1.513]], [[1.7258, 1.0724, 1.6106], [1.4759, 1.7415, 1.5852], [1.0422, 1.9543, 1.9682], [1.1224, 1.8236, 1.556]], [[1.9974, 1.5121, 1.3904], [1.2381, 1.7168, 1.0646], [1.8866, 1.3985, 1.32], [1.3983, 1.6399, 1.1782]]]])
in0Bat2593 = tf.constant([[1.6513, 1.9085, 1.075]])
in0Con74404 = tf.constant([[[0.5113, 0.5901, 0.6559, 0.8853, 0.5836], [0.4796, 0.0198, 0.2164, 0.9073, 0.9751], [0.2765, 0.2498, 0.6161, 0.9068, 0.7694]]])
in0Con58553 = tf.constant([[[0.7797, 0.9896], [0.8065, 0.9823]]])
in0Con88335 = tf.constant([[[0.636, 0.8306, 0.3127, 0.3189, 0.2539], [0.4887, 0.9518, 0.3293, 0.8724, 0.5029], [0.2016, 0.9899, 0.2819, 0.9771, 0.5631]]])
in0Con11230 = tf.constant([[[[0.9139], [0.3469], [0.5711], [0.3144], [0.4467], [0.1077], [0.1176], [0.2149], [0.3909]], [[0.134], [0.7068], [0.7748], [0.2289], [0.9738], [0.9002], [0.1487], [0.2959], [0.2978]], [[0.3664], [0.3244], [0.6281], [0.1346], [0.2956], [0.6153], [0.5418], [0.5818], [0.0619]]]])
in0Add78132 = tf.constant([[[[0.1369, 0.3483]]]])
in1Add78132 = tf.constant([[[[0.3842, 0.3563]]]])
print (np.array2string(model.predict([in0Cro85133,in0Bat2593,in0Con74404,in0Con58553,in0Con88335,in0Con11230,in0Add78132,in1Add78132],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave60477.png')

LCro85133 = cropping2D_layer([[[[1.8674, 1.2528, 1.2983], [1.1033, 1.5947, 1.3703], [1.1527, 1.9901, 1.9138], [1.7034, 1.746, 1.513]], [[1.7258, 1.0724, 1.6106], [1.4759, 1.7415, 1.5852], [1.0422, 1.9543, 1.9682], [1.1224, 1.8236, 1.556]], [[1.9974, 1.5121, 1.3904], [1.2381, 1.7168, 1.0646], [1.8866, 1.3985, 1.32], [1.3983, 1.6399, 1.1782]]]], 2, 0, 1, 0, Cro85133), 
LRes81752 = reshape_layer(Cro85133, [1, 9], Res81752), 
LZer25627 = zero_padding1D_layer(Res81752, 2, 0, Zer25627), 
LBat2593 = batch_normalization_layer([[1.6513, 1.9085, 1.075]], 1, 0.6095564367900647, [0.8168, 0.5548, 0.3989], [0.1517, 0.6744, 0.3552], [0.1238, 0.5813, 0.6545], [0.8618, 0.6551, 0.3571], Bat2593), 
LRes62150 = reshape_layer(Bat2593, [3, 1], Res62150), 
LCon48382 = conv1D_layer(Res62150, 2,[[[0.2729, 0.1512, 0.4225, 0.1866]], [[0.7835, 0.2766, 0.92, 0.725]]],[0, 0, 0, 0], 1, true, 1, Con48382), 
LCon74404 = concatenate_layer([Con48382,[[[0.5113, 0.5901, 0.6559, 0.8853, 0.5836], [0.4796, 0.0198, 0.2164, 0.9073, 0.9751], [0.2765, 0.2498, 0.6161, 0.9068, 0.7694]]]], 2, Con74404), 
LMin76171 = minimum_layer([Zer25627,Con74404], Min76171), 
LCon58553 = conv1D_layer([[[0.7797, 0.9896], [0.8065, 0.9823]]], 1,[[[0.9978, 0.9919, 0.5186, 0.9982], [0.6848, 0.6711, 0.4707, 0.5122]]],[0, 0, 0, 0], 2, true, 1, Con58553), 
LZer52971 = zero_padding1D_layer(Con58553, 2, 0, Zer52971), 
LCon88335 = concatenate_layer([Zer52971,[[[0.636, 0.8306, 0.3127, 0.3189, 0.2539], [0.4887, 0.9518, 0.3293, 0.8724, 0.5029], [0.2016, 0.9899, 0.2819, 0.9771, 0.5631]]]], 2, Con88335), 
LSub99905 = subtract_layer(Min76171,Con88335, Sub99905), 
LRes35244 = reshape_layer(Sub99905, [3, 9, 1], Res35244), 
LCon11230 = concatenate_layer([Res35244,[[[[0.9139], [0.3469], [0.5711], [0.3144], [0.4467], [0.1077], [0.1176], [0.2149], [0.3909]], [[0.134], [0.7068], [0.7748], [0.2289], [0.9738], [0.9002], [0.1487], [0.2959], [0.2978]], [[0.3664], [0.3244], [0.6281], [0.1346], [0.2956], [0.6153], [0.5418], [0.5818], [0.0619]]]]], 3, Con11230), 
LAdd78132 = add_layer([[[[[0.1369, 0.3483]]]], [[[[0.3842, 0.3563]]]]], Add78132), 
LZer46570 = zero_padding2D_layer(Add78132, 2, 0, 8, 0, Zer46570), 
LAve60477 = average_layer([Con11230,Zer46570], Ave60477), 
exec_layers([LCro85133,LRes81752,LZer25627,LBat2593,LRes62150,LCon48382,LCon74404,LMin76171,LCon58553,LZer52971,LCon88335,LSub99905,LRes35244,LCon11230,LAdd78132,LZer46570,LAve60477],["Cro85133","Res81752","Zer25627","Bat2593","Res62150","Con48382","Con74404","Min76171","Con58553","Zer52971","Con88335","Sub99905","Res35244","Con11230","Add78132","Zer46570","Ave60477"],Ave60477,"Ave60477")

Actual (Unparsed): [[[[0.0000000, 0.4569500], [0.0000000, 0.1734500], [0.0000000, 0.2855500], [0.0000000, 0.1572000], [-0.3180000, 0.2233500], [-0.4153000, 0.0538500], [-0.1563500, 0.0588000], [-0.1594500, 0.1074500], [-0.1269500, 0.1954500]], [[0.0000000, 0.0670000], [0.0000000, 0.3534000], [0.0000000, 0.3874000], [0.0000000, 0.1144500], [-0.2443500, 0.4869000], [-0.4759000, 0.4501000], [-0.1646500, 0.0743500], [-0.4362000, 0.1479500], [-0.2514500, 0.1489000]], [[-0.6560851, 0.1832000], [-0.6790016, 0.1622000], [-0.3240021, 0.3140500], [-0.5935271, 0.0673000], [0.0374500, 0.1478000], [-0.3700500, 0.3076500], [0.1671000, 0.2709000], [-0.0351500, 0.2909000], [0.3637000, 0.3832500]]]]

Expected (Unparsed): [[[[0,0.45695],[0,0.17345],[0,0.28555],[0,0.1572],[-0.318,0.22335],[-0.4153,0.05385],[-0.15635,0.0588],[-0.15945,0.10745],[-0.12695,0.19545]],[[0,0.067],[0,0.3534],[0,0.3874],[0,0.11445],[-0.24435,0.4869],[-0.4759,0.4501],[-0.16465,0.07435],[-0.4362,0.14795],[-0.25145,0.1489]],[[-0.6560851594089636,0.1832],[-0.679001571433255,0.1622],[-0.3240020805360466,0.31405],[-0.5935271425823107,0.0673],[0.03745000000000001,0.1478],[-0.37005,0.30765],[0.1671,0.2709],[-0.03514999999999996,0.2909],[0.36369999999999997,0.38325]]]]

Actual:   [[[[0, 0.457], [0, 0.1735], [0, 0.2856], [0, 0.1572], [-0.318, 0.2234], [-0.4153, 0.0539], [-0.1563, 0.0588], [-0.1594, 0.1075], [-0.1269, 0.1955]], [[0, 0.067], [0, 0.3534], [0, 0.3874], [0, 0.1145], [-0.2443, 0.4869], [-0.4759, 0.4501], [-0.1646, 0.0744], [-0.4362, 0.148], [-0.2514, 0.1489]], [[-0.656, 0.1832], [-0.679, 0.1622], [-0.324, 0.3141], [-0.5935, 0.0673], [0.0375, 0.1478], [-0.37, 0.3077], [0.1671, 0.2709], [-0.0351, 0.2909], [0.3637, 0.3833]]]]

Expected: [[[[0, 0.457], [0, 0.1735], [0, 0.2856], [0, 0.1572], [-0.318, 0.2234], [-0.4153, 0.0539], [-0.1563, 0.0588], [-0.1594, 0.1075], [-0.1269, 0.1955]], [[0, 0.067], [0, 0.3534], [0, 0.3874], [0, 0.1145], [-0.2443, 0.4869], [-0.4759, 0.4501], [-0.1646, 0.0744], [-0.4362, 0.148], [-0.2514, 0.1489]], [[-0.656, 0.1832], [-0.679, 0.1622], [-0.324, 0.3141], [-0.5935, 0.0673], [0.0375, 0.1478], [-0.37, 0.3077], [0.1671, 0.2709], [-0.0351, 0.2909], [0.3637, 0.3833]]]]