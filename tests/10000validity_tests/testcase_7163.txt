import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul93187 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in1Mul93187 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in0Con6203 = tf.keras.layers.Input(shape=([4, 3, 2]))
in0Den15615 = tf.keras.layers.Input(shape=([4, 3, 4]))

Mul93187 = keras.layers.Multiply(name = 'Mul93187', )([in0Mul93187,in1Mul93187])
Lea96950 = keras.layers.LeakyReLU(alpha=5.710095569609819, name = 'Lea96950', )(Mul93187)
Res47137 = keras.layers.Reshape((2, 1, 2), name = 'Res47137', )(Lea96950)
Zer1509 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer1509', )(Res47137)
Con6203 = keras.layers.Concatenate(axis=3, name = 'Con6203', )([Zer1509,in0Con6203])
Den15615 = keras.layers.Dense(4,name = 'Den15615', )(in0Den15615)
Bat2987 = keras.layers.BatchNormalization(axis=1, epsilon=0.29502787226796606,  name = 'Bat2987', )(Den15615)
Add83051 = keras.layers.Add(name = 'Add83051', )([Con6203,Bat2987])
model = tf.keras.models.Model(inputs=[in0Mul93187,in1Mul93187,in0Con6203,in0Den15615], outputs=Add83051)
w = model.get_layer('Den15615').get_weights() 
w[0] = np.array([[0.2976, 0.3034, 0.7042, 0.9699], [0.2605, 0.3815, 0.4344, 0.4668], [0.7855, 0.5568, 0.898, 0.8312], [0.8191, 0.9081, 0.3029, 0.0655]])
w[1] = np.array([0.7025, 0.9966, 0.7846, 0.4752])
model.get_layer('Den15615').set_weights(w) 
w = model.get_layer('Bat2987').get_weights() 
w[0] = np.array([0.9622, 0.8632, 0.853, 0.2847])
w[1] = np.array([0.9343, 0.9824, 0.004, 0.9224])
w[2] = np.array([0.4275, 0.4049, 0.8917, 0.2442])
w[3] = np.array([0.3621, 0.5184, 0.7346, 0.9276])
model.get_layer('Bat2987').set_weights(w) 
in0Mul93187 = tf.constant([[[[[0.2183], [0.9413]]], [[[0.5799], [0.5153]]]]])
in1Mul93187 = tf.constant([[[[[0.3958], [0.0474]]], [[[0.3691], [0.9518]]]]])
in0Con6203 = tf.constant([[[[0.6051, 0.1123], [0.7871, 0.8952], [0.8326, 0.7661]], [[0.9676, 0.4253], [0.0534, 0.3569], [0.5334, 0.3251]], [[0.7036, 0.3774], [0.6656, 0.9395], [0.5639, 0.8219]], [[0.9364, 0.2472], [0.21, 0.5635], [0.2579, 0.1324]]]])
in0Den15615 = tf.constant([[[[0.2594, 0.5095, 0.901, 0.8093], [0.6732, 0.8816, 0.5964, 0.0026], [0.2118, 0.2863, 0.9647, 0.3823]], [[0.9635, 0.4041, 0.9121, 0.9704], [0.242, 0.2869, 0.2291, 0.6377], [0.2272, 0.1277, 0.3324, 0.4011]], [[0.4225, 0.7758, 0.8445, 0.4359], [0.2156, 0.2249, 0.1347, 0.1084], [0.7601, 0.5232, 0.5166, 0.8153]], [[0.8593, 0.5513, 0.3988, 0.1852], [0.5228, 0.902, 0.3203, 0.2429], [0.395, 0.653, 0.4675, 0.4703]]]])
print (np.array2string(model.predict([in0Mul93187,in1Mul93187,in0Con6203,in0Den15615],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add83051.png')

LMul93187 = multiply_layer([[[[[[0.2183], [0.9413]]], [[[0.5799], [0.5153]]]]], [[[[[0.3958], [0.0474]]], [[[0.3691], [0.9518]]]]]], Mul93187), 
LLea96950 = leaky_relu_layer(Mul93187, 5.710095569609819, Lea96950), 
LRes47137 = reshape_layer(Lea96950, [2, 1, 2], Res47137), 
LZer1509 = zero_padding2D_layer(Res47137, 2, 0, 2, 0, Zer1509), 
LCon6203 = concatenate_layer([Zer1509,[[[[0.6051, 0.1123], [0.7871, 0.8952], [0.8326, 0.7661]], [[0.9676, 0.4253], [0.0534, 0.3569], [0.5334, 0.3251]], [[0.7036, 0.3774], [0.6656, 0.9395], [0.5639, 0.8219]], [[0.9364, 0.2472], [0.21, 0.5635], [0.2579, 0.1324]]]]], 3, Con6203), 
LDen15615 = dense_layer([[[[0.2594, 0.5095, 0.901, 0.8093], [0.6732, 0.8816, 0.5964, 0.0026], [0.2118, 0.2863, 0.9647, 0.3823]], [[0.9635, 0.4041, 0.9121, 0.9704], [0.242, 0.2869, 0.2291, 0.6377], [0.2272, 0.1277, 0.3324, 0.4011]], [[0.4225, 0.7758, 0.8445, 0.4359], [0.2156, 0.2249, 0.1347, 0.1084], [0.7601, 0.5232, 0.5166, 0.8153]], [[0.8593, 0.5513, 0.3988, 0.1852], [0.5228, 0.902, 0.3203, 0.2429], [0.395, 0.653, 0.4675, 0.4703]]]], [[0.2976, 0.3034, 0.7042, 0.9699], [0.2605, 0.3815, 0.4344, 0.4668], [0.7855, 0.5568, 0.898, 0.8312], [0.8191, 0.9081, 0.3029, 0.0655]],[0.7025, 0.9966, 0.7846, 0.4752], Den15615), 
LBat2987 = batch_normalization_layer(Den15615, 1, 0.29502787226796606, [0.9622, 0.8632, 0.853, 0.2847], [0.9343, 0.9824, 0.004, 0.9224], [0.4275, 0.4049, 0.8917, 0.2442], [0.3621, 0.5184, 0.7346, 0.9276], Bat2987), 
LAdd83051 = add_layer([Con6203,Bat2987], Add83051), 
exec_layers([LMul93187,LLea96950,LRes47137,LZer1509,LCon6203,LDen15615,LBat2987,LAdd83051],["Mul93187","Lea96950","Res47137","Zer1509","Con6203","Den15615","Bat2987","Add83051"],Add83051,"Add83051")

Actual (Unparsed): [[[[3.1367919, 3.4017513, 3.6941471, 2.6360111], [2.3297076, 2.6484249, 3.7991814, 3.7382285], [2.6952043, 2.8653787, 3.6811503, 3.1409908]], [[3.0888694, 3.3055089, 4.1960347, 3.3363581], [2.0798496, 2.4000709, 2.0633651, 1.9816382], [1.9281196, 2.1870574, 2.4873932, 1.9323202]], [[0.9783263, 1.1767843, 1.8994790, 1.2942704], [0.1117246, 0.3650971, 0.9186112, 0.9575021], [1.1385951, 1.3626453, 1.7164647, 1.7066789]], [[1.2629395, 1.3378833, 2.3220606, 1.5984028], [1.2569700, 1.3482820, 1.5602226, 1.8569931], [1.5222469, 1.8785750, 1.6088700, 1.3993885]]]]

Expected (Unparsed): [[[[3.136791875082271,3.401751309372447,3.6941470375110903,2.6360110663745715],[2.32970760863573,2.6484248304725546,3.799181375156793,3.7382284805121233],[2.6952042801231846,2.8653787088313116,3.6811502852879574,3.1409908423224113]],[[3.0888693562895706,3.305508855824903,4.196034677243335,3.3363580970240982],[2.0798496111118343,2.400070829377756,2.063365068608941,1.9816381696025895],[1.9281195762523482,2.1870573441676964,2.487393236966638,1.9323201845153983]],[[0.9783263322195639,1.176784301124882,1.899479000800177,1.2942704170712918],[0.1117246166112223,0.3650971116806935,0.9186112244185833,0.9575021666567546],[1.1385950919131016,1.3626453369649247,1.7164647543161435,1.706678886230768]],[[1.2629395379077275,1.3378833014844482,2.3220606135132758,1.5984027834134298],[1.2569699773297147,1.3482819465269018,1.560222641472923,1.8569930702876363],[1.522246936115292,1.8785750326349833,1.6088700231974373,1.3993885100057222]]]]

Actual:   [[[[3.1368, 3.4018, 3.6942, 2.6361], [2.3298, 2.6485, 3.7992, 3.7383], [2.6953, 2.8654, 3.6812, 3.141]], [[3.0889, 3.3056, 4.1961, 3.3364], [2.0799, 2.4001, 2.0634, 1.9817], [1.9282, 2.1871, 2.4874, 1.9324]], [[0.9784, 1.1768, 1.8995, 1.2943], [0.1118, 0.3651, 0.9187, 0.9576], [1.1386, 1.3627, 1.7165, 1.7067]], [[1.263, 1.3379, 2.3221, 1.5985], [1.257, 1.3483, 1.5603, 1.857], [1.5223, 1.8786, 1.6089, 1.3994]]]]

Expected: [[[[3.1368, 3.4018, 3.6942, 2.6361], [2.3298, 2.6485, 3.7992, 3.7383], [2.6953, 2.8654, 3.6812, 3.141]], [[3.0889, 3.3056, 4.1961, 3.3364], [2.0799, 2.4001, 2.0634, 1.9817], [1.9282, 2.1871, 2.4874, 1.9324]], [[0.9784, 1.1768, 1.8995, 1.2943], [0.1118, 0.3651, 0.9187, 0.9576], [1.1386, 1.3627, 1.7165, 1.7067]], [[1.263, 1.3379, 2.3221, 1.5985], [1.257, 1.3483, 1.5603, 1.857], [1.5223, 1.8786, 1.6089, 1.3994]]]]