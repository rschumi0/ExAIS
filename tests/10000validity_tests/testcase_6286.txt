import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Up_77339 = tf.keras.layers.Input(shape=([3, 3, 4]))
in0Sof66375 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in0Bat46676 = tf.keras.layers.Input(shape=([3, 2, 1]))
in0Con33904 = tf.keras.layers.Input(shape=([3, 10]))

Up_77339 = keras.layers.UpSampling2D(size=(1, 1), name = 'Up_77339', )(in0Up_77339)
Res13437 = keras.layers.Reshape((3, 12), name = 'Res13437', )(Up_77339)
Sof66375 = keras.layers.Softmax(axis=1, name = 'Sof66375', input_shape=(2, 1, 2, 1))(in0Sof66375)
Res41166 = keras.layers.Reshape((2, 1, 2), name = 'Res41166', )(Sof66375)
Res99902 = keras.layers.Reshape((2, 2), name = 'Res99902', )(Res41166)
Zer48590 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer48590', )(Res99902)
Bat46676 = keras.layers.BatchNormalization(axis=2, epsilon=0.2537046000684773,  name = 'Bat46676', )(in0Bat46676)
Res68659 = keras.layers.Reshape((3, 2), name = 'Res68659', )(Bat46676)
Dot93405 = keras.layers.Dot(axes=(1, 1), name = 'Dot93405', )([Zer48590,Res68659])
Mas2523 = keras.layers.Masking(mask_value=1, name = 'Mas2523', )(Dot93405)
Zer74856 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer74856', )(Mas2523)
Con33904 = keras.layers.Concatenate(axis=2, name = 'Con33904', )([Zer74856,in0Con33904])
Sub91478 = keras.layers.Subtract(name = 'Sub91478', )([Res13437,Con33904])
ReL56468 = keras.layers.ReLU(max_value=4.839753699799215, negative_slope=7.251649489551771, threshold=9.939109741023943, name = 'ReL56468', )(Sub91478)
model = tf.keras.models.Model(inputs=[in0Up_77339,in0Sof66375,in0Bat46676,in0Con33904], outputs=ReL56468)
w = model.get_layer('Bat46676').get_weights() 
w[0] = np.array([0.7398, 0.7282])
w[1] = np.array([0.9581, 0.9853])
w[2] = np.array([0.2838, 0.9017])
w[3] = np.array([0.4621, 0.3904])
model.get_layer('Bat46676').set_weights(w) 
in0Up_77339 = tf.constant([[[[1.9133, 1.5857, 1.2505, 1.6576], [1.7998, 1.8909, 1.8183, 1.8492], [1.0449, 1.3743, 1.4078, 1.3636]], [[1.4019, 1.7256, 1.5573, 1.984], [1.1221, 1.8749, 1.1426, 1.0199], [1.446, 1.0636, 1.4373, 1.3268]], [[1.1731, 1.1596, 1.3571, 1.4733], [1.9185, 1.9075, 1.8432, 1.3487], [1.2736, 1.9845, 1.402, 1.2577]]]])
in0Sof66375 = tf.constant([[[[[0.8497], [0.3127]]], [[[0.5309], [0.2107]]]]])
in0Bat46676 = tf.constant([[[[1.1028], [1.0702]], [[1.136], [1.6865]], [[1.913], [1.2369]]]])
in0Con33904 = tf.constant([[[0.6041, 0.6978, 0.3822, 0.8671, 0.7928, 0.0327, 0.5282, 0.8993, 0.4526, 0.2458], [0.5797, 0.3385, 0.8645, 0.9386, 0.3661, 0.989, 0.5468, 0.041, 0.7057, 0.686], [0.4272, 0.9145, 0.8529, 0.0554, 0.9586, 0.0046, 0.5146, 0.997, 0.2177, 0.4813]]])
print (np.array2string(model.predict([in0Up_77339,in0Sof66375,in0Bat46676,in0Con33904],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='ReL56468.png')

LUp_77339 = up_sampling2D_layer([[[[1.9133, 1.5857, 1.2505, 1.6576], [1.7998, 1.8909, 1.8183, 1.8492], [1.0449, 1.3743, 1.4078, 1.3636]], [[1.4019, 1.7256, 1.5573, 1.984], [1.1221, 1.8749, 1.1426, 1.0199], [1.446, 1.0636, 1.4373, 1.3268]], [[1.1731, 1.1596, 1.3571, 1.4733], [1.9185, 1.9075, 1.8432, 1.3487], [1.2736, 1.9845, 1.402, 1.2577]]]], 1, 1, Up_77339), 
LRes13437 = reshape_layer(Up_77339, [3, 12], Res13437), 
LSof66375 = softmax_layer([[[[[0.8497], [0.3127]]], [[[0.5309], [0.2107]]]]], 1, Sof66375), 
LRes41166 = reshape_layer(Sof66375, [2, 1, 2], Res41166), 
LRes99902 = reshape_layer(Res41166, [2, 2], Res99902), 
LZer48590 = zero_padding1D_layer(Res99902, 1, 0, Zer48590), 
LBat46676 = batch_normalization_layer([[[[1.1028], [1.0702]], [[1.136], [1.6865]], [[1.913], [1.2369]]]], 2, 0.2537046000684773, [0.7398, 0.7282], [0.9581, 0.9853], [0.2838, 0.9017], [0.4621, 0.3904], Bat46676), 
LRes68659 = reshape_layer(Bat46676, [3, 2], Res68659), 
LDot93405 = dot_layer(Zer48590,Res68659, 1, 1, Dot93405), 
LMas2523 = masking_layer(Dot93405, 1, Mas2523), 
LZer74856 = zero_padding1D_layer(Mas2523, 1, 0, Zer74856), 
LCon33904 = concatenate_layer([Zer74856,[[[0.6041, 0.6978, 0.3822, 0.8671, 0.7928, 0.0327, 0.5282, 0.8993, 0.4526, 0.2458], [0.5797, 0.3385, 0.8645, 0.9386, 0.3661, 0.989, 0.5468, 0.041, 0.7057, 0.686], [0.4272, 0.9145, 0.8529, 0.0554, 0.9586, 0.0046, 0.5146, 0.997, 0.2177, 0.4813]]]], 2, Con33904), 
LSub91478 = subtract_layer(Res13437,Con33904, Sub91478), 
LReL56468 = relu_layer(Sub91478, 4.839753699799215, 7.251649489551771, 9.939109741023943, ReL56468), 
exec_layers([LUp_77339,LRes13437,LSof66375,LRes41166,LRes99902,LZer48590,LBat46676,LRes68659,LDot93405,LMas2523,LZer74856,LCon33904,LSub91478,LReL56468],["Up_77339","Res13437","Sof66375","Res41166","Res99902","Zer48590","Bat46676","Res68659","Dot93405","Mas2523","Zer74856","Con33904","Sub91478","ReL56468"],ReL56468,"ReL56468")

Actual (Unparsed): [[[-58.2003588, -60.5759992, -67.3874740, -65.1148064, -61.7950015, -64.6507012, -64.6383735, -58.9023187, -68.3280130, -68.6304064, -65.1481648, -63.9690462], [-76.3344838, -70.6249988, -64.9857277, -60.1423510, -70.2069151, -65.2852208, -66.4440339, -71.8508645, -65.5542571, -64.6594037, -66.7696334, -67.4280831], [-78.2575168, -74.5710064, -65.3316311, -68.0227185, -64.3475830, -58.6441598, -65.6601311, -62.3279977, -66.5709381, -64.9139357, -63.4868120, -66.4447596]]]

Expected (Unparsed): [[[-58.200359111735914,-60.575999484513076,-67.38747385004905,-65.11480690002352,-61.79500176370672,-64.65070133269221,-64.63837352855998,-58.90231878232453,-68.32801278884392,-68.63040657255823,-65.14816448767547,-63.96904628067435],[-76.33448403776553,-70.6249991224785,-64.9857275391095,-60.14235084503788,-70.20691517158679,-65.285220663028,-66.44403425145836,-71.85086411086817,-65.55425685909036,-64.65940331207968,-66.76963331353925,-67.42808308719054],[-78.25751666177739,-74.57100676705672,-65.33163121976112,-68.02271834533379,-64.34758238402895,-58.64416006049648,-65.66013094163782,-62.32799800118878,-66.57093811752551,-64.91393620916294,-63.48681158961915,-66.44475941640732]]]

Actual:   [[[-58.2003, -60.5759, -67.3874, -65.1148, -61.795, -64.6507, -64.6383, -58.9023, -68.328, -68.6304, -65.1481, -63.969], [-76.3344, -70.6249, -64.9857, -60.1423, -70.2069, -65.2852, -66.444, -71.8508, -65.5542, -64.6594, -66.7696, -67.428], [-78.2575, -74.571, -65.3316, -68.0227, -64.3475, -58.6441, -65.6601, -62.3279, -66.5709, -64.9139, -63.4868, -66.4447]]]

Expected: [[[-58.2003, -60.5759, -67.3874, -65.1148, -61.795, -64.6507, -64.6383, -58.9023, -68.328, -68.6304, -65.1481, -63.969], [-76.3344, -70.6249, -64.9857, -60.1423, -70.2069, -65.2852, -66.444, -71.8508, -65.5542, -64.6594, -66.7696, -67.428], [-78.2575, -74.571, -65.3316, -68.0227, -64.3475, -58.6441, -65.6601, -62.3279, -66.5709, -64.9139, -63.4868, -66.4447]]]