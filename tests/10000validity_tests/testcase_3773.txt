import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub16427 = tf.keras.layers.Input(shape=([3]))
in1Sub16427 = tf.keras.layers.Input(shape=([3]))
in0Con52026 = tf.keras.layers.Input(shape=([3, 1]))
in0Con53909 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in0Con63819 = tf.keras.layers.Input(shape=([3, 3, 2]))
in0Mas45302 = tf.keras.layers.Input(shape=([3, 3, 3]))
in0Mul52780 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Mul52780 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con63467 = tf.keras.layers.Input(shape=([3, 3, 2]))
in0Max62772 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Con30798 = tf.keras.layers.Input(shape=([3, 3, 1]))

Sub16427 = keras.layers.Subtract(name = 'Sub16427', )([in0Sub16427,in1Sub16427])
Res96849 = keras.layers.Reshape((3, 1), name = 'Res96849', )(Sub16427)
Con52026 = keras.layers.Concatenate(axis=2, name = 'Con52026', )([Res96849,in0Con52026])
Con53909 = keras.layers.Conv3D(2, (2, 1, 2),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con53909', )(in0Con53909)
Mas30381 = keras.layers.Masking(mask_value=2, name = 'Mas30381', )(Con53909)
Res75815 = keras.layers.Reshape((1, 1, 2), name = 'Res75815', )(Mas30381)
Res57038 = keras.layers.Reshape((1, 2), name = 'Res57038', )(Res75815)
Dot97817 = keras.layers.Dot(axes=(2, 2), name = 'Dot97817', )([Con52026,Res57038])
Res89003 = keras.layers.Reshape((3, 1, 1), name = 'Res89003', )(Dot97817)
Zer97347 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer97347', )(Res89003)
Con63819 = keras.layers.Concatenate(axis=3, name = 'Con63819', )([Zer97347,in0Con63819])
Mas45302 = keras.layers.Masking(mask_value=1, name = 'Mas45302', )(in0Mas45302)
Mul52780 = keras.layers.Multiply(name = 'Mul52780', )([in0Mul52780,in1Mul52780])
Cro6648 = keras.layers.Cropping2D(cropping=((0, 0), (0, 0)), name = 'Cro6648', )(Mul52780)
Zer32752 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer32752', )(Cro6648)
Con63467 = keras.layers.Concatenate(axis=3, name = 'Con63467', )([Zer32752,in0Con63467])
Sub87889 = keras.layers.Subtract(name = 'Sub87889', )([Mas45302,Con63467])
Max62772 = keras.layers.MaxPool2D(pool_size=(1, 1), strides=(1, 4), padding='same', name = 'Max62772', )(in0Max62772)
Zer48949 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer48949', )(Max62772)
Con30798 = keras.layers.Concatenate(axis=3, name = 'Con30798', )([Zer48949,in0Con30798])
Ave48823 = keras.layers.Average(name = 'Ave48823', )([Sub87889,Con30798])
Min34275 = keras.layers.Minimum(name = 'Min34275', )([Con63819,Ave48823])
model = tf.keras.models.Model(inputs=[in0Sub16427,in1Sub16427,in0Con52026,in0Con53909,in0Con63819,in0Mas45302,in0Mul52780,in1Mul52780,in0Con63467,in0Max62772,in0Con30798], outputs=Min34275)
w = model.get_layer('Con53909').get_weights() 
w[0] = np.array([[[[[0.4725, 0.9278]], [[0.1873, 0.9914]]]], [[[[0.8389, 0.9733]], [[0.356, 0.1357]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con53909').set_weights(w) 
in0Sub16427 = tf.constant([[0.0937, 0.2667, 0.9863]])
in1Sub16427 = tf.constant([[0.7024, 0.3368, 0.2407]])
in0Con52026 = tf.constant([[[0.5576], [0.3678], [0.155]]])
in0Con53909 = tf.constant([[[[[0.9797], [0.381]]], [[[0.9666], [0.5746]]]]])
in0Con63819 = tf.constant([[[[0.7305, 0.4054], [0.9196, 0.8126], [0.7997, 0.3079]], [[0.239, 0.0819], [0.6324, 0.3723], [0.3402, 0.7358]], [[0.889, 0.4796], [0.7079, 0.5737], [0.0399, 0.0167]]]])
in0Mas45302 = tf.constant([[[[1.7003, 1.9865, 1.2046], [1.5219, 1.1474, 1.5159], [1.6059, 1.9161, 1.4959]], [[1.2562, 1.7076, 1.8242], [1.4145, 1.8928, 1.6431], [1.8213, 1.9225, 1.0179]], [[1.8369, 1.8152, 1.2793], [1.0554, 1.5988, 1.7784], [1.1193, 1.6845, 1.4189]]]])
in0Mul52780 = tf.constant([[[[0.7082]]]])
in1Mul52780 = tf.constant([[[[0.5465]]]])
in0Con63467 = tf.constant([[[[0.0438, 0.9682], [0.7965, 0.7894], [0.1113, 0.1482]], [[0.0807, 0.9327], [0.9913, 0.9997], [0.3817, 0.7786]], [[0.2696, 0.0321], [0.4474, 0.0028], [0.661, 0.3535]]]])
in0Max62772 = tf.constant([[[[1.953, 1.0363]], [[1.6284, 1.1857]]]])
in0Con30798 = tf.constant([[[[0.7713], [0.0127], [0.7494]], [[0.2328], [0.8657], [0.6834]], [[0.0275], [0.6203], [0.6349]]]])
print (np.array2string(model.predict([in0Sub16427,in1Sub16427,in0Con52026,in0Con53909,in0Con63819,in0Mas45302,in0Mul52780,in1Mul52780,in0Con63467,in0Max62772,in0Con30798],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min34275.png')

LSub16427 = subtract_layer([[0.0937, 0.2667, 0.9863]], [[0.7024, 0.3368, 0.2407]], Sub16427), 
LRes96849 = reshape_layer(Sub16427, [3, 1], Res96849), 
LCon52026 = concatenate_layer([Res96849,[[[0.5576], [0.3678], [0.155]]]], 2, Con52026), 
LCon53909 = conv3D_layer([[[[[0.9797], [0.381]]], [[[0.9666], [0.5746]]]]], 2, 1, 2,[[[[[0.4725, 0.9278]], [[0.1873, 0.9914]]]], [[[[0.8389, 0.9733]], [[0.356, 0.1357]]]]],[0, 0], 1, 1, 1, false, 1, 1, 1, Con53909), 
LMas30381 = masking_layer(Con53909, 2, Mas30381), 
LRes75815 = reshape_layer(Mas30381, [1, 1, 2], Res75815), 
LRes57038 = reshape_layer(Res75815, [1, 2], Res57038), 
LDot97817 = dot_layer(Con52026,Res57038, 2, 2, Dot97817), 
LRes89003 = reshape_layer(Dot97817, [3, 1, 1], Res89003), 
LZer97347 = zero_padding2D_layer(Res89003, 0, 0, 2, 0, Zer97347), 
LCon63819 = concatenate_layer([Zer97347,[[[[0.7305, 0.4054], [0.9196, 0.8126], [0.7997, 0.3079]], [[0.239, 0.0819], [0.6324, 0.3723], [0.3402, 0.7358]], [[0.889, 0.4796], [0.7079, 0.5737], [0.0399, 0.0167]]]]], 3, Con63819), 
LMas45302 = masking_layer([[[[1.7003, 1.9865, 1.2046], [1.5219, 1.1474, 1.5159], [1.6059, 1.9161, 1.4959]], [[1.2562, 1.7076, 1.8242], [1.4145, 1.8928, 1.6431], [1.8213, 1.9225, 1.0179]], [[1.8369, 1.8152, 1.2793], [1.0554, 1.5988, 1.7784], [1.1193, 1.6845, 1.4189]]]], 1, Mas45302), 
LMul52780 = multiply_layer([[[[[0.7082]]]], [[[[0.5465]]]]], Mul52780), 
LCro6648 = cropping2D_layer(Mul52780, 0, 0, 0, 0, Cro6648), 
LZer32752 = zero_padding2D_layer(Cro6648, 2, 0, 2, 0, Zer32752), 
LCon63467 = concatenate_layer([Zer32752,[[[[0.0438, 0.9682], [0.7965, 0.7894], [0.1113, 0.1482]], [[0.0807, 0.9327], [0.9913, 0.9997], [0.3817, 0.7786]], [[0.2696, 0.0321], [0.4474, 0.0028], [0.661, 0.3535]]]]], 3, Con63467), 
LSub87889 = subtract_layer(Mas45302,Con63467, Sub87889), 
LMax62772 = max_pool2D_layer([[[[1.953, 1.0363]], [[1.6284, 1.1857]]]], 1, 1, 1, 4, true, Max62772), 
LZer48949 = zero_padding2D_layer(Max62772, 1, 0, 2, 0, Zer48949), 
LCon30798 = concatenate_layer([Zer48949,[[[[0.7713], [0.0127], [0.7494]], [[0.2328], [0.8657], [0.6834]], [[0.0275], [0.6203], [0.6349]]]]], 3, Con30798), 
LAve48823 = average_layer([Sub87889,Con30798], Ave48823), 
LMin34275 = minimum_layer([Con63819,Ave48823], Min34275), 
exec_layers([LSub16427,LRes96849,LCon52026,LCon53909,LMas30381,LRes75815,LRes57038,LDot97817,LRes89003,LZer97347,LCon63819,LMas45302,LMul52780,LCro6648,LZer32752,LCon63467,LSub87889,LMax62772,LZer48949,LCon30798,LAve48823,LMin34275],["Sub16427","Res96849","Con52026","Con53909","Mas30381","Res75815","Res57038","Dot97817","Res89003","Zer97347","Con63819","Mas45302","Mul52780","Cro6648","Zer32752","Con63467","Sub87889","Max62772","Zer48949","Con30798","Ave48823","Min34275"],Min34275,"Min34275")

Actual (Unparsed): [[[[0.0000000, 0.7305000, 0.4054000], [0.0000000, 0.1754500, 0.3696000], [0.3422140, 0.7997000, 0.3079000]], [[0.0000000, 0.2390000, 0.0819000], [0.0000000, 0.4507500, 0.3723000], [0.7393115, 0.3402000, 0.4613500]], [[0.0000000, 0.7728000, 0.4796000], [0.0000000, 0.5757000, 0.5737000], [1.1803343, 0.0399000, 0.0167000]]]]

Expected (Unparsed): [[[[0,0.7305,0.4054],[0,0.17545,0.36960000000000004],[0.3422139912130002,0.7997,0.3079]],[[0,0.239,0.0819],[0,0.45075000000000004,0.3723],[0.7393114801790001,0.3402,0.46135000000000004]],[[0,0.7727999999999999,0.4796],[0,0.5757,0.5737],[1.1803343499999999,0.0399,0.0167]]]]

Actual:   [[[[0, 0.7305, 0.4054], [0, 0.1755, 0.3696], [0.3423, 0.7997, 0.3079]], [[0, 0.239, 0.0819], [0, 0.4508, 0.3723], [0.7394, 0.3402, 0.4614]], [[0, 0.7728, 0.4796], [0, 0.5757, 0.5737], [1.1804, 0.0399, 0.0167]]]]

Expected: [[[[0, 0.7305, 0.4054], [0, 0.1755, 0.3697], [0.3423, 0.7997, 0.3079]], [[0, 0.239, 0.0819], [0, 0.4508, 0.3723], [0.7394, 0.3402, 0.4614]], [[0, 0.7728, 0.4796], [0, 0.5757, 0.5737], [1.1804, 0.0399, 0.0167]]]]