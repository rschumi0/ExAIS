import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mas27130 = tf.keras.layers.Input(shape=([1]))
in0Cro30341 = tf.keras.layers.Input(shape=([4, 3]))
in0Con56210 = tf.keras.layers.Input(shape=([6, 3, 1]))
in0Up_17171 = tf.keras.layers.Input(shape=([3, 3, 2]))

Mas27130 = keras.layers.Masking(mask_value=1, name = 'Mas27130', )(in0Mas27130)
Res373 = keras.layers.Reshape((1, 1), name = 'Res373', )(Mas27130)
Res11465 = keras.layers.Reshape((1, 1, 1), name = 'Res11465', )(Res373)
Zer34185 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer34185', )(Res11465)
Res45448 = keras.layers.Reshape((3, 3), name = 'Res45448', )(Zer34185)
Cro30341 = keras.layers.Cropping1D(cropping=((3, 0)), name = 'Cro30341', )(in0Cro30341)
Zer84074 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer84074', )(Cro30341)
Max76874 = keras.layers.Maximum(name = 'Max76874', )([Res45448,Zer84074])
Res20885 = keras.layers.Reshape((3, 3, 1), name = 'Res20885', )(Max76874)
Zer91263 = keras.layers.ZeroPadding2D(padding=((3, 0), (0, 0)), name = 'Zer91263', )(Res20885)
Con56210 = keras.layers.Concatenate(axis=3, name = 'Con56210', )([Zer91263,in0Con56210])
Up_17171 = keras.layers.UpSampling2D(size=(2, 1), name = 'Up_17171', )(in0Up_17171)
Mul43954 = keras.layers.Multiply(name = 'Mul43954', )([Con56210,Up_17171])
model = tf.keras.models.Model(inputs=[in0Mas27130,in0Cro30341,in0Con56210,in0Up_17171], outputs=Mul43954)
in0Mas27130 = tf.constant([[1.712]])
in0Cro30341 = tf.constant([[[1.0971, 1.4437, 1.8721], [1.1908, 1.0289, 1.2965], [1.4164, 1.1019, 1.6657], [1.3158, 1.733, 1.8305]]])
in0Con56210 = tf.constant([[[[0.788], [0.3085], [0.5286]], [[0.501], [0.1914], [0.0081]], [[0.6953], [0.9677], [0.5809]], [[0.7314], [0.814], [0.0947]], [[0.0712], [0.5288], [0.8234]], [[0.3289], [0.5412], [0.1949]]]])
in0Up_17171 = tf.constant([[[[1.6216, 1.52], [1.391, 1.5219], [1.9359, 1.9766]], [[1.0308, 1.1497], [1.7033, 1.4568], [1.353, 1.7752]], [[1.9969, 1.8809], [1.2392, 1.1767], [1.7568, 1.5562]]]])
print (np.array2string(model.predict([in0Mas27130,in0Cro30341,in0Con56210,in0Up_17171],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul43954.png')

LMas27130 = masking_layer([[1.712]], 1, Mas27130), 
LRes373 = reshape_layer(Mas27130, [1, 1], Res373), 
LRes11465 = reshape_layer(Res373, [1, 1, 1], Res11465), 
LZer34185 = zero_padding2D_layer(Res11465, 1, 1, 1, 1, Zer34185), 
LRes45448 = reshape_layer(Zer34185, [3, 3], Res45448), 
LCro30341 = cropping1D_layer([[[1.0971, 1.4437, 1.8721], [1.1908, 1.0289, 1.2965], [1.4164, 1.1019, 1.6657], [1.3158, 1.733, 1.8305]]], 3, 0, Cro30341), 
LZer84074 = zero_padding1D_layer(Cro30341, 2, 0, Zer84074), 
LMax76874 = maximum_layer([Res45448,Zer84074], Max76874), 
LRes20885 = reshape_layer(Max76874, [3, 3, 1], Res20885), 
LZer91263 = zero_padding2D_layer(Res20885, 3, 0, 0, 0, Zer91263), 
LCon56210 = concatenate_layer([Zer91263,[[[[0.788], [0.3085], [0.5286]], [[0.501], [0.1914], [0.0081]], [[0.6953], [0.9677], [0.5809]], [[0.7314], [0.814], [0.0947]], [[0.0712], [0.5288], [0.8234]], [[0.3289], [0.5412], [0.1949]]]]], 3, Con56210), 
LUp_17171 = up_sampling2D_layer([[[[1.6216, 1.52], [1.391, 1.5219], [1.9359, 1.9766]], [[1.0308, 1.1497], [1.7033, 1.4568], [1.353, 1.7752]], [[1.9969, 1.8809], [1.2392, 1.1767], [1.7568, 1.5562]]]], 2, 1, Up_17171), 
LMul43954 = multiply_layer([Con56210,Up_17171], Mul43954), 
exec_layers([LMas27130,LRes373,LRes11465,LZer34185,LRes45448,LCro30341,LZer84074,LMax76874,LRes20885,LZer91263,LCon56210,LUp_17171,LMul43954],["Mas27130","Res373","Res11465","Zer34185","Res45448","Cro30341","Zer84074","Max76874","Res20885","Zer91263","Con56210","Up_17171","Mul43954"],Mul43954,"Mul43954")

Actual (Unparsed): [[[[0.0000000, 1.1977600], [0.0000000, 0.4695062], [0.0000000, 1.0448307]], [[0.0000000, 0.7615200], [0.0000000, 0.2912917], [0.0000000, 0.0160105]], [[0.0000000, 0.7993864], [0.0000000, 1.4097454], [0.0000000, 1.0312137]], [[0.0000000, 0.8408906], [0.0000000, 1.1858352], [0.0000000, 0.1681114]], [[0.0000000, 0.1339201], [2.1215104, 0.6222390], [0.0000000, 1.2813751]], [[2.6275209, 0.6186280], [2.1475336, 0.6368300], [3.2158225, 0.3033034]]]]

Expected (Unparsed): [[[[0.0,1.1977600000000002],[0.0,0.46950615],[0.0,1.04483076]],[[0.0,0.76152],[0.0,0.29129166],[0.0,0.016010459999999997]],[[0.0,0.79938641],[0.0,1.40974536],[0.0,1.0312136799999998]],[[0.0,0.84089058],[0.0,1.1858352],[0.0,0.16811144]],[[0.0,0.13392008],[2.1215104,0.6222389600000001],[0.0,1.28137508]],[[2.62752102,0.61862801],[2.1475336,0.6368300400000001],[3.2158224,0.30330338]]]]

Actual:   [[[[0, 1.1978], [0, 0.4696], [0, 1.0449]], [[0, 0.7616], [0, 0.2913], [0, 0.0161]], [[0, 0.7994], [0, 1.4098], [0, 1.0313]], [[0, 0.8409], [0, 1.1859], [0, 0.1682]], [[0, 0.134], [2.1216, 0.6223], [0, 1.2814]], [[2.6276, 0.6187], [2.1476, 0.6369], [3.2159, 0.3034]]]]

Expected: [[[[0, 1.1978], [0, 0.4696], [0, 1.0449]], [[0, 0.7616], [0, 0.2913], [0, 0.0161]], [[0, 0.7994], [0, 1.4098], [0, 1.0313]], [[0, 0.8409], [0, 1.1859], [0, 0.1682]], [[0, 0.134], [2.1216, 0.6223], [0, 1.2814]], [[2.6276, 0.6187], [2.1476, 0.6369], [3.2159, 0.3034]]]]