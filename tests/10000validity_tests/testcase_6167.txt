import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con44872 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con19699 = tf.keras.layers.Input(shape=([6, 7]))
in0Con17980 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Up_6828 = tf.keras.layers.Input(shape=([3, 3]))
in0Con94780 = tf.keras.layers.Input(shape=([6, 5]))

Con44872 = keras.layers.Conv2DTranspose(2, (1, 1),strides=(1, 1), padding='valid', name = 'Con44872', )(in0Con44872)
Glo42329 = keras.layers.GlobalMaxPool2D(name = 'Glo42329', )(Con44872)
Res69263 = keras.layers.Reshape((2, 1), name = 'Res69263', )(Glo42329)
Zer4314 = keras.layers.ZeroPadding1D(padding=((4, 0)), name = 'Zer4314', )(Res69263)
Con19699 = keras.layers.Concatenate(axis=2, name = 'Con19699', )([Zer4314,in0Con19699])
Con17980 = keras.layers.Conv2D(4, (1, 2),strides=(1, 1), padding='same', dilation_rate=(1, 1), name = 'Con17980', )(in0Con17980)
Res50543 = keras.layers.Reshape((2, 8), name = 'Res50543', )(Con17980)
Zer49974 = keras.layers.ZeroPadding1D(padding=((4, 0)), name = 'Zer49974', )(Res50543)
Up_6828 = keras.layers.UpSampling1D(size=(2), name = 'Up_6828', )(in0Up_6828)
Con94780 = keras.layers.Concatenate(axis=2, name = 'Con94780', )([Up_6828,in0Con94780])
Max46743 = keras.layers.Maximum(name = 'Max46743', )([Zer49974,Con94780])
Mul61701 = keras.layers.Multiply(name = 'Mul61701', )([Con19699,Max46743])
model = tf.keras.models.Model(inputs=[in0Con44872,in0Con19699,in0Con17980,in0Up_6828,in0Con94780], outputs=Mul61701)
w = model.get_layer('Con44872').get_weights() 
w[0] = np.array([[[[0.2204], [0.3101]]]])
w[1] = np.array([0, 0])
model.get_layer('Con44872').set_weights(w) 
w = model.get_layer('Con17980').get_weights() 
w[0] = np.array([[[[0.8634, 0.8986, 0.2299, 0.5254], [0.2482, 0.8287, 0.969, 0.0042]], [[0.7644, 0.3643, 0.114, 0.1595], [0.4581, 0.5482, 0.6022, 0.4574]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con17980').set_weights(w) 
in0Con44872 = tf.constant([[[[0.3896]]]])
in0Con19699 = tf.constant([[[0.7012, 0.0139, 0.214, 0.8956, 0.333, 0.439, 0.7985], [0.8598, 0.3195, 0.6763, 0.5871, 0.7835, 0.2501, 0.9442], [0.5282, 0.9127, 0.5777, 0.4182, 0.7125, 0.4961, 0.129], [0.1754, 0.7223, 0.2785, 0.8142, 0.2321, 0.3947, 0.9464], [0.6118, 0.3236, 0.3838, 0.0814, 0.8732, 0.799, 0.2062], [0.3595, 0.873, 0.8989, 0.164, 0.5735, 0.3189, 0.7212]]])
in0Con17980 = tf.constant([[[[0.903, 0.8922], [0.714, 0.5358]], [[0.6613, 0.6614], [0.1722, 0.3124]]]])
in0Up_6828 = tf.constant([[[1.3148, 1.7062, 1.8386], [1.3229, 1.5906, 1.9738], [1.1258, 1.232, 1.5098]]])
in0Con94780 = tf.constant([[[0.0157, 0.2639, 0.4413, 0.5387, 0.2813], [0.7386, 0.4289, 0.4272, 0.8734, 0.2253], [0.9605, 0.1623, 0.3258, 0.2908, 0.4886], [0.2204, 0.0948, 0.613, 0.3909, 0.2638], [0.967, 0.4747, 0.5338, 0.0993, 0.3213], [0.9893, 0.0276, 0.9596, 0.46, 0.6993]]])
print (np.array2string(model.predict([in0Con44872,in0Con19699,in0Con17980,in0Up_6828,in0Con94780],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul61701.png')

LCon44872 = conv2D_transpose_layer([[[[0.3896]]]], 1, 1,[[[[0.2204], [0.3101]]]],[0, 0], 1, 1, false, Con44872), 
LGlo42329 = global_max_pool2D_layer(Con44872, Glo42329), 
LRes69263 = reshape_layer(Glo42329, [2, 1], Res69263), 
LZer4314 = zero_padding1D_layer(Res69263, 4, 0, Zer4314), 
LCon19699 = concatenate_layer([Zer4314,[[[0.7012, 0.0139, 0.214, 0.8956, 0.333, 0.439, 0.7985], [0.8598, 0.3195, 0.6763, 0.5871, 0.7835, 0.2501, 0.9442], [0.5282, 0.9127, 0.5777, 0.4182, 0.7125, 0.4961, 0.129], [0.1754, 0.7223, 0.2785, 0.8142, 0.2321, 0.3947, 0.9464], [0.6118, 0.3236, 0.3838, 0.0814, 0.8732, 0.799, 0.2062], [0.3595, 0.873, 0.8989, 0.164, 0.5735, 0.3189, 0.7212]]]], 2, Con19699), 
LCon17980 = conv2D_layer([[[[0.903, 0.8922], [0.714, 0.5358]], [[0.6613, 0.6614], [0.1722, 0.3124]]]], 1, 2,[[[[0.8634, 0.8986, 0.2299, 0.5254], [0.2482, 0.8287, 0.969, 0.0042]], [[0.7644, 0.3643, 0.114, 0.1595], [0.4581, 0.5482, 0.6022, 0.4574]]]],[0, 0, 0, 0], 1, 1, true, 1, 1, Con17980), 
LRes50543 = reshape_layer(Con17980, [2, 8], Res50543), 
LZer49974 = zero_padding1D_layer(Res50543, 4, 0, Zer49974), 
LUp_6828 = up_sampling1D_layer([[[1.3148, 1.7062, 1.8386], [1.3229, 1.5906, 1.9738], [1.1258, 1.232, 1.5098]]], 2, Up_6828), 
LCon94780 = concatenate_layer([Up_6828,[[[0.0157, 0.2639, 0.4413, 0.5387, 0.2813], [0.7386, 0.4289, 0.4272, 0.8734, 0.2253], [0.9605, 0.1623, 0.3258, 0.2908, 0.4886], [0.2204, 0.0948, 0.613, 0.3909, 0.2638], [0.967, 0.4747, 0.5338, 0.0993, 0.3213], [0.9893, 0.0276, 0.9596, 0.46, 0.6993]]]], 2, Con94780), 
LMax46743 = maximum_layer([Zer49974,Con94780], Max46743), 
LMul61701 = multiply_layer([Con19699,Max46743], Mul61701), 
exec_layers([LCon44872,LGlo42329,LRes69263,LZer4314,LCon19699,LCon17980,LRes50543,LZer49974,LUp_6828,LCon94780,LMax46743,LMul61701],["Con44872","Glo42329","Res69263","Zer4314","Con19699","Con17980","Res50543","Zer49974","Up_6828","Con94780","Max46743","Mul61701"],Mul61701,"Mul61701")

Actual (Unparsed): [[[0.0000000, 1.1963875, 0.0255565, 0.0033598, 0.2363489, 0.1469529, 0.2364893, 0.2246181], [0.0000000, 1.4669907, 0.5874327, 0.4995152, 0.2518072, 0.3347112, 0.2184373, 0.2127283], [0.0000000, 0.8401549, 1.8014872, 0.5548809, 0.0678739, 0.2321325, 0.1442659, 0.0630294], [0.0000000, 0.2789912, 1.4256757, 0.0613814, 0.0771862, 0.1422773, 0.1542882, 0.2496603], [0.1539031, 1.2876174, 0.4885713, 0.3711346, 0.0610055, 0.9479615, 0.5459877, 0.0778170], [0.1360135, 0.4947930, 1.3180554, 0.8892818, 0.0370993, 0.5503306, 0.1466940, 0.5043351]]]

Expected (Unparsed): [[[0.0,1.19638744,0.02555654,0.0033597999999999996,0.23634884,0.14695290000000003,0.23648929999999999,0.22461804999999999],[0.0,1.46699076,0.5874327,0.49951518000000006,0.25180718999999996,0.3347112,0.21843733999999998,0.21272826],[0.0,0.84015492,1.8014872599999998,0.55488085,0.06787386000000001,0.2321325,0.14426587999999999,0.0630294],[0.0,0.27899124000000003,1.4256757400000002,0.06138140000000001,0.07718616,0.1422773,0.15428823,0.24966032],[0.15390314673962882,1.2876173448600001,0.48857128,0.3711346,0.06100548722399999,0.9479615153519999,0.5459877012000001,0.07781698495199998],[0.13601348196799998,0.49479297175000003,1.3180554,0.88928177,0.037099286239999994,0.5503306,0.14669400000000002,0.50433516]]]

Actual:   [[[0, 1.1964, 0.0256, 0.0034, 0.2364, 0.147, 0.2365, 0.2247], [0, 1.467, 0.5875, 0.4996, 0.2519, 0.3348, 0.2185, 0.2128], [0, 0.8402, 1.8015, 0.5549, 0.0679, 0.2322, 0.1443, 0.0631], [0, 0.279, 1.4257, 0.0614, 0.0772, 0.1423, 0.1543, 0.2497], [0.154, 1.2877, 0.4886, 0.3712, 0.0611, 0.948, 0.546, 0.0779], [0.1361, 0.4948, 1.3181, 0.8893, 0.0371, 0.5504, 0.1467, 0.5044]]]

Expected: [[[0, 1.1964, 0.0256, 0.0034, 0.2364, 0.147, 0.2365, 0.2247], [0, 1.467, 0.5875, 0.4996, 0.2519, 0.3348, 0.2185, 0.2128], [0, 0.8402, 1.8015, 0.5549, 0.0679, 0.2322, 0.1443, 0.0631], [0, 0.279, 1.4257, 0.0614, 0.0772, 0.1423, 0.1543, 0.2497], [0.154, 1.2877, 0.4886, 0.3712, 0.0611, 0.948, 0.546, 0.0779], [0.1361, 0.4948, 1.3181, 0.8893, 0.0371, 0.5504, 0.1467, 0.5044]]]