import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul29168 = tf.keras.layers.Input(shape=([2, 1]))
in1Mul29168 = tf.keras.layers.Input(shape=([2, 1]))

Mul29168 = keras.layers.Multiply(name = 'Mul29168', )([in0Mul29168,in1Mul29168])
Lay1602 = keras.layers.LayerNormalization(axis=1, epsilon=2.9736662706459525, name = 'Lay1602', )(Mul29168)
model = tf.keras.models.Model(inputs=[in0Mul29168,in1Mul29168], outputs=Lay1602)
in0Mul29168 = tf.constant([[[0.5779], [0.168]]])
in1Mul29168 = tf.constant([[[0.4143], [0.4823]]])
print (np.array2string(model.predict([in0Mul29168,in1Mul29168],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Lay1602.png')

LMul29168 = multiply_layer([[[[0.5779], [0.168]]], [[[0.4143], [0.4823]]]], Mul29168), 
LLay1602 = layer_normalization_layer(Mul29168, 1, 2.9736662706459525, Lay1602), 
exec_layers([LMul29168,LLay1602],["Mul29168","Lay1602"],Lay1602,"Lay1602")

Actual (Unparsed): [[[0.0458791], [-0.0458791]]]

Expected (Unparsed): [[[0.04587909606105686],[-0.045879096061056855]]]

Actual:   [[[0.0459], [-0.0458]]]

Expected: [[[0.0459], [-0.0458]]]