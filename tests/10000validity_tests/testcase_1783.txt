import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Lay90530 = tf.keras.layers.Input(shape=([3, 4]))
in0Con30192 = tf.keras.layers.Input(shape=([18]))
in0Up_17300 = tf.keras.layers.Input(shape=([3, 4]))
in0Ave84543 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in1Ave84543 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in0Con89998 = tf.keras.layers.Input(shape=([22]))

Lay90530 = keras.layers.LayerNormalization(axis=2, epsilon=1.9449229963997268, name = 'Lay90530', )(in0Lay90530)
Res86894 = keras.layers.Reshape((3, 4, 1), name = 'Res86894', )(Lay90530)
Cro83164 = keras.layers.Cropping2D(cropping=((0, 1), (0, 1)), name = 'Cro83164', )(Res86894)
Lea8266 = keras.layers.LeakyReLU(alpha=0.9894857378725577, name = 'Lea8266', )(Cro83164)
Res82643 = keras.layers.Reshape((2, 3), name = 'Res82643', )(Lea8266)
Fla11652 = keras.layers.Flatten(name = 'Fla11652', )(Res82643)
Con30192 = keras.layers.Concatenate(axis=1, name = 'Con30192', )([Fla11652,in0Con30192])
Up_17300 = keras.layers.UpSampling1D(size=(2), name = 'Up_17300', )(in0Up_17300)
Fla20209 = keras.layers.Flatten(name = 'Fla20209', )(Up_17300)
Ave84543 = keras.layers.Average(name = 'Ave84543', )([in0Ave84543,in1Ave84543])
Res74328 = keras.layers.Reshape((2, 1, 2), name = 'Res74328', )(Ave84543)
Glo32246 = keras.layers.GlobalMaxPool2D(name = 'Glo32246', )(Res74328)
Con89998 = keras.layers.Concatenate(axis=1, name = 'Con89998', )([Glo32246,in0Con89998])
Mul17519 = keras.layers.Multiply(name = 'Mul17519', )([Fla20209,Con89998])
Add93465 = keras.layers.Add(name = 'Add93465', )([Con30192,Mul17519])
model = tf.keras.models.Model(inputs=[in0Lay90530,in0Con30192,in0Up_17300,in0Ave84543,in1Ave84543,in0Con89998], outputs=Add93465)
in0Lay90530 = tf.constant([[[1.1672, 1.327, 1.0869, 1.3362], [1.2228, 1.8, 1.9457, 1.5098], [1.7347, 1.9036, 1.8649, 1.7236]]])
in0Con30192 = tf.constant([[0.5166, 0.4033, 0.251, 0.6012, 0.2932, 0.8545, 0.4345, 0.6608, 0.5615, 0.1918, 0.788, 0.9016, 0.4984, 0.5611, 0.7726, 0.5982, 0.3705, 0.1632]])
in0Up_17300 = tf.constant([[[1.063, 1.7432, 1.8823, 1.8091], [1.0803, 1.0308, 1.2284, 1.0743], [1.0655, 1.3836, 1.3064, 1.2607]]])
in0Ave84543 = tf.constant([[[[[0.1894, 0.0768]]], [[[0.5944, 0.2322]]]]])
in1Ave84543 = tf.constant([[[[[0.0846, 0.6128]]], [[[0.3479, 0.2545]]]]])
in0Con89998 = tf.constant([[0.2211, 0.9525, 0.5201, 0.9684, 0.4816, 0.4473, 0.8339, 0.8739, 0.761, 0.7216, 0.3315, 0.4927, 0.5367, 0.5457, 0.6787, 0.4039, 0.9621, 0.0891, 0.8287, 0.8758, 0.1011, 0.8127]])
print (np.array2string(model.predict([in0Lay90530,in0Con30192,in0Up_17300,in0Ave84543,in1Ave84543,in0Con89998],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add93465.png')

LLay90530 = layer_normalization_layer([[[1.1672, 1.327, 1.0869, 1.3362], [1.2228, 1.8, 1.9457, 1.5098], [1.7347, 1.9036, 1.8649, 1.7236]]], 2, 1.9449229963997268, Lay90530), 
LRes86894 = reshape_layer(Lay90530, [3, 4, 1], Res86894), 
LCro83164 = cropping2D_layer(Res86894, 0, 1, 0, 1, Cro83164), 
LLea8266 = leaky_relu_layer(Cro83164, 0.9894857378725577, Lea8266), 
LRes82643 = reshape_layer(Lea8266, [2, 3], Res82643), 
LFla11652 = flatten_layer(Res82643, Fla11652), 
LCon30192 = concatenate_layer([Fla11652,[[0.5166, 0.4033, 0.251, 0.6012, 0.2932, 0.8545, 0.4345, 0.6608, 0.5615, 0.1918, 0.788, 0.9016, 0.4984, 0.5611, 0.7726, 0.5982, 0.3705, 0.1632]]], 1, Con30192), 
LUp_17300 = up_sampling1D_layer([[[1.063, 1.7432, 1.8823, 1.8091], [1.0803, 1.0308, 1.2284, 1.0743], [1.0655, 1.3836, 1.3064, 1.2607]]], 2, Up_17300), 
LFla20209 = flatten_layer(Up_17300, Fla20209), 
LAve84543 = average_layer([[[[[[0.1894, 0.0768]]], [[[0.5944, 0.2322]]]]], [[[[[0.0846, 0.6128]]], [[[0.3479, 0.2545]]]]]], Ave84543), 
LRes74328 = reshape_layer(Ave84543, [2, 1, 2], Res74328), 
LGlo32246 = global_max_pool2D_layer(Res74328, Glo32246), 
LCon89998 = concatenate_layer([Glo32246,[[0.2211, 0.9525, 0.5201, 0.9684, 0.4816, 0.4473, 0.8339, 0.8739, 0.761, 0.7216, 0.3315, 0.4927, 0.5367, 0.5457, 0.6787, 0.4039, 0.9621, 0.0891, 0.8287, 0.8758, 0.1011, 0.8127]]], 1, Con89998), 
LMul17519 = multiply_layer([Fla20209,Con89998], Mul17519), 
LAdd93465 = add_layer([Con30192,Mul17519], Add93465), 
exec_layers([LLay90530,LRes86894,LCro83164,LLea8266,LRes82643,LFla11652,LCon30192,LUp_17300,LFla20209,LAve84543,LRes74328,LGlo32246,LCon89998,LMul17519,LAdd93465],["Lay90530","Res86894","Cro83164","Lea8266","Res82643","Fla11652","Con30192","Up_17300","Fla20209","Ave84543","Res74328","Glo32246","Con89998","Mul17519","Add93465"],Add93465,"Add93465")

Actual (Unparsed): [[0.4568814, 0.6708910, 0.3154163, 1.4470712, 0.6797494, 1.9174609, 1.4231157, 1.2125104, 1.1518621, 1.5020161, 1.2280124, 1.6297149, 0.7926194, 1.1686751, 1.2207823, 0.7780456, 1.5111548, 1.4604360, 1.7552874, 0.6734284, 1.6555799, 1.8099569, 0.5025770, 1.1877709]]

Expected (Unparsed): [[0.45688139143644335,0.6708909519765327,0.3154162963434276,1.4470711756960337,0.679749432782367,1.9174609333664927,1.42311568,1.21251043,1.15186217,1.50201612,1.2280124,1.62971488,0.79261945,1.16867516,1.2207822799999999,0.77804551,1.51115485,1.4604360399999998,1.7552874399999998,0.67342837,1.6555798499999999,1.80995688,0.50257704,1.18777089]]

Actual:   [[0.4569, 0.6709, 0.3155, 1.4471, 0.6798, 1.9175, 1.4232, 1.2126, 1.1519, 1.5021, 1.2281, 1.6298, 0.7927, 1.1687, 1.2208, 0.7781, 1.5112, 1.4605, 1.7553, 0.6735, 1.6556, 1.81, 0.5026, 1.1878]]

Expected: [[0.4569, 0.6709, 0.3155, 1.4471, 0.6798, 1.9175, 1.4232, 1.2126, 1.1519, 1.5021, 1.2281, 1.6298, 0.7927, 1.1687, 1.2208, 0.7781, 1.5112, 1.4605, 1.7553, 0.6735, 1.6556, 1.81, 0.5026, 1.1878]]