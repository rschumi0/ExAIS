import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sof91937 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Max78704 = tf.keras.layers.Input(shape=([2, 1]))
in1Max78704 = tf.keras.layers.Input(shape=([2, 1]))
in0Con96872 = tf.keras.layers.Input(shape=([2, 1]))

Sof91937 = keras.layers.Softmax(axis=1, name = 'Sof91937', input_shape=(1, 1, 2))(in0Sof91937)
Res60646 = keras.layers.Reshape((1, 2), name = 'Res60646', )(Sof91937)
Zer95473 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer95473', )(Res60646)
Max78704 = keras.layers.Maximum(name = 'Max78704', )([in0Max78704,in1Max78704])
Con96872 = keras.layers.Concatenate(axis=2, name = 'Con96872', )([Max78704,in0Con96872])
Mul78103 = keras.layers.Multiply(name = 'Mul78103', )([Zer95473,Con96872])
model = tf.keras.models.Model(inputs=[in0Sof91937,in0Max78704,in1Max78704,in0Con96872], outputs=Mul78103)
in0Sof91937 = tf.constant([[[[0.2067, 0.5101]]]])
in0Max78704 = tf.constant([[[0.3694], [0.1509]]])
in1Max78704 = tf.constant([[[0.0203], [0.0358]]])
in0Con96872 = tf.constant([[[0.6273], [0.5766]]])
print (np.array2string(model.predict([in0Sof91937,in0Max78704,in1Max78704,in0Con96872],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul78103.png')

LSof91937 = softmax_layer([[[[0.2067, 0.5101]]]], 1, Sof91937), 
LRes60646 = reshape_layer(Sof91937, [1, 2], Res60646), 
LZer95473 = zero_padding1D_layer(Res60646, 1, 0, Zer95473), 
LMax78704 = maximum_layer([[[[0.3694], [0.1509]]], [[[0.0203], [0.0358]]]], Max78704), 
LCon96872 = concatenate_layer([Max78704,[[[0.6273], [0.5766]]]], 2, Con96872), 
LMul78103 = multiply_layer([Zer95473,Con96872], Mul78103), 
exec_layers([LSof91937,LRes60646,LZer95473,LMax78704,LCon96872,LMul78103],["Sof91937","Res60646","Zer95473","Max78704","Con96872","Mul78103"],Mul78103,"Mul78103")

Actual (Unparsed): [[[0.0000000, 0.0000000], [0.1509000, 0.5766000]]]

Expected (Unparsed): [[[0.0,0.0],[0.1509,0.5766]]]

Actual:   [[[0, 0], [0.1509, 0.5766]]]

Expected: [[[0, 0], [0.1509, 0.5766]]]