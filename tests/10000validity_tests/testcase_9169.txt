import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro19270 = tf.keras.layers.Input(shape=([4, 3, 4, 3]))
in0Min99675 = tf.keras.layers.Input(shape=([1, 1]))
in1Min99675 = tf.keras.layers.Input(shape=([1, 1]))
in0PRe93757 = tf.keras.layers.Input(shape=([2, 1]))
in0Con69982 = tf.keras.layers.Input(shape=([2, 2]))
in0Con71543 = tf.keras.layers.Input(shape=([2, 3]))
in0Cro13410 = tf.keras.layers.Input(shape=([4, 4]))
in0Con98251 = tf.keras.layers.Input(shape=([6, 2]))

Cro19270 = keras.layers.Cropping3D(cropping=((2, 0), (1, 0), (2, 1)), name = 'Cro19270', )(in0Cro19270)
Res13547 = keras.layers.Reshape((2, 2, 3), name = 'Res13547', )(Cro19270)
Res60493 = keras.layers.Reshape((2, 6), name = 'Res60493', )(Res13547)
Max81752 = keras.layers.MaxPool1D(pool_size=(1), strides=(2), padding='valid', name = 'Max81752', )(Res60493)
Zer50055 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer50055', )(Max81752)
Min99675 = keras.layers.Minimum(name = 'Min99675', )([in0Min99675,in1Min99675])
Con84563 = keras.layers.Conv1D(3, (2),strides=(7), padding='same', dilation_rate=(1), name = 'Con84563', )(Min99675)
Zer28866 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer28866', )(Con84563)
PRe93757 = keras.layers.PReLU(name = 'PRe93757', input_shape=(2, 1))(in0PRe93757)
Con69982 = keras.layers.Concatenate(axis=2, name = 'Con69982', )([PRe93757,in0Con69982])
Max20515 = keras.layers.Maximum(name = 'Max20515', )([Zer28866,Con69982])
Con71543 = keras.layers.Concatenate(axis=2, name = 'Con71543', )([Max20515,in0Con71543])
Ave83424 = keras.layers.Average(name = 'Ave83424', )([Zer50055,Con71543])
Zer96727 = keras.layers.ZeroPadding1D(padding=((4, 0)), name = 'Zer96727', )(Ave83424)
Cro13410 = keras.layers.Cropping1D(cropping=((1, 0)), name = 'Cro13410', )(in0Cro13410)
Bat91953 = keras.layers.BatchNormalization(axis=2, epsilon=0.6611429790156783,  name = 'Bat91953', )(Cro13410)
Up_77038 = keras.layers.UpSampling1D(size=(2), name = 'Up_77038', )(Bat91953)
Con98251 = keras.layers.Concatenate(axis=2, name = 'Con98251', )([Up_77038,in0Con98251])
Mul39454 = keras.layers.Multiply(name = 'Mul39454', )([Zer96727,Con98251])
model = tf.keras.models.Model(inputs=[in0Cro19270,in0Min99675,in1Min99675,in0PRe93757,in0Con69982,in0Con71543,in0Cro13410,in0Con98251], outputs=Mul39454)
w = model.get_layer('Con84563').get_weights() 
w[0] = np.array([[[0.6541, 0.5583, 0.0462]], [[0.4682, 0.8299, 0.7705]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con84563').set_weights(w) 
w = model.get_layer('PRe93757').get_weights() 
w[0] = np.array([[0.8932], [0.1295]])
model.get_layer('PRe93757').set_weights(w) 
w = model.get_layer('Bat91953').get_weights() 
w[0] = np.array([0.0494, 0.675, 0.1024, 0.8926])
w[1] = np.array([0.3527, 0.6462, 0.7133, 0.183])
w[2] = np.array([0.7679, 0.9295, 0.7916, 0.319])
w[3] = np.array([0.4241, 0.0681, 0.6806, 0.9216])
model.get_layer('Bat91953').set_weights(w) 
in0Cro19270 = tf.constant([[[[[1.671, 1.2477, 1.7599], [1.5299, 1.4466, 1.9355], [1.3833, 1.3764, 1.4849], [1.596, 1.2404, 1.8076]], [[1.6967, 1.3868, 1.1467], [1.559, 1.5228, 1.8824], [1.2996, 1.0698, 1.0327], [1.7061, 1.895, 1.9062]], [[1.054, 1.2077, 1.0111], [1.6222, 1.0899, 1.9594], [1.823, 1.3288, 1.6832], [1.1906, 1.3174, 1.9177]]], [[[1.4464, 1.5364, 1.9395], [1.9703, 1.192, 1.6371], [1.0231, 1.8713, 1.4705], [1.1916, 1.4315, 1.5426]], [[1.35, 1.0434, 1.5655], [1.5123, 1.4594, 1.7558], [1.7853, 1.7457, 1.1524], [1.9201, 1.335, 1.776]], [[1.153, 1.1328, 1.0601], [1.1941, 1.1913, 1.1765], [1.5631, 1.4849, 1.9516], [1.4433, 1.9579, 1.5278]]], [[[1.1175, 1.0528, 1.0483], [1.8209, 1.4237, 1.4302], [1.5857, 1.633, 1.4003], [1.339, 1.2393, 1.8382]], [[1.9318, 1.4877, 1.0518], [1.148, 1.8414, 1.8686], [1.4449, 1.8185, 1.4614], [1.9292, 1.2938, 1.6805]], [[1.551, 1.5246, 1.19], [1.5194, 1.9838, 1.3543], [1.7808, 1.4117, 1.343], [1.2478, 1.9878, 1.6162]]], [[[1.9343, 1.2318, 1.9851], [1.0136, 1.7547, 1.784], [1.0473, 1.888, 1.6392], [1.0589, 1.7673, 1.0546]], [[1.1509, 1.1589, 1.6851], [1.9493, 1.7726, 1.7117], [1.0709, 1.3194, 1.6168], [1.12, 1.4627, 1.5776]], [[1.1751, 1.8493, 1.5687], [1.7194, 1.5981, 1.0319], [1.3168, 1.9377, 1.6169], [1.4858, 1.1571, 1.7189]]]]])
in0Min99675 = tf.constant([[[0.4952]]])
in1Min99675 = tf.constant([[[0.9649]]])
in0PRe93757 = tf.constant([[[0.2036], [0.2533]]])
in0Con69982 = tf.constant([[[0.1219, 0.2288], [0.372, 0.6928]]])
in0Con71543 = tf.constant([[[0.1279, 0.7235, 0.4376], [0.5539, 0.5398, 0.2291]]])
in0Cro13410 = tf.constant([[[1.3375, 1.0926, 1.4428, 1.4523], [1.668, 1.9641, 1.0259, 1.7275], [1.4425, 1.8441, 1.6156, 1.9602], [1.5589, 1.7387, 1.8628, 1.7622]]])
in0Con98251 = tf.constant([[[0.2274, 0.2495], [0.6851, 0.4565], [0.1431, 0.0632], [0.0888, 0.117], [0.1821, 0.4711], [0.1315, 0.7928]]])
print (np.array2string(model.predict([in0Cro19270,in0Min99675,in1Min99675,in0PRe93757,in0Con69982,in0Con71543,in0Cro13410,in0Con98251],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul39454.png')

LCro19270 = cropping3D_layer([[[[[1.671, 1.2477, 1.7599], [1.5299, 1.4466, 1.9355], [1.3833, 1.3764, 1.4849], [1.596, 1.2404, 1.8076]], [[1.6967, 1.3868, 1.1467], [1.559, 1.5228, 1.8824], [1.2996, 1.0698, 1.0327], [1.7061, 1.895, 1.9062]], [[1.054, 1.2077, 1.0111], [1.6222, 1.0899, 1.9594], [1.823, 1.3288, 1.6832], [1.1906, 1.3174, 1.9177]]], [[[1.4464, 1.5364, 1.9395], [1.9703, 1.192, 1.6371], [1.0231, 1.8713, 1.4705], [1.1916, 1.4315, 1.5426]], [[1.35, 1.0434, 1.5655], [1.5123, 1.4594, 1.7558], [1.7853, 1.7457, 1.1524], [1.9201, 1.335, 1.776]], [[1.153, 1.1328, 1.0601], [1.1941, 1.1913, 1.1765], [1.5631, 1.4849, 1.9516], [1.4433, 1.9579, 1.5278]]], [[[1.1175, 1.0528, 1.0483], [1.8209, 1.4237, 1.4302], [1.5857, 1.633, 1.4003], [1.339, 1.2393, 1.8382]], [[1.9318, 1.4877, 1.0518], [1.148, 1.8414, 1.8686], [1.4449, 1.8185, 1.4614], [1.9292, 1.2938, 1.6805]], [[1.551, 1.5246, 1.19], [1.5194, 1.9838, 1.3543], [1.7808, 1.4117, 1.343], [1.2478, 1.9878, 1.6162]]], [[[1.9343, 1.2318, 1.9851], [1.0136, 1.7547, 1.784], [1.0473, 1.888, 1.6392], [1.0589, 1.7673, 1.0546]], [[1.1509, 1.1589, 1.6851], [1.9493, 1.7726, 1.7117], [1.0709, 1.3194, 1.6168], [1.12, 1.4627, 1.5776]], [[1.1751, 1.8493, 1.5687], [1.7194, 1.5981, 1.0319], [1.3168, 1.9377, 1.6169], [1.4858, 1.1571, 1.7189]]]]], 2, 0, 1, 0, 2, 1, Cro19270), 
LRes13547 = reshape_layer(Cro19270, [2, 2, 3], Res13547), 
LRes60493 = reshape_layer(Res13547, [2, 6], Res60493), 
LMax81752 = max_pool1D_layer(Res60493, 1, 2, false, Max81752), 
LZer50055 = zero_padding1D_layer(Max81752, 1, 0, Zer50055), 
LMin99675 = minimum_layer([[[[0.4952]]], [[[0.9649]]]], Min99675), 
LCon84563 = conv1D_layer(Min99675, 2,[[[0.6541, 0.5583, 0.0462]], [[0.4682, 0.8299, 0.7705]]],[0, 0, 0], 7, true, 1, Con84563), 
LZer28866 = zero_padding1D_layer(Con84563, 1, 0, Zer28866), 
LPRe93757 = prelu_layer([[[0.2036], [0.2533]]], [[0.8932], [0.1295]], PRe93757), 
LCon69982 = concatenate_layer([PRe93757,[[[0.1219, 0.2288], [0.372, 0.6928]]]], 2, Con69982), 
LMax20515 = maximum_layer([Zer28866,Con69982], Max20515), 
LCon71543 = concatenate_layer([Max20515,[[[0.1279, 0.7235, 0.4376], [0.5539, 0.5398, 0.2291]]]], 2, Con71543), 
LAve83424 = average_layer([Zer50055,Con71543], Ave83424), 
LZer96727 = zero_padding1D_layer(Ave83424, 4, 0, Zer96727), 
LCro13410 = cropping1D_layer([[[1.3375, 1.0926, 1.4428, 1.4523], [1.668, 1.9641, 1.0259, 1.7275], [1.4425, 1.8441, 1.6156, 1.9602], [1.5589, 1.7387, 1.8628, 1.7622]]], 1, 0, Cro13410), 
LBat91953 = batch_normalization_layer(Cro13410, 2, 0.6611429790156783, [0.0494, 0.675, 0.1024, 0.8926], [0.3527, 0.6462, 0.7133, 0.183], [0.7679, 0.9295, 0.7916, 0.319], [0.4241, 0.0681, 0.6806, 0.9216], Bat91953), 
LUp_77038 = up_sampling1D_layer(Bat91953, 2, Up_77038), 
LCon98251 = concatenate_layer([Up_77038,[[[0.2274, 0.2495], [0.6851, 0.4565], [0.1431, 0.0632], [0.0888, 0.117], [0.1821, 0.4711], [0.1315, 0.7928]]]], 2, Con98251), 
LMul39454 = multiply_layer([Zer96727,Con98251], Mul39454), 
exec_layers([LCro19270,LRes13547,LRes60493,LMax81752,LZer50055,LMin99675,LCon84563,LZer28866,LPRe93757,LCon69982,LMax20515,LCon71543,LAve83424,LZer96727,LCro13410,LBat91953,LUp_77038,LCon98251,LMul39454],["Cro19270","Res13547","Res60493","Max81752","Zer50055","Min99675","Con84563","Zer28866","PRe93757","Con69982","Max20515","Con71543","Ave83424","Zer96727","Cro13410","Bat91953","Up_77038","Con98251","Mul39454"],Mul39454,"Mul39454")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0397233, 0.0783709, 0.0924348, 0.0771844, 0.0658747, 0.1030767], [0.3451032, 1.4082968, 0.8702935, 1.4089316, 0.1283111, 0.6231805]]]

Expected (Unparsed): [[[0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0],[0.039723315361653674,0.07837086217824717,0.09243484767420782,0.07718437025470258,0.06587467500000001,0.10307668],[0.3451031933021,1.4082967481661233,0.8702934827787521,1.4089315811857237,0.128311125,0.62318044]]]

Actual:   [[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0.0398, 0.0784, 0.0925, 0.0772, 0.0659, 0.1031], [0.3452, 1.4083, 0.8703, 1.409, 0.1284, 0.6232]]]

Expected: [[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0.0398, 0.0784, 0.0925, 0.0772, 0.0659, 0.1031], [0.3452, 1.4083, 0.8703, 1.409, 0.1284, 0.6232]]]