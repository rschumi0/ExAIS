import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave48065 = tf.keras.layers.Input(shape=([1, 1]))
in1Ave48065 = tf.keras.layers.Input(shape=([1, 1]))
in0Con42976 = tf.keras.layers.Input(shape=([3, 3, 1]))
in0Mul46221 = tf.keras.layers.Input(shape=([1, 2]))
in1Mul46221 = tf.keras.layers.Input(shape=([1, 2]))

Ave48065 = keras.layers.Average(name = 'Ave48065', )([in0Ave48065,in1Ave48065])
GRU73474 = keras.layers.GRU(3,reset_after=False, recurrent_activation='sigmoid', name = 'GRU73474', )(Ave48065)
Thr14360 = keras.layers.ThresholdedReLU(theta=7.68352135867132, name = 'Thr14360', )(GRU73474)
Res15973 = keras.layers.Reshape((3, 1), name = 'Res15973', )(Thr14360)
Res2550 = keras.layers.Reshape((3, 1, 1), name = 'Res2550', )(Res15973)
Zer2229 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer2229', )(Res2550)
Con42976 = keras.layers.Concatenate(axis=3, name = 'Con42976', )([Zer2229,in0Con42976])
Mul46221 = keras.layers.Multiply(name = 'Mul46221', )([in0Mul46221,in1Mul46221])
Res92633 = keras.layers.Reshape((1, 2, 1), name = 'Res92633', )(Mul46221)
Loc12555 = keras.layers.LocallyConnected2D(2, (1, 1),strides=(1, 1), name = 'Loc12555', )(Res92633)
Zer49667 = keras.layers.ZeroPadding2D(padding=((2, 0), (1, 0)), name = 'Zer49667', )(Loc12555)
Sub58139 = keras.layers.Subtract(name = 'Sub58139', )([Con42976,Zer49667])
Res72926 = keras.layers.Reshape((3, 3, 2, 1), name = 'Res72926', )(Sub58139)
Up_54203 = keras.layers.UpSampling3D(size=(2, 1, 2), name = 'Up_54203', )(Res72926)
model = tf.keras.models.Model(inputs=[in0Ave48065,in1Ave48065,in0Con42976,in0Mul46221,in1Mul46221], outputs=Up_54203)
w = model.get_layer('GRU73474').get_weights() 
w[0] = np.array([[8, 9, 10, 6, 3, 9, 4, 6, 10]])
w[1] = np.array([[5, 1, 8, 4, 1, 3, 6, 6, 1], [8, 9, 1, 4, 4, 10, 2, 9, 6], [2, 6, 4, 10, 2, 1, 6, 4, 10]])
w[2] = np.array([5, 2, 3, 7, 2, 10, 4, 10, 2])
model.get_layer('GRU73474').set_weights(w) 
w = model.get_layer('Loc12555').get_weights() 
w[0] = np.array([[[0.8182, 0.3677]], [[0.5695, 0.7161]]])
w[1] = np.array([[[0, 0], [0, 0]]])
model.get_layer('Loc12555').set_weights(w) 
in0Ave48065 = tf.constant([[[0.6046]]])
in1Ave48065 = tf.constant([[[0.613]]])
in0Con42976 = tf.constant([[[[0.9932], [0.016], [0.112]], [[0.3761], [0.5469], [0.0862]], [[0.8163], [0.6588], [0.4265]]]])
in0Mul46221 = tf.constant([[[0.807, 0.2741]]])
in1Mul46221 = tf.constant([[[0.2206, 0.3644]]])
print (np.array2string(model.predict([in0Ave48065,in1Ave48065,in0Con42976,in0Mul46221,in1Mul46221],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Up_54203.png')

LAve48065 = average_layer([[[[0.6046]]], [[[0.613]]]], Ave48065), 
LGRU73474 = gru_layer(Ave48065,[[8, 9, 10, 6, 3, 9, 4, 6, 10]],[[5, 1, 8, 4, 1, 3, 6, 6, 1], [8, 9, 1, 4, 4, 10, 2, 9, 6], [2, 6, 4, 10, 2, 1, 6, 4, 10]],[5, 2, 3, 7, 2, 10, 4, 10, 2], false, GRU73474), 
LThr14360 = thresholded_relu_layer(GRU73474, 7.68352135867132, Thr14360), 
LRes15973 = reshape_layer(Thr14360, [3, 1], Res15973), 
LRes2550 = reshape_layer(Res15973, [3, 1, 1], Res2550), 
LZer2229 = zero_padding2D_layer(Res2550, 0, 0, 2, 0, Zer2229), 
LCon42976 = concatenate_layer([Zer2229,[[[[0.9932], [0.016], [0.112]], [[0.3761], [0.5469], [0.0862]], [[0.8163], [0.6588], [0.4265]]]]], 3, Con42976), 
LMul46221 = multiply_layer([[[[0.807, 0.2741]]], [[[0.2206, 0.3644]]]], Mul46221), 
LRes92633 = reshape_layer(Mul46221, [1, 2, 1], Res92633), 
LLoc12555 = locally_connected2D_layer(Res92633, 1, 1,[[[0.8182, 0.3677]], [[0.5695, 0.7161]]],[[[0, 0], [0, 0]]], 1, 1, Loc12555), 
LZer49667 = zero_padding2D_layer(Loc12555, 2, 0, 1, 0, Zer49667), 
LSub58139 = subtract_layer(Con42976,Zer49667, Sub58139), 
LRes72926 = reshape_layer(Sub58139, [3, 3, 2, 1], Res72926), 
LUp_54203 = up_sampling3D_layer(Res72926, 2, 1, 2, Up_54203), 
exec_layers([LAve48065,LGRU73474,LThr14360,LRes15973,LRes2550,LZer2229,LCon42976,LMul46221,LRes92633,LLoc12555,LZer49667,LSub58139,LRes72926,LUp_54203],["Ave48065","GRU73474","Thr14360","Res15973","Res2550","Zer2229","Con42976","Mul46221","Res92633","Loc12555","Zer49667","Sub58139","Res72926","Up_54203"],Up_54203,"Up_54203")

Actual (Unparsed): [[[[[0.0000000], [0.0000000], [0.9932000], [0.9932000]], [[0.0000000], [0.0000000], [0.0160000], [0.0160000]], [[0.0000000], [0.0000000], [0.1120000], [0.1120000]]], [[[0.0000000], [0.0000000], [0.9932000], [0.9932000]], [[0.0000000], [0.0000000], [0.0160000], [0.0160000]], [[0.0000000], [0.0000000], [0.1120000], [0.1120000]]], [[[0.0000000], [0.0000000], [0.3761000], [0.3761000]], [[0.0000000], [0.0000000], [0.5469000], [0.5469000]], [[0.0000000], [0.0000000], [0.0862000], [0.0862000]]], [[[0.0000000], [0.0000000], [0.3761000], [0.3761000]], [[0.0000000], [0.0000000], [0.5469000], [0.5469000]], [[0.0000000], [0.0000000], [0.0862000], [0.0862000]]], [[[0.0000000], [0.0000000], [0.8163000], [0.8163000]], [[-0.1456594], [-0.1456594], [0.5933405], [0.5933405]], [[-0.0568828], [-0.0568828], [0.3549745], [0.3549745]]], [[[0.0000000], [0.0000000], [0.8163000], [0.8163000]], [[-0.1456594], [-0.1456594], [0.5933405], [0.5933405]], [[-0.0568828], [-0.0568828], [0.3549745], [0.3549745]]]]]

Expected (Unparsed): [[[[[0],[0],[0.9932],[0.9932]],[[0],[0],[0.016],[0.016]],[[0],[0],[0.112],[0.112]]],[[[0],[0],[0.9932],[0.9932]],[[0],[0],[0.016],[0.016]],[[0],[0],[0.112],[0.112]]],[[[0],[0],[0.3761],[0.3761]],[[0],[0],[0.5469],[0.5469]],[[0],[0],[0.0862],[0.0862]]],[[[0],[0],[0.3761],[0.3761]],[[0],[0],[0.5469],[0.5469]],[[0],[0],[0.0862],[0.0862]]],[[[0],[0],[0.8163],[0.8163]],[[-0.14565940044],[-0.14565940044],[0.5933405016600001],[0.5933405016600001]],[[-0.05688282178],[-0.05688282178],[0.354974471156],[0.354974471156]]],[[[0],[0],[0.8163],[0.8163]],[[-0.14565940044],[-0.14565940044],[0.5933405016600001],[0.5933405016600001]],[[-0.05688282178],[-0.05688282178],[0.354974471156],[0.354974471156]]]]]

Actual:   [[[[[0], [0], [0.9932], [0.9932]], [[0], [0], [0.016], [0.016]], [[0], [0], [0.112], [0.112]]], [[[0], [0], [0.9932], [0.9932]], [[0], [0], [0.016], [0.016]], [[0], [0], [0.112], [0.112]]], [[[0], [0], [0.3761], [0.3761]], [[0], [0], [0.5469], [0.5469]], [[0], [0], [0.0862], [0.0862]]], [[[0], [0], [0.3761], [0.3761]], [[0], [0], [0.5469], [0.5469]], [[0], [0], [0.0862], [0.0862]]], [[[0], [0], [0.8163], [0.8163]], [[-0.1456], [-0.1456], [0.5934], [0.5934]], [[-0.0568], [-0.0568], [0.355], [0.355]]], [[[0], [0], [0.8163], [0.8163]], [[-0.1456], [-0.1456], [0.5934], [0.5934]], [[-0.0568], [-0.0568], [0.355], [0.355]]]]]

Expected: [[[[[0], [0], [0.9932], [0.9932]], [[0], [0], [0.016], [0.016]], [[0], [0], [0.112], [0.112]]], [[[0], [0], [0.9932], [0.9932]], [[0], [0], [0.016], [0.016]], [[0], [0], [0.112], [0.112]]], [[[0], [0], [0.3761], [0.3761]], [[0], [0], [0.5469], [0.5469]], [[0], [0], [0.0862], [0.0862]]], [[[0], [0], [0.3761], [0.3761]], [[0], [0], [0.5469], [0.5469]], [[0], [0], [0.0862], [0.0862]]], [[[0], [0], [0.8163], [0.8163]], [[-0.1456], [-0.1456], [0.5934], [0.5934]], [[-0.0568], [-0.0568], [0.355], [0.355]]], [[[0], [0], [0.8163], [0.8163]], [[-0.1456], [-0.1456], [0.5934], [0.5934]], [[-0.0568], [-0.0568], [0.355], [0.355]]]]]