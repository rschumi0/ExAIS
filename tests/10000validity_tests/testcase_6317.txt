import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sep81726 = tf.keras.layers.Input(shape=([1, 1]))
in0Per83903 = tf.keras.layers.Input(shape=([3, 4]))
in0Glo38133 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Con94574 = tf.keras.layers.Input(shape=([11]))
in0Con13646 = tf.keras.layers.Input(shape=([12, 2]))
in0Sep18302 = tf.keras.layers.Input(shape=([1, 1]))
in0Con20463 = tf.keras.layers.Input(shape=([12, 1]))

Sep81726 = keras.layers.SeparableConv1D(4, (1),strides=(1), padding='valid', name = 'Sep81726', )(in0Sep81726)
Sof21779 = keras.layers.Softmax(axis=1, name = 'Sof21779', )(Sep81726)
Zer95702 = keras.layers.ZeroPadding1D(padding=((11, 0)), name = 'Zer95702', )(Sof21779)
Per83903 = keras.layers.Permute((1,2), name = 'Per83903',)(in0Per83903)
Fla39530 = keras.layers.Flatten(name = 'Fla39530', )(Per83903)
Glo38133 = keras.layers.GlobalMaxPool3D(name = 'Glo38133', )(in0Glo38133)
Con94574 = keras.layers.Concatenate(axis=1, name = 'Con94574', )([Glo38133,in0Con94574])
Sub40380 = keras.layers.Subtract(name = 'Sub40380', )([Fla39530,Con94574])
Res65233 = keras.layers.Reshape((12, 1), name = 'Res65233', )(Sub40380)
Con13646 = keras.layers.Concatenate(axis=2, name = 'Con13646', )([Res65233,in0Con13646])
Sep18302 = keras.layers.SeparableConv1D(3, (1),strides=(1), padding='valid', name = 'Sep18302', )(in0Sep18302)
Zer27797 = keras.layers.ZeroPadding1D(padding=((11, 0)), name = 'Zer27797', )(Sep18302)
Sub96983 = keras.layers.Subtract(name = 'Sub96983', )([Con13646,Zer27797])
Con20463 = keras.layers.Concatenate(axis=2, name = 'Con20463', )([Sub96983,in0Con20463])
Sub22430 = keras.layers.Subtract(name = 'Sub22430', )([Zer95702,Con20463])
model = tf.keras.models.Model(inputs=[in0Sep81726,in0Per83903,in0Glo38133,in0Con94574,in0Con13646,in0Sep18302,in0Con20463], outputs=Sub22430)
w = model.get_layer('Sep81726').get_weights() 
w[0] = np.array([[[0.0612]]])
w[1] = np.array([[[0.2459, 0.5017, 0.4752, 0.8653]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep81726').set_weights(w) 
w = model.get_layer('Sep18302').get_weights() 
w[0] = np.array([[[0.3229]]])
w[1] = np.array([[[0.0136, 0.9243, 0.7936]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep18302').set_weights(w) 
in0Sep81726 = tf.constant([[[0.2498]]])
in0Per83903 = tf.constant([[[1.6611, 1.0648, 1.7298, 1.63], [1.9916, 1.706, 1.3003, 1.6689], [1.6898, 1.9469, 1.3544, 1.1474]]])
in0Glo38133 = tf.constant([[[[[1.4185]], [[1.8868]]]]])
in0Con94574 = tf.constant([[0.7857, 0.109, 0.8191, 0.3644, 0.3968, 0.4739, 0.5322, 0.6504, 0.3468, 0.4241, 0.2534]])
in0Con13646 = tf.constant([[[0.4683, 0.6591], [0.8603, 0.0821], [0.4794, 0.936], [0.152, 0.9993], [0.9437, 0.6247], [0.3789, 0.4931], [0.8137, 0.6411], [0.2629, 0.3273], [0.1382, 0.1322], [0.4936, 0.2693], [0.6106, 0.9371], [0.774, 0.842]]])
in0Sep18302 = tf.constant([[[0.2266]]])
in0Con20463 = tf.constant([[[0.7865], [0.8161], [0.338], [0.2449], [0.2773], [0.7963], [0.5345], [0.4159], [0.0232], [0.4065], [0.4992], [0.8317]]])
print (np.array2string(model.predict([in0Sep81726,in0Per83903,in0Glo38133,in0Con94574,in0Con13646,in0Sep18302,in0Con20463],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub22430.png')

LSep81726 = separable_conv1D_layer([[[0.2498]]], 1,[[[[0.0612]]],[[[0.2459, 0.5017, 0.4752, 0.8653]]]],[0, 0, 0, 0], 1, false, Sep81726), 
LSof21779 = softmax_layer(Sep81726, 1, Sof21779), 
LZer95702 = zero_padding1D_layer(Sof21779, 11, 0, Zer95702), 
LPer83903 = permute_layer([[[1.6611, 1.0648, 1.7298, 1.63], [1.9916, 1.706, 1.3003, 1.6689], [1.6898, 1.9469, 1.3544, 1.1474]]], 1,2, Per83903), 
LFla39530 = flatten_layer(Per83903, Fla39530), 
LGlo38133 = global_max_pool3D_layer([[[[[1.4185]], [[1.8868]]]]], Glo38133), 
LCon94574 = concatenate_layer([Glo38133,[[0.7857, 0.109, 0.8191, 0.3644, 0.3968, 0.4739, 0.5322, 0.6504, 0.3468, 0.4241, 0.2534]]], 1, Con94574), 
LSub40380 = subtract_layer(Fla39530,Con94574, Sub40380), 
LRes65233 = reshape_layer(Sub40380, [12, 1], Res65233), 
LCon13646 = concatenate_layer([Res65233,[[[0.4683, 0.6591], [0.8603, 0.0821], [0.4794, 0.936], [0.152, 0.9993], [0.9437, 0.6247], [0.3789, 0.4931], [0.8137, 0.6411], [0.2629, 0.3273], [0.1382, 0.1322], [0.4936, 0.2693], [0.6106, 0.9371], [0.774, 0.842]]]], 2, Con13646), 
LSep18302 = separable_conv1D_layer([[[0.2266]]], 1,[[[[0.3229]]],[[[0.0136, 0.9243, 0.7936]]]],[0, 0, 0], 1, false, Sep18302), 
LZer27797 = zero_padding1D_layer(Sep18302, 11, 0, Zer27797), 
LSub96983 = subtract_layer(Con13646,Zer27797, Sub96983), 
LCon20463 = concatenate_layer([Sub96983,[[[0.7865], [0.8161], [0.338], [0.2449], [0.2773], [0.7963], [0.5345], [0.4159], [0.0232], [0.4065], [0.4992], [0.8317]]]], 2, Con20463), 
LSub22430 = subtract_layer(Zer95702,Con20463, Sub22430), 
exec_layers([LSep81726,LSof21779,LZer95702,LPer83903,LFla39530,LGlo38133,LCon94574,LSub40380,LRes65233,LCon13646,LSep18302,LZer27797,LSub96983,LCon20463,LSub22430],["Sep81726","Sof21779","Zer95702","Per83903","Fla39530","Glo38133","Con94574","Sub40380","Res65233","Con13646","Sep18302","Zer27797","Sub96983","Con20463","Sub22430"],Sub22430,"Sub22430")

Actual (Unparsed): [[[0.2257000, -0.4683000, -0.6591000, -0.7865000], [-0.2791000, -0.8603000, -0.0821000, -0.8161000], [-1.6208000, -0.4794000, -0.9360000, -0.3380000], [-0.8109000, -0.1520000, -0.9993000, -0.2449000], [-1.6272000, -0.9437000, -0.6247000, -0.2773000], [-1.3092000, -0.3789000, -0.4931000, -0.7963000], [-0.8264000, -0.8137000, -0.6411000, -0.5345000], [-1.1367000, -0.2629000, -0.3273000, -0.4159000], [-1.0394000, -0.1382000, -0.1322000, -0.0232000], [-1.6001000, -0.4936000, -0.2693000, -0.4065000], [-0.9303000, -0.6106000, -0.9371000, -0.4992000], [0.1069951, 0.2936302, 0.2160670, 0.1683000]]]

Expected (Unparsed): [[[0.2257,-0.4683,-0.6591,-0.7865],[-0.2791,-0.8603,-0.0821,-0.8161],[-1.6208,-0.4794,-0.936,-0.338],[-0.8108999999999998,-0.152,-0.9993,-0.2449],[-1.6272,-0.9437,-0.6247,-0.2773],[-1.3092,-0.3789,-0.4931,-0.7963],[-0.8264,-0.8137,-0.6411,-0.5345],[-1.1367,-0.2629,-0.3273,-0.4159],[-1.0394,-0.1382,-0.1322,-0.0232],[-1.6001,-0.4936,-0.2693,-0.4065],[-0.9303000000000001,-0.6106,-0.9371,-0.4992],[0.10699510030400006,0.293630236102,0.21606702950400003,0.1683]]]

Actual:   [[[0.2257, -0.4683, -0.6591, -0.7865], [-0.2791, -0.8603, -0.0821, -0.8161], [-1.6208, -0.4794, -0.936, -0.338], [-0.8109, -0.152, -0.9993, -0.2449], [-1.6272, -0.9437, -0.6247, -0.2773], [-1.3092, -0.3789, -0.4931, -0.7963], [-0.8264, -0.8137, -0.6411, -0.5345], [-1.1367, -0.2629, -0.3273, -0.4159], [-1.0394, -0.1382, -0.1322, -0.0232], [-1.6001, -0.4936, -0.2693, -0.4065], [-0.9303, -0.6106, -0.9371, -0.4992], [0.107, 0.2937, 0.2161, 0.1683]]]

Expected: [[[0.2257, -0.4683, -0.6591, -0.7865], [-0.2791, -0.8603, -0.0821, -0.8161], [-1.6208, -0.4794, -0.936, -0.338], [-0.8108, -0.152, -0.9993, -0.2449], [-1.6272, -0.9437, -0.6247, -0.2773], [-1.3092, -0.3789, -0.4931, -0.7963], [-0.8264, -0.8137, -0.6411, -0.5345], [-1.1367, -0.2629, -0.3273, -0.4159], [-1.0394, -0.1382, -0.1322, -0.0232], [-1.6001, -0.4936, -0.2693, -0.4065], [-0.9303, -0.6106, -0.9371, -0.4992], [0.107, 0.2937, 0.2161, 0.1683]]]