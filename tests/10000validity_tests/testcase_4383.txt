import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con76052 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))

Con76052 = keras.layers.Conv3DTranspose(2, (1, 2, 1),strides=(1, 1, 1), padding='same', name = 'Con76052', )(in0Con76052)
Res82393 = keras.layers.Reshape((1, 2, 2), name = 'Res82393', )(Con76052)
Res47416 = keras.layers.Reshape((1, 4), name = 'Res47416', )(Res82393)
Sim96730 = keras.layers.SimpleRNN(3,name = 'Sim96730', )(Res47416)
model = tf.keras.models.Model(inputs=[in0Con76052], outputs=Sim96730)
w = model.get_layer('Con76052').get_weights() 
w[0] = np.array([[[[[0.4522, 0.2811], [0.4158, 0.193]]], [[[0.9722, 0.6253], [0.1789, 0.4372]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con76052').set_weights(w) 
w = model.get_layer('Sim96730').get_weights() 
w[0] = np.array([[3, 6, 7], [4, 1, 4], [4, 4, 5], [8, 3, 2]])
w[1] = np.array([[3, 2, 4], [4, 7, 9], [7, 10, 10]])
w[2] = np.array([8, 2, 3])
model.get_layer('Sim96730').set_weights(w) 
in0Con76052 = tf.constant([[[[[0.5681, 0.5762]], [[0.0563, 0.4685]]]]])
print (np.array2string(model.predict([in0Con76052],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sim96730.png')

LCon76052 = conv3D_transpose_layer([[[[[0.5681, 0.5762]], [[0.0563, 0.4685]]]]], 1, 2, 1,[[[[[0.4522, 0.2811], [0.4158, 0.193]]], [[[0.9722, 0.6253], [0.1789, 0.4372]]]]],[0, 0], 1, 1, 1, true, Con76052), 
LRes82393 = reshape_layer(Con76052, [1, 2, 2], Res82393), 
LRes47416 = reshape_layer(Res82393, [1, 4], Res47416), 
LSim96730 = simple_rnn_layer(Res47416,[[3, 6, 7], [4, 1, 4], [4, 4, 5], [8, 3, 2]],[[3, 2, 4], [4, 7, 9], [7, 10, 10]],[8, 2, 3], Sim96730), 
exec_layers([LCon76052,LRes82393,LRes47416,LSim96730],["Con76052","Res82393","Res47416","Sim96730"],Sim96730,"Sim96730")

Actual (Unparsed): [[1.0000000, 1.0000000, 1.0000000]]

Expected (Unparsed): [[0.9999999999999999,0.9999999986050557,0.9999999999969548]]

Actual:   [[1, 1, 1]]

Expected: [[1, 1, 1]]