import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave71400 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Ave71400 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con41377 = tf.keras.layers.Input(shape=([2, 12]))
in0Up_88717 = tf.keras.layers.Input(shape=([3, 2, 2, 4]))
in0Max32121 = tf.keras.layers.Input(shape=([2, 2]))
in1Max32121 = tf.keras.layers.Input(shape=([2, 2]))
in0Con67293 = tf.keras.layers.Input(shape=([2, 14]))

Ave71400 = keras.layers.Average(name = 'Ave71400', )([in0Ave71400,in1Ave71400])
Res61418 = keras.layers.Reshape((2, 4), name = 'Res61418', )(Ave71400)
Con41377 = keras.layers.Concatenate(axis=2, name = 'Con41377', )([Res61418,in0Con41377])
Up_88717 = keras.layers.UpSampling3D(size=(2, 1, 1), name = 'Up_88717', )(in0Up_88717)
Res87519 = keras.layers.Reshape((6, 2, 8), name = 'Res87519', )(Up_88717)
Res5178 = keras.layers.Reshape((6, 16), name = 'Res5178', )(Res87519)
Cro41771 = keras.layers.Cropping1D(cropping=((1, 3)), name = 'Cro41771', )(Res5178)
Ave13821 = keras.layers.Average(name = 'Ave13821', )([Con41377,Cro41771])
Max32121 = keras.layers.Maximum(name = 'Max32121', )([in0Max32121,in1Max32121])
Con67293 = keras.layers.Concatenate(axis=2, name = 'Con67293', )([Max32121,in0Con67293])
Mul56665 = keras.layers.Multiply(name = 'Mul56665', )([Ave13821,Con67293])
model = tf.keras.models.Model(inputs=[in0Ave71400,in1Ave71400,in0Con41377,in0Up_88717,in0Max32121,in1Max32121,in0Con67293], outputs=Mul56665)
in0Ave71400 = tf.constant([[[[0.162, 0.0179], [0.2372, 0.0851]], [[0.7816, 0.6054], [0.8493, 0.3194]]]])
in1Ave71400 = tf.constant([[[[0.4698, 0.8281], [0.8129, 0.3404]], [[0.176, 0.9764], [0.222, 0.057]]]])
in0Con41377 = tf.constant([[[0.0109, 0.2965, 0.8827, 0.8728, 0.7603, 0.2835, 0.87, 0.682, 0.7834, 0.4769, 0.7716, 0.2356], [0.349, 0.9685, 0.0298, 0.1989, 0.3445, 0.2041, 0.3985, 0.337, 0.426, 0.5404, 0.242, 0.8647]]])
in0Up_88717 = tf.constant([[[[[1.1544, 1.9624, 1.7003, 1.9528], [1.5616, 1.7116, 1.3693, 1.6859]], [[1.7025, 1.6221, 1.8142, 1.0667], [1.8091, 1.2404, 1.9446, 1.2993]]], [[[1.8627, 1.9429, 1.1044, 1.9639], [1.5079, 1.2032, 1.6489, 1.4657]], [[1.5502, 1.9789, 1.4797, 1.5788], [1.875, 1.8546, 1.7017, 1.2709]]], [[[1.883, 1.843, 1.6517, 1.2145], [1.6973, 1.1643, 1.0378, 1.2585]], [[1.4639, 1.8978, 1.8212, 1.665], [1.0438, 1.1343, 1.7786, 1.0991]]]]])
in0Max32121 = tf.constant([[[0.2708, 0.1415], [0.3855, 0.2019]]])
in1Max32121 = tf.constant([[[0.7381, 0.1022], [0.7811, 0.0713]]])
in0Con67293 = tf.constant([[[0.7585, 0.4956, 0.3697, 0.064, 0.7542, 0.5455, 0.4077, 0.6628, 0.1205, 0.2338, 0.0065, 0.5959, 0.8081, 0.7025], [0.3996, 0.305, 0.9705, 0.3684, 0.2535, 0.2487, 0.6146, 0.4422, 0.9316, 0.1089, 0.1128, 0.509, 0.3391, 0.8288]]])
print (np.array2string(model.predict([in0Ave71400,in1Ave71400,in0Con41377,in0Up_88717,in0Max32121,in1Max32121,in0Con67293],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul56665.png')

LAve71400 = average_layer([[[[[0.162, 0.0179], [0.2372, 0.0851]], [[0.7816, 0.6054], [0.8493, 0.3194]]]], [[[[0.4698, 0.8281], [0.8129, 0.3404]], [[0.176, 0.9764], [0.222, 0.057]]]]], Ave71400), 
LRes61418 = reshape_layer(Ave71400, [2, 4], Res61418), 
LCon41377 = concatenate_layer([Res61418,[[[0.0109, 0.2965, 0.8827, 0.8728, 0.7603, 0.2835, 0.87, 0.682, 0.7834, 0.4769, 0.7716, 0.2356], [0.349, 0.9685, 0.0298, 0.1989, 0.3445, 0.2041, 0.3985, 0.337, 0.426, 0.5404, 0.242, 0.8647]]]], 2, Con41377), 
LUp_88717 = up_sampling3D_layer([[[[[1.1544, 1.9624, 1.7003, 1.9528], [1.5616, 1.7116, 1.3693, 1.6859]], [[1.7025, 1.6221, 1.8142, 1.0667], [1.8091, 1.2404, 1.9446, 1.2993]]], [[[1.8627, 1.9429, 1.1044, 1.9639], [1.5079, 1.2032, 1.6489, 1.4657]], [[1.5502, 1.9789, 1.4797, 1.5788], [1.875, 1.8546, 1.7017, 1.2709]]], [[[1.883, 1.843, 1.6517, 1.2145], [1.6973, 1.1643, 1.0378, 1.2585]], [[1.4639, 1.8978, 1.8212, 1.665], [1.0438, 1.1343, 1.7786, 1.0991]]]]], 2, 1, 1, Up_88717), 
LRes87519 = reshape_layer(Up_88717, [6, 2, 8], Res87519), 
LRes5178 = reshape_layer(Res87519, [6, 16], Res5178), 
LCro41771 = cropping1D_layer(Res5178, 1, 3, Cro41771), 
LAve13821 = average_layer([Con41377,Cro41771], Ave13821), 
LMax32121 = maximum_layer([[[[0.2708, 0.1415], [0.3855, 0.2019]]], [[[0.7381, 0.1022], [0.7811, 0.0713]]]], Max32121), 
LCon67293 = concatenate_layer([Max32121,[[[0.7585, 0.4956, 0.3697, 0.064, 0.7542, 0.5455, 0.4077, 0.6628, 0.1205, 0.2338, 0.0065, 0.5959, 0.8081, 0.7025], [0.3996, 0.305, 0.9705, 0.3684, 0.2535, 0.2487, 0.6146, 0.4422, 0.9316, 0.1089, 0.1128, 0.509, 0.3391, 0.8288]]]], 2, Con67293), 
LMul56665 = multiply_layer([Ave13821,Con67293], Mul56665), 
exec_layers([LAve71400,LRes61418,LCon41377,LUp_88717,LRes87519,LRes5178,LCro41771,LAve13821,LMax32121,LCon67293,LMul56665],["Ave71400","Res61418","Con41377","Up_88717","Res87519","Res5178","Cro41771","Ave13821","Max32121","Con67293","Mul56665"],Mul56665,"Mul56665")

Actual (Unparsed): [[[0.5426142, 0.1687670, 0.8439640, 0.5366233, 0.2906766, 0.0642592, 0.8492292, 0.6978854, 0.5020418, 0.6315158, 0.1617231, 0.2044230, 0.0084256, 0.5116695, 1.0974806, 0.5391336], [0.9144728, 0.2759771, 0.3276820, 0.3281953, 0.9010607, 0.4000271, 0.2127752, 0.2069930, 0.5822413, 0.4826613, 0.8748655, 0.1043153, 0.1297764, 0.6095275, 0.3295543, 0.8849927]]]

Expected (Unparsed): [[[0.5426142150000001,0.16876704999999997,0.8439639874999998,0.53662329,0.29067662499999997,0.06425919999999999,0.8492291999999999,0.697885425,0.50204178,0.63151584,0.16172305,0.20442303,0.008425624999999999,0.5116695349999999,1.09748061,0.539133625],[0.9144728249999999,0.27597710999999997,0.32768199000000003,0.32819525,0.901060725,0.40002714,0.212775225,0.20699301,0.58224131,0.4826613,0.87486556,0.10431531,0.12977640000000001,0.6095275,0.32955433500000003,0.88499264]]]

Actual:   [[[0.5427, 0.1688, 0.844, 0.5367, 0.2907, 0.0643, 0.8493, 0.6979, 0.5021, 0.6316, 0.1618, 0.2045, 0.0085, 0.5117, 1.0975, 0.5392], [0.9145, 0.276, 0.3277, 0.3282, 0.9011, 0.4001, 0.2128, 0.207, 0.5823, 0.4827, 0.8749, 0.1044, 0.1298, 0.6096, 0.3296, 0.885]]]

Expected: [[[0.5427, 0.1688, 0.844, 0.5367, 0.2907, 0.0643, 0.8493, 0.6979, 0.5021, 0.6316, 0.1618, 0.2045, 0.0085, 0.5117, 1.0975, 0.5392], [0.9145, 0.276, 0.3277, 0.3282, 0.9011, 0.4001, 0.2128, 0.207, 0.5823, 0.4827, 0.8749, 0.1044, 0.1298, 0.6096, 0.3296, 0.885]]]