import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sof9905 = tf.keras.layers.Input(shape=([2, 1]))
in0Con10967 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Mul21257 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Mul21257 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con42022 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Sub73652 = tf.keras.layers.Input(shape=([2, 2, 2, 3]))
in1Sub73652 = tf.keras.layers.Input(shape=([2, 2, 2, 3]))

Sof9905 = keras.layers.Softmax(axis=1, name = 'Sof9905', input_shape=(2, 1))(in0Sof9905)
Max60363 = keras.layers.MaxPool1D(pool_size=(1), name = 'Max60363', )(Sof9905)
Res91403 = keras.layers.Reshape((2, 1, 1), name = 'Res91403', )(Max60363)
Res43021 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res43021', )(Res91403)
Zer55409 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (1, 0)), name = 'Zer55409', )(Res43021)
Con10967 = keras.layers.Concatenate(axis=4, name = 'Con10967', )([Zer55409,in0Con10967])
Mul21257 = keras.layers.Multiply(name = 'Mul21257', )([in0Mul21257,in1Mul21257])
Res9248 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res9248', )(Mul21257)
Zer30057 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (1, 0)), name = 'Zer30057', )(Res9248)
Con42022 = keras.layers.Concatenate(axis=4, name = 'Con42022', )([Zer30057,in0Con42022])
Sub73652 = keras.layers.Subtract(name = 'Sub73652', )([in0Sub73652,in1Sub73652])
Sub7382 = keras.layers.Subtract(name = 'Sub7382', )([Con42022,Sub73652])
Sub16101 = keras.layers.Subtract(name = 'Sub16101', )([Con10967,Sub7382])
model = tf.keras.models.Model(inputs=[in0Sof9905,in0Con10967,in0Mul21257,in1Mul21257,in0Con42022,in0Sub73652,in1Sub73652], outputs=Sub16101)
in0Sof9905 = tf.constant([[[0.8005], [0.47]]])
in0Con10967 = tf.constant([[[[[0.8465, 0.3556], [0.839, 0.6959]], [[0.6362, 0.246], [0.8872, 0.6507]]], [[[0.7426, 0.2964], [0.8201, 0.7844]], [[0.6369, 0.6095], [0.9271, 0.8487]]]]])
in0Mul21257 = tf.constant([[[[0.0971]]]])
in1Mul21257 = tf.constant([[[[0.399]]]])
in0Con42022 = tf.constant([[[[[0.909, 0.3884], [0.9226, 0.9992]], [[0.21, 0.5523], [0.4368, 0.5996]]], [[[0.96, 0.2981], [0.3294, 0.2088]], [[0.8335, 0.5717], [0.4341, 0.6676]]]]])
in0Sub73652 = tf.constant([[[[[0.9839, 0.2502, 0.4082], [0.0309, 0.6597, 0.1914]], [[0.6625, 0.4156, 0.0589], [0.4562, 0.0999, 0.8516]]], [[[0.0947, 0.081, 0.7448], [0.2495, 0.9359, 0.7591]], [[0.7343, 0.6515, 0.3152], [0.6995, 0.1113, 0.6859]]]]])
in1Sub73652 = tf.constant([[[[[0.5295, 0.2294, 0.4442], [0.5842, 0.2837, 0.9142]], [[0.7233, 0.0053, 0.7562], [0.3645, 0.5995, 0.3274]]], [[[0.5271, 0.5705, 0.1847], [0.2501, 0.294, 0.5573]], [[0.309, 0.5222, 0.6276], [0.3926, 0.3458, 0.3616]]]]])
print (np.array2string(model.predict([in0Sof9905,in0Con10967,in0Mul21257,in1Mul21257,in0Con42022,in0Sub73652,in1Sub73652],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub16101.png')

LSof9905 = softmax_layer([[[0.8005], [0.47]]], 1, Sof9905), 
LMax60363 = max_pool1D_layer(Sof9905, 1, Max60363), 
LRes91403 = reshape_layer(Max60363, [2, 1, 1], Res91403), 
LRes43021 = reshape_layer(Res91403, [2, 1, 1, 1], Res43021), 
LZer55409 = zero_padding3D_layer(Res43021, 0, 0, 1, 0, 1, 0, Zer55409), 
LCon10967 = concatenate_layer([Zer55409,[[[[[0.8465, 0.3556], [0.839, 0.6959]], [[0.6362, 0.246], [0.8872, 0.6507]]], [[[0.7426, 0.2964], [0.8201, 0.7844]], [[0.6369, 0.6095], [0.9271, 0.8487]]]]]], 4, Con10967), 
LMul21257 = multiply_layer([[[[[0.0971]]]], [[[[0.399]]]]], Mul21257), 
LRes9248 = reshape_layer(Mul21257, [1, 1, 1, 1], Res9248), 
LZer30057 = zero_padding3D_layer(Res9248, 1, 0, 1, 0, 1, 0, Zer30057), 
LCon42022 = concatenate_layer([Zer30057,[[[[[0.909, 0.3884], [0.9226, 0.9992]], [[0.21, 0.5523], [0.4368, 0.5996]]], [[[0.96, 0.2981], [0.3294, 0.2088]], [[0.8335, 0.5717], [0.4341, 0.6676]]]]]], 4, Con42022), 
LSub73652 = subtract_layer([[[[[0.9839, 0.2502, 0.4082], [0.0309, 0.6597, 0.1914]], [[0.6625, 0.4156, 0.0589], [0.4562, 0.0999, 0.8516]]], [[[0.0947, 0.081, 0.7448], [0.2495, 0.9359, 0.7591]], [[0.7343, 0.6515, 0.3152], [0.6995, 0.1113, 0.6859]]]]], [[[[[0.5295, 0.2294, 0.4442], [0.5842, 0.2837, 0.9142]], [[0.7233, 0.0053, 0.7562], [0.3645, 0.5995, 0.3274]]], [[[0.5271, 0.5705, 0.1847], [0.2501, 0.294, 0.5573]], [[0.309, 0.5222, 0.6276], [0.3926, 0.3458, 0.3616]]]]], Sub73652), 
LSub7382 = subtract_layer(Con42022,Sub73652, Sub7382), 
LSub16101 = subtract_layer(Con10967,Sub7382, Sub16101), 
exec_layers([LSof9905,LMax60363,LRes91403,LRes43021,LZer55409,LCon10967,LMul21257,LRes9248,LZer30057,LCon42022,LSub73652,LSub7382,LSub16101],["Sof9905","Max60363","Res91403","Res43021","Zer55409","Con10967","Mul21257","Res9248","Zer30057","Con42022","Sub73652","Sub7382","Sub16101"],Sub16101,"Sub16101")

Actual (Unparsed): [[[[[0.4544000, -0.0417000, -0.0688000], [-0.5533000, 0.2924000, -1.0261000]], [[-0.0608000, 0.8365000, -1.0036000], [0.6735810, -0.0492000, 0.5752999]]], [[[-0.4324000, -0.7069000, 0.5584000], [-0.0006000, 1.1326000, 0.7774000]], [[0.4253000, -0.0673000, -0.2746000], [0.6862761, 0.2585000, 0.5054000]]]]]

Expected (Unparsed): [[[[[0.4544,-0.04170000000000007,-0.06879999999999997],[-0.5533,0.2924,-1.0261]],[[-0.060800000000000076,0.8365,-1.0036],[0.6735810295683254,-0.04920000000000013,0.5752999999999999]]],[[[-0.4324,-0.7069,0.5584],[-0.0005999999999999894,1.1326,0.7774]],[[0.42529999999999996,-0.06730000000000003,-0.27460000000000007],[0.6862760704316746,0.25850000000000006,0.5054000000000001]]]]]

Actual:   [[[[[0.4544, -0.0417, -0.0688], [-0.5533, 0.2924, -1.0261]], [[-0.0608, 0.8365, -1.0036], [0.6736, -0.0492, 0.5753]]], [[[-0.4324, -0.7069, 0.5584], [-0.0006, 1.1326, 0.7774]], [[0.4253, -0.0673, -0.2746], [0.6863, 0.2585, 0.5054]]]]]

Expected: [[[[[0.4544, -0.0417, -0.0687], [-0.5533, 0.2924, -1.0261]], [[-0.0608, 0.8365, -1.0036], [0.6736, -0.0492, 0.5753]]], [[[-0.4324, -0.7069, 0.5584], [-0.0005, 1.1326, 0.7774]], [[0.4253, -0.0673, -0.2746], [0.6863, 0.2586, 0.5055]]]]]