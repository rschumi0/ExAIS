import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot65248 = tf.keras.layers.Input(shape=([3]))
in1Dot65248 = tf.keras.layers.Input(shape=([3]))
in0Con25800 = tf.keras.layers.Input(shape=([2, 6, 3, 1]))
in0Sub26696 = tf.keras.layers.Input(shape=([2, 3, 2]))
in1Sub26696 = tf.keras.layers.Input(shape=([2, 3, 2]))
in0Con91063 = tf.keras.layers.Input(shape=([2, 6, 3, 1]))
in0Up_14778 = tf.keras.layers.Input(shape=([2, 3, 3, 2]))
in0Max34928 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con96814 = tf.keras.layers.Input(shape=([1, 3, 3]))

Dot65248 = keras.layers.Dot(axes=(1, 1), name = 'Dot65248', )([in0Dot65248,in1Dot65248])
Res87927 = keras.layers.Reshape((1, 1), name = 'Res87927', )(Dot65248)
Res49712 = keras.layers.Reshape((1, 1, 1), name = 'Res49712', )(Res87927)
Res8980 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res8980', )(Res49712)
Zer75472 = keras.layers.ZeroPadding3D(padding=((1, 0), (5, 0), (2, 0)), name = 'Zer75472', )(Res8980)
Con25800 = keras.layers.Concatenate(axis=4, name = 'Con25800', )([Zer75472,in0Con25800])
Sub26696 = keras.layers.Subtract(name = 'Sub26696', )([in0Sub26696,in1Sub26696])
Res29166 = keras.layers.Reshape((2, 3, 2, 1), name = 'Res29166', )(Sub26696)
Zer54165 = keras.layers.ZeroPadding3D(padding=((0, 0), (3, 0), (1, 0)), name = 'Zer54165', )(Res29166)
Con91063 = keras.layers.Concatenate(axis=4, name = 'Con91063', )([Zer54165,in0Con91063])
Up_14778 = keras.layers.UpSampling3D(size=(1, 2, 1), name = 'Up_14778', )(in0Up_14778)
Sof20346 = keras.layers.Softmax(axis=1, name = 'Sof20346', )(Up_14778)
Ave57161 = keras.layers.Average(name = 'Ave57161', )([Con91063,Sof20346])
Ave65464 = keras.layers.Average(name = 'Ave65464', )([Con25800,Ave57161])
Res39831 = keras.layers.Reshape((2, 6, 6), name = 'Res39831', )(Ave65464)
Loc40567 = keras.layers.LocallyConnected2D(4, (1, 4),strides=(2, 1), name = 'Loc40567', )(Res39831)
Max34928 = keras.layers.MaxPool2D(pool_size=(2, 2), strides=(1, 1), padding='valid', name = 'Max34928', )(in0Max34928)
Bat5095 = keras.layers.BatchNormalization(axis=2, epsilon=0.6371309786974868,  name = 'Bat5095', )(Max34928)
Zer3082 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer3082', )(Bat5095)
Con96814 = keras.layers.Concatenate(axis=3, name = 'Con96814', )([Zer3082,in0Con96814])
Sub22677 = keras.layers.Subtract(name = 'Sub22677', )([Loc40567,Con96814])
model = tf.keras.models.Model(inputs=[in0Dot65248,in1Dot65248,in0Con25800,in0Sub26696,in1Sub26696,in0Con91063,in0Up_14778,in0Max34928,in0Con96814], outputs=Sub22677)
w = model.get_layer('Loc40567').get_weights() 
w[0] = np.array([[[0.8228, 0.3731, 0.0598, 0.834], [0.9396, 0.0088, 0.1289, 0.301], [0.1979, 0.0773, 0.87, 0.0127], [0.5646, 0.3983, 0.6804, 0.5451], [0.1883, 0.416, 0.5697, 0.3675], [0.3484, 0.8443, 0.964, 0.2317], [0.447, 0.0559, 0.8613, 0.8217], [0.2304, 0.9877, 0.2661, 0.6627], [0.6719, 0.3591, 0.718, 0.5891], [0.7189, 0.8223, 0.6439, 0.6466], [0.4174, 0.2496, 0.2079, 0.1661], [0.7606, 0.7466, 0.3132, 0.8883], [0.9768, 0.1309, 0.4159, 0.44], [0.8733, 0.5593, 0.8546, 0.1682], [0.2805, 0.7031, 0.4664, 0.3229], [0.606, 0.3729, 0.3666, 0.8456], [0.9984, 0.7779, 0.9009, 0.5704], [0.6454, 0.6659, 0.944, 0.4708], [0.2906, 0.437, 0.9153, 0.6971], [0.1326, 0.948, 0.1111, 0.5427], [0.896, 0.1342, 0.2085, 0.1466], [0.0085, 0.7605, 0.089, 0.6962], [0.5003, 0.5872, 0.45, 0.1296], [0.4538, 0.9836, 0.0246, 0.8532]], [[0.576, 0.5568, 0.6157, 0.7859], [0.7383, 0.6751, 0.5613, 0.1253], [0.1349, 0.8619, 0.7004, 0.5849], [0.0492, 0.9107, 0.3801, 0.5008], [0.084, 0.2277, 0.5576, 0.121], [0.1112, 0.3516, 0.5895, 0.6021], [0.128, 0.8139, 0.8715, 0.717], [0.6678, 0.509, 0.0943, 0.0491], [0.4077, 0.5223, 0.5167, 0.4932], [0.138, 0.9303, 0.3202, 0.2126], [0.3169, 0.4296, 0.8061, 0.8145], [0.0165, 0.7788, 0.9251, 0.3942], [0.1897, 0.9443, 0.3848, 0.2741], [0.8322, 0.5294, 0.3755, 0.7167], [0.7977, 0.535, 0.7707, 0.6248], [0.7335, 0.7536, 0.5155, 0.2614], [0.8508, 0.1271, 0.7974, 0.3173], [0.0139, 0.2158, 0.5096, 0.2352], [0.9413, 0.5173, 0.4636, 0.557], [0.1475, 0.7541, 0.786, 0.2062], [0.6232, 0.4012, 0.9408, 0.0375], [0.1485, 0.6677, 0.8614, 0.6893], [0.5691, 0.8636, 0.7462, 0.7634], [0.3217, 0.5841, 0.1742, 0.6191]], [[0.9938, 0.4283, 0.3319, 0.6196], [0.7212, 0.0283, 0.3063, 0.4952], [0.7889, 0.0151, 0.5965, 0.6006], [0.8825, 0.1672, 0.2224, 0.2338], [0.0576, 0.4019, 0.071, 0.8565], [0.6456, 0.451, 0.4046, 0.012], [0.9914, 0.0389, 0.7852, 0.969], [0.1341, 0.1254, 0.0127, 0.6397], [0.2817, 0.3141, 0.0664, 0.1153], [0.2085, 0.836, 0.4479, 0.2435], [0.5058, 0.6153, 0.7751, 0.0313], [0.958, 0.7987, 0.9495, 0.2988], [0.1792, 0.7889, 0.7326, 0.9333], [0.0493, 0.2582, 0.1033, 0.2944], [0.4167, 0.8415, 0.3423, 0.8098], [0.9973, 0.2067, 0.3902, 0.5654], [0.3926, 0.982, 0.6607, 0.7419], [0.6747, 0.5869, 0.1551, 0.0795], [0.0409, 0.3528, 0.4207, 0.1632], [0.627, 0.4506, 0.6231, 0.2107], [0.6888, 0.0467, 0.7613, 0.2201], [0.0086, 0.7964, 0.8441, 0.7878], [0.5634, 0.2583, 0.6687, 0.6413], [0.2081, 0.058, 0.693, 0.9506]]])
w[1] = np.array([[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]])
model.get_layer('Loc40567').set_weights(w) 
w = model.get_layer('Bat5095').get_weights() 
w[0] = np.array([0.4975])
w[1] = np.array([0.365])
w[2] = np.array([0.6165])
w[3] = np.array([0.4389])
model.get_layer('Bat5095').set_weights(w) 
in0Dot65248 = tf.constant([[0.6994, 0.0809, 0.3771]])
in1Dot65248 = tf.constant([[0.0154, 0.4016, 0.3931]])
in0Con25800 = tf.constant([[[[[0.2685], [0.7285], [0.1701]], [[0.9744], [0.311], [0.7838]], [[0.5398], [0.7253], [0.0757]], [[0.4555], [0.7873], [0.3377]], [[0.3665], [0.0302], [0.3137]], [[0.925], [0.6787], [0.7531]]], [[[0.5259], [0.236], [0.9334]], [[0.9257], [0.8396], [0.5233]], [[0.3329], [0.0938], [0.66]], [[0.9211], [0.6987], [0.902]], [[0.3171], [0.6053], [0.5797]], [[0.5888], [0.3708], [0.5444]]]]])
in0Sub26696 = tf.constant([[[[0.6151, 0.922], [0.4184, 0.2341], [0.3212, 0.2485]], [[0.2236, 0.8487], [0.4617, 0.4029], [0.0031, 0.746]]]])
in1Sub26696 = tf.constant([[[[0.7656, 0.9385], [0.8918, 0.3458], [0.5877, 0.9932]], [[0.2668, 0.3157], [0.785, 0.1598], [0.3567, 0.4273]]]])
in0Con91063 = tf.constant([[[[[0.0482], [0.5095], [0.038]], [[0.3493], [0.0498], [0.0694]], [[0.9574], [0.3522], [0.8665]], [[0.5079], [0.9993], [0.7635]], [[0.4061], [0.1244], [0.7044]], [[0.4744], [0.5707], [0.9947]]], [[[0.6601], [0.8042], [0.0596]], [[0.7145], [0.0573], [0.7359]], [[0.6459], [0.1148], [0.6971]], [[0.2398], [0.5082], [0.2653]], [[0.5231], [0.1854], [0.4743]], [[0.8029], [0.2347], [0.3961]]]]])
in0Up_14778 = tf.constant([[[[[1.761, 1.0463], [1.9418, 1.91], [1.4311, 1.1415]], [[1.8544, 1.0921], [1.3684, 1.1132], [1.3128, 1.5836]], [[1.7968, 1.3352], [1.87, 1.3792], [1.4216, 1.2657]]], [[[1.8974, 1.0348], [1.3042, 1.279], [1.0791, 1.5093]], [[1.1246, 1.6928], [1.3495, 1.3525], [1.2051, 1.0249]], [[1.0696, 1.665], [1.6164, 1.9645], [1.0117, 1.664]]]]])
in0Max34928 = tf.constant([[[[1.5318], [1.1503]], [[1.8935], [1.7435]]]])
in0Con96814 = tf.constant([[[[0.8931, 0.4957, 0.6095], [0.5136, 0.9522, 0.2051], [0.9087, 0.9321, 0.1206]]]])
print (np.array2string(model.predict([in0Dot65248,in1Dot65248,in0Con25800,in0Sub26696,in1Sub26696,in0Con91063,in0Up_14778,in0Max34928,in0Con96814],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub22677.png')

LDot65248 = dot_layer([[0.6994, 0.0809, 0.3771]], [[0.0154, 0.4016, 0.3931]], 1, 1, Dot65248), 
LRes87927 = reshape_layer(Dot65248, [1, 1], Res87927), 
LRes49712 = reshape_layer(Res87927, [1, 1, 1], Res49712), 
LRes8980 = reshape_layer(Res49712, [1, 1, 1, 1], Res8980), 
LZer75472 = zero_padding3D_layer(Res8980, 1, 0, 5, 0, 2, 0, Zer75472), 
LCon25800 = concatenate_layer([Zer75472,[[[[[0.2685], [0.7285], [0.1701]], [[0.9744], [0.311], [0.7838]], [[0.5398], [0.7253], [0.0757]], [[0.4555], [0.7873], [0.3377]], [[0.3665], [0.0302], [0.3137]], [[0.925], [0.6787], [0.7531]]], [[[0.5259], [0.236], [0.9334]], [[0.9257], [0.8396], [0.5233]], [[0.3329], [0.0938], [0.66]], [[0.9211], [0.6987], [0.902]], [[0.3171], [0.6053], [0.5797]], [[0.5888], [0.3708], [0.5444]]]]]], 4, Con25800), 
LSub26696 = subtract_layer([[[[0.6151, 0.922], [0.4184, 0.2341], [0.3212, 0.2485]], [[0.2236, 0.8487], [0.4617, 0.4029], [0.0031, 0.746]]]], [[[[0.7656, 0.9385], [0.8918, 0.3458], [0.5877, 0.9932]], [[0.2668, 0.3157], [0.785, 0.1598], [0.3567, 0.4273]]]], Sub26696), 
LRes29166 = reshape_layer(Sub26696, [2, 3, 2, 1], Res29166), 
LZer54165 = zero_padding3D_layer(Res29166, 0, 0, 3, 0, 1, 0, Zer54165), 
LCon91063 = concatenate_layer([Zer54165,[[[[[0.0482], [0.5095], [0.038]], [[0.3493], [0.0498], [0.0694]], [[0.9574], [0.3522], [0.8665]], [[0.5079], [0.9993], [0.7635]], [[0.4061], [0.1244], [0.7044]], [[0.4744], [0.5707], [0.9947]]], [[[0.6601], [0.8042], [0.0596]], [[0.7145], [0.0573], [0.7359]], [[0.6459], [0.1148], [0.6971]], [[0.2398], [0.5082], [0.2653]], [[0.5231], [0.1854], [0.4743]], [[0.8029], [0.2347], [0.3961]]]]]], 4, Con91063), 
LUp_14778 = up_sampling3D_layer([[[[[1.761, 1.0463], [1.9418, 1.91], [1.4311, 1.1415]], [[1.8544, 1.0921], [1.3684, 1.1132], [1.3128, 1.5836]], [[1.7968, 1.3352], [1.87, 1.3792], [1.4216, 1.2657]]], [[[1.8974, 1.0348], [1.3042, 1.279], [1.0791, 1.5093]], [[1.1246, 1.6928], [1.3495, 1.3525], [1.2051, 1.0249]], [[1.0696, 1.665], [1.6164, 1.9645], [1.0117, 1.664]]]]], 1, 2, 1, Up_14778), 
LSof20346 = softmax_layer(Up_14778, 1, Sof20346), 
LAve57161 = average_layer([Con91063,Sof20346], Ave57161), 
LAve65464 = average_layer([Con25800,Ave57161], Ave65464), 
LRes39831 = reshape_layer(Ave65464, [2, 6, 6], Res39831), 
LLoc40567 = locally_connected2D_layer(Res39831, 1, 4,[[[0.8228, 0.3731, 0.0598, 0.834], [0.9396, 0.0088, 0.1289, 0.301], [0.1979, 0.0773, 0.87, 0.0127], [0.5646, 0.3983, 0.6804, 0.5451], [0.1883, 0.416, 0.5697, 0.3675], [0.3484, 0.8443, 0.964, 0.2317], [0.447, 0.0559, 0.8613, 0.8217], [0.2304, 0.9877, 0.2661, 0.6627], [0.6719, 0.3591, 0.718, 0.5891], [0.7189, 0.8223, 0.6439, 0.6466], [0.4174, 0.2496, 0.2079, 0.1661], [0.7606, 0.7466, 0.3132, 0.8883], [0.9768, 0.1309, 0.4159, 0.44], [0.8733, 0.5593, 0.8546, 0.1682], [0.2805, 0.7031, 0.4664, 0.3229], [0.606, 0.3729, 0.3666, 0.8456], [0.9984, 0.7779, 0.9009, 0.5704], [0.6454, 0.6659, 0.944, 0.4708], [0.2906, 0.437, 0.9153, 0.6971], [0.1326, 0.948, 0.1111, 0.5427], [0.896, 0.1342, 0.2085, 0.1466], [0.0085, 0.7605, 0.089, 0.6962], [0.5003, 0.5872, 0.45, 0.1296], [0.4538, 0.9836, 0.0246, 0.8532]], [[0.576, 0.5568, 0.6157, 0.7859], [0.7383, 0.6751, 0.5613, 0.1253], [0.1349, 0.8619, 0.7004, 0.5849], [0.0492, 0.9107, 0.3801, 0.5008], [0.084, 0.2277, 0.5576, 0.121], [0.1112, 0.3516, 0.5895, 0.6021], [0.128, 0.8139, 0.8715, 0.717], [0.6678, 0.509, 0.0943, 0.0491], [0.4077, 0.5223, 0.5167, 0.4932], [0.138, 0.9303, 0.3202, 0.2126], [0.3169, 0.4296, 0.8061, 0.8145], [0.0165, 0.7788, 0.9251, 0.3942], [0.1897, 0.9443, 0.3848, 0.2741], [0.8322, 0.5294, 0.3755, 0.7167], [0.7977, 0.535, 0.7707, 0.6248], [0.7335, 0.7536, 0.5155, 0.2614], [0.8508, 0.1271, 0.7974, 0.3173], [0.0139, 0.2158, 0.5096, 0.2352], [0.9413, 0.5173, 0.4636, 0.557], [0.1475, 0.7541, 0.786, 0.2062], [0.6232, 0.4012, 0.9408, 0.0375], [0.1485, 0.6677, 0.8614, 0.6893], [0.5691, 0.8636, 0.7462, 0.7634], [0.3217, 0.5841, 0.1742, 0.6191]], [[0.9938, 0.4283, 0.3319, 0.6196], [0.7212, 0.0283, 0.3063, 0.4952], [0.7889, 0.0151, 0.5965, 0.6006], [0.8825, 0.1672, 0.2224, 0.2338], [0.0576, 0.4019, 0.071, 0.8565], [0.6456, 0.451, 0.4046, 0.012], [0.9914, 0.0389, 0.7852, 0.969], [0.1341, 0.1254, 0.0127, 0.6397], [0.2817, 0.3141, 0.0664, 0.1153], [0.2085, 0.836, 0.4479, 0.2435], [0.5058, 0.6153, 0.7751, 0.0313], [0.958, 0.7987, 0.9495, 0.2988], [0.1792, 0.7889, 0.7326, 0.9333], [0.0493, 0.2582, 0.1033, 0.2944], [0.4167, 0.8415, 0.3423, 0.8098], [0.9973, 0.2067, 0.3902, 0.5654], [0.3926, 0.982, 0.6607, 0.7419], [0.6747, 0.5869, 0.1551, 0.0795], [0.0409, 0.3528, 0.4207, 0.1632], [0.627, 0.4506, 0.6231, 0.2107], [0.6888, 0.0467, 0.7613, 0.2201], [0.0086, 0.7964, 0.8441, 0.7878], [0.5634, 0.2583, 0.6687, 0.6413], [0.2081, 0.058, 0.693, 0.9506]]],[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]], 2, 1, Loc40567), 
LMax34928 = max_pool2D_layer([[[[1.5318], [1.1503]], [[1.8935], [1.7435]]]], 2, 2, 1, 1, false, Max34928), 
LBat5095 = batch_normalization_layer(Max34928, 2, 0.6371309786974868, [0.4975], [0.365], [0.6165], [0.4389], Bat5095), 
LZer3082 = zero_padding2D_layer(Bat5095, 0, 0, 2, 0, Zer3082), 
LCon96814 = concatenate_layer([Zer3082,[[[[0.8931, 0.4957, 0.6095], [0.5136, 0.9522, 0.2051], [0.9087, 0.9321, 0.1206]]]]], 3, Con96814), 
LSub22677 = subtract_layer(Loc40567,Con96814, Sub22677), 
exec_layers([LDot65248,LRes87927,LRes49712,LRes8980,LZer75472,LCon25800,LSub26696,LRes29166,LZer54165,LCon91063,LUp_14778,LSof20346,LAve57161,LAve65464,LRes39831,LLoc40567,LMax34928,LBat5095,LZer3082,LCon96814,LSub22677],["Dot65248","Res87927","Res49712","Res8980","Zer75472","Con25800","Sub26696","Res29166","Zer54165","Con91063","Up_14778","Sof20346","Ave57161","Ave65464","Res39831","Loc40567","Max34928","Bat5095","Zer3082","Con96814","Sub22677"],Sub22677,"Sub22677")

Actual (Unparsed): [[[[3.8146635, 3.7973462, 2.9294045, 3.6915639], [2.8891536, 4.0641809, 2.8163117, 2.5724296], [2.6186095, 2.2430803, 2.6447763, 3.2016188]]]]

Expected (Unparsed): [[[[3.8146634565239768,3.79734617638696,2.929404504007314,3.691563891740438],[2.8891535687641796,4.06418092396014,2.816311706803037,2.5724296239965954],[2.618609483055091,2.243080275483687,2.6447762739753378,3.2016188615667063]]]]

Actual:   [[[[3.8147, 3.7974, 2.9295, 3.6916], [2.8892, 4.0642, 2.8164, 2.5725], [2.6187, 2.2431, 2.6448, 3.2017]]]]

Expected: [[[[3.8147, 3.7974, 2.9295, 3.6916], [2.8892, 4.0642, 2.8164, 2.5725], [2.6187, 2.2431, 2.6448, 3.2017]]]]