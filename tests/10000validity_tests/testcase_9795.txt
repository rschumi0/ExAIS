import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min68364 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Min68364 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))

Min68364 = keras.layers.Minimum(name = 'Min68364', )([in0Min68364,in1Min68364])
Sof55041 = keras.layers.Softmax(axis=1, name = 'Sof55041', )(Min68364)
model = tf.keras.models.Model(inputs=[in0Min68364,in1Min68364], outputs=Sof55041)
in0Min68364 = tf.constant([[[[[0.0303, 0.0551], [0.04, 0.9461]], [[0.8318, 0.0731], [0.3554, 0.2576]]], [[[0.4796, 0.2885], [0.8133, 0.5112]], [[0.6794, 0.9592], [0.598, 0.1959]]]]])
in1Min68364 = tf.constant([[[[[0.8194, 0.0661], [0.2741, 0.4885]], [[0.588, 0.9382], [0.9191, 0.752]]], [[[0.5244, 0.1912], [0.4347, 0.8511]], [[0.0291, 0.5168], [0.8431, 0.6252]]]]])
print (np.array2string(model.predict([in0Min68364,in1Min68364],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sof55041.png')

LMin68364 = minimum_layer([[[[[[0.0303, 0.0551], [0.04, 0.9461]], [[0.8318, 0.0731], [0.3554, 0.2576]]], [[[0.4796, 0.2885], [0.8133, 0.5112]], [[0.6794, 0.9592], [0.598, 0.1959]]]]], [[[[[0.8194, 0.0661], [0.2741, 0.4885]], [[0.588, 0.9382], [0.9191, 0.752]]], [[[0.5244, 0.1912], [0.4347, 0.8511]], [[0.0291, 0.5168], [0.8431, 0.6252]]]]]], Min68364), 
LSof55041 = softmax_layer(Min68364, 1, Sof55041), 
exec_layers([LMin68364,LSof55041],["Min68364","Sof55041"],Sof55041,"Sof55041")

Actual (Unparsed): [[[[[0.3895272, 0.4660274], [0.4025864, 0.4943252]], [[0.6361980, 0.3908597], [0.4396457, 0.5154201]]], [[[0.6104728, 0.5339726], [0.5974136, 0.5056748]], [[0.3638020, 0.6091403], [0.5603543, 0.4845799]]]]]

Expected (Unparsed): [[[[[0.38952721020659703,0.4660274239145772],[0.4025863852401918,0.49432524367667274]],[[0.6361979833241206,0.390859687329402],[0.43964572142667335,0.5154201084223072]]],[[[0.6104727897934029,0.5339725760854228],[0.5974136147598084,0.5056747563233273]],[[0.3638020166758794,0.609140312670598],[0.5603542785733266,0.4845798915776928]]]]]

Actual:   [[[[[0.3896, 0.4661], [0.4026, 0.4944]], [[0.6362, 0.3909], [0.4397, 0.5155]]], [[[0.6105, 0.534], [0.5975, 0.5057]], [[0.3639, 0.6092], [0.5604, 0.4846]]]]]

Expected: [[[[[0.3896, 0.4661], [0.4026, 0.4944]], [[0.6362, 0.3909], [0.4397, 0.5155]]], [[[0.6105, 0.534], [0.5975, 0.5057]], [[0.3639, 0.6092], [0.5604, 0.4846]]]]]