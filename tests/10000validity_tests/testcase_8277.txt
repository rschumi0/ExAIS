import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0PRe92407 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Mas20735 = tf.keras.layers.Input(shape=([1, 1, 3]))
in0Con87307 = tf.keras.layers.Input(shape=([1, 1, 3, 1]))
in0Mul28601 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in1Mul28601 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))

PRe92407 = keras.layers.PReLU(name = 'PRe92407', input_shape=(2, 2, 1, 2))(in0PRe92407)
Lay83590 = keras.layers.LayerNormalization(axis=1, epsilon=2.7471666106555537, name = 'Lay83590', )(PRe92407)
Zer75473 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (4, 0)), name = 'Zer75473', )(Lay83590)
Mas20735 = keras.layers.Masking(mask_value=2, name = 'Mas20735', )(in0Mas20735)
Res35007 = keras.layers.Reshape((1, 1, 3, 1), name = 'Res35007', )(Mas20735)
Con87307 = keras.layers.Concatenate(axis=4, name = 'Con87307', )([Res35007,in0Con87307])
Mul28601 = keras.layers.Multiply(name = 'Mul28601', )([in0Mul28601,in1Mul28601])
Zer61092 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer61092', )(Mul28601)
Min30250 = keras.layers.Minimum(name = 'Min30250', )([Con87307,Zer61092])
Zer35802 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (2, 0)), name = 'Zer35802', )(Min30250)
Min52946 = keras.layers.Minimum(name = 'Min52946', )([Zer75473,Zer35802])
Zer48310 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer48310', )(Min52946)
model = tf.keras.models.Model(inputs=[in0PRe92407,in0Mas20735,in0Con87307,in0Mul28601,in1Mul28601], outputs=Zer48310)
w = model.get_layer('PRe92407').get_weights() 
w[0] = np.array([[[[0.0329, 0.7046]], [[0.3141, 0.1581]]], [[[0.3223, 0.5411]], [[0.3599, 0.089]]]])
model.get_layer('PRe92407').set_weights(w) 
in0PRe92407 = tf.constant([[[[[0.5222, 0.2139]], [[0.0054, 0.8264]]], [[[0.8498, 0.5929]], [[0.8499, 0.6034]]]]])
in0Mas20735 = tf.constant([[[[1.8763, 1.7088, 1.2464]]]])
in0Con87307 = tf.constant([[[[[0.6387], [0.8213], [0.1704]]]]])
in0Mul28601 = tf.constant([[[[[0.3968, 0.8802]]]]])
in1Mul28601 = tf.constant([[[[[0.6973, 0.4662]]]]])
print (np.array2string(model.predict([in0PRe92407,in0Mas20735,in0Con87307,in0Mul28601,in1Mul28601],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Zer48310.png')

LPRe92407 = prelu_layer([[[[[0.5222, 0.2139]], [[0.0054, 0.8264]]], [[[0.8498, 0.5929]], [[0.8499, 0.6034]]]]], [[[[0.0329, 0.7046]], [[0.3141, 0.1581]]], [[[0.3223, 0.5411]], [[0.3599, 0.089]]]], PRe92407), 
LLay83590 = layer_normalization_layer(PRe92407, 1, 2.7471666106555537, Lay83590), 
LZer75473 = zero_padding3D_layer(Lay83590, 0, 0, 0, 0, 4, 0, Zer75473), 
LMas20735 = masking_layer([[[[1.8763, 1.7088, 1.2464]]]], 2, Mas20735), 
LRes35007 = reshape_layer(Mas20735, [1, 1, 3, 1], Res35007), 
LCon87307 = concatenate_layer([Res35007,[[[[[0.6387], [0.8213], [0.1704]]]]]], 4, Con87307), 
LMul28601 = multiply_layer([[[[[[0.3968, 0.8802]]]]], [[[[[0.6973, 0.4662]]]]]], Mul28601), 
LZer61092 = zero_padding3D_layer(Mul28601, 0, 0, 0, 0, 2, 0, Zer61092), 
LMin30250 = minimum_layer([Con87307,Zer61092], Min30250), 
LZer35802 = zero_padding3D_layer(Min30250, 1, 0, 1, 0, 2, 0, Zer35802), 
LMin52946 = minimum_layer([Zer75473,Zer35802], Min52946), 
LZer48310 = zero_padding3D_layer(Min52946, 1, 1, 1, 1, 1, 1, Zer48310), 
exec_layers([LPRe92407,LLay83590,LZer75473,LMas20735,LRes35007,LCon87307,LMul28601,LZer61092,LMin30250,LZer35802,LMin52946,LZer48310],["PRe92407","Lay83590","Zer75473","Mas20735","Res35007","Con87307","Mul28601","Zer61092","Min30250","Zer35802","Min52946","Zer48310"],Zer48310,"Zer48310")

Actual (Unparsed): [[[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0983470, -0.1135917], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.2468724, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.2468724, -0.0671200], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]]]]

Expected (Unparsed): [[[[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]],[[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0],[0,0],[-0.09834695092609903,-0.11359170389013153],[0,0]],[[0,0],[0,0],[0,0],[0,0],[0,0],[-0.24687235041098907,0],[0,0]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]],[[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0.2468723504109891,-0.0671199908937802],[0,0]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]],[[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]]]]

Actual:   [[[[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [-0.0983, -0.1135], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [-0.2468, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0.2469, -0.0671], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]]]]

Expected: [[[[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [-0.0983, -0.1135], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [-0.2468, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0.2469, -0.0671], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]]]]