import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max8450 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))
in1Max8450 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))
in0Con82105 = tf.keras.layers.Input(shape=([2, 2, 5, 1]))
in0Ave97112 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in1Ave97112 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Mul98950 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in1Mul98950 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in0Min82414 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in1Min82414 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in0Con86968 = tf.keras.layers.Input(shape=([2, 19]))

Max8450 = keras.layers.Maximum(name = 'Max8450', )([in0Max8450,in1Max8450])
Res20956 = keras.layers.Reshape((1, 1, 1), name = 'Res20956', )(Max8450)
Loc24397 = keras.layers.LocallyConnected2D(3, (1, 1),strides=(1, 1), name = 'Loc24397', )(Res20956)
Res48259 = keras.layers.Reshape((1, 1, 3, 1), name = 'Res48259', )(Loc24397)
Zer72035 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (2, 0)), name = 'Zer72035', )(Res48259)
Con82105 = keras.layers.Concatenate(axis=4, name = 'Con82105', )([Zer72035,in0Con82105])
Ave97112 = keras.layers.Average(name = 'Ave97112', )([in0Ave97112,in1Ave97112])
Zer52677 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (4, 0)), name = 'Zer52677', )(Ave97112)
Ave49167 = keras.layers.Average(name = 'Ave49167', )([Con82105,Zer52677])
Res89507 = keras.layers.Reshape((2, 2, 10), name = 'Res89507', )(Ave49167)
Res31472 = keras.layers.Reshape((2, 20), name = 'Res31472', )(Res89507)
Mul98950 = keras.layers.Multiply(name = 'Mul98950', )([in0Mul98950,in1Mul98950])
Res71414 = keras.layers.Reshape((2, 1, 4), name = 'Res71414', )(Mul98950)
Res28209 = keras.layers.Reshape((2, 4), name = 'Res28209', )(Res71414)
Min82414 = keras.layers.Minimum(name = 'Min82414', )([in0Min82414,in1Min82414])
Res36753 = keras.layers.Reshape((1, 2, 2), name = 'Res36753', )(Min82414)
Res67604 = keras.layers.Reshape((1, 4), name = 'Res67604', )(Res36753)
Dot36261 = keras.layers.Dot(axes=(2, 2), name = 'Dot36261', )([Res28209,Res67604])
Con86968 = keras.layers.Concatenate(axis=2, name = 'Con86968', )([Dot36261,in0Con86968])
Ave91298 = keras.layers.Average(name = 'Ave91298', )([Res31472,Con86968])
model = tf.keras.models.Model(inputs=[in0Max8450,in1Max8450,in0Con82105,in0Ave97112,in1Ave97112,in0Mul98950,in1Mul98950,in0Min82414,in1Min82414,in0Con86968], outputs=Ave91298)
w = model.get_layer('Loc24397').get_weights() 
w[0] = np.array([[[0.1036, 0.0933, 0.0534]]])
w[1] = np.array([[[0, 0, 0]]])
model.get_layer('Loc24397').set_weights(w) 
in0Max8450 = tf.constant([[[[[0.7105]]]]])
in1Max8450 = tf.constant([[[[[0.7023]]]]])
in0Con82105 = tf.constant([[[[[0.5922], [0.7392], [0.4167], [0.2472], [0.112]], [[0.4793], [0.9633], [0.6309], [0.8567], [0.4686]]], [[[0.4537], [0.7549], [0.0065], [0.4893], [0.5345]], [[0.2008], [0.4627], [0.455], [0.7541], [0.8756]]]]])
in0Ave97112 = tf.constant([[[[[0.856, 0.9421]], [[0.0716, 0.6349]]], [[[0.9411, 0.3836]], [[0.5477, 0.1587]]]]])
in1Ave97112 = tf.constant([[[[[0.9146, 0.3298]], [[0.328, 0.3404]]], [[[0.7558, 0.334]], [[0.934, 0.6374]]]]])
in0Mul98950 = tf.constant([[[[[0.6944, 0.6843], [0.4242, 0.2803]]], [[[0.4397, 0.3239], [0.6042, 0.4362]]]]])
in1Mul98950 = tf.constant([[[[[0.8794, 0.8183], [0.1744, 0.937]]], [[[0.8928, 0.8969], [0.8952, 0.1342]]]]])
in0Min82414 = tf.constant([[[[[0.1445], [0.0784]], [[0.4006], [0.8762]]]]])
in1Min82414 = tf.constant([[[[[0.8552], [0.0271]], [[0.248], [0.6958]]]]])
in0Con86968 = tf.constant([[[0.7873, 0.1781, 0.2335, 0.4299, 0.921, 0.1302, 0.1008, 0.425, 0.1144, 0.5548, 0.8529, 0.2025, 0.3152, 0.6614, 0.0944, 0.5064, 0.2809, 0.2603, 0.2382], [0.3621, 0.8176, 0.5419, 0.7357, 0.6418, 0.2873, 0.6339, 0.1248, 0.3817, 0.1455, 0.8641, 0.3144, 0.6028, 0.5669, 0.8435, 0.4095, 0.2752, 0.9292, 0.3232]]])
print (np.array2string(model.predict([in0Max8450,in1Max8450,in0Con82105,in0Ave97112,in1Ave97112,in0Mul98950,in1Mul98950,in0Min82414,in1Min82414,in0Con86968],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave91298.png')

LMax8450 = maximum_layer([[[[[[0.7105]]]]], [[[[[0.7023]]]]]], Max8450), 
LRes20956 = reshape_layer(Max8450, [1, 1, 1], Res20956), 
LLoc24397 = locally_connected2D_layer(Res20956, 1, 1,[[[0.1036, 0.0933, 0.0534]]],[[[0, 0, 0]]], 1, 1, Loc24397), 
LRes48259 = reshape_layer(Loc24397, [1, 1, 3, 1], Res48259), 
LZer72035 = zero_padding3D_layer(Res48259, 1, 0, 1, 0, 2, 0, Zer72035), 
LCon82105 = concatenate_layer([Zer72035,[[[[[0.5922], [0.7392], [0.4167], [0.2472], [0.112]], [[0.4793], [0.9633], [0.6309], [0.8567], [0.4686]]], [[[0.4537], [0.7549], [0.0065], [0.4893], [0.5345]], [[0.2008], [0.4627], [0.455], [0.7541], [0.8756]]]]]], 4, Con82105), 
LAve97112 = average_layer([[[[[[0.856, 0.9421]], [[0.0716, 0.6349]]], [[[0.9411, 0.3836]], [[0.5477, 0.1587]]]]], [[[[[0.9146, 0.3298]], [[0.328, 0.3404]]], [[[0.7558, 0.334]], [[0.934, 0.6374]]]]]], Ave97112), 
LZer52677 = zero_padding3D_layer(Ave97112, 0, 0, 0, 0, 4, 0, Zer52677), 
LAve49167 = average_layer([Con82105,Zer52677], Ave49167), 
LRes89507 = reshape_layer(Ave49167, [2, 2, 10], Res89507), 
LRes31472 = reshape_layer(Res89507, [2, 20], Res31472), 
LMul98950 = multiply_layer([[[[[[0.6944, 0.6843], [0.4242, 0.2803]]], [[[0.4397, 0.3239], [0.6042, 0.4362]]]]], [[[[[0.8794, 0.8183], [0.1744, 0.937]]], [[[0.8928, 0.8969], [0.8952, 0.1342]]]]]], Mul98950), 
LRes71414 = reshape_layer(Mul98950, [2, 1, 4], Res71414), 
LRes28209 = reshape_layer(Res71414, [2, 4], Res28209), 
LMin82414 = minimum_layer([[[[[[0.1445], [0.0784]], [[0.4006], [0.8762]]]]], [[[[[0.8552], [0.0271]], [[0.248], [0.6958]]]]]], Min82414), 
LRes36753 = reshape_layer(Min82414, [1, 2, 2], Res36753), 
LRes67604 = reshape_layer(Res36753, [1, 4], Res67604), 
LDot36261 = dot_layer(Res28209,Res67604, 2, 2, Dot36261), 
LCon86968 = concatenate_layer([Dot36261,[[[0.7873, 0.1781, 0.2335, 0.4299, 0.921, 0.1302, 0.1008, 0.425, 0.1144, 0.5548, 0.8529, 0.2025, 0.3152, 0.6614, 0.0944, 0.5064, 0.2809, 0.2603, 0.2382], [0.3621, 0.8176, 0.5419, 0.7357, 0.6418, 0.2873, 0.6339, 0.1248, 0.3817, 0.1455, 0.8641, 0.3144, 0.6028, 0.5669, 0.8435, 0.4095, 0.2752, 0.9292, 0.3232]]]], 2, Con86968), 
LAve91298 = average_layer([Res31472,Con86968], Ave91298), 
exec_layers([LMax8450,LRes20956,LLoc24397,LRes48259,LZer72035,LCon82105,LAve97112,LZer52677,LAve49167,LRes89507,LRes31472,LMul98950,LRes71414,LRes28209,LMin82414,LRes36753,LRes67604,LDot36261,LCon86968,LAve91298],["Max8450","Res20956","Loc24397","Res48259","Zer72035","Con82105","Ave97112","Zer52677","Ave49167","Res89507","Res31472","Mul98950","Res71414","Res28209","Min82414","Res36753","Res67604","Dot36261","Con86968","Ave91298"],Ave91298,"Ave91298")

Actual (Unparsed): [[[0.1522538, 0.5417000, 0.0890500, 0.3015500, 0.2149500, 0.5646750, 0.0651000, 0.1122000, 0.4338250, 0.2441875, 0.2774000, 0.5462750, 0.1012500, 0.3984250, 0.3307000, 0.2049250, 0.2532000, 0.3546250, 0.1801000, 0.3581625], [0.1197336, 0.2944750, 0.4088000, 0.4596750, 0.3678500, 0.3225250, 0.1436500, 0.4392750, 0.2745125, 0.4141750, 0.0727500, 0.4822500, 0.1572000, 0.4170750, 0.3018520, 0.5355000, 0.2213224, 0.3261250, 0.6592977, 0.4800125]]]

Expected (Unparsed): [[[0.1522537624195,0.5417,0.08905,0.30155,0.21495,0.564675,0.0651,0.1122,0.433825,0.2441875,0.2774,0.546275,0.10125,0.39842500000000003,0.3307,0.204925,0.2532,0.35462499999999997,0.18009999999999998,0.3581625],[0.11973359991650001,0.294475,0.4088,0.45967500000000006,0.36785,0.322525,0.14365,0.439275,0.2745125,0.41417499999999996,0.07275,0.48225,0.1572,0.417075,0.30185195,0.5355,0.22132241249999998,0.326125,0.659297675,0.48001249999999995]]]

Actual:   [[[0.1523, 0.5417, 0.0891, 0.3016, 0.215, 0.5647, 0.0651, 0.1122, 0.4339, 0.2442, 0.2774, 0.5463, 0.1013, 0.3985, 0.3307, 0.205, 0.2532, 0.3547, 0.1801, 0.3582], [0.1198, 0.2945, 0.4088, 0.4597, 0.3679, 0.3226, 0.1437, 0.4393, 0.2746, 0.4142, 0.0728, 0.4823, 0.1572, 0.4171, 0.3019, 0.5355, 0.2214, 0.3262, 0.6593, 0.4801]]]

Expected: [[[0.1523, 0.5417, 0.0891, 0.3016, 0.215, 0.5647, 0.0651, 0.1122, 0.4339, 0.2442, 0.2774, 0.5463, 0.1013, 0.3985, 0.3307, 0.205, 0.2532, 0.3547, 0.1801, 0.3582], [0.1198, 0.2945, 0.4088, 0.4597, 0.3679, 0.3226, 0.1437, 0.4393, 0.2746, 0.4142, 0.0728, 0.4823, 0.1572, 0.4171, 0.3019, 0.5355, 0.2214, 0.3262, 0.6593, 0.4801]]]