import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave85183 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in1Ave85183 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Up_13315 = tf.keras.layers.Input(shape=([1, 3, 4]))
in0Dot52045 = tf.keras.layers.Input(shape=([3, 3]))
in1Dot52045 = tf.keras.layers.Input(shape=([3, 3]))
in0Con43058 = tf.keras.layers.Input(shape=([3, 21]))
in0Con92427 = tf.keras.layers.Input(shape=([3, 24, 1]))
in0Max7420 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Max7420 = tf.keras.layers.Input(shape=([2, 1, 2]))

Ave85183 = keras.layers.Average(name = 'Ave85183', )([in0Ave85183,in1Ave85183])
Res69905 = keras.layers.Reshape((2, 2, 2), name = 'Res69905', )(Ave85183)
Zer90081 = keras.layers.ZeroPadding2D(padding=((1, 0), (22, 0)), name = 'Zer90081', )(Res69905)
Up_13315 = keras.layers.UpSampling2D(size=(1, 2), name = 'Up_13315', )(in0Up_13315)
Res84979 = keras.layers.Reshape((1, 24), name = 'Res84979', )(Up_13315)
Zer15638 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer15638', )(Res84979)
Dot52045 = keras.layers.Dot(axes=(1, 1), name = 'Dot52045', )([in0Dot52045,in1Dot52045])
Con43058 = keras.layers.Concatenate(axis=2, name = 'Con43058', )([Dot52045,in0Con43058])
Add93866 = keras.layers.Add(name = 'Add93866', )([Zer15638,Con43058])
Res43183 = keras.layers.Reshape((3, 24, 1), name = 'Res43183', )(Add93866)
Con92427 = keras.layers.Concatenate(axis=3, name = 'Con92427', )([Res43183,in0Con92427])
Max7420 = keras.layers.Maximum(name = 'Max7420', )([in0Max7420,in1Max7420])
Zer58335 = keras.layers.ZeroPadding2D(padding=((1, 0), (23, 0)), name = 'Zer58335', )(Max7420)
Add13967 = keras.layers.Add(name = 'Add13967', )([Con92427,Zer58335])
Min27076 = keras.layers.Minimum(name = 'Min27076', )([Zer90081,Add13967])
model = tf.keras.models.Model(inputs=[in0Ave85183,in1Ave85183,in0Up_13315,in0Dot52045,in1Dot52045,in0Con43058,in0Con92427,in0Max7420,in1Max7420], outputs=Min27076)
in0Ave85183 = tf.constant([[[[[0.5784, 0.8618]], [[0.829, 0.4177]]], [[[0.5709, 0.6107]], [[0.1028, 0.8384]]]]])
in1Ave85183 = tf.constant([[[[[0.825, 0.4978]], [[0.1293, 0.9608]]], [[[0.1332, 0.0013]], [[0.6821, 0.038]]]]])
in0Up_13315 = tf.constant([[[[1.524, 1.5074, 1.7602, 1.1654], [1.3902, 1.2086, 1.4594, 1.1835], [1.3032, 1.5762, 1.1561, 1.3999]]]])
in0Dot52045 = tf.constant([[[0.8151, 0.6732, 0.6255], [0.3291, 0.1993, 0.2628], [0.5077, 0.1062, 0.2618]]])
in1Dot52045 = tf.constant([[[0.1351, 0.3542, 0.9619], [0.0671, 0.3276, 0.3432], [0.1668, 0.6649, 0.9487]]])
in0Con43058 = tf.constant([[[0.1498, 0.1023, 0.3142, 0.8898, 0.2714, 0.3567, 0.2262, 0.6716, 0.2348, 0.9962, 0.8456, 0.4955, 0.6886, 0.9724, 0.9678, 0.5662, 0.0326, 0.3294, 0.1186, 0.2404, 0.1103], [0.7021, 0.9248, 0.8167, 0.293, 0.6225, 0.2392, 0.0655, 0.156, 0.1858, 0.7382, 0.9035, 0.1829, 0.8452, 0.4669, 0.9726, 0.4525, 0.8402, 0.3346, 0.2637, 0.0566, 0.0458], [0.8781, 0.3435, 0.0808, 0.8279, 0.7055, 0.188, 0.3375, 0.8329, 0.9092, 0.103, 0.6828, 0.5054, 0.3933, 0.7215, 0.6722, 0.5255, 0.4991, 0.6082, 0.5143, 0.2922, 0.5337]]])
in0Con92427 = tf.constant([[[[0.9462], [0.2785], [0.2856], [0.0452], [0.3087], [0.0048], [0.2331], [0.0271], [0.0919], [0.2933], [0.6294], [0.4987], [0.9104], [0.8633], [0.5685], [0.7913], [0.4939], [0.9775], [0.3127], [0.097], [0.0798], [0.9107], [0.1026], [0.8279]], [[0.9723], [0.3266], [0.5235], [0.4514], [0.2141], [0.1796], [0.0385], [0.2419], [0.6192], [0.9415], [0.1749], [0.274], [0.1221], [0.7964], [0.6411], [0.0299], [0.5137], [0.9407], [0.3394], [0.1909], [0.1554], [0.2827], [0.841], [0.5396]], [[0.1881], [0.641], [0.3945], [0.4153], [0.0861], [0.0109], [0.9489], [0.829], [0.1478], [0.5886], [0.9908], [0.1739], [0.6558], [0.0191], [0.2191], [0.4463], [0.995], [0.7729], [0.208], [0.0312], [0.9737], [0.6432], [0.2505], [0.3983]]]])
in0Max7420 = tf.constant([[[[0.6317, 0.1466]], [[0.6802, 0.1213]]]])
in1Max7420 = tf.constant([[[[0.2322, 0.0537]], [[0.9326, 0.1651]]]])
print (np.array2string(model.predict([in0Ave85183,in1Ave85183,in0Up_13315,in0Dot52045,in1Dot52045,in0Con43058,in0Con92427,in0Max7420,in1Max7420],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min27076.png')

LAve85183 = average_layer([[[[[[0.5784, 0.8618]], [[0.829, 0.4177]]], [[[0.5709, 0.6107]], [[0.1028, 0.8384]]]]], [[[[[0.825, 0.4978]], [[0.1293, 0.9608]]], [[[0.1332, 0.0013]], [[0.6821, 0.038]]]]]], Ave85183), 
LRes69905 = reshape_layer(Ave85183, [2, 2, 2], Res69905), 
LZer90081 = zero_padding2D_layer(Res69905, 1, 0, 22, 0, Zer90081), 
LUp_13315 = up_sampling2D_layer([[[[1.524, 1.5074, 1.7602, 1.1654], [1.3902, 1.2086, 1.4594, 1.1835], [1.3032, 1.5762, 1.1561, 1.3999]]]], 1, 2, Up_13315), 
LRes84979 = reshape_layer(Up_13315, [1, 24], Res84979), 
LZer15638 = zero_padding1D_layer(Res84979, 2, 0, Zer15638), 
LDot52045 = dot_layer([[[0.8151, 0.6732, 0.6255], [0.3291, 0.1993, 0.2628], [0.5077, 0.1062, 0.2618]]], [[[0.1351, 0.3542, 0.9619], [0.0671, 0.3276, 0.3432], [0.1668, 0.6649, 0.9487]]], 1, 1, Dot52045), 
LCon43058 = concatenate_layer([Dot52045,[[[0.1498, 0.1023, 0.3142, 0.8898, 0.2714, 0.3567, 0.2262, 0.6716, 0.2348, 0.9962, 0.8456, 0.4955, 0.6886, 0.9724, 0.9678, 0.5662, 0.0326, 0.3294, 0.1186, 0.2404, 0.1103], [0.7021, 0.9248, 0.8167, 0.293, 0.6225, 0.2392, 0.0655, 0.156, 0.1858, 0.7382, 0.9035, 0.1829, 0.8452, 0.4669, 0.9726, 0.4525, 0.8402, 0.3346, 0.2637, 0.0566, 0.0458], [0.8781, 0.3435, 0.0808, 0.8279, 0.7055, 0.188, 0.3375, 0.8329, 0.9092, 0.103, 0.6828, 0.5054, 0.3933, 0.7215, 0.6722, 0.5255, 0.4991, 0.6082, 0.5143, 0.2922, 0.5337]]]], 2, Con43058), 
LAdd93866 = add_layer([Zer15638,Con43058], Add93866), 
LRes43183 = reshape_layer(Add93866, [3, 24, 1], Res43183), 
LCon92427 = concatenate_layer([Res43183,[[[[0.9462], [0.2785], [0.2856], [0.0452], [0.3087], [0.0048], [0.2331], [0.0271], [0.0919], [0.2933], [0.6294], [0.4987], [0.9104], [0.8633], [0.5685], [0.7913], [0.4939], [0.9775], [0.3127], [0.097], [0.0798], [0.9107], [0.1026], [0.8279]], [[0.9723], [0.3266], [0.5235], [0.4514], [0.2141], [0.1796], [0.0385], [0.2419], [0.6192], [0.9415], [0.1749], [0.274], [0.1221], [0.7964], [0.6411], [0.0299], [0.5137], [0.9407], [0.3394], [0.1909], [0.1554], [0.2827], [0.841], [0.5396]], [[0.1881], [0.641], [0.3945], [0.4153], [0.0861], [0.0109], [0.9489], [0.829], [0.1478], [0.5886], [0.9908], [0.1739], [0.6558], [0.0191], [0.2191], [0.4463], [0.995], [0.7729], [0.208], [0.0312], [0.9737], [0.6432], [0.2505], [0.3983]]]]], 3, Con92427), 
LMax7420 = maximum_layer([[[[[0.6317, 0.1466]], [[0.6802, 0.1213]]]], [[[[0.2322, 0.0537]], [[0.9326, 0.1651]]]]], Max7420), 
LZer58335 = zero_padding2D_layer(Max7420, 1, 0, 23, 0, Zer58335), 
LAdd13967 = add_layer([Con92427,Zer58335], Add13967), 
LMin27076 = minimum_layer([Zer90081,Add13967], Min27076), 
exec_layers([LAve85183,LRes69905,LZer90081,LUp_13315,LRes84979,LZer15638,LDot52045,LCon43058,LAdd93866,LRes43183,LCon92427,LMax7420,LZer58335,LAdd13967,LMin27076],["Ave85183","Res69905","Zer90081","Up_13315","Res84979","Zer15638","Dot52045","Con43058","Add93866","Res43183","Con92427","Max7420","Zer58335","Add13967","Min27076"],Min27076,"Min27076")

Actual (Unparsed): [[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0566000, 0.6798000], [0.4791500, 0.6862000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.3520500, 0.2505000], [0.3924500, 0.4382000]]]]

Expected (Unparsed): [[[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0.0566,0.6798],[0.47914999999999996,0.6861999999999999]],[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0.35205,0.2505],[0.39245,0.43820000000000003]]]]

Actual:   [[[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0.0566, 0.6798], [0.4792, 0.6862]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0.3521, 0.2505], [0.3925, 0.4382]]]]

Expected: [[[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0.0566, 0.6798], [0.4792, 0.6862]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0.3521, 0.2505], [0.3925, 0.4383]]]]