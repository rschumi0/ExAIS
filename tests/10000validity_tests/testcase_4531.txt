import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul52146 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in1Mul52146 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in0Sub54860 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in1Sub54860 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in0Cro23425 = tf.keras.layers.Input(shape=([1, 3]))
in0Con38114 = tf.keras.layers.Input(shape=([2, 24]))

Mul52146 = keras.layers.Multiply(name = 'Mul52146', )([in0Mul52146,in1Mul52146])
Res39780 = keras.layers.Reshape((2, 1, 2), name = 'Res39780', )(Mul52146)
Res92774 = keras.layers.Reshape((2, 2), name = 'Res92774', )(Res39780)
Zer30875 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer30875', )(Res92774)
Sub54860 = keras.layers.Subtract(name = 'Sub54860', )([in0Sub54860,in1Sub54860])
Res93235 = keras.layers.Reshape((3, 3, 9), name = 'Res93235', )(Sub54860)
Res55007 = keras.layers.Reshape((3, 27), name = 'Res55007', )(Res93235)
Dot38272 = keras.layers.Dot(axes=(1, 1), name = 'Dot38272', )([Zer30875,Res55007])
Cro23425 = keras.layers.Cropping1D(cropping=((0, 0)), name = 'Cro23425', )(in0Cro23425)
Zer57131 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer57131', )(Cro23425)
Con38114 = keras.layers.Concatenate(axis=2, name = 'Con38114', )([Zer57131,in0Con38114])
Add87496 = keras.layers.Add(name = 'Add87496', )([Dot38272,Con38114])
model = tf.keras.models.Model(inputs=[in0Mul52146,in1Mul52146,in0Sub54860,in1Sub54860,in0Cro23425,in0Con38114], outputs=Add87496)
in0Mul52146 = tf.constant([[[[[0.6833], [0.1703]]], [[[0.8546], [0.9532]]]]])
in1Mul52146 = tf.constant([[[[[0.6486], [0.4138]]], [[[0.9966], [0.0584]]]]])
in0Sub54860 = tf.constant([[[[[0.1049, 0.5878, 0.8351], [0.9412, 0.5907, 0.3135], [0.8541, 0.5423, 0.276]], [[0.9487, 0.0604, 0.5115], [0.4898, 0.6604, 0.9737], [0.6095, 0.3143, 0.9261]], [[0.7937, 0.455, 0.6939], [0.1355, 0.4466, 0.0451], [0.426, 0.9518, 0.5817]]], [[[0.0429, 0.4756, 0.4878], [0.6194, 0.3014, 0.2869], [0.1556, 0.6365, 0.4698]], [[0.1538, 0.2539, 0.2144], [0.8193, 0.2535, 0.9729], [0.3726, 0.612, 0.6492]], [[0.5175, 0.366, 0.4402], [0.4236, 0.4745, 0.4304], [0.9654, 0.1171, 0.3846]]], [[[0.5282, 0.3975, 0.8155], [0.7179, 0.7699, 0.875], [0.5535, 0.0982, 0.4612]], [[0.6255, 0.1865, 0.671], [0.6648, 0.4208, 0.5173], [0.9714, 0.7537, 0.3745]], [[0.2586, 0.5093, 0.68], [0.5716, 0.3651, 0.5617], [0.589, 0.3707, 0.3719]]]]])
in1Sub54860 = tf.constant([[[[[0.3373, 0.9645, 0.472], [0.6409, 0.764, 0.7101], [0.0072, 0.8355, 0.6347]], [[0.4412, 0.9735, 0.5175], [0.7481, 0.7923, 0.3075], [0.4947, 0.9781, 0.7268]], [[0.7761, 0.4319, 0.9153], [0.6802, 0.6467, 0.2843], [0.8397, 0.8618, 0.79]]], [[[0.3117, 0.301, 0.1951], [0.471, 0.7879, 0.5129], [0.1854, 0.5838, 0.0343]], [[0.0987, 0.4712, 0.5023], [0.0718, 0.4658, 0.9344], [0.0308, 0.0158, 0.2313]], [[0.0265, 0.1672, 0.3143], [0.674, 0.4002, 0.5173], [0.0728, 0.1448, 0.0262]]], [[[0.2377, 0.9989, 0.7323], [0.7254, 0.3256, 0.9521], [0.2515, 0.4451, 0.9229]], [[0.6914, 0.7979, 0.6717], [0.0564, 0.1725, 0.6972], [0.0863, 0.899, 0.6705]], [[0.6632, 0.941, 0.2011], [0.0736, 0.3789, 0.6636], [0.0171, 0.9306, 0.5121]]]]])
in0Cro23425 = tf.constant([[[1.8827, 1.2314, 1.216]]])
in0Con38114 = tf.constant([[[0.9565, 0.8021, 0.198, 0.1231, 0.8049, 0.0554, 0.8599, 0.3988, 0.0753, 0.097, 0.3362, 0.4701, 0.1243, 0.8099, 0.691, 0.5854, 0.3724, 0.2759, 0.25, 0.0246, 0.3886, 0.1052, 0.6985, 0.1026], [0.5317, 0.7345, 0.0393, 0.1357, 0.0818, 0.9916, 0.7203, 0.1699, 0.5646, 0.045, 0.1658, 0.8459, 0.2799, 0.4438, 0.8822, 0.6402, 0.8836, 0.336, 0.2943, 0.8589, 0.2365, 0.1065, 0.4723, 0.1868]]])
print (np.array2string(model.predict([in0Mul52146,in1Mul52146,in0Sub54860,in1Sub54860,in0Cro23425,in0Con38114],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add87496.png')

LMul52146 = multiply_layer([[[[[[0.6833], [0.1703]]], [[[0.8546], [0.9532]]]]], [[[[[0.6486], [0.4138]]], [[[0.9966], [0.0584]]]]]], Mul52146), 
LRes39780 = reshape_layer(Mul52146, [2, 1, 2], Res39780), 
LRes92774 = reshape_layer(Res39780, [2, 2], Res92774), 
LZer30875 = zero_padding1D_layer(Res92774, 1, 0, Zer30875), 
LSub54860 = subtract_layer([[[[[0.1049, 0.5878, 0.8351], [0.9412, 0.5907, 0.3135], [0.8541, 0.5423, 0.276]], [[0.9487, 0.0604, 0.5115], [0.4898, 0.6604, 0.9737], [0.6095, 0.3143, 0.9261]], [[0.7937, 0.455, 0.6939], [0.1355, 0.4466, 0.0451], [0.426, 0.9518, 0.5817]]], [[[0.0429, 0.4756, 0.4878], [0.6194, 0.3014, 0.2869], [0.1556, 0.6365, 0.4698]], [[0.1538, 0.2539, 0.2144], [0.8193, 0.2535, 0.9729], [0.3726, 0.612, 0.6492]], [[0.5175, 0.366, 0.4402], [0.4236, 0.4745, 0.4304], [0.9654, 0.1171, 0.3846]]], [[[0.5282, 0.3975, 0.8155], [0.7179, 0.7699, 0.875], [0.5535, 0.0982, 0.4612]], [[0.6255, 0.1865, 0.671], [0.6648, 0.4208, 0.5173], [0.9714, 0.7537, 0.3745]], [[0.2586, 0.5093, 0.68], [0.5716, 0.3651, 0.5617], [0.589, 0.3707, 0.3719]]]]], [[[[[0.3373, 0.9645, 0.472], [0.6409, 0.764, 0.7101], [0.0072, 0.8355, 0.6347]], [[0.4412, 0.9735, 0.5175], [0.7481, 0.7923, 0.3075], [0.4947, 0.9781, 0.7268]], [[0.7761, 0.4319, 0.9153], [0.6802, 0.6467, 0.2843], [0.8397, 0.8618, 0.79]]], [[[0.3117, 0.301, 0.1951], [0.471, 0.7879, 0.5129], [0.1854, 0.5838, 0.0343]], [[0.0987, 0.4712, 0.5023], [0.0718, 0.4658, 0.9344], [0.0308, 0.0158, 0.2313]], [[0.0265, 0.1672, 0.3143], [0.674, 0.4002, 0.5173], [0.0728, 0.1448, 0.0262]]], [[[0.2377, 0.9989, 0.7323], [0.7254, 0.3256, 0.9521], [0.2515, 0.4451, 0.9229]], [[0.6914, 0.7979, 0.6717], [0.0564, 0.1725, 0.6972], [0.0863, 0.899, 0.6705]], [[0.6632, 0.941, 0.2011], [0.0736, 0.3789, 0.6636], [0.0171, 0.9306, 0.5121]]]]], Sub54860), 
LRes93235 = reshape_layer(Sub54860, [3, 3, 9], Res93235), 
LRes55007 = reshape_layer(Res93235, [3, 27], Res55007), 
LDot38272 = dot_layer(Zer30875,Res55007, 1, 1, Dot38272), 
LCro23425 = cropping1D_layer([[[1.8827, 1.2314, 1.216]]], 0, 0, Cro23425), 
LZer57131 = zero_padding1D_layer(Cro23425, 1, 0, Zer57131), 
LCon38114 = concatenate_layer([Zer57131,[[[0.9565, 0.8021, 0.198, 0.1231, 0.8049, 0.0554, 0.8599, 0.3988, 0.0753, 0.097, 0.3362, 0.4701, 0.1243, 0.8099, 0.691, 0.5854, 0.3724, 0.2759, 0.25, 0.0246, 0.3886, 0.1052, 0.6985, 0.1026], [0.5317, 0.7345, 0.0393, 0.1357, 0.0818, 0.9916, 0.7203, 0.1699, 0.5646, 0.045, 0.1658, 0.8459, 0.2799, 0.4438, 0.8822, 0.6402, 0.8836, 0.336, 0.2943, 0.8589, 0.2365, 0.1065, 0.4723, 0.1868]]]], 2, Con38114), 
LAdd87496 = add_layer([Dot38272,Con38114], Add87496), 
exec_layers([LMul52146,LRes39780,LRes92774,LZer30875,LSub54860,LRes93235,LRes55007,LDot38272,LCro23425,LZer57131,LCon38114,LAdd87496],["Mul52146","Res39780","Res92774","Zer30875","Sub54860","Res93235","Res55007","Dot38272","Cro23425","Zer57131","Con38114","Add87496"],Add87496,"Add87496")

Actual (Unparsed): [[[0.1282882, -0.4348283, 0.2005822, 1.0158815, 0.9648967, 0.0321738, 0.3671047, 0.5328032, -0.1448188, 0.8281930, -0.2182308, -0.0528901, 0.9464541, 0.4535868, 0.3339429, 1.0296165, 0.9503777, 0.6241069, 0.4584099, 0.0928294, 0.7395738, 0.5631694, 0.0457755, 0.2632992, 0.9878739, 0.2093600, 0.1420312], [1.8799288, 1.2102260, 1.2412581, 0.5417403, 0.7249491, 0.0190818, 0.1504114, 0.0662029, 0.9965883, 0.7205145, 0.1205521, 0.5442727, 0.1315442, 0.1646613, 0.8385986, 0.3532575, 0.4777259, 0.8951721, 0.6522780, 0.8735781, 0.3715311, 0.3043764, 0.8633677, 0.2247037, 0.2012375, 0.4391801, 0.2042520]]]

Expected (Unparsed): [[[0.12828817503600004,-0.43482829695599995,0.20058220957800005,1.015881447892,0.9648966572780001,0.032173790964000026,0.36710468299599996,0.5328032541419999,-0.14481874652200008,0.828193021414,-0.21823076667800007,-0.052890120653999895,0.946454162674,0.45358681651400007,0.33394293726599994,1.0296164663200003,0.9503777216479999,0.624106893442,0.45840995652399996,0.09282939473199997,0.739573846046,0.563169420928,0.045775514465999964,0.26329927449400004,0.9878739524719999,0.2093600097099999,0.14203116612],[1.879928855008,1.210226024812,1.241258094394,0.541740267176,0.724949071674,0.019081831912,0.150411387588,0.066202935706,0.996588347474,0.720514457322,0.120552108146,0.544272679878,0.13154415944199999,0.164661275582,0.838598628678,0.35325744934,0.477725899804,0.8951720750259999,0.652278019092,0.8735780717360001,0.371531059458,0.304376383184,0.863367728458,0.224703689762,0.201237535636,0.43918009101,0.2042520016]]]

Actual:   [[[0.1283, -0.4348, 0.2006, 1.0159, 0.9649, 0.0322, 0.3672, 0.5329, -0.1448, 0.8282, -0.2182, -0.0528, 0.9465, 0.4536, 0.334, 1.0297, 0.9504, 0.6242, 0.4585, 0.0929, 0.7396, 0.5632, 0.0458, 0.2633, 0.9879, 0.2094, 0.1421], [1.88, 1.2103, 1.2413, 0.5418, 0.725, 0.0191, 0.1505, 0.0663, 0.9966, 0.7206, 0.1206, 0.5443, 0.1316, 0.1647, 0.8386, 0.3533, 0.4778, 0.8952, 0.6523, 0.8736, 0.3716, 0.3044, 0.8634, 0.2248, 0.2013, 0.4392, 0.2043]]]

Expected: [[[0.1283, -0.4348, 0.2006, 1.0159, 0.9649, 0.0322, 0.3672, 0.5329, -0.1448, 0.8282, -0.2182, -0.0528, 0.9465, 0.4536, 0.334, 1.0297, 0.9504, 0.6242, 0.4585, 0.0929, 0.7396, 0.5632, 0.0458, 0.2633, 0.9879, 0.2094, 0.1421], [1.88, 1.2103, 1.2413, 0.5418, 0.725, 0.0191, 0.1505, 0.0663, 0.9966, 0.7206, 0.1206, 0.5443, 0.1316, 0.1647, 0.8386, 0.3533, 0.4778, 0.8952, 0.6523, 0.8736, 0.3716, 0.3044, 0.8634, 0.2248, 0.2013, 0.4392, 0.2043]]]