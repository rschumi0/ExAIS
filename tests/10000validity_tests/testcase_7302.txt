import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul44205 = tf.keras.layers.Input(shape=([2, 1]))
in1Mul44205 = tf.keras.layers.Input(shape=([2, 1]))
in0Con84126 = tf.keras.layers.Input(shape=([5, 5]))
in0Con74225 = tf.keras.layers.Input(shape=([1, 2, 1]))

Mul44205 = keras.layers.Multiply(name = 'Mul44205', )([in0Mul44205,in1Mul44205])
Zer80033 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer80033', )(Mul44205)
Con84126 = keras.layers.Concatenate(axis=2, name = 'Con84126', )([Zer80033,in0Con84126])
Con74225 = keras.layers.Conv2DTranspose(3, (1, 1),strides=(5, 1), padding='same', name = 'Con74225', )(in0Con74225)
Res43486 = keras.layers.Reshape((5, 6), name = 'Res43486', )(Con74225)
PRe98852 = keras.layers.PReLU(name = 'PRe98852', )(Res43486)
Max92187 = keras.layers.Maximum(name = 'Max92187', )([Con84126,PRe98852])
model = tf.keras.models.Model(inputs=[in0Mul44205,in1Mul44205,in0Con84126,in0Con74225], outputs=Max92187)
w = model.get_layer('Con74225').get_weights() 
w[0] = np.array([[[[0.9199], [0.4211], [0.8617]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con74225').set_weights(w) 
w = model.get_layer('PRe98852').get_weights() 
w[0] = np.array([[0.1518, 0.6418, 0.6453, 0.6208, 0.404, 0.0055], [0.5417, 0.7856, 0.915, 0.8545, 0.5612, 0.3477], [0.8098, 0.3334, 0.7571, 0.7766, 0.5224, 0.7405], [0.992, 0.1863, 0.7789, 0.3695, 0.7831, 0.4116], [0.8569, 0.9341, 0.7137, 0.8017, 0.8633, 0.7103]])
model.get_layer('PRe98852').set_weights(w) 
in0Mul44205 = tf.constant([[[0.4442], [0.947]]])
in1Mul44205 = tf.constant([[[0.6581], [0.139]]])
in0Con84126 = tf.constant([[[0.594, 0.2521, 0.1013, 0.4071, 0.4689], [0.7303, 0.5848, 0.2741, 0.0935, 0.4107], [0.9274, 0.2426, 0.854, 0.2676, 0.5742], [0.4324, 0.3466, 0.7748, 0.9511, 0.3217], [0.9733, 0.1923, 0.3203, 0.4803, 0.7753]]])
in0Con74225 = tf.constant([[[[0.4765], [0.8932]]]])
print (np.array2string(model.predict([in0Mul44205,in1Mul44205,in0Con84126,in0Con74225],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max92187.png')

LMul44205 = multiply_layer([[[[0.4442], [0.947]]], [[[0.6581], [0.139]]]], Mul44205), 
LZer80033 = zero_padding1D_layer(Mul44205, 3, 0, Zer80033), 
LCon84126 = concatenate_layer([Zer80033,[[[0.594, 0.2521, 0.1013, 0.4071, 0.4689], [0.7303, 0.5848, 0.2741, 0.0935, 0.4107], [0.9274, 0.2426, 0.854, 0.2676, 0.5742], [0.4324, 0.3466, 0.7748, 0.9511, 0.3217], [0.9733, 0.1923, 0.3203, 0.4803, 0.7753]]]], 2, Con84126), 
LCon74225 = conv2D_transpose_layer([[[[0.4765], [0.8932]]]], 1, 1,[[[[0.9199], [0.4211], [0.8617]]]],[0, 0, 0], 5, 1, true, Con74225), 
LRes43486 = reshape_layer(Con74225, [5, 6], Res43486), 
LPRe98852 = prelu_layer(Res43486, [[0.1518, 0.6418, 0.6453, 0.6208, 0.404, 0.0055], [0.5417, 0.7856, 0.915, 0.8545, 0.5612, 0.3477], [0.8098, 0.3334, 0.7571, 0.7766, 0.5224, 0.7405], [0.992, 0.1863, 0.7789, 0.3695, 0.7831, 0.4116], [0.8569, 0.9341, 0.7137, 0.8017, 0.8633, 0.7103]], PRe98852), 
LMax92187 = maximum_layer([Con84126,PRe98852], Max92187), 
exec_layers([LMul44205,LZer80033,LCon84126,LCon74225,LRes43486,LPRe98852,LMax92187],["Mul44205","Zer80033","Con84126","Con74225","Res43486","PRe98852","Max92187"],Max92187,"Max92187")

Actual (Unparsed): [[[0.4383324, 0.5940000, 0.4106001, 0.8216547, 0.4071000, 0.7696704], [0.0000000, 0.7303000, 0.5848000, 0.2741000, 0.0935000, 0.4107000], [0.0000000, 0.9274000, 0.2426000, 0.8540000, 0.2676000, 0.5742000], [0.2923280, 0.4324000, 0.3466000, 0.7748000, 0.9511000, 0.3217000], [0.1316330, 0.9733000, 0.1923000, 0.3203000, 0.4803000, 0.7753000]]]

Expected (Unparsed): [[[0.43833235,0.594,0.41060005,0.8216546800000001,0.4071,0.7696704400000001],[0,0.7303,0.5848,0.2741,0.0935,0.4107],[0,0.9274,0.2426,0.854,0.2676,0.5742],[0.29232802,0.4324,0.3466,0.7748,0.9511,0.3217],[0.131633,0.9733,0.1923,0.3203,0.4803,0.7753]]]

Actual:   [[[0.4384, 0.594, 0.4107, 0.8217, 0.4071, 0.7697], [0, 0.7303, 0.5848, 0.2741, 0.0935, 0.4107], [0, 0.9274, 0.2426, 0.854, 0.2676, 0.5742], [0.2924, 0.4324, 0.3466, 0.7748, 0.9511, 0.3217], [0.1317, 0.9733, 0.1923, 0.3203, 0.4803, 0.7753]]]

Expected: [[[0.4384, 0.594, 0.4107, 0.8217, 0.4071, 0.7697], [0, 0.7303, 0.5848, 0.2741, 0.0935, 0.4107], [0, 0.9274, 0.2426, 0.854, 0.2676, 0.5742], [0.2924, 0.4324, 0.3466, 0.7748, 0.9511, 0.3217], [0.1317, 0.9733, 0.1923, 0.3203, 0.4803, 0.7753]]]