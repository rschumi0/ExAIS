import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave64214 = tf.keras.layers.Input(shape=([1, 1]))
in1Ave64214 = tf.keras.layers.Input(shape=([1, 1]))
in0Con92104 = tf.keras.layers.Input(shape=([2, 7, 2]))
in0Cro40758 = tf.keras.layers.Input(shape=([4, 4]))
in0Con97476 = tf.keras.layers.Input(shape=([2, 7, 2]))
in0Con40156 = tf.keras.layers.Input(shape=([2, 1, 2]))

Ave64214 = keras.layers.Average(name = 'Ave64214', )([in0Ave64214,in1Ave64214])
Glo60316 = keras.layers.GlobalMaxPool1D(name = 'Glo60316', )(Ave64214)
Bat9314 = keras.layers.BatchNormalization(axis=1, epsilon=0.7652629898272569,  name = 'Bat9314', )(Glo60316)
Res79488 = keras.layers.Reshape((1, 1), name = 'Res79488', )(Bat9314)
Res16226 = keras.layers.Reshape((1, 1, 1), name = 'Res16226', )(Res79488)
Zer64608 = keras.layers.ZeroPadding2D(padding=((1, 0), (6, 0)), name = 'Zer64608', )(Res16226)
Con92104 = keras.layers.Concatenate(axis=3, name = 'Con92104', )([Zer64608,in0Con92104])
Cro40758 = keras.layers.Cropping1D(cropping=((3, 0)), name = 'Cro40758', )(in0Cro40758)
Res97510 = keras.layers.Reshape((1, 4, 1), name = 'Res97510', )(Cro40758)
Zer60160 = keras.layers.ZeroPadding2D(padding=((1, 0), (3, 0)), name = 'Zer60160', )(Res97510)
Con97476 = keras.layers.Concatenate(axis=3, name = 'Con97476', )([Zer60160,in0Con97476])
Con40156 = keras.layers.Conv2DTranspose(3, (1, 1),strides=(1, 1), padding='valid', name = 'Con40156', )(in0Con40156)
Zer49896 = keras.layers.ZeroPadding2D(padding=((0, 0), (6, 0)), name = 'Zer49896', )(Con40156)
Sub60418 = keras.layers.Subtract(name = 'Sub60418', )([Con97476,Zer49896])
Min84373 = keras.layers.Minimum(name = 'Min84373', )([Con92104,Sub60418])
model = tf.keras.models.Model(inputs=[in0Ave64214,in1Ave64214,in0Con92104,in0Cro40758,in0Con97476,in0Con40156], outputs=Min84373)
w = model.get_layer('Bat9314').get_weights() 
w[0] = np.array([0.9611])
w[1] = np.array([0.5935])
w[2] = np.array([0.4385])
w[3] = np.array([0.3205])
model.get_layer('Bat9314').set_weights(w) 
w = model.get_layer('Con40156').get_weights() 
w[0] = np.array([[[[0.75, 0.1745], [0.0697, 0.2628], [0.5708, 0.1135]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con40156').set_weights(w) 
in0Ave64214 = tf.constant([[[0.8747]]])
in1Ave64214 = tf.constant([[[0.1463]]])
in0Con92104 = tf.constant([[[[0.5832, 0.6535], [0.0537, 0.3767], [0.5232, 0.2461], [0.7084, 0.8435], [0.6105, 0.2647], [0.2998, 0.9659], [0.566, 0.6999]], [[0.4101, 0.1186], [0.5601, 0.3785], [0.2872, 0.6049], [0.0344, 0.0228], [0.8961, 0.1414], [0.1004, 0.533], [0.0178, 0.449]]]])
in0Cro40758 = tf.constant([[[1.3509, 1.8761, 1.7085, 1.0842], [1.8218, 1.3757, 1.176, 1.2482], [1.0655, 1.0873, 1.5399, 1.3512], [1.2349, 1.0986, 1.1209, 1.5487]]])
in0Con97476 = tf.constant([[[[0.6363, 0.8991], [0.9508, 0.3724], [0.3628, 0.6764], [0.2777, 0.495], [0.0029, 0.7072], [0.9454, 0.229], [0.2777, 0.6484]], [[0.5181, 0.5073], [0.5756, 0.7014], [0.3264, 0.525], [0.2969, 0.6828], [0.1247, 0.0689], [0.0059, 0.1203], [0.7049, 0.0524]]]])
in0Con40156 = tf.constant([[[[0.9121, 0.0971]], [[0.6761, 0.8167]]]])
print (np.array2string(model.predict([in0Ave64214,in1Ave64214,in0Con92104,in0Cro40758,in0Con97476,in0Con40156],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min84373.png')

LAve64214 = average_layer([[[[0.8747]]], [[[0.1463]]]], Ave64214), 
LGlo60316 = global_max_pool1D_layer(Ave64214, Glo60316), 
LBat9314 = batch_normalization_layer(Glo60316, 1, 0.7652629898272569, [0.9611], [0.5935], [0.4385], [0.3205], Bat9314), 
LRes79488 = reshape_layer(Bat9314, [1, 1], Res79488), 
LRes16226 = reshape_layer(Res79488, [1, 1, 1], Res16226), 
LZer64608 = zero_padding2D_layer(Res16226, 1, 0, 6, 0, Zer64608), 
LCon92104 = concatenate_layer([Zer64608,[[[[0.5832, 0.6535], [0.0537, 0.3767], [0.5232, 0.2461], [0.7084, 0.8435], [0.6105, 0.2647], [0.2998, 0.9659], [0.566, 0.6999]], [[0.4101, 0.1186], [0.5601, 0.3785], [0.2872, 0.6049], [0.0344, 0.0228], [0.8961, 0.1414], [0.1004, 0.533], [0.0178, 0.449]]]]], 3, Con92104), 
LCro40758 = cropping1D_layer([[[1.3509, 1.8761, 1.7085, 1.0842], [1.8218, 1.3757, 1.176, 1.2482], [1.0655, 1.0873, 1.5399, 1.3512], [1.2349, 1.0986, 1.1209, 1.5487]]], 3, 0, Cro40758), 
LRes97510 = reshape_layer(Cro40758, [1, 4, 1], Res97510), 
LZer60160 = zero_padding2D_layer(Res97510, 1, 0, 3, 0, Zer60160), 
LCon97476 = concatenate_layer([Zer60160,[[[[0.6363, 0.8991], [0.9508, 0.3724], [0.3628, 0.6764], [0.2777, 0.495], [0.0029, 0.7072], [0.9454, 0.229], [0.2777, 0.6484]], [[0.5181, 0.5073], [0.5756, 0.7014], [0.3264, 0.525], [0.2969, 0.6828], [0.1247, 0.0689], [0.0059, 0.1203], [0.7049, 0.0524]]]]], 3, Con97476), 
LCon40156 = conv2D_transpose_layer([[[[0.9121, 0.0971]], [[0.6761, 0.8167]]]], 1, 1,[[[[0.75, 0.1745], [0.0697, 0.2628], [0.5708, 0.1135]]]],[0, 0, 0], 1, 1, false, Con40156), 
LZer49896 = zero_padding2D_layer(Con40156, 0, 0, 6, 0, Zer49896), 
LSub60418 = subtract_layer(Con97476,Zer49896, Sub60418), 
LMin84373 = minimum_layer([Con92104,Sub60418], Min84373), 
exec_layers([LAve64214,LGlo60316,LBat9314,LRes79488,LRes16226,LZer64608,LCon92104,LCro40758,LRes97510,LZer60160,LCon97476,LCon40156,LZer49896,LSub60418,LMin84373],["Ave64214","Glo60316","Bat9314","Res79488","Res16226","Zer64608","Con92104","Cro40758","Res97510","Zer60160","Con97476","Con40156","Zer49896","Sub60418","Min84373"],Min84373,"Min84373")

Actual (Unparsed): [[[[0.0000000, 0.5832000, 0.6535000], [0.0000000, 0.0537000, 0.3724000], [0.0000000, 0.3628000, 0.2461000], [0.0000000, 0.2777000, 0.4950000], [0.0000000, 0.0029000, 0.2647000], [0.0000000, 0.2998000, 0.2290000], [-0.7010190, 0.1886088, 0.1167525]], [[0.0000000, 0.4101000, 0.1186000], [0.0000000, 0.5601000, 0.3785000], [0.0000000, 0.2872000, 0.5250000], [0.0000000, 0.0344000, 0.0228000], [0.0000000, 0.1247000, 0.0689000], [0.0000000, 0.0059000, 0.1203000], [0.6599100, 0.0178000, -0.4262133]]]]

Expected (Unparsed): [[[[0,0.5832,0.6535],[0,0.0537,0.3724],[0,0.3628,0.2461],[0,0.2777,0.495],[0,0.0029,0.2647],[0,0.2998,0.229],[-0.70101895,0.18860875,0.11675247]],[[0,0.4101,0.1186],[0,0.5601,0.3785],[0,0.2872,0.525],[0,0.0344,0.0228],[0,0.1247,0.0689],[0,0.0059,0.1203],[0.6599100116994114,0.0178,-0.42621333]]]]

Actual:   [[[[0, 0.5832, 0.6535], [0, 0.0537, 0.3724], [0, 0.3628, 0.2461], [0, 0.2777, 0.495], [0, 0.0029, 0.2647], [0, 0.2998, 0.229], [-0.701, 0.1887, 0.1168]], [[0, 0.4101, 0.1186], [0, 0.5601, 0.3785], [0, 0.2872, 0.525], [0, 0.0344, 0.0228], [0, 0.1247, 0.0689], [0, 0.0059, 0.1203], [0.66, 0.0178, -0.4262]]]]

Expected: [[[[0, 0.5832, 0.6535], [0, 0.0537, 0.3724], [0, 0.3628, 0.2461], [0, 0.2777, 0.495], [0, 0.0029, 0.2647], [0, 0.2998, 0.229], [-0.701, 0.1887, 0.1168]], [[0, 0.4101, 0.1186], [0, 0.5601, 0.3785], [0, 0.2872, 0.525], [0, 0.0344, 0.0228], [0, 0.1247, 0.0689], [0, 0.0059, 0.1203], [0.66, 0.0178, -0.4262]]]]