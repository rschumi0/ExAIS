import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul63611 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Mul63611 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Cro86532 = tf.keras.layers.Input(shape=([4, 1]))
in0Con22353 = tf.keras.layers.Input(shape=([4, 11]))
in0Dot19887 = tf.keras.layers.Input(shape=([3]))
in1Dot19887 = tf.keras.layers.Input(shape=([3]))
in0Con8068 = tf.keras.layers.Input(shape=([47]))

Mul63611 = keras.layers.Multiply(name = 'Mul63611', )([in0Mul63611,in1Mul63611])
Res70937 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res70937', )(Mul63611)
Zer86038 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer86038', )(Res70937)
Res69136 = keras.layers.Reshape((4, 4, 3), name = 'Res69136', )(Zer86038)
Res20732 = keras.layers.Reshape((4, 12), name = 'Res20732', )(Res69136)
Cro86532 = keras.layers.Cropping1D(cropping=((2, 0)), name = 'Cro86532', )(in0Cro86532)
Zer74831 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer74831', )(Cro86532)
Con22353 = keras.layers.Concatenate(axis=2, name = 'Con22353', )([Zer74831,in0Con22353])
Min28261 = keras.layers.Minimum(name = 'Min28261', )([Res20732,Con22353])
Fla21494 = keras.layers.Flatten(name = 'Fla21494', )(Min28261)
Dot19887 = keras.layers.Dot(axes=(1, 1), name = 'Dot19887', )([in0Dot19887,in1Dot19887])
Con8068 = keras.layers.Concatenate(axis=1, name = 'Con8068', )([Dot19887,in0Con8068])
Add40351 = keras.layers.Add(name = 'Add40351', )([Fla21494,Con8068])
Res25679 = keras.layers.Reshape((48, 1), name = 'Res25679', )(Add40351)
Res89054 = keras.layers.Reshape((48, 1, 1), name = 'Res89054', )(Res25679)
Con19765 = keras.layers.Conv2D(2, (26, 1),strides=(1, 1), padding='valid', dilation_rate=(1, 1), name = 'Con19765', )(Res89054)
model = tf.keras.models.Model(inputs=[in0Mul63611,in1Mul63611,in0Cro86532,in0Con22353,in0Dot19887,in1Dot19887,in0Con8068], outputs=Con19765)
w = model.get_layer('Con19765').get_weights() 
w[0] = np.array([[[[0.0066, 0.8737]]], [[[0.4581, 0.9602]]], [[[0.6276, 0.2807]]], [[[0.8503, 0.547]]], [[[0.8952, 0.6401]]], [[[0.1552, 0.1487]]], [[[0.4667, 0.376]]], [[[0.6696, 0.2577]]], [[[0.6383, 0.2083]]], [[[0.2222, 0.4802]]], [[[0.4942, 0.1908]]], [[[0.3263, 0.647]]], [[[0.5467, 0.008]]], [[[0.4759, 0.1167]]], [[[0.2141, 0.5615]]], [[[0.6457, 0.6627]]], [[[0.2336, 0.2301]]], [[[0.5739, 0.0778]]], [[[0.6375, 0.5694]]], [[[0.2028, 0.9055]]], [[[0.2358, 0.6342]]], [[[0.7316, 0.5098]]], [[[0.6434, 0.5514]]], [[[0.0989, 0.0368]]], [[[0.7631, 0.4502]]], [[[0.3482, 0.6851]]]])
w[1] = np.array([0, 0])
model.get_layer('Con19765').set_weights(w) 
in0Mul63611 = tf.constant([[[[0.9638], [0.8521]], [[0.0662], [0.1581]]]])
in1Mul63611 = tf.constant([[[[0.7204], [0.26]], [[0.2638], [0.0426]]]])
in0Cro86532 = tf.constant([[[1.6694], [1.7908], [1.2011], [1.8306]]])
in0Con22353 = tf.constant([[[0.0918, 0.8407, 0.9028, 0.9191, 0.0238, 0.0486, 0.775, 0.9302, 0.3747, 0.7538, 0.1481], [0.657, 0.2759, 0.0064, 0.069, 0.5555, 0.0867, 0.4285, 0.796, 0.7796, 0.2781, 0.7486], [0.3583, 0.1264, 0.4988, 0.7429, 0.6393, 0.5521, 0.5941, 0.3922, 0.5438, 0.426, 0.9702], [0.8836, 0.1388, 0.3374, 0.9755, 0.8068, 0.1347, 0.3188, 0.9031, 0.5262, 0.7149, 0.8094]]])
in0Dot19887 = tf.constant([[0.0402, 0.5382, 0.4053]])
in1Dot19887 = tf.constant([[0.1087, 0.8832, 0.278]])
in0Con8068 = tf.constant([[0.6142, 0.7441, 0.2357, 0.2189, 0.7171, 0.4043, 0.213, 0.0768, 0.7632, 0.2633, 0.9619, 0.3317, 0.1017, 0.7256, 0.959, 0.8857, 0.4506, 0.973, 0.4837, 0.4099, 0.2472, 0.0941, 0.3967, 0.7618, 0.4068, 0.2689, 0.2827, 0.1568, 0.6992, 0.4329, 0.986, 0.9481, 0.6004, 0.5284, 0.3568, 0.3279, 0.6569, 0.9268, 0.8503, 0.9926, 0.113, 0.8496, 0.4698, 0.8375, 0.7947, 0.655, 0.4309]])
print (np.array2string(model.predict([in0Mul63611,in1Mul63611,in0Cro86532,in0Con22353,in0Dot19887,in1Dot19887,in0Con8068],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con19765.png')

LMul63611 = multiply_layer([[[[[0.9638], [0.8521]], [[0.0662], [0.1581]]]], [[[[0.7204], [0.26]], [[0.2638], [0.0426]]]]], Mul63611), 
LRes70937 = reshape_layer(Mul63611, [2, 2, 1, 1], Res70937), 
LZer86038 = zero_padding3D_layer(Res70937, 1, 1, 1, 1, 1, 1, Zer86038), 
LRes69136 = reshape_layer(Zer86038, [4, 4, 3], Res69136), 
LRes20732 = reshape_layer(Res69136, [4, 12], Res20732), 
LCro86532 = cropping1D_layer([[[1.6694], [1.7908], [1.2011], [1.8306]]], 2, 0, Cro86532), 
LZer74831 = zero_padding1D_layer(Cro86532, 2, 0, Zer74831), 
LCon22353 = concatenate_layer([Zer74831,[[[0.0918, 0.8407, 0.9028, 0.9191, 0.0238, 0.0486, 0.775, 0.9302, 0.3747, 0.7538, 0.1481], [0.657, 0.2759, 0.0064, 0.069, 0.5555, 0.0867, 0.4285, 0.796, 0.7796, 0.2781, 0.7486], [0.3583, 0.1264, 0.4988, 0.7429, 0.6393, 0.5521, 0.5941, 0.3922, 0.5438, 0.426, 0.9702], [0.8836, 0.1388, 0.3374, 0.9755, 0.8068, 0.1347, 0.3188, 0.9031, 0.5262, 0.7149, 0.8094]]]], 2, Con22353), 
LMin28261 = minimum_layer([Res20732,Con22353], Min28261), 
LFla21494 = flatten_layer(Min28261, Fla21494), 
LDot19887 = dot_layer([[0.0402, 0.5382, 0.4053]], [[0.1087, 0.8832, 0.278]], 1, 1, Dot19887), 
LCon8068 = concatenate_layer([Dot19887,[[0.6142, 0.7441, 0.2357, 0.2189, 0.7171, 0.4043, 0.213, 0.0768, 0.7632, 0.2633, 0.9619, 0.3317, 0.1017, 0.7256, 0.959, 0.8857, 0.4506, 0.973, 0.4837, 0.4099, 0.2472, 0.0941, 0.3967, 0.7618, 0.4068, 0.2689, 0.2827, 0.1568, 0.6992, 0.4329, 0.986, 0.9481, 0.6004, 0.5284, 0.3568, 0.3279, 0.6569, 0.9268, 0.8503, 0.9926, 0.113, 0.8496, 0.4698, 0.8375, 0.7947, 0.655, 0.4309]]], 1, Con8068), 
LAdd40351 = add_layer([Fla21494,Con8068], Add40351), 
LRes25679 = reshape_layer(Add40351, [48, 1], Res25679), 
LRes89054 = reshape_layer(Res25679, [48, 1, 1], Res89054), 
LCon19765 = conv2D_layer(Res89054, 26, 1,[[[[0.0066, 0.8737]]], [[[0.4581, 0.9602]]], [[[0.6276, 0.2807]]], [[[0.8503, 0.547]]], [[[0.8952, 0.6401]]], [[[0.1552, 0.1487]]], [[[0.4667, 0.376]]], [[[0.6696, 0.2577]]], [[[0.6383, 0.2083]]], [[[0.2222, 0.4802]]], [[[0.4942, 0.1908]]], [[[0.3263, 0.647]]], [[[0.5467, 0.008]]], [[[0.4759, 0.1167]]], [[[0.2141, 0.5615]]], [[[0.6457, 0.6627]]], [[[0.2336, 0.2301]]], [[[0.5739, 0.0778]]], [[[0.6375, 0.5694]]], [[[0.2028, 0.9055]]], [[[0.2358, 0.6342]]], [[[0.7316, 0.5098]]], [[[0.6434, 0.5514]]], [[[0.0989, 0.0368]]], [[[0.7631, 0.4502]]], [[[0.3482, 0.6851]]]],[0, 0], 1, 1, false, 1, 1, Con19765), 
exec_layers([LMul63611,LRes70937,LZer86038,LRes69136,LRes20732,LCro86532,LZer74831,LCon22353,LMin28261,LFla21494,LDot19887,LCon8068,LAdd40351,LRes25679,LRes89054,LCon19765],["Mul63611","Res70937","Zer86038","Res69136","Res20732","Cro86532","Zer74831","Con22353","Min28261","Fla21494","Dot19887","Con8068","Add40351","Res25679","Res89054","Con19765"],Con19765,"Con19765")

Actual (Unparsed): [[[[5.6033539, 6.5328086]], [[5.9446133, 5.7672258]], [[5.8191217, 5.1920633]], [[6.1010961, 4.7475040]], [[5.4575967, 5.5031288]], [[5.6158985, 6.1950676]], [[5.7606269, 5.1948342]], [[6.8623593, 5.5284511]], [[7.1673666, 5.7488468]], [[6.3658709, 6.1640969]], [[6.5128774, 6.5324806]], [[6.6941399, 6.4282650]], [[6.9495191, 6.2614448]], [[6.9025049, 6.7629943]], [[7.2534063, 7.2118899]], [[6.9038751, 7.4201257]], [[7.1117605, 6.4328934]], [[6.6976960, 6.5969738]], [[6.3919792, 7.2229719]], [[6.0522807, 6.3270257]], [[6.5667459, 6.7873157]], [[7.1027997, 6.1338300]], [[7.1264140, 5.9672720]]]]

Expected (Unparsed): [[[[5.6033539059079995,6.532808574705999]],[[5.944613295,5.7672258524]],[[5.819121729399999,5.192063298800001]],[[6.101096127191999,4.7475040495559995]],[[5.457596724835999,5.503128818912]],[[5.615898564684,6.195067608008001]],[[5.760626933795999,5.19483424479]],[[6.862359382982,5.528451104900001]],[[7.167366684681999,5.748846851960001]],[[6.365870900771999,6.164096912463999]],[[6.512877450596001,6.532480613851999]],[[6.694140026031999,6.4282650118200015]],[[6.949519169384001,6.261444896185999]],[[6.902504889642,6.762994310376001]],[[7.25340635833,7.211889966807999]],[[6.903875127419999,7.420125699358]],[[7.111760510294001,6.432893404742]],[[6.6976960055740005,6.5969738717099995]],[[6.391979159006,7.22297193795]],[[6.052280713934001,6.327025662192001]],[[6.566745950426,6.787315703368]],[[7.102799676427999,6.13382996886]],[[7.126414073784001,5.967272024372001]]]]

Actual:   [[[[5.6034, 6.5329]], [[5.9447, 5.7673]], [[5.8192, 5.1921]], [[6.1011, 4.7476]], [[5.4576, 5.5032]], [[5.6159, 6.1951]], [[5.7607, 5.1949]], [[6.8624, 5.5285]], [[7.1674, 5.7489]], [[6.3659, 6.1641]], [[6.5129, 6.5325]], [[6.6942, 6.4283]], [[6.9496, 6.2615]], [[6.9026, 6.763]], [[7.2535, 7.2119]], [[6.9039, 7.4202]], [[7.1118, 6.4329]], [[6.6977, 6.597]], [[6.392, 7.223]], [[6.0523, 6.3271]], [[6.5668, 6.7874]], [[7.1028, 6.1339]], [[7.1265, 5.9673]]]]

Expected: [[[[5.6034, 6.5329]], [[5.9447, 5.7673]], [[5.8192, 5.1921]], [[6.1011, 4.7476]], [[5.4576, 5.5032]], [[5.6159, 6.1951]], [[5.7607, 5.1949]], [[6.8624, 5.5285]], [[7.1674, 5.7489]], [[6.3659, 6.1641]], [[6.5129, 6.5325]], [[6.6942, 6.4283]], [[6.9496, 6.2615]], [[6.9026, 6.763]], [[7.2535, 7.2119]], [[6.9039, 7.4202]], [[7.1118, 6.4329]], [[6.6977, 6.597]], [[6.392, 7.223]], [[6.0523, 6.3271]], [[6.5668, 6.7874]], [[7.1028, 6.1339]], [[7.1265, 5.9673]]]]