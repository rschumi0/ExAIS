import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Per34285 = tf.keras.layers.Input(shape=([4, 2]))
in0Min23343 = tf.keras.layers.Input(shape=([2, 1]))
in1Min23343 = tf.keras.layers.Input(shape=([2, 1]))
in0Con8972 = tf.keras.layers.Input(shape=([2, 3]))
in0Con10590 = tf.keras.layers.Input(shape=([3, 8]))
in0Sub80145 = tf.keras.layers.Input(shape=([3, 2, 2, 3]))
in1Sub80145 = tf.keras.layers.Input(shape=([3, 2, 2, 3]))

Per34285 = keras.layers.Permute((1,2), name = 'Per34285',)(in0Per34285)
Per39235 = keras.layers.Permute((2,1), name = 'Per39235',)(Per34285)
Min23343 = keras.layers.Minimum(name = 'Min23343', )([in0Min23343,in1Min23343])
Con8972 = keras.layers.Concatenate(axis=2, name = 'Con8972', )([Min23343,in0Con8972])
Max90775 = keras.layers.Maximum(name = 'Max90775', )([Per39235,Con8972])
Zer85944 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer85944', )(Max90775)
Con10590 = keras.layers.Concatenate(axis=2, name = 'Con10590', )([Zer85944,in0Con10590])
Sub80145 = keras.layers.Subtract(name = 'Sub80145', )([in0Sub80145,in1Sub80145])
Res93403 = keras.layers.Reshape((3, 2, 6), name = 'Res93403', )(Sub80145)
Res38974 = keras.layers.Reshape((3, 12), name = 'Res38974', )(Res93403)
Per30802 = keras.layers.Permute((1,2), name = 'Per30802',)(Res38974)
Ave29435 = keras.layers.Average(name = 'Ave29435', )([Con10590,Per30802])
model = tf.keras.models.Model(inputs=[in0Per34285,in0Min23343,in1Min23343,in0Con8972,in0Con10590,in0Sub80145,in1Sub80145], outputs=Ave29435)
in0Per34285 = tf.constant([[[1.3852, 1.3449], [1.5595, 1.3377], [1.2658, 1.3849], [1.9828, 1.8629]]])
in0Min23343 = tf.constant([[[0.3718], [0.8454]]])
in1Min23343 = tf.constant([[[0.1184], [0.4216]]])
in0Con8972 = tf.constant([[[0.2518, 0.2179, 0.1607], [0.1093, 0.8402, 0.6287]]])
in0Con10590 = tf.constant([[[0.0553, 0.3675, 0.8842, 0.2299, 0.805, 0.4006, 0.0288, 0.5034], [0.1742, 0.2098, 0.9191, 0.7841, 0.3607, 0.4152, 0.5093, 0.042], [0.1032, 0.8899, 0.5527, 0.2557, 0.2691, 0.5997, 0.4939, 0.7758]]])
in0Sub80145 = tf.constant([[[[[0.8157, 0.7632, 0.0381], [0.3794, 0.6536, 0.7758]], [[0.2659, 0.3803, 0.4881], [0.7608, 0.6167, 0.6991]]], [[[0.6382, 0.9133, 0.3545], [0.1408, 0.5934, 0.8821]], [[0.8952, 0.5276, 0.9609], [0.4602, 0.3446, 0.3852]]], [[[0.0057, 0.851, 0.1358], [0.1747, 0.1899, 0.7193]], [[0.9136, 0.3036, 0.8223], [0.0726, 0.5938, 0.1923]]]]])
in1Sub80145 = tf.constant([[[[[0.0454, 0.5197, 0.2234], [0.8731, 0.9061, 0.6045]], [[0.8617, 0.9563, 0.1842], [0.7224, 0.211, 0.3088]]], [[[0.9861, 0.5934, 0.1345], [0.4608, 0.8485, 0.3889]], [[0.5153, 0.5813, 0.2439], [0.3838, 0.1385, 0.8444]]], [[[0.9324, 0.4454, 0.4028], [0.1449, 0.5593, 0.7571]], [[0.7082, 0.4188, 0.265], [0.9235, 0.3066, 0.2704]]]]])
print (np.array2string(model.predict([in0Per34285,in0Min23343,in1Min23343,in0Con8972,in0Con10590,in0Sub80145,in1Sub80145],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave29435.png')

LPer34285 = permute_layer([[[1.3852, 1.3449], [1.5595, 1.3377], [1.2658, 1.3849], [1.9828, 1.8629]]], 1,2, Per34285), 
LPer39235 = permute_layer(Per34285, 2,1, Per39235), 
LMin23343 = minimum_layer([[[[0.3718], [0.8454]]], [[[0.1184], [0.4216]]]], Min23343), 
LCon8972 = concatenate_layer([Min23343,[[[0.2518, 0.2179, 0.1607], [0.1093, 0.8402, 0.6287]]]], 2, Con8972), 
LMax90775 = maximum_layer([Per39235,Con8972], Max90775), 
LZer85944 = zero_padding1D_layer(Max90775, 1, 0, Zer85944), 
LCon10590 = concatenate_layer([Zer85944,[[[0.0553, 0.3675, 0.8842, 0.2299, 0.805, 0.4006, 0.0288, 0.5034], [0.1742, 0.2098, 0.9191, 0.7841, 0.3607, 0.4152, 0.5093, 0.042], [0.1032, 0.8899, 0.5527, 0.2557, 0.2691, 0.5997, 0.4939, 0.7758]]]], 2, Con10590), 
LSub80145 = subtract_layer([[[[[0.8157, 0.7632, 0.0381], [0.3794, 0.6536, 0.7758]], [[0.2659, 0.3803, 0.4881], [0.7608, 0.6167, 0.6991]]], [[[0.6382, 0.9133, 0.3545], [0.1408, 0.5934, 0.8821]], [[0.8952, 0.5276, 0.9609], [0.4602, 0.3446, 0.3852]]], [[[0.0057, 0.851, 0.1358], [0.1747, 0.1899, 0.7193]], [[0.9136, 0.3036, 0.8223], [0.0726, 0.5938, 0.1923]]]]], [[[[[0.0454, 0.5197, 0.2234], [0.8731, 0.9061, 0.6045]], [[0.8617, 0.9563, 0.1842], [0.7224, 0.211, 0.3088]]], [[[0.9861, 0.5934, 0.1345], [0.4608, 0.8485, 0.3889]], [[0.5153, 0.5813, 0.2439], [0.3838, 0.1385, 0.8444]]], [[[0.9324, 0.4454, 0.4028], [0.1449, 0.5593, 0.7571]], [[0.7082, 0.4188, 0.265], [0.9235, 0.3066, 0.2704]]]]], Sub80145), 
LRes93403 = reshape_layer(Sub80145, [3, 2, 6], Res93403), 
LRes38974 = reshape_layer(Res93403, [3, 12], Res38974), 
LPer30802 = permute_layer(Res38974, 1,2, Per30802), 
LAve29435 = average_layer([Con10590,Per30802], Ave29435), 
exec_layers([LPer34285,LPer39235,LMin23343,LCon8972,LMax90775,LZer85944,LCon10590,LSub80145,LRes93403,LRes38974,LPer30802,LAve29435],["Per34285","Per39235","Min23343","Con8972","Max90775","Zer85944","Con10590","Sub80145","Res93403","Res38974","Per30802","Ave29435"],Ave29435,"Ave29435")

Actual (Unparsed): [[[0.3851500, 0.1217500, -0.0926500, -0.2468500, -0.0986000, 0.2694000, 0.1442000, -0.1730500, 0.5544500, 0.2195000, 0.2172500, 0.4468500], [0.5186500, 0.9397000, 0.7429000, 0.8314000, -0.0404500, 0.3515000, 0.6495000, 0.3652000, 0.5388500, 0.2458000, 0.3577000, -0.2086000], [0.2091000, 0.8716500, 0.5589500, 0.9463500, -0.1331000, 0.4260500, 0.3790500, 0.0702500, 0.4132000, -0.1256000, 0.3905500, 0.3488500]]]

Expected (Unparsed): [[[0.38515,0.12174999999999997,-0.09265,-0.24684999999999999,-0.09860000000000002,0.2694,0.1442,-0.17305000000000004,0.55445,0.2195,0.21725000000000003,0.44684999999999997],[0.51865,0.9397,0.7429,0.8313999999999999,-0.04045,0.3515,0.6495,0.36519999999999997,0.53885,0.24580000000000002,0.3577,-0.20860000000000004],[0.2091,0.8716499999999999,0.5589500000000001,0.94635,-0.1331,0.42605000000000004,0.37904999999999994,0.07024999999999998,0.4132,-0.1256,0.39055,0.34885000000000005]]]

Actual:   [[[0.3852, 0.1218, -0.0926, -0.2468, -0.0986, 0.2694, 0.1442, -0.173, 0.5545, 0.2195, 0.2173, 0.4469], [0.5187, 0.9397, 0.7429, 0.8314, -0.0404, 0.3515, 0.6495, 0.3652, 0.5389, 0.2458, 0.3577, -0.2086], [0.2091, 0.8717, 0.559, 0.9464, -0.1331, 0.4261, 0.3791, 0.0703, 0.4132, -0.1256, 0.3906, 0.3489]]]

Expected: [[[0.3852, 0.1218, -0.0926, -0.2468, -0.0986, 0.2694, 0.1442, -0.173, 0.5545, 0.2195, 0.2173, 0.4469], [0.5187, 0.9397, 0.7429, 0.8314, -0.0404, 0.3515, 0.6495, 0.3652, 0.5389, 0.2459, 0.3577, -0.2086], [0.2091, 0.8717, 0.559, 0.9464, -0.1331, 0.4261, 0.3791, 0.0703, 0.4132, -0.1256, 0.3906, 0.3489]]]