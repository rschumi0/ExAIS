import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sep2397 = tf.keras.layers.Input(shape=([1, 1]))
in0Con41859 = tf.keras.layers.Input(shape=([3, 4, 1, 2]))
in0Cro74081 = tf.keras.layers.Input(shape=([4, 4, 1, 3]))
in0Mul26391 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in1Mul26391 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in0Con52192 = tf.keras.layers.Input(shape=([3, 4, 1, 1]))
in0Max52288 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Max52288 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con60621 = tf.keras.layers.Input(shape=([3, 4, 2]))

Sep2397 = keras.layers.SeparableConv1D(3, (1),strides=(1), padding='valid', name = 'Sep2397', )(in0Sep2397)
Res87023 = keras.layers.Reshape((1, 3, 1), name = 'Res87023', )(Sep2397)
Res91547 = keras.layers.Reshape((1, 3, 1, 1), name = 'Res91547', )(Res87023)
Zer19527 = keras.layers.ZeroPadding3D(padding=((2, 0), (1, 0), (0, 0)), name = 'Zer19527', )(Res91547)
Con41859 = keras.layers.Concatenate(axis=4, name = 'Con41859', )([Zer19527,in0Con41859])
Cro74081 = keras.layers.Cropping3D(cropping=((1, 0), (2, 0), (0, 0)), name = 'Cro74081', )(in0Cro74081)
Zer59639 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (0, 0)), name = 'Zer59639', )(Cro74081)
Sub3521 = keras.layers.Subtract(name = 'Sub3521', )([Con41859,Zer59639])
Mul26391 = keras.layers.Multiply(name = 'Mul26391', )([in0Mul26391,in1Mul26391])
Zer68336 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (0, 0)), name = 'Zer68336', )(Mul26391)
Con52192 = keras.layers.Concatenate(axis=4, name = 'Con52192', )([Zer68336,in0Con52192])
Ave53167 = keras.layers.Average(name = 'Ave53167', )([Sub3521,Con52192])
Res47633 = keras.layers.Reshape((3, 4, 3), name = 'Res47633', )(Ave53167)
Max52288 = keras.layers.Maximum(name = 'Max52288', )([in0Max52288,in1Max52288])
Zer73330 = keras.layers.ZeroPadding2D(padding=((1, 0), (3, 0)), name = 'Zer73330', )(Max52288)
Con60621 = keras.layers.Concatenate(axis=3, name = 'Con60621', )([Zer73330,in0Con60621])
Mul75391 = keras.layers.Multiply(name = 'Mul75391', )([Res47633,Con60621])
model = tf.keras.models.Model(inputs=[in0Sep2397,in0Con41859,in0Cro74081,in0Mul26391,in1Mul26391,in0Con52192,in0Max52288,in1Max52288,in0Con60621], outputs=Mul75391)
w = model.get_layer('Sep2397').get_weights() 
w[0] = np.array([[[0.6083]]])
w[1] = np.array([[[0.3157, 0.9868, 0.4269]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep2397').set_weights(w) 
in0Sep2397 = tf.constant([[[0.4707]]])
in0Con41859 = tf.constant([[[[[0.0966, 0.8922]], [[0.6407, 0.1437]], [[0.1895, 0.9234]], [[0.4819, 0.866]]], [[[0.3443, 0.4242]], [[0.3524, 0.5626]], [[0.1878, 0.9063]], [[0.1642, 0.5873]]], [[[0.415, 0.7382]], [[0.8924, 0.534]], [[0.4979, 0.722]], [[0.7194, 0.6834]]]]])
in0Cro74081 = tf.constant([[[[[1.9727, 1.8287, 1.3628]], [[1.1803, 1.1292, 1.7416]], [[1.8337, 1.9334, 1.5596]], [[1.298, 1.2205, 1.4624]]], [[[1.5434, 1.92, 1.9308]], [[1.1221, 1.8021, 1.5822]], [[1.6749, 1.6667, 1.0208]], [[1.4826, 1.0713, 1.8077]]], [[[1.1297, 1.648, 1.3489]], [[1.5527, 1.2674, 1.8593]], [[1.9764, 1.1647, 1.5474]], [[1.3914, 1.1377, 1.2122]]], [[[1.9768, 1.4543, 1.5879]], [[1.5836, 1.1331, 1.8941]], [[1.5777, 1.5306, 1.4958]], [[1.6689, 1.21, 1.7738]]]]])
in0Mul26391 = tf.constant([[[[[0.653, 0.8463]], [[0.8091, 0.4553]]]]])
in1Mul26391 = tf.constant([[[[[0.9515, 0.3898]], [[0.6223, 0.2539]]]]])
in0Con52192 = tf.constant([[[[[0.2998]], [[0.9716]], [[0.1017]], [[0.0497]]], [[[0.2958]], [[0.5427]], [[0.5759]], [[0.9074]]], [[[0.7008]], [[0.8717]], [[0.8815]], [[0.1846]]]]])
in0Max52288 = tf.constant([[[[0.5468]], [[0.7962]]]])
in1Max52288 = tf.constant([[[[0.45]], [[0.295]]]])
in0Con60621 = tf.constant([[[[0.5152, 0.6068], [0.6793, 0.6666], [0.6706, 0.7071], [0.3109, 0.6718]], [[0.2898, 0.9987], [0.2361, 0.8887], [0.6475, 0.7612], [0.5398, 0.1303]], [[0.5701, 0.4262], [0.5517, 0.7891], [0.7982, 0.6153], [0.9086, 0.9904]]]])
print (np.array2string(model.predict([in0Sep2397,in0Con41859,in0Cro74081,in0Mul26391,in1Mul26391,in0Con52192,in0Max52288,in1Max52288,in0Con60621],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul75391.png')

LSep2397 = separable_conv1D_layer([[[0.4707]]], 1,[[[[0.6083]]],[[[0.3157, 0.9868, 0.4269]]]],[0, 0, 0], 1, false, Sep2397), 
LRes87023 = reshape_layer(Sep2397, [1, 3, 1], Res87023), 
LRes91547 = reshape_layer(Res87023, [1, 3, 1, 1], Res91547), 
LZer19527 = zero_padding3D_layer(Res91547, 2, 0, 1, 0, 0, 0, Zer19527), 
LCon41859 = concatenate_layer([Zer19527,[[[[[0.0966, 0.8922]], [[0.6407, 0.1437]], [[0.1895, 0.9234]], [[0.4819, 0.866]]], [[[0.3443, 0.4242]], [[0.3524, 0.5626]], [[0.1878, 0.9063]], [[0.1642, 0.5873]]], [[[0.415, 0.7382]], [[0.8924, 0.534]], [[0.4979, 0.722]], [[0.7194, 0.6834]]]]]], 4, Con41859), 
LCro74081 = cropping3D_layer([[[[[1.9727, 1.8287, 1.3628]], [[1.1803, 1.1292, 1.7416]], [[1.8337, 1.9334, 1.5596]], [[1.298, 1.2205, 1.4624]]], [[[1.5434, 1.92, 1.9308]], [[1.1221, 1.8021, 1.5822]], [[1.6749, 1.6667, 1.0208]], [[1.4826, 1.0713, 1.8077]]], [[[1.1297, 1.648, 1.3489]], [[1.5527, 1.2674, 1.8593]], [[1.9764, 1.1647, 1.5474]], [[1.3914, 1.1377, 1.2122]]], [[[1.9768, 1.4543, 1.5879]], [[1.5836, 1.1331, 1.8941]], [[1.5777, 1.5306, 1.4958]], [[1.6689, 1.21, 1.7738]]]]], 1, 0, 2, 0, 0, 0, Cro74081), 
LZer59639 = zero_padding3D_layer(Cro74081, 0, 0, 2, 0, 0, 0, Zer59639), 
LSub3521 = subtract_layer(Con41859,Zer59639, Sub3521), 
LMul26391 = multiply_layer([[[[[[0.653, 0.8463]], [[0.8091, 0.4553]]]]], [[[[[0.9515, 0.3898]], [[0.6223, 0.2539]]]]]], Mul26391), 
LZer68336 = zero_padding3D_layer(Mul26391, 2, 0, 2, 0, 0, 0, Zer68336), 
LCon52192 = concatenate_layer([Zer68336,[[[[[0.2998]], [[0.9716]], [[0.1017]], [[0.0497]]], [[[0.2958]], [[0.5427]], [[0.5759]], [[0.9074]]], [[[0.7008]], [[0.8717]], [[0.8815]], [[0.1846]]]]]], 4, Con52192), 
LAve53167 = average_layer([Sub3521,Con52192], Ave53167), 
LRes47633 = reshape_layer(Ave53167, [3, 4, 3], Res47633), 
LMax52288 = maximum_layer([[[[[0.5468]], [[0.7962]]]], [[[[0.45]], [[0.295]]]]], Max52288), 
LZer73330 = zero_padding2D_layer(Max52288, 1, 0, 3, 0, Zer73330), 
LCon60621 = concatenate_layer([Zer73330,[[[[0.5152, 0.6068], [0.6793, 0.6666], [0.6706, 0.7071], [0.3109, 0.6718]], [[0.2898, 0.9987], [0.2361, 0.8887], [0.6475, 0.7612], [0.5398, 0.1303]], [[0.5701, 0.4262], [0.5517, 0.7891], [0.7982, 0.6153], [0.9086, 0.9904]]]]], 3, Con60621), 
LMul75391 = multiply_layer([Res47633,Con60621], Mul75391), 
exec_layers([LSep2397,LRes87023,LRes91547,LZer19527,LCon41859,LCro74081,LZer59639,LSub3521,LMul26391,LZer68336,LCon52192,LAve53167,LRes47633,LMax52288,LZer73330,LCon60621,LMul75391],["Sep2397","Res87023","Res91547","Zer19527","Con41859","Cro74081","Zer59639","Sub3521","Mul26391","Zer68336","Con52192","Ave53167","Res47633","Max52288","Zer73330","Con60621","Mul75391"],Mul75391,"Mul75391")

Actual (Unparsed): [[[[0.0000000, 0.0248842, 0.3616528], [0.0000000, 0.2176138, 0.3717295], [-0.0000000, -0.4953052, 0.0015203], [-0.0000000, -0.0916222, -0.2996228]], [[0.0000000, 0.0498891, 0.3595320], [0.0000000, 0.0416008, 0.4911401], [-0.0000000, -0.3162714, -0.0248151], [-0.3804088, -0.2627476, 0.0184049]], [[0.0000000, 0.1182957, 0.3066509], [0.0000000, 0.2461685, 0.5546189], [-0.0000000, -0.2804923, 0.0331339], [-0.4152836, -0.1703622, -0.4485522]]]]

Expected (Unparsed): [[[[0,0.024884160000000002,0.3616528],[0,0.21761375500000002,0.37172949],[-0.0,-0.49530516,0.0015202650000000239],[-0.0,-0.09162222999999999,-0.2996228]],[[0,0.04988907,0.359532],[0,0.04160082,0.491140055],[-0.0,-0.316271375,-0.024815120000000055],[-0.38040875999999996,-0.26274764999999994,0.018404875000000005]],[[0,0.11829575,0.3066509],[0.0,0.24616854,0.554618935],[-0.0,-0.280492372966,0.03313390499999997],[-0.41528365003025913,-0.17036219561899996,-0.44855216]]]]

Actual:   [[[[0, 0.0249, 0.3617], [0, 0.2177, 0.3718], [-0, -0.4953, 0.0016], [-0, -0.0916, -0.2996]], [[0, 0.0499, 0.3596], [0, 0.0417, 0.4912], [-0, -0.3162, -0.0248], [-0.3804, -0.2627, 0.0185]], [[0, 0.1183, 0.3067], [0, 0.2462, 0.5547], [-0, -0.2804, 0.0332], [-0.4152, -0.1703, -0.4485]]]]

Expected: [[[[0, 0.0249, 0.3617], [0, 0.2177, 0.3718], [-0, -0.4953, 0.0016], [-0, -0.0916, -0.2996]], [[0, 0.0499, 0.3596], [0, 0.0417, 0.4912], [-0, -0.3162, -0.0248], [-0.3804, -0.2627, 0.0185]], [[0, 0.1183, 0.3067], [0, 0.2462, 0.5547], [-0, -0.2804, 0.0332], [-0.4152, -0.1703, -0.4485]]]]