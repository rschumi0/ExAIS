import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo26102 = tf.keras.layers.Input(shape=([2, 2]))
in0Con86129 = tf.keras.layers.Input(shape=([4, 3, 2, 1]))
in0Sub19090 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))
in1Sub19090 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))

Glo26102 = keras.layers.GlobalAveragePooling1D(name = 'Glo26102', )(in0Glo26102)
Res60976 = keras.layers.Reshape((2, 1), name = 'Res60976', )(Glo26102)
Res25354 = keras.layers.Reshape((2, 1, 1), name = 'Res25354', )(Res60976)
Sep86650 = keras.layers.SeparableConv2D(2, (1, 1),strides=(1, 1), padding='same', name = 'Sep86650', )(Res25354)
Zer75506 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer75506', )(Sep86650)
Res99448 = keras.layers.Reshape((4, 3, 2, 1), name = 'Res99448', )(Zer75506)
Con86129 = keras.layers.Concatenate(axis=4, name = 'Con86129', )([Res99448,in0Con86129])
Sub19090 = keras.layers.Subtract(name = 'Sub19090', )([in0Sub19090,in1Sub19090])
Zer81607 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (0, 0)), name = 'Zer81607', )(Sub19090)
Min89661 = keras.layers.Minimum(name = 'Min89661', )([Con86129,Zer81607])
model = tf.keras.models.Model(inputs=[in0Glo26102,in0Con86129,in0Sub19090,in1Sub19090], outputs=Min89661)
w = model.get_layer('Sep86650').get_weights() 
w[0] = np.array([[[[0.1704]]]])
w[1] = np.array([[[[0.5409, 0.9682]]]])
w[2] = np.array([0, 0])
model.get_layer('Sep86650').set_weights(w) 
in0Glo26102 = tf.constant([[[1.5901, 1.9165], [1.9864, 1.1952]]])
in0Con86129 = tf.constant([[[[[0.7232], [0.0212]], [[0.4847], [0.8244]], [[0.1228], [0.8824]]], [[[0.1702], [0.819]], [[0.0292], [0.1809]], [[0.8377], [0.2215]]], [[[0.2078], [0.0971]], [[0.7887], [0.1816]], [[0.6294], [0.3448]]], [[[0.3891], [0.606]], [[0.0186], [0.9662]], [[0.292], [0.1923]]]]])
in0Sub19090 = tf.constant([[[[[0.9737, 0.7675], [0.9244, 0.834]], [[0.1779, 0.3183], [0.9052, 0.2814]], [[0.1194, 0.1342], [0.1346, 0.4498]]], [[[0.0333, 0.2391], [0.2191, 0.0531]], [[0.0452, 0.5831], [0.9873, 0.5493]], [[0.2852, 0.5056], [0.3548, 0.778]]], [[[0.2732, 0.5296], [0.9844, 0.9772]], [[0.5463, 0.0336], [0.2461, 0.2216]], [[0.0095, 0.0914], [0.5104, 0.703]]]]])
in1Sub19090 = tf.constant([[[[[0.2941, 0.0442], [0.125, 0.6937]], [[0.4831, 0.1755], [0.5187, 0.4763]], [[0.9259, 0.1951], [0.7516, 0.0021]]], [[[0.5064, 0.1078], [0.4879, 0.5496]], [[0.6473, 0.4424], [0.8085, 0.1938]], [[0.5449, 0.7441], [0.4961, 0.4693]]], [[[0.6056, 0.7003], [0.4305, 0.2109]], [[0.8293, 0.257], [0.5117, 0.1917]], [[0.9272, 0.6142], [0.0925, 0.8416]]]]])
print (np.array2string(model.predict([in0Glo26102,in0Con86129,in0Sub19090,in1Sub19090],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min89661.png')

LGlo26102 = global_average_pooling1D_layer([[[1.5901, 1.9165], [1.9864, 1.1952]]], Glo26102), 
LRes60976 = reshape_layer(Glo26102, [2, 1], Res60976), 
LRes25354 = reshape_layer(Res60976, [2, 1, 1], Res25354), 
LSep86650 = separable_conv2D_layer(Res25354, 1, 1,[[[[[0.1704]]]],[[[[0.5409, 0.9682]]]]],[0, 0], 1, 1, true, Sep86650), 
LZer75506 = zero_padding2D_layer(Sep86650, 1, 1, 1, 1, Zer75506), 
LRes99448 = reshape_layer(Zer75506, [4, 3, 2, 1], Res99448), 
LCon86129 = concatenate_layer([Res99448,[[[[[0.7232], [0.0212]], [[0.4847], [0.8244]], [[0.1228], [0.8824]]], [[[0.1702], [0.819]], [[0.0292], [0.1809]], [[0.8377], [0.2215]]], [[[0.2078], [0.0971]], [[0.7887], [0.1816]], [[0.6294], [0.3448]]], [[[0.3891], [0.606]], [[0.0186], [0.9662]], [[0.292], [0.1923]]]]]], 4, Con86129), 
LSub19090 = subtract_layer([[[[[0.9737, 0.7675], [0.9244, 0.834]], [[0.1779, 0.3183], [0.9052, 0.2814]], [[0.1194, 0.1342], [0.1346, 0.4498]]], [[[0.0333, 0.2391], [0.2191, 0.0531]], [[0.0452, 0.5831], [0.9873, 0.5493]], [[0.2852, 0.5056], [0.3548, 0.778]]], [[[0.2732, 0.5296], [0.9844, 0.9772]], [[0.5463, 0.0336], [0.2461, 0.2216]], [[0.0095, 0.0914], [0.5104, 0.703]]]]], [[[[[0.2941, 0.0442], [0.125, 0.6937]], [[0.4831, 0.1755], [0.5187, 0.4763]], [[0.9259, 0.1951], [0.7516, 0.0021]]], [[[0.5064, 0.1078], [0.4879, 0.5496]], [[0.6473, 0.4424], [0.8085, 0.1938]], [[0.5449, 0.7441], [0.4961, 0.4693]]], [[[0.6056, 0.7003], [0.4305, 0.2109]], [[0.8293, 0.257], [0.5117, 0.1917]], [[0.9272, 0.6142], [0.0925, 0.8416]]]]], Sub19090), 
LZer81607 = zero_padding3D_layer(Sub19090, 1, 0, 0, 0, 0, 0, Zer81607), 
LMin89661 = minimum_layer([Con86129,Zer81607], Min89661), 
exec_layers([LGlo26102,LRes60976,LRes25354,LSep86650,LZer75506,LRes99448,LCon86129,LSub19090,LZer81607,LMin89661],["Glo26102","Res60976","Res25354","Sep86650","Zer75506","Res99448","Con86129","Sub19090","Zer81607","Min89661"],Min89661,"Min89661")

Actual (Unparsed): [[[[[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.1702000], [0.0000000, 0.1403000]], [[-0.3052000, 0.0292000], [0.2950278, -0.1949000]], [[-0.8065000, -0.0609000], [-0.6170000, 0.2215000]]], [[[-0.4731000, 0.1313000], [-0.2688000, -0.4965000]], [[-0.6021000, 0.1407000], [0.1788000, 0.1816000]], [[-0.2597000, -0.2385000], [-0.1413000, 0.3087000]]], [[[-0.3324000, -0.1707000], [0.0000000, 0.6060000]], [[-0.2830000, -0.2234000], [-0.2656000, 0.0299000]], [[-0.9177000, -0.5228000], [0.0000000, -0.1386000]]]]]

Expected (Unparsed): [[[[[0,0],[0,0]],[[0,0],[0,0]],[[0,0],[0,0]]],[[[0,0.1702],[0,0.14029999999999998]],[[-0.30519999999999997,0.0292],[0.29502777396,-0.19490000000000002]],[[-0.8065,-0.06089999999999998],[-0.617,0.2215]]],[[[-0.47309999999999997,0.1313],[-0.26880000000000004,-0.4965]],[[-0.6021,0.14069999999999994],[0.17879999999999996,0.1816]],[[-0.25970000000000004,-0.23849999999999993],[-0.14129999999999998,0.30870000000000003]]],[[[-0.33240000000000003,-0.17070000000000007],[0,0.606]],[[-0.28300000000000003,-0.22340000000000002],[-0.26560000000000006,0.029899999999999982]],[[-0.9177000000000001,-0.5227999999999999],[0,-0.13860000000000006]]]]]

Actual:   [[[[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]], [[[0, 0.1702], [0, 0.1403]], [[-0.3052, 0.0292], [0.2951, -0.1949]], [[-0.8065, -0.0609], [-0.617, 0.2215]]], [[[-0.4731, 0.1313], [-0.2688, -0.4965]], [[-0.6021, 0.1407], [0.1788, 0.1816]], [[-0.2597, -0.2385], [-0.1413, 0.3087]]], [[[-0.3324, -0.1707], [0, 0.606]], [[-0.283, -0.2234], [-0.2656, 0.0299]], [[-0.9177, -0.5228], [0, -0.1386]]]]]

Expected: [[[[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]], [[[0, 0.1702], [0, 0.1403]], [[-0.3051, 0.0292], [0.2951, -0.1949]], [[-0.8065, -0.0608], [-0.617, 0.2215]]], [[[-0.473, 0.1313], [-0.2688, -0.4965]], [[-0.6021, 0.1407], [0.1788, 0.1816]], [[-0.2597, -0.2384], [-0.1412, 0.3088]]], [[[-0.3324, -0.1707], [0, 0.606]], [[-0.283, -0.2234], [-0.2656, 0.0299]], [[-0.9177, -0.5227], [0, -0.1386]]]]]