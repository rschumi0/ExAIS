import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0GRU43725 = tf.keras.layers.Input(shape=([2, 3]))

GRU43725 = keras.layers.GRU(2,reset_after=False, recurrent_activation='sigmoid', name = 'GRU43725', )(in0GRU43725)
Res2133 = keras.layers.Reshape((2, 1), name = 'Res2133', )(GRU43725)
Res93853 = keras.layers.Reshape((2, 1, 1), name = 'Res93853', )(Res2133)
Res59286 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res59286', )(Res93853)
Up_97102 = keras.layers.UpSampling3D(size=(2, 2, 2), name = 'Up_97102', )(Res59286)
Res25720 = keras.layers.Reshape((4, 2, 2), name = 'Res25720', )(Up_97102)
Con55554 = keras.layers.Conv2DTranspose(4, (4, 2),strides=(9, 1), padding='same', name = 'Con55554', )(Res25720)
Res63133 = keras.layers.Reshape((36, 8), name = 'Res63133', )(Con55554)
Max98960 = keras.layers.MaxPool1D(pool_size=(10), name = 'Max98960', )(Res63133)
model = tf.keras.models.Model(inputs=[in0GRU43725], outputs=Max98960)
w = model.get_layer('GRU43725').get_weights() 
w[0] = np.array([[2, 9, 10, 5, 7, 8], [4, 1, 9, 10, 2, 5], [2, 5, 3, 6, 4, 3]])
w[1] = np.array([[6, 4, 8, 5, 9, 10], [7, 5, 10, 10, 8, 5]])
w[2] = np.array([6, 10, 5, 9, 2, 10])
model.get_layer('GRU43725').set_weights(w) 
w = model.get_layer('Con55554').get_weights() 
w[0] = np.array([[[[0.2039, 0.9619], [0.0669, 0.9917], [0.4283, 0.9148], [0.5311, 0.0507]], [[0.266, 0.1438], [0.4211, 0.6642], [0.5977, 0.3153], [0.4976, 0.3995]]], [[[0.8785, 0.9026], [0.2302, 0.928], [0.4533, 0.8032], [0.2551, 0.7376]], [[0.0834, 0.1068], [0.5797, 0.1138], [0.3791, 0.9208], [0.6509, 0.0983]]], [[[0.8429, 0.9954], [0.3706, 0.0505], [0.3975, 0.1281], [0.7628, 0.2485]], [[0.5999, 0.9739], [0.2768, 0.6959], [0.2219, 0.9383], [0.6442, 0.9265]]], [[[0.5164, 0.2897], [0.7989, 0.1355], [0.2816, 0.4896], [0.6153, 0.4117]], [[0.7877, 0.0127], [0.1253, 0.1881], [0.7347, 0.603], [0.4318, 0.2885]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con55554').set_weights(w) 
in0GRU43725 = tf.constant([[[5, 2, 7], [10, 5, 2]]])
print (np.array2string(model.predict([in0GRU43725],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max98960.png')

LGRU43725 = gru_layer([[[5, 2, 7], [10, 5, 2]]],[[2, 9, 10, 5, 7, 8], [4, 1, 9, 10, 2, 5], [2, 5, 3, 6, 4, 3]],[[6, 4, 8, 5, 9, 10], [7, 5, 10, 10, 8, 5]],[6, 10, 5, 9, 2, 10], false, GRU43725), 
LRes2133 = reshape_layer(GRU43725, [2, 1], Res2133), 
LRes93853 = reshape_layer(Res2133, [2, 1, 1], Res93853), 
LRes59286 = reshape_layer(Res93853, [2, 1, 1, 1], Res59286), 
LUp_97102 = up_sampling3D_layer(Res59286, 2, 2, 2, Up_97102), 
LRes25720 = reshape_layer(Up_97102, [4, 2, 2], Res25720), 
LCon55554 = conv2D_transpose_layer(Res25720, 4, 2,[[[[0.2039, 0.9619], [0.0669, 0.9917], [0.4283, 0.9148], [0.5311, 0.0507]], [[0.266, 0.1438], [0.4211, 0.6642], [0.5977, 0.3153], [0.4976, 0.3995]]], [[[0.8785, 0.9026], [0.2302, 0.928], [0.4533, 0.8032], [0.2551, 0.7376]], [[0.0834, 0.1068], [0.5797, 0.1138], [0.3791, 0.9208], [0.6509, 0.0983]]], [[[0.8429, 0.9954], [0.3706, 0.0505], [0.3975, 0.1281], [0.7628, 0.2485]], [[0.5999, 0.9739], [0.2768, 0.6959], [0.2219, 0.9383], [0.6442, 0.9265]]], [[[0.5164, 0.2897], [0.7989, 0.1355], [0.2816, 0.4896], [0.6153, 0.4117]], [[0.7877, 0.0127], [0.1253, 0.1881], [0.7347, 0.603], [0.4318, 0.2885]]]],[0, 0, 0, 0], 9, 1, true, Con55554), 
LRes63133 = reshape_layer(Con55554, [36, 8], Res63133), 
LMax98960 = max_pool1D_layer(Res63133, 10, Max98960), 
exec_layers([LGRU43725,LRes2133,LRes93853,LRes59286,LUp_97102,LRes25720,LCon55554,LRes63133,LMax98960],["GRU43725","Res2133","Res93853","Res59286","Up_97102","Res25720","Con55554","Res63133","Max98960"],Max98960,"Max98960")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]]]

Actual:   [[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]]

Expected: [[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]]