import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Bat56806 = tf.keras.layers.Input(shape=([1]))
in0Con21962 = tf.keras.layers.Input(shape=([47]))
in0Den81585 = tf.keras.layers.Input(shape=([3, 4, 3]))
in0Mul37241 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in1Mul37241 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Dot23776 = tf.keras.layers.Input(shape=([3]))
in1Dot23776 = tf.keras.layers.Input(shape=([3]))
in0Con99066 = tf.keras.layers.Input(shape=([47]))

Bat56806 = keras.layers.BatchNormalization(axis=1, epsilon=0.6962334926261856,  name = 'Bat56806', )(in0Bat56806)
Res69240 = keras.layers.Reshape((1, 1), name = 'Res69240', )(Bat56806)
Res22916 = keras.layers.Reshape((1, 1, 1), name = 'Res22916', )(Res69240)
Res4140 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res4140', )(Res22916)
Glo87851 = keras.layers.GlobalAveragePooling3D(name = 'Glo87851', )(Res4140)
Mas34331 = keras.layers.Masking(mask_value=1, name = 'Mas34331', )(Glo87851)
Con21962 = keras.layers.Concatenate(axis=1, name = 'Con21962', )([Mas34331,in0Con21962])
Den81585 = keras.layers.Dense(4,name = 'Den81585', )(in0Den81585)
Res60878 = keras.layers.Reshape((3, 4, 4, 1), name = 'Res60878', )(Den81585)
Mul37241 = keras.layers.Multiply(name = 'Mul37241', )([in0Mul37241,in1Mul37241])
Zer36479 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (3, 0)), name = 'Zer36479', )(Mul37241)
Min68708 = keras.layers.Minimum(name = 'Min68708', )([Res60878,Zer36479])
Res84914 = keras.layers.Reshape((3, 4, 4), name = 'Res84914', )(Min68708)
Res30235 = keras.layers.Reshape((3, 16), name = 'Res30235', )(Res84914)
Fla2296 = keras.layers.Flatten(name = 'Fla2296', )(Res30235)
Dot23776 = keras.layers.Dot(axes=(1, 1), name = 'Dot23776', )([in0Dot23776,in1Dot23776])
Con99066 = keras.layers.Concatenate(axis=1, name = 'Con99066', )([Dot23776,in0Con99066])
Max85074 = keras.layers.Maximum(name = 'Max85074', )([Fla2296,Con99066])
Min54859 = keras.layers.Minimum(name = 'Min54859', )([Con21962,Max85074])
model = tf.keras.models.Model(inputs=[in0Bat56806,in0Con21962,in0Den81585,in0Mul37241,in1Mul37241,in0Dot23776,in1Dot23776,in0Con99066], outputs=Min54859)
w = model.get_layer('Bat56806').get_weights() 
w[0] = np.array([0.1609])
w[1] = np.array([0.6832])
w[2] = np.array([0.8351])
w[3] = np.array([0.1883])
model.get_layer('Bat56806').set_weights(w) 
w = model.get_layer('Den81585').get_weights() 
w[0] = np.array([[0.374, 0.3112, 0.4372, 0.6602], [0.9701, 0.8099, 0.3731, 0.1399], [0.0571, 0.4019, 0.4681, 0.0434]])
w[1] = np.array([0.6509, 0.636, 0.6279, 0.7761])
model.get_layer('Den81585').set_weights(w) 
in0Bat56806 = tf.constant([[1.212]])
in0Con21962 = tf.constant([[0.5408, 0.5672, 0.11, 0.8196, 0.0368, 0.9828, 0.1292, 0.6276, 0.7318, 0.5941, 0.3387, 0.1022, 0.4812, 0.5178, 0.8325, 0.6617, 0.1786, 0.0901, 0.4217, 0.6806, 0.41, 0.7272, 0.0814, 0.4348, 0.9982, 0.593, 0.8119, 0.4319, 0.9109, 0.385, 0.4597, 0.1261, 0.1561, 0.7419, 0.3336, 0.967, 0.9685, 0.742, 0.769, 0.9697, 0.8022, 0.7154, 0.1522, 0.5077, 0.3883, 0.1238, 0.2938]])
in0Den81585 = tf.constant([[[[0.8151, 0.4313, 0.5653], [0.4262, 0.3666, 0.0058], [0.4859, 0.0978, 0.0277], [0.4554, 0.8671, 0.8831]], [[0.8349, 0.7036, 0.1489], [0.3669, 0.7629, 0.0402], [0.7636, 0.3304, 0.2021], [0.1737, 0.4971, 0.4006]], [[0.4293, 0.6433, 0.6462], [0.5249, 0.7919, 0.4683], [0.9049, 0.8038, 0.5387], [0.0685, 0.3317, 0.6998]]]])
in0Mul37241 = tf.constant([[[[[0.1053]], [[0.5617]]]]])
in1Mul37241 = tf.constant([[[[[0.3235]], [[0.5378]]]]])
in0Dot23776 = tf.constant([[0.1891, 0.5154, 0.2546]])
in1Dot23776 = tf.constant([[0.5139, 0.1321, 0.1089]])
in0Con99066 = tf.constant([[0.0373, 0.8149, 0.965, 0.3857, 0.4882, 0.3242, 0.9295, 0.0876, 0.0903, 0.0849, 0.3587, 0.2954, 0.9845, 0.7165, 0.9253, 0.4975, 0.8818, 0.2982, 0.5534, 0.8566, 0.8731, 0.4893, 0.0613, 0.3576, 0.9273, 0.6336, 0.5071, 0.0433, 0.0489, 0.7545, 0.6304, 0.8412, 0.5463, 0.9939, 0.6537, 0.1487, 0.3669, 0.966, 0.1051, 0.778, 0.0004, 0.7054, 0.2556, 0.0836, 0.018, 0.3712, 0.2248]])
print (np.array2string(model.predict([in0Bat56806,in0Con21962,in0Den81585,in0Mul37241,in1Mul37241,in0Dot23776,in1Dot23776,in0Con99066],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min54859.png')

LBat56806 = batch_normalization_layer([[1.212]], 1, 0.6962334926261856, [0.1609], [0.6832], [0.8351], [0.1883], Bat56806), 
LRes69240 = reshape_layer(Bat56806, [1, 1], Res69240), 
LRes22916 = reshape_layer(Res69240, [1, 1, 1], Res22916), 
LRes4140 = reshape_layer(Res22916, [1, 1, 1, 1], Res4140), 
LGlo87851 = global_average_pooling3D_layer(Res4140, Glo87851), 
LMas34331 = masking_layer(Glo87851, 1, Mas34331), 
LCon21962 = concatenate_layer([Mas34331,[[0.5408, 0.5672, 0.11, 0.8196, 0.0368, 0.9828, 0.1292, 0.6276, 0.7318, 0.5941, 0.3387, 0.1022, 0.4812, 0.5178, 0.8325, 0.6617, 0.1786, 0.0901, 0.4217, 0.6806, 0.41, 0.7272, 0.0814, 0.4348, 0.9982, 0.593, 0.8119, 0.4319, 0.9109, 0.385, 0.4597, 0.1261, 0.1561, 0.7419, 0.3336, 0.967, 0.9685, 0.742, 0.769, 0.9697, 0.8022, 0.7154, 0.1522, 0.5077, 0.3883, 0.1238, 0.2938]]], 1, Con21962), 
LDen81585 = dense_layer([[[[0.8151, 0.4313, 0.5653], [0.4262, 0.3666, 0.0058], [0.4859, 0.0978, 0.0277], [0.4554, 0.8671, 0.8831]], [[0.8349, 0.7036, 0.1489], [0.3669, 0.7629, 0.0402], [0.7636, 0.3304, 0.2021], [0.1737, 0.4971, 0.4006]], [[0.4293, 0.6433, 0.6462], [0.5249, 0.7919, 0.4683], [0.9049, 0.8038, 0.5387], [0.0685, 0.3317, 0.6998]]]], [[0.374, 0.3112, 0.4372, 0.6602], [0.9701, 0.8099, 0.3731, 0.1399], [0.0571, 0.4019, 0.4681, 0.0434]],[0.6509, 0.636, 0.6279, 0.7761], Den81585), 
LRes60878 = reshape_layer(Den81585, [3, 4, 4, 1], Res60878), 
LMul37241 = multiply_layer([[[[[[0.1053]], [[0.5617]]]]], [[[[[0.3235]], [[0.5378]]]]]], Mul37241), 
LZer36479 = zero_padding3D_layer(Mul37241, 2, 0, 2, 0, 3, 0, Zer36479), 
LMin68708 = minimum_layer([Res60878,Zer36479], Min68708), 
LRes84914 = reshape_layer(Min68708, [3, 4, 4], Res84914), 
LRes30235 = reshape_layer(Res84914, [3, 16], Res30235), 
LFla2296 = flatten_layer(Res30235, Fla2296), 
LDot23776 = dot_layer([[0.1891, 0.5154, 0.2546]], [[0.5139, 0.1321, 0.1089]], 1, 1, Dot23776), 
LCon99066 = concatenate_layer([Dot23776,[[0.0373, 0.8149, 0.965, 0.3857, 0.4882, 0.3242, 0.9295, 0.0876, 0.0903, 0.0849, 0.3587, 0.2954, 0.9845, 0.7165, 0.9253, 0.4975, 0.8818, 0.2982, 0.5534, 0.8566, 0.8731, 0.4893, 0.0613, 0.3576, 0.9273, 0.6336, 0.5071, 0.0433, 0.0489, 0.7545, 0.6304, 0.8412, 0.5463, 0.9939, 0.6537, 0.1487, 0.3669, 0.966, 0.1051, 0.778, 0.0004, 0.7054, 0.2556, 0.0836, 0.018, 0.3712, 0.2248]]], 1, Con99066), 
LMax85074 = maximum_layer([Fla2296,Con99066], Max85074), 
LMin54859 = minimum_layer([Con21962,Max85074], Min54859), 
exec_layers([LBat56806,LRes69240,LRes22916,LRes4140,LGlo87851,LMas34331,LCon21962,LDen81585,LRes60878,LMul37241,LZer36479,LMin68708,LRes84914,LRes30235,LFla2296,LDot23776,LCon99066,LMax85074,LMin54859],["Bat56806","Res69240","Res22916","Res4140","Glo87851","Mas34331","Con21962","Den81585","Res60878","Mul37241","Zer36479","Min68708","Res84914","Res30235","Fla2296","Dot23776","Con99066","Max85074","Min54859"],Min54859,"Min54859")

Actual (Unparsed): [[0.1929888, 0.0373000, 0.5672000, 0.1100000, 0.3857000, 0.0368000, 0.3242000, 0.1292000, 0.0876000, 0.0903000, 0.0849000, 0.3387000, 0.1022000, 0.4812000, 0.5178000, 0.8325000, 0.4975000, 0.1786000, 0.0901000, 0.4217000, 0.6806000, 0.4100000, 0.4893000, 0.0613000, 0.3576000, 0.9273000, 0.5930000, 0.5071000, 0.0433000, 0.0489000, 0.3850000, 0.4597000, 0.1261000, 0.1561000, 0.7419000, 0.3336000, 0.1487000, 0.3669000, 0.7420000, 0.1051000, 0.7780000, 0.0004000, 0.7054000, 0.1522000, 0.0836000, 0.0180000, 0.1238000, 0.2938000]]

Expected (Unparsed): [[0.19298877,0.0373,0.5672,0.11,0.3857,0.0368,0.3242,0.1292,0.0876,0.0903,0.0849,0.3387,0.1022,0.4812,0.5178,0.8325,0.4975,0.1786,0.0901,0.4217,0.6806,0.41,0.4893,0.0613,0.3576,0.9273,0.593,0.5071,0.0433,0.0489,0.385,0.4597,0.1261,0.1561,0.7419,0.3336,0.1487,0.3669,0.742,0.1051,0.778,0.0004,0.7054,0.1522,0.0836,0.018,0.1238,0.2938]]

Actual:   [[0.193, 0.0373, 0.5672, 0.11, 0.3857, 0.0368, 0.3242, 0.1292, 0.0876, 0.0903, 0.0849, 0.3387, 0.1022, 0.4812, 0.5178, 0.8325, 0.4975, 0.1786, 0.0901, 0.4217, 0.6806, 0.41, 0.4893, 0.0613, 0.3576, 0.9273, 0.593, 0.5071, 0.0433, 0.0489, 0.385, 0.4597, 0.1261, 0.1561, 0.7419, 0.3336, 0.1487, 0.3669, 0.742, 0.1051, 0.778, 0.0004, 0.7054, 0.1522, 0.0836, 0.018, 0.1238, 0.2938]]

Expected: [[0.193, 0.0373, 0.5672, 0.11, 0.3857, 0.0368, 0.3242, 0.1292, 0.0876, 0.0903, 0.0849, 0.3387, 0.1022, 0.4812, 0.5178, 0.8325, 0.4975, 0.1786, 0.0901, 0.4217, 0.6806, 0.41, 0.4893, 0.0613, 0.3576, 0.9273, 0.593, 0.5071, 0.0433, 0.0489, 0.385, 0.4597, 0.1261, 0.1561, 0.7419, 0.3336, 0.1487, 0.3669, 0.742, 0.1051, 0.778, 0.0004, 0.7054, 0.1522, 0.0836, 0.018, 0.1238, 0.2938]]