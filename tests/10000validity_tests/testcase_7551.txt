import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sep19712 = tf.keras.layers.Input(shape=([2, 1]))
in0Con49813 = tf.keras.layers.Input(shape=([4, 5, 2]))
in0Up_24065 = tf.keras.layers.Input(shape=([1, 3, 1]))

Sep19712 = keras.layers.SeparableConv1D(4, (1),strides=(1), padding='valid', name = 'Sep19712', )(in0Sep19712)
Lea7654 = keras.layers.LeakyReLU(alpha=4.833389831859472, name = 'Lea7654', )(Sep19712)
Lay70179 = keras.layers.LayerNormalization(axis=2, epsilon=2.5547939565503714, name = 'Lay70179', )(Lea7654)
Res58134 = keras.layers.Reshape((2, 4, 1), name = 'Res58134', )(Lay70179)
Zer59074 = keras.layers.ZeroPadding2D(padding=((2, 0), (1, 0)), name = 'Zer59074', )(Res58134)
Con49813 = keras.layers.Concatenate(axis=3, name = 'Con49813', )([Zer59074,in0Con49813])
Up_24065 = keras.layers.UpSampling2D(size=(2, 1), name = 'Up_24065', )(in0Up_24065)
Den84560 = keras.layers.Dense(3,name = 'Den84560', )(Up_24065)
Zer73234 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer73234', )(Den84560)
Mul91331 = keras.layers.Multiply(name = 'Mul91331', )([Con49813,Zer73234])
model = tf.keras.models.Model(inputs=[in0Sep19712,in0Con49813,in0Up_24065], outputs=Mul91331)
w = model.get_layer('Sep19712').get_weights() 
w[0] = np.array([[[0.9108]]])
w[1] = np.array([[[0.2318, 0.518, 0.5182, 0.2942]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep19712').set_weights(w) 
w = model.get_layer('Den84560').get_weights() 
w[0] = np.array([[0.8375, 0.0737, 0.0633]])
w[1] = np.array([0.9407, 0.1775, 0.0398])
model.get_layer('Den84560').set_weights(w) 
in0Sep19712 = tf.constant([[[0.819], [0.8989]]])
in0Con49813 = tf.constant([[[[0.5077, 0.7844], [0.7481, 0.6082], [0.2547, 0.4948], [0.1374, 0.2488], [0.1489, 0.8778]], [[0.9992, 0.4646], [0.9694, 0.7104], [0.8089, 0.6491], [0.386, 0.5449], [0.6739, 0.248]], [[0.5324, 0.2505], [0.4883, 0.4081], [0.6079, 0.1178], [0.3505, 0.627], [0.4345, 0.8505]], [[0.6433, 0.4557], [0.7596, 0.196], [0.4895, 0.3074], [0.1012, 0.8002], [0.2582, 0.3388]]]])
in0Up_24065 = tf.constant([[[[1.0923], [1.3764], [1.3083]]]])
print (np.array2string(model.predict([in0Sep19712,in0Con49813,in0Up_24065],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul91331.png')

LSep19712 = separable_conv1D_layer([[[0.819], [0.8989]]], 1,[[[[0.9108]]],[[[0.2318, 0.518, 0.5182, 0.2942]]]],[0, 0, 0, 0], 1, false, Sep19712), 
LLea7654 = leaky_relu_layer(Sep19712, 4.833389831859472, Lea7654), 
LLay70179 = layer_normalization_layer(Lea7654, 2, 2.5547939565503714, Lay70179), 
LRes58134 = reshape_layer(Lay70179, [2, 4, 1], Res58134), 
LZer59074 = zero_padding2D_layer(Res58134, 2, 0, 1, 0, Zer59074), 
LCon49813 = concatenate_layer([Zer59074,[[[[0.5077, 0.7844], [0.7481, 0.6082], [0.2547, 0.4948], [0.1374, 0.2488], [0.1489, 0.8778]], [[0.9992, 0.4646], [0.9694, 0.7104], [0.8089, 0.6491], [0.386, 0.5449], [0.6739, 0.248]], [[0.5324, 0.2505], [0.4883, 0.4081], [0.6079, 0.1178], [0.3505, 0.627], [0.4345, 0.8505]], [[0.6433, 0.4557], [0.7596, 0.196], [0.4895, 0.3074], [0.1012, 0.8002], [0.2582, 0.3388]]]]], 3, Con49813), 
LUp_24065 = up_sampling2D_layer([[[[1.0923], [1.3764], [1.3083]]]], 2, 1, Up_24065), 
LDen84560 = dense_layer(Up_24065, [[0.8375, 0.0737, 0.0633]],[0.9407, 0.1775, 0.0398], Den84560), 
LZer73234 = zero_padding2D_layer(Den84560, 1, 1, 1, 1, Zer73234), 
LMul91331 = multiply_layer([Con49813,Zer73234], Mul91331), 
exec_layers([LSep19712,LLea7654,LLay70179,LRes58134,LZer59074,LCon49813,LUp_24065,LDen84560,LZer73234,LMul91331],["Sep19712","Lea7654","Lay70179","Res58134","Zer59074","Con49813","Up_24065","Den84560","Zer73234","Mul91331"],Mul91331,"Mul91331")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.2501076, 0.0773928], [0.0000000, 0.2256351, 0.0823877], [0.0000000, 0.1057338, 0.0668131], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [-0.1372186, 0.1259826, 0.0444595], [0.1242903, 0.1695680, 0.0149519], [0.1210939, 0.0960096, 0.0768798], [-0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000]]]]

Expected (Unparsed): [[[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0.0,0.250107633194,0.077392815936],[0.0,0.22563511605199998,0.08238774449200001],[0.0,0.10573378005999999,0.066813126011],[0,0.0,0.0]],[[0,0.0,0.0],[-0.13721859069333167,0.12598262563299997,0.04445947097900001],[0.12429031537447421,0.169568039372,0.014951896936],[0.12109386569334549,0.09600955935499998,0.07687984952999999],[-0.0,0.0,0.0]],[[0,0.0,0.0],[-0.0,0.0,0.0],[0.0,0.0,0.0],[0.0,0.0,0.0],[-0.0,0.0,0.0]]]]

Actual:   [[[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0.2502, 0.0774], [0, 0.2257, 0.0824], [0, 0.1058, 0.0669], [0, 0, 0]], [[0, 0, 0], [-0.1372, 0.126, 0.0445], [0.1243, 0.1696, 0.015], [0.1211, 0.0961, 0.0769], [-0, 0, 0]], [[0, 0, 0], [-0, 0, 0], [0, 0, 0], [0, 0, 0], [-0, 0, 0]]]]

Expected: [[[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0.2502, 0.0774], [0, 0.2257, 0.0824], [0, 0.1058, 0.0669], [0, 0, 0]], [[0, 0, 0], [-0.1372, 0.126, 0.0445], [0.1243, 0.1696, 0.015], [0.1211, 0.0961, 0.0769], [-0, 0, 0]], [[0, 0, 0], [-0, 0, 0], [0, 0, 0], [0, 0, 0], [-0, 0, 0]]]]