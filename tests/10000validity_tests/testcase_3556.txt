import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave61140 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Ave61140 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))

Ave61140 = keras.layers.Average(name = 'Ave61140', )([in0Ave61140,in1Ave61140])
Fla19444 = keras.layers.Flatten(name = 'Fla19444', )(Ave61140)
model = tf.keras.models.Model(inputs=[in0Ave61140,in1Ave61140], outputs=Fla19444)
in0Ave61140 = tf.constant([[[[[0.9619, 0.3287], [0.3905, 0.8922]], [[0.665, 0.3733], [0.501, 0.3165]]], [[[0.6451, 0.3561], [0.1095, 0.9642]], [[0.1508, 0.4942], [0.9195, 0.8794]]]]])
in1Ave61140 = tf.constant([[[[[0.7032, 0.04], [0.3832, 0.7978]], [[0.8732, 0.0169], [0.2175, 0.6094]]], [[[0.8488, 0.7378], [0.456, 0.0024]], [[0.5534, 0.0483], [0.2932, 0.0059]]]]])
print (np.array2string(model.predict([in0Ave61140,in1Ave61140],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Fla19444.png')

LAve61140 = average_layer([[[[[[0.9619, 0.3287], [0.3905, 0.8922]], [[0.665, 0.3733], [0.501, 0.3165]]], [[[0.6451, 0.3561], [0.1095, 0.9642]], [[0.1508, 0.4942], [0.9195, 0.8794]]]]], [[[[[0.7032, 0.04], [0.3832, 0.7978]], [[0.8732, 0.0169], [0.2175, 0.6094]]], [[[0.8488, 0.7378], [0.456, 0.0024]], [[0.5534, 0.0483], [0.2932, 0.0059]]]]]], Ave61140), 
LFla19444 = flatten_layer(Ave61140, Fla19444), 
exec_layers([LAve61140,LFla19444],["Ave61140","Fla19444"],Fla19444,"Fla19444")

Actual (Unparsed): [[0.8325500, 0.1843500, 0.3868500, 0.8450000, 0.7691000, 0.1951000, 0.3592500, 0.4629500, 0.7469500, 0.5469500, 0.2827500, 0.4833000, 0.3521000, 0.2712500, 0.6063500, 0.4426500]]

Expected (Unparsed): [[0.83255,0.18434999999999999,0.38685,0.845,0.7691,0.1951,0.35925,0.46295000000000003,0.74695,0.54695,0.28275,0.48329999999999995,0.35209999999999997,0.27125,0.60635,0.44265]]

Actual:   [[0.8326, 0.1844, 0.3869, 0.845, 0.7691, 0.1951, 0.3593, 0.463, 0.747, 0.547, 0.2828, 0.4833, 0.3521, 0.2713, 0.6064, 0.4427]]

Expected: [[0.8326, 0.1844, 0.3869, 0.845, 0.7691, 0.1951, 0.3593, 0.463, 0.747, 0.547, 0.2828, 0.4833, 0.3521, 0.2713, 0.6064, 0.4427]]