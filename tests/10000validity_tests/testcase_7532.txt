import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul8055 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))
in1Mul8055 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))

Mul8055 = keras.layers.Multiply(name = 'Mul8055', )([in0Mul8055,in1Mul8055])
Den11881 = keras.layers.Dense(4,name = 'Den11881', )(Mul8055)
model = tf.keras.models.Model(inputs=[in0Mul8055,in1Mul8055], outputs=Den11881)
w = model.get_layer('Den11881').get_weights() 
w[0] = np.array([[0.7829, 0.0207, 0.249, 0.0875], [0.3447, 0.0838, 0.0306, 0.5346]])
w[1] = np.array([0.1417, 0.1938, 0.6572, 0.3682])
model.get_layer('Den11881').set_weights(w) 
in0Mul8055 = tf.constant([[[[[0.9206, 0.3526], [0.7254, 0.2507]], [[0.1641, 0.7642], [0.169, 0.0456]]]]])
in1Mul8055 = tf.constant([[[[[0.5516, 0.0212], [0.2648, 0.6099]], [[0.4764, 0.6907], [0.0874, 0.1818]]]]])
print (np.array2string(model.predict([in0Mul8055,in1Mul8055],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Den11881.png')

LMul8055 = multiply_layer([[[[[[0.9206, 0.3526], [0.7254, 0.2507]], [[0.1641, 0.7642], [0.169, 0.0456]]]]], [[[[[0.5516, 0.0212], [0.2648, 0.6099]], [[0.4764, 0.6907], [0.0874, 0.1818]]]]]], Mul8055), 
LDen11881 = dense_layer(Mul8055, [[0.7829, 0.0207, 0.249, 0.0875], [0.3447, 0.0838, 0.0306, 0.5346]],[0.1417, 0.1938, 0.6572, 0.3682], Den11881), 
exec_layers([LMul8055,LDen11881],["Mul8055","Den11881"],Den11881,"Den11881")

Actual (Unparsed): [[[[[0.5418356, 0.2049379, 0.7838717, 0.4166290], [0.3447894, 0.2105894, 0.7097082, 0.4667489]], [[0.3848490, 0.2396507, 0.6928178, 0.6572200], [0.1561215, 0.1948005, 0.6611316, 0.3739243]]]]]

Expected (Unparsed): [[[[[0.541835611248,0.204937936328,0.783871675712,0.416628958152],[0.344789362039,0.21058936027800002,0.7097081931379999,0.46674888977800005]],[[0.384848975614,0.23965066924,0.692817820724,0.657219998224],[0.15612149331599998,0.194800460124,0.661131555848,0.37392430426800005]]]]]

Actual:   [[[[[0.5419, 0.205, 0.7839, 0.4167], [0.3448, 0.2106, 0.7098, 0.4668]], [[0.3849, 0.2397, 0.6929, 0.6573], [0.1562, 0.1949, 0.6612, 0.374]]]]]

Expected: [[[[[0.5419, 0.205, 0.7839, 0.4167], [0.3448, 0.2106, 0.7098, 0.4668]], [[0.3849, 0.2397, 0.6929, 0.6573], [0.1562, 0.1949, 0.6612, 0.374]]]]]