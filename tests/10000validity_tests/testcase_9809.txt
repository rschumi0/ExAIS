import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave24236 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in1Ave24236 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Sep10679 = tf.keras.layers.Input(shape=([2, 1]))
in0Con78246 = tf.keras.layers.Input(shape=([2, 10]))
in0Den62137 = tf.keras.layers.Input(shape=([5, 4, 5]))

Ave24236 = keras.layers.Average(name = 'Ave24236', )([in0Ave24236,in1Ave24236])
Res96634 = keras.layers.Reshape((1, 2, 1), name = 'Res96634', )(Ave24236)
Res58030 = keras.layers.Reshape((1, 2), name = 'Res58030', )(Res96634)
Zer49437 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer49437', )(Res58030)
Sep10679 = keras.layers.SeparableConv1D(2, (1),strides=(1), padding='valid', name = 'Sep10679', )(in0Sep10679)
Add46727 = keras.layers.Add(name = 'Add46727', )([Zer49437,Sep10679])
Con78246 = keras.layers.Concatenate(axis=2, name = 'Con78246', )([Add46727,in0Con78246])
Den62137 = keras.layers.Dense(3,name = 'Den62137', )(in0Den62137)
Res42485 = keras.layers.Reshape((5, 12), name = 'Res42485', )(Den62137)
Dot54740 = keras.layers.Dot(axes=(2, 2), name = 'Dot54740', )([Con78246,Res42485])
Max40560 = keras.layers.MaxPool1D(pool_size=(2), strides=(1), padding='valid', name = 'Max40560', )(Dot54740)
ReL82653 = keras.layers.ReLU(max_value=4.95142234857398, negative_slope=9.643029031342088, threshold=3.3219133536813183, name = 'ReL82653', )(Max40560)
model = tf.keras.models.Model(inputs=[in0Ave24236,in1Ave24236,in0Sep10679,in0Con78246,in0Den62137], outputs=ReL82653)
w = model.get_layer('Sep10679').get_weights() 
w[0] = np.array([[[0.3102]]])
w[1] = np.array([[[0.4415, 0.1614]]])
w[2] = np.array([0, 0])
model.get_layer('Sep10679').set_weights(w) 
w = model.get_layer('Den62137').get_weights() 
w[0] = np.array([[0.8252, 0.3249, 0.4154], [0.8184, 0.008, 0.6122], [0.6705, 0.273, 0.6172], [0.8413, 0.3684, 0.9733], [0.6506, 0.9655, 0.7748]])
w[1] = np.array([0.4793, 0.9751, 0.5655])
model.get_layer('Den62137').set_weights(w) 
in0Ave24236 = tf.constant([[[[[0.3001]], [[0.6091]]]]])
in1Ave24236 = tf.constant([[[[[0.6358]], [[0.492]]]]])
in0Sep10679 = tf.constant([[[0.8031], [0.6737]]])
in0Con78246 = tf.constant([[[0.5822, 0.0357, 0.6271, 0.4239, 0.8198, 0.2279, 0.7974, 0.279, 0.2444, 0.4331], [0.3929, 0.8223, 0.3129, 0.9934, 0.5516, 0.9974, 0.4381, 0.345, 0.5706, 0.0125]]])
in0Den62137 = tf.constant([[[[0.0761, 0.6213, 0.9553, 0.7635, 0.7891], [0.796, 0.7122, 0.9731, 0.1619, 0.2464], [0.4532, 0.7148, 0.2337, 0.6859, 0.588], [0.7623, 0.0386, 0.3862, 0.3488, 0.6634]], [[0.4535, 0.5798, 0.8265, 0.7799, 0.3759], [0.3418, 0.5101, 0.7335, 0.2128, 0.706], [0.9432, 0.9612, 0.4688, 0.2728, 0.6254], [0.4194, 0.689, 0.9791, 0.9554, 0.214]], [[0.1337, 0.0153, 0.838, 0.078, 0.3404], [0.1014, 0.557, 0.1729, 0.1626, 0.4619], [0.6557, 0.6448, 0.9668, 0.8751, 0.8595], [0.7333, 0.4159, 0.1171, 0.5265, 0.999]], [[0.6686, 0.9661, 0.7156, 0.4158, 0.8876], [0.6909, 0.7283, 0.6525, 0.6621, 0.6059], [0.8964, 0.862, 0.3232, 0.8438, 0.4637], [0.6892, 0.1594, 0.9707, 0.6418, 0.0113]], [[0.2239, 0.4471, 0.3075, 0.1312, 0.7665], [0.2262, 0.3529, 0.7618, 0.3177, 0.9716], [0.3997, 0.1557, 0.1108, 0.4758, 0.4466], [0.1638, 0.8308, 0.867, 0.0288, 0.8404]]]])
print (np.array2string(model.predict([in0Ave24236,in1Ave24236,in0Sep10679,in0Con78246,in0Den62137],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='ReL82653.png')

LAve24236 = average_layer([[[[[[0.3001]], [[0.6091]]]]], [[[[[0.6358]], [[0.492]]]]]], Ave24236), 
LRes96634 = reshape_layer(Ave24236, [1, 2, 1], Res96634), 
LRes58030 = reshape_layer(Res96634, [1, 2], Res58030), 
LZer49437 = zero_padding1D_layer(Res58030, 1, 0, Zer49437), 
LSep10679 = separable_conv1D_layer([[[0.8031], [0.6737]]], 1,[[[[0.3102]]],[[[0.4415, 0.1614]]]],[0, 0], 1, false, Sep10679), 
LAdd46727 = add_layer([Zer49437,Sep10679], Add46727), 
LCon78246 = concatenate_layer([Add46727,[[[0.5822, 0.0357, 0.6271, 0.4239, 0.8198, 0.2279, 0.7974, 0.279, 0.2444, 0.4331], [0.3929, 0.8223, 0.3129, 0.9934, 0.5516, 0.9974, 0.4381, 0.345, 0.5706, 0.0125]]]], 2, Con78246), 
LDen62137 = dense_layer([[[[0.0761, 0.6213, 0.9553, 0.7635, 0.7891], [0.796, 0.7122, 0.9731, 0.1619, 0.2464], [0.4532, 0.7148, 0.2337, 0.6859, 0.588], [0.7623, 0.0386, 0.3862, 0.3488, 0.6634]], [[0.4535, 0.5798, 0.8265, 0.7799, 0.3759], [0.3418, 0.5101, 0.7335, 0.2128, 0.706], [0.9432, 0.9612, 0.4688, 0.2728, 0.6254], [0.4194, 0.689, 0.9791, 0.9554, 0.214]], [[0.1337, 0.0153, 0.838, 0.078, 0.3404], [0.1014, 0.557, 0.1729, 0.1626, 0.4619], [0.6557, 0.6448, 0.9668, 0.8751, 0.8595], [0.7333, 0.4159, 0.1171, 0.5265, 0.999]], [[0.6686, 0.9661, 0.7156, 0.4158, 0.8876], [0.6909, 0.7283, 0.6525, 0.6621, 0.6059], [0.8964, 0.862, 0.3232, 0.8438, 0.4637], [0.6892, 0.1594, 0.9707, 0.6418, 0.0113]], [[0.2239, 0.4471, 0.3075, 0.1312, 0.7665], [0.2262, 0.3529, 0.7618, 0.3177, 0.9716], [0.3997, 0.1557, 0.1108, 0.4758, 0.4466], [0.1638, 0.8308, 0.867, 0.0288, 0.8404]]]], [[0.8252, 0.3249, 0.4154], [0.8184, 0.008, 0.6122], [0.6705, 0.273, 0.6172], [0.8413, 0.3684, 0.9733], [0.6506, 0.9655, 0.7748]],[0.4793, 0.9751, 0.5655], Den62137), 
LRes42485 = reshape_layer(Den62137, [5, 12], Res42485), 
LDot54740 = dot_layer(Con78246,Res42485, 2, 2, Dot54740), 
LMax40560 = max_pool1D_layer(Dot54740, 2, 1, false, Max40560), 
LReL82653 = relu_layer(Max40560, 4.95142234857398, 9.643029031342088, 3.3219133536813183, ReL82653), 
exec_layers([LAve24236,LRes96634,LRes58030,LZer49437,LSep10679,LAdd46727,LCon78246,LDen62137,LRes42485,LDot54740,LMax40560,LReL82653],["Ave24236","Res96634","Res58030","Zer49437","Sep10679","Add46727","Con78246","Den62137","Res42485","Dot54740","Max40560","ReL82653"],ReL82653,"ReL82653")

Actual (Unparsed): [[[4.9514223, 4.9514223, 4.9514223, 4.9514223, 4.9514223]]]

Expected (Unparsed): [[[4.95142234857398,4.95142234857398,4.95142234857398,4.95142234857398,4.95142234857398]]]

Actual:   [[[4.9515, 4.9515, 4.9515, 4.9515, 4.9515]]]

Expected: [[[4.9515, 4.9515, 4.9515, 4.9515, 4.9515]]]