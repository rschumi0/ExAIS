import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul61424 = tf.keras.layers.Input(shape=([1, 1]))
in1Mul61424 = tf.keras.layers.Input(shape=([1, 1]))
in0Con77195 = tf.keras.layers.Input(shape=([1, 3]))
in0Sof76423 = tf.keras.layers.Input(shape=([1, 2, 2]))

Mul61424 = keras.layers.Multiply(name = 'Mul61424', )([in0Mul61424,in1Mul61424])
Res52321 = keras.layers.Reshape((1, 1, 1), name = 'Res52321', )(Mul61424)
Sep18277 = keras.layers.SeparableConv2D(3, (1, 1),strides=(1, 1), padding='valid', name = 'Sep18277', )(Res52321)
Res83538 = keras.layers.Reshape((1, 3), name = 'Res83538', )(Sep18277)
Con77195 = keras.layers.Concatenate(axis=2, name = 'Con77195', )([Res83538,in0Con77195])
Sof76423 = keras.layers.Softmax(axis=1, name = 'Sof76423', input_shape=(1, 2, 2))(in0Sof76423)
Den41200 = keras.layers.Dense(4,name = 'Den41200', )(Sof76423)
Den6005 = keras.layers.Dense(3,name = 'Den6005', )(Den41200)
Res41561 = keras.layers.Reshape((1, 6), name = 'Res41561', )(Den6005)
Dot5521 = keras.layers.Dot(axes=(1, 1), name = 'Dot5521', )([Con77195,Res41561])
model = tf.keras.models.Model(inputs=[in0Mul61424,in1Mul61424,in0Con77195,in0Sof76423], outputs=Dot5521)
w = model.get_layer('Sep18277').get_weights() 
w[0] = np.array([[[[0.5523]]]])
w[1] = np.array([[[[0.9738, 0.6145, 0.6826]]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep18277').set_weights(w) 
w = model.get_layer('Den41200').get_weights() 
w[0] = np.array([[0.9334, 0.1804, 0.5222, 0.1725], [0.5472, 0.994, 0.5577, 0.7123]])
w[1] = np.array([0.0789, 0.5813, 0.8434, 0.4075])
model.get_layer('Den41200').set_weights(w) 
w = model.get_layer('Den6005').get_weights() 
w[0] = np.array([[0.1119, 0.1984, 0.3725], [0.3632, 0.4391, 0.62], [0.2393, 0.9478, 0.825], [0.3661, 0.3849, 0.4661]])
w[1] = np.array([0.6816, 0.6974, 0.8531])
model.get_layer('Den6005').set_weights(w) 
in0Mul61424 = tf.constant([[[0.5295]]])
in1Mul61424 = tf.constant([[[0.0296]]])
in0Con77195 = tf.constant([[[0.033, 0.7365, 0.1127]]])
in0Sof76423 = tf.constant([[[[0.5598, 0.6809], [0.6024, 0.2283]]]])
print (np.array2string(model.predict([in0Mul61424,in1Mul61424,in0Con77195,in0Sof76423],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Dot5521.png')

LMul61424 = multiply_layer([[[[0.5295]]], [[[0.0296]]]], Mul61424), 
LRes52321 = reshape_layer(Mul61424, [1, 1, 1], Res52321), 
LSep18277 = separable_conv2D_layer(Res52321, 1, 1,[[[[[0.5523]]]],[[[[0.9738, 0.6145, 0.6826]]]]],[0, 0, 0], 1, 1, false, Sep18277), 
LRes83538 = reshape_layer(Sep18277, [1, 3], Res83538), 
LCon77195 = concatenate_layer([Res83538,[[[0.033, 0.7365, 0.1127]]]], 2, Con77195), 
LSof76423 = softmax_layer([[[[0.5598, 0.6809], [0.6024, 0.2283]]]], 1, Sof76423), 
LDen41200 = dense_layer(Sof76423, [[0.9334, 0.1804, 0.5222, 0.1725], [0.5472, 0.994, 0.5577, 0.7123]],[0.0789, 0.5813, 0.8434, 0.4075], Den41200), 
LDen6005 = dense_layer(Den41200, [[0.1119, 0.1984, 0.3725], [0.3632, 0.4391, 0.62], [0.2393, 0.9478, 0.825], [0.3661, 0.3849, 0.4661]],[0.6816, 0.6974, 0.8531], Den6005), 
LRes41561 = reshape_layer(Den6005, [1, 6], Res41561), 
LDot5521 = dot_layer(Con77195,Res41561, 1, 1, Dot5521), 
exec_layers([LMul61424,LRes52321,LSep18277,LRes83538,LCon77195,LSof76423,LDen41200,LDen6005,LRes41561,LDot5521],["Mul61424","Res52321","Sep18277","Res83538","Con77195","Sof76423","Den41200","Den6005","Res41561","Dot5521"],Dot5521,"Dot5521")

Actual (Unparsed): [[[0.0204596, 0.0345445, 0.0397166, 0.0204596, 0.0345445, 0.0397166], [0.0129107, 0.0217987, 0.0250625, 0.0129107, 0.0217987, 0.0250625], [0.0143414, 0.0242145, 0.0278400, 0.0143414, 0.0242145, 0.0278400], [0.0800955, 0.1352354, 0.1554832, 0.0800955, 0.1352354, 0.1554832], [1.7875850, 3.0182085, 3.4701018, 1.7875850, 3.0182085, 3.4701018], [0.2735381, 0.4618494, 0.5309986, 0.2735381, 0.4618494, 0.5309986]]]

Expected (Unparsed): [[[0.020459566316070397,0.03454450437742516,0.03971658891719638,0.020459566316070397,0.03454450437742516,0.03971658891719638],[0.012910662868376733,0.021798724522415037,0.02506248088890653,0.012910662868376733,0.021798724522415037,0.02506248088890653],[0.014341445848582516,0.0242144985500415,0.02783995029254287,0.014341445848582516,0.0242144985500415,0.02783995029254287],[0.08009545533000001,0.13523540844,0.15548317224,0.08009545533000001,0.13523540844,0.15548317224],[1.7875849348650004,3.01820843382,3.47010170772,1.7875849348650004,3.01820843382,3.47010170772],[0.27353811562700003,0.46184941003599994,0.5309985912559999,0.27353811562700003,0.46184941003599994,0.5309985912559999]]]

Actual:   [[[0.0205, 0.0346, 0.0398, 0.0205, 0.0346, 0.0398], [0.013, 0.0218, 0.0251, 0.013, 0.0218, 0.0251], [0.0144, 0.0243, 0.0279, 0.0144, 0.0243, 0.0279], [0.0801, 0.1353, 0.1555, 0.0801, 0.1353, 0.1555], [1.7876, 3.0183, 3.4702, 1.7876, 3.0183, 3.4702], [0.2736, 0.4619, 0.531, 0.2736, 0.4619, 0.531]]]

Expected: [[[0.0205, 0.0346, 0.0398, 0.0205, 0.0346, 0.0398], [0.013, 0.0218, 0.0251, 0.013, 0.0218, 0.0251], [0.0144, 0.0243, 0.0279, 0.0144, 0.0243, 0.0279], [0.0801, 0.1353, 0.1555, 0.0801, 0.1353, 0.1555], [1.7876, 3.0183, 3.4702, 1.7876, 3.0183, 3.4702], [0.2736, 0.4619, 0.531, 0.2736, 0.4619, 0.531]]]