import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add65506 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Add65506 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Con83760 = tf.keras.layers.Input(shape=([28]))
in0Ave65340 = tf.keras.layers.Input(shape=([2, 1]))
in0Con49692 = tf.keras.layers.Input(shape=([2, 2, 2, 3]))
in0Con37399 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Dot71353 = tf.keras.layers.Input(shape=([2]))
in1Dot71353 = tf.keras.layers.Input(shape=([2]))
in0Con22434 = tf.keras.layers.Input(shape=([31]))

Add65506 = keras.layers.Add(name = 'Add65506', )([in0Add65506,in1Add65506])
Res40334 = keras.layers.Reshape((2, 2), name = 'Res40334', )(Add65506)
Fla64557 = keras.layers.Flatten(name = 'Fla64557', )(Res40334)
Con83760 = keras.layers.Concatenate(axis=1, name = 'Con83760', )([Fla64557,in0Con83760])
Ave65340 = keras.layers.AveragePooling1D(pool_size=(2), strides=(1), padding='same', name = 'Ave65340', )(in0Ave65340)
Res99422 = keras.layers.Reshape((2, 1, 1), name = 'Res99422', )(Ave65340)
Res82625 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res82625', )(Res99422)
Zer66919 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (1, 0)), name = 'Zer66919', )(Res82625)
Con49692 = keras.layers.Concatenate(axis=4, name = 'Con49692', )([Zer66919,in0Con49692])
Con37399 = keras.layers.Conv3D(4, (1, 2, 1),strides=(1, 1, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con37399', )(in0Con37399)
Max80781 = keras.layers.Maximum(name = 'Max80781', )([Con49692,Con37399])
Res67117 = keras.layers.Reshape((2, 2, 8), name = 'Res67117', )(Max80781)
Res14557 = keras.layers.Reshape((2, 16), name = 'Res14557', )(Res67117)
Fla37566 = keras.layers.Flatten(name = 'Fla37566', )(Res14557)
Dot71353 = keras.layers.Dot(axes=(1, 1), name = 'Dot71353', )([in0Dot71353,in1Dot71353])
Con22434 = keras.layers.Concatenate(axis=1, name = 'Con22434', )([Dot71353,in0Con22434])
Add43552 = keras.layers.Add(name = 'Add43552', )([Fla37566,Con22434])
Ave80826 = keras.layers.Average(name = 'Ave80826', )([Con83760,Add43552])
model = tf.keras.models.Model(inputs=[in0Add65506,in1Add65506,in0Con83760,in0Ave65340,in0Con49692,in0Con37399,in0Dot71353,in1Dot71353,in0Con22434], outputs=Ave80826)
w = model.get_layer('Con37399').get_weights() 
w[0] = np.array([[[[[0.0525, 0.6446, 0.9132, 0.366]]], [[[0.1839, 0.2925, 0.8478, 0.8136]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con37399').set_weights(w) 
in0Add65506 = tf.constant([[[[0.5801, 0.6532]], [[0.2031, 0.6007]]]])
in1Add65506 = tf.constant([[[[0.0345, 0.9747]], [[0.7364, 0.0471]]]])
in0Con83760 = tf.constant([[0.311, 0.2223, 0.3874, 0.7179, 0.3791, 0.9125, 0.7165, 0.5643, 0.3849, 0.6876, 0.8143, 0.5191, 0.2186, 0.871, 0.2755, 0.7166, 0.0489, 0.6678, 0.6699, 0.667, 0.8767, 0.2386, 0.7945, 0.5642, 0.7122, 0.2563, 0.3459, 0.3209]])
in0Ave65340 = tf.constant([[[1.4558], [1.9455]]])
in0Con49692 = tf.constant([[[[[0.1393, 0.6078, 0.6408], [0.1435, 0.0897, 0.4083]], [[0.6836, 0.7241, 0.6032], [0.3166, 0.4265, 0.0398]]], [[[0.7849, 0.9235, 0.0188], [0.8086, 0.3358, 0.5265]], [[0.7116, 0.0865, 0.9458], [0.4562, 0.8847, 0.7916]]]]])
in0Con37399 = tf.constant([[[[[0.1471], [0.4104]], [[0.2481], [0.0789]]], [[[0.7718], [0.4496]], [[0.7596], [0.1845]]]]])
in0Dot71353 = tf.constant([[0.9643, 0.0662]])
in1Dot71353 = tf.constant([[0.5156, 0.9587]])
in0Con22434 = tf.constant([[0.9511, 0.2354, 0.933, 0.3905, 0.964, 0.244, 0.3891, 0.888, 0.6217, 0.5972, 0.9512, 0.5745, 0.2344, 0.3577, 0.0857, 0.4618, 0.5839, 0.2376, 0.776, 0.8909, 0.9675, 0.6566, 0.7573, 0.1318, 0.2245, 0.1725, 0.577, 0.8288, 0.8183, 0.8844, 0.6896]])
print (np.array2string(model.predict([in0Add65506,in1Add65506,in0Con83760,in0Ave65340,in0Con49692,in0Con37399,in0Dot71353,in1Dot71353,in0Con22434],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave80826.png')

LAdd65506 = add_layer([[[[[0.5801, 0.6532]], [[0.2031, 0.6007]]]], [[[[0.0345, 0.9747]], [[0.7364, 0.0471]]]]], Add65506), 
LRes40334 = reshape_layer(Add65506, [2, 2], Res40334), 
LFla64557 = flatten_layer(Res40334, Fla64557), 
LCon83760 = concatenate_layer([Fla64557,[[0.311, 0.2223, 0.3874, 0.7179, 0.3791, 0.9125, 0.7165, 0.5643, 0.3849, 0.6876, 0.8143, 0.5191, 0.2186, 0.871, 0.2755, 0.7166, 0.0489, 0.6678, 0.6699, 0.667, 0.8767, 0.2386, 0.7945, 0.5642, 0.7122, 0.2563, 0.3459, 0.3209]]], 1, Con83760), 
LAve65340 = average_pooling1D_layer([[[1.4558], [1.9455]]], 2, 1, true, Ave65340), 
LRes99422 = reshape_layer(Ave65340, [2, 1, 1], Res99422), 
LRes82625 = reshape_layer(Res99422, [2, 1, 1, 1], Res82625), 
LZer66919 = zero_padding3D_layer(Res82625, 0, 0, 1, 0, 1, 0, Zer66919), 
LCon49692 = concatenate_layer([Zer66919,[[[[[0.1393, 0.6078, 0.6408], [0.1435, 0.0897, 0.4083]], [[0.6836, 0.7241, 0.6032], [0.3166, 0.4265, 0.0398]]], [[[0.7849, 0.9235, 0.0188], [0.8086, 0.3358, 0.5265]], [[0.7116, 0.0865, 0.9458], [0.4562, 0.8847, 0.7916]]]]]], 4, Con49692), 
LCon37399 = conv3D_layer([[[[[0.1471], [0.4104]], [[0.2481], [0.0789]]], [[[0.7718], [0.4496]], [[0.7596], [0.1845]]]]], 1, 2, 1,[[[[[0.0525, 0.6446, 0.9132, 0.366]]], [[[0.1839, 0.2925, 0.8478, 0.8136]]]]],[0, 0, 0, 0], 1, 1, 1, true, 1, 1, 1, Con37399), 
LMax80781 = maximum_layer([Con49692,Con37399], Max80781), 
LRes67117 = reshape_layer(Max80781, [2, 2, 8], Res67117), 
LRes14557 = reshape_layer(Res67117, [2, 16], Res14557), 
LFla37566 = flatten_layer(Res14557, Fla37566), 
LDot71353 = dot_layer([[0.9643, 0.0662]], [[0.5156, 0.9587]], 1, 1, Dot71353), 
LCon22434 = concatenate_layer([Dot71353,[[0.9511, 0.2354, 0.933, 0.3905, 0.964, 0.244, 0.3891, 0.888, 0.6217, 0.5972, 0.9512, 0.5745, 0.2344, 0.3577, 0.0857, 0.4618, 0.5839, 0.2376, 0.776, 0.8909, 0.9675, 0.6566, 0.7573, 0.1318, 0.2245, 0.1725, 0.577, 0.8288, 0.8183, 0.8844, 0.6896]]], 1, Con22434), 
LAdd43552 = add_layer([Fla37566,Con22434], Add43552), 
LAve80826 = average_layer([Con83760,Add43552], Ave80826), 
exec_layers([LAdd65506,LRes40334,LFla64557,LCon83760,LAve65340,LRes99422,LRes82625,LZer66919,LCon49692,LCon37399,LMax80781,LRes67117,LRes14557,LFla37566,LDot71353,LCon22434,LAdd43552,LAve80826],["Add65506","Res40334","Fla64557","Con83760","Ave65340","Res99422","Res82625","Zer66919","Con49692","Con37399","Max80781","Res67117","Res14557","Fla37566","Dot71353","Con22434","Add43552","Ave80826"],Ave80826,"Ave80826")

Actual (Unparsed): [[0.6143037, 1.3731949, 0.8913500, 1.1108000, 0.3687779, 0.7369610, 0.5365344, 0.7576500, 0.6400626, 1.1089000, 1.0189000, 1.0593500, 1.3300250, 0.6193000, 0.7992500, 0.3223000, 0.4303050, 1.1199000, 0.9309483, 1.1965447, 0.4986668, 1.2219500, 0.9467469, 0.9754000, 0.5241895, 0.5873500, 0.8303333, 1.0435000, 1.7432500, 0.7654000, 1.0575000, 0.9010500]]

Expected (Unparsed): [[0.6143036799999999,1.3731949549999998,0.89135,1.1108,0.36877785500000004,0.7369610449999999,0.5365343499999999,0.7576499999999999,0.640062625,1.1089,1.0189,1.05935,1.330025,0.6193,0.79925,0.32230000000000003,0.43030497,1.1199,0.9309483200000002,1.1965446800000001,0.498666775,1.22195,0.9467469100000001,0.9753999999999999,0.5241895,0.58735,0.83033336,1.0434999999999999,1.7432500000000002,0.7654,1.0574999999999999,0.9010499999999999]]

Actual:   [[0.6144, 1.3732, 0.8914, 1.1108, 0.3688, 0.737, 0.5366, 0.7577, 0.6401, 1.1089, 1.0189, 1.0594, 1.3301, 0.6193, 0.7993, 0.3223, 0.4304, 1.1199, 0.931, 1.1966, 0.4987, 1.222, 0.9468, 0.9754, 0.5242, 0.5874, 0.8304, 1.0435, 1.7433, 0.7654, 1.0575, 0.9011]]

Expected: [[0.6144, 1.3732, 0.8914, 1.1108, 0.3688, 0.737, 0.5366, 0.7577, 0.6401, 1.1089, 1.0189, 1.0594, 1.3301, 0.6193, 0.7993, 0.3224, 0.4304, 1.1199, 0.931, 1.1966, 0.4987, 1.222, 0.9468, 0.9754, 0.5242, 0.5874, 0.8304, 1.0435, 1.7433, 0.7654, 1.0575, 0.9011]]