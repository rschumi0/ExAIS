import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min16930 = tf.keras.layers.Input(shape=([2, 1]))
in1Min16930 = tf.keras.layers.Input(shape=([2, 1]))
in0Con84268 = tf.keras.layers.Input(shape=([2, 3]))
in0Lea19315 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Con68571 = tf.keras.layers.Input(shape=([2, 4, 1]))
in0Mul1514 = tf.keras.layers.Input(shape=([2, 2]))
in1Mul1514 = tf.keras.layers.Input(shape=([2, 2]))
in0Ave33233 = tf.keras.layers.Input(shape=([2, 1, 2]))

Min16930 = keras.layers.Minimum(name = 'Min16930', )([in0Min16930,in1Min16930])
Con84268 = keras.layers.Concatenate(axis=2, name = 'Con84268', )([Min16930,in0Con84268])
Lea19315 = keras.layers.LeakyReLU(alpha=2.9546036021282664, name = 'Lea19315', input_shape=(1, 2, 1, 1))(in0Lea19315)
Res87887 = keras.layers.Reshape((1, 2, 1), name = 'Res87887', )(Lea19315)
Res82985 = keras.layers.Reshape((1, 2), name = 'Res82985', )(Res87887)
Sep77516 = keras.layers.SeparableConv1D(4, (1),strides=(1), padding='valid', name = 'Sep77516', )(Res82985)
Sof64575 = keras.layers.Softmax(axis=1, name = 'Sof64575', )(Sep77516)
Zer32311 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer32311', )(Sof64575)
Max55414 = keras.layers.Maximum(name = 'Max55414', )([Con84268,Zer32311])
Res94503 = keras.layers.Reshape((2, 4, 1), name = 'Res94503', )(Max55414)
Con68571 = keras.layers.Concatenate(axis=3, name = 'Con68571', )([Res94503,in0Con68571])
Mul1514 = keras.layers.Multiply(name = 'Mul1514', )([in0Mul1514,in1Mul1514])
Res59868 = keras.layers.Reshape((2, 2, 1), name = 'Res59868', )(Mul1514)
Res74048 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res74048', )(Res59868)
Con98126 = keras.layers.Conv3D(2, (1, 2, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con98126', )(Res74048)
Res97291 = keras.layers.Reshape((2, 1, 2), name = 'Res97291', )(Con98126)
Ave33233 = keras.layers.AveragePooling2D(pool_size=(2, 1), name = 'Ave33233', )(in0Ave33233)
Zer70384 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer70384', )(Ave33233)
Max60673 = keras.layers.Maximum(name = 'Max60673', )([Res97291,Zer70384])
Zer56817 = keras.layers.ZeroPadding2D(padding=((0, 0), (3, 0)), name = 'Zer56817', )(Max60673)
Sub31589 = keras.layers.Subtract(name = 'Sub31589', )([Con68571,Zer56817])
model = tf.keras.models.Model(inputs=[in0Min16930,in1Min16930,in0Con84268,in0Lea19315,in0Con68571,in0Mul1514,in1Mul1514,in0Ave33233], outputs=Sub31589)
w = model.get_layer('Sep77516').get_weights() 
w[0] = np.array([[[0.2979], [0.1264]]])
w[1] = np.array([[[0.5213, 0.9406, 0.3652, 0.6495], [0.1082, 0.9827, 0.0543, 0.5155]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep77516').set_weights(w) 
w = model.get_layer('Con98126').get_weights() 
w[0] = np.array([[[[[0.2867, 0.7721]]], [[[0.4562, 0.4685]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con98126').set_weights(w) 
in0Min16930 = tf.constant([[[0.7237], [0.2166]]])
in1Min16930 = tf.constant([[[0.3248], [0.0689]]])
in0Con84268 = tf.constant([[[0.3428, 0.5569, 0.009], [0.0121, 0.9586, 0.8788]]])
in0Lea19315 = tf.constant([[[[[0.2116]], [[0.0965]]]]])
in0Con68571 = tf.constant([[[[0.1281], [0.1073], [0.1775], [0.2567]], [[0.1936], [0.5392], [0.8405], [0.9675]]]])
in0Mul1514 = tf.constant([[[0.8174, 0.2933], [0.9065, 0.9322]]])
in1Mul1514 = tf.constant([[[0.947, 0.1239], [0.5491, 0.6923]]])
in0Ave33233 = tf.constant([[[[1.0916, 1.6916]], [[1.4397, 1.9206]]]])
print (np.array2string(model.predict([in0Min16930,in1Min16930,in0Con84268,in0Lea19315,in0Con68571,in0Mul1514,in1Mul1514,in0Ave33233],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub31589.png')

LMin16930 = minimum_layer([[[[0.7237], [0.2166]]], [[[0.3248], [0.0689]]]], Min16930), 
LCon84268 = concatenate_layer([Min16930,[[[0.3428, 0.5569, 0.009], [0.0121, 0.9586, 0.8788]]]], 2, Con84268), 
LLea19315 = leaky_relu_layer([[[[[0.2116]], [[0.0965]]]]], 2.9546036021282664, Lea19315), 
LRes87887 = reshape_layer(Lea19315, [1, 2, 1], Res87887), 
LRes82985 = reshape_layer(Res87887, [1, 2], Res82985), 
LSep77516 = separable_conv1D_layer(Res82985, 1,[[[[0.2979], [0.1264]]],[[[0.5213, 0.9406, 0.3652, 0.6495], [0.1082, 0.9827, 0.0543, 0.5155]]]],[0, 0, 0, 0], 1, false, Sep77516), 
LSof64575 = softmax_layer(Sep77516, 1, Sof64575), 
LZer32311 = zero_padding1D_layer(Sof64575, 1, 0, Zer32311), 
LMax55414 = maximum_layer([Con84268,Zer32311], Max55414), 
LRes94503 = reshape_layer(Max55414, [2, 4, 1], Res94503), 
LCon68571 = concatenate_layer([Res94503,[[[[0.1281], [0.1073], [0.1775], [0.2567]], [[0.1936], [0.5392], [0.8405], [0.9675]]]]], 3, Con68571), 
LMul1514 = multiply_layer([[[[0.8174, 0.2933], [0.9065, 0.9322]]], [[[0.947, 0.1239], [0.5491, 0.6923]]]], Mul1514), 
LRes59868 = reshape_layer(Mul1514, [2, 2, 1], Res59868), 
LRes74048 = reshape_layer(Res59868, [2, 2, 1, 1], Res74048), 
LCon98126 = conv3D_layer(Res74048, 1, 2, 1,[[[[[0.2867, 0.7721]]], [[[0.4562, 0.4685]]]]],[0, 0], 1, 1, 1, false, 1, 1, 1, Con98126), 
LRes97291 = reshape_layer(Con98126, [2, 1, 2], Res97291), 
LAve33233 = average_pooling2D_layer([[[[1.0916, 1.6916]], [[1.4397, 1.9206]]]], 2, 1, Ave33233), 
LZer70384 = zero_padding2D_layer(Ave33233, 1, 0, 0, 0, Zer70384), 
LMax60673 = maximum_layer([Res97291,Zer70384], Max60673), 
LZer56817 = zero_padding2D_layer(Max60673, 0, 0, 3, 0, Zer56817), 
LSub31589 = subtract_layer(Con68571,Zer56817, Sub31589), 
exec_layers([LMin16930,LCon84268,LLea19315,LRes87887,LRes82985,LSep77516,LSof64575,LZer32311,LMax55414,LRes94503,LCon68571,LMul1514,LRes59868,LRes74048,LCon98126,LRes97291,LAve33233,LZer70384,LMax60673,LZer56817,LSub31589],["Min16930","Con84268","Lea19315","Res87887","Res82985","Sep77516","Sof64575","Zer32311","Max55414","Res94503","Con68571","Mul1514","Res59868","Res74048","Con98126","Res97291","Ave33233","Zer70384","Max60673","Zer56817","Sub31589"],Sub31589,"Sub31589")

Actual (Unparsed): [[[[0.3248000, 0.1281000], [0.3428000, 0.1073000], [0.5569000, 0.1775000], [-0.2295064, -0.3579907]], [[1.0000000, 0.1936000], [1.0000000, 0.5392000], [1.0000000, 0.8405000], [-0.2656500, -0.8386000]]]]

Expected (Unparsed): [[[[0.3248,0.1281],[0.3428,0.1073],[0.5569,0.1775],[-0.22950635395399996,-0.35799069847500004]],[[1.0,0.1936],[1.0,0.5392],[1.0,0.8405],[-0.26564999999999994,-0.8386]]]]

Actual:   [[[[0.3248, 0.1281], [0.3428, 0.1073], [0.5569, 0.1775], [-0.2295, -0.3579]], [[1, 0.1936], [1, 0.5392], [1, 0.8405], [-0.2656, -0.8386]]]]

Expected: [[[[0.3248, 0.1281], [0.3428, 0.1073], [0.5569, 0.1775], [-0.2295, -0.3579]], [[1, 0.1936], [1, 0.5392], [1, 0.8405], [-0.2656, -0.8386]]]]