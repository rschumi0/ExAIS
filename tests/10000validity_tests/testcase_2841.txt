import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Den36073 = tf.keras.layers.Input(shape=([3, 2]))
in0Max66547 = tf.keras.layers.Input(shape=([1, 1]))
in0Con1876 = tf.keras.layers.Input(shape=([23]))

Den36073 = keras.layers.Dense(4,name = 'Den36073', )(in0Den36073)
Up_61143 = keras.layers.UpSampling1D(size=(2), name = 'Up_61143', )(Den36073)
Fla57615 = keras.layers.Flatten(name = 'Fla57615', )(Up_61143)
Max66547 = keras.layers.MaxPool1D(pool_size=(1), strides=(1), padding='same', name = 'Max66547', )(in0Max66547)
Res62200 = keras.layers.Reshape((1, 1, 1), name = 'Res62200', )(Max66547)
Glo1330 = keras.layers.GlobalAveragePooling2D(name = 'Glo1330', )(Res62200)
Con1876 = keras.layers.Concatenate(axis=1, name = 'Con1876', )([Glo1330,in0Con1876])
Mul72038 = keras.layers.Multiply(name = 'Mul72038', )([Fla57615,Con1876])
Res46723 = keras.layers.Reshape((24, 1), name = 'Res46723', )(Mul72038)
Ave22652 = keras.layers.AveragePooling1D(pool_size=(18), strides=(1), padding='same', name = 'Ave22652', )(Res46723)
model = tf.keras.models.Model(inputs=[in0Den36073,in0Max66547,in0Con1876], outputs=Ave22652)
w = model.get_layer('Den36073').get_weights() 
w[0] = np.array([[0.2277, 0.7502, 0.2095, 0.9111], [0.3583, 0.5508, 0.1145, 0.2653]])
w[1] = np.array([0.725, 0.072, 0.1465, 0.5981])
model.get_layer('Den36073').set_weights(w) 
in0Den36073 = tf.constant([[[0.9056, 0.7173], [0.9156, 0.0654], [0.1949, 0.8165]]])
in0Max66547 = tf.constant([[[1.7258]]])
in0Con1876 = tf.constant([[0.0069, 0.6143, 0.0524, 0.7029, 0.7412, 0.078, 0.5073, 0.7317, 0.6961, 0.2652, 0.1451, 0.3755, 0.5865, 0.2316, 0.3733, 0.4403, 0.1304, 0.498, 0.2245, 0.446, 0.8727, 0.0234, 0.4021]])
print (np.array2string(model.predict([in0Den36073,in0Max66547,in0Con1876],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave22652.png')

LDen36073 = dense_layer([[[0.9056, 0.7173], [0.9156, 0.0654], [0.1949, 0.8165]]], [[0.2277, 0.7502, 0.2095, 0.9111], [0.3583, 0.5508, 0.1145, 0.2653]],[0.725, 0.072, 0.1465, 0.5981], Den36073), 
LUp_61143 = up_sampling1D_layer(Den36073, 2, Up_61143), 
LFla57615 = flatten_layer(Up_61143, Fla57615), 
LMax66547 = max_pool1D_layer([[[1.7258]]], 1, 1, true, Max66547), 
LRes62200 = reshape_layer(Max66547, [1, 1, 1], Res62200), 
LGlo1330 = global_average_pooling2D_layer(Res62200, Glo1330), 
LCon1876 = concatenate_layer([Glo1330,[[0.0069, 0.6143, 0.0524, 0.7029, 0.7412, 0.078, 0.5073, 0.7317, 0.6961, 0.2652, 0.1451, 0.3755, 0.5865, 0.2316, 0.3733, 0.4403, 0.1304, 0.498, 0.2245, 0.446, 0.8727, 0.0234, 0.4021]]], 1, Con1876), 
LMul72038 = multiply_layer([Fla57615,Con1876], Mul72038), 
LRes46723 = reshape_layer(Mul72038, [24, 1], Res46723), 
LAve22652 = average_pooling1D_layer(Res46723, 18, 1, true, Ave22652), 
exec_layers([LDen36073,LUp_61143,LFla57615,LMax66547,LRes62200,LGlo1330,LCon1876,LMul72038,LRes46723,LAve22652],["Den36073","Up_61143","Fla57615","Max66547","Res62200","Glo1330","Con1876","Mul72038","Res46723","Ave22652"],Ave22652,"Ave22652")

Actual (Unparsed): [[[0.6189695], [0.5710366], [0.5409790], [0.5270053], [0.5226630], [0.4931580], [0.4961579], [0.4944761], [0.4718441], [0.3656902], [0.3776268], [0.3896616], [0.4173486], [0.3713139], [0.3462715], [0.3647209], [0.3363582], [0.3121037], [0.2948730], [0.3105011], [0.3188475], [0.3151680], [0.3000636], [0.3245052]]]

Expected (Unparsed): [[[0.6189695050195],[0.5710366303631818],[0.5409789747894166],[0.5270053274956153],[0.5226629498573571],[0.49315800556019995],[0.49615786496731246],[0.4944761128165294],[0.4718440876751666],[0.3656901731019444],[0.37762676481616664],[0.38966155316977774],[0.4173485624778889],[0.3713138841423889],[0.3462714737208334],[0.3647208771220589],[0.3363581559731251],[0.3121037222648001],[0.29487301122771425],[0.3105010979529231],[0.3188474591591667],[0.31516799544909097],[0.300063590938],[0.3245052359977778]]]

Actual:   [[[0.619], [0.5711], [0.541], [0.5271], [0.5227], [0.4932], [0.4962], [0.4945], [0.4719], [0.3657], [0.3777], [0.3897], [0.4174], [0.3714], [0.3463], [0.3648], [0.3364], [0.3122], [0.2949], [0.3106], [0.3189], [0.3152], [0.3001], [0.3246]]]

Expected: [[[0.619], [0.5711], [0.541], [0.5271], [0.5227], [0.4932], [0.4962], [0.4945], [0.4719], [0.3657], [0.3777], [0.3897], [0.4174], [0.3714], [0.3463], [0.3648], [0.3364], [0.3122], [0.2949], [0.3106], [0.3189], [0.3152], [0.3001], [0.3246]]]