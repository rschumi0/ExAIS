import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul1398 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))
in1Mul1398 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))
in0Con47205 = tf.keras.layers.Input(shape=([2, 2]))
in0Glo30626 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Con50947 = tf.keras.layers.Input(shape=([2, 1]))
in0Ave76606 = tf.keras.layers.Input(shape=([2, 2]))
in1Ave76606 = tf.keras.layers.Input(shape=([2, 2]))
in0Con89344 = tf.keras.layers.Input(shape=([2, 1]))
in0Sub37747 = tf.keras.layers.Input(shape=([3, 3, 3, 2]))
in1Sub37747 = tf.keras.layers.Input(shape=([3, 3, 3, 2]))
in0Ave78278 = tf.keras.layers.Input(shape=([1, 2]))
in1Ave78278 = tf.keras.layers.Input(shape=([1, 2]))
in0Con38254 = tf.keras.layers.Input(shape=([2, 1]))

Mul1398 = keras.layers.Multiply(name = 'Mul1398', )([in0Mul1398,in1Mul1398])
Res58033 = keras.layers.Reshape((1, 1, 1), name = 'Res58033', )(Mul1398)
Res88997 = keras.layers.Reshape((1, 1), name = 'Res88997', )(Res58033)
Zer14765 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer14765', )(Res88997)
Con47205 = keras.layers.Concatenate(axis=2, name = 'Con47205', )([Zer14765,in0Con47205])
Glo30626 = keras.layers.GlobalAveragePooling2D(name = 'Glo30626', )(in0Glo30626)
Res51399 = keras.layers.Reshape((2, 1), name = 'Res51399', )(Glo30626)
Con50947 = keras.layers.Concatenate(axis=2, name = 'Con50947', )([Res51399,in0Con50947])
Ave76606 = keras.layers.Average(name = 'Ave76606', )([in0Ave76606,in1Ave76606])
Dot810 = keras.layers.Dot(axes=(1, 2), name = 'Dot810', )([Con50947,Ave76606])
Con89344 = keras.layers.Concatenate(axis=2, name = 'Con89344', )([Dot810,in0Con89344])
Sub37747 = keras.layers.Subtract(name = 'Sub37747', )([in0Sub37747,in1Sub37747])
Res7100 = keras.layers.Reshape((3, 3, 6), name = 'Res7100', )(Sub37747)
Res91306 = keras.layers.Reshape((3, 18), name = 'Res91306', )(Res7100)
Sep43834 = keras.layers.SeparableConv1D(3, (3),strides=(2), padding='valid', name = 'Sep43834', )(Res91306)
Zer66468 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer66468', )(Sep43834)
Max75162 = keras.layers.Maximum(name = 'Max75162', )([Con89344,Zer66468])
Ave78278 = keras.layers.Average(name = 'Ave78278', )([in0Ave78278,in1Ave78278])
Zer38706 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer38706', )(Ave78278)
Con38254 = keras.layers.Concatenate(axis=2, name = 'Con38254', )([Zer38706,in0Con38254])
Min8476 = keras.layers.Minimum(name = 'Min8476', )([Max75162,Con38254])
Add45347 = keras.layers.Add(name = 'Add45347', )([Con47205,Min8476])
model = tf.keras.models.Model(inputs=[in0Mul1398,in1Mul1398,in0Con47205,in0Glo30626,in0Con50947,in0Ave76606,in1Ave76606,in0Con89344,in0Sub37747,in1Sub37747,in0Ave78278,in1Ave78278,in0Con38254], outputs=Add45347)
w = model.get_layer('Sep43834').get_weights() 
w[0] = np.array([[[0.698], [0.2899], [0.805], [0.0497], [0.6313], [0.9011], [0.7001], [0.6775], [0.0943], [0.4941], [0.5118], [0.3734], [0.338], [0.9256], [0.9516], [0.2427], [0.957], [0.8584]], [[0.6923], [0.646], [0.4423], [0.9122], [0.1697], [0.9916], [0.0496], [0.1659], [0.553], [0.3093], [0.596], [0.8828], [0.2844], [0.6318], [0.8847], [0.9611], [0.8191], [0.6017]], [[0.0743], [0.0128], [0.4516], [0.3947], [0.4604], [0.1685], [0.409], [0.0035], [0.8165], [0.6722], [0.7084], [0.1624], [0.6537], [0.0806], [0.633], [0.7101], [0.5017], [0.4172]]])
w[1] = np.array([[[0.9494, 0.2253, 0.3417], [0.2673, 0.1513, 0.8718], [0.6054, 0.1512, 0.6624], [0.8372, 0.1051, 0.1311], [0.6766, 0.02, 0.8175], [0.6784, 0.4989, 0.1654], [0.8426, 0.5827, 0.146], [0.5405, 0.8979, 0.0691], [0.8806, 0.6412, 0.3598], [0.4077, 0.1761, 0.0091], [0.6773, 0.8458, 0.4004], [0.6855, 0.1637, 0.1613], [0.3263, 0.5677, 0.8884], [0.3876, 0.4311, 0.9479], [0.6266, 0.2919, 0.8306], [0.815, 0.6065, 0.0036], [0.6066, 0.0755, 0.0946], [0.7817, 0.2361, 0.7139]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep43834').set_weights(w) 
in0Mul1398 = tf.constant([[[[[0.3953]]]]])
in1Mul1398 = tf.constant([[[[[0.6492]]]]])
in0Con47205 = tf.constant([[[0.4737, 0.774], [0.7845, 0.7849]]])
in0Glo30626 = tf.constant([[[[1.1014, 1.1035], [1.5314, 1.5185]]]])
in0Con50947 = tf.constant([[[0.9715], [0.702]]])
in0Ave76606 = tf.constant([[[0.5482, 0.4102], [0.4803, 0.4073]]])
in1Ave76606 = tf.constant([[[0.8174, 0.7717], [0.0018, 0.5207]]])
in0Con89344 = tf.constant([[[0.2117], [0.2136]]])
in0Sub37747 = tf.constant([[[[[0.4421, 0.6018], [0.5385, 0.2436], [0.0758, 0.0501]], [[0.0475, 0.6101], [0.359, 0.7902], [0.0618, 0.611]], [[0.7488, 0.7517], [0.5205, 0.5985], [0.895, 0.0768]]], [[[0.1026, 0.7512], [0.1708, 0.233], [0.8938, 0.4163]], [[0.3904, 0.5249], [0.2239, 0.1609], [0.579, 0.213]], [[0.422, 0.5309], [0.9027, 0.0703], [0.0542, 0.843]]], [[[0.5067, 0.4837], [0.932, 0.8166], [0.0656, 0.1456]], [[0.8109, 0.4875], [0.307, 0.9681], [0.2319, 0.6449]], [[0.6323, 0.1003], [0.4048, 0.9758], [0.2306, 0.8352]]]]])
in1Sub37747 = tf.constant([[[[[0.377, 0.2148], [0.7575, 0.7479], [0.9892, 0.8542]], [[0.7348, 0.626], [0.2801, 0.3925], [0.3147, 0.6239]], [[0.0669, 0.6705], [0.9488, 0.6003], [0.4064, 0.5807]]], [[[0.8034, 0.7849], [0.5184, 0.3177], [0.4714, 0.7588]], [[0.5386, 0.3861], [0.6441, 0.2316], [0.1648, 0.7802]], [[0.9272, 0.2504], [0.8528, 0.1052], [0.9138, 0.2879]]], [[[0.7286, 0.9268], [0.9561, 0.1184], [0.7921, 0.298]], [[0.8217, 0.5177], [0.3045, 0.2449], [0.5626, 0.5958]], [[0.477, 0.9684], [0.4764, 0.0117], [0.7061, 0.6599]]]]])
in0Ave78278 = tf.constant([[[0.0012, 0.4043]]])
in1Ave78278 = tf.constant([[[0.6401, 0.1222]]])
in0Con38254 = tf.constant([[[0.1386], [0.3166]]])
print (np.array2string(model.predict([in0Mul1398,in1Mul1398,in0Con47205,in0Glo30626,in0Con50947,in0Ave76606,in1Ave76606,in0Con89344,in0Sub37747,in1Sub37747,in0Ave78278,in1Ave78278,in0Con38254],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add45347.png')

LMul1398 = multiply_layer([[[[[[0.3953]]]]], [[[[[0.6492]]]]]], Mul1398), 
LRes58033 = reshape_layer(Mul1398, [1, 1, 1], Res58033), 
LRes88997 = reshape_layer(Res58033, [1, 1], Res88997), 
LZer14765 = zero_padding1D_layer(Res88997, 1, 0, Zer14765), 
LCon47205 = concatenate_layer([Zer14765,[[[0.4737, 0.774], [0.7845, 0.7849]]]], 2, Con47205), 
LGlo30626 = global_average_pooling2D_layer([[[[1.1014, 1.1035], [1.5314, 1.5185]]]], Glo30626), 
LRes51399 = reshape_layer(Glo30626, [2, 1], Res51399), 
LCon50947 = concatenate_layer([Res51399,[[[0.9715], [0.702]]]], 2, Con50947), 
LAve76606 = average_layer([[[[0.5482, 0.4102], [0.4803, 0.4073]]], [[[0.8174, 0.7717], [0.0018, 0.5207]]]], Ave76606), 
LDot810 = dot_layer(Con50947,Ave76606, 1, 2, Dot810), 
LCon89344 = concatenate_layer([Dot810,[[[0.2117], [0.2136]]]], 2, Con89344), 
LSub37747 = subtract_layer([[[[[0.4421, 0.6018], [0.5385, 0.2436], [0.0758, 0.0501]], [[0.0475, 0.6101], [0.359, 0.7902], [0.0618, 0.611]], [[0.7488, 0.7517], [0.5205, 0.5985], [0.895, 0.0768]]], [[[0.1026, 0.7512], [0.1708, 0.233], [0.8938, 0.4163]], [[0.3904, 0.5249], [0.2239, 0.1609], [0.579, 0.213]], [[0.422, 0.5309], [0.9027, 0.0703], [0.0542, 0.843]]], [[[0.5067, 0.4837], [0.932, 0.8166], [0.0656, 0.1456]], [[0.8109, 0.4875], [0.307, 0.9681], [0.2319, 0.6449]], [[0.6323, 0.1003], [0.4048, 0.9758], [0.2306, 0.8352]]]]], [[[[[0.377, 0.2148], [0.7575, 0.7479], [0.9892, 0.8542]], [[0.7348, 0.626], [0.2801, 0.3925], [0.3147, 0.6239]], [[0.0669, 0.6705], [0.9488, 0.6003], [0.4064, 0.5807]]], [[[0.8034, 0.7849], [0.5184, 0.3177], [0.4714, 0.7588]], [[0.5386, 0.3861], [0.6441, 0.2316], [0.1648, 0.7802]], [[0.9272, 0.2504], [0.8528, 0.1052], [0.9138, 0.2879]]], [[[0.7286, 0.9268], [0.9561, 0.1184], [0.7921, 0.298]], [[0.8217, 0.5177], [0.3045, 0.2449], [0.5626, 0.5958]], [[0.477, 0.9684], [0.4764, 0.0117], [0.7061, 0.6599]]]]], Sub37747), 
LRes7100 = reshape_layer(Sub37747, [3, 3, 6], Res7100), 
LRes91306 = reshape_layer(Res7100, [3, 18], Res91306), 
LSep43834 = separable_conv1D_layer(Res91306, 3,[[[[0.698], [0.2899], [0.805], [0.0497], [0.6313], [0.9011], [0.7001], [0.6775], [0.0943], [0.4941], [0.5118], [0.3734], [0.338], [0.9256], [0.9516], [0.2427], [0.957], [0.8584]], [[0.6923], [0.646], [0.4423], [0.9122], [0.1697], [0.9916], [0.0496], [0.1659], [0.553], [0.3093], [0.596], [0.8828], [0.2844], [0.6318], [0.8847], [0.9611], [0.8191], [0.6017]], [[0.0743], [0.0128], [0.4516], [0.3947], [0.4604], [0.1685], [0.409], [0.0035], [0.8165], [0.6722], [0.7084], [0.1624], [0.6537], [0.0806], [0.633], [0.7101], [0.5017], [0.4172]]],[[[0.9494, 0.2253, 0.3417], [0.2673, 0.1513, 0.8718], [0.6054, 0.1512, 0.6624], [0.8372, 0.1051, 0.1311], [0.6766, 0.02, 0.8175], [0.6784, 0.4989, 0.1654], [0.8426, 0.5827, 0.146], [0.5405, 0.8979, 0.0691], [0.8806, 0.6412, 0.3598], [0.4077, 0.1761, 0.0091], [0.6773, 0.8458, 0.4004], [0.6855, 0.1637, 0.1613], [0.3263, 0.5677, 0.8884], [0.3876, 0.4311, 0.9479], [0.6266, 0.2919, 0.8306], [0.815, 0.6065, 0.0036], [0.6066, 0.0755, 0.0946], [0.7817, 0.2361, 0.7139]]]],[0, 0, 0], 2, false, Sep43834), 
LZer66468 = zero_padding1D_layer(Sep43834, 1, 0, Zer66468), 
LMax75162 = maximum_layer([Con89344,Zer66468], Max75162), 
LAve78278 = average_layer([[[[0.0012, 0.4043]]], [[[0.6401, 0.1222]]]], Ave78278), 
LZer38706 = zero_padding1D_layer(Ave78278, 1, 0, Zer38706), 
LCon38254 = concatenate_layer([Zer38706,[[[0.1386], [0.3166]]]], 2, Con38254), 
LMin8476 = minimum_layer([Max75162,Con38254], Min8476), 
LAdd45347 = add_layer([Con47205,Min8476], Add45347), 
exec_layers([LMul1398,LRes58033,LRes88997,LZer14765,LCon47205,LGlo30626,LRes51399,LCon50947,LAve76606,LDot810,LCon89344,LSub37747,LRes7100,LRes91306,LSep43834,LZer66468,LMax75162,LAve78278,LZer38706,LCon38254,LMin8476,LAdd45347],["Mul1398","Res58033","Res88997","Zer14765","Con47205","Glo30626","Res51399","Con50947","Ave76606","Dot810","Con89344","Sub37747","Res7100","Res91306","Sep43834","Zer66468","Max75162","Ave78278","Zer38706","Con38254","Min8476","Add45347"],Add45347,"Add45347")

Actual (Unparsed): [[[0.0000000, 0.4737000, 0.9126000], [0.5772788, 1.0477500, 0.9985000]]]

Expected (Unparsed): [[[0,0.4737,0.9126000000000001],[0.57727876,1.04775,0.9985]]]

Actual:   [[[0, 0.4737, 0.9126], [0.5773, 1.0478, 0.9985]]]

Expected: [[[0, 0.4737, 0.9127], [0.5773, 1.0478, 0.9985]]]