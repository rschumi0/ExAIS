import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mas78705 = tf.keras.layers.Input(shape=([3, 3, 3]))
in0Mul10743 = tf.keras.layers.Input(shape=([2, 1]))
in1Mul10743 = tf.keras.layers.Input(shape=([2, 1]))
in0Con33896 = tf.keras.layers.Input(shape=([3, 8]))
in0Con73606 = tf.keras.layers.Input(shape=([3, 9, 3, 1]))
in0Add78514 = tf.keras.layers.Input(shape=([1, 1]))
in1Add78514 = tf.keras.layers.Input(shape=([1, 1]))
in0Con69052 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))
in0Add82718 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in1Add82718 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in0Mul87127 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in1Mul87127 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in0Con4820 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))

Mas78705 = keras.layers.Masking(mask_value=2, name = 'Mas78705', )(in0Mas78705)
Res3417 = keras.layers.Reshape((3, 9), name = 'Res3417', )(Mas78705)
Mul10743 = keras.layers.Multiply(name = 'Mul10743', )([in0Mul10743,in1Mul10743])
Zer70872 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer70872', )(Mul10743)
Con33896 = keras.layers.Concatenate(axis=2, name = 'Con33896', )([Zer70872,in0Con33896])
Max57875 = keras.layers.Maximum(name = 'Max57875', )([Res3417,Con33896])
Res68674 = keras.layers.Reshape((3, 9, 1), name = 'Res68674', )(Max57875)
Res12420 = keras.layers.Reshape((3, 9, 1, 1), name = 'Res12420', )(Res68674)
Zer99428 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer99428', )(Res12420)
Con73606 = keras.layers.Concatenate(axis=4, name = 'Con73606', )([Zer99428,in0Con73606])
Add78514 = keras.layers.Add(name = 'Add78514', )([in0Add78514,in1Add78514])
Res14840 = keras.layers.Reshape((1, 1, 1), name = 'Res14840', )(Add78514)
Res94484 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res94484', )(Res14840)
Con69052 = keras.layers.Concatenate(axis=4, name = 'Con69052', )([Res94484,in0Con69052])
Add82718 = keras.layers.Add(name = 'Add82718', )([in0Add82718,in1Add82718])
Add56112 = keras.layers.Add(name = 'Add56112', )([Con69052,Add82718])
Zer88605 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (1, 0)), name = 'Zer88605', )(Add56112)
Mul87127 = keras.layers.Multiply(name = 'Mul87127', )([in0Mul87127,in1Mul87127])
Con4820 = keras.layers.Concatenate(axis=4, name = 'Con4820', )([Mul87127,in0Con4820])
Add34403 = keras.layers.Add(name = 'Add34403', )([Zer88605,Con4820])
Zer70112 = keras.layers.ZeroPadding3D(padding=((1, 0), (8, 0), (1, 0)), name = 'Zer70112', )(Add34403)
Mul68216 = keras.layers.Multiply(name = 'Mul68216', )([Con73606,Zer70112])
model = tf.keras.models.Model(inputs=[in0Mas78705,in0Mul10743,in1Mul10743,in0Con33896,in0Con73606,in0Add78514,in1Add78514,in0Con69052,in0Add82718,in1Add82718,in0Mul87127,in1Mul87127,in0Con4820], outputs=Mul68216)
in0Mas78705 = tf.constant([[[[1.6465, 1.4438, 1.942], [1.8001, 1.0358, 1.5876], [1.9582, 1.788, 1.6495]], [[1.7775, 1.9107, 1.2573], [1.2993, 1.4867, 1.8121], [1.9521, 1.6974, 1.5269]], [[1.4028, 1.0638, 1.6954], [1.7849, 1.8886, 1.2594], [1.8621, 1.7835, 1.952]]]])
in0Mul10743 = tf.constant([[[0.6014], [0.5747]]])
in1Mul10743 = tf.constant([[[0.2528], [0.7072]]])
in0Con33896 = tf.constant([[[0.5827, 0.4657, 0.992, 0.5864, 0.3089, 0.1844, 0.9361, 0.619], [0.4289, 0.0474, 0.1772, 0.8889, 0.3508, 0.711, 0.9971, 0.791], [0.9684, 0.5472, 0.2846, 0.9485, 0.6802, 0.0915, 0.6066, 0.8284]]])
in0Con73606 = tf.constant([[[[[0.309], [0.6162], [0.2082]], [[0.6221], [0.9222], [0.2445]], [[0.0899], [0.4224], [0.2049]], [[0.9645], [0.2876], [0.2831]], [[0.8017], [0.1827], [0.2841]], [[0.5168], [0.764], [0.2452]], [[0.0602], [0.238], [0.6627]], [[0.8376], [0.4841], [0.2108]], [[0.0502], [0.4417], [0.0745]]], [[[0.9296], [0.094], [0.2682]], [[0.3579], [0.4892], [0.2613]], [[0.4304], [0.7369], [0.4127]], [[0.5177], [0.2479], [0.5166]], [[0.4929], [0.6238], [0.4776]], [[0.4905], [0.8816], [0.7628]], [[0.958], [0.282], [0.1092]], [[0.9109], [0.6215], [0.4549]], [[0.4576], [0.0764], [0.0819]]], [[[0.2616], [0.1218], [0.776]], [[0.0348], [0.7805], [0.8969]], [[0.8895], [0.5236], [0.1083]], [[0.7037], [0.3427], [0.7172]], [[0.221], [0.1281], [0.9032]], [[0.223], [0.0936], [0.2898]], [[0.7419], [0.1142], [0.6775]], [[0.7804], [0.3133], [0.7905]], [[0.3748], [0.1128], [0.5389]]]]])
in0Add78514 = tf.constant([[[0.9387]]])
in1Add78514 = tf.constant([[[0.6155]]])
in0Con69052 = tf.constant([[[[[0.1312]]]]])
in0Add82718 = tf.constant([[[[[0.8192, 0.8517]]]]])
in1Add82718 = tf.constant([[[[[0.6537, 0.8554]]]]])
in0Mul87127 = tf.constant([[[[[0.8593], [0.1264]]], [[[0.4902], [0.9868]]]]])
in1Mul87127 = tf.constant([[[[[0.5488], [0.3378]]], [[[0.5507], [0.4219]]]]])
in0Con4820 = tf.constant([[[[[0.4656], [0.7563]]], [[[0.5867], [0.652]]]]])
print (np.array2string(model.predict([in0Mas78705,in0Mul10743,in1Mul10743,in0Con33896,in0Con73606,in0Add78514,in1Add78514,in0Con69052,in0Add82718,in1Add82718,in0Mul87127,in1Mul87127,in0Con4820],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul68216.png')

LMas78705 = masking_layer([[[[1.6465, 1.4438, 1.942], [1.8001, 1.0358, 1.5876], [1.9582, 1.788, 1.6495]], [[1.7775, 1.9107, 1.2573], [1.2993, 1.4867, 1.8121], [1.9521, 1.6974, 1.5269]], [[1.4028, 1.0638, 1.6954], [1.7849, 1.8886, 1.2594], [1.8621, 1.7835, 1.952]]]], 2, Mas78705), 
LRes3417 = reshape_layer(Mas78705, [3, 9], Res3417), 
LMul10743 = multiply_layer([[[[0.6014], [0.5747]]], [[[0.2528], [0.7072]]]], Mul10743), 
LZer70872 = zero_padding1D_layer(Mul10743, 1, 0, Zer70872), 
LCon33896 = concatenate_layer([Zer70872,[[[0.5827, 0.4657, 0.992, 0.5864, 0.3089, 0.1844, 0.9361, 0.619], [0.4289, 0.0474, 0.1772, 0.8889, 0.3508, 0.711, 0.9971, 0.791], [0.9684, 0.5472, 0.2846, 0.9485, 0.6802, 0.0915, 0.6066, 0.8284]]]], 2, Con33896), 
LMax57875 = maximum_layer([Res3417,Con33896], Max57875), 
LRes68674 = reshape_layer(Max57875, [3, 9, 1], Res68674), 
LRes12420 = reshape_layer(Res68674, [3, 9, 1, 1], Res12420), 
LZer99428 = zero_padding3D_layer(Res12420, 0, 0, 0, 0, 2, 0, Zer99428), 
LCon73606 = concatenate_layer([Zer99428,[[[[[0.309], [0.6162], [0.2082]], [[0.6221], [0.9222], [0.2445]], [[0.0899], [0.4224], [0.2049]], [[0.9645], [0.2876], [0.2831]], [[0.8017], [0.1827], [0.2841]], [[0.5168], [0.764], [0.2452]], [[0.0602], [0.238], [0.6627]], [[0.8376], [0.4841], [0.2108]], [[0.0502], [0.4417], [0.0745]]], [[[0.9296], [0.094], [0.2682]], [[0.3579], [0.4892], [0.2613]], [[0.4304], [0.7369], [0.4127]], [[0.5177], [0.2479], [0.5166]], [[0.4929], [0.6238], [0.4776]], [[0.4905], [0.8816], [0.7628]], [[0.958], [0.282], [0.1092]], [[0.9109], [0.6215], [0.4549]], [[0.4576], [0.0764], [0.0819]]], [[[0.2616], [0.1218], [0.776]], [[0.0348], [0.7805], [0.8969]], [[0.8895], [0.5236], [0.1083]], [[0.7037], [0.3427], [0.7172]], [[0.221], [0.1281], [0.9032]], [[0.223], [0.0936], [0.2898]], [[0.7419], [0.1142], [0.6775]], [[0.7804], [0.3133], [0.7905]], [[0.3748], [0.1128], [0.5389]]]]]], 4, Con73606), 
LAdd78514 = add_layer([[[[0.9387]]], [[[0.6155]]]], Add78514), 
LRes14840 = reshape_layer(Add78514, [1, 1, 1], Res14840), 
LRes94484 = reshape_layer(Res14840, [1, 1, 1, 1], Res94484), 
LCon69052 = concatenate_layer([Res94484,[[[[[0.1312]]]]]], 4, Con69052), 
LAdd82718 = add_layer([[[[[[0.8192, 0.8517]]]]], [[[[[0.6537, 0.8554]]]]]], Add82718), 
LAdd56112 = add_layer([Con69052,Add82718], Add56112), 
LZer88605 = zero_padding3D_layer(Add56112, 1, 0, 0, 0, 1, 0, Zer88605), 
LMul87127 = multiply_layer([[[[[[0.8593], [0.1264]]], [[[0.4902], [0.9868]]]]], [[[[[0.5488], [0.3378]]], [[[0.5507], [0.4219]]]]]], Mul87127), 
LCon4820 = concatenate_layer([Mul87127,[[[[[0.4656], [0.7563]]], [[[0.5867], [0.652]]]]]], 4, Con4820), 
LAdd34403 = add_layer([Zer88605,Con4820], Add34403), 
LZer70112 = zero_padding3D_layer(Add34403, 1, 0, 8, 0, 1, 0, Zer70112), 
LMul68216 = multiply_layer([Con73606,Zer70112], Mul68216), 
exec_layers([LMas78705,LRes3417,LMul10743,LZer70872,LCon33896,LMax57875,LRes68674,LRes12420,LZer99428,LCon73606,LAdd78514,LRes14840,LRes94484,LCon69052,LAdd82718,LAdd56112,LZer88605,LMul87127,LCon4820,LAdd34403,LZer70112,LMul68216],["Mas78705","Res3417","Mul10743","Zer70872","Con33896","Max57875","Res68674","Res12420","Zer99428","Con73606","Add78514","Res14840","Res94484","Con69052","Add82718","Add56112","Zer88605","Mul87127","Con4820","Add34403","Zer70112","Mul68216"],Mul68216,"Mul68216")

Actual (Unparsed): [[[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0355718], [0.0651955, 0.0619410]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0661798], [6.7215772, 1.3420227]]]]]

Expected (Unparsed): [[[[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]]],[[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0.0,0.03557184],[0.06519545404799999,0.06194097]]],[[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0.0,0.06617976],[6.7215771558399995,1.3420226700000002]]]]]

Actual:   [[[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0.0356], [0.0652, 0.062]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0.0662], [6.7216, 1.3421]]]]]

Expected: [[[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0.0356], [0.0652, 0.062]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0.0662], [6.7216, 1.3421]]]]]