import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave30585 = tf.keras.layers.Input(shape=([1, 1, 2]))
in1Ave30585 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con14366 = tf.keras.layers.Input(shape=([2, 5, 1]))
in0Mul68264 = tf.keras.layers.Input(shape=([1, 2, 2]))
in1Mul68264 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Con18165 = tf.keras.layers.Input(shape=([2, 5, 1]))
in0Con45861 = tf.keras.layers.Input(shape=([2, 1, 1]))

Ave30585 = keras.layers.Average(name = 'Ave30585', )([in0Ave30585,in1Ave30585])
Lay55206 = keras.layers.LayerNormalization(axis=2, epsilon=1.3474078140546057, name = 'Lay55206', )(Ave30585)
Zer36615 = keras.layers.ZeroPadding2D(padding=((1, 0), (4, 0)), name = 'Zer36615', )(Lay55206)
Con14366 = keras.layers.Concatenate(axis=3, name = 'Con14366', )([Zer36615,in0Con14366])
Mul68264 = keras.layers.Multiply(name = 'Mul68264', )([in0Mul68264,in1Mul68264])
Zer44492 = keras.layers.ZeroPadding2D(padding=((1, 0), (3, 0)), name = 'Zer44492', )(Mul68264)
Con18165 = keras.layers.Concatenate(axis=3, name = 'Con18165', )([Zer44492,in0Con18165])
Con45861 = keras.layers.Conv2DTranspose(3, (1, 1),strides=(1, 5), padding='same', name = 'Con45861', )(in0Con45861)
Mul73787 = keras.layers.Multiply(name = 'Mul73787', )([Con18165,Con45861])
Add13353 = keras.layers.Add(name = 'Add13353', )([Con14366,Mul73787])
model = tf.keras.models.Model(inputs=[in0Ave30585,in1Ave30585,in0Con14366,in0Mul68264,in1Mul68264,in0Con18165,in0Con45861], outputs=Add13353)
w = model.get_layer('Con45861').get_weights() 
w[0] = np.array([[[[0.4203], [0.4567], [0.534]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con45861').set_weights(w) 
in0Ave30585 = tf.constant([[[[0.2651, 0.5614]]]])
in1Ave30585 = tf.constant([[[[0.6435, 0.8665]]]])
in0Con14366 = tf.constant([[[[0.5504], [0.6849], [0.7494], [0.7723], [0.5536]], [[0.6141], [0.7651], [0.7591], [0.0741], [0.9561]]]])
in0Mul68264 = tf.constant([[[[0.3882, 0.2668], [0.8495, 0.4041]]]])
in1Mul68264 = tf.constant([[[[0.1555, 0.8832], [0.9817, 0.4009]]]])
in0Con18165 = tf.constant([[[[0.6026], [0.6151], [0.4807], [0.4213], [0.4417]], [[0.9015], [0.1675], [0.5152], [0.3986], [0.6294]]]])
in0Con45861 = tf.constant([[[[0.3229]], [[0.3517]]]])
print (np.array2string(model.predict([in0Ave30585,in1Ave30585,in0Con14366,in0Mul68264,in1Mul68264,in0Con18165,in0Con45861],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add13353.png')

LAve30585 = average_layer([[[[[0.2651, 0.5614]]]], [[[[0.6435, 0.8665]]]]], Ave30585), 
LLay55206 = layer_normalization_layer(Ave30585, 2, 1.3474078140546057, Lay55206), 
LZer36615 = zero_padding2D_layer(Lay55206, 1, 0, 4, 0, Zer36615), 
LCon14366 = concatenate_layer([Zer36615,[[[[0.5504], [0.6849], [0.7494], [0.7723], [0.5536]], [[0.6141], [0.7651], [0.7591], [0.0741], [0.9561]]]]], 3, Con14366), 
LMul68264 = multiply_layer([[[[[0.3882, 0.2668], [0.8495, 0.4041]]]], [[[[0.1555, 0.8832], [0.9817, 0.4009]]]]], Mul68264), 
LZer44492 = zero_padding2D_layer(Mul68264, 1, 0, 3, 0, Zer44492), 
LCon18165 = concatenate_layer([Zer44492,[[[[0.6026], [0.6151], [0.4807], [0.4213], [0.4417]], [[0.9015], [0.1675], [0.5152], [0.3986], [0.6294]]]]], 3, Con18165), 
LCon45861 = conv2D_transpose_layer([[[[0.3229]], [[0.3517]]]], 1, 1,[[[[0.4203], [0.4567], [0.534]]]],[0, 0, 0], 1, 5, true, Con45861), 
LMul73787 = multiply_layer([Con18165,Con45861], Mul73787), 
LAdd13353 = add_layer([Con14366,Mul73787], Add13353), 
exec_layers([LAve30585,LLay55206,LZer36615,LCon14366,LMul68264,LZer44492,LCon18165,LCon45861,LMul73787,LAdd13353],["Ave30585","Lay55206","Zer36615","Con14366","Mul68264","Zer44492","Con18165","Con45861","Mul73787","Add13353"],Add13353,"Add13353")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.6543055], [0.0000000, 0.0000000, 0.6849000], [0.0000000, 0.0000000, 0.7494000], [0.0000000, 0.0000000, 0.7723000], [0.0000000, 0.0000000, 0.5536000]], [[0.0000000, 0.0000000, 0.7834087], [0.0000000, 0.0000000, 0.7651000], [0.0000000, 0.0000000, 0.7591000], [0.0000000, 0.0000000, 0.0741000], [0.0000000, 0.0000000, 0.9561000]]]]

Expected (Unparsed): [[[[0.0,0.0,0.65430547436],[0,0,0.6849],[0,0,0.7494],[0,0,0.7723],[0,0,0.5536]],[[0.0,0.0,0.7834087317],[0,0,0.7651],[0,0,0.7591],[0.0,0.0,0.0741],[0.0,0.0,0.9561]]]]

Actual:   [[[[0, 0, 0.6544], [0, 0, 0.6849], [0, 0, 0.7494], [0, 0, 0.7723], [0, 0, 0.5536]], [[0, 0, 0.7835], [0, 0, 0.7651], [0, 0, 0.7591], [0, 0, 0.0741], [0, 0, 0.9561]]]]

Expected: [[[[0, 0, 0.6544], [0, 0, 0.6849], [0, 0, 0.7494], [0, 0, 0.7723], [0, 0, 0.5536]], [[0, 0, 0.7835], [0, 0, 0.7651], [0, 0, 0.7591], [0, 0, 0.0741], [0, 0, 0.9561]]]]