import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con37558 = tf.keras.layers.Input(shape=([2, 1]))
in0Con65927 = tf.keras.layers.Input(shape=([44]))
in0Zer73304 = tf.keras.layers.Input(shape=([3, 1, 1, 1]))
in0Ave33878 = tf.keras.layers.Input(shape=([2, 1]))
in1Ave33878 = tf.keras.layers.Input(shape=([2, 1]))
in0Con50033 = tf.keras.layers.Input(shape=([5, 8]))
in0Dot64823 = tf.keras.layers.Input(shape=([2]))
in1Dot64823 = tf.keras.layers.Input(shape=([2]))
in0Con52275 = tf.keras.layers.Input(shape=([44]))

Con37558 = keras.layers.Conv1D(3, (2),strides=(2), padding='same', dilation_rate=(1), name = 'Con37558', )(in0Con37558)
LST50621 = keras.layers.LSTM(1,recurrent_activation='sigmoid', name = 'LST50621', )(Con37558)
Con65927 = keras.layers.Concatenate(axis=1, name = 'Con65927', )([LST50621,in0Con65927])
Zer73304 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer73304', )(in0Zer73304)
Thr93057 = keras.layers.ThresholdedReLU(theta=6.210585571049435, name = 'Thr93057', )(Zer73304)
Res41869 = keras.layers.Reshape((5, 3, 3), name = 'Res41869', )(Thr93057)
Res19956 = keras.layers.Reshape((5, 9), name = 'Res19956', )(Res41869)
Ave33878 = keras.layers.Average(name = 'Ave33878', )([in0Ave33878,in1Ave33878])
Zer83404 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer83404', )(Ave33878)
Con50033 = keras.layers.Concatenate(axis=2, name = 'Con50033', )([Zer83404,in0Con50033])
Max86971 = keras.layers.Maximum(name = 'Max86971', )([Res19956,Con50033])
Fla63681 = keras.layers.Flatten(name = 'Fla63681', )(Max86971)
Dot64823 = keras.layers.Dot(axes=(1, 1), name = 'Dot64823', )([in0Dot64823,in1Dot64823])
Con52275 = keras.layers.Concatenate(axis=1, name = 'Con52275', )([Dot64823,in0Con52275])
Add58876 = keras.layers.Add(name = 'Add58876', )([Fla63681,Con52275])
Sub38054 = keras.layers.Subtract(name = 'Sub38054', )([Con65927,Add58876])
model = tf.keras.models.Model(inputs=[in0Con37558,in0Con65927,in0Zer73304,in0Ave33878,in1Ave33878,in0Con50033,in0Dot64823,in1Dot64823,in0Con52275], outputs=Sub38054)
w = model.get_layer('Con37558').get_weights() 
w[0] = np.array([[[0.3773, 0.7601, 0.5793]], [[0.9996, 0.7916, 0.7957]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con37558').set_weights(w) 
w = model.get_layer('LST50621').get_weights() 
w[0] = np.array([[4, 1, 2, 7], [3, 3, 1, 7], [10, 10, 6, 9]])
w[1] = np.array([[4, 1, 6, 1]])
w[2] = np.array([7, 1, 7, 9])
model.get_layer('LST50621').set_weights(w) 
in0Con37558 = tf.constant([[[0.1743], [0.2351]]])
in0Con65927 = tf.constant([[0.0624, 0.6829, 0.7285, 0.4466, 0.2378, 0.2154, 0.7436, 0.7883, 0.0253, 0.2903, 0.869, 0.35, 0.4672, 0.4875, 0.0722, 0.8623, 0.6295, 0.0582, 0.4471, 0.3387, 0.0311, 0.367, 0.3425, 0.3394, 0.8573, 0.6999, 0.7711, 0.4548, 0.463, 0.7315, 0.2904, 0.7908, 0.9276, 0.6169, 0.6985, 0.4239, 0.7163, 0.6281, 0.5659, 0.7685, 0.8212, 0.4899, 0.8387, 0.5455]])
in0Zer73304 = tf.constant([[[[[1.4369]]], [[[1.0505]]], [[[1.3596]]]]])
in0Ave33878 = tf.constant([[[0.5682], [0.4078]]])
in1Ave33878 = tf.constant([[[0.4198], [0.3986]]])
in0Con50033 = tf.constant([[[0.7486, 0.9805, 0.4676, 0.5861, 0.9167, 0.873, 0.4717, 0.7415], [0.671, 0.0126, 0.3631, 0.3416, 0.9227, 0.448, 0.3371, 0.9192], [0.2714, 0.4898, 0.5042, 0.4832, 0.9055, 0.1888, 0.0004, 0.6954], [0.0541, 0.9128, 0.0365, 0.6996, 0.0994, 0.6595, 0.7483, 0.9092], [0.4478, 0.1144, 0.2822, 0.1328, 0.6503, 0.4932, 0.0197, 0.6469]]])
in0Dot64823 = tf.constant([[0.9794, 0.735]])
in1Dot64823 = tf.constant([[0.9886, 0.702]])
in0Con52275 = tf.constant([[0.9731, 0.3743, 0.8904, 0.5055, 0.5121, 0.4916, 0.2056, 0.6872, 0.1867, 0.4999, 0.1058, 0.2764, 0.9809, 0.7231, 0.8428, 0.9636, 0.2022, 0.3189, 0.2096, 0.4766, 0.3498, 0.8251, 0.9284, 0.9365, 0.9452, 0.9566, 0.206, 0.593, 0.4779, 0.4895, 0.9147, 0.6581, 0.923, 0.8434, 0.6684, 0.8743, 0.8611, 0.2802, 0.6595, 0.3982, 0.0968, 0.4717, 0.4992, 0.5595]])
print (np.array2string(model.predict([in0Con37558,in0Con65927,in0Zer73304,in0Ave33878,in1Ave33878,in0Con50033,in0Dot64823,in1Dot64823,in0Con52275],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub38054.png')

LCon37558 = conv1D_layer([[[0.1743], [0.2351]]], 2,[[[0.3773, 0.7601, 0.5793]], [[0.9996, 0.7916, 0.7957]]],[0, 0, 0], 2, true, 1, Con37558), 
LLST50621 = lstm_layer(Con37558,[[4, 1, 2, 7], [3, 3, 1, 7], [10, 10, 6, 9]],[[4, 1, 6, 1]],[7, 1, 7, 9], LST50621), 
LCon65927 = concatenate_layer([LST50621,[[0.0624, 0.6829, 0.7285, 0.4466, 0.2378, 0.2154, 0.7436, 0.7883, 0.0253, 0.2903, 0.869, 0.35, 0.4672, 0.4875, 0.0722, 0.8623, 0.6295, 0.0582, 0.4471, 0.3387, 0.0311, 0.367, 0.3425, 0.3394, 0.8573, 0.6999, 0.7711, 0.4548, 0.463, 0.7315, 0.2904, 0.7908, 0.9276, 0.6169, 0.6985, 0.4239, 0.7163, 0.6281, 0.5659, 0.7685, 0.8212, 0.4899, 0.8387, 0.5455]]], 1, Con65927), 
LZer73304 = zero_padding3D_layer([[[[[1.4369]]], [[[1.0505]]], [[[1.3596]]]]], 1, 1, 1, 1, 1, 1, Zer73304), 
LThr93057 = thresholded_relu_layer(Zer73304, 6.210585571049435, Thr93057), 
LRes41869 = reshape_layer(Thr93057, [5, 3, 3], Res41869), 
LRes19956 = reshape_layer(Res41869, [5, 9], Res19956), 
LAve33878 = average_layer([[[[0.5682], [0.4078]]], [[[0.4198], [0.3986]]]], Ave33878), 
LZer83404 = zero_padding1D_layer(Ave33878, 3, 0, Zer83404), 
LCon50033 = concatenate_layer([Zer83404,[[[0.7486, 0.9805, 0.4676, 0.5861, 0.9167, 0.873, 0.4717, 0.7415], [0.671, 0.0126, 0.3631, 0.3416, 0.9227, 0.448, 0.3371, 0.9192], [0.2714, 0.4898, 0.5042, 0.4832, 0.9055, 0.1888, 0.0004, 0.6954], [0.0541, 0.9128, 0.0365, 0.6996, 0.0994, 0.6595, 0.7483, 0.9092], [0.4478, 0.1144, 0.2822, 0.1328, 0.6503, 0.4932, 0.0197, 0.6469]]]], 2, Con50033), 
LMax86971 = maximum_layer([Res19956,Con50033], Max86971), 
LFla63681 = flatten_layer(Max86971, Fla63681), 
LDot64823 = dot_layer([[0.9794, 0.735]], [[0.9886, 0.702]], 1, 1, Dot64823), 
LCon52275 = concatenate_layer([Dot64823,[[0.9731, 0.3743, 0.8904, 0.5055, 0.5121, 0.4916, 0.2056, 0.6872, 0.1867, 0.4999, 0.1058, 0.2764, 0.9809, 0.7231, 0.8428, 0.9636, 0.2022, 0.3189, 0.2096, 0.4766, 0.3498, 0.8251, 0.9284, 0.9365, 0.9452, 0.9566, 0.206, 0.593, 0.4779, 0.4895, 0.9147, 0.6581, 0.923, 0.8434, 0.6684, 0.8743, 0.8611, 0.2802, 0.6595, 0.3982, 0.0968, 0.4717, 0.4992, 0.5595]]], 1, Con52275), 
LAdd58876 = add_layer([Fla63681,Con52275], Add58876), 
LSub38054 = subtract_layer(Con65927,Add58876, Sub38054), 
exec_layers([LCon37558,LLST50621,LCon65927,LZer73304,LThr93057,LRes41869,LRes19956,LAve33878,LZer83404,LCon50033,LMax86971,LFla63681,LDot64823,LCon52275,LAdd58876,LSub38054],["Con37558","LST50621","Con65927","Zer73304","Thr93057","Res41869","Res19956","Ave33878","Zer83404","Con50033","Max86971","Fla63681","Dot64823","Con52275","Add58876","Sub38054"],Sub38054,"Sub38054")

Actual (Unparsed): [[-0.7226133, -1.6593000, -0.6719000, -0.6295000, -0.6450000, -1.1910000, -1.1492000, 0.0663000, -0.6404001, -0.1614000, -0.8806000, 0.7506000, -0.2895000, -0.8553000, -1.1583000, -1.2186000, -0.4384000, -0.4919000, -0.2607000, -0.0339000, -0.6277000, -0.8229000, -0.9413000, -1.4914000, -0.7859000, -0.0883000, -0.9521000, 0.0711000, -0.1923000, -0.9277000, 0.2055000, -1.3239000, 0.0333000, -0.6549000, -0.9748000, -0.8791000, -0.8536000, -0.5926000, 0.2335000, -0.3758000, 0.2375000, 0.0741000, -0.4750000, 0.3198000, -0.6609000]]

Expected (Unparsed): [[-0.7226132607209212,-1.6593,-0.6719,-0.6295000000000001,-0.6449999999999999,-1.1909999999999998,-1.1492,0.06630000000000003,-0.6404000000000001,-0.16140000000000002,-0.8806,0.7505999999999999,-0.2895,-0.8553,-1.1582999999999999,-1.2186,-0.4384,-0.4919,-0.26070000000000004,-0.033899999999999986,-0.6277,-0.8229,-0.9413,-1.4913999999999998,-0.7859,-0.08830000000000005,-0.9521000000000002,0.07110000000000005,-0.19230000000000003,-0.9276999999999997,0.20550000000000002,-1.3239,0.033299999999999885,-0.6549,-0.9747999999999999,-0.8790999999999999,-0.8535999999999999,-0.5925999999999999,0.23349999999999999,-0.3758,0.23749999999999993,0.07410000000000005,-0.4750000000000001,0.3198,-0.6608999999999999]]

Actual:   [[-0.7226, -1.6593, -0.6719, -0.6295, -0.645, -1.191, -1.1492, 0.0663, -0.6404, -0.1614, -0.8806, 0.7506, -0.2895, -0.8553, -1.1583, -1.2186, -0.4384, -0.4919, -0.2607, -0.0339, -0.6277, -0.8229, -0.9413, -1.4914, -0.7859, -0.0883, -0.9521, 0.0711, -0.1923, -0.9277, 0.2055, -1.3239, 0.0333, -0.6549, -0.9748, -0.8791, -0.8536, -0.5926, 0.2335, -0.3758, 0.2375, 0.0741, -0.475, 0.3198, -0.6609]]

Expected: [[-0.7226, -1.6593, -0.6719, -0.6295, -0.6449, -1.1909, -1.1492, 0.0664, -0.6404, -0.1614, -0.8806, 0.7506, -0.2895, -0.8553, -1.1582, -1.2186, -0.4384, -0.4919, -0.2607, -0.0338, -0.6277, -0.8229, -0.9413, -1.4913, -0.7859, -0.0883, -0.9521, 0.0712, -0.1923, -0.9276, 0.2056, -1.3239, 0.0333, -0.6549, -0.9747, -0.879, -0.8535, -0.5925, 0.2335, -0.3758, 0.2375, 0.0742, -0.475, 0.3198, -0.6608]]