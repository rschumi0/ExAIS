import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave27782 = tf.keras.layers.Input(shape=([1, 2]))
in1Ave27782 = tf.keras.layers.Input(shape=([1, 2]))
in0Con4119 = tf.keras.layers.Input(shape=([2, 6]))
in0Con75833 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))
in0Mul94481 = tf.keras.layers.Input(shape=([2, 1]))
in1Mul94481 = tf.keras.layers.Input(shape=([2, 1]))
in0Con85546 = tf.keras.layers.Input(shape=([2, 7]))
in0Con12699 = tf.keras.layers.Input(shape=([2, 8, 3]))
in0Max43947 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in1Max43947 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))

Ave27782 = keras.layers.Average(name = 'Ave27782', )([in0Ave27782,in1Ave27782])
Zer12194 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer12194', )(Ave27782)
Con4119 = keras.layers.Concatenate(axis=2, name = 'Con4119', )([Zer12194,in0Con4119])
Con75833 = keras.layers.Conv3D(2, (1, 1, 1),strides=(8, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con75833', )(in0Con75833)
Res93972 = keras.layers.Reshape((1, 2, 4), name = 'Res93972', )(Con75833)
Res50371 = keras.layers.Reshape((1, 8), name = 'Res50371', )(Res93972)
Zer87698 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer87698', )(Res50371)
Mul94481 = keras.layers.Multiply(name = 'Mul94481', )([in0Mul94481,in1Mul94481])
Con85546 = keras.layers.Concatenate(axis=2, name = 'Con85546', )([Mul94481,in0Con85546])
Mul77221 = keras.layers.Multiply(name = 'Mul77221', )([Zer87698,Con85546])
Min16198 = keras.layers.Minimum(name = 'Min16198', )([Con4119,Mul77221])
Res7641 = keras.layers.Reshape((2, 8, 1), name = 'Res7641', )(Min16198)
Con12699 = keras.layers.Concatenate(axis=3, name = 'Con12699', )([Res7641,in0Con12699])
Max43947 = keras.layers.Maximum(name = 'Max43947', )([in0Max43947,in1Max43947])
Res45235 = keras.layers.Reshape((1, 2, 2), name = 'Res45235', )(Max43947)
Con24530 = keras.layers.Conv2D(4, (1, 1),strides=(1, 1), padding='valid', dilation_rate=(1, 1), name = 'Con24530', )(Res45235)
Zer92625 = keras.layers.ZeroPadding2D(padding=((1, 0), (6, 0)), name = 'Zer92625', )(Con24530)
Sub5467 = keras.layers.Subtract(name = 'Sub5467', )([Con12699,Zer92625])
Bat37754 = keras.layers.BatchNormalization(axis=3, epsilon=0.9336664981213458,  name = 'Bat37754', )(Sub5467)
model = tf.keras.models.Model(inputs=[in0Ave27782,in1Ave27782,in0Con4119,in0Con75833,in0Mul94481,in1Mul94481,in0Con85546,in0Con12699,in0Max43947,in1Max43947], outputs=Bat37754)
w = model.get_layer('Con75833').get_weights() 
w[0] = np.array([[[[[0.4324, 0.2448], [0.8085, 0.9012]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con75833').set_weights(w) 
w = model.get_layer('Con24530').get_weights() 
w[0] = np.array([[[[0.3569, 0.8992, 0.4181, 0.3688], [0.8003, 0.5819, 0.8965, 0.8045]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con24530').set_weights(w) 
w = model.get_layer('Bat37754').get_weights() 
w[0] = np.array([0.3944, 0.7109, 0.9346, 0.4081])
w[1] = np.array([0.8756, 0.0238, 0.8774, 0.1617])
w[2] = np.array([0.5876, 0.136, 0.7234, 0.552])
w[3] = np.array([0.8997, 0.6957, 0.9622, 0.1073])
model.get_layer('Bat37754').set_weights(w) 
in0Ave27782 = tf.constant([[[0.9231, 0.0513]]])
in1Ave27782 = tf.constant([[[0.1648, 0.4311]]])
in0Con4119 = tf.constant([[[0.9073, 0.1223, 0.9618, 0.9174, 0.9387, 0.8652], [0.8161, 0.6195, 0.1864, 0.5135, 0.7138, 0.3954]]])
in0Con75833 = tf.constant([[[[[0.5081, 0.9366], [0.9465, 0.1499]], [[0.4312, 0.1671], [0.7261, 0.2011]]]]])
in0Mul94481 = tf.constant([[[0.096], [0.3414]]])
in1Mul94481 = tf.constant([[[0.0055], [0.9342]]])
in0Con85546 = tf.constant([[[0.6499, 0.1732, 0.4697, 0.4371, 0.6666, 0.0241, 0.6055], [0.5639, 0.8004, 0.8497, 0.7746, 0.0012, 0.905, 0.6518]]])
in0Con12699 = tf.constant([[[[0.5046, 0.0692, 0.6749], [0.2652, 0.597, 0.033], [0.4492, 0.0569, 0.6091], [0.3761, 0.2005, 0.1372], [0.0689, 0.1616, 0.6308], [0.4224, 0.6638, 0.2102], [0.3549, 0.724, 0.0284], [0.08, 0.8276, 0.5838]], [[0.9944, 0.3813, 0.1953], [0.8599, 0.8866, 0.0174], [0.9439, 0.3057, 0.5307], [0.5698, 0.4398, 0.7802], [0.2597, 0.4532, 0.7213], [0.3985, 0.3555, 0.6544], [0.1883, 0.886, 0.0401], [0.8369, 0.1574, 0.634]]]])
in0Max43947 = tf.constant([[[[[0.6993], [0.894]], [[0.5171], [0.7453]]]]])
in1Max43947 = tf.constant([[[[[0.0277], [0.8616]], [[0.9984], [0.3525]]]]])
print (np.array2string(model.predict([in0Ave27782,in1Ave27782,in0Con4119,in0Con75833,in0Mul94481,in1Mul94481,in0Con85546,in0Con12699,in0Max43947,in1Max43947],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Bat37754.png')

LAve27782 = average_layer([[[[0.9231, 0.0513]]], [[[0.1648, 0.4311]]]], Ave27782), 
LZer12194 = zero_padding1D_layer(Ave27782, 1, 0, Zer12194), 
LCon4119 = concatenate_layer([Zer12194,[[[0.9073, 0.1223, 0.9618, 0.9174, 0.9387, 0.8652], [0.8161, 0.6195, 0.1864, 0.5135, 0.7138, 0.3954]]]], 2, Con4119), 
LCon75833 = conv3D_layer([[[[[0.5081, 0.9366], [0.9465, 0.1499]], [[0.4312, 0.1671], [0.7261, 0.2011]]]]], 1, 1, 1,[[[[[0.4324, 0.2448], [0.8085, 0.9012]]]]],[0, 0], 8, 1, 1, false, 1, 1, 1, Con75833), 
LRes93972 = reshape_layer(Con75833, [1, 2, 4], Res93972), 
LRes50371 = reshape_layer(Res93972, [1, 8], Res50371), 
LZer87698 = zero_padding1D_layer(Res50371, 1, 0, Zer87698), 
LMul94481 = multiply_layer([[[[0.096], [0.3414]]], [[[0.0055], [0.9342]]]], Mul94481), 
LCon85546 = concatenate_layer([Mul94481,[[[0.6499, 0.1732, 0.4697, 0.4371, 0.6666, 0.0241, 0.6055], [0.5639, 0.8004, 0.8497, 0.7746, 0.0012, 0.905, 0.6518]]]], 2, Con85546), 
LMul77221 = multiply_layer([Zer87698,Con85546], Mul77221), 
LMin16198 = minimum_layer([Con4119,Mul77221], Min16198), 
LRes7641 = reshape_layer(Min16198, [2, 8, 1], Res7641), 
LCon12699 = concatenate_layer([Res7641,[[[[0.5046, 0.0692, 0.6749], [0.2652, 0.597, 0.033], [0.4492, 0.0569, 0.6091], [0.3761, 0.2005, 0.1372], [0.0689, 0.1616, 0.6308], [0.4224, 0.6638, 0.2102], [0.3549, 0.724, 0.0284], [0.08, 0.8276, 0.5838]], [[0.9944, 0.3813, 0.1953], [0.8599, 0.8866, 0.0174], [0.9439, 0.3057, 0.5307], [0.5698, 0.4398, 0.7802], [0.2597, 0.4532, 0.7213], [0.3985, 0.3555, 0.6544], [0.1883, 0.886, 0.0401], [0.8369, 0.1574, 0.634]]]]], 3, Con12699), 
LMax43947 = maximum_layer([[[[[[0.6993], [0.894]], [[0.5171], [0.7453]]]]], [[[[[0.0277], [0.8616]], [[0.9984], [0.3525]]]]]], Max43947), 
LRes45235 = reshape_layer(Max43947, [1, 2, 2], Res45235), 
LCon24530 = conv2D_layer(Res45235, 1, 1,[[[[0.3569, 0.8992, 0.4181, 0.3688], [0.8003, 0.5819, 0.8965, 0.8045]]]],[0, 0, 0, 0], 1, 1, false, 1, 1, Con24530), 
LZer92625 = zero_padding2D_layer(Con24530, 1, 0, 6, 0, Zer92625), 
LSub5467 = subtract_layer(Con12699,Zer92625, Sub5467), 
LBat37754 = batch_normalization_layer(Sub5467, 3, 0.9336664981213458, [0.3944, 0.7109, 0.9346, 0.4081], [0.8756, 0.0238, 0.8774, 0.1617], [0.5876, 0.136, 0.7234, 0.552], [0.8997, 0.6957, 0.9622, 0.1073], Bat37754), 
exec_layers([LAve27782,LZer12194,LCon4119,LCon75833,LRes93972,LRes50371,LZer87698,LMul94481,LCon85546,LMul77221,LMin16198,LRes7641,LCon12699,LMax43947,LRes45235,LCon24530,LZer92625,LSub5467,LBat37754],["Ave27782","Zer12194","Con4119","Con75833","Res93972","Res50371","Zer87698","Mul94481","Con85546","Mul77221","Min16198","Res7641","Con12699","Max43947","Res45235","Con24530","Zer92625","Sub5467","Bat37754"],Bat37754,"Bat37754")

Actual (Unparsed): [[[[0.7044432, 0.2290837, 0.4333494, 0.2108587], [0.7044432, 0.0957551, 0.7916036, -0.0458944], [0.7044432, 0.1982299, 0.4250006, 0.1845394], [0.7044432, 0.1575184, 0.5224718, -0.0042155], [0.7044432, -0.0135699, 0.4960677, 0.1932191], [0.7044432, 0.1833042, 0.8369454, 0.0249837], [0.7044432, 0.1457116, 0.8778072, -0.0477343], [0.7044432, -0.0073880, 0.9481277, 0.1744197]], [[0.7952013, 0.5018671, 0.6451932, 0.0190239], [0.7747002, 0.4269602, 0.9881751, -0.0521342], [0.8281156, 0.4737422, 0.5938783, 0.1531802], [0.7952251, 0.2653954, 0.6849012, 0.2529775], [0.7587380, 0.0926920, 0.6939967, 0.2294182], [0.7045328, 0.1699936, 0.6276810, 0.2026589], [0.5489673, -0.5869993, 0.2452976, -0.4338938], [0.4950678, -0.3273717, -0.2436495, -0.1926119]]]]

Expected (Unparsed): [[[[0.7044432434766137,0.22908369392659966,0.4333494213142372,0.21085866738614822],[0.7044432434766137,0.09575510921138543,0.7916036179365936,-0.04589437244435246],[0.7044432434766137,0.19822987774772383,0.4250005645153456,0.18453938086044802],[0.7044432434766137,0.15751843437812418,0.5224717707202915,-0.004215502292711781],[0.7044432434766137,-0.013569874830371233,0.49606766263273994,0.19321914556573214],[0.7044432434766137,0.1833042049391702,0.8369453768118748,0.024983706162852254],[0.7044432434766137,0.1457115588728504,0.8778072613072629,-0.047734322566209936],[0.7044432434766137,-0.007387973032798645,0.9481277136946751,0.17441965519023198]],[[0.7952012829797476,0.5018670723456135,0.6451931779755434,0.019023867724661803],[0.7747002374749813,0.4269602442579095,0.9881750755755372,-0.052134203292390824],[0.8281155884782194,0.47374220380710746,0.5938782532604049,0.1531802309574861],[0.7952250900910676,0.2653954053862152,0.6849011554336865,0.252977525610407],[0.7587380348584367,0.0926920047170927,0.6939966579625602,0.229418164267493],[0.7045327768505971,0.16999362359124365,0.6276809417632343,0.20265888966917472],[0.5489672817486997,-0.5869992761850696,0.24529764622951677,-0.43389379039277914],[0.495067790565888,-0.32737175892133535,-0.2436495275719348,-0.19261190316376015]]]]

Actual:   [[[[0.7045, 0.2291, 0.4334, 0.2109], [0.7045, 0.0958, 0.7917, -0.0458], [0.7045, 0.1983, 0.4251, 0.1846], [0.7045, 0.1576, 0.5225, -0.0042], [0.7045, -0.0135, 0.4961, 0.1933], [0.7045, 0.1834, 0.837, 0.025], [0.7045, 0.1458, 0.8779, -0.0477], [0.7045, -0.0073, 0.9482, 0.1745]], [[0.7953, 0.5019, 0.6452, 0.0191], [0.7748, 0.427, 0.9882, -0.0521], [0.8282, 0.4738, 0.5939, 0.1532], [0.7953, 0.2654, 0.685, 0.253], [0.7588, 0.0927, 0.694, 0.2295], [0.7046, 0.17, 0.6277, 0.2027], [0.549, -0.5869, 0.2453, -0.4338], [0.4951, -0.3273, -0.2436, -0.1926]]]]

Expected: [[[[0.7045, 0.2291, 0.4334, 0.2109], [0.7045, 0.0958, 0.7917, -0.0458], [0.7045, 0.1983, 0.4251, 0.1846], [0.7045, 0.1576, 0.5225, -0.0042], [0.7045, -0.0135, 0.4961, 0.1933], [0.7045, 0.1834, 0.837, 0.025], [0.7045, 0.1458, 0.8779, -0.0477], [0.7045, -0.0073, 0.9482, 0.1745]], [[0.7953, 0.5019, 0.6452, 0.0191], [0.7748, 0.427, 0.9882, -0.0521], [0.8282, 0.4738, 0.5939, 0.1532], [0.7953, 0.2654, 0.685, 0.253], [0.7588, 0.0927, 0.694, 0.2295], [0.7046, 0.17, 0.6277, 0.2027], [0.549, -0.5869, 0.2453, -0.4338], [0.4951, -0.3273, -0.2436, -0.1926]]]]