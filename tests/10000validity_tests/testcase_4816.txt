import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub72448 = tf.keras.layers.Input(shape=([3, 2, 3]))
in1Sub72448 = tf.keras.layers.Input(shape=([3, 2, 3]))
in0Ave42766 = tf.keras.layers.Input(shape=([1, 2]))
in1Ave42766 = tf.keras.layers.Input(shape=([1, 2]))
in0Con44241 = tf.keras.layers.Input(shape=([14]))
in0Con34858 = tf.keras.layers.Input(shape=([18, 3, 1]))
in0Glo66378 = tf.keras.layers.Input(shape=([1, 2]))
in0Per3440 = tf.keras.layers.Input(shape=([2, 3]))

Sub72448 = keras.layers.Subtract(name = 'Sub72448', )([in0Sub72448,in1Sub72448])
Res409 = keras.layers.Reshape((3, 6), name = 'Res409', )(Sub72448)
Fla43458 = keras.layers.Flatten(name = 'Fla43458', )(Res409)
Ave42766 = keras.layers.Average(name = 'Ave42766', )([in0Ave42766,in1Ave42766])
Res81075 = keras.layers.Reshape((1, 2, 1), name = 'Res81075', )(Ave42766)
Loc21537 = keras.layers.LocallyConnected2D(4, (1, 2),strides=(1, 2), name = 'Loc21537', )(Res81075)
Glo9730 = keras.layers.GlobalAveragePooling2D(name = 'Glo9730', )(Loc21537)
Con44241 = keras.layers.Concatenate(axis=1, name = 'Con44241', )([Glo9730,in0Con44241])
Mul68706 = keras.layers.Multiply(name = 'Mul68706', )([Fla43458,Con44241])
Res9851 = keras.layers.Reshape((18, 1), name = 'Res9851', )(Mul68706)
Res53371 = keras.layers.Reshape((18, 1, 1), name = 'Res53371', )(Res9851)
Zer50706 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer50706', )(Res53371)
Con34858 = keras.layers.Concatenate(axis=3, name = 'Con34858', )([Zer50706,in0Con34858])
Glo66378 = keras.layers.GlobalMaxPool1D(name = 'Glo66378', )(in0Glo66378)
Res69465 = keras.layers.Reshape((2, 1), name = 'Res69465', )(Glo66378)
Zer42832 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer42832', )(Res69465)
Per3440 = keras.layers.Permute((2,1), name = 'Per3440',)(in0Per3440)
Dot70885 = keras.layers.Dot(axes=(1, 1), name = 'Dot70885', )([Zer42832,Per3440])
Res95115 = keras.layers.Reshape((1, 2, 1), name = 'Res95115', )(Dot70885)
Sep65774 = keras.layers.SeparableConv2D(2, (1, 1),strides=(1, 1), padding='same', name = 'Sep65774', )(Res95115)
Zer54988 = keras.layers.ZeroPadding2D(padding=((17, 0), (1, 0)), name = 'Zer54988', )(Sep65774)
Max74205 = keras.layers.Maximum(name = 'Max74205', )([Con34858,Zer54988])
model = tf.keras.models.Model(inputs=[in0Sub72448,in1Sub72448,in0Ave42766,in1Ave42766,in0Con44241,in0Con34858,in0Glo66378,in0Per3440], outputs=Max74205)
w = model.get_layer('Loc21537').get_weights() 
w[0] = np.array([[[0.2135, 0.2034, 0.3189, 0.8815], [0.7257, 0.8203, 0.6551, 0.1027]]])
w[1] = np.array([[[0, 0, 0, 0]]])
model.get_layer('Loc21537').set_weights(w) 
w = model.get_layer('Sep65774').get_weights() 
w[0] = np.array([[[[0.554]]]])
w[1] = np.array([[[[0.1944, 0.1483]]]])
w[2] = np.array([0, 0])
model.get_layer('Sep65774').set_weights(w) 
in0Sub72448 = tf.constant([[[[0.038, 0.2735, 0.0479], [0.9072, 0.8196, 0.6215]], [[0.6905, 0.8576, 0.24], [0.3989, 0.1024, 0.8415]], [[0.7606, 0.5001, 0.2451], [0.6344, 0.0377, 0.2694]]]])
in1Sub72448 = tf.constant([[[[0.0746, 0.816, 0.608], [0.6966, 0.3856, 0.9106]], [[0.4708, 0.9894, 0.3965], [0.7911, 0.8343, 0.6525]], [[0.6939, 0.2835, 0.438], [0.5705, 0.3074, 0.9122]]]])
in0Ave42766 = tf.constant([[[0.2815, 0.4899]]])
in1Ave42766 = tf.constant([[[0.6293, 0.771]]])
in0Con44241 = tf.constant([[0.444, 0.3354, 0.3105, 0.4377, 0.2029, 0.2282, 0.426, 0.0124, 0.8554, 0.3724, 0.6057, 0.5267, 0.3385, 0.8865]])
in0Con34858 = tf.constant([[[[0.6363], [0.9924], [0.4182]], [[0.4612], [0.6417], [0.1096]], [[0.7598], [0.356], [0.7251]], [[0.9295], [0.8912], [0.2288]], [[0.4365], [0.1702], [0.8132]], [[0.0099], [0.8701], [0.6668]], [[0.1962], [0.8135], [0.8316]], [[0.1357], [0.7651], [0.0013]], [[0.8137], [0.5427], [0.3204]], [[0.1944], [0.1154], [0.7791]], [[0.9065], [0.6936], [0.4887]], [[0.8733], [0.2041], [0.4362]], [[0.0255], [0.0237], [0.5662]], [[0.3139], [0.6074], [0.3229]], [[0.2436], [0.4019], [0.1336]], [[0.1625], [0.254], [0.4101]], [[0.9135], [0.9586], [0.0361]], [[0.4559], [0.0663], [0.0146]]]])
in0Glo66378 = tf.constant([[[1.2988, 1.729]]])
in0Per3440 = tf.constant([[[1.6098, 1.5727, 1.4989], [1.9034, 1.1611, 1.0355]]])
print (np.array2string(model.predict([in0Sub72448,in1Sub72448,in0Ave42766,in1Ave42766,in0Con44241,in0Con34858,in0Glo66378,in0Per3440],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max74205.png')

LSub72448 = subtract_layer([[[[0.038, 0.2735, 0.0479], [0.9072, 0.8196, 0.6215]], [[0.6905, 0.8576, 0.24], [0.3989, 0.1024, 0.8415]], [[0.7606, 0.5001, 0.2451], [0.6344, 0.0377, 0.2694]]]], [[[[0.0746, 0.816, 0.608], [0.6966, 0.3856, 0.9106]], [[0.4708, 0.9894, 0.3965], [0.7911, 0.8343, 0.6525]], [[0.6939, 0.2835, 0.438], [0.5705, 0.3074, 0.9122]]]], Sub72448), 
LRes409 = reshape_layer(Sub72448, [3, 6], Res409), 
LFla43458 = flatten_layer(Res409, Fla43458), 
LAve42766 = average_layer([[[[0.2815, 0.4899]]], [[[0.6293, 0.771]]]], Ave42766), 
LRes81075 = reshape_layer(Ave42766, [1, 2, 1], Res81075), 
LLoc21537 = locally_connected2D_layer(Res81075, 1, 2,[[[0.2135, 0.2034, 0.3189, 0.8815], [0.7257, 0.8203, 0.6551, 0.1027]]],[[[0, 0, 0, 0]]], 1, 2, Loc21537), 
LGlo9730 = global_average_pooling2D_layer(Loc21537, Glo9730), 
LCon44241 = concatenate_layer([Glo9730,[[0.444, 0.3354, 0.3105, 0.4377, 0.2029, 0.2282, 0.426, 0.0124, 0.8554, 0.3724, 0.6057, 0.5267, 0.3385, 0.8865]]], 1, Con44241), 
LMul68706 = multiply_layer([Fla43458,Con44241], Mul68706), 
LRes9851 = reshape_layer(Mul68706, [18, 1], Res9851), 
LRes53371 = reshape_layer(Res9851, [18, 1, 1], Res53371), 
LZer50706 = zero_padding2D_layer(Res53371, 0, 0, 2, 0, Zer50706), 
LCon34858 = concatenate_layer([Zer50706,[[[[0.6363], [0.9924], [0.4182]], [[0.4612], [0.6417], [0.1096]], [[0.7598], [0.356], [0.7251]], [[0.9295], [0.8912], [0.2288]], [[0.4365], [0.1702], [0.8132]], [[0.0099], [0.8701], [0.6668]], [[0.1962], [0.8135], [0.8316]], [[0.1357], [0.7651], [0.0013]], [[0.8137], [0.5427], [0.3204]], [[0.1944], [0.1154], [0.7791]], [[0.9065], [0.6936], [0.4887]], [[0.8733], [0.2041], [0.4362]], [[0.0255], [0.0237], [0.5662]], [[0.3139], [0.6074], [0.3229]], [[0.2436], [0.4019], [0.1336]], [[0.1625], [0.254], [0.4101]], [[0.9135], [0.9586], [0.0361]], [[0.4559], [0.0663], [0.0146]]]]], 3, Con34858), 
LGlo66378 = global_max_pool1D_layer([[[1.2988, 1.729]]], Glo66378), 
LRes69465 = reshape_layer(Glo66378, [2, 1], Res69465), 
LZer42832 = zero_padding1D_layer(Res69465, 1, 0, Zer42832), 
LPer3440 = permute_layer([[[1.6098, 1.5727, 1.4989], [1.9034, 1.1611, 1.0355]]], 2,1, Per3440), 
LDot70885 = dot_layer(Zer42832,Per3440, 1, 1, Dot70885), 
LRes95115 = reshape_layer(Dot70885, [1, 2, 1], Res95115), 
LSep65774 = separable_conv2D_layer(Res95115, 1, 1,[[[[[0.554]]]],[[[[0.1944, 0.1483]]]]],[0, 0], 1, 1, true, Sep65774), 
LZer54988 = zero_padding2D_layer(Sep65774, 17, 0, 1, 0, Zer54988), 
LMax74205 = maximum_layer([Con34858,Zer54988], Max74205), 
exec_layers([LSub72448,LRes409,LFla43458,LAve42766,LRes81075,LLoc21537,LGlo9730,LCon44241,LMul68706,LRes9851,LRes53371,LZer50706,LCon34858,LGlo66378,LRes69465,LZer42832,LPer3440,LDot70885,LRes95115,LSep65774,LZer54988,LMax74205],["Sub72448","Res409","Fla43458","Ave42766","Res81075","Loc21537","Glo9730","Con44241","Mul68706","Res9851","Res53371","Zer50706","Con34858","Glo66378","Res69465","Zer42832","Per3440","Dot70885","Res95115","Sep65774","Zer54988","Max74205"],Max74205,"Max74205")

Actual (Unparsed): [[[[0.0000000, 0.6363000], [0.0000000, 0.9924000], [0.0000000, 0.4182000]], [[0.0000000, 0.4612000], [0.0000000, 0.6417000], [0.0000000, 0.1096000]], [[0.0000000, 0.7598000], [0.0000000, 0.3560000], [0.0000000, 0.7251000]], [[0.0000000, 0.9295000], [0.0000000, 0.8912000], [0.0981780, 0.2288000]], [[0.0000000, 0.4365000], [0.0000000, 0.1702000], [0.1926960, 0.8132000]], [[0.0000000, 0.0099000], [0.0000000, 0.8701000], [0.0000000, 0.6668000]], [[0.0000000, 0.1962000], [0.0000000, 0.8135000], [0.0682169, 0.8316000]], [[0.0000000, 0.1357000], [0.0000000, 0.7651000], [0.0000000, 0.0013000]], [[0.0000000, 0.8137000], [0.0000000, 0.5427000], [0.0000000, 0.3204000]], [[0.0000000, 0.1944000], [0.0000000, 0.1154000], [0.0000000, 0.7791000]], [[0.0000000, 0.9065000], [0.0000000, 0.6936000], [0.0000000, 0.4887000]], [[0.0000000, 0.8733000], [0.0000000, 0.2041000], [0.0023436, 0.4362000]], [[0.0000000, 0.0255000], [0.0000000, 0.0237000], [0.0570552, 0.5662000]], [[0.0000000, 0.3139000], [0.0000000, 0.6074000], [0.0806618, 0.3229000]], [[0.0000000, 0.2436000], [0.0000000, 0.4019000], [0.0000000, 0.1336000]], [[0.0000000, 0.1625000], [0.0000000, 0.2540000], [0.0336561, 0.4101000]], [[0.0000000, 0.9135000], [0.0000000, 0.9586000], [0.0000000, 0.0361000]], [[0.0000000, 0.4559000], [0.4990945, 0.3807393], [0.3552315, 0.2709919]]]]

Expected (Unparsed): [[[[0,0.6363],[0,0.9924],[0,0.4182]],[[0,0.4612],[0,0.6417],[0,0.1096]],[[0,0.7598],[0,0.356],[0,0.7251]],[[0,0.9295],[0,0.8912],[0.098177995539,0.2288]],[[0,0.4365],[0,0.1702],[0.192696,0.8132]],[[0,0.0099],[0,0.8701],[0,0.6668]],[[0,0.1962],[0,0.8135],[0.06821685,0.8316]],[[0,0.1357],[0,0.7651],[0,0.0013]],[[0,0.8137],[0,0.5427],[0,0.3204]],[[0,0.1944],[0,0.1154],[0,0.7791]],[[0,0.9065],[0,0.6936],[0,0.4887]],[[0,0.8733],[0,0.2041],[0.002343600000000001,0.4362]],[[0,0.0255],[0,0.0237],[0.05705518000000008,0.5662]],[[0,0.3139],[0,0.6074],[0.08066184000000001,0.3229]],[[0,0.2436],[0,0.4019],[0,0.1336]],[[0,0.1625],[0,0.254],[0.03365612999999997,0.4101]],[[0,0.9135],[0,0.9586],[0,0.0361]],[[0,0.4559],[0.499094464491936,0.380739244260052],[0.35523150638716805,0.27099193619967604]]]]

Actual:   [[[[0, 0.6363], [0, 0.9924], [0, 0.4182]], [[0, 0.4612], [0, 0.6417], [0, 0.1096]], [[0, 0.7598], [0, 0.356], [0, 0.7251]], [[0, 0.9295], [0, 0.8912], [0.0982, 0.2288]], [[0, 0.4365], [0, 0.1702], [0.1927, 0.8132]], [[0, 0.0099], [0, 0.8701], [0, 0.6668]], [[0, 0.1962], [0, 0.8135], [0.0683, 0.8316]], [[0, 0.1357], [0, 0.7651], [0, 0.0013]], [[0, 0.8137], [0, 0.5427], [0, 0.3204]], [[0, 0.1944], [0, 0.1154], [0, 0.7791]], [[0, 0.9065], [0, 0.6936], [0, 0.4887]], [[0, 0.8733], [0, 0.2041], [0.0024, 0.4362]], [[0, 0.0255], [0, 0.0237], [0.0571, 0.5662]], [[0, 0.3139], [0, 0.6074], [0.0807, 0.3229]], [[0, 0.2436], [0, 0.4019], [0, 0.1336]], [[0, 0.1625], [0, 0.254], [0.0337, 0.4101]], [[0, 0.9135], [0, 0.9586], [0, 0.0361]], [[0, 0.4559], [0.4991, 0.3808], [0.3553, 0.271]]]]

Expected: [[[[0, 0.6363], [0, 0.9924], [0, 0.4182]], [[0, 0.4612], [0, 0.6417], [0, 0.1096]], [[0, 0.7598], [0, 0.356], [0, 0.7251]], [[0, 0.9295], [0, 0.8912], [0.0982, 0.2288]], [[0, 0.4365], [0, 0.1702], [0.1927, 0.8132]], [[0, 0.0099], [0, 0.8701], [0, 0.6668]], [[0, 0.1962], [0, 0.8135], [0.0683, 0.8316]], [[0, 0.1357], [0, 0.7651], [0, 0.0013]], [[0, 0.8137], [0, 0.5427], [0, 0.3204]], [[0, 0.1944], [0, 0.1154], [0, 0.7791]], [[0, 0.9065], [0, 0.6936], [0, 0.4887]], [[0, 0.8733], [0, 0.2041], [0.0024, 0.4362]], [[0, 0.0255], [0, 0.0237], [0.0571, 0.5662]], [[0, 0.3139], [0, 0.6074], [0.0807, 0.3229]], [[0, 0.2436], [0, 0.4019], [0, 0.1336]], [[0, 0.1625], [0, 0.254], [0.0337, 0.4101]], [[0, 0.9135], [0, 0.9586], [0, 0.0361]], [[0, 0.4559], [0.4991, 0.3808], [0.3553, 0.271]]]]