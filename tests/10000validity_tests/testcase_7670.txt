import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave74895 = tf.keras.layers.Input(shape=([1, 2]))
in1Ave74895 = tf.keras.layers.Input(shape=([1, 2]))

Ave74895 = keras.layers.Average(name = 'Ave74895', )([in0Ave74895,in1Ave74895])
Con96237 = keras.layers.Conv1D(3, (1),strides=(1), padding='valid', dilation_rate=(1), name = 'Con96237', )(Ave74895)
Res5190 = keras.layers.Reshape((1, 3, 1), name = 'Res5190', )(Con96237)
Res14894 = keras.layers.Reshape((1, 3, 1, 1), name = 'Res14894', )(Res5190)
Up_43355 = keras.layers.UpSampling3D(size=(2, 1, 2), name = 'Up_43355', )(Res14894)
Mas94301 = keras.layers.Masking(mask_value=2, name = 'Mas94301', )(Up_43355)
model = tf.keras.models.Model(inputs=[in0Ave74895,in1Ave74895], outputs=Mas94301)
w = model.get_layer('Con96237').get_weights() 
w[0] = np.array([[[0.1825, 0.9795, 0.0703], [0.6549, 0.2729, 0.997]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con96237').set_weights(w) 
in0Ave74895 = tf.constant([[[0.8942, 0.3165]]])
in1Ave74895 = tf.constant([[[0.8563, 0.6189]]])
print (np.array2string(model.predict([in0Ave74895,in1Ave74895],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mas94301.png')

LAve74895 = average_layer([[[[0.8942, 0.3165]]], [[[0.8563, 0.6189]]]], Ave74895), 
LCon96237 = conv1D_layer(Ave74895, 1,[[[0.1825, 0.9795, 0.0703], [0.6549, 0.2729, 0.997]]],[0, 0, 0], 1, false, 1, Con96237), 
LRes5190 = reshape_layer(Con96237, [1, 3, 1], Res5190), 
LRes14894 = reshape_layer(Res5190, [1, 3, 1, 1], Res14894), 
LUp_43355 = up_sampling3D_layer(Res14894, 2, 1, 2, Up_43355), 
LMas94301 = masking_layer(Up_43355, 2, Mas94301), 
exec_layers([LAve74895,LCon96237,LRes5190,LRes14894,LUp_43355,LMas94301],["Ave74895","Con96237","Res5190","Res14894","Up_43355","Mas94301"],Mas94301,"Mas94301")

Actual (Unparsed): [[[[[0.4660299], [0.4660299]], [[0.9849427], [0.9849427]], [[0.5278270], [0.5278270]]], [[[0.4660299], [0.4660299]], [[0.9849427], [0.9849427]], [[0.5278270], [0.5278270]]]]]

Expected (Unparsed): [[[[[0.46602985500000005],[0.46602985500000005]],[[0.9849427049999999],[0.9849427049999999]],[[0.527826975],[0.527826975]]],[[[0.46602985500000005],[0.46602985500000005]],[[0.9849427049999999],[0.9849427049999999]],[[0.527826975],[0.527826975]]]]]

Actual:   [[[[[0.4661], [0.4661]], [[0.985], [0.985]], [[0.5279], [0.5279]]], [[[0.4661], [0.4661]], [[0.985], [0.985]], [[0.5279], [0.5279]]]]]

Expected: [[[[[0.4661], [0.4661]], [[0.985], [0.985]], [[0.5279], [0.5279]]], [[[0.4661], [0.4661]], [[0.985], [0.985]], [[0.5279], [0.5279]]]]]