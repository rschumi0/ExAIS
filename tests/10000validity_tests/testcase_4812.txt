import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot74522 = tf.keras.layers.Input(shape=([2, 3]))
in1Dot74522 = tf.keras.layers.Input(shape=([2, 3]))
in0Con42105 = tf.keras.layers.Input(shape=([4, 3, 1]))
in0Den4345 = tf.keras.layers.Input(shape=([4, 3, 4]))
in0Cro15062 = tf.keras.layers.Input(shape=([2, 2]))
in0Con30664 = tf.keras.layers.Input(shape=([23]))

Dot74522 = keras.layers.Dot(axes=(1, 1), name = 'Dot74522', )([in0Dot74522,in1Dot74522])
Res19256 = keras.layers.Reshape((3, 3, 1), name = 'Res19256', )(Dot74522)
Zer55285 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer55285', )(Res19256)
Con42105 = keras.layers.Concatenate(axis=3, name = 'Con42105', )([Zer55285,in0Con42105])
Den4345 = keras.layers.Dense(2,name = 'Den4345', )(in0Den4345)
Mul13707 = keras.layers.Multiply(name = 'Mul13707', )([Con42105,Den4345])
Res19729 = keras.layers.Reshape((4, 6), name = 'Res19729', )(Mul13707)
Fla85192 = keras.layers.Flatten(name = 'Fla85192', )(Res19729)
Cro15062 = keras.layers.Cropping1D(cropping=((0, 0)), name = 'Cro15062', )(in0Cro15062)
Res22622 = keras.layers.Reshape((2, 2, 1), name = 'Res22622', )(Cro15062)
Res2398 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res2398', )(Res22622)
Glo45758 = keras.layers.GlobalMaxPool3D(name = 'Glo45758', )(Res2398)
Con30664 = keras.layers.Concatenate(axis=1, name = 'Con30664', )([Glo45758,in0Con30664])
Max65226 = keras.layers.Maximum(name = 'Max65226', )([Fla85192,Con30664])
model = tf.keras.models.Model(inputs=[in0Dot74522,in1Dot74522,in0Con42105,in0Den4345,in0Cro15062,in0Con30664], outputs=Max65226)
w = model.get_layer('Den4345').get_weights() 
w[0] = np.array([[0.7608, 0.7208], [0.5827, 0.3959], [0.1708, 0.1762], [0.5597, 0.1411]])
w[1] = np.array([0.8875, 0.5544])
model.get_layer('Den4345').set_weights(w) 
in0Dot74522 = tf.constant([[[0.3911, 0.2375, 0.1279], [0.6987, 0.0554, 0.7015]]])
in1Dot74522 = tf.constant([[[0.7112, 0.1798, 0.1035], [0.653, 0.8985, 0.778]]])
in0Con42105 = tf.constant([[[[0.7158], [0.219], [0.2368]], [[0.6853], [0.1991], [0.8574]], [[0.9003], [0.8141], [0.6256]], [[0.9108], [0.6862], [0.8144]]]])
in0Den4345 = tf.constant([[[[0.5026, 0.8177, 0.9744, 0.93], [0.1549, 0.3522, 0.0027, 0.6827], [0.2692, 0.1603, 0.7394, 0.368]], [[0.983, 0.3001, 0.0822, 0.5063], [0.0995, 0.76, 0.0685, 0.6957], [0.2903, 0.3483, 0.4321, 0.8485]], [[0.8792, 0.4297, 0.512, 0.7666], [0.3749, 0.7699, 0.8698, 0.7157], [0.2431, 0.803, 0.3177, 0.3534]], [[0.0252, 0.2246, 0.1842, 0.0936], [0.7972, 0.9303, 0.5516, 0.7473], [0.1395, 0.9708, 0.8898, 0.0738]]]])
in0Cro15062 = tf.constant([[[1.2387, 1.373], [1.9774, 1.6922]]])
in0Con30664 = tf.constant([[0.2295, 0.3989, 0.4657, 0.7894, 0.3619, 0.8222, 0.2685, 0.0627, 0.0504, 0.3272, 0.2616, 0.0939, 0.7161, 0.0248, 0.3904, 0.3222, 0.8565, 0.577, 0.4242, 0.9853, 0.967, 0.1384, 0.4329]])
print (np.array2string(model.predict([in0Dot74522,in1Dot74522,in0Con42105,in0Den4345,in0Cro15062,in0Con30664],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max65226.png')

LDot74522 = dot_layer([[[0.3911, 0.2375, 0.1279], [0.6987, 0.0554, 0.7015]]], [[[0.7112, 0.1798, 0.1035], [0.653, 0.8985, 0.778]]], 1, 1, Dot74522), 
LRes19256 = reshape_layer(Dot74522, [3, 3, 1], Res19256), 
LZer55285 = zero_padding2D_layer(Res19256, 1, 0, 0, 0, Zer55285), 
LCon42105 = concatenate_layer([Zer55285,[[[[0.7158], [0.219], [0.2368]], [[0.6853], [0.1991], [0.8574]], [[0.9003], [0.8141], [0.6256]], [[0.9108], [0.6862], [0.8144]]]]], 3, Con42105), 
LDen4345 = dense_layer([[[[0.5026, 0.8177, 0.9744, 0.93], [0.1549, 0.3522, 0.0027, 0.6827], [0.2692, 0.1603, 0.7394, 0.368]], [[0.983, 0.3001, 0.0822, 0.5063], [0.0995, 0.76, 0.0685, 0.6957], [0.2903, 0.3483, 0.4321, 0.8485]], [[0.8792, 0.4297, 0.512, 0.7666], [0.3749, 0.7699, 0.8698, 0.7157], [0.2431, 0.803, 0.3177, 0.3534]], [[0.0252, 0.2246, 0.1842, 0.0936], [0.7972, 0.9303, 0.5516, 0.7473], [0.1395, 0.9708, 0.8898, 0.0738]]]], [[0.7608, 0.7208], [0.5827, 0.3959], [0.1708, 0.1762], [0.5597, 0.1411]],[0.8875, 0.5544], Den4345), 
LMul13707 = multiply_layer([Con42105,Den4345], Mul13707), 
LRes19729 = reshape_layer(Mul13707, [4, 6], Res19729), 
LFla85192 = flatten_layer(Res19729, Fla85192), 
LCro15062 = cropping1D_layer([[[1.2387, 1.373], [1.9774, 1.6922]]], 0, 0, Cro15062), 
LRes22622 = reshape_layer(Cro15062, [2, 2, 1], Res22622), 
LRes2398 = reshape_layer(Res22622, [2, 2, 1, 1], Res2398), 
LGlo45758 = global_max_pool3D_layer(Res2398, Glo45758), 
LCon30664 = concatenate_layer([Glo45758,[[0.2295, 0.3989, 0.4657, 0.7894, 0.3619, 0.8222, 0.2685, 0.0627, 0.0504, 0.3272, 0.2616, 0.0939, 0.7161, 0.0248, 0.3904, 0.3222, 0.8565, 0.577, 0.4242, 0.9853, 0.967, 0.1384, 0.4329]]], 1, Con30664), 
LMax65226 = maximum_layer([Fla85192,Con30664], Max65226), 
exec_layers([LDot74522,LRes19256,LZer55285,LCon42105,LDen4345,LMul13707,LRes19729,LFla85192,LCro15062,LRes22622,LRes2398,LGlo45758,LCon30664,LMax65226],["Dot74522","Res19256","Zer55285","Con42105","Den4345","Mul13707","Res19729","Fla85192","Cro15062","Res22622","Res2398","Glo45758","Con30664","Max65226"],Max65226,"Max65226")

Actual (Unparsed): [[1.9773999, 1.1047040, 0.3989000, 0.4657000, 0.7894000, 0.3619000, 1.5478615, 1.0058001, 1.2615639, 0.2065138, 1.0863788, 0.9409104, 0.4764762, 1.4014315, 0.2007250, 1.1264502, 0.3222000, 0.8565000, 0.6156934, 0.6440688, 1.6649677, 1.1665150, 0.9797118, 0.9825632]]

Expected (Unparsed): [[1.9774,1.104704010882,0.3989,0.4657,0.7894,0.3619,1.5478615494397667,1.005800117168,1.2615638534320135,0.206513801087,1.0863787620565108,0.9409103998919999,0.476476188066054,1.401431513175,0.20072503768413194,1.126450110576,0.3222,0.8565,0.6156934033382028,0.64406885004,1.6649676605993922,1.1665149399760002,0.979711806732139,0.982563224544]]

Actual:   [[1.9774, 1.1048, 0.3989, 0.4657, 0.7894, 0.3619, 1.5479, 1.0059, 1.2616, 0.2066, 1.0864, 0.941, 0.4765, 1.4015, 0.2008, 1.1265, 0.3222, 0.8565, 0.6157, 0.6441, 1.665, 1.1666, 0.9798, 0.9826]]

Expected: [[1.9774, 1.1048, 0.3989, 0.4657, 0.7894, 0.3619, 1.5479, 1.0059, 1.2616, 0.2066, 1.0864, 0.941, 0.4765, 1.4015, 0.2008, 1.1265, 0.3222, 0.8565, 0.6157, 0.6441, 1.665, 1.1666, 0.9798, 0.9826]]