import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Up_14021 = tf.keras.layers.Input(shape=([1, 4, 3]))
in0Up_53206 = tf.keras.layers.Input(shape=([3, 1, 1]))
in0Con50574 = tf.keras.layers.Input(shape=([3, 15, 2]))

Up_14021 = keras.layers.UpSampling2D(size=(1, 2), name = 'Up_14021', )(in0Up_14021)
Lea97582 = keras.layers.LeakyReLU(alpha=2.034875448063604, name = 'Lea97582', )(Up_14021)
Zer62602 = keras.layers.ZeroPadding2D(padding=((2, 0), (7, 0)), name = 'Zer62602', )(Lea97582)
Up_53206 = keras.layers.UpSampling2D(size=(1, 1), name = 'Up_53206', )(in0Up_53206)
Zer4080 = keras.layers.ZeroPadding2D(padding=((0, 0), (14, 0)), name = 'Zer4080', )(Up_53206)
Con50574 = keras.layers.Concatenate(axis=3, name = 'Con50574', )([Zer4080,in0Con50574])
Mul73419 = keras.layers.Multiply(name = 'Mul73419', )([Zer62602,Con50574])
Cro85510 = keras.layers.Cropping2D(cropping=((0, 0), (1, 0)), name = 'Cro85510', )(Mul73419)
model = tf.keras.models.Model(inputs=[in0Up_14021,in0Up_53206,in0Con50574], outputs=Cro85510)
in0Up_14021 = tf.constant([[[[1.401, 1.6636, 1.1408], [1.4514, 1.1903, 1.7853], [1.2726, 1.4191, 1.7241], [1.4605, 1.7608, 1.6452]]]])
in0Up_53206 = tf.constant([[[[1.6575]], [[1.5735]], [[1.7368]]]])
in0Con50574 = tf.constant([[[[0.6738, 0.1305], [0.7119, 0.2464], [0.5923, 0.6315], [0.3113, 0.1157], [0.7986, 0.6187], [0.1082, 0.8895], [0.9713, 0.3626], [0.5581, 0.7038], [0.3016, 0.7353], [0.9098, 0.8237], [0.3372, 0.917], [0.8573, 0.5817], [0.3511, 0.085], [0.1479, 0.6578], [0.8747, 0.0788]], [[0.7198, 0.0299], [0.725, 0.8311], [0.4008, 0.1003], [0.3256, 0.1733], [0.9288, 0.2159], [0.3696, 0.4761], [0.0794, 0.0467], [0.9098, 0.4713], [0.9764, 0.0565], [0.7691, 0.5149], [0.2438, 0.609], [0.7627, 0.498], [0.5191, 0.0886], [0.5999, 0.5895], [0.9859, 0.7815]], [[0.4862, 0.0035], [0.0097, 0.1653], [0.3915, 0.0245], [0.6641, 0.6829], [0.6628, 0.5949], [0.9181, 0.0416], [0.1672, 0.8709], [0.5251, 0.5668], [0.4285, 0.2878], [0.1996, 0.1699], [0.2866, 0.8398], [0.4968, 0.0412], [0.4533, 0.4777], [0.9222, 0.2672], [0.9633, 0.7515]]]])
print (np.array2string(model.predict([in0Up_14021,in0Up_53206,in0Con50574],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Cro85510.png')

LUp_14021 = up_sampling2D_layer([[[[1.401, 1.6636, 1.1408], [1.4514, 1.1903, 1.7853], [1.2726, 1.4191, 1.7241], [1.4605, 1.7608, 1.6452]]]], 1, 2, Up_14021), 
LLea97582 = leaky_relu_layer(Up_14021, 2.034875448063604, Lea97582), 
LZer62602 = zero_padding2D_layer(Lea97582, 2, 0, 7, 0, Zer62602), 
LUp_53206 = up_sampling2D_layer([[[[1.6575]], [[1.5735]], [[1.7368]]]], 1, 1, Up_53206), 
LZer4080 = zero_padding2D_layer(Up_53206, 0, 0, 14, 0, Zer4080), 
LCon50574 = concatenate_layer([Zer4080,[[[[0.6738, 0.1305], [0.7119, 0.2464], [0.5923, 0.6315], [0.3113, 0.1157], [0.7986, 0.6187], [0.1082, 0.8895], [0.9713, 0.3626], [0.5581, 0.7038], [0.3016, 0.7353], [0.9098, 0.8237], [0.3372, 0.917], [0.8573, 0.5817], [0.3511, 0.085], [0.1479, 0.6578], [0.8747, 0.0788]], [[0.7198, 0.0299], [0.725, 0.8311], [0.4008, 0.1003], [0.3256, 0.1733], [0.9288, 0.2159], [0.3696, 0.4761], [0.0794, 0.0467], [0.9098, 0.4713], [0.9764, 0.0565], [0.7691, 0.5149], [0.2438, 0.609], [0.7627, 0.498], [0.5191, 0.0886], [0.5999, 0.5895], [0.9859, 0.7815]], [[0.4862, 0.0035], [0.0097, 0.1653], [0.3915, 0.0245], [0.6641, 0.6829], [0.6628, 0.5949], [0.9181, 0.0416], [0.1672, 0.8709], [0.5251, 0.5668], [0.4285, 0.2878], [0.1996, 0.1699], [0.2866, 0.8398], [0.4968, 0.0412], [0.4533, 0.4777], [0.9222, 0.2672], [0.9633, 0.7515]]]]], 3, Con50574), 
LMul73419 = multiply_layer([Zer62602,Con50574], Mul73419), 
LCro85510 = cropping2D_layer(Mul73419, 0, 0, 1, 0, Cro85510), 
exec_layers([LUp_14021,LLea97582,LZer62602,LUp_53206,LZer4080,LCon50574,LMul73419,LCro85510],["Up_14021","Lea97582","Zer62602","Up_53206","Zer4080","Con50574","Mul73419","Cro85510"],Cro85510,"Cro85510")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.8735563, 0.6466054], [0.0000000, 0.7128526, 0.3283223], [0.0000000, 0.2375839, 0.3033225], [0.0000000, 0.3411400, 1.4992950], [0.0000000, 0.7050089, 0.0710329], [0.0000000, 0.6432780, 0.8236026], [0.0000000, 1.6238098, 0.4395974], [2.5365963, 1.6961786, 1.2363678]]]]

Expected (Unparsed): [[[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0.0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0.0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0],[0.0,0.87355636,0.64660544],[0.0,0.7128526,0.32832224],[0.0,0.23758387999999997,0.30332247],[0.0,0.34113998,1.49929494],[0.0,0.7050088800000001,0.07103292],[0.0,0.64327803,0.82360257],[0.0,1.6238097599999999,0.43959744],[2.5365963999999996,1.69617864,1.2363678]]]]

Actual:   [[[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0.8736, 0.6467], [0, 0.7129, 0.3284], [0, 0.2376, 0.3034], [0, 0.3412, 1.4993], [0, 0.7051, 0.0711], [0, 0.6433, 0.8237], [0, 1.6239, 0.4396], [2.5366, 1.6962, 1.2364]]]]

Expected: [[[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0.8736, 0.6467], [0, 0.7129, 0.3284], [0, 0.2376, 0.3034], [0, 0.3412, 1.4993], [0, 0.7051, 0.0711], [0, 0.6433, 0.8237], [0, 1.6239, 0.4396], [2.5366, 1.6962, 1.2364]]]]