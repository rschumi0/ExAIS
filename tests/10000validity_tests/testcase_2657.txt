import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Thr15250 = tf.keras.layers.Input(shape=([1, 2]))
in0Con51890 = tf.keras.layers.Input(shape=([2, 2, 3, 2]))
in0Ave98176 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Ave98176 = tf.keras.layers.Input(shape=([2, 2, 2]))

Thr15250 = keras.layers.ThresholdedReLU(theta=1.638000266089525, name = 'Thr15250', input_shape=(1, 2))(in0Thr15250)
Res38430 = keras.layers.Reshape((1, 2, 1), name = 'Res38430', )(Thr15250)
Res17149 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res17149', )(Res38430)
Zer38532 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (2, 0)), name = 'Zer38532', )(Res17149)
Con51890 = keras.layers.Concatenate(axis=4, name = 'Con51890', )([Zer38532,in0Con51890])
Ave98176 = keras.layers.Average(name = 'Ave98176', )([in0Ave98176,in1Ave98176])
Res83922 = keras.layers.Reshape((2, 2, 2, 1), name = 'Res83922', )(Ave98176)
Con50126 = keras.layers.Conv3DTranspose(3, (1, 1, 2),strides=(1, 1, 1), padding='valid', name = 'Con50126', )(Res83922)
Mul73895 = keras.layers.Multiply(name = 'Mul73895', )([Con51890,Con50126])
model = tf.keras.models.Model(inputs=[in0Thr15250,in0Con51890,in0Ave98176,in1Ave98176], outputs=Mul73895)
w = model.get_layer('Con50126').get_weights() 
w[0] = np.array([[[[[0.4073], [0.4012], [0.0997]], [[0.961], [0.2686], [0.0231]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con50126').set_weights(w) 
in0Thr15250 = tf.constant([[[0.9262, 0.0085]]])
in0Con51890 = tf.constant([[[[[0.1056, 0.6772], [0.2206, 0.7728], [0.4021, 0.0758]], [[0.4944, 0.1194], [0.8456, 0.2147], [0.3856, 0.401]]], [[[0.2023, 0.8817], [0.1519, 0.3384], [0.4409, 0.7796]], [[0.7269, 0.8786], [0.4243, 0.7539], [0.8498, 0.5491]]]]])
in0Ave98176 = tf.constant([[[[0.9174, 0.8077], [0.2441, 0.0899]], [[0.1389, 0.8488], [0.0785, 0.3767]]]])
in1Ave98176 = tf.constant([[[[0.9464, 0.6651], [0.9582, 0.1368]], [[0.9272, 0.2914], [0.2456, 0.0762]]]])
print (np.array2string(model.predict([in0Thr15250,in0Con51890,in0Ave98176,in1Ave98176],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul73895.png')

LThr15250 = thresholded_relu_layer([[[0.9262, 0.0085]]], 1.638000266089525, Thr15250), 
LRes38430 = reshape_layer(Thr15250, [1, 2, 1], Res38430), 
LRes17149 = reshape_layer(Res38430, [1, 2, 1, 1], Res17149), 
LZer38532 = zero_padding3D_layer(Res17149, 1, 0, 0, 0, 2, 0, Zer38532), 
LCon51890 = concatenate_layer([Zer38532,[[[[[0.1056, 0.6772], [0.2206, 0.7728], [0.4021, 0.0758]], [[0.4944, 0.1194], [0.8456, 0.2147], [0.3856, 0.401]]], [[[0.2023, 0.8817], [0.1519, 0.3384], [0.4409, 0.7796]], [[0.7269, 0.8786], [0.4243, 0.7539], [0.8498, 0.5491]]]]]], 4, Con51890), 
LAve98176 = average_layer([[[[[0.9174, 0.8077], [0.2441, 0.0899]], [[0.1389, 0.8488], [0.0785, 0.3767]]]], [[[[0.9464, 0.6651], [0.9582, 0.1368]], [[0.9272, 0.2914], [0.2456, 0.0762]]]]], Ave98176), 
LRes83922 = reshape_layer(Ave98176, [2, 2, 2, 1], Res83922), 
LCon50126 = conv3D_transpose_layer(Res83922, 1, 1, 2,[[[[[0.4073], [0.4012], [0.0997]], [[0.961], [0.2686], [0.0231]]]]],[0, 0, 0], 1, 1, 1, false, Con50126), 
LMul73895 = multiply_layer([Con51890,Con50126], Mul73895), 
exec_layers([LThr15250,LRes38430,LRes17149,LZer38532,LCon51890,LAve98176,LRes83922,LCon50126,LMul73895],["Thr15250","Res38430","Res17149","Zer38532","Con51890","Ave98176","Res83922","Con50126","Mul73895"],Mul73895,"Mul73895")

Actual (Unparsed): [[[[[0.0000000, 0.0394815, 0.0629189], [0.0000000, 0.1203929, 0.0733742], [0.0000000, 0.0795342, 0.0012894]], [[0.0000000, 0.1192401, 0.0071562], [0.0000000, 0.1749926, 0.0054078], [0.0000000, 0.0117399, 0.0010500]]], [[[0.0000000, 0.0432638, 0.0468580], [0.0000000, 0.0564918, 0.0234012], [0.0000000, 0.0675145, 0.0102668]], [[0.0000000, 0.0472590, 0.0141950], [0.0000000, 0.0570167, 0.0198430], [0.0000000, 0.0516886, 0.0028723]]]]]

Expected (Unparsed): [[[[[0.0,0.039481546368,0.062918943196],[0.0,0.12039289561199999,0.07337424561599999],[0.0,0.079534189784,0.0012894216720000001]],[[0.0,0.11924007427200002,0.007156197807000001],[0.0,0.17499261589600004,0.005407769132],[0.0,0.011739904336000001,0.0010499723850000001]]],[[[0.0,0.043263809218,0.046858021444500006],[0.0,0.056491815065000006,0.02340118062],[0.0,0.06751451437400001,0.010266794075999999]],[[0.0,0.047259010973999996,0.014194999861],[0.0,0.057016742391,0.019842964637999998],[0.0,0.051688634606,0.0028723393545]]]]]

Actual:   [[[[[0, 0.0395, 0.063], [0, 0.1204, 0.0734], [0, 0.0796, 0.0013]], [[0, 0.1193, 0.0072], [0, 0.175, 0.0055], [0, 0.0118, 0.0011]]], [[[0, 0.0433, 0.0469], [0, 0.0565, 0.0235], [0, 0.0676, 0.0103]], [[0, 0.0473, 0.0142], [0, 0.0571, 0.0199], [0, 0.0517, 0.0029]]]]]

Expected: [[[[[0, 0.0395, 0.063], [0, 0.1204, 0.0734], [0, 0.0796, 0.0013]], [[0, 0.1193, 0.0072], [0, 0.175, 0.0055], [0, 0.0118, 0.0011]]], [[[0, 0.0433, 0.0469], [0, 0.0565, 0.0235], [0, 0.0676, 0.0103]], [[0, 0.0473, 0.0142], [0, 0.0571, 0.0199], [0, 0.0517, 0.0029]]]]]