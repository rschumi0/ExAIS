import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min67632 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in1Min67632 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in0Max62348 = tf.keras.layers.Input(shape=([2, 1]))
in1Max62348 = tf.keras.layers.Input(shape=([2, 1]))
in0Con50279 = tf.keras.layers.Input(shape=([1]))
in0Mas98937 = tf.keras.layers.Input(shape=([2]))

Min67632 = keras.layers.Minimum(name = 'Min67632', )([in0Min67632,in1Min67632])
Res19290 = keras.layers.Reshape((1, 1, 2), name = 'Res19290', )(Min67632)
Res97197 = keras.layers.Reshape((1, 2), name = 'Res97197', )(Res19290)
Max7671 = keras.layers.MaxPool1D(pool_size=(1), name = 'Max7671', )(Res97197)
Fla97277 = keras.layers.Flatten(name = 'Fla97277', )(Max7671)
Max62348 = keras.layers.Maximum(name = 'Max62348', )([in0Max62348,in1Max62348])
Res86714 = keras.layers.Reshape((2, 1, 1), name = 'Res86714', )(Max62348)
Cro66036 = keras.layers.Cropping2D(cropping=((1, 0), (0, 0)), name = 'Cro66036', )(Res86714)
Res64952 = keras.layers.Reshape((1, 1), name = 'Res64952', )(Cro66036)
Fla47033 = keras.layers.Flatten(name = 'Fla47033', )(Res64952)
Con50279 = keras.layers.Concatenate(axis=1, name = 'Con50279', )([Fla47033,in0Con50279])
Mas98937 = keras.layers.Masking(mask_value=2, name = 'Mas98937', )(in0Mas98937)
Bat76681 = keras.layers.BatchNormalization(axis=1, epsilon=0.7883563070472109,  name = 'Bat76681', )(Mas98937)
Add13026 = keras.layers.Add(name = 'Add13026', )([Con50279,Bat76681])
Dot57363 = keras.layers.Dot(axes=(1, 1), name = 'Dot57363', )([Fla97277,Add13026])
model = tf.keras.models.Model(inputs=[in0Min67632,in1Min67632,in0Max62348,in1Max62348,in0Con50279,in0Mas98937], outputs=Dot57363)
w = model.get_layer('Bat76681').get_weights() 
w[0] = np.array([0.464, 0.6414])
w[1] = np.array([0.9617, 0.5332])
w[2] = np.array([0.5616, 0.2041])
w[3] = np.array([0.7136, 0.2526])
model.get_layer('Bat76681').set_weights(w) 
in0Min67632 = tf.constant([[[[[0.3726], [0.27]]]]])
in1Min67632 = tf.constant([[[[[0.67], [0.9594]]]]])
in0Max62348 = tf.constant([[[0.1882], [0.2941]]])
in1Max62348 = tf.constant([[[0.9358], [0.5717]]])
in0Con50279 = tf.constant([[0.4066]])
in0Mas98937 = tf.constant([[1.4142, 1.1942]])
print (np.array2string(model.predict([in0Min67632,in1Min67632,in0Max62348,in1Max62348,in0Con50279,in0Mas98937],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Dot57363.png')

LMin67632 = minimum_layer([[[[[[0.3726], [0.27]]]]], [[[[[0.67], [0.9594]]]]]], Min67632), 
LRes19290 = reshape_layer(Min67632, [1, 1, 2], Res19290), 
LRes97197 = reshape_layer(Res19290, [1, 2], Res97197), 
LMax7671 = max_pool1D_layer(Res97197, 1, Max7671), 
LFla97277 = flatten_layer(Max7671, Fla97277), 
LMax62348 = maximum_layer([[[[0.1882], [0.2941]]], [[[0.9358], [0.5717]]]], Max62348), 
LRes86714 = reshape_layer(Max62348, [2, 1, 1], Res86714), 
LCro66036 = cropping2D_layer(Res86714, 1, 0, 0, 0, Cro66036), 
LRes64952 = reshape_layer(Cro66036, [1, 1], Res64952), 
LFla47033 = flatten_layer(Res64952, Fla47033), 
LCon50279 = concatenate_layer([Fla47033,[[0.4066]]], 1, Con50279), 
LMas98937 = masking_layer([[1.4142, 1.1942]], 2, Mas98937), 
LBat76681 = batch_normalization_layer(Mas98937, 1, 0.7883563070472109, [0.464, 0.6414], [0.9617, 0.5332], [0.5616, 0.2041], [0.7136, 0.2526], Bat76681), 
LAdd13026 = add_layer([Con50279,Bat76681], Add13026), 
LDot57363 = dot_layer(Fla97277,Add13026, 1, 1, Dot57363), 
exec_layers([LMin67632,LRes19290,LRes97197,LMax7671,LFla97277,LMax62348,LRes86714,LCro66036,LRes64952,LFla47033,LCon50279,LMas98937,LBat76681,LAdd13026,LDot57363],["Min67632","Res19290","Res97197","Max7671","Fla97277","Max62348","Res86714","Cro66036","Res64952","Fla47033","Con50279","Mas98937","Bat76681","Add13026","Dot57363"],Dot57363,"Dot57363")

Actual (Unparsed): [[1.1134230]]

Expected (Unparsed): [[1.1134230171828134]]

Actual:   [[1.1135]]

Expected: [[1.1135]]