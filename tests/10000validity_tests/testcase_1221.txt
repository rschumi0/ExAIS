import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Bat55159 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Con9920 = tf.keras.layers.Input(shape=([2, 3, 2]))
in0Sep84078 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Sof31930 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Min57571 = tf.keras.layers.Input(shape=([1, 1, 2]))
in1Min57571 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con22292 = tf.keras.layers.Input(shape=([2, 2]))
in0Con40841 = tf.keras.layers.Input(shape=([2, 8]))
in0Con82611 = tf.keras.layers.Input(shape=([2, 12, 1, 3]))
in0Cro52550 = tf.keras.layers.Input(shape=([3, 2, 2, 4]))

Bat55159 = keras.layers.BatchNormalization(axis=3, epsilon=0.9736246046557688,  name = 'Bat55159', )(in0Bat55159)
Zer91268 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer91268', )(Bat55159)
Con9920 = keras.layers.Concatenate(axis=3, name = 'Con9920', )([Zer91268,in0Con9920])
Sep84078 = keras.layers.SeparableConv2D(4, (2, 1),strides=(1, 1), padding='valid', name = 'Sep84078', )(in0Sep84078)
Zer40623 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer40623', )(Sep84078)
Add84436 = keras.layers.Add(name = 'Add84436', )([Con9920,Zer40623])
Res5314 = keras.layers.Reshape((2, 12), name = 'Res5314', )(Add84436)
Sof31930 = keras.layers.Softmax(axis=1, name = 'Sof31930', input_shape=(2, 2, 2))(in0Sof31930)
Res6985 = keras.layers.Reshape((2, 4), name = 'Res6985', )(Sof31930)
Min57571 = keras.layers.Minimum(name = 'Min57571', )([in0Min57571,in1Min57571])
Res55004 = keras.layers.Reshape((1, 2), name = 'Res55004', )(Min57571)
Cro65338 = keras.layers.Cropping1D(cropping=((0, 0)), name = 'Cro65338', )(Res55004)
Zer99635 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer99635', )(Cro65338)
Con22292 = keras.layers.Concatenate(axis=2, name = 'Con22292', )([Zer99635,in0Con22292])
Max73001 = keras.layers.Maximum(name = 'Max73001', )([Res6985,Con22292])
Con40841 = keras.layers.Concatenate(axis=2, name = 'Con40841', )([Max73001,in0Con40841])
Min59427 = keras.layers.Minimum(name = 'Min59427', )([Res5314,Con40841])
Res65450 = keras.layers.Reshape((2, 12, 1), name = 'Res65450', )(Min59427)
Res56100 = keras.layers.Reshape((2, 12, 1, 1), name = 'Res56100', )(Res65450)
Con82611 = keras.layers.Concatenate(axis=4, name = 'Con82611', )([Res56100,in0Con82611])
Cro52550 = keras.layers.Cropping3D(cropping=((1, 0), (1, 0), (1, 0)), name = 'Cro52550', )(in0Cro52550)
Zer97193 = keras.layers.ZeroPadding3D(padding=((0, 0), (11, 0), (0, 0)), name = 'Zer97193', )(Cro52550)
Max91754 = keras.layers.Maximum(name = 'Max91754', )([Con82611,Zer97193])
model = tf.keras.models.Model(inputs=[in0Bat55159,in0Con9920,in0Sep84078,in0Sof31930,in0Min57571,in1Min57571,in0Con22292,in0Con40841,in0Con82611,in0Cro52550], outputs=Max91754)
w = model.get_layer('Bat55159').get_weights() 
w[0] = np.array([0.502, 0.8286])
w[1] = np.array([0.7396, 0.7691])
w[2] = np.array([0.4536, 0.4587])
w[3] = np.array([0.4456, 0.8557])
model.get_layer('Bat55159').set_weights(w) 
w = model.get_layer('Sep84078').get_weights() 
w[0] = np.array([[[[0.9254], [0.8486]]], [[[0.2852], [0.9406]]]])
w[1] = np.array([[[[0.1386, 0.0026, 0.3676, 0.1911], [0.3143, 0.2654, 0.494, 0.8438]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep84078').set_weights(w) 
in0Bat55159 = tf.constant([[[[1.7665, 1.2727]], [[1.602, 1.7309]]]])
in0Con9920 = tf.constant([[[[0.2123, 0.8924], [0.6777, 0.4654], [0.8342, 0.0903]], [[0.3895, 0.6414], [0.4072, 0.607], [0.7388, 0.9989]]]])
in0Sep84078 = tf.constant([[[[0.8118, 0.8873], [0.801, 0.6573]], [[0.8364, 0.9497], [0.2613, 0.2132]]]])
in0Sof31930 = tf.constant([[[[0.6777, 0.47], [0.5338, 0.92]], [[0.609, 0.5715], [0.6421, 0.4892]]]])
in0Min57571 = tf.constant([[[[0.3322, 0.1679]]]])
in1Min57571 = tf.constant([[[[0.2395, 0.408]]]])
in0Con22292 = tf.constant([[[0.4055, 0.9393], [0.3951, 0.3202]]])
in0Con40841 = tf.constant([[[0.577, 0.3181, 0.4806, 0.0657, 0.8049, 0.8692, 0.3104, 0.2866], [0.851, 0.7394, 0.7137, 0.0878, 0.0418, 0.6616, 0.6888, 0.1138]]])
in0Con82611 = tf.constant([[[[[0.3306, 0.3959, 0.6885]], [[0.3322, 0.9565, 0.8714]], [[0.5595, 0.5635, 0.561]], [[0.8152, 0.7582, 0.3018]], [[0.7757, 0.3124, 0.7334]], [[0.8747, 0.6644, 0.5032]], [[0.0847, 0.2943, 0.8074]], [[0.234, 0.2141, 0.123]], [[0.1326, 0.6264, 0.2118]], [[0.0376, 0.1497, 0.3451]], [[0.3419, 0.8213, 0.9211]], [[0.3178, 0.8142, 0.7536]]], [[[0.3166, 0.4111, 0.8834]], [[0.8801, 0.8427, 0.0955]], [[0.6973, 0.4457, 0.6101]], [[0.4509, 0.7338, 0.8519]], [[0.8104, 0.955, 0.11]], [[0.8594, 0.408, 0.3737]], [[0.5272, 0.3992, 0.6233]], [[0.732, 0.122, 0.278]], [[0.1819, 0.779, 0.0338]], [[0.2691, 0.2342, 0.5831]], [[0.0728, 0.5616, 0.3133]], [[0.8929, 0.472, 0.3125]]]]])
in0Cro52550 = tf.constant([[[[[1.5297, 1.4432, 1.9122, 1.1457], [1.6044, 1.9978, 1.3568, 1.3988]], [[1.8777, 1.3919, 1.813, 1.3006], [1.4354, 1.2172, 1.5749, 1.0655]]], [[[1.0203, 1.759, 1.6214, 1.1033], [1.8521, 1.7704, 1.4073, 1.2473]], [[1.0216, 1.8786, 1.6412, 1.3702], [1.1583, 1.66, 1.4363, 1.3268]]], [[[1.3927, 1.4847, 1.569, 1.8616], [1.2523, 1.8116, 1.7013, 1.8437]], [[1.0168, 1.7371, 1.3353, 1.9519], [1.2319, 1.2479, 1.953, 1.723]]]]])
print (np.array2string(model.predict([in0Bat55159,in0Con9920,in0Sep84078,in0Sof31930,in0Min57571,in1Min57571,in0Con22292,in0Con40841,in0Con82611,in0Cro52550],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max91754.png')

LBat55159 = batch_normalization_layer([[[[1.7665, 1.2727]], [[1.602, 1.7309]]]], 3, 0.9736246046557688, [0.502, 0.8286], [0.7396, 0.7691], [0.4536, 0.4587], [0.4456, 0.8557], Bat55159), 
LZer91268 = zero_padding2D_layer(Bat55159, 0, 0, 2, 0, Zer91268), 
LCon9920 = concatenate_layer([Zer91268,[[[[0.2123, 0.8924], [0.6777, 0.4654], [0.8342, 0.0903]], [[0.3895, 0.6414], [0.4072, 0.607], [0.7388, 0.9989]]]]], 3, Con9920), 
LSep84078 = separable_conv2D_layer([[[[0.8118, 0.8873], [0.801, 0.6573]], [[0.8364, 0.9497], [0.2613, 0.2132]]]], 2, 1,[[[[[0.9254], [0.8486]]], [[[0.2852], [0.9406]]]],[[[[0.1386, 0.0026, 0.3676, 0.1911], [0.3143, 0.2654, 0.494, 0.8438]]]]],[0, 0, 0, 0], 1, 1, false, Sep84078), 
LZer40623 = zero_padding2D_layer(Sep84078, 1, 0, 1, 0, Zer40623), 
LAdd84436 = add_layer([Con9920,Zer40623], Add84436), 
LRes5314 = reshape_layer(Add84436, [2, 12], Res5314), 
LSof31930 = softmax_layer([[[[0.6777, 0.47], [0.5338, 0.92]], [[0.609, 0.5715], [0.6421, 0.4892]]]], 1, Sof31930), 
LRes6985 = reshape_layer(Sof31930, [2, 4], Res6985), 
LMin57571 = minimum_layer([[[[[0.3322, 0.1679]]]], [[[[0.2395, 0.408]]]]], Min57571), 
LRes55004 = reshape_layer(Min57571, [1, 2], Res55004), 
LCro65338 = cropping1D_layer(Res55004, 0, 0, Cro65338), 
LZer99635 = zero_padding1D_layer(Cro65338, 1, 0, Zer99635), 
LCon22292 = concatenate_layer([Zer99635,[[[0.4055, 0.9393], [0.3951, 0.3202]]]], 2, Con22292), 
LMax73001 = maximum_layer([Res6985,Con22292], Max73001), 
LCon40841 = concatenate_layer([Max73001,[[[0.577, 0.3181, 0.4806, 0.0657, 0.8049, 0.8692, 0.3104, 0.2866], [0.851, 0.7394, 0.7137, 0.0878, 0.0418, 0.6616, 0.6888, 0.1138]]]], 2, Con40841), 
LMin59427 = minimum_layer([Res5314,Con40841], Min59427), 
LRes65450 = reshape_layer(Min59427, [2, 12, 1], Res65450), 
LRes56100 = reshape_layer(Res65450, [2, 12, 1, 1], Res56100), 
LCon82611 = concatenate_layer([Res56100,[[[[[0.3306, 0.3959, 0.6885]], [[0.3322, 0.9565, 0.8714]], [[0.5595, 0.5635, 0.561]], [[0.8152, 0.7582, 0.3018]], [[0.7757, 0.3124, 0.7334]], [[0.8747, 0.6644, 0.5032]], [[0.0847, 0.2943, 0.8074]], [[0.234, 0.2141, 0.123]], [[0.1326, 0.6264, 0.2118]], [[0.0376, 0.1497, 0.3451]], [[0.3419, 0.8213, 0.9211]], [[0.3178, 0.8142, 0.7536]]], [[[0.3166, 0.4111, 0.8834]], [[0.8801, 0.8427, 0.0955]], [[0.6973, 0.4457, 0.6101]], [[0.4509, 0.7338, 0.8519]], [[0.8104, 0.955, 0.11]], [[0.8594, 0.408, 0.3737]], [[0.5272, 0.3992, 0.6233]], [[0.732, 0.122, 0.278]], [[0.1819, 0.779, 0.0338]], [[0.2691, 0.2342, 0.5831]], [[0.0728, 0.5616, 0.3133]], [[0.8929, 0.472, 0.3125]]]]]], 4, Con82611), 
LCro52550 = cropping3D_layer([[[[[1.5297, 1.4432, 1.9122, 1.1457], [1.6044, 1.9978, 1.3568, 1.3988]], [[1.8777, 1.3919, 1.813, 1.3006], [1.4354, 1.2172, 1.5749, 1.0655]]], [[[1.0203, 1.759, 1.6214, 1.1033], [1.8521, 1.7704, 1.4073, 1.2473]], [[1.0216, 1.8786, 1.6412, 1.3702], [1.1583, 1.66, 1.4363, 1.3268]]], [[[1.3927, 1.4847, 1.569, 1.8616], [1.2523, 1.8116, 1.7013, 1.8437]], [[1.0168, 1.7371, 1.3353, 1.9519], [1.2319, 1.2479, 1.953, 1.723]]]]], 1, 0, 1, 0, 1, 0, Cro52550), 
LZer97193 = zero_padding3D_layer(Cro52550, 0, 0, 11, 0, 0, 0, Zer97193), 
LMax91754 = maximum_layer([Con82611,Zer97193], Max91754), 
exec_layers([LBat55159,LZer91268,LCon9920,LSep84078,LZer40623,LAdd84436,LRes5314,LSof31930,LRes6985,LMin57571,LRes55004,LCro65338,LZer99635,LCon22292,LMax73001,LCon40841,LMin59427,LRes65450,LRes56100,LCon82611,LCro52550,LZer97193,LMax91754],["Bat55159","Zer91268","Con9920","Sep84078","Zer40623","Add84436","Res5314","Sof31930","Res6985","Min57571","Res55004","Cro65338","Zer99635","Con22292","Max73001","Con40841","Min59427","Res65450","Res56100","Con82611","Cro52550","Zer97193","Max91754"],Max91754,"Max91754")

Actual (Unparsed): [[[[[0.0000000, 0.3306000, 0.3959000, 0.6885000]], [[0.0000000, 0.3322000, 0.9565000, 0.8714000]], [[0.2123000, 0.5595000, 0.5635000, 0.5610000]], [[0.8924000, 0.8152000, 0.7582000, 0.3018000]], [[0.0000000, 0.7757000, 0.3124000, 0.7334000]], [[0.0000000, 0.8747000, 0.6644000, 0.5032000]], [[0.4806000, 0.0847000, 0.2943000, 0.8074000]], [[0.0657000, 0.2340000, 0.2141000, 0.1230000]], [[0.8049000, 0.1326000, 0.6264000, 0.2118000]], [[0.8692000, 0.0376000, 0.1497000, 0.3451000]], [[0.3104000, 0.3419000, 0.8213000, 0.9211000]], [[1.1583000, 1.6600000, 1.4363000, 1.3268000]]], [[[0.0000000, 0.3166000, 0.4111000, 0.8834000]], [[0.0000000, 0.8801000, 0.8427000, 0.0955000]], [[0.3895000, 0.6973000, 0.4457000, 0.6101000]], [[0.3939353, 0.4509000, 0.7338000, 0.8519000]], [[0.6546002, 0.8104000, 0.9550000, 0.1100000]], [[0.4394883, 0.8594000, 0.4080000, 0.3737000]], [[0.7137000, 0.5272000, 0.3992000, 0.6233000]], [[0.0878000, 0.7320000, 0.1220000, 0.2780000]], [[0.0418000, 0.1819000, 0.7790000, 0.0338000]], [[0.6616000, 0.2691000, 0.2342000, 0.5831000]], [[0.6888000, 0.0728000, 0.5616000, 0.3133000]], [[1.2319000, 1.2479000, 1.9529999, 1.7230000]]]]]

Expected (Unparsed): [[[[[0,0.3306,0.3959,0.6885]],[[0,0.3322,0.9565,0.8714]],[[0.2123,0.5595,0.5635,0.561]],[[0.8924,0.8152,0.7582,0.3018]],[[0,0.7757,0.3124,0.7334]],[[0,0.8747,0.6644,0.5032]],[[0.4806,0.0847,0.2943,0.8074]],[[0.0657,0.234,0.2141,0.123]],[[0.8049,0.1326,0.6264,0.2118]],[[0.8692,0.0376,0.1497,0.3451]],[[0.3104,0.3419,0.8213,0.9211]],[[1.1583,1.66,1.4363,1.3268]]],[[[0,0.3166,0.4111,0.8834]],[[0,0.8801,0.8427,0.0955]],[[0.3895,0.6973,0.4457,0.6101]],[[0.3939353151442483,0.4509,0.7338,0.8519]],[[0.65460021018,0.8104,0.955,0.11]],[[0.43948833984,0.8594,0.408,0.3737]],[[0.7137,0.5272,0.3992,0.6233]],[[0.0878,0.732,0.122,0.278]],[[0.0418,0.1819,0.779,0.0338]],[[0.6616,0.2691,0.2342,0.5831]],[[0.6888,0.0728,0.5616,0.3133]],[[1.2319,1.2479,1.953,1.723]]]]]

Actual:   [[[[[0, 0.3306, 0.3959, 0.6885]], [[0, 0.3322, 0.9565, 0.8714]], [[0.2123, 0.5595, 0.5635, 0.561]], [[0.8924, 0.8152, 0.7582, 0.3018]], [[0, 0.7757, 0.3124, 0.7334]], [[0, 0.8747, 0.6644, 0.5032]], [[0.4806, 0.0847, 0.2943, 0.8074]], [[0.0657, 0.234, 0.2141, 0.123]], [[0.8049, 0.1326, 0.6264, 0.2118]], [[0.8692, 0.0376, 0.1497, 0.3451]], [[0.3104, 0.3419, 0.8213, 0.9211]], [[1.1583, 1.66, 1.4363, 1.3268]]], [[[0, 0.3166, 0.4111, 0.8834]], [[0, 0.8801, 0.8427, 0.0955]], [[0.3895, 0.6973, 0.4457, 0.6101]], [[0.394, 0.4509, 0.7338, 0.8519]], [[0.6547, 0.8104, 0.955, 0.11]], [[0.4395, 0.8594, 0.408, 0.3737]], [[0.7137, 0.5272, 0.3992, 0.6233]], [[0.0878, 0.732, 0.122, 0.278]], [[0.0418, 0.1819, 0.779, 0.0338]], [[0.6616, 0.2691, 0.2342, 0.5831]], [[0.6888, 0.0728, 0.5616, 0.3133]], [[1.2319, 1.2479, 1.953, 1.723]]]]]

Expected: [[[[[0, 0.3306, 0.3959, 0.6885]], [[0, 0.3322, 0.9565, 0.8714]], [[0.2123, 0.5595, 0.5635, 0.561]], [[0.8924, 0.8152, 0.7582, 0.3018]], [[0, 0.7757, 0.3124, 0.7334]], [[0, 0.8747, 0.6644, 0.5032]], [[0.4806, 0.0847, 0.2943, 0.8074]], [[0.0657, 0.234, 0.2141, 0.123]], [[0.8049, 0.1326, 0.6264, 0.2118]], [[0.8692, 0.0376, 0.1497, 0.3451]], [[0.3104, 0.3419, 0.8213, 0.9211]], [[1.1583, 1.66, 1.4363, 1.3268]]], [[[0, 0.3166, 0.4111, 0.8834]], [[0, 0.8801, 0.8427, 0.0955]], [[0.3895, 0.6973, 0.4457, 0.6101]], [[0.394, 0.4509, 0.7338, 0.8519]], [[0.6547, 0.8104, 0.955, 0.11]], [[0.4395, 0.8594, 0.408, 0.3737]], [[0.7137, 0.5272, 0.3992, 0.6233]], [[0.0878, 0.732, 0.122, 0.278]], [[0.0418, 0.1819, 0.779, 0.0338]], [[0.6616, 0.2691, 0.2342, 0.5831]], [[0.6888, 0.0728, 0.5616, 0.3133]], [[1.2319, 1.2479, 1.953, 1.723]]]]]