import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave14302 = tf.keras.layers.Input(shape=([2, 2]))
in1Ave14302 = tf.keras.layers.Input(shape=([2, 2]))
in0Con3633 = tf.keras.layers.Input(shape=([3, 1]))
in0Dot84527 = tf.keras.layers.Input(shape=([3, 3]))
in1Dot84527 = tf.keras.layers.Input(shape=([3, 3]))
in0Min26944 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in1Min26944 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))

Ave14302 = keras.layers.Average(name = 'Ave14302', )([in0Ave14302,in1Ave14302])
Zer55815 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer55815', )(Ave14302)
Con3633 = keras.layers.Concatenate(axis=2, name = 'Con3633', )([Zer55815,in0Con3633])
Dot84527 = keras.layers.Dot(axes=(1, 1), name = 'Dot84527', )([in0Dot84527,in1Dot84527])
Mul63024 = keras.layers.Multiply(name = 'Mul63024', )([Con3633,Dot84527])
Thr89839 = keras.layers.ThresholdedReLU(theta=0.14125067042930925, name = 'Thr89839', )(Mul63024)
Res47293 = keras.layers.Reshape((3, 3, 1), name = 'Res47293', )(Thr89839)
Res38281 = keras.layers.Reshape((3, 3, 1, 1), name = 'Res38281', )(Res47293)
Zer80364 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer80364', )(Res38281)
Min26944 = keras.layers.Minimum(name = 'Min26944', )([in0Min26944,in1Min26944])
Zer59314 = keras.layers.ZeroPadding3D(padding=((2, 0), (1, 0), (1, 0)), name = 'Zer59314', )(Min26944)
Min25675 = keras.layers.Minimum(name = 'Min25675', )([Zer80364,Zer59314])
model = tf.keras.models.Model(inputs=[in0Ave14302,in1Ave14302,in0Con3633,in0Dot84527,in1Dot84527,in0Min26944,in1Min26944], outputs=Min25675)
in0Ave14302 = tf.constant([[[0.7008, 0.9446], [0.0507, 0.5602]]])
in1Ave14302 = tf.constant([[[0.0562, 0.4638], [0.0548, 0.4964]]])
in0Con3633 = tf.constant([[[0.0709], [0.1369], [0.077]]])
in0Dot84527 = tf.constant([[[0.7612, 0.7012, 0.6563], [0.232, 0.1938, 0.3747], [0.0489, 0.388, 0.3074]]])
in1Dot84527 = tf.constant([[[0.7179, 0.6396, 0.56], [0.8016, 0.5284, 0.7097], [0.5198, 0.3225, 0.5556]]])
in0Min26944 = tf.constant([[[[[0.3595], [0.1565]], [[0.7503], [0.5099]]]]])
in1Min26944 = tf.constant([[[[[0.65], [0.5627]], [[0.9155], [0.1083]]]]])
print (np.array2string(model.predict([in0Ave14302,in1Ave14302,in0Con3633,in0Dot84527,in1Dot84527,in0Min26944,in1Min26944],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min25675.png')

LAve14302 = average_layer([[[[0.7008, 0.9446], [0.0507, 0.5602]]], [[[0.0562, 0.4638], [0.0548, 0.4964]]]], Ave14302), 
LZer55815 = zero_padding1D_layer(Ave14302, 1, 0, Zer55815), 
LCon3633 = concatenate_layer([Zer55815,[[[0.0709], [0.1369], [0.077]]]], 2, Con3633), 
LDot84527 = dot_layer([[[0.7612, 0.7012, 0.6563], [0.232, 0.1938, 0.3747], [0.0489, 0.388, 0.3074]]], [[[0.7179, 0.6396, 0.56], [0.8016, 0.5284, 0.7097], [0.5198, 0.3225, 0.5556]]], 1, 1, Dot84527), 
LMul63024 = multiply_layer([Con3633,Dot84527], Mul63024), 
LThr89839 = thresholded_relu_layer(Mul63024, 0.14125067042930925, Thr89839), 
LRes47293 = reshape_layer(Thr89839, [3, 3, 1], Res47293), 
LRes38281 = reshape_layer(Res47293, [3, 3, 1, 1], Res38281), 
LZer80364 = zero_padding3D_layer(Res38281, 0, 0, 0, 0, 2, 0, Zer80364), 
LMin26944 = minimum_layer([[[[[[0.3595], [0.1565]], [[0.7503], [0.5099]]]]], [[[[[0.65], [0.5627]], [[0.9155], [0.1083]]]]]], Min26944), 
LZer59314 = zero_padding3D_layer(Min26944, 2, 0, 1, 0, 1, 0, Zer59314), 
LMin25675 = minimum_layer([Zer80364,Zer59314], Min25675), 
exec_layers([LAve14302,LZer55815,LCon3633,LDot84527,LMul63024,LThr89839,LRes47293,LRes38281,LZer80364,LMin26944,LZer59314,LMin25675],["Ave14302","Zer55815","Con3633","Dot84527","Mul63024","Thr89839","Res47293","Res38281","Zer80364","Min26944","Zer59314","Min25675"],Min25675,"Min25675")

Actual (Unparsed): [[[[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.1565000]], [[0.0000000], [0.0000000], [0.0000000]]]]]

Expected (Unparsed): [[[[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]]],[[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]]],[[[0],[0],[0]],[[0],[0],[0.1565]],[[0],[0],[0]]]]]

Actual:   [[[[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0], [0.1565]], [[0], [0], [0]]]]]

Expected: [[[[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0], [0.1565]], [[0], [0], [0]]]]]