import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo59227 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in0Con64920 = tf.keras.layers.Input(shape=([2, 1]))
in0Lay44567 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con67477 = tf.keras.layers.Input(shape=([1, 1]))
in0Add70255 = tf.keras.layers.Input(shape=([1, 2]))
in1Add70255 = tf.keras.layers.Input(shape=([1, 2]))
in0Min34499 = tf.keras.layers.Input(shape=([1, 1]))
in1Min34499 = tf.keras.layers.Input(shape=([1, 1]))
in0Con29421 = tf.keras.layers.Input(shape=([1, 1]))

Glo59227 = keras.layers.GlobalAveragePooling3D(name = 'Glo59227', )(in0Glo59227)
Res3678 = keras.layers.Reshape((1, 1), name = 'Res3678', )(Glo59227)
Up_68467 = keras.layers.UpSampling1D(size=(2), name = 'Up_68467', )(Res3678)
Con64920 = keras.layers.Concatenate(axis=2, name = 'Con64920', )([Up_68467,in0Con64920])
Lay44567 = keras.layers.LayerNormalization(axis=3, epsilon=2.7534611868966534, name = 'Lay44567', )(in0Lay44567)
Res33982 = keras.layers.Reshape((1, 1), name = 'Res33982', )(Lay44567)
Con67477 = keras.layers.Concatenate(axis=2, name = 'Con67477', )([Res33982,in0Con67477])
Add70255 = keras.layers.Add(name = 'Add70255', )([in0Add70255,in1Add70255])
Min34499 = keras.layers.Minimum(name = 'Min34499', )([in0Min34499,in1Min34499])
Con29421 = keras.layers.Concatenate(axis=2, name = 'Con29421', )([Min34499,in0Con29421])
Max76084 = keras.layers.Maximum(name = 'Max76084', )([Add70255,Con29421])
Mul26697 = keras.layers.Multiply(name = 'Mul26697', )([Con67477,Max76084])
Zer20781 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer20781', )(Mul26697)
Min7210 = keras.layers.Minimum(name = 'Min7210', )([Con64920,Zer20781])
model = tf.keras.models.Model(inputs=[in0Glo59227,in0Con64920,in0Lay44567,in0Con67477,in0Add70255,in1Add70255,in0Min34499,in1Min34499,in0Con29421], outputs=Min7210)
in0Glo59227 = tf.constant([[[[[1.3766], [1.9904]], [[1.1563], [1.3571]]]]])
in0Con64920 = tf.constant([[[0.5546], [0.1738]]])
in0Lay44567 = tf.constant([[[[1.2757]]]])
in0Con67477 = tf.constant([[[0.7293]]])
in0Add70255 = tf.constant([[[0.9229, 0.3435]]])
in1Add70255 = tf.constant([[[0.9275, 0.7552]]])
in0Min34499 = tf.constant([[[0.6607]]])
in1Min34499 = tf.constant([[[0.6087]]])
in0Con29421 = tf.constant([[[0.0846]]])
print (np.array2string(model.predict([in0Glo59227,in0Con64920,in0Lay44567,in0Con67477,in0Add70255,in1Add70255,in0Min34499,in1Min34499,in0Con29421],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min7210.png')

LGlo59227 = global_average_pooling3D_layer([[[[[1.3766], [1.9904]], [[1.1563], [1.3571]]]]], Glo59227), 
LRes3678 = reshape_layer(Glo59227, [1, 1], Res3678), 
LUp_68467 = up_sampling1D_layer(Res3678, 2, Up_68467), 
LCon64920 = concatenate_layer([Up_68467,[[[0.5546], [0.1738]]]], 2, Con64920), 
LLay44567 = layer_normalization_layer([[[[1.2757]]]], 3, 2.7534611868966534, Lay44567), 
LRes33982 = reshape_layer(Lay44567, [1, 1], Res33982), 
LCon67477 = concatenate_layer([Res33982,[[[0.7293]]]], 2, Con67477), 
LAdd70255 = add_layer([[[[0.9229, 0.3435]]], [[[0.9275, 0.7552]]]], Add70255), 
LMin34499 = minimum_layer([[[[0.6607]]], [[[0.6087]]]], Min34499), 
LCon29421 = concatenate_layer([Min34499,[[[0.0846]]]], 2, Con29421), 
LMax76084 = maximum_layer([Add70255,Con29421], Max76084), 
LMul26697 = multiply_layer([Con67477,Max76084], Mul26697), 
LZer20781 = zero_padding1D_layer(Mul26697, 1, 0, Zer20781), 
LMin7210 = minimum_layer([Con64920,Zer20781], Min7210), 
exec_layers([LGlo59227,LRes3678,LUp_68467,LCon64920,LLay44567,LRes33982,LCon67477,LAdd70255,LMin34499,LCon29421,LMax76084,LMul26697,LZer20781,LMin7210],["Glo59227","Res3678","Up_68467","Con64920","Lay44567","Res33982","Con67477","Add70255","Min34499","Con29421","Max76084","Mul26697","Zer20781","Min7210"],Min7210,"Min7210")

Actual (Unparsed): [[[0.0000000, 0.0000000], [0.0000000, 0.1738000]]]

Expected (Unparsed): [[[0,0],[0.0,0.1738]]]

Actual:   [[[0, 0], [0, 0.1738]]]

Expected: [[[0, 0], [0, 0.1738]]]