import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro96992 = tf.keras.layers.Input(shape=([2, 3, 4, 2]))
in0Thr87651 = tf.keras.layers.Input(shape=([2, 1]))
in0Con55226 = tf.keras.layers.Input(shape=([9, 5]))

Cro96992 = keras.layers.Cropping3D(cropping=((1, 0), (1, 1), (0, 1)), name = 'Cro96992', )(in0Cro96992)
Con49755 = keras.layers.Conv3DTranspose(2, (1, 1, 1),strides=(9, 1, 1), padding='same', name = 'Con49755', )(Cro96992)
Res4618 = keras.layers.Reshape((9, 1, 6), name = 'Res4618', )(Con49755)
Res8141 = keras.layers.Reshape((9, 6), name = 'Res8141', )(Res4618)
Thr87651 = keras.layers.ThresholdedReLU(theta=8.838090522309178, name = 'Thr87651', input_shape=(2, 1))(in0Thr87651)
Zer16281 = keras.layers.ZeroPadding1D(padding=((7, 0)), name = 'Zer16281', )(Thr87651)
Con55226 = keras.layers.Concatenate(axis=2, name = 'Con55226', )([Zer16281,in0Con55226])
Max71568 = keras.layers.Maximum(name = 'Max71568', )([Res8141,Con55226])
model = tf.keras.models.Model(inputs=[in0Cro96992,in0Thr87651,in0Con55226], outputs=Max71568)
w = model.get_layer('Con49755').get_weights() 
w[0] = np.array([[[[[0.9768, 0.5986], [0.4431, 0.4819]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con49755').set_weights(w) 
in0Cro96992 = tf.constant([[[[[1.2137, 1.315], [1.3214, 1.0807], [1.24, 1.478], [1.6745, 1.2983]], [[1.4827, 1.3124], [1.4016, 1.0582], [1.7157, 1.1971], [1.6756, 1.7972]], [[1.1261, 1.1968], [1.4196, 1.8425], [1.6901, 1.5446], [1.5494, 1.1009]]], [[[1.2922, 1.9901], [1.5355, 1.3881], [1.5781, 1.7934], [1.5636, 1.0349]], [[1.1516, 1.9608], [1.9022, 1.0512], [1.0062, 1.0405], [1.5629, 1.1844]], [[1.0153, 1.4298], [1.9795, 1.6604], [1.896, 1.6791], [1.2249, 1.2674]]]]])
in0Thr87651 = tf.constant([[[0.3098], [0.7191]]])
in0Con55226 = tf.constant([[[0.1936, 0.6516, 0.0012, 0.9363, 0.4923], [0.699, 0.766, 0.3248, 0.2428, 0.7812], [0.5746, 0.5485, 0.1871, 0.2842, 0.2693], [0.1182, 0.6516, 0.0214, 0.1845, 0.5688], [0.4755, 0.5998, 0.8935, 0.0687, 0.7896], [0.6554, 0.8039, 0.1736, 0.7632, 0.2713], [0.0754, 0.4582, 0.1861, 0.8341, 0.781], [0.5314, 0.1515, 0.4339, 0.841, 0.1162], [0.1714, 0.6681, 0.0227, 0.4587, 0.7664]]])
print (np.array2string(model.predict([in0Cro96992,in0Thr87651,in0Con55226],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max71568.png')

LCro96992 = cropping3D_layer([[[[[1.2137, 1.315], [1.3214, 1.0807], [1.24, 1.478], [1.6745, 1.2983]], [[1.4827, 1.3124], [1.4016, 1.0582], [1.7157, 1.1971], [1.6756, 1.7972]], [[1.1261, 1.1968], [1.4196, 1.8425], [1.6901, 1.5446], [1.5494, 1.1009]]], [[[1.2922, 1.9901], [1.5355, 1.3881], [1.5781, 1.7934], [1.5636, 1.0349]], [[1.1516, 1.9608], [1.9022, 1.0512], [1.0062, 1.0405], [1.5629, 1.1844]], [[1.0153, 1.4298], [1.9795, 1.6604], [1.896, 1.6791], [1.2249, 1.2674]]]]], 1, 0, 1, 1, 0, 1, Cro96992), 
LCon49755 = conv3D_transpose_layer(Cro96992, 1, 1, 1,[[[[[0.9768, 0.5986], [0.4431, 0.4819]]]]],[0, 0], 9, 1, 1, true, Con49755), 
LRes4618 = reshape_layer(Con49755, [9, 1, 6], Res4618), 
LRes8141 = reshape_layer(Res4618, [9, 6], Res8141), 
LThr87651 = thresholded_relu_layer([[[0.3098], [0.7191]]], 8.838090522309178, Thr87651), 
LZer16281 = zero_padding1D_layer(Thr87651, 7, 0, Zer16281), 
LCon55226 = concatenate_layer([Zer16281,[[[0.1936, 0.6516, 0.0012, 0.9363, 0.4923], [0.699, 0.766, 0.3248, 0.2428, 0.7812], [0.5746, 0.5485, 0.1871, 0.2842, 0.2693], [0.1182, 0.6516, 0.0214, 0.1845, 0.5688], [0.4755, 0.5998, 0.8935, 0.0687, 0.7896], [0.6554, 0.8039, 0.1736, 0.7632, 0.2713], [0.0754, 0.4582, 0.1861, 0.8341, 0.781], [0.5314, 0.1515, 0.4339, 0.841, 0.1162], [0.1714, 0.6681, 0.0227, 0.4587, 0.7664]]]], 2, Con55226), 
LMax71568 = maximum_layer([Res8141,Con55226], Max71568), 
exec_layers([LCro96992,LCon49755,LRes4618,LRes8141,LThr87651,LZer16281,LCon55226,LMax71568],["Cro96992","Con49755","Res4618","Res8141","Thr87651","Zer16281","Con55226","Max71568"],Max71568,"Max71568")

Actual (Unparsed): [[[2.2986178, 1.4551835, 2.4873173, 1.3494381, 1.6056994, 0.9472642], [0.0000000, 0.6990000, 0.7660000, 0.3248000, 0.2428000, 0.7812000], [0.0000000, 0.5746000, 0.5485000, 0.1871000, 0.2842000, 0.2693000], [0.0000000, 0.1182000, 0.6516000, 0.0214000, 0.1845000, 0.5688000], [0.0000000, 0.4755000, 0.5998000, 0.8935000, 0.0687000, 0.7896000], [0.0000000, 0.6554000, 0.8039000, 0.1736000, 0.7632000, 0.2713000], [0.0000000, 0.0754000, 0.4582000, 0.1861000, 0.8341000, 0.7810000], [0.0000000, 0.5314000, 0.1515000, 0.4339000, 0.8410000, 0.1162000], [0.0000000, 0.1714000, 0.6681000, 0.0227000, 0.4587000, 0.7664000]]]

Expected (Unparsed): [[[2.29861776,1.45518348,2.48731728,1.3494381,1.6056994599999999,0.94726417],[0,0.699,0.766,0.3248,0.2428,0.7812],[0,0.5746,0.5485,0.1871,0.2842,0.2693],[0,0.1182,0.6516,0.0214,0.1845,0.5688],[0,0.4755,0.5998,0.8935,0.0687,0.7896],[0,0.6554,0.8039,0.1736,0.7632,0.2713],[0,0.0754,0.4582,0.1861,0.8341,0.781],[0,0.5314,0.1515,0.4339,0.841,0.1162],[0,0.1714,0.6681,0.0227,0.4587,0.7664]]]

Actual:   [[[2.2987, 1.4552, 2.4874, 1.3495, 1.6057, 0.9473], [0, 0.699, 0.766, 0.3248, 0.2428, 0.7812], [0, 0.5746, 0.5485, 0.1871, 0.2842, 0.2693], [0, 0.1182, 0.6516, 0.0214, 0.1845, 0.5688], [0, 0.4755, 0.5998, 0.8935, 0.0687, 0.7896], [0, 0.6554, 0.8039, 0.1736, 0.7632, 0.2713], [0, 0.0754, 0.4582, 0.1861, 0.8341, 0.781], [0, 0.5314, 0.1515, 0.4339, 0.841, 0.1162], [0, 0.1714, 0.6681, 0.0227, 0.4587, 0.7664]]]

Expected: [[[2.2987, 1.4552, 2.4874, 1.3495, 1.6057, 0.9473], [0, 0.699, 0.766, 0.3248, 0.2428, 0.7812], [0, 0.5746, 0.5485, 0.1871, 0.2842, 0.2693], [0, 0.1182, 0.6516, 0.0214, 0.1845, 0.5688], [0, 0.4755, 0.5998, 0.8935, 0.0687, 0.7896], [0, 0.6554, 0.8039, 0.1736, 0.7632, 0.2713], [0, 0.0754, 0.4582, 0.1861, 0.8341, 0.781], [0, 0.5314, 0.1515, 0.4339, 0.841, 0.1162], [0, 0.1714, 0.6681, 0.0227, 0.4587, 0.7664]]]