import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Lay73504 = tf.keras.layers.Input(shape=([3]))

Lay73504 = keras.layers.LayerNormalization(axis=1, epsilon=2.5161192395246452, name = 'Lay73504', )(in0Lay73504)
Res91016 = keras.layers.Reshape((3, 1), name = 'Res91016', )(Lay73504)
Max70313 = keras.layers.MaxPool1D(pool_size=(1), strides=(1), padding='same', name = 'Max70313', )(Res91016)
Den32447 = keras.layers.Dense(4,name = 'Den32447', )(Max70313)
model = tf.keras.models.Model(inputs=[in0Lay73504], outputs=Den32447)
w = model.get_layer('Den32447').get_weights() 
w[0] = np.array([[0.7125, 0.4367, 0.1851, 0.1737]])
w[1] = np.array([0.7682, 0.6877, 0.4136, 0.3726])
model.get_layer('Den32447').set_weights(w) 
in0Lay73504 = tf.constant([[1.8485, 1.753, 1.4018]])
print (np.array2string(model.predict([in0Lay73504],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Den32447.png')

LLay73504 = layer_normalization_layer([[1.8485, 1.753, 1.4018]], 1, 2.5161192395246452, Lay73504), 
LRes91016 = reshape_layer(Lay73504, [3, 1], Res91016), 
LMax70313 = max_pool1D_layer(Res91016, 1, 1, true, Max70313), 
LDen32447 = dense_layer(Max70313, [[0.7125, 0.4367, 0.1851, 0.1737]],[0.7682, 0.6877, 0.4136, 0.3726], Den32447), 
exec_layers([LLay73504,LRes91016,LMax70313,LDen32447],["Lay73504","Res91016","Max70313","Den32447"],Den32447,"Den32447")

Actual (Unparsed): [[[0.8487929, 0.7370964, 0.4345372, 0.3922477], [0.8062074, 0.7109952, 0.4234739, 0.3818658], [0.6495997, 0.6150084, 0.3827889, 0.3436865]]]

Expected (Unparsed): [[[0.8487929409453051,0.7370964032432488,0.4345371977108435,0.39224771065571856],[0.8062074050160726,0.7109952052919563,0.42347392374522813,0.38186580526497094],[0.6495996540386226,0.615008391464795,0.3827888785439285,0.3436864840793105]]]

Actual:   [[[0.8488, 0.7371, 0.4346, 0.3923], [0.8063, 0.711, 0.4235, 0.3819], [0.6496, 0.6151, 0.3828, 0.3437]]]

Expected: [[[0.8488, 0.7371, 0.4346, 0.3923], [0.8063, 0.711, 0.4235, 0.3819], [0.6496, 0.6151, 0.3828, 0.3437]]]