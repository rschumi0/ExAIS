import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con96296 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in0Dot17914 = tf.keras.layers.Input(shape=([3, 2]))
in1Dot17914 = tf.keras.layers.Input(shape=([3, 2]))
in0Con63502 = tf.keras.layers.Input(shape=([3, 1]))
in0Con97403 = tf.keras.layers.Input(shape=([3, 4, 3]))
in0Loc35133 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Ave47773 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in1Ave47773 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in0Con76507 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Add17594 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Add17594 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Con71482 = tf.keras.layers.Input(shape=([2, 1, 2]))

Con96296 = keras.layers.Conv3D(2, (1, 1, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con96296', )(in0Con96296)
Res12509 = keras.layers.Reshape((1, 1, 4), name = 'Res12509', )(Con96296)
Res904 = keras.layers.Reshape((1, 4), name = 'Res904', )(Res12509)
Zer12637 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer12637', )(Res904)
Dot17914 = keras.layers.Dot(axes=(2, 2), name = 'Dot17914', )([in0Dot17914,in1Dot17914])
Con63502 = keras.layers.Concatenate(axis=2, name = 'Con63502', )([Dot17914,in0Con63502])
Add66540 = keras.layers.Add(name = 'Add66540', )([Zer12637,Con63502])
Res40870 = keras.layers.Reshape((3, 4, 1), name = 'Res40870', )(Add66540)
Con97403 = keras.layers.Concatenate(axis=3, name = 'Con97403', )([Res40870,in0Con97403])
Loc35133 = keras.layers.LocallyConnected2D(4, (1, 1),strides=(1, 5), name = 'Loc35133', )(in0Loc35133)
Zer6822 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer6822', )(Loc35133)
Ave47773 = keras.layers.Average(name = 'Ave47773', )([in0Ave47773,in1Ave47773])
Res688 = keras.layers.Reshape((2, 1, 1), name = 'Res688', )(Ave47773)
Con76507 = keras.layers.Concatenate(axis=3, name = 'Con76507', )([Res688,in0Con76507])
Add17594 = keras.layers.Add(name = 'Add17594', )([in0Add17594,in1Add17594])
Sub95188 = keras.layers.Subtract(name = 'Sub95188', )([Con76507,Add17594])
Con71482 = keras.layers.Concatenate(axis=3, name = 'Con71482', )([Sub95188,in0Con71482])
Max40778 = keras.layers.Maximum(name = 'Max40778', )([Zer6822,Con71482])
Zer41267 = keras.layers.ZeroPadding2D(padding=((1, 0), (3, 0)), name = 'Zer41267', )(Max40778)
Add65353 = keras.layers.Add(name = 'Add65353', )([Con97403,Zer41267])
model = tf.keras.models.Model(inputs=[in0Con96296,in0Dot17914,in1Dot17914,in0Con63502,in0Con97403,in0Loc35133,in0Ave47773,in1Ave47773,in0Con76507,in0Add17594,in1Add17594,in0Con71482], outputs=Add65353)
w = model.get_layer('Con96296').get_weights() 
w[0] = np.array([[[[[0.4293, 0.4378]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con96296').set_weights(w) 
w = model.get_layer('Loc35133').get_weights() 
w[0] = np.array([[[0.9949, 0.4979, 0.816, 0.8706], [0.9184, 0.8284, 0.7479, 0.9662]]])
w[1] = np.array([[[0, 0, 0, 0]]])
model.get_layer('Loc35133').set_weights(w) 
in0Con96296 = tf.constant([[[[[0.8323], [0.9221]]]]])
in0Dot17914 = tf.constant([[[0.3241, 0.6286], [0.6059, 0.9975], [0.3823, 0.5079]]])
in1Dot17914 = tf.constant([[[0.6446, 0.1404], [0.4263, 0.8574], [0.6789, 0.9282]]])
in0Con63502 = tf.constant([[[0.5368], [0.0782], [0.7598]]])
in0Con97403 = tf.constant([[[[0.7848, 0.5343, 0.2146], [0.7558, 0.2004, 0.2923], [0.9335, 0.5568, 0.9345], [0.8814, 0.2722, 0.8581]], [[0.4434, 0.3229, 0.1047], [0.5561, 0.2272, 0.8902], [0.9773, 0.5247, 0.1394], [0.0575, 0.9965, 0.117]], [[0.7095, 0.9051, 0.7302], [0.2972, 0.1216, 0.0399], [0.7082, 0.1998, 0.2538], [0.2618, 0.7522, 0.6017]]]])
in0Loc35133 = tf.constant([[[[0.8159, 0.7364], [0.3489, 0.7243]]]])
in0Ave47773 = tf.constant([[[[[0.9224]]], [[[0.2308]]]]])
in1Ave47773 = tf.constant([[[[[0.744]]], [[[0.637]]]]])
in0Con76507 = tf.constant([[[[0.3672]], [[0.7656]]]])
in0Add17594 = tf.constant([[[[0.072, 0.8985]], [[0.899, 0.9625]]]])
in1Add17594 = tf.constant([[[[0.953, 0.9907]], [[0.496, 0.7474]]]])
in0Con71482 = tf.constant([[[[0.9985, 0.2557]], [[0.5546, 0.5858]]]])
print (np.array2string(model.predict([in0Con96296,in0Dot17914,in1Dot17914,in0Con63502,in0Con97403,in0Loc35133,in0Ave47773,in1Ave47773,in0Con76507,in0Add17594,in1Add17594,in0Con71482],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add65353.png')

LCon96296 = conv3D_layer([[[[[0.8323], [0.9221]]]]], 1, 1, 1,[[[[[0.4293, 0.4378]]]]],[0, 0], 1, 1, 1, false, 1, 1, 1, Con96296), 
LRes12509 = reshape_layer(Con96296, [1, 1, 4], Res12509), 
LRes904 = reshape_layer(Res12509, [1, 4], Res904), 
LZer12637 = zero_padding1D_layer(Res904, 2, 0, Zer12637), 
LDot17914 = dot_layer([[[0.3241, 0.6286], [0.6059, 0.9975], [0.3823, 0.5079]]], [[[0.6446, 0.1404], [0.4263, 0.8574], [0.6789, 0.9282]]], 2, 2, Dot17914), 
LCon63502 = concatenate_layer([Dot17914,[[[0.5368], [0.0782], [0.7598]]]], 2, Con63502), 
LAdd66540 = add_layer([Zer12637,Con63502], Add66540), 
LRes40870 = reshape_layer(Add66540, [3, 4, 1], Res40870), 
LCon97403 = concatenate_layer([Res40870,[[[[0.7848, 0.5343, 0.2146], [0.7558, 0.2004, 0.2923], [0.9335, 0.5568, 0.9345], [0.8814, 0.2722, 0.8581]], [[0.4434, 0.3229, 0.1047], [0.5561, 0.2272, 0.8902], [0.9773, 0.5247, 0.1394], [0.0575, 0.9965, 0.117]], [[0.7095, 0.9051, 0.7302], [0.2972, 0.1216, 0.0399], [0.7082, 0.1998, 0.2538], [0.2618, 0.7522, 0.6017]]]]], 3, Con97403), 
LLoc35133 = locally_connected2D_layer([[[[0.8159, 0.7364], [0.3489, 0.7243]]]], 1, 1,[[[0.9949, 0.4979, 0.816, 0.8706], [0.9184, 0.8284, 0.7479, 0.9662]]],[[[0, 0, 0, 0]]], 1, 5, Loc35133), 
LZer6822 = zero_padding2D_layer(Loc35133, 1, 0, 0, 0, Zer6822), 
LAve47773 = average_layer([[[[[[0.9224]]], [[[0.2308]]]]], [[[[[0.744]]], [[[0.637]]]]]], Ave47773), 
LRes688 = reshape_layer(Ave47773, [2, 1, 1], Res688), 
LCon76507 = concatenate_layer([Res688,[[[[0.3672]], [[0.7656]]]]], 3, Con76507), 
LAdd17594 = add_layer([[[[[0.072, 0.8985]], [[0.899, 0.9625]]]], [[[[0.953, 0.9907]], [[0.496, 0.7474]]]]], Add17594), 
LSub95188 = subtract_layer(Con76507,Add17594, Sub95188), 
LCon71482 = concatenate_layer([Sub95188,[[[[0.9985, 0.2557]], [[0.5546, 0.5858]]]]], 3, Con71482), 
LMax40778 = maximum_layer([Zer6822,Con71482], Max40778), 
LZer41267 = zero_padding2D_layer(Max40778, 1, 0, 3, 0, Zer41267), 
LAdd65353 = add_layer([Con97403,Zer41267], Add65353), 
exec_layers([LCon96296,LRes12509,LRes904,LZer12637,LDot17914,LCon63502,LAdd66540,LRes40870,LCon97403,LLoc35133,LZer6822,LAve47773,LRes688,LCon76507,LAdd17594,LSub95188,LCon71482,LMax40778,LZer41267,LAdd65353],["Con96296","Res12509","Res904","Zer12637","Dot17914","Con63502","Add66540","Res40870","Con97403","Loc35133","Zer6822","Ave47773","Res688","Con76507","Add17594","Sub95188","Con71482","Max40778","Zer41267","Add65353"],Add65353,"Add65353")

Actual (Unparsed): [[[[0.2971703, 0.7848000, 0.5343000, 0.2146000], [0.6771255, 0.7558000, 0.2004000, 0.2923000], [0.8034980, 0.9335000, 0.5568000, 0.9345000], [0.5368000, 0.8814000, 0.2722000, 0.8581000]], [[0.5306121, 0.4434000, 0.3229000, 0.1047000], [1.1135517, 0.5561000, 0.2272000, 0.8902000], [1.3372250, 0.9773000, 0.5247000, 0.1394000], [0.0782000, 0.0575000, 1.9950000, 0.3727000]], [[0.6750461, 0.7095000, 0.9051000, 0.7302000], [0.9628289, 0.2972000, 0.1216000, 0.0399000], [1.1268338, 0.7082000, 0.1998000, 0.2538000], [2.6515441, 1.2780704, 1.9687280, 2.0235323]]]]

Expected (Unparsed): [[[[0.2971703,0.7848,0.5343,0.2146],[0.67712547,0.7558,0.2004,0.2923],[0.8034980100000001,0.9335,0.5568,0.9345],[0.5368,0.8814,0.2722,0.8581]],[[0.53061214,0.4434,0.3229,0.1047],[1.11355167,0.5561,0.2272,0.8902],[1.33722501,0.9773,0.5247,0.1394],[0.0782,0.0575,1.995,0.3727]],[[0.6750461299999999,0.7095,0.9051,0.7302],[0.9628288900000002,0.2972,0.1216,0.0399],[1.1268337800000001,0.7082,0.1998,0.2538],[2.65154405,1.27807037,1.96872796,2.02353222]]]]

Actual:   [[[[0.2972, 0.7848, 0.5343, 0.2146], [0.6772, 0.7558, 0.2004, 0.2923], [0.8035, 0.9335, 0.5568, 0.9345], [0.5368, 0.8814, 0.2722, 0.8581]], [[0.5307, 0.4434, 0.3229, 0.1047], [1.1136, 0.5561, 0.2272, 0.8902], [1.3373, 0.9773, 0.5247, 0.1394], [0.0782, 0.0575, 1.995, 0.3727]], [[0.6751, 0.7095, 0.9051, 0.7302], [0.9629, 0.2972, 0.1216, 0.0399], [1.1269, 0.7082, 0.1998, 0.2538], [2.6516, 1.2781, 1.9688, 2.0236]]]]

Expected: [[[[0.2972, 0.7848, 0.5343, 0.2146], [0.6772, 0.7558, 0.2004, 0.2923], [0.8035, 0.9335, 0.5568, 0.9345], [0.5368, 0.8814, 0.2722, 0.8581]], [[0.5307, 0.4434, 0.3229, 0.1047], [1.1136, 0.5561, 0.2272, 0.8902], [1.3373, 0.9773, 0.5247, 0.1394], [0.0782, 0.0575, 1.995, 0.3727]], [[0.6751, 0.7095, 0.9051, 0.7302], [0.9629, 0.2972, 0.1216, 0.0399], [1.1269, 0.7082, 0.1998, 0.2538], [2.6516, 1.2781, 1.9688, 2.0236]]]]