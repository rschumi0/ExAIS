import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max36471 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Max36471 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con3531 = tf.keras.layers.Input(shape=([2, 3, 2, 2]))
in0Up_74224 = tf.keras.layers.Input(shape=([2, 1, 2, 3]))

Max36471 = keras.layers.Maximum(name = 'Max36471', )([in0Max36471,in1Max36471])
Res87137 = keras.layers.Reshape((2, 4), name = 'Res87137', )(Max36471)
Ave30806 = keras.layers.AveragePooling1D(pool_size=(2), strides=(1), padding='valid', name = 'Ave30806', )(Res87137)
Res9168 = keras.layers.Reshape((1, 4, 1), name = 'Res9168', )(Ave30806)
Ave5150 = keras.layers.AveragePooling2D(pool_size=(1, 2), name = 'Ave5150', )(Res9168)
Res30714 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res30714', )(Ave5150)
Zer45030 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (1, 0)), name = 'Zer45030', )(Res30714)
Con3531 = keras.layers.Concatenate(axis=4, name = 'Con3531', )([Zer45030,in0Con3531])
Up_74224 = keras.layers.UpSampling3D(size=(1, 1, 1), name = 'Up_74224', )(in0Up_74224)
Zer32484 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (0, 0)), name = 'Zer32484', )(Up_74224)
Sub750 = keras.layers.Subtract(name = 'Sub750', )([Con3531,Zer32484])
model = tf.keras.models.Model(inputs=[in0Max36471,in1Max36471,in0Con3531,in0Up_74224], outputs=Sub750)
in0Max36471 = tf.constant([[[[0.8197, 0.412], [0.4471, 0.9184]], [[0.3673, 0.7102], [0.5233, 0.3847]]]])
in1Max36471 = tf.constant([[[[0.5719, 0.4034], [0.0012, 0.3683]], [[0.0356, 0.0479], [0.1745, 0.9196]]]])
in0Con3531 = tf.constant([[[[[0.1676, 0.9743], [0.5987, 0.5325]], [[0.33, 0.9266], [0.75, 0.118]], [[0.6573, 0.4207], [0.0693, 0.6084]]], [[[0.1503, 0.4946], [0.8711, 0.9171]], [[0.6355, 0.0013], [0.4807, 0.3392]], [[0.5548, 0.8251], [0.4889, 0.5776]]]]])
in0Up_74224 = tf.constant([[[[[1.5374, 1.7308, 1.9725], [1.0888, 1.882, 1.0638]]], [[[1.7635, 1.5354, 1.3946], [1.2316, 1.7237, 1.666]]]]])
print (np.array2string(model.predict([in0Max36471,in1Max36471,in0Con3531,in0Up_74224],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub750.png')

LMax36471 = maximum_layer([[[[[0.8197, 0.412], [0.4471, 0.9184]], [[0.3673, 0.7102], [0.5233, 0.3847]]]], [[[[0.5719, 0.4034], [0.0012, 0.3683]], [[0.0356, 0.0479], [0.1745, 0.9196]]]]], Max36471), 
LRes87137 = reshape_layer(Max36471, [2, 4], Res87137), 
LAve30806 = average_pooling1D_layer(Res87137, 2, 1, false, Ave30806), 
LRes9168 = reshape_layer(Ave30806, [1, 4, 1], Res9168), 
LAve5150 = average_pooling2D_layer(Res9168, 1, 2, Ave5150), 
LRes30714 = reshape_layer(Ave5150, [1, 2, 1, 1], Res30714), 
LZer45030 = zero_padding3D_layer(Res30714, 1, 0, 1, 0, 1, 0, Zer45030), 
LCon3531 = concatenate_layer([Zer45030,[[[[[0.1676, 0.9743], [0.5987, 0.5325]], [[0.33, 0.9266], [0.75, 0.118]], [[0.6573, 0.4207], [0.0693, 0.6084]]], [[[0.1503, 0.4946], [0.8711, 0.9171]], [[0.6355, 0.0013], [0.4807, 0.3392]], [[0.5548, 0.8251], [0.4889, 0.5776]]]]]], 4, Con3531), 
LUp_74224 = up_sampling3D_layer([[[[[1.5374, 1.7308, 1.9725], [1.0888, 1.882, 1.0638]]], [[[1.7635, 1.5354, 1.3946], [1.2316, 1.7237, 1.666]]]]], 1, 1, 1, Up_74224), 
LZer32484 = zero_padding3D_layer(Up_74224, 0, 0, 2, 0, 0, 0, Zer32484), 
LSub750 = subtract_layer(Con3531,Zer32484, Sub750), 
exec_layers([LMax36471,LRes87137,LAve30806,LRes9168,LAve5150,LRes30714,LZer45030,LCon3531,LUp_74224,LZer32484,LSub750],["Max36471","Res87137","Ave30806","Res9168","Ave5150","Res30714","Zer45030","Con3531","Up_74224","Zer32484","Sub750"],Sub750,"Sub750")

Actual (Unparsed): [[[[[0.0000000, 0.1676000, 0.9743000], [0.0000000, 0.5987000, 0.5325000]], [[0.0000000, 0.3300000, 0.9266000], [0.0000000, 0.7500000, 0.1180000]], [[-1.5374000, -1.0735000, -1.5518000], [-1.0888000, -1.8127000, -0.4554000]]], [[[0.0000000, 0.1503000, 0.4946000], [0.0000000, 0.8711000, 0.9171000]], [[0.0000000, 0.6355000, 0.0013000], [0.5773000, 0.4807000, 0.3392000]], [[-1.7635000, -0.9806001, -0.5695000], [-0.5295000, -1.2348000, -1.0884000]]]]]

Expected (Unparsed): [[[[[0,0.1676,0.9743],[0,0.5987,0.5325]],[[0,0.33,0.9266],[0,0.75,0.118]],[[-1.5374,-1.0735,-1.5517999999999998],[-1.0888,-1.8127,-0.4554]]],[[[0,0.1503,0.4946],[0,0.8711,0.9171]],[[0,0.6355,0.0013],[0.5773,0.4807,0.3392]],[[-1.7635,-0.9806000000000001,-0.5695000000000001],[-0.5295000000000001,-1.2348,-1.0884]]]]]

Actual:   [[[[[0, 0.1676, 0.9743], [0, 0.5987, 0.5325]], [[0, 0.33, 0.9266], [0, 0.75, 0.118]], [[-1.5374, -1.0735, -1.5518], [-1.0888, -1.8127, -0.4554]]], [[[0, 0.1503, 0.4946], [0, 0.8711, 0.9171]], [[0, 0.6355, 0.0013], [0.5773, 0.4807, 0.3392]], [[-1.7635, -0.9806, -0.5695], [-0.5295, -1.2348, -1.0884]]]]]

Expected: [[[[[0, 0.1676, 0.9743], [0, 0.5987, 0.5325]], [[0, 0.33, 0.9266], [0, 0.75, 0.118]], [[-1.5374, -1.0735, -1.5517], [-1.0888, -1.8127, -0.4554]]], [[[0, 0.1503, 0.4946], [0, 0.8711, 0.9171]], [[0, 0.6355, 0.0013], [0.5773, 0.4807, 0.3392]], [[-1.7635, -0.9806, -0.5695], [-0.5295, -1.2348, -1.0884]]]]]