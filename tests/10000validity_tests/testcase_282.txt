import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub82823 = tf.keras.layers.Input(shape=([2, 3, 2, 2]))
in1Sub82823 = tf.keras.layers.Input(shape=([2, 3, 2, 2]))

Sub82823 = keras.layers.Subtract(name = 'Sub82823', )([in0Sub82823,in1Sub82823])
Mas27115 = keras.layers.Masking(mask_value=2, name = 'Mas27115', )(Sub82823)
model = tf.keras.models.Model(inputs=[in0Sub82823,in1Sub82823], outputs=Mas27115)
in0Sub82823 = tf.constant([[[[[0.7723, 0.9294], [0.1216, 0.1822]], [[0.0896, 0.4807], [0.8227, 0.2072]], [[0.9774, 0.2625], [0.3189, 0.8615]]], [[[0.9285, 0.7488], [0.6743, 0.9213]], [[0.9495, 0.3092], [0.036, 0.1893]], [[0.7525, 0.0611], [0.2711, 0.6417]]]]])
in1Sub82823 = tf.constant([[[[[0.368, 0.7196], [0.6661, 0.2277]], [[0.1395, 0.775], [0.8248, 0.4105]], [[0.1095, 0.851], [0.4651, 0.2027]]], [[[0.1331, 0.153], [0.1609, 0.1431]], [[0.6687, 0.5022], [0.1992, 0.3931]], [[0.0844, 0.5709], [0.6314, 0.8866]]]]])
print (np.array2string(model.predict([in0Sub82823,in1Sub82823],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mas27115.png')

LSub82823 = subtract_layer([[[[[0.7723, 0.9294], [0.1216, 0.1822]], [[0.0896, 0.4807], [0.8227, 0.2072]], [[0.9774, 0.2625], [0.3189, 0.8615]]], [[[0.9285, 0.7488], [0.6743, 0.9213]], [[0.9495, 0.3092], [0.036, 0.1893]], [[0.7525, 0.0611], [0.2711, 0.6417]]]]], [[[[[0.368, 0.7196], [0.6661, 0.2277]], [[0.1395, 0.775], [0.8248, 0.4105]], [[0.1095, 0.851], [0.4651, 0.2027]]], [[[0.1331, 0.153], [0.1609, 0.1431]], [[0.6687, 0.5022], [0.1992, 0.3931]], [[0.0844, 0.5709], [0.6314, 0.8866]]]]], Sub82823), 
LMas27115 = masking_layer(Sub82823, 2, Mas27115), 
exec_layers([LSub82823,LMas27115],["Sub82823","Mas27115"],Mas27115,"Mas27115")

Actual (Unparsed): [[[[[0.4043000, 0.2098000], [-0.5445000, -0.0455000]], [[-0.0499000, -0.2943000], [-0.0021000, -0.2033000]], [[0.8679000, -0.5885000], [-0.1462000, 0.6588000]]], [[[0.7954000, 0.5958000], [0.5134000, 0.7782000]], [[0.2808000, -0.1930000], [-0.1632000, -0.2038000]], [[0.6681000, -0.5098000], [-0.3603000, -0.2449000]]]]]

Expected (Unparsed): [[[[[0.4043,0.2098],[-0.5445,-0.04550000000000001]],[[-0.049900000000000014,-0.2943],[-0.0020999999999999908,-0.20329999999999998]],[[0.8679,-0.5885],[-0.1462,0.6588]]],[[[0.7954,0.5958],[0.5134000000000001,0.7782]],[[0.28080000000000005,-0.193],[-0.16319999999999998,-0.2038]],[[0.6680999999999999,-0.5097999999999999],[-0.36029999999999995,-0.2449]]]]]

Actual:   [[[[[0.4043, 0.2098], [-0.5445, -0.0455]], [[-0.0499, -0.2943], [-0.0021, -0.2033]], [[0.8679, -0.5885], [-0.1462, 0.6588]]], [[[0.7954, 0.5958], [0.5134, 0.7782]], [[0.2808, -0.193], [-0.1632, -0.2038]], [[0.6681, -0.5098], [-0.3603, -0.2449]]]]]

Expected: [[[[[0.4043, 0.2098], [-0.5445, -0.0455]], [[-0.0499, -0.2943], [-0.002, -0.2032]], [[0.8679, -0.5885], [-0.1462, 0.6588]]], [[[0.7954, 0.5958], [0.5135, 0.7782]], [[0.2809, -0.193], [-0.1631, -0.2038]], [[0.6681, -0.5097], [-0.3602, -0.2449]]]]]