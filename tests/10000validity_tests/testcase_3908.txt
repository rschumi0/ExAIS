import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot31343 = tf.keras.layers.Input(shape=([3, 3]))
in1Dot31343 = tf.keras.layers.Input(shape=([3, 3]))
in0Con98366 = tf.keras.layers.Input(shape=([3, 3, 1, 3]))
in0Dot79766 = tf.keras.layers.Input(shape=([2]))
in1Dot79766 = tf.keras.layers.Input(shape=([2]))

Dot31343 = keras.layers.Dot(axes=(1, 1), name = 'Dot31343', )([in0Dot31343,in1Dot31343])
Res9601 = keras.layers.Reshape((3, 3, 1), name = 'Res9601', )(Dot31343)
Res46264 = keras.layers.Reshape((3, 3, 1, 1), name = 'Res46264', )(Res9601)
Con98366 = keras.layers.Concatenate(axis=4, name = 'Con98366', )([Res46264,in0Con98366])
Dot79766 = keras.layers.Dot(axes=(1, 1), name = 'Dot79766', )([in0Dot79766,in1Dot79766])
Res45718 = keras.layers.Reshape((1, 1), name = 'Res45718', )(Dot79766)
Res16288 = keras.layers.Reshape((1, 1, 1), name = 'Res16288', )(Res45718)
Res76871 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res76871', )(Res16288)
Con26284 = keras.layers.Conv3D(4, (1, 1, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con26284', )(Res76871)
Zer42650 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (0, 0)), name = 'Zer42650', )(Con26284)
Ave6671 = keras.layers.Average(name = 'Ave6671', )([Con98366,Zer42650])
model = tf.keras.models.Model(inputs=[in0Dot31343,in1Dot31343,in0Con98366,in0Dot79766,in1Dot79766], outputs=Ave6671)
w = model.get_layer('Con26284').get_weights() 
w[0] = np.array([[[[[0.4128, 0.0439, 0.5383, 0.3529]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con26284').set_weights(w) 
in0Dot31343 = tf.constant([[[0.9269, 0.9172, 0.8935], [0.0444, 0.7125, 0.0995], [0.0213, 0.8667, 0.2908]]])
in1Dot31343 = tf.constant([[[0.4862, 0.2482, 0.5315], [0.7161, 0.0502, 0.1472], [0.9535, 0.2902, 0.8613]]])
in0Con98366 = tf.constant([[[[[0.252, 0.6262, 0.538]], [[0.0773, 0.8705, 0.6657]], [[0.7395, 0.6841, 0.8726]]], [[[0.778, 0.6622, 0.2119]], [[0.371, 0.8968, 0.3918]], [[0.3195, 0.6084, 0.1269]]], [[[0.5426, 0.1522, 0.2094]], [[0.2258, 0.4167, 0.12]], [[0.1422, 0.5717, 0.8582]]]]])
in0Dot79766 = tf.constant([[0.1804, 0.974]])
in1Dot79766 = tf.constant([[0.1893, 0.3832]])
print (np.array2string(model.predict([in0Dot31343,in1Dot31343,in0Con98366,in0Dot79766,in1Dot79766],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave6671.png')

LDot31343 = dot_layer([[[0.9269, 0.9172, 0.8935], [0.0444, 0.7125, 0.0995], [0.0213, 0.8667, 0.2908]]], [[[0.4862, 0.2482, 0.5315], [0.7161, 0.0502, 0.1472], [0.9535, 0.2902, 0.8613]]], 1, 1, Dot31343), 
LRes9601 = reshape_layer(Dot31343, [3, 3, 1], Res9601), 
LRes46264 = reshape_layer(Res9601, [3, 3, 1, 1], Res46264), 
LCon98366 = concatenate_layer([Res46264,[[[[[0.252, 0.6262, 0.538]], [[0.0773, 0.8705, 0.6657]], [[0.7395, 0.6841, 0.8726]]], [[[0.778, 0.6622, 0.2119]], [[0.371, 0.8968, 0.3918]], [[0.3195, 0.6084, 0.1269]]], [[[0.5426, 0.1522, 0.2094]], [[0.2258, 0.4167, 0.12]], [[0.1422, 0.5717, 0.8582]]]]]], 4, Con98366), 
LDot79766 = dot_layer([[0.1804, 0.974]], [[0.1893, 0.3832]], 1, 1, Dot79766), 
LRes45718 = reshape_layer(Dot79766, [1, 1], Res45718), 
LRes16288 = reshape_layer(Res45718, [1, 1, 1], Res16288), 
LRes76871 = reshape_layer(Res16288, [1, 1, 1, 1], Res76871), 
LCon26284 = conv3D_layer(Res76871, 1, 1, 1,[[[[[0.4128, 0.0439, 0.5383, 0.3529]]]]],[0, 0, 0, 0], 1, 1, 1, false, 1, 1, 1, Con26284), 
LZer42650 = zero_padding3D_layer(Con26284, 2, 0, 2, 0, 0, 0, Zer42650), 
LAve6671 = average_layer([Con98366,Zer42650], Ave6671), 
exec_layers([LDot31343,LRes9601,LRes46264,LCon98366,LDot79766,LRes45718,LRes16288,LRes76871,LCon26284,LZer42650,LAve6671],["Dot31343","Res9601","Res46264","Con98366","Dot79766","Res45718","Res16288","Res76871","Con26284","Zer42650","Ave6671"],Ave6671,"Ave6671")

Actual (Unparsed): [[[[[0.2513816, 0.1260000, 0.3131000, 0.2690000]], [[0.1192334, 0.0386500, 0.4352500, 0.3328500]], [[0.2587644, 0.3697500, 0.3420500, 0.4363000]]], [[[0.8912811, 0.3890000, 0.3311000, 0.1059500]], [[0.2574664, 0.1855000, 0.4484000, 0.1959000]], [[0.6694302, 0.1597500, 0.3042000, 0.0634500]]], [[[0.3914747, 0.2713000, 0.0761000, 0.1047000]], [[0.1555759, 0.1129000, 0.2083500, 0.0600000]], [[0.4540884, 0.0800421, 0.3954981, 0.5009834]]]]]

Expected (Unparsed): [[[[[0.25138158499999996,0.126,0.3131,0.269]],[[0.11923335999999998,0.03865,0.43525,0.33285]],[[0.25876435999999997,0.36975,0.34205,0.4363]]],[[[0.8912811700000001,0.389,0.3311,0.10595]],[[0.25746643999999996,0.1855,0.4484,0.1959]],[[0.669430255,0.15975,0.3042,0.06345]]],[[[0.391474725,0.2713,0.0761,0.1047]],[[0.15557588,0.1129,0.20835,0.06]],[[0.45408842272799993,0.08004213411399999,0.395498081858,0.500983351454]]]]]

Actual:   [[[[[0.2514, 0.126, 0.3131, 0.269]], [[0.1193, 0.0387, 0.4353, 0.3329]], [[0.2588, 0.3698, 0.3421, 0.4363]]], [[[0.8913, 0.389, 0.3311, 0.106]], [[0.2575, 0.1855, 0.4484, 0.1959]], [[0.6695, 0.1598, 0.3042, 0.0635]]], [[[0.3915, 0.2713, 0.0761, 0.1047]], [[0.1556, 0.1129, 0.2084, 0.06]], [[0.4541, 0.0801, 0.3955, 0.501]]]]]

Expected: [[[[[0.2514, 0.126, 0.3131, 0.269]], [[0.1193, 0.0387, 0.4353, 0.3329]], [[0.2588, 0.3698, 0.3421, 0.4363]]], [[[0.8913, 0.389, 0.3311, 0.106]], [[0.2575, 0.1855, 0.4484, 0.1959]], [[0.6695, 0.1598, 0.3042, 0.0635]]], [[[0.3915, 0.2713, 0.0761, 0.1047]], [[0.1556, 0.1129, 0.2084, 0.06]], [[0.4541, 0.0801, 0.3955, 0.501]]]]]