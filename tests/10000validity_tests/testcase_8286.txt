import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer39569 = tf.keras.layers.Input(shape=([1, 4, 1, 1]))
in0Den87105 = tf.keras.layers.Input(shape=([5, 2]))
in0Add95927 = tf.keras.layers.Input(shape=([2, 1]))
in1Add95927 = tf.keras.layers.Input(shape=([2, 1]))
in0Con37535 = tf.keras.layers.Input(shape=([5, 1]))
in0Con83446 = tf.keras.layers.Input(shape=([5, 16]))

Zer39569 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer39569', )(in0Zer39569)
Res49952 = keras.layers.Reshape((3, 6, 3), name = 'Res49952', )(Zer39569)
Res73600 = keras.layers.Reshape((3, 18), name = 'Res73600', )(Res49952)
Zer54157 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer54157', )(Res73600)
Den87105 = keras.layers.Dense(2,name = 'Den87105', )(in0Den87105)
Add95927 = keras.layers.Add(name = 'Add95927', )([in0Add95927,in1Add95927])
Zer87019 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer87019', )(Add95927)
Con37535 = keras.layers.Concatenate(axis=2, name = 'Con37535', )([Zer87019,in0Con37535])
Mul69976 = keras.layers.Multiply(name = 'Mul69976', )([Den87105,Con37535])
Con83446 = keras.layers.Concatenate(axis=2, name = 'Con83446', )([Mul69976,in0Con83446])
Max70553 = keras.layers.Maximum(name = 'Max70553', )([Zer54157,Con83446])
model = tf.keras.models.Model(inputs=[in0Zer39569,in0Den87105,in0Add95927,in1Add95927,in0Con37535,in0Con83446], outputs=Max70553)
w = model.get_layer('Den87105').get_weights() 
w[0] = np.array([[0.1386, 0.0801], [0.3551, 0.0809]])
w[1] = np.array([0.0883, 0.4079])
model.get_layer('Den87105').set_weights(w) 
in0Zer39569 = tf.constant([[[[[1.4672]], [[1.5142]], [[1.0294]], [[1.9454]]]]])
in0Den87105 = tf.constant([[[0.5361, 0.5487], [0.4793, 0.5033], [0.4914, 0.2347], [0.3012, 0.6194], [0.6676, 0.0365]]])
in0Add95927 = tf.constant([[[0.9308], [0.6242]]])
in1Add95927 = tf.constant([[[0.1505], [0.4195]]])
in0Con37535 = tf.constant([[[0.9711], [0.4226], [0.428], [0.0979], [0.2195]]])
in0Con83446 = tf.constant([[[0.4529, 0.2142, 0.5314, 0.5159, 0.2266, 0.4892, 0.2959, 0.546, 0.5161, 0.5926, 0.9109, 0.3297, 0.0356, 0.283, 0.0495, 0.8694], [0.5495, 0.0248, 0.2074, 0.9534, 0.0043, 0.4234, 0.5268, 0.7648, 0.2709, 0.6119, 0.9613, 0.3018, 0.4531, 0.2549, 0.141, 0.2333], [0.9148, 0.9469, 0.3901, 0.4393, 0.4052, 0.1713, 0.962, 0.8917, 0.9189, 0.6617, 0.7107, 0.7216, 0.2218, 0.9602, 0.0938, 0.2871], [0.2895, 0.2022, 0.6192, 0.8075, 0.2621, 0.6748, 0.5853, 0.6619, 0.9009, 0.493, 0.2437, 0.7637, 0.947, 0.8178, 0.3164, 0.5165], [0.2309, 0.3997, 0.1365, 0.735, 0.8557, 0.8734, 0.551, 0.5677, 0.2885, 0.1517, 0.1225, 0.9025, 0.7342, 0.4722, 0.0975, 0.9498]]])
print (np.array2string(model.predict([in0Zer39569,in0Den87105,in0Add95927,in1Add95927,in0Con37535,in0Con83446],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max70553.png')

LZer39569 = zero_padding3D_layer([[[[[1.4672]], [[1.5142]], [[1.0294]], [[1.9454]]]]], 1, 1, 1, 1, 1, 1, Zer39569), 
LRes49952 = reshape_layer(Zer39569, [3, 6, 3], Res49952), 
LRes73600 = reshape_layer(Res49952, [3, 18], Res73600), 
LZer54157 = zero_padding1D_layer(Res73600, 2, 0, Zer54157), 
LDen87105 = dense_layer([[[0.5361, 0.5487], [0.4793, 0.5033], [0.4914, 0.2347], [0.3012, 0.6194], [0.6676, 0.0365]]], [[0.1386, 0.0801], [0.3551, 0.0809]],[0.0883, 0.4079], Den87105), 
LAdd95927 = add_layer([[[[0.9308], [0.6242]]], [[[0.1505], [0.4195]]]], Add95927), 
LZer87019 = zero_padding1D_layer(Add95927, 3, 0, Zer87019), 
LCon37535 = concatenate_layer([Zer87019,[[[0.9711], [0.4226], [0.428], [0.0979], [0.2195]]]], 2, Con37535), 
LMul69976 = multiply_layer([Den87105,Con37535], Mul69976), 
LCon83446 = concatenate_layer([Mul69976,[[[0.4529, 0.2142, 0.5314, 0.5159, 0.2266, 0.4892, 0.2959, 0.546, 0.5161, 0.5926, 0.9109, 0.3297, 0.0356, 0.283, 0.0495, 0.8694], [0.5495, 0.0248, 0.2074, 0.9534, 0.0043, 0.4234, 0.5268, 0.7648, 0.2709, 0.6119, 0.9613, 0.3018, 0.4531, 0.2549, 0.141, 0.2333], [0.9148, 0.9469, 0.3901, 0.4393, 0.4052, 0.1713, 0.962, 0.8917, 0.9189, 0.6617, 0.7107, 0.7216, 0.2218, 0.9602, 0.0938, 0.2871], [0.2895, 0.2022, 0.6192, 0.8075, 0.2621, 0.6748, 0.5853, 0.6619, 0.9009, 0.493, 0.2437, 0.7637, 0.947, 0.8178, 0.3164, 0.5165], [0.2309, 0.3997, 0.1365, 0.735, 0.8557, 0.8734, 0.551, 0.5677, 0.2885, 0.1517, 0.1225, 0.9025, 0.7342, 0.4722, 0.0975, 0.9498]]]], 2, Con83446), 
LMax70553 = maximum_layer([Zer54157,Con83446], Max70553), 
exec_layers([LZer39569,LRes49952,LRes73600,LZer54157,LDen87105,LAdd95927,LZer87019,LCon37535,LMul69976,LCon83446,LMax70553],["Zer39569","Res49952","Res73600","Zer54157","Den87105","Add95927","Zer87019","Con37535","Mul69976","Con83446","Max70553"],Max70553,"Max70553")

Actual (Unparsed): [[[0.0000000, 0.4809192, 0.4529000, 0.2142000, 0.5314000, 0.5159000, 0.2266000, 0.4892000, 0.2959000, 0.5460000, 0.5161000, 0.5926000, 0.9109000, 0.3297000, 0.0356000, 0.2830000, 0.0495000, 0.8694000], [0.0000000, 0.2058100, 0.5495000, 0.0248000, 0.2074000, 0.9534000, 0.0043000, 0.4234000, 0.5268000, 0.7648000, 0.2709000, 0.6119000, 0.9613000, 0.3018000, 0.4531000, 0.2549000, 0.1410000, 0.2333000], [0.0000000, 0.1995543, 0.9148000, 0.9469000, 0.3901000, 0.4393000, 0.4052000, 0.1713000, 0.9620000, 0.8917000, 0.9189000, 0.6617000, 0.7107000, 0.7216000, 0.2218000, 0.9602000, 0.0938000, 0.2871000], [0.3784499, 0.0472011, 0.2895000, 0.2022000, 1.4672000, 0.8075000, 0.2621000, 1.5142000, 0.5853000, 0.6619000, 1.0294000, 0.4930000, 0.2437000, 1.9454000, 0.9470000, 0.8178000, 0.3164000, 0.5165000], [0.2022591, 0.1019199, 0.2309000, 0.3997000, 0.1365000, 0.7350000, 0.8557000, 0.8734000, 0.5510000, 0.5677000, 0.2885000, 0.1517000, 0.1225000, 0.9025000, 0.7342000, 0.4722000, 0.0975000, 0.9498000]]]

Expected (Unparsed): [[[0,0.480919251384,0.4529,0.2142,0.5314,0.5159,0.2266,0.4892,0.2959,0.546,0.5161,0.5926,0.9109,0.3297,0.0356,0.283,0.0495,0.8694],[0,0.20580996114,0.5495,0.0248,0.2074,0.9534,0.0043,0.4234,0.5268,0.7648,0.2709,0.6119,0.9613,0.3018,0.4531,0.2549,0.141,0.2333],[0,0.19955430236000002,0.9148,0.9469,0.3901,0.4393,0.4052,0.1713,0.962,0.8917,0.9189,0.6617,0.7107,0.7216,0.2218,0.9602,0.0938,0.2871],[0.378449874638,0.047201073282,0.2895,0.2022,1.4672,0.8075,0.2621,1.5142,0.5853,0.6619,1.0294,0.493,0.2437,1.9454,0.947,0.8178,0.3164,0.5165],[0.20225915528699998,0.10191991039500001,0.2309,0.3997,0.1365,0.735,0.8557,0.8734,0.551,0.5677,0.2885,0.1517,0.1225,0.9025,0.7342,0.4722,0.0975,0.9498]]]

Actual:   [[[0, 0.481, 0.4529, 0.2142, 0.5314, 0.5159, 0.2266, 0.4892, 0.2959, 0.546, 0.5161, 0.5926, 0.9109, 0.3297, 0.0356, 0.283, 0.0495, 0.8694], [0, 0.2059, 0.5495, 0.0248, 0.2074, 0.9534, 0.0043, 0.4234, 0.5268, 0.7648, 0.2709, 0.6119, 0.9613, 0.3018, 0.4531, 0.2549, 0.141, 0.2333], [0, 0.1996, 0.9148, 0.9469, 0.3901, 0.4393, 0.4052, 0.1713, 0.962, 0.8917, 0.9189, 0.6617, 0.7107, 0.7216, 0.2218, 0.9602, 0.0938, 0.2871], [0.3785, 0.0473, 0.2895, 0.2022, 1.4672, 0.8075, 0.2621, 1.5142, 0.5853, 0.6619, 1.0294, 0.493, 0.2437, 1.9454, 0.947, 0.8178, 0.3164, 0.5165], [0.2023, 0.102, 0.2309, 0.3997, 0.1365, 0.735, 0.8557, 0.8734, 0.551, 0.5677, 0.2885, 0.1517, 0.1225, 0.9025, 0.7342, 0.4722, 0.0975, 0.9498]]]

Expected: [[[0, 0.481, 0.4529, 0.2142, 0.5314, 0.5159, 0.2266, 0.4892, 0.2959, 0.546, 0.5161, 0.5926, 0.9109, 0.3297, 0.0356, 0.283, 0.0495, 0.8694], [0, 0.2059, 0.5495, 0.0248, 0.2074, 0.9534, 0.0043, 0.4234, 0.5268, 0.7648, 0.2709, 0.6119, 0.9613, 0.3018, 0.4531, 0.2549, 0.141, 0.2333], [0, 0.1996, 0.9148, 0.9469, 0.3901, 0.4393, 0.4052, 0.1713, 0.962, 0.8917, 0.9189, 0.6617, 0.7107, 0.7216, 0.2218, 0.9602, 0.0938, 0.2871], [0.3785, 0.0473, 0.2895, 0.2022, 1.4672, 0.8075, 0.2621, 1.5142, 0.5853, 0.6619, 1.0294, 0.493, 0.2437, 1.9454, 0.947, 0.8178, 0.3164, 0.5165], [0.2023, 0.102, 0.2309, 0.3997, 0.1365, 0.735, 0.8557, 0.8734, 0.551, 0.5677, 0.2885, 0.1517, 0.1225, 0.9025, 0.7342, 0.4722, 0.0975, 0.9498]]]