import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo27967 = tf.keras.layers.Input(shape=([2, 2]))
in0Con41157 = tf.keras.layers.Input(shape=([3, 1, 3]))
in0Up_53268 = tf.keras.layers.Input(shape=([3, 1, 4]))

Glo27967 = keras.layers.GlobalMaxPool1D(name = 'Glo27967', )(in0Glo27967)
Res28796 = keras.layers.Reshape((2, 1), name = 'Res28796', )(Glo27967)
Res68280 = keras.layers.Reshape((2, 1, 1), name = 'Res68280', )(Res28796)
Zer99317 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer99317', )(Res68280)
Con41157 = keras.layers.Concatenate(axis=3, name = 'Con41157', )([Zer99317,in0Con41157])
Up_53268 = keras.layers.UpSampling2D(size=(1, 1), name = 'Up_53268', )(in0Up_53268)
Max5753 = keras.layers.Maximum(name = 'Max5753', )([Con41157,Up_53268])
Lea34892 = keras.layers.LeakyReLU(alpha=6.111127863907396, name = 'Lea34892', )(Max5753)
Loc54072 = keras.layers.LocallyConnected2D(4, (2, 1),strides=(1, 7), name = 'Loc54072', )(Lea34892)
model = tf.keras.models.Model(inputs=[in0Glo27967,in0Con41157,in0Up_53268], outputs=Loc54072)
w = model.get_layer('Loc54072').get_weights() 
w[0] = np.array([[[0.8119, 0.6746, 0.131, 0.3204], [0.9843, 0.5609, 0.4955, 0.96], [0.18, 0.0148, 0.3026, 0.0422], [0.4715, 0.258, 0.5469, 0.7997], [0.3822, 0.096, 0.2714, 0.1644], [0.7533, 0.8615, 0.1573, 0.208], [0.7662, 0.9294, 0.0286, 0.7161], [0.9597, 0.2126, 0.8171, 0.8462]], [[0.6887, 0.6341, 0.6582, 0.5437], [0.3646, 0.6904, 0.6963, 0.1541], [0.99, 0.8701, 0.8673, 0.4538], [0.9539, 0.8711, 0.3934, 0.147], [0.7898, 0.2731, 0.9794, 0.7276], [0.615, 0.5657, 0.7291, 0.4893], [0.2667, 0.2048, 0.6153, 0.3804], [0.7327, 0.6767, 0.932, 0.3493]]])
w[1] = np.array([[[0, 0, 0, 0]], [[0, 0, 0, 0]]])
model.get_layer('Loc54072').set_weights(w) 
in0Glo27967 = tf.constant([[[1.2791, 1.2181], [1.2689, 1.8288]]])
in0Con41157 = tf.constant([[[[0.2162, 0.9768, 0.498]], [[0.6089, 0.7802, 0.6091]], [[0.3774, 0.672, 0.8197]]]])
in0Up_53268 = tf.constant([[[[1.6832, 1.8099, 1.0396, 1.979]], [[1.8074, 1.448, 1.0518, 1.7882]], [[1.8385, 1.6064, 1.3075, 1.6738]]]])
print (np.array2string(model.predict([in0Glo27967,in0Con41157,in0Up_53268],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Loc54072.png')

LGlo27967 = global_max_pool1D_layer([[[1.2791, 1.2181], [1.2689, 1.8288]]], Glo27967), 
LRes28796 = reshape_layer(Glo27967, [2, 1], Res28796), 
LRes68280 = reshape_layer(Res28796, [2, 1, 1], Res68280), 
LZer99317 = zero_padding2D_layer(Res68280, 1, 0, 0, 0, Zer99317), 
LCon41157 = concatenate_layer([Zer99317,[[[[0.2162, 0.9768, 0.498]], [[0.6089, 0.7802, 0.6091]], [[0.3774, 0.672, 0.8197]]]]], 3, Con41157), 
LUp_53268 = up_sampling2D_layer([[[[1.6832, 1.8099, 1.0396, 1.979]], [[1.8074, 1.448, 1.0518, 1.7882]], [[1.8385, 1.6064, 1.3075, 1.6738]]]], 1, 1, Up_53268), 
LMax5753 = maximum_layer([Con41157,Up_53268], Max5753), 
LLea34892 = leaky_relu_layer(Max5753, 6.111127863907396, Lea34892), 
LLoc54072 = locally_connected2D_layer(Lea34892, 2, 1,[[[0.8119, 0.6746, 0.131, 0.3204], [0.9843, 0.5609, 0.4955, 0.96], [0.18, 0.0148, 0.3026, 0.0422], [0.4715, 0.258, 0.5469, 0.7997], [0.3822, 0.096, 0.2714, 0.1644], [0.7533, 0.8615, 0.1573, 0.208], [0.7662, 0.9294, 0.0286, 0.7161], [0.9597, 0.2126, 0.8171, 0.8462]], [[0.6887, 0.6341, 0.6582, 0.5437], [0.3646, 0.6904, 0.6963, 0.1541], [0.99, 0.8701, 0.8673, 0.4538], [0.9539, 0.8711, 0.3934, 0.147], [0.7898, 0.2731, 0.9794, 0.7276], [0.615, 0.5657, 0.7291, 0.4893], [0.2667, 0.2048, 0.6153, 0.3804], [0.7327, 0.6767, 0.932, 0.3493]]],[[[0, 0, 0, 0]], [[0, 0, 0, 0]]], 1, 7, Loc54072), 
exec_layers([LGlo27967,LRes28796,LRes68280,LZer99317,LCon41157,LUp_53268,LMax5753,LLea34892,LLoc54072],["Glo27967","Res28796","Res68280","Zer99317","Con41157","Up_53268","Max5753","Lea34892","Loc54072"],Loc54072,"Loc54072")

Actual (Unparsed): [[[[8.5718926, 5.4553043, 4.7237212, 6.7679681]], [[8.5348300, 7.4299150, 9.1499166, 5.1517279]]]]

Expected (Unparsed): [[[[8.57189253,5.4553043500000005,4.723721170000001,6.767968080000001]],[[8.534829969999999,7.42991503,9.14991659,5.151727879999999]]]]

Actual:   [[[[8.5719, 5.4554, 4.7238, 6.768]], [[8.5349, 7.43, 9.15, 5.1518]]]]

Expected: [[[[8.5719, 5.4554, 4.7238, 6.768]], [[8.5349, 7.43, 9.15, 5.1518]]]]