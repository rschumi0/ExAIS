import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot51575 = tf.keras.layers.Input(shape=([2, 2]))
in1Dot51575 = tf.keras.layers.Input(shape=([2, 2]))
in0Min35949 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in1Min35949 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in0Con23088 = tf.keras.layers.Input(shape=([3, 6]))

Dot51575 = keras.layers.Dot(axes=(1, 1), name = 'Dot51575', )([in0Dot51575,in1Dot51575])
Res58753 = keras.layers.Reshape((2, 2, 1), name = 'Res58753', )(Dot51575)
Res27890 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res27890', )(Res58753)
Up_67823 = keras.layers.UpSampling3D(size=(1, 2, 2), name = 'Up_67823', )(Res27890)
Res73705 = keras.layers.Reshape((2, 4, 2), name = 'Res73705', )(Up_67823)
Res19693 = keras.layers.Reshape((2, 8), name = 'Res19693', )(Res73705)
Zer4522 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer4522', )(Res19693)
Min35949 = keras.layers.Minimum(name = 'Min35949', )([in0Min35949,in1Min35949])
Res57165 = keras.layers.Reshape((1, 1, 2), name = 'Res57165', )(Min35949)
Res91532 = keras.layers.Reshape((1, 2), name = 'Res91532', )(Res57165)
Zer11433 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer11433', )(Res91532)
Sof74007 = keras.layers.Softmax(axis=1, name = 'Sof74007', )(Zer11433)
Con23088 = keras.layers.Concatenate(axis=2, name = 'Con23088', )([Sof74007,in0Con23088])
Ave66177 = keras.layers.Average(name = 'Ave66177', )([Zer4522,Con23088])
model = tf.keras.models.Model(inputs=[in0Dot51575,in1Dot51575,in0Min35949,in1Min35949,in0Con23088], outputs=Ave66177)
in0Dot51575 = tf.constant([[[0.7143, 0.2419], [0.5203, 0.9335]]])
in1Dot51575 = tf.constant([[[0.1677, 0.6975], [0.7628, 0.5552]]])
in0Min35949 = tf.constant([[[[[0.4185, 0.2295]]]]])
in1Min35949 = tf.constant([[[[[0.5695, 0.9821]]]]])
in0Con23088 = tf.constant([[[0.8321, 0.5447, 0.1966, 0.3695, 0.095, 0.5978], [0.5304, 0.9763, 0.6554, 0.0106, 0.4616, 0.9794], [0.8324, 0.7458, 0.7963, 0.8904, 0.1749, 0.5696]]])
print (np.array2string(model.predict([in0Dot51575,in1Dot51575,in0Min35949,in1Min35949,in0Con23088],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave66177.png')

LDot51575 = dot_layer([[[0.7143, 0.2419], [0.5203, 0.9335]]], [[[0.1677, 0.6975], [0.7628, 0.5552]]], 1, 1, Dot51575), 
LRes58753 = reshape_layer(Dot51575, [2, 2, 1], Res58753), 
LRes27890 = reshape_layer(Res58753, [2, 2, 1, 1], Res27890), 
LUp_67823 = up_sampling3D_layer(Res27890, 1, 2, 2, Up_67823), 
LRes73705 = reshape_layer(Up_67823, [2, 4, 2], Res73705), 
LRes19693 = reshape_layer(Res73705, [2, 8], Res19693), 
LZer4522 = zero_padding1D_layer(Res19693, 1, 0, Zer4522), 
LMin35949 = minimum_layer([[[[[[0.4185, 0.2295]]]]], [[[[[0.5695, 0.9821]]]]]], Min35949), 
LRes57165 = reshape_layer(Min35949, [1, 1, 2], Res57165), 
LRes91532 = reshape_layer(Res57165, [1, 2], Res91532), 
LZer11433 = zero_padding1D_layer(Res91532, 1, 1, Zer11433), 
LSof74007 = softmax_layer(Zer11433, 1, Sof74007), 
LCon23088 = concatenate_layer([Sof74007,[[[0.8321, 0.5447, 0.1966, 0.3695, 0.095, 0.5978], [0.5304, 0.9763, 0.6554, 0.0106, 0.4616, 0.9794], [0.8324, 0.7458, 0.7963, 0.8904, 0.1749, 0.5696]]]], 2, Con23088), 
LAve66177 = average_layer([Zer4522,Con23088], Ave66177), 
exec_layers([LDot51575,LRes58753,LRes27890,LUp_67823,LRes73705,LRes19693,LZer4522,LMin35949,LRes57165,LRes91532,LZer11433,LSof74007,LCon23088,LAve66177],["Dot51575","Res58753","Res27890","Up_67823","Res73705","Res19693","Zer4522","Min35949","Res57165","Res91532","Zer11433","Sof74007","Con23088","Ave66177"],Ave66177,"Ave66177")

Actual (Unparsed): [[[0.1420584, 0.1534698, 0.4160500, 0.2723500, 0.0983000, 0.1847500, 0.0475000, 0.2989000], [0.4742197, 0.4513969, 0.5235364, 0.7464865, 0.7212474, 0.3988474, 0.6243474, 0.8832474], [0.5183786, 0.5297900, 0.7925202, 0.7492202, 0.7416522, 0.7887022, 0.4309522, 0.6283022]]]

Expected (Unparsed): [[[0.1420583558399397,0.15346975782694458,0.41605,0.27235,0.0983,0.18475,0.0475,0.2989],[0.4742197633201206,0.4513969593461108,0.523536475,0.746486475,0.721247405,0.39884740500000004,0.624347405,0.8832474050000001],[0.5183785708399398,0.5297899728269446,0.792520215,0.749220215,0.741652225,0.788702225,0.4309522250000001,0.6283022250000001]]]

Actual:   [[[0.1421, 0.1535, 0.4161, 0.2724, 0.0983, 0.1848, 0.0475, 0.2989], [0.4743, 0.4514, 0.5236, 0.7465, 0.7213, 0.3989, 0.6244, 0.8833], [0.5184, 0.5298, 0.7926, 0.7493, 0.7417, 0.7888, 0.431, 0.6284]]]

Expected: [[[0.1421, 0.1535, 0.4161, 0.2724, 0.0983, 0.1848, 0.0475, 0.2989], [0.4743, 0.4514, 0.5236, 0.7465, 0.7213, 0.3989, 0.6244, 0.8833], [0.5184, 0.5298, 0.7926, 0.7493, 0.7417, 0.7888, 0.431, 0.6284]]]