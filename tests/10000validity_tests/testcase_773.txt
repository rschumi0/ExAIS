import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max95786 = tf.keras.layers.Input(shape=([2, 1]))
in1Max95786 = tf.keras.layers.Input(shape=([2, 1]))
in0Con22490 = tf.keras.layers.Input(shape=([1, 3]))
in0Max96808 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con18779 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Cro9814 = tf.keras.layers.Input(shape=([3, 3, 4]))

Max95786 = keras.layers.Maximum(name = 'Max95786', )([in0Max95786,in1Max95786])
Res76806 = keras.layers.Reshape((2, 1, 1), name = 'Res76806', )(Max95786)
Res500 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res500', )(Res76806)
Glo1148 = keras.layers.GlobalMaxPool3D(name = 'Glo1148', )(Res500)
Res5124 = keras.layers.Reshape((1, 1), name = 'Res5124', )(Glo1148)
Con22490 = keras.layers.Concatenate(axis=2, name = 'Con22490', )([Res5124,in0Con22490])
Max96808 = keras.layers.MaxPool2D(pool_size=(1, 1), name = 'Max96808', )(in0Max96808)
Con18779 = keras.layers.Concatenate(axis=3, name = 'Con18779', )([Max96808,in0Con18779])
Cro9814 = keras.layers.Cropping2D(cropping=((2, 0), (1, 1)), name = 'Cro9814', )(in0Cro9814)
Add10155 = keras.layers.Add(name = 'Add10155', )([Con18779,Cro9814])
Res67185 = keras.layers.Reshape((1, 4), name = 'Res67185', )(Add10155)
Per5954 = keras.layers.Permute((1,2), name = 'Per5954',)(Res67185)
Min40261 = keras.layers.Minimum(name = 'Min40261', )([Con22490,Per5954])
model = tf.keras.models.Model(inputs=[in0Max95786,in1Max95786,in0Con22490,in0Max96808,in0Con18779,in0Cro9814], outputs=Min40261)
in0Max95786 = tf.constant([[[0.0326], [0.0383]]])
in1Max95786 = tf.constant([[[0.5856], [0.8609]]])
in0Con22490 = tf.constant([[[0.7459, 0.032, 0.0201]]])
in0Max96808 = tf.constant([[[[1.2479, 1.0338]]]])
in0Con18779 = tf.constant([[[[0.388, 0.1786]]]])
in0Cro9814 = tf.constant([[[[1.3253, 1.7671, 1.7554, 1.5229], [1.8697, 1.9513, 1.7888, 1.7847], [1.7021, 1.7139, 1.741, 1.1453]], [[1.9016, 1.9856, 1.0977, 1.9308], [1.5807, 1.0752, 1.6476, 1.3686], [1.3316, 1.6153, 1.0343, 1.3557]], [[1.2806, 1.3265, 1.7643, 1.9521], [1.9835, 1.8557, 1.244, 1.0428], [1.9265, 1.7392, 1.2838, 1.8654]]]])
print (np.array2string(model.predict([in0Max95786,in1Max95786,in0Con22490,in0Max96808,in0Con18779,in0Cro9814],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min40261.png')

LMax95786 = maximum_layer([[[[0.0326], [0.0383]]], [[[0.5856], [0.8609]]]], Max95786), 
LRes76806 = reshape_layer(Max95786, [2, 1, 1], Res76806), 
LRes500 = reshape_layer(Res76806, [2, 1, 1, 1], Res500), 
LGlo1148 = global_max_pool3D_layer(Res500, Glo1148), 
LRes5124 = reshape_layer(Glo1148, [1, 1], Res5124), 
LCon22490 = concatenate_layer([Res5124,[[[0.7459, 0.032, 0.0201]]]], 2, Con22490), 
LMax96808 = max_pool2D_layer([[[[1.2479, 1.0338]]]], 1, 1, Max96808), 
LCon18779 = concatenate_layer([Max96808,[[[[0.388, 0.1786]]]]], 3, Con18779), 
LCro9814 = cropping2D_layer([[[[1.3253, 1.7671, 1.7554, 1.5229], [1.8697, 1.9513, 1.7888, 1.7847], [1.7021, 1.7139, 1.741, 1.1453]], [[1.9016, 1.9856, 1.0977, 1.9308], [1.5807, 1.0752, 1.6476, 1.3686], [1.3316, 1.6153, 1.0343, 1.3557]], [[1.2806, 1.3265, 1.7643, 1.9521], [1.9835, 1.8557, 1.244, 1.0428], [1.9265, 1.7392, 1.2838, 1.8654]]]], 2, 0, 1, 1, Cro9814), 
LAdd10155 = add_layer([Con18779,Cro9814], Add10155), 
LRes67185 = reshape_layer(Add10155, [1, 4], Res67185), 
LPer5954 = permute_layer(Res67185, 1,2, Per5954), 
LMin40261 = minimum_layer([Con22490,Per5954], Min40261), 
exec_layers([LMax95786,LRes76806,LRes500,LGlo1148,LRes5124,LCon22490,LMax96808,LCon18779,LCro9814,LAdd10155,LRes67185,LPer5954,LMin40261],["Max95786","Res76806","Res500","Glo1148","Res5124","Con22490","Max96808","Con18779","Cro9814","Add10155","Res67185","Per5954","Min40261"],Min40261,"Min40261")

Actual (Unparsed): [[[0.8609000, 0.7459000, 0.0320000, 0.0201000]]]

Expected (Unparsed): [[[0.8609,0.7459,0.032,0.0201]]]

Actual:   [[[0.8609, 0.7459, 0.032, 0.0201]]]

Expected: [[[0.8609, 0.7459, 0.032, 0.0201]]]