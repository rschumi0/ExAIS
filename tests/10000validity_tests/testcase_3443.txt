import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0PRe43886 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Ave71017 = tf.keras.layers.Input(shape=([2, 2]))
in1Ave71017 = tf.keras.layers.Input(shape=([2, 2]))
in0Con10527 = tf.keras.layers.Input(shape=([2, 6]))

PRe43886 = keras.layers.PReLU(name = 'PRe43886', input_shape=(2, 2, 2, 2))(in0PRe43886)
Bat99988 = keras.layers.BatchNormalization(axis=2, epsilon=0.513837961318757,  name = 'Bat99988', )(PRe43886)
Res25297 = keras.layers.Reshape((2, 2, 4), name = 'Res25297', )(Bat99988)
Res35426 = keras.layers.Reshape((2, 8), name = 'Res35426', )(Res25297)
Ave71017 = keras.layers.Average(name = 'Ave71017', )([in0Ave71017,in1Ave71017])
ELU68348 = keras.layers.ELU(alpha=-2.6586925622807307, name = 'ELU68348', )(Ave71017)
Con10527 = keras.layers.Concatenate(axis=2, name = 'Con10527', )([ELU68348,in0Con10527])
Mul51659 = keras.layers.Multiply(name = 'Mul51659', )([Res35426,Con10527])
Res37123 = keras.layers.Reshape((2, 8, 1), name = 'Res37123', )(Mul51659)
Loc98457 = keras.layers.LocallyConnected2D(2, (1, 1),strides=(1, 1), name = 'Loc98457', )(Res37123)
model = tf.keras.models.Model(inputs=[in0PRe43886,in0Ave71017,in1Ave71017,in0Con10527], outputs=Loc98457)
w = model.get_layer('PRe43886').get_weights() 
w[0] = np.array([[[[0.6447, 0.3075], [0.464, 0.3329]], [[0.2437, 0.3002], [0.6585, 0.003]]], [[[0.8428, 0.7035], [0.0231, 0.0755]], [[0.9903, 0.7754], [0.2367, 0.0136]]]])
model.get_layer('PRe43886').set_weights(w) 
w = model.get_layer('Bat99988').get_weights() 
w[0] = np.array([0.6868, 0.7148])
w[1] = np.array([0.1843, 0.9046])
w[2] = np.array([0.465, 0.954])
w[3] = np.array([0.7581, 0.99])
model.get_layer('Bat99988').set_weights(w) 
w = model.get_layer('Loc98457').get_weights() 
w[0] = np.array([[[0.8439, 0.5937]], [[0.7639, 0.2189]], [[0.2839, 0.3404]], [[0.9432, 0.4131]], [[0.3824, 0.598]], [[0.7642, 0.7884]], [[0.354, 0.7071]], [[0.4419, 0.5027]], [[0.5868, 0.9315]], [[0.5905, 0.6441]], [[0.1421, 0.7923]], [[0.7215, 0.7083]], [[0.8755, 0.7977]], [[0.165, 0.6543]], [[0.9732, 0.2717]], [[0.5317, 0.7674]]])
w[1] = np.array([[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]])
model.get_layer('Loc98457').set_weights(w) 
in0PRe43886 = tf.constant([[[[[0.3308, 0.056], [0.2033, 0.0256]], [[0.7302, 0.5293], [0.5447, 0.6419]]], [[[0.2249, 0.8499], [0.8143, 0.6448]], [[0.6882, 0.2965], [0.7736, 0.5433]]]]])
in0Ave71017 = tf.constant([[[0.8843, 0.0931], [0.5573, 0.5609]]])
in1Ave71017 = tf.constant([[[0.5214, 0.2229], [0.7427, 0.0155]]])
in0Con10527 = tf.constant([[[0.552, 0.7718, 0.4236, 0.3745, 0.4275, 0.5956], [0.4688, 0.2927, 0.6447, 0.0427, 0.0334, 0.8901]]])
print (np.array2string(model.predict([in0PRe43886,in0Ave71017,in1Ave71017,in0Con10527],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Loc98457.png')

LPRe43886 = prelu_layer([[[[[0.3308, 0.056], [0.2033, 0.0256]], [[0.7302, 0.5293], [0.5447, 0.6419]]], [[[0.2249, 0.8499], [0.8143, 0.6448]], [[0.6882, 0.2965], [0.7736, 0.5433]]]]], [[[[0.6447, 0.3075], [0.464, 0.3329]], [[0.2437, 0.3002], [0.6585, 0.003]]], [[[0.8428, 0.7035], [0.0231, 0.0755]], [[0.9903, 0.7754], [0.2367, 0.0136]]]], PRe43886), 
LBat99988 = batch_normalization_layer(PRe43886, 2, 0.513837961318757, [0.6868, 0.7148], [0.1843, 0.9046], [0.465, 0.954], [0.7581, 0.99], Bat99988), 
LRes25297 = reshape_layer(Bat99988, [2, 2, 4], Res25297), 
LRes35426 = reshape_layer(Res25297, [2, 8], Res35426), 
LAve71017 = average_layer([[[[0.8843, 0.0931], [0.5573, 0.5609]]], [[[0.5214, 0.2229], [0.7427, 0.0155]]]], Ave71017), 
LELU68348 = elu_layer(Ave71017, -2.6586925622807307, ELU68348), 
LCon10527 = concatenate_layer([ELU68348,[[[0.552, 0.7718, 0.4236, 0.3745, 0.4275, 0.5956], [0.4688, 0.2927, 0.6447, 0.0427, 0.0334, 0.8901]]]], 2, Con10527), 
LMul51659 = multiply_layer([Res35426,Con10527], Mul51659), 
LRes37123 = reshape_layer(Mul51659, [2, 8, 1], Res37123), 
LLoc98457 = locally_connected2D_layer(Res37123, 1, 1,[[[0.8439, 0.5937]], [[0.7639, 0.2189]], [[0.2839, 0.3404]], [[0.9432, 0.4131]], [[0.3824, 0.598]], [[0.7642, 0.7884]], [[0.354, 0.7071]], [[0.4419, 0.5027]], [[0.5868, 0.9315]], [[0.5905, 0.6441]], [[0.1421, 0.7923]], [[0.7215, 0.7083]], [[0.8755, 0.7977]], [[0.165, 0.6543]], [[0.9732, 0.2717]], [[0.5317, 0.7674]]],[[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]], 1, 1, Loc98457), 
exec_layers([LPRe43886,LBat99988,LRes25297,LRes35426,LAve71017,LELU68348,LCon10527,LMul51659,LRes37123,LLoc98457],["PRe43886","Bat99988","Res25297","Res35426","Ave71017","ELU68348","Con10527","Mul51659","Res37123","Loc98457"],Loc98457,"Loc98457")

Actual (Unparsed): [[[[0.0608414, 0.0428031], [-0.0078174, -0.0022401], [0.0039072, 0.0046847], [-0.0606263, -0.0265529], [0.1254004, 0.1961021], [0.1880425, 0.1939973], [0.1007928, 0.2013294], [0.1902065, 0.2163766]], [[0.0145267, 0.0230600], [0.0712541, 0.0777219], [0.0264477, 0.1474630], [0.0620441, 0.0609090], [0.4231392, 0.3855375], [0.0036732, 0.0145659], [0.0259859, 0.0072548], [0.3148207, 0.4543791]]]]

Expected (Unparsed): [[[[0.06084140270824797,0.0428031055668762],[-0.007817438132685579,-0.002240132487557106],[0.003907168009925302,0.004684748117571584],[-0.060626326146059735,-0.02655294246282578],[0.125400408042162,0.19610210253455249],[0.18804249806063103,0.19399725918738747],[0.10079282402208584,0.20132939510174264],[0.1902065180016275,0.21637659334559434]],[[0.014526694878606135,0.02306001410944379],[0.07125410868243602,0.07772188213777653],[0.02644766974678198,0.1474629749498618],[0.062044136637008196,0.06090902561329578],[0.4231391737179356,0.385537542975211],[0.0036731862490343593,0.014565853107534431],[0.025985937555151193,0.007254808090561631],[0.31482067932027374,0.45437914107650573]]]]

Actual:   [[[[0.0609, 0.0429], [-0.0078, -0.0022], [0.004, 0.0047], [-0.0606, -0.0265], [0.1255, 0.1962], [0.1881, 0.194], [0.1008, 0.2014], [0.1903, 0.2164]], [[0.0146, 0.0231], [0.0713, 0.0778], [0.0265, 0.1475], [0.0621, 0.061], [0.4232, 0.3856], [0.0037, 0.0146], [0.026, 0.0073], [0.3149, 0.4544]]]]

Expected: [[[[0.0609, 0.0429], [-0.0078, -0.0022], [0.004, 0.0047], [-0.0606, -0.0265], [0.1255, 0.1962], [0.1881, 0.194], [0.1008, 0.2014], [0.1903, 0.2164]], [[0.0146, 0.0231], [0.0713, 0.0778], [0.0265, 0.1475], [0.0621, 0.061], [0.4232, 0.3856], [0.0037, 0.0146], [0.026, 0.0073], [0.3149, 0.4544]]]]