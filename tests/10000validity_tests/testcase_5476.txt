import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub96770 = tf.keras.layers.Input(shape=([2, 3, 3, 2]))
in1Sub96770 = tf.keras.layers.Input(shape=([2, 3, 3, 2]))
in0Loc72218 = tf.keras.layers.Input(shape=([2, 1]))
in0Con95009 = tf.keras.layers.Input(shape=([2, 5, 5]))
in0Min53765 = tf.keras.layers.Input(shape=([2, 1]))
in1Min53765 = tf.keras.layers.Input(shape=([2, 1]))
in0Con74427 = tf.keras.layers.Input(shape=([2, 26]))

Sub96770 = keras.layers.Subtract(name = 'Sub96770', )([in0Sub96770,in1Sub96770])
Res3775 = keras.layers.Reshape((2, 3, 6), name = 'Res3775', )(Sub96770)
Zer38466 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer38466', )(Res3775)
Loc72218 = keras.layers.LocallyConnected1D(4, (2),strides=(1), name = 'Loc72218', )(in0Loc72218)
Res30293 = keras.layers.Reshape((1, 4, 1), name = 'Res30293', )(Loc72218)
Dep59876 = keras.layers.DepthwiseConv2D((1, 2),strides=(1, 1), padding='same', name = 'Dep59876', )(Res30293)
Zer95080 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer95080', )(Dep59876)
Con95009 = keras.layers.Concatenate(axis=3, name = 'Con95009', )([Zer95080,in0Con95009])
Add21494 = keras.layers.Add(name = 'Add21494', )([Zer38466,Con95009])
Res46473 = keras.layers.Reshape((2, 30), name = 'Res46473', )(Add21494)
Min53765 = keras.layers.Minimum(name = 'Min53765', )([in0Min53765,in1Min53765])
Den96099 = keras.layers.Dense(4,name = 'Den96099', )(Min53765)
Con74427 = keras.layers.Concatenate(axis=2, name = 'Con74427', )([Den96099,in0Con74427])
Min30695 = keras.layers.Minimum(name = 'Min30695', )([Res46473,Con74427])
model = tf.keras.models.Model(inputs=[in0Sub96770,in1Sub96770,in0Loc72218,in0Con95009,in0Min53765,in1Min53765,in0Con74427], outputs=Min30695)
w = model.get_layer('Loc72218').get_weights() 
w[0] = np.array([[[0.8338, 0.2232, 0.2913, 0.111], [0.5575, 0.4199, 0.0681, 0.406]]])
w[1] = np.array([[0, 0, 0, 0]])
model.get_layer('Loc72218').set_weights(w) 
w = model.get_layer('Dep59876').get_weights() 
w[0] = np.array([[[[0.1184]], [[0.9306]]]])
w[1] = np.array([0])
model.get_layer('Dep59876').set_weights(w) 
w = model.get_layer('Den96099').get_weights() 
w[0] = np.array([[0.1616, 0.2619, 0.8275, 0.2614]])
w[1] = np.array([0.7969, 0.9089, 0.9505, 0.8735])
model.get_layer('Den96099').set_weights(w) 
in0Sub96770 = tf.constant([[[[[0.4902, 0.9525], [0.0804, 0.1097], [0.0402, 0.6487]], [[0.7451, 0.5655], [0.1436, 0.3766], [0.7792, 0.8204]], [[0.6125, 0.7562], [0.5689, 0.4803], [0.6249, 0.5102]]], [[[0.1694, 0.9168], [0.6045, 0.2196], [0.1671, 0.77]], [[0.6995, 0.047], [0.1989, 0.8455], [0.0349, 0.4843]], [[0.532, 0.7603], [0.4074, 0.8728], [0.3045, 0.2066]]]]])
in1Sub96770 = tf.constant([[[[[0.247, 0.0423], [0.3872, 0.6345], [0.4784, 0.9226]], [[0.3364, 0.484], [0.3799, 0.3892], [0.5794, 0.8373]], [[0.6617, 0.9237], [0.7974, 0.5096], [0.7629, 0.8941]]], [[[0.4525, 0.1441], [0.7996, 0.3879], [0.5443, 0.8391]], [[0.69, 0.5681], [0.9736, 0.1983], [0.7281, 0.4664]], [[0.3432, 0.4629], [0.2798, 0.9713], [0.6299, 0.5662]]]]])
in0Loc72218 = tf.constant([[[0.3373], [0.531]]])
in0Con95009 = tf.constant([[[[0.7378, 0.4912, 0.5345, 0.548, 0.3101], [0.3321, 0.8945, 0.4102, 0.6041, 0.3729], [0.5285, 0.0039, 0.7506, 0.6351, 0.1767], [0.2878, 0.7505, 0.057, 0.3115, 0.8068], [0.4016, 0.1942, 0.2712, 0.2586, 0.999]], [[0.8149, 0.536, 0.9911, 0.0719, 0.879], [0.0743, 0.1513, 0.7925, 0.9586, 0.7658], [0.6055, 0.7188, 0.6311, 0.1352, 0.5493], [0.2202, 0.7538, 0.0219, 0.9358, 0.2746], [0.8186, 0.353, 0.464, 0.3215, 0.7744]]]])
in0Min53765 = tf.constant([[[0.9259], [0.5295]]])
in1Min53765 = tf.constant([[[0.3809], [0.7457]]])
in0Con74427 = tf.constant([[[0.0722, 0.4852, 0.2407, 0.3647, 0.2365, 0.8714, 0.8531, 0.8002, 0.3168, 0.8808, 0.5374, 0.1121, 0.3499, 0.7966, 0.9429, 0.0303, 0.873, 0.8383, 0.8668, 0.1225, 0.3303, 0.5704, 0.536, 0.335, 0.5826, 0.7534], [0.7344, 0.457, 0.7932, 0.7057, 0.9612, 0.6529, 0.7676, 0.9312, 0.1873, 0.5897, 0.0295, 0.1078, 0.0637, 0.2354, 0.5327, 0.5277, 0.626, 0.1023, 0.9274, 0.7352, 0.6395, 0.5647, 0.7263, 0.4173, 0.7338, 0.8949]]])
print (np.array2string(model.predict([in0Sub96770,in1Sub96770,in0Loc72218,in0Con95009,in0Min53765,in1Min53765,in0Con74427],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min30695.png')

LSub96770 = subtract_layer([[[[[0.4902, 0.9525], [0.0804, 0.1097], [0.0402, 0.6487]], [[0.7451, 0.5655], [0.1436, 0.3766], [0.7792, 0.8204]], [[0.6125, 0.7562], [0.5689, 0.4803], [0.6249, 0.5102]]], [[[0.1694, 0.9168], [0.6045, 0.2196], [0.1671, 0.77]], [[0.6995, 0.047], [0.1989, 0.8455], [0.0349, 0.4843]], [[0.532, 0.7603], [0.4074, 0.8728], [0.3045, 0.2066]]]]], [[[[[0.247, 0.0423], [0.3872, 0.6345], [0.4784, 0.9226]], [[0.3364, 0.484], [0.3799, 0.3892], [0.5794, 0.8373]], [[0.6617, 0.9237], [0.7974, 0.5096], [0.7629, 0.8941]]], [[[0.4525, 0.1441], [0.7996, 0.3879], [0.5443, 0.8391]], [[0.69, 0.5681], [0.9736, 0.1983], [0.7281, 0.4664]], [[0.3432, 0.4629], [0.2798, 0.9713], [0.6299, 0.5662]]]]], Sub96770), 
LRes3775 = reshape_layer(Sub96770, [2, 3, 6], Res3775), 
LZer38466 = zero_padding2D_layer(Res3775, 0, 0, 2, 0, Zer38466), 
LLoc72218 = locally_connected1D_layer([[[0.3373], [0.531]]], 2,[[[0.8338, 0.2232, 0.2913, 0.111], [0.5575, 0.4199, 0.0681, 0.406]]],[[0, 0, 0, 0]], 1, Loc72218), 
LRes30293 = reshape_layer(Loc72218, [1, 4, 1], Res30293), 
LDep59876 = depthwise_conv2D_layer(Res30293, 1, 2,[[[[0.1184]], [[0.9306]]]],[0], 1, 1, true, Dep59876), 
LZer95080 = zero_padding2D_layer(Dep59876, 1, 0, 1, 0, Zer95080), 
LCon95009 = concatenate_layer([Zer95080,[[[[0.7378, 0.4912, 0.5345, 0.548, 0.3101], [0.3321, 0.8945, 0.4102, 0.6041, 0.3729], [0.5285, 0.0039, 0.7506, 0.6351, 0.1767], [0.2878, 0.7505, 0.057, 0.3115, 0.8068], [0.4016, 0.1942, 0.2712, 0.2586, 0.999]], [[0.8149, 0.536, 0.9911, 0.0719, 0.879], [0.0743, 0.1513, 0.7925, 0.9586, 0.7658], [0.6055, 0.7188, 0.6311, 0.1352, 0.5493], [0.2202, 0.7538, 0.0219, 0.9358, 0.2746], [0.8186, 0.353, 0.464, 0.3215, 0.7744]]]]], 3, Con95009), 
LAdd21494 = add_layer([Zer38466,Con95009], Add21494), 
LRes46473 = reshape_layer(Add21494, [2, 30], Res46473), 
LMin53765 = minimum_layer([[[[0.9259], [0.5295]]], [[[0.3809], [0.7457]]]], Min53765), 
LDen96099 = dense_layer(Min53765, [[0.1616, 0.2619, 0.8275, 0.2614]],[0.7969, 0.9089, 0.9505, 0.8735], Den96099), 
LCon74427 = concatenate_layer([Den96099,[[[0.0722, 0.4852, 0.2407, 0.3647, 0.2365, 0.8714, 0.8531, 0.8002, 0.3168, 0.8808, 0.5374, 0.1121, 0.3499, 0.7966, 0.9429, 0.0303, 0.873, 0.8383, 0.8668, 0.1225, 0.3303, 0.5704, 0.536, 0.335, 0.5826, 0.7534], [0.7344, 0.457, 0.7932, 0.7057, 0.9612, 0.6529, 0.7676, 0.9312, 0.1873, 0.5897, 0.0295, 0.1078, 0.0637, 0.2354, 0.5327, 0.5277, 0.626, 0.1023, 0.9274, 0.7352, 0.6395, 0.5647, 0.7263, 0.4173, 0.7338, 0.8949]]]], 2, Con74427), 
LMin30695 = minimum_layer([Res46473,Con74427], Min30695), 
exec_layers([LSub96770,LRes3775,LZer38466,LLoc72218,LRes30293,LDep59876,LZer95080,LCon95009,LAdd21494,LRes46473,LMin53765,LDen96099,LCon74427,LMin30695],["Sub96770","Res3775","Zer38466","Loc72218","Res30293","Dep59876","Zer95080","Con95009","Add21494","Res46473","Min53765","Den96099","Con74427","Min30695"],Min30695,"Min30695")

Actual (Unparsed): [[[0.0000000, 0.7378000, 0.4912000, 0.5345000, 0.0722000, 0.3101000, 0.0000000, 0.3321000, 0.2365000, 0.4102000, 0.6041000, 0.3729000, 0.2432000, 0.8808000, -0.3029000, 0.1121000, 0.1969000, -0.0972000, 0.4087000, 0.0303000, 0.5142000, 0.0444000, 0.5113000, 0.1225000, -0.0492000, 0.2341000, -0.0343000, 0.2419000, 0.1206000, 0.6151000], [0.0000000, 0.8149000, 0.5360000, 0.9911000, 0.0719000, 0.4570000, 0.3459027, 0.0743000, 0.1513000, 0.6529000, 0.7676000, 0.7658000, -0.1226988, 0.5897000, 0.0295000, 0.1078000, -0.2420000, 0.2354000, 0.2608812, -0.3009000, -0.0209000, 0.1023000, 0.2426000, 0.2925000, 0.2187583, 0.5647000, 0.4806000, 0.3655000, -0.0039000, 0.4148000]]]

Expected (Unparsed): [[[0,0.7378,0.4912,0.5345,0.0722,0.3101,0,0.3321,0.2365,0.4102,0.6041,0.3729,0.24320000000000003,0.8808,-0.30289999999999995,0.1121,0.19690000000000002,-0.09719999999999993,0.4087,0.0303,0.5142,0.0444,0.5113,0.1225,-0.04919999999999991,0.23410000000000003,-0.034300000000000025,0.24189999999999995,0.12059999999999998,0.6151],[0,0.8149,0.536,0.9911,0.0719,0.457,0.345902704772,0.0743,0.1513,0.6529,0.7676,0.7658,-0.12269885376200002,0.5897,0.0295,0.1078,-0.242,0.2354,0.2608811990360001,-0.3009,-0.02090000000000003,0.1023,0.24260000000000004,0.29250000000000004,0.21875831392000003,0.5647,0.48059999999999997,0.3655,-0.0039000000000000146,0.41479999999999995]]]

Actual:   [[[0, 0.7378, 0.4912, 0.5345, 0.0722, 0.3101, 0, 0.3321, 0.2365, 0.4102, 0.6041, 0.3729, 0.2432, 0.8808, -0.3029, 0.1121, 0.1969, -0.0972, 0.4087, 0.0303, 0.5142, 0.0444, 0.5113, 0.1225, -0.0492, 0.2341, -0.0343, 0.2419, 0.1206, 0.6151], [0, 0.8149, 0.536, 0.9911, 0.0719, 0.457, 0.346, 0.0743, 0.1513, 0.6529, 0.7676, 0.7658, -0.1226, 0.5897, 0.0295, 0.1078, -0.242, 0.2354, 0.2609, -0.3009, -0.0209, 0.1023, 0.2426, 0.2925, 0.2188, 0.5647, 0.4806, 0.3655, -0.0039, 0.4148]]]

Expected: [[[0, 0.7378, 0.4912, 0.5345, 0.0722, 0.3101, 0, 0.3321, 0.2365, 0.4102, 0.6041, 0.3729, 0.2433, 0.8808, -0.3028, 0.1121, 0.197, -0.0971, 0.4087, 0.0303, 0.5142, 0.0444, 0.5113, 0.1225, -0.0491, 0.2342, -0.0343, 0.2419, 0.1206, 0.6151], [0, 0.8149, 0.536, 0.9911, 0.0719, 0.457, 0.346, 0.0743, 0.1513, 0.6529, 0.7676, 0.7658, -0.1226, 0.5897, 0.0295, 0.1078, -0.242, 0.2354, 0.2609, -0.3009, -0.0209, 0.1023, 0.2427, 0.2926, 0.2188, 0.5647, 0.4806, 0.3655, -0.0039, 0.4148]]]