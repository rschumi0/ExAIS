import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con42589 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Glo34187 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))
in0Con97683 = tf.keras.layers.Input(shape=([3, 5, 3]))

Con42589 = keras.layers.Conv2DTranspose(4, (1, 1),strides=(1, 2), padding='same', name = 'Con42589', )(in0Con42589)
Zer20904 = keras.layers.ZeroPadding2D(padding=((2, 0), (1, 0)), name = 'Zer20904', )(Con42589)
Glo34187 = keras.layers.GlobalMaxPool3D(name = 'Glo34187', )(in0Glo34187)
Res9068 = keras.layers.Reshape((1, 1), name = 'Res9068', )(Glo34187)
Res38725 = keras.layers.Reshape((1, 1, 1), name = 'Res38725', )(Res9068)
Zer14783 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer14783', )(Res38725)
Zer27913 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer27913', )(Zer14783)
Con97683 = keras.layers.Concatenate(axis=3, name = 'Con97683', )([Zer27913,in0Con97683])
Mul10375 = keras.layers.Multiply(name = 'Mul10375', )([Zer20904,Con97683])
Res35693 = keras.layers.Reshape((3, 20), name = 'Res35693', )(Mul10375)
Ave67433 = keras.layers.AveragePooling1D(pool_size=(2), strides=(3), padding='same', name = 'Ave67433', )(Res35693)
model = tf.keras.models.Model(inputs=[in0Con42589,in0Glo34187,in0Con97683], outputs=Ave67433)
w = model.get_layer('Con42589').get_weights() 
w[0] = np.array([[[[0.173, 0.7831], [0.509, 0.6652], [0.1702, 0.8651], [0.9066, 0.3805]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con42589').set_weights(w) 
in0Con42589 = tf.constant([[[[0.4626, 0.5234], [0.4292, 0.3906]]]])
in0Glo34187 = tf.constant([[[[[1.0276]]]]])
in0Con97683 = tf.constant([[[[0.12, 0.4506, 0.2555], [0.8423, 0.7298, 0.7702], [0.6163, 0.3061, 0.3881], [0.4534, 0.2504, 0.0123], [0.4551, 0.3342, 0.5717]], [[0.8828, 0.1204, 0.6697], [0.3324, 0.1442, 0.3819], [0.7771, 0.0547, 0.2983], [0.0512, 0.6313, 0.571], [0.9591, 0.3393, 0.9044]], [[0.2026, 0.4691, 0.975], [0.5443, 0.5141, 0.4637], [0.4756, 0.1414, 0.7717], [0.8419, 0.1463, 0.0118], [0.1985, 0.9267, 0.6209]]]])
print (np.array2string(model.predict([in0Con42589,in0Glo34187,in0Con97683],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave67433.png')

LCon42589 = conv2D_transpose_layer([[[[0.4626, 0.5234], [0.4292, 0.3906]]]], 1, 1,[[[[0.173, 0.7831], [0.509, 0.6652], [0.1702, 0.8651], [0.9066, 0.3805]]]],[0, 0, 0, 0], 1, 2, true, Con42589), 
LZer20904 = zero_padding2D_layer(Con42589, 2, 0, 1, 0, Zer20904), 
LGlo34187 = global_max_pool3D_layer([[[[[1.0276]]]]], Glo34187), 
LRes9068 = reshape_layer(Glo34187, [1, 1], Res9068), 
LRes38725 = reshape_layer(Res9068, [1, 1, 1], Res38725), 
LZer14783 = zero_padding2D_layer(Res38725, 1, 1, 1, 1, Zer14783), 
LZer27913 = zero_padding2D_layer(Zer14783, 0, 0, 2, 0, Zer27913), 
LCon97683 = concatenate_layer([Zer27913,[[[[0.12, 0.4506, 0.2555], [0.8423, 0.7298, 0.7702], [0.6163, 0.3061, 0.3881], [0.4534, 0.2504, 0.0123], [0.4551, 0.3342, 0.5717]], [[0.8828, 0.1204, 0.6697], [0.3324, 0.1442, 0.3819], [0.7771, 0.0547, 0.2983], [0.0512, 0.6313, 0.571], [0.9591, 0.3393, 0.9044]], [[0.2026, 0.4691, 0.975], [0.5443, 0.5141, 0.4637], [0.4756, 0.1414, 0.7717], [0.8419, 0.1463, 0.0118], [0.1985, 0.9267, 0.6209]]]]], 3, Con97683), 
LMul10375 = multiply_layer([Zer20904,Con97683], Mul10375), 
LRes35693 = reshape_layer(Mul10375, [3, 20], Res35693), 
LAve67433 = average_pooling1D_layer(Res35693, 2, 3, true, Ave67433), 
exec_layers([LCon42589,LZer20904,LGlo34187,LRes9068,LRes38725,LZer14783,LZer27913,LCon97683,LMul10375,LRes35693,LAve67433],["Con42589","Zer20904","Glo34187","Res9068","Res38725","Zer14783","Zer27913","Con97683","Mul10375","Res35693","Ave67433"],Ave67433,"Ave67433")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0,0.0,0.0,0.0,0,0.0,0.0,0.0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0,0.0,0.0,0.0]]]

Actual:   [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]

Expected: [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]