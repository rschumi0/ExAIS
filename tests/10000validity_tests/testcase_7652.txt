import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub7530 = tf.keras.layers.Input(shape=([3, 2, 3, 2]))
in1Sub7530 = tf.keras.layers.Input(shape=([3, 2, 3, 2]))
in0Add92582 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in1Add92582 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in0Up_95246 = tf.keras.layers.Input(shape=([3, 2]))
in0Con90189 = tf.keras.layers.Input(shape=([3, 2]))
in0Con98338 = tf.keras.layers.Input(shape=([3, 8]))

Sub7530 = keras.layers.Subtract(name = 'Sub7530', )([in0Sub7530,in1Sub7530])
Res65327 = keras.layers.Reshape((3, 2, 6), name = 'Res65327', )(Sub7530)
Res64992 = keras.layers.Reshape((3, 12), name = 'Res64992', )(Res65327)
Add92582 = keras.layers.Add(name = 'Add92582', )([in0Add92582,in1Add92582])
Res27072 = keras.layers.Reshape((2, 1, 4), name = 'Res27072', )(Add92582)
Res33832 = keras.layers.Reshape((2, 4), name = 'Res33832', )(Res27072)
Zer62680 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer62680', )(Res33832)
Up_95246 = keras.layers.UpSampling1D(size=(1), name = 'Up_95246', )(in0Up_95246)
Con90189 = keras.layers.Concatenate(axis=2, name = 'Con90189', )([Up_95246,in0Con90189])
Min5337 = keras.layers.Minimum(name = 'Min5337', )([Zer62680,Con90189])
Lay2698 = keras.layers.LayerNormalization(axis=1, epsilon=1.8240402103875653, name = 'Lay2698', )(Min5337)
Con98338 = keras.layers.Concatenate(axis=2, name = 'Con98338', )([Lay2698,in0Con98338])
Mul17677 = keras.layers.Multiply(name = 'Mul17677', )([Res64992,Con98338])
model = tf.keras.models.Model(inputs=[in0Sub7530,in1Sub7530,in0Add92582,in1Add92582,in0Up_95246,in0Con90189,in0Con98338], outputs=Mul17677)
in0Sub7530 = tf.constant([[[[[0.0836, 0.8094], [0.9872, 0.2036], [0.9082, 0.0503]], [[0.9262, 0.8252], [0.2655, 0.7422], [0.0049, 0.7716]]], [[[0.0436, 0.0953], [0.5846, 0.6249], [0.9008, 0.5896]], [[0.4991, 0.0012], [0.7549, 0.7908], [0.2298, 0.2934]]], [[[0.8766, 0.4574], [0.1622, 0.044], [0.3718, 0.2367]], [[0.3897, 0.5282], [0.5571, 0.7207], [0.5891, 0.0571]]]]])
in1Sub7530 = tf.constant([[[[[0.3698, 0.2773], [0.9451, 0.1042], [0.4809, 0.863]], [[0.9688, 0.6063], [0.2314, 0.9731], [0.3238, 0.6895]]], [[[0.8522, 0.9936], [0.4505, 0.6349], [0.6896, 0.4802]], [[0.8633, 0.1119], [0.315, 0.3107], [0.4838, 0.5791]]], [[[0.467, 0.2287], [0.2674, 0.2825], [0.7475, 0.0327]], [[0.6859, 0.4636], [0.8728, 0.5476], [0.3325, 0.2328]]]]])
in0Add92582 = tf.constant([[[[[0.0662, 0.5643], [0.0338, 0.0578]]], [[[0.8733, 0.1283], [0.3699, 0.9735]]]]])
in1Add92582 = tf.constant([[[[[0.2769, 0.9194], [0.435, 0.4259]]], [[[0.4959, 0.9732], [0.9993, 0.1312]]]]])
in0Up_95246 = tf.constant([[[1.2615, 1.668], [1.9757, 1.4519], [1.6832, 1.7219]]])
in0Con90189 = tf.constant([[[0.6682, 0.3156], [0.8634, 0.4128], [0.3343, 0.5192]]])
in0Con98338 = tf.constant([[[0.8727, 0.7234, 0.622, 0.1007, 0.0281, 0.3851, 0.9108, 0.1601], [0.1457, 0.6921, 0.7262, 0.0634, 0.6885, 0.557, 0.0445, 0.556], [0.517, 0.4328, 0.6207, 0.1872, 0.3033, 0.2903, 0.5973, 0.5676]]])
print (np.array2string(model.predict([in0Sub7530,in1Sub7530,in0Add92582,in1Add92582,in0Up_95246,in0Con90189,in0Con98338],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul17677.png')

LSub7530 = subtract_layer([[[[[0.0836, 0.8094], [0.9872, 0.2036], [0.9082, 0.0503]], [[0.9262, 0.8252], [0.2655, 0.7422], [0.0049, 0.7716]]], [[[0.0436, 0.0953], [0.5846, 0.6249], [0.9008, 0.5896]], [[0.4991, 0.0012], [0.7549, 0.7908], [0.2298, 0.2934]]], [[[0.8766, 0.4574], [0.1622, 0.044], [0.3718, 0.2367]], [[0.3897, 0.5282], [0.5571, 0.7207], [0.5891, 0.0571]]]]], [[[[[0.3698, 0.2773], [0.9451, 0.1042], [0.4809, 0.863]], [[0.9688, 0.6063], [0.2314, 0.9731], [0.3238, 0.6895]]], [[[0.8522, 0.9936], [0.4505, 0.6349], [0.6896, 0.4802]], [[0.8633, 0.1119], [0.315, 0.3107], [0.4838, 0.5791]]], [[[0.467, 0.2287], [0.2674, 0.2825], [0.7475, 0.0327]], [[0.6859, 0.4636], [0.8728, 0.5476], [0.3325, 0.2328]]]]], Sub7530), 
LRes65327 = reshape_layer(Sub7530, [3, 2, 6], Res65327), 
LRes64992 = reshape_layer(Res65327, [3, 12], Res64992), 
LAdd92582 = add_layer([[[[[[0.0662, 0.5643], [0.0338, 0.0578]]], [[[0.8733, 0.1283], [0.3699, 0.9735]]]]], [[[[[0.2769, 0.9194], [0.435, 0.4259]]], [[[0.4959, 0.9732], [0.9993, 0.1312]]]]]], Add92582), 
LRes27072 = reshape_layer(Add92582, [2, 1, 4], Res27072), 
LRes33832 = reshape_layer(Res27072, [2, 4], Res33832), 
LZer62680 = zero_padding1D_layer(Res33832, 1, 0, Zer62680), 
LUp_95246 = up_sampling1D_layer([[[1.2615, 1.668], [1.9757, 1.4519], [1.6832, 1.7219]]], 1, Up_95246), 
LCon90189 = concatenate_layer([Up_95246,[[[0.6682, 0.3156], [0.8634, 0.4128], [0.3343, 0.5192]]]], 2, Con90189), 
LMin5337 = minimum_layer([Zer62680,Con90189], Min5337), 
LLay2698 = layer_normalization_layer(Min5337, 1, 1.8240402103875653, Lay2698), 
LCon98338 = concatenate_layer([Lay2698,[[[0.8727, 0.7234, 0.622, 0.1007, 0.0281, 0.3851, 0.9108, 0.1601], [0.1457, 0.6921, 0.7262, 0.0634, 0.6885, 0.557, 0.0445, 0.556], [0.517, 0.4328, 0.6207, 0.1872, 0.3033, 0.2903, 0.5973, 0.5676]]]], 2, Con98338), 
LMul17677 = multiply_layer([Res64992,Con98338], Mul17677), 
exec_layers([LSub7530,LRes65327,LRes64992,LAdd92582,LRes27072,LRes33832,LZer62680,LUp_95246,LCon90189,LMin5337,LLay2698,LCon98338,LMul17677],["Sub7530","Res65327","Res64992","Add92582","Res27072","Res33832","Zer62680","Up_95246","Con90189","Min5337","Lay2698","Con98338","Mul17677"],Mul17677,"Mul17677")

Actual (Unparsed): [[[0.1110860, -0.3048720, -0.0082573, -0.0225567, 0.3729047, -0.5879072, -0.0264972, 0.0220432, 0.0009582, -0.0889196, -0.2904541, 0.0131442], [0.1251885, -0.3632903, 0.0197582, -0.0007460, 0.0307718, 0.0757158, -0.2644821, -0.0070184, 0.3028711, 0.2674157, -0.0113030, -0.1588492], [0.2223975, 0.0385451, -0.0051333, -0.0363294, -0.1942369, 0.0882912, -0.1838513, 0.0120931, -0.0957518, 0.0502509, 0.1532672, -0.0997273]]]

Expected (Unparsed): [[[0.11108602872381468,-0.3048719609473013,-0.008257284020640075,-0.02255666749069021,0.37290471000000003,-0.58790718,-0.02649719999999998,0.022043230000000007,0.0009582100000000006,-0.08891958999999999,-0.29045412,0.013144209999999991],[0.12518848847325487,-0.36329034300112095,0.019758210337506167,-0.0007460387776387389,0.03077184000000001,0.07571574,-0.26448204,-0.007018379999999999,0.30287115000000003,0.26741570000000003,-0.011302999999999999,-0.1588492],[0.22239745728625698,0.03854511074436789,-0.005133300933303676,-0.036329361436310215,-0.19423690000000002,0.0882912,-0.18385133999999997,0.012093119999999999,-0.09575180999999999,0.050250930000000006,0.15326717999999998,-0.09972732000000001]]]

Actual:   [[[0.1111, -0.3048, -0.0082, -0.0225, 0.373, -0.5879, -0.0264, 0.0221, 0.001, -0.0889, -0.2904, 0.0132], [0.1252, -0.3632, 0.0198, -0.0007, 0.0308, 0.0758, -0.2644, -0.007, 0.3029, 0.2675, -0.0113, -0.1588], [0.2224, 0.0386, -0.0051, -0.0363, -0.1942, 0.0883, -0.1838, 0.0121, -0.0957, 0.0503, 0.1533, -0.0997]]]

Expected: [[[0.1111, -0.3048, -0.0082, -0.0225, 0.373, -0.5879, -0.0264, 0.0221, 0.001, -0.0889, -0.2904, 0.0132], [0.1252, -0.3632, 0.0198, -0.0007, 0.0308, 0.0758, -0.2644, -0.007, 0.3029, 0.2675, -0.0113, -0.1588], [0.2224, 0.0386, -0.0051, -0.0363, -0.1942, 0.0883, -0.1838, 0.0121, -0.0957, 0.0503, 0.1533, -0.0997]]]