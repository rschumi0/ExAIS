import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con29343 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con53198 = tf.keras.layers.Input(shape=([2, 6]))
in0Min43656 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Min43656 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Cro37680 = tf.keras.layers.Input(shape=([2, 1]))
in0Con59323 = tf.keras.layers.Input(shape=([2, 7]))

Con29343 = keras.layers.Conv2D(3, (1, 1),strides=(1, 1), padding='valid', dilation_rate=(1, 1), name = 'Con29343', )(in0Con29343)
Res31249 = keras.layers.Reshape((1, 3), name = 'Res31249', )(Con29343)
Sep79553 = keras.layers.SeparableConv1D(2, (1),strides=(1), padding='same', name = 'Sep79553', )(Res31249)
Zer87943 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer87943', )(Sep79553)
Con53198 = keras.layers.Concatenate(axis=2, name = 'Con53198', )([Zer87943,in0Con53198])
Min43656 = keras.layers.Minimum(name = 'Min43656', )([in0Min43656,in1Min43656])
Res36348 = keras.layers.Reshape((2, 2, 4), name = 'Res36348', )(Min43656)
Res78765 = keras.layers.Reshape((2, 8), name = 'Res78765', )(Res36348)
Cro37680 = keras.layers.Cropping1D(cropping=((0, 1)), name = 'Cro37680', )(in0Cro37680)
Zer61353 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer61353', )(Cro37680)
Con59323 = keras.layers.Concatenate(axis=2, name = 'Con59323', )([Zer61353,in0Con59323])
Mul11643 = keras.layers.Multiply(name = 'Mul11643', )([Res78765,Con59323])
Mul32550 = keras.layers.Multiply(name = 'Mul32550', )([Con53198,Mul11643])
model = tf.keras.models.Model(inputs=[in0Con29343,in0Con53198,in0Min43656,in1Min43656,in0Cro37680,in0Con59323], outputs=Mul32550)
w = model.get_layer('Con29343').get_weights() 
w[0] = np.array([[[[0.3301, 0.9198, 0.2374], [0.8792, 0.6682, 0.2878]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con29343').set_weights(w) 
w = model.get_layer('Sep79553').get_weights() 
w[0] = np.array([[[0.9796], [0.239], [0.3825]]])
w[1] = np.array([[[0.3374, 0.5711], [0.8226, 0.8915], [0.4105, 0.0322]]])
w[2] = np.array([0, 0])
model.get_layer('Sep79553').set_weights(w) 
in0Con29343 = tf.constant([[[[0.0463, 0.9782]]]])
in0Con53198 = tf.constant([[[0.5981, 0.2726, 0.4657, 0.7885, 0.1882, 0.3139], [0.1521, 0.2495, 0.5361, 0.2641, 0.3782, 0.2149]]])
in0Min43656 = tf.constant([[[[[0.5478, 0.1095], [0.5343, 0.0046]], [[0.8355, 0.9223], [0.3672, 0.4013]]], [[[0.7971, 0.9966], [0.1393, 0.0639]], [[0.2433, 0.1817], [0.5535, 0.9846]]]]])
in1Min43656 = tf.constant([[[[[0.5343, 0.439], [0.5105, 0.1504]], [[0.2004, 0.1965], [0.1757, 0.2318]]], [[[0.7426, 0.5389], [0.0809, 0.0915]], [[0.8205, 0.1473], [0.8731, 0.9861]]]]])
in0Cro37680 = tf.constant([[[1.2294], [1.0156]]])
in0Con59323 = tf.constant([[[0.2339, 0.9708, 0.805, 0.6692, 0.8162, 0.5904, 0.2046], [0.2224, 0.2862, 0.8977, 0.8791, 0.803, 0.5909, 0.1846]]])
print (np.array2string(model.predict([in0Con29343,in0Con53198,in0Min43656,in1Min43656,in0Cro37680,in0Con59323],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul32550.png')

LCon29343 = conv2D_layer([[[[0.0463, 0.9782]]]], 1, 1,[[[[0.3301, 0.9198, 0.2374], [0.8792, 0.6682, 0.2878]]]],[0, 0, 0], 1, 1, false, 1, 1, Con29343), 
LRes31249 = reshape_layer(Con29343, [1, 3], Res31249), 
LSep79553 = separable_conv1D_layer(Res31249, 1,[[[[0.9796], [0.239], [0.3825]]],[[[0.3374, 0.5711], [0.8226, 0.8915], [0.4105, 0.0322]]]],[0, 0], 1, true, Sep79553), 
LZer87943 = zero_padding1D_layer(Sep79553, 1, 0, Zer87943), 
LCon53198 = concatenate_layer([Zer87943,[[[0.5981, 0.2726, 0.4657, 0.7885, 0.1882, 0.3139], [0.1521, 0.2495, 0.5361, 0.2641, 0.3782, 0.2149]]]], 2, Con53198), 
LMin43656 = minimum_layer([[[[[[0.5478, 0.1095], [0.5343, 0.0046]], [[0.8355, 0.9223], [0.3672, 0.4013]]], [[[0.7971, 0.9966], [0.1393, 0.0639]], [[0.2433, 0.1817], [0.5535, 0.9846]]]]], [[[[[0.5343, 0.439], [0.5105, 0.1504]], [[0.2004, 0.1965], [0.1757, 0.2318]]], [[[0.7426, 0.5389], [0.0809, 0.0915]], [[0.8205, 0.1473], [0.8731, 0.9861]]]]]], Min43656), 
LRes36348 = reshape_layer(Min43656, [2, 2, 4], Res36348), 
LRes78765 = reshape_layer(Res36348, [2, 8], Res78765), 
LCro37680 = cropping1D_layer([[[1.2294], [1.0156]]], 0, 1, Cro37680), 
LZer61353 = zero_padding1D_layer(Cro37680, 1, 0, Zer61353), 
LCon59323 = concatenate_layer([Zer61353,[[[0.2339, 0.9708, 0.805, 0.6692, 0.8162, 0.5904, 0.2046], [0.2224, 0.2862, 0.8977, 0.8791, 0.803, 0.5909, 0.1846]]]], 2, Con59323), 
LMul11643 = multiply_layer([Res78765,Con59323], Mul11643), 
LMul32550 = multiply_layer([Con53198,Mul11643], Mul32550), 
exec_layers([LCon29343,LRes31249,LSep79553,LZer87943,LCon53198,LMin43656,LRes36348,LRes78765,LCro37680,LZer61353,LCon59323,LMul11643,LMul32550],["Con29343","Res31249","Sep79553","Zer87943","Con53198","Min43656","Res36348","Res78765","Cro37680","Zer61353","Con59323","Mul11643","Mul32550"],Mul32550,"Mul32550")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.2964144, 0.0010094, 0.0624539, 0.1264622, 0.0195226, 0.0148871], [0.4310186, 0.0769016, 0.0035217, 0.0143121, 0.1146638, 0.0312382, 0.1236953, 0.0390596]]]

Expected (Unparsed): [[[0.0,0.0,0.29641441253999995,0.0010094378,0.062453946576,0.12646223205,0.019522603296000002,0.014887109292000001],[0.431018580727308,0.07690155717905589,0.0035216595180000004,0.014312075985,0.114663764583,0.03123824979,0.12369528332999999,0.039059613684]]]

Actual:   [[[0, 0, 0.2965, 0.0011, 0.0625, 0.1265, 0.0196, 0.0149], [0.4311, 0.077, 0.0036, 0.0144, 0.1147, 0.0313, 0.1237, 0.0391]]]

Expected: [[[0, 0, 0.2965, 0.0011, 0.0625, 0.1265, 0.0196, 0.0149], [0.4311, 0.077, 0.0036, 0.0144, 0.1147, 0.0313, 0.1237, 0.0391]]]