import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo78793 = tf.keras.layers.Input(shape=([2, 1]))
in0Con44911 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Dot98855 = tf.keras.layers.Input(shape=([3]))
in1Dot98855 = tf.keras.layers.Input(shape=([3]))
in0Sub75611 = tf.keras.layers.Input(shape=([3]))
in1Sub75611 = tf.keras.layers.Input(shape=([3]))
in0Con34643 = tf.keras.layers.Input(shape=([5, 3, 2]))

Glo78793 = keras.layers.GlobalMaxPool1D(name = 'Glo78793', )(in0Glo78793)
Res67750 = keras.layers.Reshape((1, 1), name = 'Res67750', )(Glo78793)
Res26823 = keras.layers.Reshape((1, 1, 1), name = 'Res26823', )(Res67750)
Res47364 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res47364', )(Res26823)
Cro2023 = keras.layers.Cropping3D(cropping=((0, 0), (0, 0), (0, 0)), name = 'Cro2023', )(Res47364)
Res20031 = keras.layers.Reshape((1, 1, 1), name = 'Res20031', )(Cro2023)
Con44911 = keras.layers.Concatenate(axis=3, name = 'Con44911', )([Res20031,in0Con44911])
Dot98855 = keras.layers.Dot(axes=(1, 1), name = 'Dot98855', )([in0Dot98855,in1Dot98855])
Res50365 = keras.layers.Reshape((1, 1), name = 'Res50365', )(Dot98855)
Res65202 = keras.layers.Reshape((1, 1, 1), name = 'Res65202', )(Res50365)
Sep1286 = keras.layers.SeparableConv2D(3, (1, 1),strides=(1, 1), padding='valid', name = 'Sep1286', )(Res65202)
Sub63327 = keras.layers.Subtract(name = 'Sub63327', )([Con44911,Sep1286])
Zer35432 = keras.layers.ZeroPadding2D(padding=((4, 0), (2, 0)), name = 'Zer35432', )(Sub63327)
Sub75611 = keras.layers.Subtract(name = 'Sub75611', )([in0Sub75611,in1Sub75611])
Res42418 = keras.layers.Reshape((3, 1), name = 'Res42418', )(Sub75611)
Res6561 = keras.layers.Reshape((3, 1, 1), name = 'Res6561', )(Res42418)
Zer80030 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer80030', )(Res6561)
Con34643 = keras.layers.Concatenate(axis=3, name = 'Con34643', )([Zer80030,in0Con34643])
Max4056 = keras.layers.Maximum(name = 'Max4056', )([Zer35432,Con34643])
model = tf.keras.models.Model(inputs=[in0Glo78793,in0Con44911,in0Dot98855,in1Dot98855,in0Sub75611,in1Sub75611,in0Con34643], outputs=Max4056)
w = model.get_layer('Sep1286').get_weights() 
w[0] = np.array([[[[0.6356]]]])
w[1] = np.array([[[[0.1117, 0.6536, 0.1059]]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep1286').set_weights(w) 
in0Glo78793 = tf.constant([[[1.7524], [1.4869]]])
in0Con44911 = tf.constant([[[[0.687, 0.0917]]]])
in0Dot98855 = tf.constant([[0.2764, 0.8931, 0.6206]])
in1Dot98855 = tf.constant([[0.4743, 0.5272, 0.6538]])
in0Sub75611 = tf.constant([[0.3569, 0.168, 0.6476]])
in1Sub75611 = tf.constant([[0.256, 0.3093, 0.1044]])
in0Con34643 = tf.constant([[[[0.4435, 0.2813], [0.1831, 0.3478], [0.4206, 0.6891]], [[0.1431, 0.7218], [0.4098, 0.431], [0.7489, 0.6235]], [[0.1887, 0.3842], [0.4461, 0.8656], [0.669, 0.7353]], [[0.4631, 0.4466], [0.1008, 0.7813], [0.0955, 0.1484]], [[0.1316, 0.0025], [0.4883, 0.5419], [0.0148, 0.9461]]]])
print (np.array2string(model.predict([in0Glo78793,in0Con44911,in0Dot98855,in1Dot98855,in0Sub75611,in1Sub75611,in0Con34643],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max4056.png')

LGlo78793 = global_max_pool1D_layer([[[1.7524], [1.4869]]], Glo78793), 
LRes67750 = reshape_layer(Glo78793, [1, 1], Res67750), 
LRes26823 = reshape_layer(Res67750, [1, 1, 1], Res26823), 
LRes47364 = reshape_layer(Res26823, [1, 1, 1, 1], Res47364), 
LCro2023 = cropping3D_layer(Res47364, 0, 0, 0, 0, 0, 0, Cro2023), 
LRes20031 = reshape_layer(Cro2023, [1, 1, 1], Res20031), 
LCon44911 = concatenate_layer([Res20031,[[[[0.687, 0.0917]]]]], 3, Con44911), 
LDot98855 = dot_layer([[0.2764, 0.8931, 0.6206]], [[0.4743, 0.5272, 0.6538]], 1, 1, Dot98855), 
LRes50365 = reshape_layer(Dot98855, [1, 1], Res50365), 
LRes65202 = reshape_layer(Res50365, [1, 1, 1], Res65202), 
LSep1286 = separable_conv2D_layer(Res65202, 1, 1,[[[[[0.6356]]]],[[[[0.1117, 0.6536, 0.1059]]]]],[0, 0, 0], 1, 1, false, Sep1286), 
LSub63327 = subtract_layer(Con44911,Sep1286, Sub63327), 
LZer35432 = zero_padding2D_layer(Sub63327, 4, 0, 2, 0, Zer35432), 
LSub75611 = subtract_layer([[0.3569, 0.168, 0.6476]], [[0.256, 0.3093, 0.1044]], Sub75611), 
LRes42418 = reshape_layer(Sub75611, [3, 1], Res42418), 
LRes6561 = reshape_layer(Res42418, [3, 1, 1], Res6561), 
LZer80030 = zero_padding2D_layer(Res6561, 1, 1, 1, 1, Zer80030), 
LCon34643 = concatenate_layer([Zer80030,[[[[0.4435, 0.2813], [0.1831, 0.3478], [0.4206, 0.6891]], [[0.1431, 0.7218], [0.4098, 0.431], [0.7489, 0.6235]], [[0.1887, 0.3842], [0.4461, 0.8656], [0.669, 0.7353]], [[0.4631, 0.4466], [0.1008, 0.7813], [0.0955, 0.1484]], [[0.1316, 0.0025], [0.4883, 0.5419], [0.0148, 0.9461]]]]], 3, Con34643), 
LMax4056 = maximum_layer([Zer35432,Con34643], Max4056), 
exec_layers([LGlo78793,LRes67750,LRes26823,LRes47364,LCro2023,LRes20031,LCon44911,LDot98855,LRes50365,LRes65202,LSep1286,LSub63327,LZer35432,LSub75611,LRes42418,LRes6561,LZer80030,LCon34643,LMax4056],["Glo78793","Res67750","Res26823","Res47364","Cro2023","Res20031","Con44911","Dot98855","Res50365","Res65202","Sep1286","Sub63327","Zer35432","Sub75611","Res42418","Res6561","Zer80030","Con34643","Max4056"],Max4056,"Max4056")

Actual (Unparsed): [[[[0.0000000, 0.4435000, 0.2813000], [0.0000000, 0.1831000, 0.3478000], [0.0000000, 0.4206000, 0.6891000]], [[0.0000000, 0.1431000, 0.7218000], [0.1009000, 0.4098000, 0.4310000], [0.0000000, 0.7489000, 0.6235000]], [[0.0000000, 0.1887000, 0.3842000], [0.0000000, 0.4461000, 0.8656000], [0.0000000, 0.6690000, 0.7353000]], [[0.0000000, 0.4631000, 0.4466000], [0.5432000, 0.1008000, 0.7813000], [0.0000000, 0.0955000, 0.1484000]], [[0.0000000, 0.1316000, 0.0025000], [0.0000000, 0.4883000, 0.5419000], [1.6808578, 0.2683784, 0.9461000]]]]

Expected (Unparsed): [[[[0,0.4435,0.2813],[0,0.1831,0.3478],[0,0.4206,0.6891]],[[0,0.1431,0.7218],[0.10089999999999999,0.4098,0.431],[0,0.7489,0.6235]],[[0,0.1887,0.3842],[0,0.4461,0.8656],[0,0.669,0.7353]],[[0,0.4631,0.4466],[0.5431999999999999,0.1008,0.7813],[0,0.0955,0.1484]],[[0,0.1316,0.0025],[0,0.4883,0.5419],[1.6808577212311775,0.2683783938827009,0.9461]]]]

Actual:   [[[[0, 0.4435, 0.2813], [0, 0.1831, 0.3478], [0, 0.4206, 0.6891]], [[0, 0.1431, 0.7218], [0.1009, 0.4098, 0.431], [0, 0.7489, 0.6235]], [[0, 0.1887, 0.3842], [0, 0.4461, 0.8656], [0, 0.669, 0.7353]], [[0, 0.4631, 0.4466], [0.5432, 0.1008, 0.7813], [0, 0.0955, 0.1484]], [[0, 0.1316, 0.0025], [0, 0.4883, 0.5419], [1.6809, 0.2684, 0.9461]]]]

Expected: [[[[0, 0.4435, 0.2813], [0, 0.1831, 0.3478], [0, 0.4206, 0.6891]], [[0, 0.1431, 0.7218], [0.1009, 0.4098, 0.431], [0, 0.7489, 0.6235]], [[0, 0.1887, 0.3842], [0, 0.4461, 0.8656], [0, 0.669, 0.7353]], [[0, 0.4631, 0.4466], [0.5432, 0.1008, 0.7813], [0, 0.0955, 0.1484]], [[0, 0.1316, 0.0025], [0, 0.4883, 0.5419], [1.6809, 0.2684, 0.9461]]]]