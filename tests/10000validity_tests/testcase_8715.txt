import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add42273 = tf.keras.layers.Input(shape=([1, 1]))
in1Add42273 = tf.keras.layers.Input(shape=([1, 1]))
in0Den53276 = tf.keras.layers.Input(shape=([2, 5]))
in0Con72572 = tf.keras.layers.Input(shape=([4, 6, 3]))
in0Bat69868 = tf.keras.layers.Input(shape=([4, 2, 4]))

Add42273 = keras.layers.Add(name = 'Add42273', )([in0Add42273,in1Add42273])
Res55453 = keras.layers.Reshape((1, 1, 1), name = 'Res55453', )(Add42273)
Zer26126 = keras.layers.ZeroPadding2D(padding=((3, 0), (5, 0)), name = 'Zer26126', )(Res55453)
Den53276 = keras.layers.Dense(4,name = 'Den53276', )(in0Den53276)
Res49207 = keras.layers.Reshape((2, 4, 1), name = 'Res49207', )(Den53276)
Zer40196 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer40196', )(Res49207)
Add45635 = keras.layers.Add(name = 'Add45635', )([Zer26126,Zer40196])
Con72572 = keras.layers.Concatenate(axis=3, name = 'Con72572', )([Add45635,in0Con72572])
Bat69868 = keras.layers.BatchNormalization(axis=2, epsilon=0.8571615716448212,  name = 'Bat69868', )(in0Bat69868)
Zer39811 = keras.layers.ZeroPadding2D(padding=((0, 0), (4, 0)), name = 'Zer39811', )(Bat69868)
Mul87544 = keras.layers.Multiply(name = 'Mul87544', )([Con72572,Zer39811])
Max8216 = keras.layers.MaxPool2D(pool_size=(1, 1), strides=(1, 2), padding='valid', name = 'Max8216', )(Mul87544)
model = tf.keras.models.Model(inputs=[in0Add42273,in1Add42273,in0Den53276,in0Con72572,in0Bat69868], outputs=Max8216)
w = model.get_layer('Den53276').get_weights() 
w[0] = np.array([[0.3251, 0.7797, 0.0815, 0.738], [0.878, 0.3504, 0.4021, 0.6447], [0.2476, 0.4517, 0.7015, 0.3033], [0.9826, 0.1669, 0.321, 0.3016], [0.7198, 0.2384, 0.1518, 0.09]])
w[1] = np.array([0.1651, 0.5401, 0.7196, 0.9267])
model.get_layer('Den53276').set_weights(w) 
w = model.get_layer('Bat69868').get_weights() 
w[0] = np.array([0.6685, 0.1708])
w[1] = np.array([0.6352, 0.1315])
w[2] = np.array([0.0597, 0.0161])
w[3] = np.array([0.7657, 0.4827])
model.get_layer('Bat69868').set_weights(w) 
in0Add42273 = tf.constant([[[0.2106]]])
in1Add42273 = tf.constant([[[0.1673]]])
in0Den53276 = tf.constant([[[0.5144, 0.2674, 0.2221, 0.2812, 0.3544], [0.1207, 0.4682, 0.4722, 0.2019, 0.9714]]])
in0Con72572 = tf.constant([[[[0.2138, 0.8794, 0.3538], [0.8264, 0.6928, 0.3331], [0.075, 0.0813, 0.5348], [0.7062, 0.5996, 0.1412], [0.1311, 0.5621, 0.7212], [0.0148, 0.4952, 0.5924]], [[0.8012, 0.8855, 0.7987], [0.8579, 0.0955, 0.5005], [0.8362, 0.745, 0.6214], [0.5251, 0.2536, 0.3752], [0.0815, 0.0616, 0.9629], [0.9147, 0.0215, 0.4464]], [[0.1523, 0.6095, 0.9664], [0.5211, 0.6986, 0.3946], [0.753, 0.7985, 0.5865], [0.6143, 0.6574, 0.335], [0.154, 0.7275, 0.2013], [0.6659, 0.5897, 0.8744]], [[0.7136, 0.8576, 0.1348], [0.8274, 0.8221, 0.5892], [0.8654, 0.1657, 0.057], [0.1868, 0.765, 0.4731], [0.6553, 0.7061, 0.0368], [0.9841, 0.476, 0.4797]]]])
in0Bat69868 = tf.constant([[[[1.9384, 1.2402, 1.2638, 1.7791], [1.2919, 1.8316, 1.0408, 1.1489]], [[1.0358, 1.4833, 1.6779, 1.5176], [1.7094, 1.3598, 1.2393, 1.2241]], [[1.2214, 1.2241, 1.3197, 1.4939], [1.6188, 1.0194, 1.3625, 1.4536]], [[1.5998, 1.8352, 1.4187, 1.0423], [1.0293, 1.1804, 1.8514, 1.0878]]]])
print (np.array2string(model.predict([in0Add42273,in1Add42273,in0Den53276,in0Con72572,in0Bat69868],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max8216.png')

LAdd42273 = add_layer([[[[0.2106]]], [[[0.1673]]]], Add42273), 
LRes55453 = reshape_layer(Add42273, [1, 1, 1], Res55453), 
LZer26126 = zero_padding2D_layer(Res55453, 3, 0, 5, 0, Zer26126), 
LDen53276 = dense_layer([[[0.5144, 0.2674, 0.2221, 0.2812, 0.3544], [0.1207, 0.4682, 0.4722, 0.2019, 0.9714]]], [[0.3251, 0.7797, 0.0815, 0.738], [0.878, 0.3504, 0.4021, 0.6447], [0.2476, 0.4517, 0.7015, 0.3033], [0.9826, 0.1669, 0.321, 0.3016], [0.7198, 0.2384, 0.1518, 0.09]],[0.1651, 0.5401, 0.7196, 0.9267], Den53276), 
LRes49207 = reshape_layer(Den53276, [2, 4, 1], Res49207), 
LZer40196 = zero_padding2D_layer(Res49207, 1, 1, 1, 1, Zer40196), 
LAdd45635 = add_layer([Zer26126,Zer40196], Add45635), 
LCon72572 = concatenate_layer([Add45635,[[[[0.2138, 0.8794, 0.3538], [0.8264, 0.6928, 0.3331], [0.075, 0.0813, 0.5348], [0.7062, 0.5996, 0.1412], [0.1311, 0.5621, 0.7212], [0.0148, 0.4952, 0.5924]], [[0.8012, 0.8855, 0.7987], [0.8579, 0.0955, 0.5005], [0.8362, 0.745, 0.6214], [0.5251, 0.2536, 0.3752], [0.0815, 0.0616, 0.9629], [0.9147, 0.0215, 0.4464]], [[0.1523, 0.6095, 0.9664], [0.5211, 0.6986, 0.3946], [0.753, 0.7985, 0.5865], [0.6143, 0.6574, 0.335], [0.154, 0.7275, 0.2013], [0.6659, 0.5897, 0.8744]], [[0.7136, 0.8576, 0.1348], [0.8274, 0.8221, 0.5892], [0.8654, 0.1657, 0.057], [0.1868, 0.765, 0.4731], [0.6553, 0.7061, 0.0368], [0.9841, 0.476, 0.4797]]]]], 3, Con72572), 
LBat69868 = batch_normalization_layer([[[[1.9384, 1.2402, 1.2638, 1.7791], [1.2919, 1.8316, 1.0408, 1.1489]], [[1.0358, 1.4833, 1.6779, 1.5176], [1.7094, 1.3598, 1.2393, 1.2241]], [[1.2214, 1.2241, 1.3197, 1.4939], [1.6188, 1.0194, 1.3625, 1.4536]], [[1.5998, 1.8352, 1.4187, 1.0423], [1.0293, 1.1804, 1.8514, 1.0878]]]], 2, 0.8571615716448212, [0.6685, 0.1708], [0.6352, 0.1315], [0.0597, 0.0161], [0.7657, 0.4827], Bat69868), 
LZer39811 = zero_padding2D_layer(Bat69868, 0, 0, 4, 0, Zer39811), 
LMul87544 = multiply_layer([Con72572,Zer39811], Mul87544), 
LMax8216 = max_pool2D_layer(Mul87544, 1, 1, 1, 2, false, Max8216), 
exec_layers([LAdd42273,LRes55453,LZer26126,LDen53276,LRes49207,LZer40196,LAdd45635,LCon72572,LBat69868,LZer39811,LMul87544,LMax8216],["Add42273","Res55453","Zer26126","Den53276","Res49207","Zer40196","Add45635","Con72572","Bat69868","Zer39811","Mul87544","Max8216"],Max8216,"Max8216")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.1644884, 0.7122164, 1.1088249]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [1.9079141, 0.1126532, 0.0914370, 1.3482983]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [2.0031074, 0.1919195, 0.9431292, 0.2793663]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 1.0267970, 0.9520690, 0.0423505]]]]

Expected (Unparsed): [[[[0,0.0,0.0,0.0],[0,0.0,0.0,0.0],[0.0,0.16448843113478448,0.7122163613956203,1.1088249794707412]],[[0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[1.9079141279644716,0.11265323236456874,0.09143697850047888,1.3482983329607912]],[[0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[2.003107324867355,0.19191949292726115,0.9431291985425522,0.27936629496294146]],[[0,0.0,0.0,0.0],[0,0.0,0.0,0.0],[0.0,1.0267969569229922,0.9520690578686822,0.04235051148913452]]]]

Actual:   [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0.1645, 0.7123, 1.1089]], [[0, 0, 0, 0], [0, 0, 0, 0], [1.908, 0.1127, 0.0915, 1.3483]], [[0, 0, 0, 0], [0, 0, 0, 0], [2.0032, 0.192, 0.9432, 0.2794]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 1.0268, 0.9521, 0.0424]]]]

Expected: [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0.1645, 0.7123, 1.1089]], [[0, 0, 0, 0], [0, 0, 0, 0], [1.908, 0.1127, 0.0915, 1.3483]], [[0, 0, 0, 0], [0, 0, 0, 0], [2.0032, 0.192, 0.9432, 0.2794]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 1.0268, 0.9521, 0.0424]]]]