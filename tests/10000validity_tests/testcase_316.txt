import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul65777 = tf.keras.layers.Input(shape=([1, 2, 1]))
in1Mul65777 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con20839 = tf.keras.layers.Input(shape=([2, 2, 3, 2]))
in0Sub19271 = tf.keras.layers.Input(shape=([2, 2, 3, 3]))
in1Sub19271 = tf.keras.layers.Input(shape=([2, 2, 3, 3]))

Mul65777 = keras.layers.Multiply(name = 'Mul65777', )([in0Mul65777,in1Mul65777])
Res74311 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res74311', )(Mul65777)
Zer12476 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (2, 0)), name = 'Zer12476', )(Res74311)
Con20839 = keras.layers.Concatenate(axis=4, name = 'Con20839', )([Zer12476,in0Con20839])
Sub19271 = keras.layers.Subtract(name = 'Sub19271', )([in0Sub19271,in1Sub19271])
Max31093 = keras.layers.Maximum(name = 'Max31093', )([Con20839,Sub19271])
model = tf.keras.models.Model(inputs=[in0Mul65777,in1Mul65777,in0Con20839,in0Sub19271,in1Sub19271], outputs=Max31093)
in0Mul65777 = tf.constant([[[[0.1148], [0.1119]]]])
in1Mul65777 = tf.constant([[[[0.5009], [0.1288]]]])
in0Con20839 = tf.constant([[[[[0.5178, 0.3223], [0.1682, 0.1988], [0.5088, 0.4567]], [[0.9912, 0.4362], [0.6461, 0.23], [0.3787, 0.6374]]], [[[0.9731, 0.7301], [0.8893, 0.7611], [0.3478, 0.6078]], [[0.8846, 0.7925], [0.6394, 0.6333], [0.586, 0.5322]]]]])
in0Sub19271 = tf.constant([[[[[0.3694, 0.7793, 0.5832], [0.9726, 0.5151, 0.7101], [0.153, 0.56, 0.9548]], [[0.1327, 0.055, 0.1732], [0.2735, 0.463, 0.5088], [0.8105, 0.4565, 0.733]]], [[[0.5107, 0.1942, 0.0374], [0.8289, 0.6756, 0.315], [0.7095, 0.9794, 0.971]], [[0.8497, 0.8737, 0.3846], [0.5694, 0.1873, 0.4493], [0.4858, 0.2151, 0.8623]]]]])
in1Sub19271 = tf.constant([[[[[0.0233, 0.1331, 0.0937], [0.9074, 0.0807, 0.8332], [0.172, 0.0099, 0.6201]], [[0.3305, 0.3807, 0.3859], [0.9375, 0.0072, 0.806], [0.9702, 0.7374, 0.9773]]], [[[0.2711, 0.8594, 0.0189], [0.291, 0.2972, 0.9455], [0.3747, 0.3678, 0.4585]], [[0.3274, 0.4426, 0.6326], [0.5687, 0.3999, 0.2492], [0.342, 0.9736, 0.4849]]]]])
print (np.array2string(model.predict([in0Mul65777,in1Mul65777,in0Con20839,in0Sub19271,in1Sub19271],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max31093.png')

LMul65777 = multiply_layer([[[[[0.1148], [0.1119]]]], [[[[0.5009], [0.1288]]]]], Mul65777), 
LRes74311 = reshape_layer(Mul65777, [1, 2, 1, 1], Res74311), 
LZer12476 = zero_padding3D_layer(Res74311, 1, 0, 0, 0, 2, 0, Zer12476), 
LCon20839 = concatenate_layer([Zer12476,[[[[[0.5178, 0.3223], [0.1682, 0.1988], [0.5088, 0.4567]], [[0.9912, 0.4362], [0.6461, 0.23], [0.3787, 0.6374]]], [[[0.9731, 0.7301], [0.8893, 0.7611], [0.3478, 0.6078]], [[0.8846, 0.7925], [0.6394, 0.6333], [0.586, 0.5322]]]]]], 4, Con20839), 
LSub19271 = subtract_layer([[[[[0.3694, 0.7793, 0.5832], [0.9726, 0.5151, 0.7101], [0.153, 0.56, 0.9548]], [[0.1327, 0.055, 0.1732], [0.2735, 0.463, 0.5088], [0.8105, 0.4565, 0.733]]], [[[0.5107, 0.1942, 0.0374], [0.8289, 0.6756, 0.315], [0.7095, 0.9794, 0.971]], [[0.8497, 0.8737, 0.3846], [0.5694, 0.1873, 0.4493], [0.4858, 0.2151, 0.8623]]]]], [[[[[0.0233, 0.1331, 0.0937], [0.9074, 0.0807, 0.8332], [0.172, 0.0099, 0.6201]], [[0.3305, 0.3807, 0.3859], [0.9375, 0.0072, 0.806], [0.9702, 0.7374, 0.9773]]], [[[0.2711, 0.8594, 0.0189], [0.291, 0.2972, 0.9455], [0.3747, 0.3678, 0.4585]], [[0.3274, 0.4426, 0.6326], [0.5687, 0.3999, 0.2492], [0.342, 0.9736, 0.4849]]]]], Sub19271), 
LMax31093 = maximum_layer([Con20839,Sub19271], Max31093), 
exec_layers([LMul65777,LRes74311,LZer12476,LCon20839,LSub19271,LMax31093],["Mul65777","Res74311","Zer12476","Con20839","Sub19271","Max31093"],Max31093,"Max31093")

Actual (Unparsed): [[[[[0.3461000, 0.6462000, 0.4895000], [0.0652000, 0.4344000, 0.1988000], [0.0000000, 0.5501000, 0.4567000]], [[0.0000000, 0.9912000, 0.4362000], [0.0000000, 0.6461000, 0.2300000], [0.0000000, 0.3787000, 0.6374000]]], [[[0.2396000, 0.9731000, 0.7301000], [0.5379000, 0.8893000, 0.7611000], [0.3348000, 0.6116000, 0.6078000]], [[0.5223000, 0.8846000, 0.7925000], [0.0007000, 0.6394000, 0.6333000], [0.1438000, 0.5860000, 0.5322000]]]]]

Expected (Unparsed): [[[[[0.3461,0.6462,0.48950000000000005],[0.06520000000000004,0.4344,0.1988],[0,0.5501,0.4567]],[[0,0.9912,0.4362],[0,0.6461,0.23],[0,0.3787,0.6374]]],[[[0.23960000000000004,0.9731,0.7301],[0.5379,0.8893,0.7611],[0.33480000000000004,0.6116,0.6078]],[[0.5223,0.8846,0.7925],[0.0007000000000000339,0.6394,0.6333],[0.14379999999999998,0.586,0.5322]]]]]

Actual:   [[[[[0.3461, 0.6462, 0.4895], [0.0652, 0.4344, 0.1988], [0, 0.5501, 0.4567]], [[0, 0.9912, 0.4362], [0, 0.6461, 0.23], [0, 0.3787, 0.6374]]], [[[0.2396, 0.9731, 0.7301], [0.5379, 0.8893, 0.7611], [0.3348, 0.6116, 0.6078]], [[0.5223, 0.8846, 0.7925], [0.0007, 0.6394, 0.6333], [0.1438, 0.586, 0.5322]]]]]

Expected: [[[[[0.3461, 0.6462, 0.4896], [0.0653, 0.4344, 0.1988], [0, 0.5501, 0.4567]], [[0, 0.9912, 0.4362], [0, 0.6461, 0.23], [0, 0.3787, 0.6374]]], [[[0.2397, 0.9731, 0.7301], [0.5379, 0.8893, 0.7611], [0.3349, 0.6116, 0.6078]], [[0.5223, 0.8846, 0.7925], [0.0008, 0.6394, 0.6333], [0.1438, 0.586, 0.5322]]]]]