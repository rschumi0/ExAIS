import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul3801 = tf.keras.layers.Input(shape=([1, 1]))
in1Mul3801 = tf.keras.layers.Input(shape=([1, 1]))
in0Con26602 = tf.keras.layers.Input(shape=([1, 1]))
in0Max82235 = tf.keras.layers.Input(shape=([2, 2]))
in0Sim29455 = tf.keras.layers.Input(shape=([2, 2]))
in0ReL86382 = tf.keras.layers.Input(shape=([1, 1]))
in0Con10502 = tf.keras.layers.Input(shape=([1]))

Mul3801 = keras.layers.Multiply(name = 'Mul3801', )([in0Mul3801,in1Mul3801])
Con26602 = keras.layers.Concatenate(axis=2, name = 'Con26602', )([Mul3801,in0Con26602])
Max82235 = keras.layers.MaxPool1D(pool_size=(2), name = 'Max82235', )(in0Max82235)
Add2397 = keras.layers.Add(name = 'Add2397', )([Con26602,Max82235])
Fla29682 = keras.layers.Flatten(name = 'Fla29682', )(Add2397)
Sim29455 = keras.layers.SimpleRNN(1,name = 'Sim29455', )(in0Sim29455)
Fla42023 = keras.layers.Flatten(name = 'Fla42023', )(Sim29455)
ReL86382 = keras.layers.ReLU(max_value=7.073385348278096, negative_slope=5.460548860221011, threshold=2.257197921254257, name = 'ReL86382', input_shape=(1, 1))(in0ReL86382)
Glo1582 = keras.layers.GlobalMaxPool1D(name = 'Glo1582', )(ReL86382)
Add21260 = keras.layers.Add(name = 'Add21260', )([Fla42023,Glo1582])
Con10502 = keras.layers.Concatenate(axis=1, name = 'Con10502', )([Add21260,in0Con10502])
Min98342 = keras.layers.Minimum(name = 'Min98342', )([Fla29682,Con10502])
Res57269 = keras.layers.Reshape((2, 1), name = 'Res57269', )(Min98342)
Res7861 = keras.layers.Reshape((2, 1, 1), name = 'Res7861', )(Res57269)
Res43868 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res43868', )(Res7861)
Cro43058 = keras.layers.Cropping3D(cropping=((1, 0), (0, 0), (0, 0)), name = 'Cro43058', )(Res43868)
model = tf.keras.models.Model(inputs=[in0Mul3801,in1Mul3801,in0Con26602,in0Max82235,in0Sim29455,in0ReL86382,in0Con10502], outputs=Cro43058)
w = model.get_layer('Sim29455').get_weights() 
w[0] = np.array([[1], [7]])
w[1] = np.array([[1]])
w[2] = np.array([2])
model.get_layer('Sim29455').set_weights(w) 
in0Mul3801 = tf.constant([[[0.7618]]])
in1Mul3801 = tf.constant([[[0.265]]])
in0Con26602 = tf.constant([[[0.3759]]])
in0Max82235 = tf.constant([[[1.9585, 1.0083], [1.7342, 1.0713]]])
in0Sim29455 = tf.constant([[[4, 7], [2, 6]]])
in0ReL86382 = tf.constant([[[0.5311]]])
in0Con10502 = tf.constant([[0.8613]])
print (np.array2string(model.predict([in0Mul3801,in1Mul3801,in0Con26602,in0Max82235,in0Sim29455,in0ReL86382,in0Con10502],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Cro43058.png')

LMul3801 = multiply_layer([[[[0.7618]]], [[[0.265]]]], Mul3801), 
LCon26602 = concatenate_layer([Mul3801,[[[0.3759]]]], 2, Con26602), 
LMax82235 = max_pool1D_layer([[[1.9585, 1.0083], [1.7342, 1.0713]]], 2, Max82235), 
LAdd2397 = add_layer([Con26602,Max82235], Add2397), 
LFla29682 = flatten_layer(Add2397, Fla29682), 
LSim29455 = simple_rnn_layer([[[4, 7], [2, 6]]],[[1], [7]],[[1]],[2], Sim29455), 
LFla42023 = flatten_layer(Sim29455, Fla42023), 
LReL86382 = relu_layer([[[0.5311]]], 7.073385348278096, 5.460548860221011, 2.257197921254257, ReL86382), 
LGlo1582 = global_max_pool1D_layer(ReL86382, Glo1582), 
LAdd21260 = add_layer([Fla42023,Glo1582], Add21260), 
LCon10502 = concatenate_layer([Add21260,[[0.8613]]], 1, Con10502), 
LMin98342 = minimum_layer([Fla29682,Con10502], Min98342), 
LRes57269 = reshape_layer(Min98342, [2, 1], Res57269), 
LRes7861 = reshape_layer(Res57269, [2, 1, 1], Res7861), 
LRes43868 = reshape_layer(Res7861, [2, 1, 1, 1], Res43868), 
LCro43058 = cropping3D_layer(Res43868, 1, 0, 0, 0, 0, 0, Cro43058), 
exec_layers([LMul3801,LCon26602,LMax82235,LAdd2397,LFla29682,LSim29455,LFla42023,LReL86382,LGlo1582,LAdd21260,LCon10502,LMin98342,LRes57269,LRes7861,LRes43868,LCro43058],["Mul3801","Con26602","Max82235","Add2397","Fla29682","Sim29455","Fla42023","ReL86382","Glo1582","Add21260","Con10502","Min98342","Res57269","Res7861","Res43868","Cro43058"],Cro43058,"Cro43058")

Actual (Unparsed): [[[[[0.8613000]]]]]

Expected (Unparsed): [[[[[0.8613]]]]]

Actual:   [[[[[0.8613]]]]]

Expected: [[[[[0.8613]]]]]