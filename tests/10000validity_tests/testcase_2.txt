import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub50634 = tf.keras.layers.Input(shape=([2, 2, 3, 3]))
in1Sub50634 = tf.keras.layers.Input(shape=([2, 2, 3, 3]))
in0Min85907 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Min85907 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con58480 = tf.keras.layers.Input(shape=([2, 2, 8]))
in0Add44287 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Add44287 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con786 = tf.keras.layers.Input(shape=([2, 2, 8]))
in0Thr90378 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in0Con27444 = tf.keras.layers.Input(shape=([2, 2, 8]))

Sub50634 = keras.layers.Subtract(name = 'Sub50634', )([in0Sub50634,in1Sub50634])
ReL97839 = keras.layers.ReLU(max_value=9.624135091119971, negative_slope=0.7394767522929465, threshold=0.630470954210447, name = 'ReL97839', )(Sub50634)
Res53314 = keras.layers.Reshape((2, 2, 9), name = 'Res53314', )(ReL97839)
Min85907 = keras.layers.Minimum(name = 'Min85907', )([in0Min85907,in1Min85907])
Con58480 = keras.layers.Concatenate(axis=3, name = 'Con58480', )([Min85907,in0Con58480])
Max92914 = keras.layers.Maximum(name = 'Max92914', )([Res53314,Con58480])
Add44287 = keras.layers.Add(name = 'Add44287', )([in0Add44287,in1Add44287])
Dep90731 = keras.layers.DepthwiseConv2D((1, 2),strides=(1, 1), padding='same', name = 'Dep90731', )(Add44287)
Zer41543 = keras.layers.ZeroPadding2D(padding=((0, 0), (1, 0)), name = 'Zer41543', )(Dep90731)
Con786 = keras.layers.Concatenate(axis=3, name = 'Con786', )([Zer41543,in0Con786])
Max22441 = keras.layers.Maximum(name = 'Max22441', )([Max92914,Con786])
Thr90378 = keras.layers.ThresholdedReLU(theta=1.0146047420668725, name = 'Thr90378', input_shape=(2, 1, 2, 1))(in0Thr90378)
Sof21374 = keras.layers.Softmax(axis=1, name = 'Sof21374', )(Thr90378)
Res77413 = keras.layers.Reshape((2, 1, 2), name = 'Res77413', )(Sof21374)
Res84477 = keras.layers.Reshape((2, 2), name = 'Res84477', )(Res77413)
Res56913 = keras.layers.Reshape((2, 2, 1), name = 'Res56913', )(Res84477)
Cro91472 = keras.layers.Cropping2D(cropping=((1, 0), (1, 0)), name = 'Cro91472', )(Res56913)
Zer60850 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer60850', )(Cro91472)
Con27444 = keras.layers.Concatenate(axis=3, name = 'Con27444', )([Zer60850,in0Con27444])
Add87217 = keras.layers.Add(name = 'Add87217', )([Max22441,Con27444])
model = tf.keras.models.Model(inputs=[in0Sub50634,in1Sub50634,in0Min85907,in1Min85907,in0Con58480,in0Add44287,in1Add44287,in0Con786,in0Thr90378,in0Con27444], outputs=Add87217)
w = model.get_layer('Dep90731').get_weights() 
w[0] = np.array([[[[0.4899]], [[0.5552]]]])
w[1] = np.array([0])
model.get_layer('Dep90731').set_weights(w) 
in0Sub50634 = tf.constant([[[[[0.2833, 0.6341, 0.5874], [0.3255, 0.9818, 0.7202], [0.3016, 0.4709, 0.8767]], [[0.8123, 0.1851, 0.6342], [0.6926, 0.2885, 0.1359], [0.2435, 0.4372, 0.6699]]], [[[0.6233, 0.7208, 0.0868], [0.8489, 0.2128, 0.2082], [0.3638, 0.5082, 0.9377]], [[0.612, 0.2863, 0.479], [0.6988, 0.5176, 0.0545], [0.0876, 0.6467, 0.3385]]]]])
in1Sub50634 = tf.constant([[[[[0.7516, 0.1156, 0.8076], [0.6585, 0.2856, 0.8622], [0.0509, 0.1039, 0.9748]], [[0.9364, 0.8631, 0.2364], [0.1878, 0.8304, 0.2949], [0.8983, 0.4906, 0.0314]]], [[[0.8765, 0.1608, 0.8237], [0.4106, 0.2582, 0.5276], [0.3337, 0.8985, 0.8295]], [[0.326, 0.6204, 0.0021], [0.5899, 0.2843, 0.322], [0.5476, 0.1037, 0.1376]]]]])
in0Min85907 = tf.constant([[[[0.1607], [0.1432]], [[0.4564], [0.729]]]])
in1Min85907 = tf.constant([[[[0.795], [0.2509]], [[0.7491], [0.482]]]])
in0Con58480 = tf.constant([[[[0.4951, 0.1256, 0.6441, 0.4664, 0.7063, 0.3861, 0.3756, 0.6028], [0.8702, 0.1836, 0.9596, 0.6528, 0.8374, 0.5023, 0.8979, 0.7344]], [[0.5673, 0.8072, 0.1666, 0.4344, 0.5871, 0.7179, 0.1607, 0.4039], [0.1472, 0.9237, 0.4667, 0.789, 0.7263, 0.7947, 0.8567, 0.9793]]]])
in0Add44287 = tf.constant([[[[0.0877]], [[0.4234]]]])
in1Add44287 = tf.constant([[[[0.8159]], [[0.3083]]]])
in0Con786 = tf.constant([[[[0.0957, 0.4183, 0.0698, 0.4967, 0.0504, 0.1057, 0.9583, 0.6796], [0.0695, 0.9945, 0.5838, 0.5114, 0.8459, 0.8837, 0.703, 0.1345]], [[0.4831, 0.7023, 0.6813, 0.2735, 0.8716, 0.4557, 0.2401, 0.3081], [0.7162, 0.2021, 0.1218, 0.6297, 0.3362, 0.3595, 0.8875, 0.7333]]]])
in0Thr90378 = tf.constant([[[[[0.288], [0.7794]]], [[[0.051], [0.7586]]]]])
in0Con27444 = tf.constant([[[[0.3386, 0.4122, 0.798, 0.1647, 0.5924, 0.8719, 0.9946, 0.4829], [0.1758, 0.0556, 0.9493, 0.3325, 0.0655, 0.6127, 0.0856, 0.5456]], [[0.2472, 0.3098, 0.8993, 0.4437, 0.8094, 0.6365, 0.2559, 0.4776], [0.3877, 0.3186, 0.9563, 0.4559, 0.5636, 0.1408, 0.9008, 0.9435]]]])
print (np.array2string(model.predict([in0Sub50634,in1Sub50634,in0Min85907,in1Min85907,in0Con58480,in0Add44287,in1Add44287,in0Con786,in0Thr90378,in0Con27444],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add87217.png')

LSub50634 = subtract_layer([[[[[0.2833, 0.6341, 0.5874], [0.3255, 0.9818, 0.7202], [0.3016, 0.4709, 0.8767]], [[0.8123, 0.1851, 0.6342], [0.6926, 0.2885, 0.1359], [0.2435, 0.4372, 0.6699]]], [[[0.6233, 0.7208, 0.0868], [0.8489, 0.2128, 0.2082], [0.3638, 0.5082, 0.9377]], [[0.612, 0.2863, 0.479], [0.6988, 0.5176, 0.0545], [0.0876, 0.6467, 0.3385]]]]], [[[[[0.7516, 0.1156, 0.8076], [0.6585, 0.2856, 0.8622], [0.0509, 0.1039, 0.9748]], [[0.9364, 0.8631, 0.2364], [0.1878, 0.8304, 0.2949], [0.8983, 0.4906, 0.0314]]], [[[0.8765, 0.1608, 0.8237], [0.4106, 0.2582, 0.5276], [0.3337, 0.8985, 0.8295]], [[0.326, 0.6204, 0.0021], [0.5899, 0.2843, 0.322], [0.5476, 0.1037, 0.1376]]]]], Sub50634), 
LReL97839 = relu_layer(Sub50634, 9.624135091119971, 0.7394767522929465, 0.630470954210447, ReL97839), 
LRes53314 = reshape_layer(ReL97839, [2, 2, 9], Res53314), 
LMin85907 = minimum_layer([[[[[0.1607], [0.1432]], [[0.4564], [0.729]]]], [[[[0.795], [0.2509]], [[0.7491], [0.482]]]]], Min85907), 
LCon58480 = concatenate_layer([Min85907,[[[[0.4951, 0.1256, 0.6441, 0.4664, 0.7063, 0.3861, 0.3756, 0.6028], [0.8702, 0.1836, 0.9596, 0.6528, 0.8374, 0.5023, 0.8979, 0.7344]], [[0.5673, 0.8072, 0.1666, 0.4344, 0.5871, 0.7179, 0.1607, 0.4039], [0.1472, 0.9237, 0.4667, 0.789, 0.7263, 0.7947, 0.8567, 0.9793]]]]], 3, Con58480), 
LMax92914 = maximum_layer([Res53314,Con58480], Max92914), 
LAdd44287 = add_layer([[[[[0.0877]], [[0.4234]]]], [[[[0.8159]], [[0.3083]]]]], Add44287), 
LDep90731 = depthwise_conv2D_layer(Add44287, 1, 2,[[[[0.4899]], [[0.5552]]]],[0], 1, 1, true, Dep90731), 
LZer41543 = zero_padding2D_layer(Dep90731, 0, 0, 1, 0, Zer41543), 
LCon786 = concatenate_layer([Zer41543,[[[[0.0957, 0.4183, 0.0698, 0.4967, 0.0504, 0.1057, 0.9583, 0.6796], [0.0695, 0.9945, 0.5838, 0.5114, 0.8459, 0.8837, 0.703, 0.1345]], [[0.4831, 0.7023, 0.6813, 0.2735, 0.8716, 0.4557, 0.2401, 0.3081], [0.7162, 0.2021, 0.1218, 0.6297, 0.3362, 0.3595, 0.8875, 0.7333]]]]], 3, Con786), 
LMax22441 = maximum_layer([Max92914,Con786], Max22441), 
LThr90378 = thresholded_relu_layer([[[[[0.288], [0.7794]]], [[[0.051], [0.7586]]]]], 1.0146047420668725, Thr90378), 
LSof21374 = softmax_layer(Thr90378, 1, Sof21374), 
LRes77413 = reshape_layer(Sof21374, [2, 1, 2], Res77413), 
LRes84477 = reshape_layer(Res77413, [2, 2], Res84477), 
LRes56913 = reshape_layer(Res84477, [2, 2, 1], Res56913), 
LCro91472 = cropping2D_layer(Res56913, 1, 0, 1, 0, Cro91472), 
LZer60850 = zero_padding2D_layer(Cro91472, 1, 0, 1, 0, Zer60850), 
LCon27444 = concatenate_layer([Zer60850,[[[[0.3386, 0.4122, 0.798, 0.1647, 0.5924, 0.8719, 0.9946, 0.4829], [0.1758, 0.0556, 0.9493, 0.3325, 0.0655, 0.6127, 0.0856, 0.5456]], [[0.2472, 0.3098, 0.8993, 0.4437, 0.8094, 0.6365, 0.2559, 0.4776], [0.3877, 0.3186, 0.9563, 0.4559, 0.5636, 0.1408, 0.9008, 0.9435]]]]], 3, Con27444), 
LAdd87217 = add_layer([Max22441,Con27444], Add87217), 
exec_layers([LSub50634,LReL97839,LRes53314,LMin85907,LCon58480,LMax92914,LAdd44287,LDep90731,LZer41543,LCon786,LMax22441,LThr90378,LSof21374,LRes77413,LRes84477,LRes56913,LCro91472,LZer60850,LCon27444,LAdd87217],["Sub50634","ReL97839","Res53314","Min85907","Con58480","Max92914","Add44287","Dep90731","Zer41543","Con786","Max22441","Thr90378","Sof21374","Res77413","Res84477","Res56913","Cro91472","Zer60850","Con27444","Add87217"],Add87217,"Add87217")

Actual (Unparsed): [[[[0.1607000, 0.8337000, 0.8305000, 1.4421000, 0.8609000, 1.2987000, 1.2580000, 1.9529000, 1.1625000], [0.4426737, 1.0460000, 1.0501000, 1.9089000, 0.9853000, 0.9114000, 1.4964000, 0.9835000, 1.2800000]], [[0.4564000, 0.8145000, 1.1170000, 1.5806000, 0.8781000, 1.6810000, 1.3544000, 0.4960000, 0.8815000], [0.9820000, 1.1039000, 1.2423000, 1.4230000, 1.2449000, 1.2899000, 0.9355000, 1.7883000, 1.9228000]]]]

Expected (Unparsed): [[[[0.1607,0.8337,0.8305,1.4421,0.8609,1.2987000000000002,1.258,1.9529,1.1625],[0.44267364,1.046,1.0501,1.9089,0.9853000000000001,0.9114,1.4964,0.9835,1.28]],[[0.4564,0.8145,1.117,1.5806,0.8781,1.681,1.3544,0.496,0.8815],[0.982,1.1038999999999999,1.2423,1.423,1.2449000000000001,1.2898999999999998,0.9355,1.7883,1.9228]]]]

Actual:   [[[[0.1607, 0.8337, 0.8305, 1.4421, 0.8609, 1.2987, 1.258, 1.9529, 1.1625], [0.4427, 1.046, 1.0501, 1.9089, 0.9853, 0.9114, 1.4964, 0.9835, 1.28]], [[0.4564, 0.8145, 1.117, 1.5806, 0.8781, 1.681, 1.3544, 0.496, 0.8815], [0.982, 1.1039, 1.2423, 1.423, 1.2449, 1.2899, 0.9355, 1.7883, 1.9228]]]]

Expected: [[[[0.1607, 0.8337, 0.8305, 1.4421, 0.8609, 1.2988, 1.258, 1.9529, 1.1625], [0.4427, 1.046, 1.0501, 1.9089, 0.9854, 0.9114, 1.4964, 0.9835, 1.28]], [[0.4564, 0.8145, 1.117, 1.5806, 0.8781, 1.681, 1.3544, 0.496, 0.8815], [0.982, 1.1039, 1.2423, 1.423, 1.245, 1.2899, 0.9355, 1.7883, 1.9228]]]]