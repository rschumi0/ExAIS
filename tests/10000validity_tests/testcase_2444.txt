import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min62771 = tf.keras.layers.Input(shape=([1, 1]))
in1Min62771 = tf.keras.layers.Input(shape=([1, 1]))
in0Con77224 = tf.keras.layers.Input(shape=([1, 3]))
in0Glo41472 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Mul87033 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Mul87033 = tf.keras.layers.Input(shape=([2, 1, 2]))

Min62771 = keras.layers.Minimum(name = 'Min62771', )([in0Min62771,in1Min62771])
Con77224 = keras.layers.Concatenate(axis=2, name = 'Con77224', )([Min62771,in0Con77224])
Glo41472 = keras.layers.GlobalMaxPool2D(name = 'Glo41472', )(in0Glo41472)
Res72937 = keras.layers.Reshape((1, 1), name = 'Res72937', )(Glo41472)
Sep70249 = keras.layers.SeparableConv1D(4, (1),strides=(1), padding='valid', name = 'Sep70249', )(Res72937)
Min56258 = keras.layers.Minimum(name = 'Min56258', )([Con77224,Sep70249])
Mul87033 = keras.layers.Multiply(name = 'Mul87033', )([in0Mul87033,in1Mul87033])
Res59826 = keras.layers.Reshape((2, 2), name = 'Res59826', )(Mul87033)
Con81756 = keras.layers.Conv1D(3, (1),strides=(3), padding='same', dilation_rate=(1), name = 'Con81756', )(Res59826)
Dot52968 = keras.layers.Dot(axes=(1, 1), name = 'Dot52968', )([Min56258,Con81756])
model = tf.keras.models.Model(inputs=[in0Min62771,in1Min62771,in0Con77224,in0Glo41472,in0Mul87033,in1Mul87033], outputs=Dot52968)
w = model.get_layer('Sep70249').get_weights() 
w[0] = np.array([[[0.9866]]])
w[1] = np.array([[[0.6518, 0.3047, 0.0569, 0.936]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep70249').set_weights(w) 
w = model.get_layer('Con81756').get_weights() 
w[0] = np.array([[[0.1238, 0.7614, 0.9055], [0.1924, 0.7558, 0.4007]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con81756').set_weights(w) 
in0Min62771 = tf.constant([[[0.0432]]])
in1Min62771 = tf.constant([[[0.7808]]])
in0Con77224 = tf.constant([[[0.7463, 0.6357, 0.0771]]])
in0Glo41472 = tf.constant([[[[1.6162]]]])
in0Mul87033 = tf.constant([[[[0.3495, 0.8811]], [[0.1773, 0.3328]]]])
in1Mul87033 = tf.constant([[[[0.21, 0.1512]], [[0.9766, 0.8262]]]])
print (np.array2string(model.predict([in0Min62771,in1Min62771,in0Con77224,in0Glo41472,in0Mul87033,in1Mul87033],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Dot52968.png')

LMin62771 = minimum_layer([[[[0.0432]]], [[[0.7808]]]], Min62771), 
LCon77224 = concatenate_layer([Min62771,[[[0.7463, 0.6357, 0.0771]]]], 2, Con77224), 
LGlo41472 = global_max_pool2D_layer([[[[1.6162]]]], Glo41472), 
LRes72937 = reshape_layer(Glo41472, [1, 1], Res72937), 
LSep70249 = separable_conv1D_layer(Res72937, 1,[[[[0.9866]]],[[[0.6518, 0.3047, 0.0569, 0.936]]]],[0, 0, 0, 0], 1, false, Sep70249), 
LMin56258 = minimum_layer([Con77224,Sep70249], Min56258), 
LMul87033 = multiply_layer([[[[[0.3495, 0.8811]], [[0.1773, 0.3328]]]], [[[[0.21, 0.1512]], [[0.9766, 0.8262]]]]], Mul87033), 
LRes59826 = reshape_layer(Mul87033, [2, 2], Res59826), 
LCon81756 = conv1D_layer(Res59826, 1,[[[0.1238, 0.7614, 0.9055], [0.1924, 0.7558, 0.4007]]],[0, 0, 0], 3, true, 1, Con81756), 
LDot52968 = dot_layer(Min56258,Con81756, 1, 1, Dot52968), 
exec_layers([LMin62771,LCon77224,LGlo41472,LRes72937,LSep70249,LMin56258,LMul87033,LRes59826,LCon81756,LDot52968],["Min62771","Con77224","Glo41472","Res72937","Sep70249","Min56258","Mul87033","Res59826","Con81756","Dot52968"],Dot52968,"Dot52968")

Actual (Unparsed): [[[0.0014998, 0.0067639, 0.0051771], [0.0168681, 0.0760718, 0.0582258], [0.0031500, 0.0142057, 0.0108731], [0.0026768, 0.0120717, 0.0092398]]]

Expected (Unparsed): [[[0.0014998294958976,0.0067639269220992,0.005177146584556799],[0.01686812502165492,0.07607182367821402,0.058225789053091254],[0.003149971492393058,0.014205732744635307,0.01087314537945813],[0.0026767790308727998,0.0120717306873576,0.0092397685571604]]]

Actual:   [[[0.0015, 0.0068, 0.0052], [0.0169, 0.0761, 0.0583], [0.0032, 0.0143, 0.0109], [0.0027, 0.0121, 0.0093]]]

Expected: [[[0.0015, 0.0068, 0.0052], [0.0169, 0.0761, 0.0583], [0.0032, 0.0143, 0.0109], [0.0027, 0.0121, 0.0093]]]