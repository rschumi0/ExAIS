import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul72031 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Mul72031 = tf.keras.layers.Input(shape=([2, 1, 2]))

Mul72031 = keras.layers.Multiply(name = 'Mul72031', )([in0Mul72031,in1Mul72031])
Loc8459 = keras.layers.LocallyConnected2D(3, (2, 1),strides=(1, 1), name = 'Loc8459', )(Mul72031)
Res62824 = keras.layers.Reshape((1, 1, 3, 1), name = 'Res62824', )(Loc8459)
Zer54266 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer54266', )(Res62824)
model = tf.keras.models.Model(inputs=[in0Mul72031,in1Mul72031], outputs=Zer54266)
w = model.get_layer('Loc8459').get_weights() 
w[0] = np.array([[[0.2475, 0.4216, 0.9832], [0.3223, 0.0022, 0.0576], [0.9675, 0.9759, 0.7122], [0.0593, 0.3494, 0.4319]]])
w[1] = np.array([[[0, 0, 0]]])
model.get_layer('Loc8459').set_weights(w) 
in0Mul72031 = tf.constant([[[[0.2037, 0.9666]], [[0.8034, 0.2096]]]])
in1Mul72031 = tf.constant([[[[0.0794, 0.3283]], [[0.0367, 0.4656]]]])
print (np.array2string(model.predict([in0Mul72031,in1Mul72031],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Zer54266.png')

LMul72031 = multiply_layer([[[[[0.2037, 0.9666]], [[0.8034, 0.2096]]]], [[[[0.0794, 0.3283]], [[0.0367, 0.4656]]]]], Mul72031), 
LLoc8459 = locally_connected2D_layer(Mul72031, 2, 1,[[[0.2475, 0.4216, 0.9832], [0.3223, 0.0022, 0.0576], [0.9675, 0.9759, 0.7122], [0.0593, 0.3494, 0.4319]]],[[[0, 0, 0]]], 1, 1, Loc8459), 
LRes62824 = reshape_layer(Loc8459, [1, 1, 3, 1], Res62824), 
LZer54266 = zero_padding3D_layer(Res62824, 1, 1, 1, 1, 1, 1, Zer54266), 
exec_layers([LMul72031,LLoc8459,LRes62824,LZer54266],["Mul72031","Loc8459","Res62824","Zer54266"],Zer54266,"Zer54266")

Actual (Unparsed): [[[[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.1405936], [0.0703891], [0.0973286], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]]]]]

Expected (Unparsed): [[[[[0],[0],[0],[0],[0]],[[0],[0],[0],[0],[0]],[[0],[0],[0],[0],[0]]],[[[0],[0],[0],[0],[0]],[[0],[0.14059360756199998],[0.07038906111000001],[0.09732862148400001],[0]],[[0],[0],[0],[0],[0]]],[[[0],[0],[0],[0],[0]],[[0],[0],[0],[0],[0]],[[0],[0],[0],[0],[0]]]]]

Actual:   [[[[[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]]], [[[0], [0], [0], [0], [0]], [[0], [0.1406], [0.0704], [0.0974], [0]], [[0], [0], [0], [0], [0]]], [[[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]]]]]

Expected: [[[[[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]]], [[[0], [0], [0], [0], [0]], [[0], [0.1406], [0.0704], [0.0974], [0]], [[0], [0], [0], [0], [0]]], [[[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]]]]]