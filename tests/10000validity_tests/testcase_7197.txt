import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub82392 = tf.keras.layers.Input(shape=([2, 2]))
in1Sub82392 = tf.keras.layers.Input(shape=([2, 2]))
in0Con24298 = tf.keras.layers.Input(shape=([2, 2, 3, 3]))
in0Cro39767 = tf.keras.layers.Input(shape=([2, 1, 2, 4]))
in0Con19976 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con20489 = tf.keras.layers.Input(shape=([2, 2, 8]))
in0Sim63446 = tf.keras.layers.Input(shape=([2, 1]))
in0Con31515 = tf.keras.layers.Input(shape=([47]))

Sub82392 = keras.layers.Subtract(name = 'Sub82392', )([in0Sub82392,in1Sub82392])
Res20745 = keras.layers.Reshape((2, 2, 1), name = 'Res20745', )(Sub82392)
Res61756 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res61756', )(Res20745)
Zer37760 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer37760', )(Res61756)
Con24298 = keras.layers.Concatenate(axis=4, name = 'Con24298', )([Zer37760,in0Con24298])
Cro39767 = keras.layers.Cropping3D(cropping=((1, 0), (0, 0), (1, 0)), name = 'Cro39767', )(in0Cro39767)
Up_49289 = keras.layers.UpSampling3D(size=(2, 1, 2), name = 'Up_49289', )(Cro39767)
Zer90602 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (1, 0)), name = 'Zer90602', )(Up_49289)
Add28011 = keras.layers.Add(name = 'Add28011', )([Con24298,Zer90602])
Res10340 = keras.layers.Reshape((2, 2, 12), name = 'Res10340', )(Add28011)
Con19976 = keras.layers.Conv2DTranspose(3, (1, 2),strides=(1, 1), padding='same', name = 'Con19976', )(in0Con19976)
Sep93060 = keras.layers.SeparableConv2D(4, (2, 1),strides=(2, 2), padding='valid', name = 'Sep93060', )(Con19976)
Zer32804 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer32804', )(Sep93060)
Con20489 = keras.layers.Concatenate(axis=3, name = 'Con20489', )([Zer32804,in0Con20489])
Min59228 = keras.layers.Minimum(name = 'Min59228', )([Res10340,Con20489])
Res90626 = keras.layers.Reshape((2, 24), name = 'Res90626', )(Min59228)
Fla86983 = keras.layers.Flatten(name = 'Fla86983', )(Res90626)
Sim63446 = keras.layers.SimpleRNN(1,name = 'Sim63446', )(in0Sim63446)
Fla37328 = keras.layers.Flatten(name = 'Fla37328', )(Sim63446)
Con31515 = keras.layers.Concatenate(axis=1, name = 'Con31515', )([Fla37328,in0Con31515])
Min19837 = keras.layers.Minimum(name = 'Min19837', )([Fla86983,Con31515])
model = tf.keras.models.Model(inputs=[in0Sub82392,in1Sub82392,in0Con24298,in0Cro39767,in0Con19976,in0Con20489,in0Sim63446,in0Con31515], outputs=Min19837)
w = model.get_layer('Con19976').get_weights() 
w[0] = np.array([[[[0.1256, 0.8077], [0.3739, 0.5526], [0.5354, 0.9613]], [[0.2248, 0.5748], [0.8284, 0.8855], [0.3857, 0.0131]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con19976').set_weights(w) 
w = model.get_layer('Sep93060').get_weights() 
w[0] = np.array([[[[0.672], [0.9801], [0.9639]]], [[[0.708], [0.7271], [0.9299]]]])
w[1] = np.array([[[[0.7342, 0.5599, 0.5878, 0.0152], [0.0139, 0.5171, 0.1156, 0.948], [0.7805, 0.6337, 0.2324, 0.6795]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep93060').set_weights(w) 
w = model.get_layer('Sim63446').get_weights() 
w[0] = np.array([[10]])
w[1] = np.array([[8]])
w[2] = np.array([3])
model.get_layer('Sim63446').set_weights(w) 
in0Sub82392 = tf.constant([[[0.3459, 0.7878], [0.5891, 0.8564]]])
in1Sub82392 = tf.constant([[[0.3592, 0.1325], [0.9747, 0.1168]]])
in0Con24298 = tf.constant([[[[[0.6638, 0.2898, 0.4705], [0.6591, 0.9148, 0.7428], [0.8738, 0.4281, 0.9276]], [[0.0048, 0.3005, 0.8776], [0.573, 0.9893, 0.8884], [0.632, 0.3239, 0.7425]]], [[[0.6186, 0.0618, 0.4527], [0.4249, 0.1265, 0.599], [0.4857, 0.2924, 0.7317]], [[0.3884, 0.8157, 0.9489], [0.1739, 0.7825, 0.8731], [0.2465, 0.8163, 0.6798]]]]])
in0Cro39767 = tf.constant([[[[[1.709, 1.9195, 1.9189, 1.8143], [1.5974, 1.0942, 1.2362, 1.2443]]], [[[1.5105, 1.1844, 1.0411, 1.0867], [1.3033, 1.3202, 1.5389, 1.7645]]]]])
in0Con19976 = tf.constant([[[[0.3909, 0.7381], [0.484, 0.3684]], [[0.5812, 0.4602], [0.4651, 0.9749]]]])
in0Con20489 = tf.constant([[[[0.0204, 0.4811, 0.4804, 0.5742, 0.4255, 0.4633, 0.5466, 0.9956], [0.3314, 0.3086, 0.8606, 0.8713, 0.5166, 0.4625, 0.0214, 0.6023]], [[0.3888, 0.983, 0.8259, 0.8471, 0.614, 0.3554, 0.9626, 0.8619], [0.5648, 0.7459, 0.5326, 0.4169, 0.8956, 0.1777, 0.3868, 0.4419]]]])
in0Sim63446 = tf.constant([[[10], [3]]])
in0Con31515 = tf.constant([[0.5163, 0.9856, 0.211, 0.9138, 0.8343, 0.8807, 0.1899, 0.0688, 0.6694, 0.3595, 0.9165, 0.7698, 0.8514, 0.2136, 0.0239, 0.4249, 0.5699, 0.7853, 0.5231, 0.6299, 0.7341, 0.4369, 0.7627, 0.0334, 0.3609, 0.541, 0.279, 0.5474, 0.2971, 0.8024, 0.4971, 0.3044, 0.6776, 0.7547, 0.5346, 0.1273, 0.2651, 0.2205, 0.8142, 0.0462, 0.2218, 0.3708, 0.7925, 0.5776, 0.9222, 0.7746, 0.8809]])
print (np.array2string(model.predict([in0Sub82392,in1Sub82392,in0Con24298,in0Cro39767,in0Con19976,in0Con20489,in0Sim63446,in0Con31515],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min19837.png')

LSub82392 = subtract_layer([[[0.3459, 0.7878], [0.5891, 0.8564]]], [[[0.3592, 0.1325], [0.9747, 0.1168]]], Sub82392), 
LRes20745 = reshape_layer(Sub82392, [2, 2, 1], Res20745), 
LRes61756 = reshape_layer(Res20745, [2, 2, 1, 1], Res61756), 
LZer37760 = zero_padding3D_layer(Res61756, 0, 0, 0, 0, 2, 0, Zer37760), 
LCon24298 = concatenate_layer([Zer37760,[[[[[0.6638, 0.2898, 0.4705], [0.6591, 0.9148, 0.7428], [0.8738, 0.4281, 0.9276]], [[0.0048, 0.3005, 0.8776], [0.573, 0.9893, 0.8884], [0.632, 0.3239, 0.7425]]], [[[0.6186, 0.0618, 0.4527], [0.4249, 0.1265, 0.599], [0.4857, 0.2924, 0.7317]], [[0.3884, 0.8157, 0.9489], [0.1739, 0.7825, 0.8731], [0.2465, 0.8163, 0.6798]]]]]], 4, Con24298), 
LCro39767 = cropping3D_layer([[[[[1.709, 1.9195, 1.9189, 1.8143], [1.5974, 1.0942, 1.2362, 1.2443]]], [[[1.5105, 1.1844, 1.0411, 1.0867], [1.3033, 1.3202, 1.5389, 1.7645]]]]], 1, 0, 0, 0, 1, 0, Cro39767), 
LUp_49289 = up_sampling3D_layer(Cro39767, 2, 1, 2, Up_49289), 
LZer90602 = zero_padding3D_layer(Up_49289, 0, 0, 1, 0, 1, 0, Zer90602), 
LAdd28011 = add_layer([Con24298,Zer90602], Add28011), 
LRes10340 = reshape_layer(Add28011, [2, 2, 12], Res10340), 
LCon19976 = conv2D_transpose_layer([[[[0.3909, 0.7381], [0.484, 0.3684]], [[0.5812, 0.4602], [0.4651, 0.9749]]]], 1, 2,[[[[0.1256, 0.8077], [0.3739, 0.5526], [0.5354, 0.9613]], [[0.2248, 0.5748], [0.8284, 0.8855], [0.3857, 0.0131]]]],[0, 0, 0], 1, 1, true, Con19976), 
LSep93060 = separable_conv2D_layer(Con19976, 2, 1,[[[[[0.672], [0.9801], [0.9639]]], [[[0.708], [0.7271], [0.9299]]]],[[[[0.7342, 0.5599, 0.5878, 0.0152], [0.0139, 0.5171, 0.1156, 0.948], [0.7805, 0.6337, 0.2324, 0.6795]]]]],[0, 0, 0, 0], 2, 2, false, Sep93060), 
LZer32804 = zero_padding2D_layer(Sep93060, 1, 0, 1, 0, Zer32804), 
LCon20489 = concatenate_layer([Zer32804,[[[[0.0204, 0.4811, 0.4804, 0.5742, 0.4255, 0.4633, 0.5466, 0.9956], [0.3314, 0.3086, 0.8606, 0.8713, 0.5166, 0.4625, 0.0214, 0.6023]], [[0.3888, 0.983, 0.8259, 0.8471, 0.614, 0.3554, 0.9626, 0.8619], [0.5648, 0.7459, 0.5326, 0.4169, 0.8956, 0.1777, 0.3868, 0.4419]]]]], 3, Con20489), 
LMin59228 = minimum_layer([Res10340,Con20489], Min59228), 
LRes90626 = reshape_layer(Min59228, [2, 24], Res90626), 
LFla86983 = flatten_layer(Res90626, Fla86983), 
LSim63446 = simple_rnn_layer([[[10], [3]]],[[10]],[[8]],[3], Sim63446), 
LFla37328 = flatten_layer(Sim63446, Fla37328), 
LCon31515 = concatenate_layer([Fla37328,[[0.5163, 0.9856, 0.211, 0.9138, 0.8343, 0.8807, 0.1899, 0.0688, 0.6694, 0.3595, 0.9165, 0.7698, 0.8514, 0.2136, 0.0239, 0.4249, 0.5699, 0.7853, 0.5231, 0.6299, 0.7341, 0.4369, 0.7627, 0.0334, 0.3609, 0.541, 0.279, 0.5474, 0.2971, 0.8024, 0.4971, 0.3044, 0.6776, 0.7547, 0.5346, 0.1273, 0.2651, 0.2205, 0.8142, 0.0462, 0.2218, 0.3708, 0.7925, 0.5776, 0.9222, 0.7746, 0.8809]]], 1, Con31515), 
LMin19837 = minimum_layer([Fla86983,Con31515], Min19837), 
exec_layers([LSub82392,LRes20745,LRes61756,LZer37760,LCon24298,LCro39767,LUp_49289,LZer90602,LAdd28011,LRes10340,LCon19976,LSep93060,LZer32804,LCon20489,LMin59228,LRes90626,LFla86983,LSim63446,LFla37328,LCon31515,LMin19837],["Sub82392","Res20745","Res61756","Zer37760","Con24298","Cro39767","Up_49289","Zer90602","Add28011","Res10340","Con19976","Sep93060","Zer32804","Con20489","Min59228","Res90626","Fla86983","Sim63446","Fla37328","Con31515","Min19837"],Min19837,"Min19837")

Actual (Unparsed): [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.4811000, 0.4804000, 0.1899000, -0.0133000, 0.4633000, 0.3595000, 0.9165000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.3314000, 0.3086000, 0.7853000, 0.5231000, 0.5166000, 0.4625000, 0.0214000, 0.6023000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.2971000, 0.1265000, 0.4971000, -0.3856000, 0.3554000, 0.2924000, 0.5346000, 0.0000000, 0.2651000, 0.2205000, 0.8142000, 0.0462000, 0.2218000, 0.3708000, 0.4169000, 0.5776000, 0.1777000, 0.3868000, 0.4419000]]

Expected (Unparsed): [[0,0,0,0,0,0.4811,0.4804,0.1899,-0.013300000000000034,0.4633,0.3595,0.9165,0,0,0,0,0.3314,0.3086,0.7853,0.5231,0.5166,0.4625,0.0214,0.6023,0,0,0,0,0,0.2971,0.1265,0.4971,-0.38560000000000005,0.3554,0.2924,0.5346,0,0.2651,0.2205,0.8142,0.0462,0.2218,0.3708,0.4169,0.5776,0.1777,0.3868,0.4419]]

Actual:   [[0, 0, 0, 0, 0, 0.4811, 0.4804, 0.1899, -0.0133, 0.4633, 0.3595, 0.9165, 0, 0, 0, 0, 0.3314, 0.3086, 0.7853, 0.5231, 0.5166, 0.4625, 0.0214, 0.6023, 0, 0, 0, 0, 0, 0.2971, 0.1265, 0.4971, -0.3856, 0.3554, 0.2924, 0.5346, 0, 0.2651, 0.2205, 0.8142, 0.0462, 0.2218, 0.3708, 0.4169, 0.5776, 0.1777, 0.3868, 0.4419]]

Expected: [[0, 0, 0, 0, 0, 0.4811, 0.4804, 0.1899, -0.0133, 0.4633, 0.3595, 0.9165, 0, 0, 0, 0, 0.3314, 0.3086, 0.7853, 0.5231, 0.5166, 0.4625, 0.0214, 0.6023, 0, 0, 0, 0, 0, 0.2971, 0.1265, 0.4971, -0.3856, 0.3554, 0.2924, 0.5346, 0, 0.2651, 0.2205, 0.8142, 0.0462, 0.2218, 0.3708, 0.4169, 0.5776, 0.1777, 0.3868, 0.4419]]