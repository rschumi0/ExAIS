import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro42464 = tf.keras.layers.Input(shape=([4, 4, 1]))
in0Con59153 = tf.keras.layers.Input(shape=([12]))
in0Con56303 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))
in0Dot37806 = tf.keras.layers.Input(shape=([2]))
in1Dot37806 = tf.keras.layers.Input(shape=([2]))
in0Con58571 = tf.keras.layers.Input(shape=([15]))

Cro42464 = keras.layers.Cropping2D(cropping=((0, 0), (2, 1)), name = 'Cro42464', )(in0Cro42464)
Lay63928 = keras.layers.LayerNormalization(axis=1, epsilon=2.6150921854633107, name = 'Lay63928', )(Cro42464)
Res98910 = keras.layers.Reshape((4, 1), name = 'Res98910', )(Lay63928)
Fla96930 = keras.layers.Flatten(name = 'Fla96930', )(Res98910)
Con59153 = keras.layers.Concatenate(axis=1, name = 'Con59153', )([Fla96930,in0Con59153])
Con56303 = keras.layers.Conv3DTranspose(2, (1, 2, 2),strides=(1, 2, 1), padding='same', name = 'Con56303', )(in0Con56303)
Res5862 = keras.layers.Reshape((1, 4, 4), name = 'Res5862', )(Con56303)
Res83817 = keras.layers.Reshape((1, 16), name = 'Res83817', )(Res5862)
Fla4250 = keras.layers.Flatten(name = 'Fla4250', )(Res83817)
Dot37806 = keras.layers.Dot(axes=(1, 1), name = 'Dot37806', )([in0Dot37806,in1Dot37806])
Con58571 = keras.layers.Concatenate(axis=1, name = 'Con58571', )([Dot37806,in0Con58571])
Min32900 = keras.layers.Minimum(name = 'Min32900', )([Fla4250,Con58571])
Add66301 = keras.layers.Add(name = 'Add66301', )([Con59153,Min32900])
Res42411 = keras.layers.Reshape((16, 1), name = 'Res42411', )(Add66301)
Res14145 = keras.layers.Reshape((16, 1, 1), name = 'Res14145', )(Res42411)
Res99586 = keras.layers.Reshape((16, 1, 1, 1), name = 'Res99586', )(Res14145)
Con2582 = keras.layers.Conv3DTranspose(3, (4, 1, 1),strides=(1, 1, 1), padding='valid', name = 'Con2582', )(Res99586)
model = tf.keras.models.Model(inputs=[in0Cro42464,in0Con59153,in0Con56303,in0Dot37806,in1Dot37806,in0Con58571], outputs=Con2582)
w = model.get_layer('Con56303').get_weights() 
w[0] = np.array([[[[[0.5277, 0.3618], [0.2455, 0.4879]], [[0.7779, 0.6084], [0.0156, 0.4708]]], [[[0.7987, 0.5558], [0.1865, 0.8135]], [[0.7111, 0.9803], [0.8078, 0.5102]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con56303').set_weights(w) 
w = model.get_layer('Con2582').get_weights() 
w[0] = np.array([[[[[0.9729], [0.5109], [0.7967]]]], [[[[0.2092], [0.8161], [0.8871]]]], [[[[0.268], [0.6358], [0.8608]]]], [[[[0.3061], [0.8992], [0.9384]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con2582').set_weights(w) 
in0Cro42464 = tf.constant([[[[1.3925], [1.897], [1.7951], [1.8914]], [[1.3804], [1.5327], [1.6099], [1.5747]], [[1.8845], [1.3535], [1.9968], [1.8032]], [[1.0696], [1.3402], [1.3958], [1.955]]]])
in0Con59153 = tf.constant([[0.9837, 0.3946, 0.4156, 0.7141, 0.2218, 0.6232, 0.1191, 0.8337, 0.8055, 0.1455, 0.9069, 0.9297]])
in0Con56303 = tf.constant([[[[[0.6455, 0.4865], [0.7122, 0.9934]], [[0.0737, 0.8487], [0.1734, 0.4717]]]]])
in0Dot37806 = tf.constant([[0.6587, 0.8537]])
in1Dot37806 = tf.constant([[0.7493, 0.4403]])
in0Con58571 = tf.constant([[0.4142, 0.4295, 0.5866, 0.5216, 0.4845, 0.1331, 0.3275, 0.6229, 0.2807, 0.5298, 0.475, 0.5512, 0.7187, 0.1938, 0.2005]])
print (np.array2string(model.predict([in0Cro42464,in0Con59153,in0Con56303,in0Dot37806,in1Dot37806,in0Con58571],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con2582.png')

LCro42464 = cropping2D_layer([[[[1.3925], [1.897], [1.7951], [1.8914]], [[1.3804], [1.5327], [1.6099], [1.5747]], [[1.8845], [1.3535], [1.9968], [1.8032]], [[1.0696], [1.3402], [1.3958], [1.955]]]], 0, 0, 2, 1, Cro42464), 
LLay63928 = layer_normalization_layer(Cro42464, 1, 2.6150921854633107, Lay63928), 
LRes98910 = reshape_layer(Lay63928, [4, 1], Res98910), 
LFla96930 = flatten_layer(Res98910, Fla96930), 
LCon59153 = concatenate_layer([Fla96930,[[0.9837, 0.3946, 0.4156, 0.7141, 0.2218, 0.6232, 0.1191, 0.8337, 0.8055, 0.1455, 0.9069, 0.9297]]], 1, Con59153), 
LCon56303 = conv3D_transpose_layer([[[[[0.6455, 0.4865], [0.7122, 0.9934]], [[0.0737, 0.8487], [0.1734, 0.4717]]]]], 1, 2, 2,[[[[[0.5277, 0.3618], [0.2455, 0.4879]], [[0.7779, 0.6084], [0.0156, 0.4708]]], [[[0.7987, 0.5558], [0.1865, 0.8135]], [[0.7111, 0.9803], [0.8078, 0.5102]]]]],[0, 0], 1, 2, 1, true, Con56303), 
LRes5862 = reshape_layer(Con56303, [1, 4, 4], Res5862), 
LRes83817 = reshape_layer(Res5862, [1, 16], Res83817), 
LFla4250 = flatten_layer(Res83817, Fla4250), 
LDot37806 = dot_layer([[0.6587, 0.8537]], [[0.7493, 0.4403]], 1, 1, Dot37806), 
LCon58571 = concatenate_layer([Dot37806,[[0.4142, 0.4295, 0.5866, 0.5216, 0.4845, 0.1331, 0.3275, 0.6229, 0.2807, 0.5298, 0.475, 0.5512, 0.7187, 0.1938, 0.2005]]], 1, Con58571), 
LMin32900 = minimum_layer([Fla4250,Con58571], Min32900), 
LAdd66301 = add_layer([Con59153,Min32900], Add66301), 
LRes42411 = reshape_layer(Add66301, [16, 1], Res42411), 
LRes14145 = reshape_layer(Res42411, [16, 1, 1], Res14145), 
LRes99586 = reshape_layer(Res14145, [16, 1, 1, 1], Res99586), 
LCon2582 = conv3D_transpose_layer(Res99586, 4, 1, 1,[[[[[0.9729], [0.5109], [0.7967]]]], [[[[0.2092], [0.8161], [0.8871]]]], [[[[0.268], [0.6358], [0.8608]]]], [[[[0.3061], [0.8992], [0.9384]]]]],[0, 0, 0], 1, 1, 1, false, Con2582), 
exec_layers([LCro42464,LLay63928,LRes98910,LFla96930,LCon59153,LCon56303,LRes5862,LRes83817,LFla4250,LDot37806,LCon58571,LMin32900,LAdd66301,LRes42411,LRes14145,LRes99586,LCon2582],["Cro42464","Lay63928","Res98910","Fla96930","Con59153","Con56303","Res5862","Res83817","Fla4250","Dot37806","Con58571","Min32900","Add66301","Res42411","Res14145","Res99586","Con2582"],Con2582,"Con2582")

Actual (Unparsed): [[[[[0.5596836, 0.2939072, 0.4583204]]], [[[0.4521104, 0.6436998, 0.7820033]]], [[[0.8206268, 0.9565661, 1.2850356]]], [[[0.7851994, 1.4379700, 1.6951710]]], [[[1.8166288, 1.7915403, 2.4011964]]], [[[1.4647875, 2.4823487, 2.9545873]]], [[[1.2437849, 2.3150622, 2.8886931]]], [[[1.8245318, 2.8924450, 3.4858973]]], [[[1.1864119, 2.2794640, 2.6735991]]], [[[1.4452837, 2.0807845, 2.6352985]]], [[[1.2914017, 2.3667787, 2.7849859]]], [[[1.8250179, 2.2834036, 2.9291353]]], [[[2.0242331, 2.9759865, 3.6321889]]], [[[1.6555027, 2.9400229, 3.5976120]]], [[[2.0072807, 3.2820146, 4.0088378]]], [[[1.9665191, 3.2173115, 3.8620204]]], [[[0.7915071, 2.3861978, 2.7474063]]], [[[0.6398179, 1.7083306, 2.0057730]]], [[[0.3459542, 1.0162759, 1.0605797]]]]]

Expected (Unparsed): [[[[[0.5596835707742646,0.29390722202546177,0.4583203832211497]]],[[[0.45211038573583184,0.643699832802536,0.782003305354839]]],[[[0.820626802042559,0.956566134994058,1.2850356253598003]]],[[[0.7851994161858756,1.4379699595780928,1.6951710205148054]]],[[[1.8166288502264825,1.7915402859279694,2.401196430660323]]],[[[1.4647875005714854,2.4823487275307965,2.9545872869935366]]],[[[1.2437849257935016,2.3150621654410872,2.888693118845547]]],[[[1.8245318099999999,2.89244505,3.48589729]]],[[[1.186411923835,2.279464002535,2.6735991012049993]]],[[[1.44528372058,2.0807845435149996,2.6352985351649996]]],[[[1.2914017582000001,2.36677870117,2.78498594992]]],[[[1.825017937015,2.2834035740800003,2.9291352791599996]]],[[[2.024233138285,2.975986575985,3.632188933555]]],[[[1.65550272543,2.940022984815,3.5976119944650002]]],[[[2.0072806971999997,3.2820145913200003,4.00883785007]]],[[[1.966519102065,3.2173114951799997,3.86202042636]]],[[[0.7915071312499999,2.3861977999999997,2.74740627]]],[[[0.6398178699999999,1.7083306,2.00577304]]],[[[0.3459542199999999,1.0162758399999998,1.0605796799999998]]]]]

Actual:   [[[[[0.5597, 0.294, 0.4584]]], [[[0.4522, 0.6437, 0.7821]]], [[[0.8207, 0.9566, 1.2851]]], [[[0.7852, 1.438, 1.6952]]], [[[1.8167, 1.7916, 2.4012]]], [[[1.4648, 2.4824, 2.9546]]], [[[1.2438, 2.3151, 2.8887]]], [[[1.8246, 2.8925, 3.4859]]], [[[1.1865, 2.2795, 2.6736]]], [[[1.4453, 2.0808, 2.6353]]], [[[1.2915, 2.3668, 2.785]]], [[[1.8251, 2.2835, 2.9292]]], [[[2.0243, 2.976, 3.6322]]], [[[1.6556, 2.9401, 3.5977]]], [[[2.0073, 3.2821, 4.0089]]], [[[1.9666, 3.2174, 3.8621]]], [[[0.7916, 2.3862, 2.7475]]], [[[0.6399, 1.7084, 2.0058]]], [[[0.346, 1.0163, 1.0606]]]]]

Expected: [[[[[0.5597, 0.294, 0.4584]]], [[[0.4522, 0.6437, 0.7821]]], [[[0.8207, 0.9566, 1.2851]]], [[[0.7852, 1.438, 1.6952]]], [[[1.8167, 1.7916, 2.4012]]], [[[1.4648, 2.4824, 2.9546]]], [[[1.2438, 2.3151, 2.8887]]], [[[1.8246, 2.8925, 3.4859]]], [[[1.1865, 2.2795, 2.6736]]], [[[1.4453, 2.0808, 2.6353]]], [[[1.2915, 2.3668, 2.785]]], [[[1.8251, 2.2835, 2.9292]]], [[[2.0243, 2.976, 3.6322]]], [[[1.6556, 2.9401, 3.5977]]], [[[2.0073, 3.2821, 4.0089]]], [[[1.9666, 3.2174, 3.8621]]], [[[0.7916, 2.3862, 2.7475]]], [[[0.6399, 1.7084, 2.0058]]], [[[0.346, 1.0163, 1.0606]]]]]