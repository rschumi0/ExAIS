import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Den48485 = tf.keras.layers.Input(shape=([5, 5, 3]))

Den48485 = keras.layers.Dense(3,name = 'Den48485', )(in0Den48485)
Res72236 = keras.layers.Reshape((5, 5, 3, 1), name = 'Res72236', )(Den48485)
Con53903 = keras.layers.Conv3D(3, (3, 5, 2),strides=(1, 1, 3), padding='same', dilation_rate=(1, 1, 1), name = 'Con53903', )(Res72236)
Res9209 = keras.layers.Reshape((5, 5, 3), name = 'Res9209', )(Con53903)
Zer11924 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer11924', )(Res9209)
Res52188 = keras.layers.Reshape((7, 7, 3, 1), name = 'Res52188', )(Zer11924)
Glo82844 = keras.layers.GlobalMaxPool3D(name = 'Glo82844', )(Res52188)
model = tf.keras.models.Model(inputs=[in0Den48485], outputs=Glo82844)
w = model.get_layer('Den48485').get_weights() 
w[0] = np.array([[0.6517, 0.5527, 0.9179], [0.8529, 0.7314, 0.9358], [0.5268, 0.1128, 0.9025]])
w[1] = np.array([0.4449, 0.1088, 0.8765])
model.get_layer('Den48485').set_weights(w) 
w = model.get_layer('Con53903').get_weights() 
w[0] = np.array([[[[[0.6165, 0.9752, 0.4161]], [[0.2327, 0.5812, 0.644]]], [[[0.4635, 0.5367, 0.7108]], [[0.1579, 0.1002, 0.4967]]], [[[0.397, 0.2994, 0.3871]], [[0.8761, 0.3606, 0.8983]]], [[[0.5857, 0.2536, 0.6765]], [[0.0641, 0.3927, 0.4332]]], [[[0.9385, 0.1756, 0.5686]], [[0.3533, 0.5538, 0.6098]]]], [[[[0.7751, 0.1192, 0.3432]], [[0.0749, 0.3236, 0.4881]]], [[[0.4645, 0.1971, 0.5792]], [[0.2531, 0.1728, 0.7024]]], [[[0.9673, 0.4918, 0.0839]], [[0.1355, 0.8845, 0.5712]]], [[[0.4183, 0.561, 0.3296]], [[0.1354, 0.169, 0.1031]]], [[[0.7382, 0.04, 0.2556]], [[0.4994, 0.33, 0.3443]]]], [[[[0.5104, 0.0655, 0.2597]], [[0.0224, 0.7713, 0.5982]]], [[[0.0008, 0.0142, 0.4516]], [[0.7823, 0.6827, 0.5994]]], [[[0.702, 0.6057, 0.5548]], [[0.8505, 0.682, 0.1387]]], [[[0.3572, 0.0957, 0.5211]], [[0.7874, 0.1383, 0.9066]]], [[[0.262, 0.7909, 0.98]], [[0.1133, 0.4532, 0.3022]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con53903').set_weights(w) 
in0Den48485 = tf.constant([[[[0.5393, 0.1836, 0.4373], [0.2717, 0.8573, 0.3153], [0.9223, 0.3271, 0.7855], [0.1497, 0.0067, 0.2227], [0.7731, 0.2192, 0.3079]], [[0.2514, 0.1883, 0.1716], [0.3985, 0.0639, 0.9311], [0.1611, 0.183, 0.9741], [0.4623, 0.495, 0.7218], [0.5664, 0.3847, 0.2763]], [[0.4507, 0.9562, 0.2249], [0.7031, 0.147, 0.495], [0.5984, 0.8877, 0.9224], [0.929, 0.519, 0.549], [0.9835, 0.0239, 0.2094]], [[0.6921, 0.8974, 0.4463], [0.4086, 0.4422, 0.6207], [0.2621, 0.834, 0.5252], [0.6075, 0.75, 0.153], [0.5, 0.8997, 0.3594]], [[0.5475, 0.7388, 0.2191], [0.5473, 0.7117, 0.3229], [0.7315, 0.9159, 0.9157], [0.4779, 0.3342, 0.5462], [0.5857, 0.9059, 0.0281]]]])
print (np.array2string(model.predict([in0Den48485],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Glo82844.png')

LDen48485 = dense_layer([[[[0.5393, 0.1836, 0.4373], [0.2717, 0.8573, 0.3153], [0.9223, 0.3271, 0.7855], [0.1497, 0.0067, 0.2227], [0.7731, 0.2192, 0.3079]], [[0.2514, 0.1883, 0.1716], [0.3985, 0.0639, 0.9311], [0.1611, 0.183, 0.9741], [0.4623, 0.495, 0.7218], [0.5664, 0.3847, 0.2763]], [[0.4507, 0.9562, 0.2249], [0.7031, 0.147, 0.495], [0.5984, 0.8877, 0.9224], [0.929, 0.519, 0.549], [0.9835, 0.0239, 0.2094]], [[0.6921, 0.8974, 0.4463], [0.4086, 0.4422, 0.6207], [0.2621, 0.834, 0.5252], [0.6075, 0.75, 0.153], [0.5, 0.8997, 0.3594]], [[0.5475, 0.7388, 0.2191], [0.5473, 0.7117, 0.3229], [0.7315, 0.9159, 0.9157], [0.4779, 0.3342, 0.5462], [0.5857, 0.9059, 0.0281]]]], [[0.6517, 0.5527, 0.9179], [0.8529, 0.7314, 0.9358], [0.5268, 0.1128, 0.9025]],[0.4449, 0.1088, 0.8765], Den48485), 
LRes72236 = reshape_layer(Den48485, [5, 5, 3, 1], Res72236), 
LCon53903 = conv3D_layer(Res72236, 3, 5, 2,[[[[[0.6165, 0.9752, 0.4161]], [[0.2327, 0.5812, 0.644]]], [[[0.4635, 0.5367, 0.7108]], [[0.1579, 0.1002, 0.4967]]], [[[0.397, 0.2994, 0.3871]], [[0.8761, 0.3606, 0.8983]]], [[[0.5857, 0.2536, 0.6765]], [[0.0641, 0.3927, 0.4332]]], [[[0.9385, 0.1756, 0.5686]], [[0.3533, 0.5538, 0.6098]]]], [[[[0.7751, 0.1192, 0.3432]], [[0.0749, 0.3236, 0.4881]]], [[[0.4645, 0.1971, 0.5792]], [[0.2531, 0.1728, 0.7024]]], [[[0.9673, 0.4918, 0.0839]], [[0.1355, 0.8845, 0.5712]]], [[[0.4183, 0.561, 0.3296]], [[0.1354, 0.169, 0.1031]]], [[[0.7382, 0.04, 0.2556]], [[0.4994, 0.33, 0.3443]]]], [[[[0.5104, 0.0655, 0.2597]], [[0.0224, 0.7713, 0.5982]]], [[[0.0008, 0.0142, 0.4516]], [[0.7823, 0.6827, 0.5994]]], [[[0.702, 0.6057, 0.5548]], [[0.8505, 0.682, 0.1387]]], [[[0.3572, 0.0957, 0.5211]], [[0.7874, 0.1383, 0.9066]]], [[[0.262, 0.7909, 0.98]], [[0.1133, 0.4532, 0.3022]]]]],[0, 0, 0], 1, 1, 3, true, 1, 1, 1, Con53903), 
LRes9209 = reshape_layer(Con53903, [5, 5, 3], Res9209), 
LZer11924 = zero_padding2D_layer(Res9209, 1, 1, 1, 1, Zer11924), 
LRes52188 = reshape_layer(Zer11924, [7, 7, 3, 1], Res52188), 
LGlo82844 = global_max_pool3D_layer(Res52188, Glo82844), 
exec_layers([LDen48485,LRes72236,LCon53903,LRes9209,LZer11924,LRes52188,LGlo82844],["Den48485","Res72236","Con53903","Res9209","Zer11924","Res52188","Glo82844"],Glo82844,"Glo82844")

Actual (Unparsed): [[18.8484653]]

Expected (Unparsed): [[18.848465243493]]

Actual:   [[18.8485]]

Expected: [[18.8485]]