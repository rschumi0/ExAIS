import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro77158 = tf.keras.layers.Input(shape=([1, 3]))
in0Con99886 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in0Sub81670 = tf.keras.layers.Input(shape=([3, 2, 3, 2]))
in1Sub81670 = tf.keras.layers.Input(shape=([3, 2, 3, 2]))
in0Con68853 = tf.keras.layers.Input(shape=([3, 2, 3, 2]))

Cro77158 = keras.layers.Cropping1D(cropping=((0, 0)), name = 'Cro77158', )(in0Cro77158)
Res87988 = keras.layers.Reshape((1, 3, 1), name = 'Res87988', )(Cro77158)
Zer82584 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer82584', )(Res87988)
Res70764 = keras.layers.Reshape((3, 5), name = 'Res70764', )(Zer82584)
Glo82597 = keras.layers.GlobalMaxPool1D(name = 'Glo82597', )(Res70764)
Res73041 = keras.layers.Reshape((5, 1), name = 'Res73041', )(Glo82597)
Sim83313 = keras.layers.SimpleRNN(2,name = 'Sim83313', )(Res73041)
Res21868 = keras.layers.Reshape((2, 1), name = 'Res21868', )(Sim83313)
Res2398 = keras.layers.Reshape((2, 1, 1), name = 'Res2398', )(Res21868)
Glo76046 = keras.layers.GlobalMaxPool2D(name = 'Glo76046', )(Res2398)
Con99886 = keras.layers.Conv3D(4, (2, 1, 1),strides=(1, 1, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con99886', )(in0Con99886)
Zer86681 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (1, 0)), name = 'Zer86681', )(Con99886)
Sub81670 = keras.layers.Subtract(name = 'Sub81670', )([in0Sub81670,in1Sub81670])
Con68853 = keras.layers.Concatenate(axis=4, name = 'Con68853', )([Sub81670,in0Con68853])
Mul68753 = keras.layers.Multiply(name = 'Mul68753', )([Zer86681,Con68853])
Res41055 = keras.layers.Reshape((3, 2, 12), name = 'Res41055', )(Mul68753)
Res32010 = keras.layers.Reshape((3, 24), name = 'Res32010', )(Res41055)
LST22215 = keras.layers.LSTM(1,recurrent_activation='sigmoid', name = 'LST22215', )(Res32010)
Min82094 = keras.layers.Minimum(name = 'Min82094', )([Glo76046,LST22215])
model = tf.keras.models.Model(inputs=[in0Cro77158,in0Con99886,in0Sub81670,in1Sub81670,in0Con68853], outputs=Min82094)
w = model.get_layer('Sim83313').get_weights() 
w[0] = np.array([[5, 7]])
w[1] = np.array([[1, 5], [10, 4]])
w[2] = np.array([7, 4])
model.get_layer('Sim83313').set_weights(w) 
w = model.get_layer('Con99886').get_weights() 
w[0] = np.array([[[[[0.6688, 0.8065, 0.601, 0.5197], [0.1728, 0.8735, 0.5545, 0.3792]]]], [[[[0.0095, 0.9643, 0.7488, 0.6596], [0.9445, 0.4582, 0.376, 0.1352]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con99886').set_weights(w) 
w = model.get_layer('LST22215').get_weights() 
w[0] = np.array([[4, 5, 4, 4], [10, 3, 4, 4], [4, 9, 5, 10], [2, 9, 8, 3], [4, 7, 7, 1], [4, 3, 8, 6], [2, 8, 6, 4], [4, 10, 7, 6], [9, 1, 5, 7], [8, 6, 4, 6], [1, 9, 3, 4], [6, 7, 8, 8], [5, 2, 7, 4], [10, 7, 4, 5], [9, 3, 4, 7], [7, 10, 5, 5], [8, 10, 8, 7], [7, 5, 8, 2], [4, 8, 9, 9], [7, 9, 4, 3], [9, 9, 7, 6], [6, 7, 5, 2], [8, 3, 7, 9], [7, 4, 10, 1]])
w[1] = np.array([[5, 2, 6, 8]])
w[2] = np.array([4, 7, 2, 6])
model.get_layer('LST22215').set_weights(w) 
in0Cro77158 = tf.constant([[[1.7709, 1.6817, 1.5048]]])
in0Con99886 = tf.constant([[[[[0.0684, 0.7726], [0.0962, 0.1689]]], [[[0.168, 0.829], [0.4451, 0.3498]]]]])
in0Sub81670 = tf.constant([[[[[0.3183, 0.227], [0.213, 0.6569], [0.3162, 0.287]], [[0.4345, 0.0493], [0.0123, 0.6704], [0.6714, 0.6725]]], [[[0.6251, 0.4193], [0.1943, 0.0133], [0.9649, 0.0444]], [[0.9991, 0.4658], [0.9109, 0.3193], [0.5737, 0.9449]]], [[[0.1051, 0.4356], [0.5228, 0.884], [0.8422, 0.826]], [[0.2566, 0.8086], [0.5646, 0.2729], [0.9556, 0.6939]]]]])
in1Sub81670 = tf.constant([[[[[0.2045, 0.8864], [0.9337, 0.479], [0.8505, 0.1558]], [[0.3388, 0.4382], [0.8688, 0.5587], [0.8553, 0.5915]]], [[[0.6527, 0.1464], [0.7015, 0.9717], [0.6386, 0.1133]], [[0.7512, 0.3627], [0.0876, 0.6075], [0.0519, 0.0712]]], [[[0.4023, 0.9409], [0.359, 0.4014], [0.428, 0.9185]], [[0.5634, 0.765], [0.266, 0.2214], [0.0463, 0.7787]]]]])
in0Con68853 = tf.constant([[[[[0.9109, 0.6229], [0.3578, 0.1425], [0.6422, 0.4038]], [[0.7109, 0.5169], [0.9391, 0.7923], [0.8249, 0.777]]], [[[0.3801, 0.1113], [0.4685, 0.0955], [0.821, 0.8786]], [[0.562, 0.0095], [0.1337, 0.1294], [0.576, 0.6478]]], [[[0.3105, 0.7733], [0.2459, 0.6043], [0.0407, 0.5987]], [[0.3781, 0.5101], [0.7762, 0.2981], [0.6985, 0.0058]]]]])
print (np.array2string(model.predict([in0Cro77158,in0Con99886,in0Sub81670,in1Sub81670,in0Con68853],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min82094.png')

LCro77158 = cropping1D_layer([[[1.7709, 1.6817, 1.5048]]], 0, 0, Cro77158), 
LRes87988 = reshape_layer(Cro77158, [1, 3, 1], Res87988), 
LZer82584 = zero_padding2D_layer(Res87988, 1, 1, 1, 1, Zer82584), 
LRes70764 = reshape_layer(Zer82584, [3, 5], Res70764), 
LGlo82597 = global_max_pool1D_layer(Res70764, Glo82597), 
LRes73041 = reshape_layer(Glo82597, [5, 1], Res73041), 
LSim83313 = simple_rnn_layer(Res73041,[[5, 7]],[[1, 5], [10, 4]],[7, 4], Sim83313), 
LRes21868 = reshape_layer(Sim83313, [2, 1], Res21868), 
LRes2398 = reshape_layer(Res21868, [2, 1, 1], Res2398), 
LGlo76046 = global_max_pool2D_layer(Res2398, Glo76046), 
LCon99886 = conv3D_layer([[[[[0.0684, 0.7726], [0.0962, 0.1689]]], [[[0.168, 0.829], [0.4451, 0.3498]]]]], 2, 1, 1,[[[[[0.6688, 0.8065, 0.601, 0.5197], [0.1728, 0.8735, 0.5545, 0.3792]]]], [[[[0.0095, 0.9643, 0.7488, 0.6596], [0.9445, 0.4582, 0.376, 0.1352]]]]],[0, 0, 0, 0], 1, 1, 1, true, 1, 1, 1, Con99886), 
LZer86681 = zero_padding3D_layer(Con99886, 1, 0, 1, 0, 1, 0, Zer86681), 
LSub81670 = subtract_layer([[[[[0.3183, 0.227], [0.213, 0.6569], [0.3162, 0.287]], [[0.4345, 0.0493], [0.0123, 0.6704], [0.6714, 0.6725]]], [[[0.6251, 0.4193], [0.1943, 0.0133], [0.9649, 0.0444]], [[0.9991, 0.4658], [0.9109, 0.3193], [0.5737, 0.9449]]], [[[0.1051, 0.4356], [0.5228, 0.884], [0.8422, 0.826]], [[0.2566, 0.8086], [0.5646, 0.2729], [0.9556, 0.6939]]]]], [[[[[0.2045, 0.8864], [0.9337, 0.479], [0.8505, 0.1558]], [[0.3388, 0.4382], [0.8688, 0.5587], [0.8553, 0.5915]]], [[[0.6527, 0.1464], [0.7015, 0.9717], [0.6386, 0.1133]], [[0.7512, 0.3627], [0.0876, 0.6075], [0.0519, 0.0712]]], [[[0.4023, 0.9409], [0.359, 0.4014], [0.428, 0.9185]], [[0.5634, 0.765], [0.266, 0.2214], [0.0463, 0.7787]]]]], Sub81670), 
LCon68853 = concatenate_layer([Sub81670,[[[[[0.9109, 0.6229], [0.3578, 0.1425], [0.6422, 0.4038]], [[0.7109, 0.5169], [0.9391, 0.7923], [0.8249, 0.777]]], [[[0.3801, 0.1113], [0.4685, 0.0955], [0.821, 0.8786]], [[0.562, 0.0095], [0.1337, 0.1294], [0.576, 0.6478]]], [[[0.3105, 0.7733], [0.2459, 0.6043], [0.0407, 0.5987]], [[0.3781, 0.5101], [0.7762, 0.2981], [0.6985, 0.0058]]]]]], 4, Con68853), 
LMul68753 = multiply_layer([Zer86681,Con68853], Mul68753), 
LRes41055 = reshape_layer(Mul68753, [3, 2, 12], Res41055), 
LRes32010 = reshape_layer(Res41055, [3, 24], Res32010), 
LLST22215 = lstm_layer(Res32010,[[4, 5, 4, 4], [10, 3, 4, 4], [4, 9, 5, 10], [2, 9, 8, 3], [4, 7, 7, 1], [4, 3, 8, 6], [2, 8, 6, 4], [4, 10, 7, 6], [9, 1, 5, 7], [8, 6, 4, 6], [1, 9, 3, 4], [6, 7, 8, 8], [5, 2, 7, 4], [10, 7, 4, 5], [9, 3, 4, 7], [7, 10, 5, 5], [8, 10, 8, 7], [7, 5, 8, 2], [4, 8, 9, 9], [7, 9, 4, 3], [9, 9, 7, 6], [6, 7, 5, 2], [8, 3, 7, 9], [7, 4, 10, 1]],[[5, 2, 6, 8]],[4, 7, 2, 6], LST22215), 
LMin82094 = minimum_layer([Glo76046,LST22215], Min82094), 
exec_layers([LCro77158,LRes87988,LZer82584,LRes70764,LGlo82597,LRes73041,LSim83313,LRes21868,LRes2398,LGlo76046,LCon99886,LZer86681,LSub81670,LCon68853,LMul68753,LRes41055,LRes32010,LLST22215,LMin82094],["Cro77158","Res87988","Zer82584","Res70764","Glo82597","Res73041","Sim83313","Res21868","Res2398","Glo76046","Con99886","Zer86681","Sub81670","Con68853","Mul68753","Res41055","Res32010","LST22215","Min82094"],Min82094,"Min82094")

Actual (Unparsed): [[0.9944999]]

Expected (Unparsed): [[0.9944998686402048]]

Actual:   [[0.9945]]

Expected: [[0.9945]]