import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add39493 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Add39493 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Con82129 = tf.keras.layers.Input(shape=([5, 11]))
in0Sub4581 = tf.keras.layers.Input(shape=([3, 3, 2]))
in1Sub4581 = tf.keras.layers.Input(shape=([3, 3, 2]))

Add39493 = keras.layers.Add(name = 'Add39493', )([in0Add39493,in1Add39493])
Res16200 = keras.layers.Reshape((2, 1, 2, 1), name = 'Res16200', )(Add39493)
Glo31321 = keras.layers.GlobalAveragePooling3D(name = 'Glo31321', )(Res16200)
Res80162 = keras.layers.Reshape((1, 1), name = 'Res80162', )(Glo31321)
Zer96577 = keras.layers.ZeroPadding1D(padding=((4, 0)), name = 'Zer96577', )(Res80162)
Con82129 = keras.layers.Concatenate(axis=2, name = 'Con82129', )([Zer96577,in0Con82129])
Sub4581 = keras.layers.Subtract(name = 'Sub4581', )([in0Sub4581,in1Sub4581])
Res72659 = keras.layers.Reshape((3, 3, 2, 1), name = 'Res72659', )(Sub4581)
Con75232 = keras.layers.Conv3DTranspose(2, (1, 1, 2),strides=(1, 1, 1), padding='same', name = 'Con75232', )(Res72659)
Res40207 = keras.layers.Reshape((3, 3, 4), name = 'Res40207', )(Con75232)
Res8527 = keras.layers.Reshape((3, 12), name = 'Res8527', )(Res40207)
Zer79964 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer79964', )(Res8527)
Min72681 = keras.layers.Minimum(name = 'Min72681', )([Con82129,Zer79964])
model = tf.keras.models.Model(inputs=[in0Add39493,in1Add39493,in0Con82129,in0Sub4581,in1Sub4581], outputs=Min72681)
w = model.get_layer('Con75232').get_weights() 
w[0] = np.array([[[[[0.4306], [0.9636]], [[0.0057], [0.038]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con75232').set_weights(w) 
in0Add39493 = tf.constant([[[[0.5464, 0.2805]], [[0.9939, 0.9798]]]])
in1Add39493 = tf.constant([[[[0.873, 0.9769]], [[0.2768, 0.326]]]])
in0Con82129 = tf.constant([[[0.8138, 0.6599, 0.5822, 0.5258, 0.2923, 0.7796, 0.3074, 0.9471, 0.6415, 0.8821, 0.398], [0.4042, 0.9333, 0.4363, 0.2052, 0.1867, 0.3278, 0.4884, 0.2683, 0.6103, 0.5918, 0.7018], [0.8351, 0.6372, 0.3287, 0.8026, 0.3998, 0.3278, 0.8843, 0.2432, 0.7261, 0.9405, 0.3107], [0.3837, 0.6916, 0.566, 0.3456, 0.3872, 0.8216, 0.1523, 0.0959, 0.3284, 0.5626, 0.6625], [0.0042, 0.7194, 0.1866, 0.8874, 0.7164, 0.7746, 0.7159, 0.1316, 0.6729, 0.2545, 0.4108]]])
in0Sub4581 = tf.constant([[[[0.4239, 0.8653], [0.6904, 0.2337], [0.9469, 0.8913]], [[0.1274, 0.3541], [0.8127, 0.4525], [0.3743, 0.3196]], [[0.0434, 0.0315], [0.5684, 0.253], [0.8471, 0.922]]]])
in1Sub4581 = tf.constant([[[[0.765, 0.3808], [0.157, 0.4825], [0.3302, 0.0476]], [[0.4322, 0.7102], [0.3943, 0.1717], [0.5023, 0.3056]], [[0.3982, 0.4572], [0.5572, 0.8179], [0.8433, 0.4808]]]])
print (np.array2string(model.predict([in0Add39493,in1Add39493,in0Con82129,in0Sub4581,in1Sub4581],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min72681.png')

LAdd39493 = add_layer([[[[[0.5464, 0.2805]], [[0.9939, 0.9798]]]], [[[[0.873, 0.9769]], [[0.2768, 0.326]]]]], Add39493), 
LRes16200 = reshape_layer(Add39493, [2, 1, 2, 1], Res16200), 
LGlo31321 = global_average_pooling3D_layer(Res16200, Glo31321), 
LRes80162 = reshape_layer(Glo31321, [1, 1], Res80162), 
LZer96577 = zero_padding1D_layer(Res80162, 4, 0, Zer96577), 
LCon82129 = concatenate_layer([Zer96577,[[[0.8138, 0.6599, 0.5822, 0.5258, 0.2923, 0.7796, 0.3074, 0.9471, 0.6415, 0.8821, 0.398], [0.4042, 0.9333, 0.4363, 0.2052, 0.1867, 0.3278, 0.4884, 0.2683, 0.6103, 0.5918, 0.7018], [0.8351, 0.6372, 0.3287, 0.8026, 0.3998, 0.3278, 0.8843, 0.2432, 0.7261, 0.9405, 0.3107], [0.3837, 0.6916, 0.566, 0.3456, 0.3872, 0.8216, 0.1523, 0.0959, 0.3284, 0.5626, 0.6625], [0.0042, 0.7194, 0.1866, 0.8874, 0.7164, 0.7746, 0.7159, 0.1316, 0.6729, 0.2545, 0.4108]]]], 2, Con82129), 
LSub4581 = subtract_layer([[[[0.4239, 0.8653], [0.6904, 0.2337], [0.9469, 0.8913]], [[0.1274, 0.3541], [0.8127, 0.4525], [0.3743, 0.3196]], [[0.0434, 0.0315], [0.5684, 0.253], [0.8471, 0.922]]]], [[[[0.765, 0.3808], [0.157, 0.4825], [0.3302, 0.0476]], [[0.4322, 0.7102], [0.3943, 0.1717], [0.5023, 0.3056]], [[0.3982, 0.4572], [0.5572, 0.8179], [0.8433, 0.4808]]]], Sub4581), 
LRes72659 = reshape_layer(Sub4581, [3, 3, 2, 1], Res72659), 
LCon75232 = conv3D_transpose_layer(Res72659, 1, 1, 2,[[[[[0.4306], [0.9636]], [[0.0057], [0.038]]]]],[0, 0], 1, 1, 1, true, Con75232), 
LRes40207 = reshape_layer(Con75232, [3, 3, 4], Res40207), 
LRes8527 = reshape_layer(Res40207, [3, 12], Res8527), 
LZer79964 = zero_padding1D_layer(Res8527, 1, 1, Zer79964), 
LMin72681 = minimum_layer([Con82129,Zer79964], Min72681), 
exec_layers([LAdd39493,LRes16200,LGlo31321,LRes80162,LZer96577,LCon82129,LSub4581,LRes72659,LCon75232,LRes40207,LRes8527,LZer79964,LMin72681],["Add39493","Res16200","Glo31321","Res80162","Zer96577","Con82129","Sub4581","Res72659","Con75232","Res40207","Res8527","Zer79964","Min72681"],Min72681,"Min72681")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.1468777, -0.3286839, 0.2066814, 0.4363000, 0.2052000, 0.1867000, -0.1040929, -0.2194745, 0.2655510, 0.5942521, 0.3668124, 0.7018000], [-0.1312469, -0.2937053, -0.1550740, -0.3547204, 0.1801630, 0.3998000, 0.1232974, 0.2864781, -0.0551168, -0.1233408, 0.0052988, 0.0086264], [-0.1527769, -0.3418853, -0.1853288, -0.4236869, 0.0048227, 0.0107923, -0.2431821, -0.5439121, 0.0016363, 0.0036617, 0.1900024, 0.4252847], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0,0,0,0,0,0,0,0,0,0,0,0],[-0.14687766,-0.32868396,0.20668142999999997,0.4363,0.2052,0.1867,-0.1040929,-0.21947448,0.26555102,0.59425212,0.36681241,0.7018],[-0.13124687999999998,-0.29370527999999996,-0.15507402,-0.35472036,0.18016304,0.3998,0.12329736000000002,0.2864780800000001,-0.05511679999999997,-0.12334079999999994,0.005298800000000005,0.008626400000000013],[-0.15277688,-0.34188528,-0.18532877999999997,-0.42368691999999997,0.004822719999999995,0.010792319999999989,-0.24318209999999996,-0.5439120399999999,0.001636279999999963,0.0036616799999999177,0.19000238000000003,0.42528472],[0,0,0,0,0,0,0,0,0,0,0,0]]]

Actual:   [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.1468, -0.3286, 0.2067, 0.4363, 0.2052, 0.1867, -0.104, -0.2194, 0.2656, 0.5943, 0.3669, 0.7018], [-0.1312, -0.2937, -0.155, -0.3547, 0.1802, 0.3998, 0.1233, 0.2865, -0.0551, -0.1233, 0.0053, 0.0087], [-0.1527, -0.3418, -0.1853, -0.4236, 0.0049, 0.0108, -0.2431, -0.5439, 0.0017, 0.0037, 0.1901, 0.4253], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]

Expected: [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.1468, -0.3286, 0.2067, 0.4363, 0.2052, 0.1867, -0.104, -0.2194, 0.2656, 0.5943, 0.3669, 0.7018], [-0.1312, -0.2937, -0.155, -0.3547, 0.1802, 0.3998, 0.1233, 0.2865, -0.0551, -0.1233, 0.0053, 0.0087], [-0.1527, -0.3418, -0.1853, -0.4236, 0.0049, 0.0108, -0.2431, -0.5439, 0.0017, 0.0037, 0.1901, 0.4253], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]