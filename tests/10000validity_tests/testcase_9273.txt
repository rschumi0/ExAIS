import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub92201 = tf.keras.layers.Input(shape=([2, 2, 3, 3]))
in1Sub92201 = tf.keras.layers.Input(shape=([2, 2, 3, 3]))
in0Dot77545 = tf.keras.layers.Input(shape=([3]))
in1Dot77545 = tf.keras.layers.Input(shape=([3]))
in0Glo64194 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Thr70061 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in0Min35063 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in1Min35063 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Con53365 = tf.keras.layers.Input(shape=([2, 2, 3, 2]))

Sub92201 = keras.layers.Subtract(name = 'Sub92201', )([in0Sub92201,in1Sub92201])
Thr93759 = keras.layers.ThresholdedReLU(theta=6.82252816603725, name = 'Thr93759', )(Sub92201)
Dot77545 = keras.layers.Dot(axes=(1, 1), name = 'Dot77545', )([in0Dot77545,in1Dot77545])
Res854 = keras.layers.Reshape((1, 1), name = 'Res854', )(Dot77545)
Res16269 = keras.layers.Reshape((1, 1, 1), name = 'Res16269', )(Res854)
Res19198 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res19198', )(Res16269)
Zer24483 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (1, 0)), name = 'Zer24483', )(Res19198)
Glo64194 = keras.layers.GlobalAveragePooling2D(name = 'Glo64194', )(in0Glo64194)
Res25040 = keras.layers.Reshape((2, 1), name = 'Res25040', )(Glo64194)
Res16559 = keras.layers.Reshape((2, 1, 1), name = 'Res16559', )(Res25040)
Res85356 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res85356', )(Res16559)
Zer71387 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (1, 0)), name = 'Zer71387', )(Res85356)
Thr70061 = keras.layers.ThresholdedReLU(theta=6.640928009206432, name = 'Thr70061', input_shape=(2, 1, 2, 1))(in0Thr70061)
Sub13170 = keras.layers.Subtract(name = 'Sub13170', )([Zer71387,Thr70061])
Min61948 = keras.layers.Minimum(name = 'Min61948', )([Zer24483,Sub13170])
Zer89762 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (0, 0)), name = 'Zer89762', )(Min61948)
Min35063 = keras.layers.Minimum(name = 'Min35063', )([in0Min35063,in1Min35063])
Mul37364 = keras.layers.Multiply(name = 'Mul37364', )([Zer89762,Min35063])
Zer96229 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (1, 0)), name = 'Zer96229', )(Mul37364)
Con53365 = keras.layers.Concatenate(axis=4, name = 'Con53365', )([Zer96229,in0Con53365])
Sub57103 = keras.layers.Subtract(name = 'Sub57103', )([Thr93759,Con53365])
model = tf.keras.models.Model(inputs=[in0Sub92201,in1Sub92201,in0Dot77545,in1Dot77545,in0Glo64194,in0Thr70061,in0Min35063,in1Min35063,in0Con53365], outputs=Sub57103)
in0Sub92201 = tf.constant([[[[[0.3763, 0.1186, 0.7785], [0.0104, 0.2847, 0.993], [0.9724, 0.1122, 0.4744]], [[0.4396, 0.0527, 0.958], [0.5082, 0.5391, 0.8974], [0.1139, 0.6855, 0.2416]]], [[[0.589, 0.836, 0.5311], [0.6788, 0.3825, 0.5387], [0.2065, 0.4998, 0.7727]], [[0.3815, 0.0192, 0.6018], [0.781, 0.2885, 0.5046], [0.988, 0.325, 0.6564]]]]])
in1Sub92201 = tf.constant([[[[[0.0014, 0.2596, 0.9423], [0.8564, 0.2496, 0.4222], [0.1937, 0.3892, 0.3042]], [[0.2713, 0.7919, 0.2146], [0.9729, 0.6108, 0.8724], [0.3433, 0.0664, 0.9547]]], [[[0.8484, 0.2538, 0.9754], [0.161, 0.9813, 0.075], [0.482, 0.6593, 0.1365]], [[0.7635, 0.2525, 0.5435], [0.189, 0.6953, 0.1621], [0.8248, 0.2027, 0.1909]]]]])
in0Dot77545 = tf.constant([[0.4558, 0.5652, 0.8101]])
in1Dot77545 = tf.constant([[0.4978, 0.7641, 0.4439]])
in0Glo64194 = tf.constant([[[[1.1897, 1.6659]]]])
in0Thr70061 = tf.constant([[[[[0.1617], [0.5522]]], [[[0.659], [0.5665]]]]])
in0Min35063 = tf.constant([[[[[0.7794], [0.852]], [[0.1775], [0.0328]]], [[[0.9655], [0.7914]], [[0.9926], [0.7266]]]]])
in1Min35063 = tf.constant([[[[[0.6263], [0.0221]], [[0.2479], [0.8736]]], [[[0.1717], [0.0343]], [[0.6235], [0.4517]]]]])
in0Con53365 = tf.constant([[[[[0.1055, 0.4394], [0.3025, 0.8867], [0.58, 0.8147]], [[0.4866, 0.5343], [0.9862, 0.8875], [0.0889, 0.8481]]], [[[0.0214, 0.5919], [0.3083, 0.9568], [0.9139, 0.2311]], [[0.3305, 0.3388], [0.2347, 0.028], [0.4248, 0.3467]]]]])
print (np.array2string(model.predict([in0Sub92201,in1Sub92201,in0Dot77545,in1Dot77545,in0Glo64194,in0Thr70061,in0Min35063,in1Min35063,in0Con53365],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub57103.png')

LSub92201 = subtract_layer([[[[[0.3763, 0.1186, 0.7785], [0.0104, 0.2847, 0.993], [0.9724, 0.1122, 0.4744]], [[0.4396, 0.0527, 0.958], [0.5082, 0.5391, 0.8974], [0.1139, 0.6855, 0.2416]]], [[[0.589, 0.836, 0.5311], [0.6788, 0.3825, 0.5387], [0.2065, 0.4998, 0.7727]], [[0.3815, 0.0192, 0.6018], [0.781, 0.2885, 0.5046], [0.988, 0.325, 0.6564]]]]], [[[[[0.0014, 0.2596, 0.9423], [0.8564, 0.2496, 0.4222], [0.1937, 0.3892, 0.3042]], [[0.2713, 0.7919, 0.2146], [0.9729, 0.6108, 0.8724], [0.3433, 0.0664, 0.9547]]], [[[0.8484, 0.2538, 0.9754], [0.161, 0.9813, 0.075], [0.482, 0.6593, 0.1365]], [[0.7635, 0.2525, 0.5435], [0.189, 0.6953, 0.1621], [0.8248, 0.2027, 0.1909]]]]], Sub92201), 
LThr93759 = thresholded_relu_layer(Sub92201, 6.82252816603725, Thr93759), 
LDot77545 = dot_layer([[0.4558, 0.5652, 0.8101]], [[0.4978, 0.7641, 0.4439]], 1, 1, Dot77545), 
LRes854 = reshape_layer(Dot77545, [1, 1], Res854), 
LRes16269 = reshape_layer(Res854, [1, 1, 1], Res16269), 
LRes19198 = reshape_layer(Res16269, [1, 1, 1, 1], Res19198), 
LZer24483 = zero_padding3D_layer(Res19198, 1, 0, 0, 0, 1, 0, Zer24483), 
LGlo64194 = global_average_pooling2D_layer([[[[1.1897, 1.6659]]]], Glo64194), 
LRes25040 = reshape_layer(Glo64194, [2, 1], Res25040), 
LRes16559 = reshape_layer(Res25040, [2, 1, 1], Res16559), 
LRes85356 = reshape_layer(Res16559, [2, 1, 1, 1], Res85356), 
LZer71387 = zero_padding3D_layer(Res85356, 0, 0, 0, 0, 1, 0, Zer71387), 
LThr70061 = thresholded_relu_layer([[[[[0.1617], [0.5522]]], [[[0.659], [0.5665]]]]], 6.640928009206432, Thr70061), 
LSub13170 = subtract_layer(Zer71387,Thr70061, Sub13170), 
LMin61948 = minimum_layer([Zer24483,Sub13170], Min61948), 
LZer89762 = zero_padding3D_layer(Min61948, 0, 0, 1, 0, 0, 0, Zer89762), 
LMin35063 = minimum_layer([[[[[[0.7794], [0.852]], [[0.1775], [0.0328]]], [[[0.9655], [0.7914]], [[0.9926], [0.7266]]]]], [[[[[0.6263], [0.0221]], [[0.2479], [0.8736]]], [[[0.1717], [0.0343]], [[0.6235], [0.4517]]]]]], Min35063), 
LMul37364 = multiply_layer([Zer89762,Min35063], Mul37364), 
LZer96229 = zero_padding3D_layer(Mul37364, 0, 0, 0, 0, 1, 0, Zer96229), 
LCon53365 = concatenate_layer([Zer96229,[[[[[0.1055, 0.4394], [0.3025, 0.8867], [0.58, 0.8147]], [[0.4866, 0.5343], [0.9862, 0.8875], [0.0889, 0.8481]]], [[[0.0214, 0.5919], [0.3083, 0.9568], [0.9139, 0.2311]], [[0.3305, 0.3388], [0.2347, 0.028], [0.4248, 0.3467]]]]]], 4, Con53365), 
LSub57103 = subtract_layer(Thr93759,Con53365, Sub57103), 
exec_layers([LSub92201,LThr93759,LDot77545,LRes854,LRes16269,LRes19198,LZer24483,LGlo64194,LRes25040,LRes16559,LRes85356,LZer71387,LThr70061,LSub13170,LMin61948,LZer89762,LMin35063,LMul37364,LZer96229,LCon53365,LSub57103],["Sub92201","Thr93759","Dot77545","Res854","Res16269","Res19198","Zer24483","Glo64194","Res25040","Res16559","Res85356","Zer71387","Thr70061","Sub13170","Min61948","Zer89762","Min35063","Mul37364","Zer96229","Con53365","Sub57103"],Sub57103,"Sub57103")

Actual (Unparsed): [[[[[0.0000000, -0.1055000, -0.4394000], [-0.0000000, -0.3025000, -0.8867000], [0.0000000, -0.5800000, -0.8147000]], [[0.0000000, -0.4866000, -0.5343000], [-0.0000000, -0.9862000, -0.8875000], [-0.0000000, -0.0889000, -0.8481000]]], [[[-0.0000000, -0.0214000, -0.5919000], [0.0000000, -0.3083000, -0.9568000], [-0.0000000, -0.9139000, -0.2311000]], [[-0.0000000, -0.3305000, -0.3388000], [0.0000000, -0.2347000, -0.0280000], [-0.4599977, -0.4248000, -0.3467000]]]]]

Expected (Unparsed): [[[[[0,-0.1055,-0.4394],[0.0,-0.3025,-0.8867],[0.0,-0.58,-0.8147]],[[0,-0.4866,-0.5343],[0.0,-0.9862,-0.8875],[0.0,-0.0889,-0.8481]]],[[[0,-0.0214,-0.5919],[0.0,-0.3083,-0.9568],[0.0,-0.9139,-0.2311]],[[0,-0.3305,-0.3388],[0.0,-0.2347,-0.028],[-0.45999770641500004,-0.4248,-0.3467]]]]]

Actual:   [[[[[0, -0.1055, -0.4394], [-0, -0.3025, -0.8867], [0, -0.58, -0.8147]], [[0, -0.4866, -0.5343], [-0, -0.9862, -0.8875], [-0, -0.0889, -0.8481]]], [[[-0, -0.0214, -0.5919], [0, -0.3083, -0.9568], [-0, -0.9139, -0.2311]], [[-0, -0.3305, -0.3388], [0, -0.2347, -0.028], [-0.4599, -0.4248, -0.3467]]]]]

Expected: [[[[[0, -0.1055, -0.4394], [0, -0.3025, -0.8867], [0, -0.58, -0.8147]], [[0, -0.4866, -0.5343], [0, -0.9862, -0.8875], [0, -0.0889, -0.8481]]], [[[0, -0.0214, -0.5919], [0, -0.3083, -0.9568], [0, -0.9139, -0.2311]], [[0, -0.3305, -0.3388], [0, -0.2347, -0.028], [-0.4599, -0.4248, -0.3467]]]]]