import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sof2464 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Con97043 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Mul8275 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in1Mul8275 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in0Thr1848 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con93187 = tf.keras.layers.Input(shape=([3, 4, 1]))

Sof2464 = keras.layers.Softmax(axis=1, name = 'Sof2464', input_shape=(1, 2, 1, 1))(in0Sof2464)
Con97043 = keras.layers.Concatenate(axis=4, name = 'Con97043', )([Sof2464,in0Con97043])
Mul8275 = keras.layers.Multiply(name = 'Mul8275', )([in0Mul8275,in1Mul8275])
Zer18961 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (0, 0)), name = 'Zer18961', )(Mul8275)
Add13480 = keras.layers.Add(name = 'Add13480', )([Con97043,Zer18961])
Mas47316 = keras.layers.Masking(mask_value=1, name = 'Mas47316', )(Add13480)
Res61159 = keras.layers.Reshape((1, 2, 2), name = 'Res61159', )(Mas47316)
Zer31505 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer31505', )(Res61159)
Thr1848 = keras.layers.ThresholdedReLU(theta=4.424838951822579, name = 'Thr1848', input_shape=(1, 2, 1))(in0Thr1848)
Zer19978 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer19978', )(Thr1848)
Con93187 = keras.layers.Concatenate(axis=3, name = 'Con93187', )([Zer19978,in0Con93187])
Min7538 = keras.layers.Minimum(name = 'Min7538', )([Zer31505,Con93187])
model = tf.keras.models.Model(inputs=[in0Sof2464,in0Con97043,in0Mul8275,in1Mul8275,in0Thr1848,in0Con93187], outputs=Min7538)
in0Sof2464 = tf.constant([[[[[0.4819]], [[0.8834]]]]])
in0Con97043 = tf.constant([[[[[0.728]], [[0.4798]]]]])
in0Mul8275 = tf.constant([[[[[0.3747, 0.2807]]]]])
in1Mul8275 = tf.constant([[[[[0.2625, 0.5861]]]]])
in0Thr1848 = tf.constant([[[[0.1975], [0.8312]]]])
in0Con93187 = tf.constant([[[[0.8583], [0.8923], [0.1067], [0.4044]], [[0.9307], [0.5752], [0.4767], [0.2563]], [[0.7731], [0.1144], [0.0044], [0.2484]]]])
print (np.array2string(model.predict([in0Sof2464,in0Con97043,in0Mul8275,in1Mul8275,in0Thr1848,in0Con93187],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min7538.png')

LSof2464 = softmax_layer([[[[[0.4819]], [[0.8834]]]]], 1, Sof2464), 
LCon97043 = concatenate_layer([Sof2464,[[[[[0.728]], [[0.4798]]]]]], 4, Con97043), 
LMul8275 = multiply_layer([[[[[[0.3747, 0.2807]]]]], [[[[[0.2625, 0.5861]]]]]], Mul8275), 
LZer18961 = zero_padding3D_layer(Mul8275, 0, 0, 1, 0, 0, 0, Zer18961), 
LAdd13480 = add_layer([Con97043,Zer18961], Add13480), 
LMas47316 = masking_layer(Add13480, 1, Mas47316), 
LRes61159 = reshape_layer(Mas47316, [1, 2, 2], Res61159), 
LZer31505 = zero_padding2D_layer(Res61159, 2, 0, 2, 0, Zer31505), 
LThr1848 = thresholded_relu_layer([[[[0.1975], [0.8312]]]], 4.424838951822579, Thr1848), 
LZer19978 = zero_padding2D_layer(Thr1848, 1, 1, 1, 1, Zer19978), 
LCon93187 = concatenate_layer([Zer19978,[[[[0.8583], [0.8923], [0.1067], [0.4044]], [[0.9307], [0.5752], [0.4767], [0.2563]], [[0.7731], [0.1144], [0.0044], [0.2484]]]]], 3, Con93187), 
LMin7538 = minimum_layer([Zer31505,Con93187], Min7538), 
exec_layers([LSof2464,LCon97043,LMul8275,LZer18961,LAdd13480,LMas47316,LRes61159,LZer31505,LThr1848,LZer19978,LCon93187,LMin7538],["Sof2464","Con97043","Mul8275","Zer18961","Add13480","Mas47316","Res61159","Zer31505","Thr1848","Zer19978","Con93187","Min7538"],Min7538,"Min7538")

Actual (Unparsed): [[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0044000], [0.0000000, 0.2484000]]]]

Expected (Unparsed): [[[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0.0044],[0,0.2484]]]]

Actual:   [[[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0.0044], [0, 0.2484]]]]

Expected: [[[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0.0044], [0, 0.2484]]]]