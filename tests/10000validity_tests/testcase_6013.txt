import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave90925 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Ave90925 = tf.keras.layers.Input(shape=([2, 2, 2]))

Ave90925 = keras.layers.Average(name = 'Ave90925', )([in0Ave90925,in1Ave90925])
Res13886 = keras.layers.Reshape((2, 2, 2, 1), name = 'Res13886', )(Ave90925)
Con72939 = keras.layers.Conv3DTranspose(4, (1, 1, 2),strides=(1, 1, 1), padding='same', name = 'Con72939', )(Res13886)
model = tf.keras.models.Model(inputs=[in0Ave90925,in1Ave90925], outputs=Con72939)
w = model.get_layer('Con72939').get_weights() 
w[0] = np.array([[[[[0.4474], [0.1926], [0.6332], [0.0532]], [[0.2797], [0.7967], [0.6977], [0.4941]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con72939').set_weights(w) 
in0Ave90925 = tf.constant([[[[0.3288, 0.8756], [0.2324, 0.3013]], [[0.3348, 0.4142], [0.491, 0.2169]]]])
in1Ave90925 = tf.constant([[[[0.8917, 0.2416], [0.6761, 0.2425]], [[0.659, 0.1503], [0.4248, 0.3854]]]])
print (np.array2string(model.predict([in0Ave90925,in1Ave90925],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con72939.png')

LAve90925 = average_layer([[[[[0.3288, 0.8756], [0.2324, 0.3013]], [[0.3348, 0.4142], [0.491, 0.2169]]]], [[[[0.8917, 0.2416], [0.6761, 0.2425]], [[0.659, 0.1503], [0.4248, 0.3854]]]]], Ave90925), 
LRes13886 = reshape_layer(Ave90925, [2, 2, 2, 1], Res13886), 
LCon72939 = conv3D_transpose_layer(Res13886, 1, 1, 2,[[[[[0.4474], [0.1926], [0.6332], [0.0532]], [[0.2797], [0.7967], [0.6977], [0.4941]]]]],[0, 0, 0, 0], 1, 1, 1, true, Con72939), 
exec_layers([LAve90925,LRes13886,LCon72939],["Ave90925","Res13886","Con72939"],Con72939,"Con72939")

Actual (Unparsed): [[[[[0.2730259, 0.1175342, 0.3864103, 0.0324653], [0.4206046, 0.5937725, 0.7794769, 0.3312421]], [[0.2032315, 0.0874886, 0.2876311, 0.0241661], [0.2487018, 0.4142689, 0.4890973, 0.2389100]]], [[[0.2223131, 0.0957029, 0.3146371, 0.0264351], [0.2652616, 0.4502416, 0.5254078, 0.2605340]], [[0.2048645, 0.0881915, 0.2899423, 0.0243603], [0.2628091, 0.4228104, 0.5101650, 0.2422696]]]]]

Expected (Unparsed): [[[[[0.27302585,0.11753414999999999,0.3864103,0.032465299999999996],[0.420604565,0.5937725349999999,0.779476945,0.331242045]],[[0.20323145000000004,0.08748855000000001,0.28763110000000003,0.0241661],[0.248701785,0.414268915,0.48909730500000004,0.238910005]]],[[[0.22231306,0.09570294,0.31463708,0.02643508],[0.26526158,0.45024158,0.52540783,0.26053399]],[[0.20486446,0.08819154,0.28994228,0.024360279999999998],[0.26280914,0.42281041999999996,0.51016501,0.24226956999999996]]]]]

Actual:   [[[[[0.2731, 0.1176, 0.3865, 0.0325], [0.4207, 0.5938, 0.7795, 0.3313]], [[0.2033, 0.0875, 0.2877, 0.0242], [0.2488, 0.4143, 0.4891, 0.239]]], [[[0.2224, 0.0958, 0.3147, 0.0265], [0.2653, 0.4503, 0.5255, 0.2606]], [[0.2049, 0.0882, 0.29, 0.0244], [0.2629, 0.4229, 0.5102, 0.2423]]]]]

Expected: [[[[[0.2731, 0.1176, 0.3865, 0.0325], [0.4207, 0.5938, 0.7795, 0.3313]], [[0.2033, 0.0875, 0.2877, 0.0242], [0.2488, 0.4143, 0.4891, 0.239]]], [[[0.2224, 0.0958, 0.3147, 0.0265], [0.2653, 0.4503, 0.5255, 0.2606]], [[0.2049, 0.0882, 0.29, 0.0244], [0.2629, 0.4229, 0.5102, 0.2423]]]]]