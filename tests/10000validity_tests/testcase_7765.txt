import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min24317 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Min24317 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Dot14843 = tf.keras.layers.Input(shape=([3, 2]))
in1Dot14843 = tf.keras.layers.Input(shape=([3, 2]))
in0Con793 = tf.keras.layers.Input(shape=([5]))
in0Min96261 = tf.keras.layers.Input(shape=([2, 1]))
in1Min96261 = tf.keras.layers.Input(shape=([2, 1]))

Min24317 = keras.layers.Minimum(name = 'Min24317', )([in0Min24317,in1Min24317])
Res26900 = keras.layers.Reshape((2, 4), name = 'Res26900', )(Min24317)
Fla81312 = keras.layers.Flatten(name = 'Fla81312', )(Res26900)
Dot14843 = keras.layers.Dot(axes=(1, 1), name = 'Dot14843', )([in0Dot14843,in1Dot14843])
Den18170 = keras.layers.Dense(4,name = 'Den18170', )(Dot14843)
LST57393 = keras.layers.LSTM(3,recurrent_activation='sigmoid', name = 'LST57393', )(Den18170)
Con793 = keras.layers.Concatenate(axis=1, name = 'Con793', )([LST57393,in0Con793])
Ave15422 = keras.layers.Average(name = 'Ave15422', )([Fla81312,Con793])
Res93235 = keras.layers.Reshape((8, 1), name = 'Res93235', )(Ave15422)
Res61952 = keras.layers.Reshape((8, 1, 1), name = 'Res61952', )(Res93235)
Res48703 = keras.layers.Reshape((8, 1, 1, 1), name = 'Res48703', )(Res61952)
Zer99825 = keras.layers.ZeroPadding3D(padding=((0, 0), (6, 0), (0, 0)), name = 'Zer99825', )(Res48703)
Min96261 = keras.layers.Minimum(name = 'Min96261', )([in0Min96261,in1Min96261])
Loc70707 = keras.layers.LocallyConnected1D(4, (1),strides=(1), name = 'Loc70707', )(Min96261)
Res54940 = keras.layers.Reshape((2, 4, 1), name = 'Res54940', )(Loc70707)
Res61070 = keras.layers.Reshape((2, 4, 1, 1), name = 'Res61070', )(Res54940)
Up_1050 = keras.layers.UpSampling3D(size=(2, 1, 1), name = 'Up_1050', )(Res61070)
Zer90556 = keras.layers.ZeroPadding3D(padding=((4, 0), (3, 0), (0, 0)), name = 'Zer90556', )(Up_1050)
Add47427 = keras.layers.Add(name = 'Add47427', )([Zer99825,Zer90556])
model = tf.keras.models.Model(inputs=[in0Min24317,in1Min24317,in0Dot14843,in1Dot14843,in0Con793,in0Min96261,in1Min96261], outputs=Add47427)
w = model.get_layer('Den18170').get_weights() 
w[0] = np.array([[0.6195, 0.6131, 0.908, 0.2487], [0.5819, 0.8813, 0.1721, 0.9507]])
w[1] = np.array([0.4249, 0.2063, 0.5668, 0.0368])
model.get_layer('Den18170').set_weights(w) 
w = model.get_layer('LST57393').get_weights() 
w[0] = np.array([[4, 4, 4, 8, 10, 1, 6, 10, 4, 5, 1, 7], [7, 9, 1, 7, 8, 7, 4, 7, 9, 9, 7, 2], [1, 3, 7, 6, 7, 1, 3, 4, 3, 4, 6, 1], [8, 10, 5, 5, 8, 3, 2, 1, 8, 6, 2, 10]])
w[1] = np.array([[5, 4, 7, 10, 6, 1, 1, 2, 8, 5, 4, 5], [1, 2, 6, 2, 9, 5, 6, 9, 6, 8, 5, 5], [10, 5, 3, 1, 2, 3, 6, 2, 8, 1, 5, 9]])
w[2] = np.array([1, 9, 6, 8, 5, 4, 2, 1, 8, 1, 8, 6])
model.get_layer('LST57393').set_weights(w) 
w = model.get_layer('Loc70707').get_weights() 
w[0] = np.array([[[0.823, 0.9279, 0.0436, 0.9817]], [[0.0175, 0.7538, 0.9363, 0.0189]]])
w[1] = np.array([[0, 0, 0, 0], [0, 0, 0, 0]])
model.get_layer('Loc70707').set_weights(w) 
in0Min24317 = tf.constant([[[[0.6153, 0.0069], [0.6091, 0.6013]], [[0.4571, 0.9549], [0.1421, 0.5691]]]])
in1Min24317 = tf.constant([[[[0.986, 0.9743], [0.9009, 0.4278]], [[0.8052, 0.4657], [0.7464, 0.3239]]]])
in0Dot14843 = tf.constant([[[0.362, 0.9342], [0.1596, 0.921], [0.1957, 0.0628]]])
in1Dot14843 = tf.constant([[[0.2189, 0.5876], [0.2372, 0.499], [0.9393, 0.7182]]])
in0Con793 = tf.constant([[0.8166, 0.1888, 0.9961, 0.4345, 0.6453]])
in0Min96261 = tf.constant([[[0.9995], [0.0186]]])
in1Min96261 = tf.constant([[[0.2241], [0.6262]]])
print (np.array2string(model.predict([in0Min24317,in1Min24317,in0Dot14843,in1Dot14843,in0Con793,in0Min96261,in1Min96261],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add47427.png')

LMin24317 = minimum_layer([[[[[0.6153, 0.0069], [0.6091, 0.6013]], [[0.4571, 0.9549], [0.1421, 0.5691]]]], [[[[0.986, 0.9743], [0.9009, 0.4278]], [[0.8052, 0.4657], [0.7464, 0.3239]]]]], Min24317), 
LRes26900 = reshape_layer(Min24317, [2, 4], Res26900), 
LFla81312 = flatten_layer(Res26900, Fla81312), 
LDot14843 = dot_layer([[[0.362, 0.9342], [0.1596, 0.921], [0.1957, 0.0628]]], [[[0.2189, 0.5876], [0.2372, 0.499], [0.9393, 0.7182]]], 1, 1, Dot14843), 
LDen18170 = dense_layer(Dot14843, [[0.6195, 0.6131, 0.908, 0.2487], [0.5819, 0.8813, 0.1721, 0.9507]],[0.4249, 0.2063, 0.5668, 0.0368], Den18170), 
LLST57393 = lstm_layer(Den18170,[[4, 4, 4, 8, 10, 1, 6, 10, 4, 5, 1, 7], [7, 9, 1, 7, 8, 7, 4, 7, 9, 9, 7, 2], [1, 3, 7, 6, 7, 1, 3, 4, 3, 4, 6, 1], [8, 10, 5, 5, 8, 3, 2, 1, 8, 6, 2, 10]],[[5, 4, 7, 10, 6, 1, 1, 2, 8, 5, 4, 5], [1, 2, 6, 2, 9, 5, 6, 9, 6, 8, 5, 5], [10, 5, 3, 1, 2, 3, 6, 2, 8, 1, 5, 9]],[1, 9, 6, 8, 5, 4, 2, 1, 8, 1, 8, 6], LST57393), 
LCon793 = concatenate_layer([LST57393,[[0.8166, 0.1888, 0.9961, 0.4345, 0.6453]]], 1, Con793), 
LAve15422 = average_layer([Fla81312,Con793], Ave15422), 
LRes93235 = reshape_layer(Ave15422, [8, 1], Res93235), 
LRes61952 = reshape_layer(Res93235, [8, 1, 1], Res61952), 
LRes48703 = reshape_layer(Res61952, [8, 1, 1, 1], Res48703), 
LZer99825 = zero_padding3D_layer(Res48703, 0, 0, 6, 0, 0, 0, Zer99825), 
LMin96261 = minimum_layer([[[[0.9995], [0.0186]]], [[[0.2241], [0.6262]]]], Min96261), 
LLoc70707 = locally_connected1D_layer(Min96261, 1,[[[0.823, 0.9279, 0.0436, 0.9817]], [[0.0175, 0.7538, 0.9363, 0.0189]]],[[0, 0, 0, 0], [0, 0, 0, 0]], 1, Loc70707), 
LRes54940 = reshape_layer(Loc70707, [2, 4, 1], Res54940), 
LRes61070 = reshape_layer(Res54940, [2, 4, 1, 1], Res61070), 
LUp_1050 = up_sampling3D_layer(Res61070, 2, 1, 1, Up_1050), 
LZer90556 = zero_padding3D_layer(Up_1050, 4, 0, 3, 0, 0, 0, Zer90556), 
LAdd47427 = add_layer([Zer99825,Zer90556], Add47427), 
exec_layers([LMin24317,LRes26900,LFla81312,LDot14843,LDen18170,LLST57393,LCon793,LAve15422,LRes93235,LRes61952,LRes48703,LZer99825,LMin96261,LLoc70707,LRes54940,LRes61070,LUp_1050,LZer90556,LAdd47427],["Min24317","Res26900","Fla81312","Dot14843","Den18170","LST57393","Con793","Ave15422","Res93235","Res61952","Res48703","Zer99825","Min96261","Loc70707","Res54940","Res61070","Up_1050","Zer90556","Add47427"],Add47427,"Add47427")

Actual (Unparsed): [[[[[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.7896638]]], [[[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.4854638]]], [[[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.7865638]]], [[[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.6222000]]], [[[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.1844343]], [[0.2079424]], [[0.0097708]], [[0.5429490]]], [[[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.1844343]], [[0.2079424]], [[0.0097708]], [[0.9508990]]], [[[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0003255]], [[0.0140207]], [[0.0174152]], [[0.2886515]]], [[[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0003255]], [[0.0140207]], [[0.0174152]], [[0.4849515]]]]]

Expected (Unparsed): [[[[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0.7896637787820172]]],[[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0.485463790037863]]],[[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0.7865637898826059]]],[[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0.6222]]],[[[0]],[[0]],[[0]],[[0.1844343]],[[0.20794238999999998]],[[0.00977076]],[[0.54294897]]],[[[0]],[[0]],[[0]],[[0.1844343]],[[0.20794238999999998]],[[0.00977076]],[[0.95089897]]],[[[0]],[[0]],[[0]],[[0.0003255]],[[0.014020679999999999]],[[0.01741518]],[[0.28865154]]],[[[0]],[[0]],[[0]],[[0.0003255]],[[0.014020679999999999]],[[0.01741518]],[[0.48495154]]]]]

Actual:   [[[[[0]], [[0]], [[0]], [[0]], [[0]], [[0]], [[0.7897]]], [[[0]], [[0]], [[0]], [[0]], [[0]], [[0]], [[0.4855]]], [[[0]], [[0]], [[0]], [[0]], [[0]], [[0]], [[0.7866]]], [[[0]], [[0]], [[0]], [[0]], [[0]], [[0]], [[0.6222]]], [[[0]], [[0]], [[0]], [[0.1845]], [[0.208]], [[0.0098]], [[0.543]]], [[[0]], [[0]], [[0]], [[0.1845]], [[0.208]], [[0.0098]], [[0.9509]]], [[[0]], [[0]], [[0]], [[0.0004]], [[0.0141]], [[0.0175]], [[0.2887]]], [[[0]], [[0]], [[0]], [[0.0004]], [[0.0141]], [[0.0175]], [[0.485]]]]]

Expected: [[[[[0]], [[0]], [[0]], [[0]], [[0]], [[0]], [[0.7897]]], [[[0]], [[0]], [[0]], [[0]], [[0]], [[0]], [[0.4855]]], [[[0]], [[0]], [[0]], [[0]], [[0]], [[0]], [[0.7866]]], [[[0]], [[0]], [[0]], [[0]], [[0]], [[0]], [[0.6222]]], [[[0]], [[0]], [[0]], [[0.1845]], [[0.208]], [[0.0098]], [[0.543]]], [[[0]], [[0]], [[0]], [[0.1845]], [[0.208]], [[0.0098]], [[0.9509]]], [[[0]], [[0]], [[0]], [[0.0004]], [[0.0141]], [[0.0175]], [[0.2887]]], [[[0]], [[0]], [[0]], [[0.0004]], [[0.0141]], [[0.0175]], [[0.485]]]]]