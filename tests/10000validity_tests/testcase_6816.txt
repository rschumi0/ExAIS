import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min12496 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Min12496 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con14223 = tf.keras.layers.Input(shape=([2, 4, 3]))
in0Min54453 = tf.keras.layers.Input(shape=([1, 1]))
in1Min54453 = tf.keras.layers.Input(shape=([1, 1]))

Min12496 = keras.layers.Minimum(name = 'Min12496', )([in0Min12496,in1Min12496])
Res29906 = keras.layers.Reshape((2, 1), name = 'Res29906', )(Min12496)
Con9559 = keras.layers.Conv1D(4, (1),strides=(1), padding='same', dilation_rate=(1), name = 'Con9559', )(Res29906)
Res9005 = keras.layers.Reshape((2, 4, 1), name = 'Res9005', )(Con9559)
Con14223 = keras.layers.Concatenate(axis=3, name = 'Con14223', )([Res9005,in0Con14223])
Min54453 = keras.layers.Minimum(name = 'Min54453', )([in0Min54453,in1Min54453])
Res88110 = keras.layers.Reshape((1, 1, 1), name = 'Res88110', )(Min54453)
Con75205 = keras.layers.Conv2D(4, (1, 1),strides=(1, 1), padding='same', dilation_rate=(1, 1), name = 'Con75205', )(Res88110)
Zer90905 = keras.layers.ZeroPadding2D(padding=((1, 0), (3, 0)), name = 'Zer90905', )(Con75205)
Add67828 = keras.layers.Add(name = 'Add67828', )([Con14223,Zer90905])
model = tf.keras.models.Model(inputs=[in0Min12496,in1Min12496,in0Con14223,in0Min54453,in1Min54453], outputs=Add67828)
w = model.get_layer('Con9559').get_weights() 
w[0] = np.array([[[0.4847, 0.643, 0.6455, 0.8932]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con9559').set_weights(w) 
w = model.get_layer('Con75205').get_weights() 
w[0] = np.array([[[[0.2489, 0.9175, 0.7768, 0.7093]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con75205').set_weights(w) 
in0Min12496 = tf.constant([[[[0.3188]], [[0.9452]]]])
in1Min12496 = tf.constant([[[[0.1933]], [[0.7177]]]])
in0Con14223 = tf.constant([[[[0.0572, 0.5265, 0.8504], [0.4257, 0.1698, 0.4296], [0.1612, 0.2752, 0.8486], [0.1029, 0.6209, 0.0777]], [[0.3149, 0.7682, 0.3963], [0.0046, 0.1843, 0.0089], [0.9345, 0.1767, 0.1308], [0.6183, 0.3563, 0.769]]]])
in0Min54453 = tf.constant([[[0.0598]]])
in1Min54453 = tf.constant([[[0.891]]])
print (np.array2string(model.predict([in0Min12496,in1Min12496,in0Con14223,in0Min54453,in1Min54453],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add67828.png')

LMin12496 = minimum_layer([[[[[0.3188]], [[0.9452]]]], [[[[0.1933]], [[0.7177]]]]], Min12496), 
LRes29906 = reshape_layer(Min12496, [2, 1], Res29906), 
LCon9559 = conv1D_layer(Res29906, 1,[[[0.4847, 0.643, 0.6455, 0.8932]]],[0, 0, 0, 0], 1, true, 1, Con9559), 
LRes9005 = reshape_layer(Con9559, [2, 4, 1], Res9005), 
LCon14223 = concatenate_layer([Res9005,[[[[0.0572, 0.5265, 0.8504], [0.4257, 0.1698, 0.4296], [0.1612, 0.2752, 0.8486], [0.1029, 0.6209, 0.0777]], [[0.3149, 0.7682, 0.3963], [0.0046, 0.1843, 0.0089], [0.9345, 0.1767, 0.1308], [0.6183, 0.3563, 0.769]]]]], 3, Con14223), 
LMin54453 = minimum_layer([[[[0.0598]]], [[[0.891]]]], Min54453), 
LRes88110 = reshape_layer(Min54453, [1, 1, 1], Res88110), 
LCon75205 = conv2D_layer(Res88110, 1, 1,[[[[0.2489, 0.9175, 0.7768, 0.7093]]]],[0, 0, 0, 0], 1, 1, true, 1, 1, Con75205), 
LZer90905 = zero_padding2D_layer(Con75205, 1, 0, 3, 0, Zer90905), 
LAdd67828 = add_layer([Con14223,Zer90905], Add67828), 
exec_layers([LMin12496,LRes29906,LCon9559,LRes9005,LCon14223,LMin54453,LRes88110,LCon75205,LZer90905,LAdd67828],["Min12496","Res29906","Con9559","Res9005","Con14223","Min54453","Res88110","Con75205","Zer90905","Add67828"],Add67828,"Add67828")

Actual (Unparsed): [[[[0.0936925, 0.0572000, 0.5265000, 0.8504000], [0.1242919, 0.4257000, 0.1698000, 0.4296000], [0.1247751, 0.1612000, 0.2752000, 0.8486000], [0.1726556, 0.1029000, 0.6209000, 0.0777000]], [[0.3478692, 0.3149000, 0.7682000, 0.3963000], [0.4614811, 0.0046000, 0.1843000, 0.0089000], [0.4632754, 0.9345000, 0.1767000, 0.1308000], [0.6559339, 0.6731665, 0.4027526, 0.8114161]]]]

Expected (Unparsed): [[[[0.09369251,0.0572,0.5265,0.8504],[0.1242919,0.4257,0.1698,0.4296],[0.12477514999999999,0.1612,0.2752,0.8486],[0.17265555999999999,0.1029,0.6209,0.0777]],[[0.34786919,0.3149,0.7682,0.3963],[0.46148110000000003,0.0046,0.1843,0.0089],[0.46327535,0.9345,0.1767,0.1308],[0.65593386,0.6731665,0.40275264,0.8114161400000001]]]]

Actual:   [[[[0.0937, 0.0572, 0.5265, 0.8504], [0.1243, 0.4257, 0.1698, 0.4296], [0.1248, 0.1612, 0.2752, 0.8486], [0.1727, 0.1029, 0.6209, 0.0777]], [[0.3479, 0.3149, 0.7682, 0.3963], [0.4615, 0.0046, 0.1843, 0.0089], [0.4633, 0.9345, 0.1767, 0.1308], [0.656, 0.6732, 0.4028, 0.8115]]]]

Expected: [[[[0.0937, 0.0572, 0.5265, 0.8504], [0.1243, 0.4257, 0.1698, 0.4296], [0.1248, 0.1612, 0.2752, 0.8486], [0.1727, 0.1029, 0.6209, 0.0777]], [[0.3479, 0.3149, 0.7682, 0.3963], [0.4615, 0.0046, 0.1843, 0.0089], [0.4633, 0.9345, 0.1767, 0.1308], [0.656, 0.6732, 0.4028, 0.8115]]]]