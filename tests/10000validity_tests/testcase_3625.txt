import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max69016 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in1Max69016 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Con13839 = tf.keras.layers.Input(shape=([1, 2, 3]))
in0Ave24851 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))
in1Ave24851 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))
in0Ave74691 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))
in1Ave74691 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))

Max69016 = keras.layers.Maximum(name = 'Max69016', )([in0Max69016,in1Max69016])
Res30183 = keras.layers.Reshape((1, 2, 1), name = 'Res30183', )(Max69016)
Con13839 = keras.layers.Concatenate(axis=3, name = 'Con13839', )([Res30183,in0Con13839])
Ave24851 = keras.layers.Average(name = 'Ave24851', )([in0Ave24851,in1Ave24851])
Res63433 = keras.layers.Reshape((1, 1, 4), name = 'Res63433', )(Ave24851)
Cro97178 = keras.layers.Cropping2D(cropping=((0, 0), (0, 0)), name = 'Cro97178', )(Res63433)
Zer15862 = keras.layers.ZeroPadding2D(padding=((0, 0), (1, 0)), name = 'Zer15862', )(Cro97178)
Ave29512 = keras.layers.Average(name = 'Ave29512', )([Con13839,Zer15862])
Res20869 = keras.layers.Reshape((1, 2, 4, 1), name = 'Res20869', )(Ave29512)
Ave74691 = keras.layers.Average(name = 'Ave74691', )([in0Ave74691,in1Ave74691])
Sof57744 = keras.layers.Softmax(axis=1, name = 'Sof57744', )(Ave74691)
Zer45247 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (3, 0)), name = 'Zer45247', )(Sof57744)
Sub43360 = keras.layers.Subtract(name = 'Sub43360', )([Res20869,Zer45247])
model = tf.keras.models.Model(inputs=[in0Max69016,in1Max69016,in0Con13839,in0Ave24851,in1Ave24851,in0Ave74691,in1Ave74691], outputs=Sub43360)
in0Max69016 = tf.constant([[[[[0.9211]], [[0.0478]]]]])
in1Max69016 = tf.constant([[[[[0.0838]], [[0.9976]]]]])
in0Con13839 = tf.constant([[[[0.0621, 0.0674, 0.7205], [0.1276, 0.6789, 0.0408]]]])
in0Ave24851 = tf.constant([[[[[0.6239, 0.9428], [0.6451, 0.823]]]]])
in1Ave24851 = tf.constant([[[[[0.7287, 0.2187], [0.012, 0.0364]]]]])
in0Ave74691 = tf.constant([[[[[0.7365]]]]])
in1Ave74691 = tf.constant([[[[[0.0439]]]]])
print (np.array2string(model.predict([in0Max69016,in1Max69016,in0Con13839,in0Ave24851,in1Ave24851,in0Ave74691,in1Ave74691],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub43360.png')

LMax69016 = maximum_layer([[[[[[0.9211]], [[0.0478]]]]], [[[[[0.0838]], [[0.9976]]]]]], Max69016), 
LRes30183 = reshape_layer(Max69016, [1, 2, 1], Res30183), 
LCon13839 = concatenate_layer([Res30183,[[[[0.0621, 0.0674, 0.7205], [0.1276, 0.6789, 0.0408]]]]], 3, Con13839), 
LAve24851 = average_layer([[[[[[0.6239, 0.9428], [0.6451, 0.823]]]]], [[[[[0.7287, 0.2187], [0.012, 0.0364]]]]]], Ave24851), 
LRes63433 = reshape_layer(Ave24851, [1, 1, 4], Res63433), 
LCro97178 = cropping2D_layer(Res63433, 0, 0, 0, 0, Cro97178), 
LZer15862 = zero_padding2D_layer(Cro97178, 0, 0, 1, 0, Zer15862), 
LAve29512 = average_layer([Con13839,Zer15862], Ave29512), 
LRes20869 = reshape_layer(Ave29512, [1, 2, 4, 1], Res20869), 
LAve74691 = average_layer([[[[[[0.7365]]]]], [[[[[0.0439]]]]]], Ave74691), 
LSof57744 = softmax_layer(Ave74691, 1, Sof57744), 
LZer45247 = zero_padding3D_layer(Sof57744, 0, 0, 1, 0, 3, 0, Zer45247), 
LSub43360 = subtract_layer(Res20869,Zer45247, Sub43360), 
exec_layers([LMax69016,LRes30183,LCon13839,LAve24851,LRes63433,LCro97178,LZer15862,LAve29512,LRes20869,LAve74691,LSof57744,LZer45247,LSub43360],["Max69016","Res30183","Con13839","Ave24851","Res63433","Cro97178","Zer15862","Ave29512","Res20869","Ave74691","Sof57744","Zer45247","Sub43360"],Sub43360,"Sub43360")

Actual (Unparsed): [[[[[0.4605500], [0.0310500], [0.0337000], [0.3602500]], [[0.8369500], [0.3541750], [0.5037250], [-0.7647500]]]]]

Expected (Unparsed): [[[[[0.46055],[0.03105],[0.0337],[0.36025]],[[0.8369500000000001],[0.354175],[0.503725],[-0.76475]]]]]

Actual:   [[[[[0.4606], [0.0311], [0.0337], [0.3603]], [[0.837], [0.3542], [0.5038], [-0.7647]]]]]

Expected: [[[[[0.4606], [0.0311], [0.0337], [0.3603]], [[0.837], [0.3542], [0.5038], [-0.7647]]]]]