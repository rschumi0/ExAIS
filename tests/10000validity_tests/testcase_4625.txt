import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max68289 = tf.keras.layers.Input(shape=([2, 2]))
in1Max68289 = tf.keras.layers.Input(shape=([2, 2]))
in0Mul26835 = tf.keras.layers.Input(shape=([1, 2]))
in1Mul26835 = tf.keras.layers.Input(shape=([1, 2]))
in0LST52059 = tf.keras.layers.Input(shape=([1, 3]))
in0Con66600 = tf.keras.layers.Input(shape=([2]))

Max68289 = keras.layers.Maximum(name = 'Max68289', )([in0Max68289,in1Max68289])
Mul26835 = keras.layers.Multiply(name = 'Mul26835', )([in0Mul26835,in1Mul26835])
Per26031 = keras.layers.Permute((1,2), name = 'Per26031',)(Mul26835)
Zer30953 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer30953', )(Per26031)
Min87019 = keras.layers.Minimum(name = 'Min87019', )([Max68289,Zer30953])
Lea41729 = keras.layers.LeakyReLU(alpha=7.268783069632827, name = 'Lea41729', )(Min87019)
Fla84446 = keras.layers.Flatten(name = 'Fla84446', )(Lea41729)
LST52059 = keras.layers.LSTM(2,recurrent_activation='sigmoid', name = 'LST52059', )(in0LST52059)
Con66600 = keras.layers.Concatenate(axis=1, name = 'Con66600', )([LST52059,in0Con66600])
Mul37454 = keras.layers.Multiply(name = 'Mul37454', )([Fla84446,Con66600])
model = tf.keras.models.Model(inputs=[in0Max68289,in1Max68289,in0Mul26835,in1Mul26835,in0LST52059,in0Con66600], outputs=Mul37454)
w = model.get_layer('LST52059').get_weights() 
w[0] = np.array([[10, 4, 6, 1, 5, 10, 5, 10], [8, 1, 4, 9, 10, 10, 4, 2], [10, 5, 6, 6, 8, 7, 8, 10]])
w[1] = np.array([[2, 9, 5, 1, 8, 7, 3, 6], [2, 2, 9, 8, 1, 3, 5, 4]])
w[2] = np.array([4, 3, 4, 3, 1, 1, 5, 7])
model.get_layer('LST52059').set_weights(w) 
in0Max68289 = tf.constant([[[0.0968, 0.2586], [0.1888, 0.526]]])
in1Max68289 = tf.constant([[[0.081, 0.2169], [0.3352, 0.1479]]])
in0Mul26835 = tf.constant([[[0.3794, 0.2748]]])
in1Mul26835 = tf.constant([[[0.2329, 0.355]]])
in0LST52059 = tf.constant([[[1, 6, 6]]])
in0Con66600 = tf.constant([[0.7821, 0.2967]])
print (np.array2string(model.predict([in0Max68289,in1Max68289,in0Mul26835,in1Mul26835,in0LST52059,in0Con66600],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul37454.png')

LMax68289 = maximum_layer([[[[0.0968, 0.2586], [0.1888, 0.526]]], [[[0.081, 0.2169], [0.3352, 0.1479]]]], Max68289), 
LMul26835 = multiply_layer([[[[0.3794, 0.2748]]], [[[0.2329, 0.355]]]], Mul26835), 
LPer26031 = permute_layer(Mul26835, 1,2, Per26031), 
LZer30953 = zero_padding1D_layer(Per26031, 1, 0, Zer30953), 
LMin87019 = minimum_layer([Max68289,Zer30953], Min87019), 
LLea41729 = leaky_relu_layer(Min87019, 7.268783069632827, Lea41729), 
LFla84446 = flatten_layer(Lea41729, Fla84446), 
LLST52059 = lstm_layer([[[1, 6, 6]]],[[10, 4, 6, 1, 5, 10, 5, 10], [8, 1, 4, 9, 10, 10, 4, 2], [10, 5, 6, 6, 8, 7, 8, 10]],[[2, 9, 5, 1, 8, 7, 3, 6], [2, 2, 9, 8, 1, 3, 5, 4]],[4, 3, 4, 3, 1, 1, 5, 7], LST52059), 
LCon66600 = concatenate_layer([LST52059,[[0.7821, 0.2967]]], 1, Con66600), 
LMul37454 = multiply_layer([Fla84446,Con66600], Mul37454), 
exec_layers([LMax68289,LMul26835,LPer26031,LZer30953,LMin87019,LLea41729,LFla84446,LLST52059,LCon66600,LMul37454],["Max68289","Mul26835","Per26031","Zer30953","Min87019","Lea41729","Fla84446","LST52059","Con66600","Mul37454"],Mul37454,"Mul37454")

Actual (Unparsed): [[0.0000000, 0.0000000, 0.0691081, 0.0289443]]

Expected (Unparsed): [[0.0,0.0,0.069108123546,0.028944271799999997]]

Actual:   [[0, 0, 0.0692, 0.029]]

Expected: [[0, 0, 0.0692, 0.029]]