import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add97758 = tf.keras.layers.Input(shape=([2, 2]))
in1Add97758 = tf.keras.layers.Input(shape=([2, 2]))
in0Ave30802 = tf.keras.layers.Input(shape=([1, 1]))
in0Con4319 = tf.keras.layers.Input(shape=([2, 1]))
in0Con67445 = tf.keras.layers.Input(shape=([4, 11, 1, 3]))
in0Mul97907 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Mul97907 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Dot34693 = tf.keras.layers.Input(shape=([3, 2]))
in1Dot34693 = tf.keras.layers.Input(shape=([3, 2]))
in0Con31032 = tf.keras.layers.Input(shape=([3, 5]))

Add97758 = keras.layers.Add(name = 'Add97758', )([in0Add97758,in1Add97758])
Ave30802 = keras.layers.AveragePooling1D(pool_size=(1), name = 'Ave30802', )(in0Ave30802)
Zer40578 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer40578', )(Ave30802)
Con4319 = keras.layers.Concatenate(axis=2, name = 'Con4319', )([Zer40578,in0Con4319])
Mul39459 = keras.layers.Multiply(name = 'Mul39459', )([Add97758,Con4319])
Res23539 = keras.layers.Reshape((2, 2, 1), name = 'Res23539', )(Mul39459)
Res87009 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res87009', )(Res23539)
Zer16964 = keras.layers.ZeroPadding3D(padding=((2, 0), (9, 0), (0, 0)), name = 'Zer16964', )(Res87009)
Con67445 = keras.layers.Concatenate(axis=4, name = 'Con67445', )([Zer16964,in0Con67445])
Mul97907 = keras.layers.Multiply(name = 'Mul97907', )([in0Mul97907,in1Mul97907])
Res72484 = keras.layers.Reshape((2, 2, 4), name = 'Res72484', )(Mul97907)
Res67111 = keras.layers.Reshape((2, 8), name = 'Res67111', )(Res72484)
Zer8869 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer8869', )(Res67111)
Dot34693 = keras.layers.Dot(axes=(2, 2), name = 'Dot34693', )([in0Dot34693,in1Dot34693])
Ave87693 = keras.layers.AveragePooling1D(pool_size=(1), name = 'Ave87693', )(Dot34693)
Con31032 = keras.layers.Concatenate(axis=2, name = 'Con31032', )([Ave87693,in0Con31032])
Min1872 = keras.layers.Minimum(name = 'Min1872', )([Zer8869,Con31032])
Res99554 = keras.layers.Reshape((3, 8, 1), name = 'Res99554', )(Min1872)
Res48230 = keras.layers.Reshape((3, 8, 1, 1), name = 'Res48230', )(Res99554)
Con65712 = keras.layers.Conv3DTranspose(4, (2, 4, 1),strides=(1, 1, 1), padding='valid', name = 'Con65712', )(Res48230)
Max3436 = keras.layers.Maximum(name = 'Max3436', )([Con67445,Con65712])
model = tf.keras.models.Model(inputs=[in0Add97758,in1Add97758,in0Ave30802,in0Con4319,in0Con67445,in0Mul97907,in1Mul97907,in0Dot34693,in1Dot34693,in0Con31032], outputs=Max3436)
w = model.get_layer('Con65712').get_weights() 
w[0] = np.array([[[[[0.0656], [0.3831], [0.8225], [0.9363]]], [[[0.8576], [0.3044], [0.1682], [0.0909]]], [[[0.5213], [0.5725], [0.3619], [0.5038]]], [[[0.405], [0.9796], [0.1107], [0.3725]]]], [[[[0.5672], [0.6071], [0.8377], [0.4663]]], [[[0.4131], [0.2609], [0.2959], [0.0746]]], [[[0.3069], [0.2085], [0.2302], [0.2103]]], [[[0.3038], [0.5707], [0.6385], [0.3787]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con65712').set_weights(w) 
in0Add97758 = tf.constant([[[0.2448, 0.8348], [0.9833, 0.6718]]])
in1Add97758 = tf.constant([[[0.2373, 0.0001], [0.2473, 0.9665]]])
in0Ave30802 = tf.constant([[[1.6654]]])
in0Con4319 = tf.constant([[[0.44], [0.6685]]])
in0Con67445 = tf.constant([[[[[0.6912, 0.363, 0.7114]], [[0.6258, 0.7944, 0.6312]], [[0.8716, 0.0089, 0.675]], [[0.2094, 0.8379, 0.6799]], [[0.7688, 0.5764, 0.962]], [[0.0136, 0.525, 0.502]], [[0.5609, 0.9144, 0.8325]], [[0.9379, 0.7354, 0.2178]], [[0.8686, 0.066, 0.4462]], [[0.8033, 0.9519, 0.2308]], [[0.9896, 0.8958, 0.3871]]], [[[0.3271, 0.6199, 0.2032]], [[0.35, 0.9739, 0.8297]], [[0.1248, 0.5737, 0.4634]], [[0.7163, 0.2527, 0.9729]], [[0.0409, 0.9403, 0.7841]], [[0.3676, 0.5481, 0.0107]], [[0.2652, 0.1553, 0.8395]], [[0.0219, 0.2927, 0.1204]], [[0.6683, 0.5081, 0.4177]], [[0.565, 0.9316, 0.7857]], [[0.5115, 0.6026, 0.2616]]], [[[0.005, 0.2854, 0.7605]], [[0.957, 0.151, 0.4852]], [[0.0074, 0.156, 0.3963]], [[0.5228, 0.9421, 0.9747]], [[0.5405, 0.9511, 0.1574]], [[0.053, 0.7451, 0.2427]], [[0.7297, 0.5847, 0.4175]], [[0.7881, 0.3733, 0.4413]], [[0.8856, 0.8938, 0.0482]], [[0.4433, 0.4593, 0.8347]], [[0.71, 0.1802, 0.5786]]], [[[0.6863, 0.4539, 0.0363]], [[0.0122, 0.7495, 0.5178]], [[0.2403, 0.4893, 0.869]], [[0.4825, 0.8223, 0.7218]], [[0.8406, 0.5358, 0.3398]], [[0.5063, 0.4059, 0.8516]], [[0.1088, 0.4831, 0.0404]], [[0.9743, 0.4656, 0.1719]], [[0.8548, 0.5998, 0.2771]], [[0.1062, 0.4506, 0.293]], [[0.5154, 0.2434, 0.4978]]]]])
in0Mul97907 = tf.constant([[[[[0.3581, 0.0553], [0.5406, 0.8439]], [[0.0894, 0.5682], [0.7588, 0.0798]]], [[[0.2504, 0.4374], [0.6658, 0.7213]], [[0.8464, 0.8951], [0.6953, 0.0926]]]]])
in1Mul97907 = tf.constant([[[[[0.3695, 0.5553], [0.1263, 0.6375]], [[0.9737, 0.3523], [0.8346, 0.3786]]], [[[0.0939, 0.0967], [0.4112, 0.3602]], [[0.9781, 0.4534], [0.7765, 0.0893]]]]])
in0Dot34693 = tf.constant([[[0.3037, 0.7595], [0.0044, 0.1157], [0.769, 0.9894]]])
in1Dot34693 = tf.constant([[[0.1896, 0.7957], [0.3173, 0.3499], [0.8407, 0.978]]])
in0Con31032 = tf.constant([[[0.505, 0.1179, 0.5307, 0.6067, 0.8198], [0.4893, 0.0702, 0.7603, 0.8333, 0.9063], [0.494, 0.7795, 0.2324, 0.1464, 0.1422]]])
print (np.array2string(model.predict([in0Add97758,in1Add97758,in0Ave30802,in0Con4319,in0Con67445,in0Mul97907,in1Mul97907,in0Dot34693,in1Dot34693,in0Con31032],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max3436.png')

LAdd97758 = add_layer([[[[0.2448, 0.8348], [0.9833, 0.6718]]], [[[0.2373, 0.0001], [0.2473, 0.9665]]]], Add97758), 
LAve30802 = average_pooling1D_layer([[[1.6654]]], 1, Ave30802), 
LZer40578 = zero_padding1D_layer(Ave30802, 1, 0, Zer40578), 
LCon4319 = concatenate_layer([Zer40578,[[[0.44], [0.6685]]]], 2, Con4319), 
LMul39459 = multiply_layer([Add97758,Con4319], Mul39459), 
LRes23539 = reshape_layer(Mul39459, [2, 2, 1], Res23539), 
LRes87009 = reshape_layer(Res23539, [2, 2, 1, 1], Res87009), 
LZer16964 = zero_padding3D_layer(Res87009, 2, 0, 9, 0, 0, 0, Zer16964), 
LCon67445 = concatenate_layer([Zer16964,[[[[[0.6912, 0.363, 0.7114]], [[0.6258, 0.7944, 0.6312]], [[0.8716, 0.0089, 0.675]], [[0.2094, 0.8379, 0.6799]], [[0.7688, 0.5764, 0.962]], [[0.0136, 0.525, 0.502]], [[0.5609, 0.9144, 0.8325]], [[0.9379, 0.7354, 0.2178]], [[0.8686, 0.066, 0.4462]], [[0.8033, 0.9519, 0.2308]], [[0.9896, 0.8958, 0.3871]]], [[[0.3271, 0.6199, 0.2032]], [[0.35, 0.9739, 0.8297]], [[0.1248, 0.5737, 0.4634]], [[0.7163, 0.2527, 0.9729]], [[0.0409, 0.9403, 0.7841]], [[0.3676, 0.5481, 0.0107]], [[0.2652, 0.1553, 0.8395]], [[0.0219, 0.2927, 0.1204]], [[0.6683, 0.5081, 0.4177]], [[0.565, 0.9316, 0.7857]], [[0.5115, 0.6026, 0.2616]]], [[[0.005, 0.2854, 0.7605]], [[0.957, 0.151, 0.4852]], [[0.0074, 0.156, 0.3963]], [[0.5228, 0.9421, 0.9747]], [[0.5405, 0.9511, 0.1574]], [[0.053, 0.7451, 0.2427]], [[0.7297, 0.5847, 0.4175]], [[0.7881, 0.3733, 0.4413]], [[0.8856, 0.8938, 0.0482]], [[0.4433, 0.4593, 0.8347]], [[0.71, 0.1802, 0.5786]]], [[[0.6863, 0.4539, 0.0363]], [[0.0122, 0.7495, 0.5178]], [[0.2403, 0.4893, 0.869]], [[0.4825, 0.8223, 0.7218]], [[0.8406, 0.5358, 0.3398]], [[0.5063, 0.4059, 0.8516]], [[0.1088, 0.4831, 0.0404]], [[0.9743, 0.4656, 0.1719]], [[0.8548, 0.5998, 0.2771]], [[0.1062, 0.4506, 0.293]], [[0.5154, 0.2434, 0.4978]]]]]], 4, Con67445), 
LMul97907 = multiply_layer([[[[[[0.3581, 0.0553], [0.5406, 0.8439]], [[0.0894, 0.5682], [0.7588, 0.0798]]], [[[0.2504, 0.4374], [0.6658, 0.7213]], [[0.8464, 0.8951], [0.6953, 0.0926]]]]], [[[[[0.3695, 0.5553], [0.1263, 0.6375]], [[0.9737, 0.3523], [0.8346, 0.3786]]], [[[0.0939, 0.0967], [0.4112, 0.3602]], [[0.9781, 0.4534], [0.7765, 0.0893]]]]]], Mul97907), 
LRes72484 = reshape_layer(Mul97907, [2, 2, 4], Res72484), 
LRes67111 = reshape_layer(Res72484, [2, 8], Res67111), 
LZer8869 = zero_padding1D_layer(Res67111, 1, 0, Zer8869), 
LDot34693 = dot_layer([[[0.3037, 0.7595], [0.0044, 0.1157], [0.769, 0.9894]]], [[[0.1896, 0.7957], [0.3173, 0.3499], [0.8407, 0.978]]], 2, 2, Dot34693), 
LAve87693 = average_pooling1D_layer(Dot34693, 1, Ave87693), 
LCon31032 = concatenate_layer([Ave87693,[[[0.505, 0.1179, 0.5307, 0.6067, 0.8198], [0.4893, 0.0702, 0.7603, 0.8333, 0.9063], [0.494, 0.7795, 0.2324, 0.1464, 0.1422]]]], 2, Con31032), 
LMin1872 = minimum_layer([Zer8869,Con31032], Min1872), 
LRes99554 = reshape_layer(Min1872, [3, 8, 1], Res99554), 
LRes48230 = reshape_layer(Res99554, [3, 8, 1, 1], Res48230), 
LCon65712 = conv3D_transpose_layer(Res48230, 2, 4, 1,[[[[[0.0656], [0.3831], [0.8225], [0.9363]]], [[[0.8576], [0.3044], [0.1682], [0.0909]]], [[[0.5213], [0.5725], [0.3619], [0.5038]]], [[[0.405], [0.9796], [0.1107], [0.3725]]]], [[[[0.5672], [0.6071], [0.8377], [0.4663]]], [[[0.4131], [0.2609], [0.2959], [0.0746]]], [[[0.3069], [0.2085], [0.2302], [0.2103]]], [[[0.3038], [0.5707], [0.6385], [0.3787]]]]],[0, 0, 0, 0], 1, 1, 1, false, Con65712), 
LMax3436 = maximum_layer([Con67445,Con65712], Max3436), 
exec_layers([LAdd97758,LAve30802,LZer40578,LCon4319,LMul39459,LRes23539,LRes87009,LZer16964,LCon67445,LMul97907,LRes72484,LRes67111,LZer8869,LDot34693,LAve87693,LCon31032,LMin1872,LRes99554,LRes48230,LCon65712,LMax3436],["Add97758","Ave30802","Zer40578","Con4319","Mul39459","Res23539","Res87009","Zer16964","Con67445","Mul97907","Res72484","Res67111","Zer8869","Dot34693","Ave87693","Con31032","Min1872","Res99554","Res48230","Con65712","Max3436"],Max3436,"Max3436")

Actual (Unparsed): [[[[[0.0000000, 0.6912000, 0.3630000, 0.7114000]], [[0.0000000, 0.6258000, 0.7944000, 0.6312000]], [[0.0000000, 0.8716000, 0.0089000, 0.6750000]], [[0.0000000, 0.2094000, 0.8379000, 0.6799000]], [[0.0000000, 0.7688000, 0.5764000, 0.9620000]], [[0.0000000, 0.0136000, 0.5250000, 0.5020000]], [[0.0000000, 0.5609000, 0.9144000, 0.8325000]], [[0.0000000, 0.9379000, 0.7354000, 0.2178000]], [[0.0000000, 0.8686000, 0.0660000, 0.4462000]], [[0.0000000, 0.8033000, 0.9519000, 0.2308000]], [[0.0000000, 0.9896000, 0.8958000, 0.3871000]]], [[[0.0060940, 0.3271000, 0.6199000, 0.2032000]], [[0.0816827, 0.3500000, 0.9739000, 0.8297000]], [[0.0792413, 0.1248000, 0.5737000, 0.4634000]], [[0.1442844, 0.7163000, 0.4353305, 0.9729000]], [[0.4722588, 0.2450072, 0.9403000, 0.7841000]], [[0.3560597, 0.4450658, 0.5481000, 0.4657496]], [[0.4479776, 0.8230567, 0.6341254, 0.8395000]], [[0.6778785, 0.3877183, 0.2927000, 0.2128528]], [[0.4371181, 0.6683000, 0.5081000, 0.4177000]], [[0.2722339, 0.6376718, 0.9316000, 0.7857000]], [[0.0122360, 0.5115000, 0.6026000, 0.2616000]]], [[[0.0542334, 0.0654053, 0.2854000, 0.7605000]], [[0.0787323, 0.9570000, 0.1510000, 0.4852000]], [[0.1464131, 0.2000521, 0.3284727, 0.3963000]], [[0.6267894, 0.6044060, 0.9421000, 0.9747000]], [[0.7060311, 0.7779222, 1.0275164, 1.0023711]], [[1.2435133, 1.0240744, 0.7912866, 0.7486640]], [[1.3325788, 1.5581837, 1.3886872, 1.1579910]], [[0.9244541, 1.2097477, 0.5054262, 0.5585108]], [[0.4451845, 0.8856000, 0.8938000, 0.3723196]], [[0.2652697, 0.5158680, 0.4593000, 0.8347000]], [[0.3673560, 0.7100000, 0.1802000, 0.5786000]]], [[[0.0133363, 0.6863000, 0.4539000, 0.0363000]], [[0.0337037, 0.0318127, 0.7495000, 0.5178000]], [[0.1799750, 0.2403000, 0.4893000, 0.8690000]], [[0.2805867, 0.4825000, 0.8223000, 0.7218000]], [[0.6463327, 0.8406000, 0.8198954, 0.4564559]], [[0.6167385, 0.5548769, 0.6599509, 0.8516000]], [[0.4972020, 0.4603132, 0.5367375, 0.3479231]], [[0.3733038, 0.9743000, 0.6014561, 0.3588477]], [[0.1189493, 0.8548000, 0.5998000, 0.2771000]], [[2.0494412, 0.1062000, 0.4506000, 0.2930000]], [[1.0952036, 0.5154000, 0.2434000, 0.4978000]]]]]

Expected (Unparsed): [[[[[0,0.6912,0.363,0.7114]],[[0,0.6258,0.7944,0.6312]],[[0,0.8716,0.0089,0.675]],[[0,0.2094,0.8379,0.6799]],[[0,0.7688,0.5764,0.962]],[[0,0.0136,0.525,0.502]],[[0,0.5609,0.9144,0.8325]],[[0,0.9379,0.7354,0.2178]],[[0,0.8686,0.066,0.4462]],[[0,0.8033,0.9519,0.2308]],[[0,0.9896,0.8958,0.3871]]],[[[0.006094025488,0.3271,0.6199,0.2032]],[[0.081682686352,0.35,0.9739,0.8297]],[[0.079241345701,0.1248,0.5737,0.4634]],[[0.144284407095,0.7163,0.43533049837800003,0.9729]],[[0.472258783164,0.24500721401400002,0.9403,0.7841]],[[0.35605971291599997,0.445065798354,0.5481,0.465749587068]],[[0.44797755302400005,0.8230567314720001,0.634125347652,0.8395]],[[0.677878468734,0.38771833653,0.2927,0.21285282806400002]],[[0.437118092052,0.6683,0.5081,0.4177]],[[0.272233925964,0.637671802908,0.9316,0.7857]],[[0.012235973399999999,0.5115,0.6026,0.2616]]],[[[0.054233449192,0.065405266519,0.2854,0.7605]],[[0.078732294915,0.957,0.151,0.4852]],[[0.14641308834400002,0.200052122052,0.328472677203,0.3963]],[[0.626789449419,0.604405982634,0.9421,0.9747]],[[0.706031076748,0.777922155405,1.027516355783,1.002371103749]],[[1.243513334494,1.0240743996179997,0.791286624518,0.748663979292]],[[1.332578805222,1.558183671478,1.388687155952,1.15799102663]],[[0.9244541114460001,1.209747703188,0.5054261673099999,0.558510751264]],[[0.44518446761600006,0.8856,0.8938,0.372319630576]],[[0.26526973529000003,0.5158679656659999,0.4593,0.8347]],[[0.367356,0.71,0.1802,0.5786]]],[[[0.013336324032000002,0.6863,0.4539,0.0363]],[[0.033703658712000005,0.031812680621999996,0.7495,0.5178]],[[0.17997501357399998,0.2403,0.4893,0.869]],[[0.280586712178,0.4825,0.8223,0.7218]],[[0.646332694634,0.8406,0.8198954202559999,0.45645585412999995]],[[0.6167385530420001,0.554876957282,0.659950901212,0.8516]],[[0.497202034588,0.46031320678200005,0.53673746801,0.34792311286199995]],[[0.37330377889599997,0.9743,0.6014560820859999,0.35884772863399994]],[[0.11894927825800002,0.8548,0.5998,0.2771]],[[2.0494412399999997,0.1062,0.4506,0.293]],[[1.0952035500000001,0.5154,0.2434,0.4978]]]]]

Actual:   [[[[[0, 0.6912, 0.363, 0.7114]], [[0, 0.6258, 0.7944, 0.6312]], [[0, 0.8716, 0.0089, 0.675]], [[0, 0.2094, 0.8379, 0.6799]], [[0, 0.7688, 0.5764, 0.962]], [[0, 0.0136, 0.525, 0.502]], [[0, 0.5609, 0.9144, 0.8325]], [[0, 0.9379, 0.7354, 0.2178]], [[0, 0.8686, 0.066, 0.4462]], [[0, 0.8033, 0.9519, 0.2308]], [[0, 0.9896, 0.8958, 0.3871]]], [[[0.0061, 0.3271, 0.6199, 0.2032]], [[0.0817, 0.35, 0.9739, 0.8297]], [[0.0793, 0.1248, 0.5737, 0.4634]], [[0.1443, 0.7163, 0.4354, 0.9729]], [[0.4723, 0.2451, 0.9403, 0.7841]], [[0.3561, 0.4451, 0.5481, 0.4658]], [[0.448, 0.8231, 0.6342, 0.8395]], [[0.6779, 0.3878, 0.2927, 0.2129]], [[0.4372, 0.6683, 0.5081, 0.4177]], [[0.2723, 0.6377, 0.9316, 0.7857]], [[0.0123, 0.5115, 0.6026, 0.2616]]], [[[0.0543, 0.0655, 0.2854, 0.7605]], [[0.0788, 0.957, 0.151, 0.4852]], [[0.1465, 0.2001, 0.3285, 0.3963]], [[0.6268, 0.6045, 0.9421, 0.9747]], [[0.7061, 0.778, 1.0276, 1.0024]], [[1.2436, 1.0241, 0.7913, 0.7487]], [[1.3326, 1.5582, 1.3887, 1.158]], [[0.9245, 1.2098, 0.5055, 0.5586]], [[0.4452, 0.8856, 0.8938, 0.3724]], [[0.2653, 0.5159, 0.4593, 0.8347]], [[0.3674, 0.71, 0.1802, 0.5786]]], [[[0.0134, 0.6863, 0.4539, 0.0363]], [[0.0338, 0.0319, 0.7495, 0.5178]], [[0.18, 0.2403, 0.4893, 0.869]], [[0.2806, 0.4825, 0.8223, 0.7218]], [[0.6464, 0.8406, 0.8199, 0.4565]], [[0.6168, 0.5549, 0.66, 0.8516]], [[0.4973, 0.4604, 0.5368, 0.348]], [[0.3734, 0.9743, 0.6015, 0.3589]], [[0.119, 0.8548, 0.5998, 0.2771]], [[2.0495, 0.1062, 0.4506, 0.293]], [[1.0953, 0.5154, 0.2434, 0.4978]]]]]

Expected: [[[[[0, 0.6912, 0.363, 0.7114]], [[0, 0.6258, 0.7944, 0.6312]], [[0, 0.8716, 0.0089, 0.675]], [[0, 0.2094, 0.8379, 0.6799]], [[0, 0.7688, 0.5764, 0.962]], [[0, 0.0136, 0.525, 0.502]], [[0, 0.5609, 0.9144, 0.8325]], [[0, 0.9379, 0.7354, 0.2178]], [[0, 0.8686, 0.066, 0.4462]], [[0, 0.8033, 0.9519, 0.2308]], [[0, 0.9896, 0.8958, 0.3871]]], [[[0.0061, 0.3271, 0.6199, 0.2032]], [[0.0817, 0.35, 0.9739, 0.8297]], [[0.0793, 0.1248, 0.5737, 0.4634]], [[0.1443, 0.7163, 0.4354, 0.9729]], [[0.4723, 0.2451, 0.9403, 0.7841]], [[0.3561, 0.4451, 0.5481, 0.4658]], [[0.448, 0.8231, 0.6342, 0.8395]], [[0.6779, 0.3878, 0.2927, 0.2129]], [[0.4372, 0.6683, 0.5081, 0.4177]], [[0.2723, 0.6377, 0.9316, 0.7857]], [[0.0123, 0.5115, 0.6026, 0.2616]]], [[[0.0543, 0.0655, 0.2854, 0.7605]], [[0.0788, 0.957, 0.151, 0.4852]], [[0.1465, 0.2001, 0.3285, 0.3963]], [[0.6268, 0.6045, 0.9421, 0.9747]], [[0.7061, 0.778, 1.0276, 1.0024]], [[1.2436, 1.0241, 0.7913, 0.7487]], [[1.3326, 1.5582, 1.3887, 1.158]], [[0.9245, 1.2098, 0.5055, 0.5586]], [[0.4452, 0.8856, 0.8938, 0.3724]], [[0.2653, 0.5159, 0.4593, 0.8347]], [[0.3674, 0.71, 0.1802, 0.5786]]], [[[0.0134, 0.6863, 0.4539, 0.0363]], [[0.0338, 0.0319, 0.7495, 0.5178]], [[0.18, 0.2403, 0.4893, 0.869]], [[0.2806, 0.4825, 0.8223, 0.7218]], [[0.6464, 0.8406, 0.8199, 0.4565]], [[0.6168, 0.5549, 0.66, 0.8516]], [[0.4973, 0.4604, 0.5368, 0.348]], [[0.3734, 0.9743, 0.6015, 0.3589]], [[0.119, 0.8548, 0.5998, 0.2771]], [[2.0495, 0.1062, 0.4506, 0.293]], [[1.0953, 0.5154, 0.2434, 0.4978]]]]]