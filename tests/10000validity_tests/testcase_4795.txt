import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo35342 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con85168 = tf.keras.layers.Input(shape=([1, 1]))
in0Cro24452 = tf.keras.layers.Input(shape=([2, 2]))
in0Up_9338 = tf.keras.layers.Input(shape=([2, 2, 4]))

Glo35342 = keras.layers.GlobalMaxPool2D(name = 'Glo35342', )(in0Glo35342)
Res59751 = keras.layers.Reshape((1, 1), name = 'Res59751', )(Glo35342)
Con85168 = keras.layers.Concatenate(axis=2, name = 'Con85168', )([Res59751,in0Con85168])
Cro24452 = keras.layers.Cropping1D(cropping=((0, 1)), name = 'Cro24452', )(in0Cro24452)
Max61165 = keras.layers.Maximum(name = 'Max61165', )([Con85168,Cro24452])
Res50503 = keras.layers.Reshape((1, 2, 1), name = 'Res50503', )(Max61165)
Res46246 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res46246', )(Res50503)
Cro12640 = keras.layers.Cropping3D(cropping=((0, 0), (1, 0), (0, 0)), name = 'Cro12640', )(Res46246)
Res2953 = keras.layers.Reshape((1, 1, 1), name = 'Res2953', )(Cro12640)
Res93033 = keras.layers.Reshape((1, 1), name = 'Res93033', )(Res2953)
Zer47277 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer47277', )(Res93033)
Up_9338 = keras.layers.UpSampling2D(size=(1, 2), name = 'Up_9338', )(in0Up_9338)
Glo42880 = keras.layers.GlobalMaxPool2D(name = 'Glo42880', )(Up_9338)
Res86405 = keras.layers.Reshape((4, 1), name = 'Res86405', )(Glo42880)
PRe51054 = keras.layers.PReLU(name = 'PRe51054', )(Res86405)
Mul65950 = keras.layers.Multiply(name = 'Mul65950', )([Zer47277,PRe51054])
model = tf.keras.models.Model(inputs=[in0Glo35342,in0Con85168,in0Cro24452,in0Up_9338], outputs=Mul65950)
w = model.get_layer('PRe51054').get_weights() 
w[0] = np.array([[0.4044], [0.6541], [0.4567], [0.5784]])
model.get_layer('PRe51054').set_weights(w) 
in0Glo35342 = tf.constant([[[[1.0897]], [[1.9564]]]])
in0Con85168 = tf.constant([[[0.5653]]])
in0Cro24452 = tf.constant([[[1.5563, 1.6845], [1.154, 1.0562]]])
in0Up_9338 = tf.constant([[[[1.6115, 1.8616, 1.7031, 1.3486], [1.3717, 1.8943, 1.6603, 1.2088]], [[1.7096, 1.2414, 1.3433, 1.6399], [1.23, 1.4854, 1.1356, 1.0995]]]])
print (np.array2string(model.predict([in0Glo35342,in0Con85168,in0Cro24452,in0Up_9338],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul65950.png')

LGlo35342 = global_max_pool2D_layer([[[[1.0897]], [[1.9564]]]], Glo35342), 
LRes59751 = reshape_layer(Glo35342, [1, 1], Res59751), 
LCon85168 = concatenate_layer([Res59751,[[[0.5653]]]], 2, Con85168), 
LCro24452 = cropping1D_layer([[[1.5563, 1.6845], [1.154, 1.0562]]], 0, 1, Cro24452), 
LMax61165 = maximum_layer([Con85168,Cro24452], Max61165), 
LRes50503 = reshape_layer(Max61165, [1, 2, 1], Res50503), 
LRes46246 = reshape_layer(Res50503, [1, 2, 1, 1], Res46246), 
LCro12640 = cropping3D_layer(Res46246, 0, 0, 1, 0, 0, 0, Cro12640), 
LRes2953 = reshape_layer(Cro12640, [1, 1, 1], Res2953), 
LRes93033 = reshape_layer(Res2953, [1, 1], Res93033), 
LZer47277 = zero_padding1D_layer(Res93033, 3, 0, Zer47277), 
LUp_9338 = up_sampling2D_layer([[[[1.6115, 1.8616, 1.7031, 1.3486], [1.3717, 1.8943, 1.6603, 1.2088]], [[1.7096, 1.2414, 1.3433, 1.6399], [1.23, 1.4854, 1.1356, 1.0995]]]], 1, 2, Up_9338), 
LGlo42880 = global_max_pool2D_layer(Up_9338, Glo42880), 
LRes86405 = reshape_layer(Glo42880, [4, 1], Res86405), 
LPRe51054 = prelu_layer(Res86405, [[0.4044], [0.6541], [0.4567], [0.5784]], PRe51054), 
LMul65950 = multiply_layer([Zer47277,PRe51054], Mul65950), 
exec_layers([LGlo35342,LRes59751,LCon85168,LCro24452,LMax61165,LRes50503,LRes46246,LCro12640,LRes2953,LRes93033,LZer47277,LUp_9338,LGlo42880,LRes86405,LPRe51054,LMul65950],["Glo35342","Res59751","Con85168","Cro24452","Max61165","Res50503","Res46246","Cro12640","Res2953","Res93033","Zer47277","Up_9338","Glo42880","Res86405","PRe51054","Mul65950"],Mul65950,"Mul65950")

Actual (Unparsed): [[[0.0000000], [0.0000000], [0.0000000], [2.7624115]]]

Expected (Unparsed): [[[0.0],[0.0],[0.0],[2.76241155]]]

Actual:   [[[0], [0], [0], [2.7625]]]

Expected: [[[0], [0], [0], [2.7625]]]