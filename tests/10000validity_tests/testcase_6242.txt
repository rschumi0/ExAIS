import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mas92392 = tf.keras.layers.Input(shape=([1, 1]))
in0Con31110 = tf.keras.layers.Input(shape=([4, 9]))
in0Up_43412 = tf.keras.layers.Input(shape=([2, 2, 3]))

Mas92392 = keras.layers.Masking(mask_value=2, name = 'Mas92392', )(in0Mas92392)
Res46171 = keras.layers.Reshape((1, 1, 1), name = 'Res46171', )(Mas92392)
Glo97364 = keras.layers.GlobalMaxPool2D(name = 'Glo97364', )(Res46171)
Res47766 = keras.layers.Reshape((1, 1), name = 'Res47766', )(Glo97364)
Res57018 = keras.layers.Reshape((1, 1, 1), name = 'Res57018', )(Res47766)
Zer50191 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer50191', )(Res57018)
Res74959 = keras.layers.Reshape((3, 3), name = 'Res74959', )(Zer50191)
Zer38319 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer38319', )(Res74959)
Con31110 = keras.layers.Concatenate(axis=2, name = 'Con31110', )([Zer38319,in0Con31110])
Up_43412 = keras.layers.UpSampling2D(size=(1, 2), name = 'Up_43412', )(in0Up_43412)
Sof52092 = keras.layers.Softmax(axis=1, name = 'Sof52092', )(Up_43412)
Res71411 = keras.layers.Reshape((2, 12), name = 'Res71411', )(Sof52092)
Zer1516 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer1516', )(Res71411)
Max59439 = keras.layers.Maximum(name = 'Max59439', )([Con31110,Zer1516])
model = tf.keras.models.Model(inputs=[in0Mas92392,in0Con31110,in0Up_43412], outputs=Max59439)
in0Mas92392 = tf.constant([[[1.1209]]])
in0Con31110 = tf.constant([[[0.8929, 0.0298, 0.5527, 0.1971, 0.9961, 0.7053, 0.7555, 0.0781, 0.7937], [0.5857, 0.9405, 0.5834, 0.774, 0.0193, 0.2784, 0.1995, 0.0459, 0.2869], [0.4091, 0.5833, 0.566, 0.0935, 0.35, 0.9917, 0.8322, 0.5098, 0.928], [0.1461, 0.808, 0.4658, 0.3498, 0.7286, 0.4507, 0.0688, 0.5795, 0.4646]]])
in0Up_43412 = tf.constant([[[[1.5002, 1.7035, 1.6964], [1.1276, 1.9557, 1.8666]], [[1.1273, 1.3306, 1.0223], [1.4381, 1.679, 1.9723]]]])
print (np.array2string(model.predict([in0Mas92392,in0Con31110,in0Up_43412],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max59439.png')

LMas92392 = masking_layer([[[1.1209]]], 2, Mas92392), 
LRes46171 = reshape_layer(Mas92392, [1, 1, 1], Res46171), 
LGlo97364 = global_max_pool2D_layer(Res46171, Glo97364), 
LRes47766 = reshape_layer(Glo97364, [1, 1], Res47766), 
LRes57018 = reshape_layer(Res47766, [1, 1, 1], Res57018), 
LZer50191 = zero_padding2D_layer(Res57018, 1, 1, 1, 1, Zer50191), 
LRes74959 = reshape_layer(Zer50191, [3, 3], Res74959), 
LZer38319 = zero_padding1D_layer(Res74959, 1, 0, Zer38319), 
LCon31110 = concatenate_layer([Zer38319,[[[0.8929, 0.0298, 0.5527, 0.1971, 0.9961, 0.7053, 0.7555, 0.0781, 0.7937], [0.5857, 0.9405, 0.5834, 0.774, 0.0193, 0.2784, 0.1995, 0.0459, 0.2869], [0.4091, 0.5833, 0.566, 0.0935, 0.35, 0.9917, 0.8322, 0.5098, 0.928], [0.1461, 0.808, 0.4658, 0.3498, 0.7286, 0.4507, 0.0688, 0.5795, 0.4646]]]], 2, Con31110), 
LUp_43412 = up_sampling2D_layer([[[[1.5002, 1.7035, 1.6964], [1.1276, 1.9557, 1.8666]], [[1.1273, 1.3306, 1.0223], [1.4381, 1.679, 1.9723]]]], 1, 2, Up_43412), 
LSof52092 = softmax_layer(Up_43412, 1, Sof52092), 
LRes71411 = reshape_layer(Sof52092, [2, 12], Res71411), 
LZer1516 = zero_padding1D_layer(Res71411, 1, 1, Zer1516), 
LMax59439 = maximum_layer([Con31110,Zer1516], Max59439), 
exec_layers([LMas92392,LRes46171,LGlo97364,LRes47766,LRes57018,LZer50191,LRes74959,LZer38319,LCon31110,LUp_43412,LSof52092,LRes71411,LZer1516,LMax59439],["Mas92392","Res46171","Glo97364","Res47766","Res57018","Zer50191","Res74959","Zer38319","Con31110","Up_43412","Sof52092","Res71411","Zer1516","Max59439"],Max59439,"Max59439")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.8929000, 0.0298000, 0.5527000, 0.1971000, 0.9961000, 0.7053000, 0.7555000, 0.0781000, 0.7937000], [0.5921595, 0.5921595, 0.6624206, 0.5921595, 0.9405000, 0.6624206, 0.7740000, 0.5687370, 0.4735996, 0.4229927, 0.5687370, 0.4735996], [0.4078405, 1.1209000, 0.3375794, 0.4091000, 0.5833000, 0.5660000, 0.5770073, 0.4312630, 0.9917000, 0.8322000, 0.5098000, 0.9280000], [0.0000000, 0.0000000, 0.0000000, 0.1461000, 0.8080000, 0.4658000, 0.3498000, 0.7286000, 0.4507000, 0.0688000, 0.5795000, 0.4646000]]]

Expected (Unparsed): [[[0,0,0,0.8929,0.0298,0.5527,0.1971,0.9961,0.7053,0.7555,0.0781,0.7937],[0.592159534372894,0.5921595343728941,0.6624206090077133,0.592159534372894,0.9405,0.6624206090077133,0.774,0.5687369999896204,0.4735995752976593,0.4229926992337104,0.5687369999896204,0.4735995752976593],[0.40784046562710585,1.1209,0.3375793909922866,0.4091,0.5833,0.566,0.5770073007662896,0.43126300001037954,0.9917,0.8322,0.5098,0.928],[0,0,0,0.1461,0.808,0.4658,0.3498,0.7286,0.4507,0.0688,0.5795,0.4646]]]

Actual:   [[[0, 0, 0, 0.8929, 0.0298, 0.5527, 0.1971, 0.9961, 0.7053, 0.7555, 0.0781, 0.7937], [0.5922, 0.5922, 0.6625, 0.5922, 0.9405, 0.6625, 0.774, 0.5688, 0.4736, 0.423, 0.5688, 0.4736], [0.4079, 1.1209, 0.3376, 0.4091, 0.5833, 0.566, 0.5771, 0.4313, 0.9917, 0.8322, 0.5098, 0.928], [0, 0, 0, 0.1461, 0.808, 0.4658, 0.3498, 0.7286, 0.4507, 0.0688, 0.5795, 0.4646]]]

Expected: [[[0, 0, 0, 0.8929, 0.0298, 0.5527, 0.1971, 0.9961, 0.7053, 0.7555, 0.0781, 0.7937], [0.5922, 0.5922, 0.6625, 0.5922, 0.9405, 0.6625, 0.774, 0.5688, 0.4736, 0.423, 0.5688, 0.4736], [0.4079, 1.1209, 0.3376, 0.4091, 0.5833, 0.566, 0.5771, 0.4313, 0.9917, 0.8322, 0.5098, 0.928], [0, 0, 0, 0.1461, 0.808, 0.4658, 0.3498, 0.7286, 0.4507, 0.0688, 0.5795, 0.4646]]]