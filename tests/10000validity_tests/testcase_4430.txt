import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul31382 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in1Mul31382 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Mul83630 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Mul83630 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con43048 = tf.keras.layers.Input(shape=([10, 3, 2]))

Mul31382 = keras.layers.Multiply(name = 'Mul31382', )([in0Mul31382,in1Mul31382])
Fla66733 = keras.layers.Flatten(name = 'Fla66733', )(Mul31382)
Res49731 = keras.layers.Reshape((8, 1), name = 'Res49731', )(Fla66733)
Res6318 = keras.layers.Reshape((8, 1, 1), name = 'Res6318', )(Res49731)
Res3869 = keras.layers.Reshape((8, 1, 1, 1), name = 'Res3869', )(Res6318)
Zer52577 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer52577', )(Res3869)
Res20214 = keras.layers.Reshape((10, 3, 3), name = 'Res20214', )(Zer52577)
Mul83630 = keras.layers.Multiply(name = 'Mul83630', )([in0Mul83630,in1Mul83630])
Lea83974 = keras.layers.LeakyReLU(alpha=0.7459968216864138, name = 'Lea83974', )(Mul83630)
Zer4232 = keras.layers.ZeroPadding2D(padding=((8, 0), (1, 0)), name = 'Zer4232', )(Lea83974)
Con43048 = keras.layers.Concatenate(axis=3, name = 'Con43048', )([Zer4232,in0Con43048])
Add81821 = keras.layers.Add(name = 'Add81821', )([Res20214,Con43048])
model = tf.keras.models.Model(inputs=[in0Mul31382,in1Mul31382,in0Mul83630,in1Mul83630,in0Con43048], outputs=Add81821)
in0Mul31382 = tf.constant([[[[[0.5209], [0.6988]], [[0.1204], [0.6844]]], [[[0.6081], [0.3136]], [[0.937], [0.9575]]]]])
in1Mul31382 = tf.constant([[[[[0.2822], [0.8794]], [[0.6544], [0.7923]]], [[[0.3134], [0.2]], [[0.0027], [0.4419]]]]])
in0Mul83630 = tf.constant([[[[0.7899], [0.7478]], [[0.1236], [0.2584]]]])
in1Mul83630 = tf.constant([[[[0.8468], [0.3299]], [[0.297], [0.7777]]]])
in0Con43048 = tf.constant([[[[0.5965, 0.0574], [0.2409, 0.4839], [0.2226, 0.4902]], [[0.339, 0.6371], [0.155, 0.9297], [0.7574, 0.9895]], [[0.233, 0.864], [0.0725, 0.1407], [0.1284, 0.5457]], [[0.9085, 0.0683], [0.7874, 0.0706], [0.7527, 0.3134]], [[0.0154, 0.3451], [0.8233, 0.035], [0.1044, 0.9621]], [[0.7726, 0.9496], [0.1765, 0.8173], [0.9231, 0.7513]], [[0.2233, 0.8953], [0.6805, 0.4677], [0.6569, 0.0289]], [[0.746, 0.351], [0.5584, 0.5931], [0.7569, 0.3214]], [[0.7072, 0.0327], [0.0272, 0.6912], [0.9047, 0.8442]], [[0.1298, 0.8748], [0.0719, 0.1312], [0.1632, 0.0655]]]])
print (np.array2string(model.predict([in0Mul31382,in1Mul31382,in0Mul83630,in1Mul83630,in0Con43048],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add81821.png')

LMul31382 = multiply_layer([[[[[[0.5209], [0.6988]], [[0.1204], [0.6844]]], [[[0.6081], [0.3136]], [[0.937], [0.9575]]]]], [[[[[0.2822], [0.8794]], [[0.6544], [0.7923]]], [[[0.3134], [0.2]], [[0.0027], [0.4419]]]]]], Mul31382), 
LFla66733 = flatten_layer(Mul31382, Fla66733), 
LRes49731 = reshape_layer(Fla66733, [8, 1], Res49731), 
LRes6318 = reshape_layer(Res49731, [8, 1, 1], Res6318), 
LRes3869 = reshape_layer(Res6318, [8, 1, 1, 1], Res3869), 
LZer52577 = zero_padding3D_layer(Res3869, 1, 1, 1, 1, 1, 1, Zer52577), 
LRes20214 = reshape_layer(Zer52577, [10, 3, 3], Res20214), 
LMul83630 = multiply_layer([[[[[0.7899], [0.7478]], [[0.1236], [0.2584]]]], [[[[0.8468], [0.3299]], [[0.297], [0.7777]]]]], Mul83630), 
LLea83974 = leaky_relu_layer(Mul83630, 0.7459968216864138, Lea83974), 
LZer4232 = zero_padding2D_layer(Lea83974, 8, 0, 1, 0, Zer4232), 
LCon43048 = concatenate_layer([Zer4232,[[[[0.5965, 0.0574], [0.2409, 0.4839], [0.2226, 0.4902]], [[0.339, 0.6371], [0.155, 0.9297], [0.7574, 0.9895]], [[0.233, 0.864], [0.0725, 0.1407], [0.1284, 0.5457]], [[0.9085, 0.0683], [0.7874, 0.0706], [0.7527, 0.3134]], [[0.0154, 0.3451], [0.8233, 0.035], [0.1044, 0.9621]], [[0.7726, 0.9496], [0.1765, 0.8173], [0.9231, 0.7513]], [[0.2233, 0.8953], [0.6805, 0.4677], [0.6569, 0.0289]], [[0.746, 0.351], [0.5584, 0.5931], [0.7569, 0.3214]], [[0.7072, 0.0327], [0.0272, 0.6912], [0.9047, 0.8442]], [[0.1298, 0.8748], [0.0719, 0.1312], [0.1632, 0.0655]]]]], 3, Con43048), 
LAdd81821 = add_layer([Res20214,Con43048], Add81821), 
exec_layers([LMul31382,LFla66733,LRes49731,LRes6318,LRes3869,LZer52577,LRes20214,LMul83630,LLea83974,LZer4232,LCon43048,LAdd81821],["Mul31382","Fla66733","Res49731","Res6318","Res3869","Zer52577","Res20214","Mul83630","Lea83974","Zer4232","Con43048","Add81821"],Add81821,"Add81821")

Actual (Unparsed): [[[[0.0000000, 0.5965000, 0.0574000], [0.0000000, 0.2409000, 0.4839000], [0.0000000, 0.2226000, 0.4902000]], [[0.0000000, 0.3390000, 0.6371000], [0.0000000, 0.3019980, 0.9297000], [0.0000000, 0.7574000, 0.9895000]], [[0.0000000, 0.2330000, 0.8640000], [0.0000000, 0.6870248, 0.1407000], [0.0000000, 0.1284000, 0.5457000]], [[0.0000000, 0.9085000, 0.0683000], [0.0000000, 0.8661898, 0.0706000], [0.0000000, 0.7527000, 0.3134000]], [[0.0000000, 0.0154000, 0.3451000], [0.0000000, 1.3655501, 0.0350000], [0.0000000, 0.1044000, 0.9621000]], [[0.0000000, 0.7726000, 0.9496000], [0.0000000, 0.3670785, 0.8173000], [0.0000000, 0.9231000, 0.7513000]], [[0.0000000, 0.2233000, 0.8953000], [0.0000000, 0.7432200, 0.4677000], [0.0000000, 0.6569000, 0.0289000]], [[0.0000000, 0.7460000, 0.3510000], [0.0000000, 0.5609299, 0.5931000], [0.0000000, 0.7569000, 0.3214000]], [[0.0000000, 0.7072000, 0.0327000], [0.6688873, 0.4503193, 0.6912000], [0.2466992, 0.9047000, 0.8442000]], [[0.0000000, 0.1298000, 0.8748000], [0.0367092, 0.0719000, 0.1312000], [0.2009577, 0.1632000, 0.0655000]]]]

Expected (Unparsed): [[[[0,0.5965,0.0574],[0,0.2409,0.4839],[0,0.2226,0.4902]],[[0,0.339,0.6371],[0,0.30199798,0.9297],[0,0.7574,0.9895]],[[0,0.233,0.864],[0,0.6870247199999999,0.1407],[0,0.1284,0.5457]],[[0,0.9085,0.0683],[0,0.8661897599999999,0.0706],[0,0.7527,0.3134]],[[0,0.0154,0.3451],[0,1.36555012,0.035],[0,0.1044,0.9621]],[[0,0.7726,0.9496],[0,0.36707853999999995,0.8173],[0,0.9231,0.7513]],[[0,0.2233,0.8953],[0,0.74322,0.4677],[0,0.6569,0.0289]],[[0,0.746,0.351],[0,0.5609299,0.5931],[0,0.7569,0.3214]],[[0,0.7072,0.0327],[0.6688873200000001,0.45031925,0.6912],[0.24669922000000002,0.9047,0.8442]],[[0,0.1298,0.8748],[0.0367092,0.0719,0.1312],[0.20095768,0.1632,0.0655]]]]

Actual:   [[[[0, 0.5965, 0.0574], [0, 0.2409, 0.4839], [0, 0.2226, 0.4902]], [[0, 0.339, 0.6371], [0, 0.302, 0.9297], [0, 0.7574, 0.9895]], [[0, 0.233, 0.864], [0, 0.6871, 0.1407], [0, 0.1284, 0.5457]], [[0, 0.9085, 0.0683], [0, 0.8662, 0.0706], [0, 0.7527, 0.3134]], [[0, 0.0154, 0.3451], [0, 1.3656, 0.035], [0, 0.1044, 0.9621]], [[0, 0.7726, 0.9496], [0, 0.3671, 0.8173], [0, 0.9231, 0.7513]], [[0, 0.2233, 0.8953], [0, 0.7433, 0.4677], [0, 0.6569, 0.0289]], [[0, 0.746, 0.351], [0, 0.561, 0.5931], [0, 0.7569, 0.3214]], [[0, 0.7072, 0.0327], [0.6689, 0.4504, 0.6912], [0.2467, 0.9047, 0.8442]], [[0, 0.1298, 0.8748], [0.0368, 0.0719, 0.1312], [0.201, 0.1632, 0.0655]]]]

Expected: [[[[0, 0.5965, 0.0574], [0, 0.2409, 0.4839], [0, 0.2226, 0.4902]], [[0, 0.339, 0.6371], [0, 0.302, 0.9297], [0, 0.7574, 0.9895]], [[0, 0.233, 0.864], [0, 0.6871, 0.1407], [0, 0.1284, 0.5457]], [[0, 0.9085, 0.0683], [0, 0.8662, 0.0706], [0, 0.7527, 0.3134]], [[0, 0.0154, 0.3451], [0, 1.3656, 0.035], [0, 0.1044, 0.9621]], [[0, 0.7726, 0.9496], [0, 0.3671, 0.8173], [0, 0.9231, 0.7513]], [[0, 0.2233, 0.8953], [0, 0.7433, 0.4677], [0, 0.6569, 0.0289]], [[0, 0.746, 0.351], [0, 0.561, 0.5931], [0, 0.7569, 0.3214]], [[0, 0.7072, 0.0327], [0.6689, 0.4504, 0.6912], [0.2467, 0.9047, 0.8442]], [[0, 0.1298, 0.8748], [0.0368, 0.0719, 0.1312], [0.201, 0.1632, 0.0655]]]]