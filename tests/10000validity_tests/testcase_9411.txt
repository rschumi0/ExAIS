import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer12702 = tf.keras.layers.Input(shape=([3, 3, 1]))
in0Con15591 = tf.keras.layers.Input(shape=([6, 23]))
in0Up_90633 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))
in0Add54404 = tf.keras.layers.Input(shape=([2, 1]))
in1Add54404 = tf.keras.layers.Input(shape=([2, 1]))
in0Con13673 = tf.keras.layers.Input(shape=([6, 23]))

Zer12702 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer12702', )(in0Zer12702)
Res38709 = keras.layers.Reshape((5, 5), name = 'Res38709', )(Zer12702)
GRU45330 = keras.layers.GRU(1,reset_after=False, recurrent_activation='sigmoid', name = 'GRU45330', )(Res38709)
Res55466 = keras.layers.Reshape((1, 1), name = 'Res55466', )(GRU45330)
Zer38543 = keras.layers.ZeroPadding1D(padding=((5, 0)), name = 'Zer38543', )(Res55466)
Con15591 = keras.layers.Concatenate(axis=2, name = 'Con15591', )([Zer38543,in0Con15591])
Up_90633 = keras.layers.UpSampling3D(size=(2, 2, 1), name = 'Up_90633', )(in0Up_90633)
Res42610 = keras.layers.Reshape((6, 6, 4), name = 'Res42610', )(Up_90633)
Res86486 = keras.layers.Reshape((6, 24), name = 'Res86486', )(Res42610)
Add54404 = keras.layers.Add(name = 'Add54404', )([in0Add54404,in1Add54404])
Zer54836 = keras.layers.ZeroPadding1D(padding=((4, 0)), name = 'Zer54836', )(Add54404)
Con13673 = keras.layers.Concatenate(axis=2, name = 'Con13673', )([Zer54836,in0Con13673])
Max85675 = keras.layers.Maximum(name = 'Max85675', )([Res86486,Con13673])
Min93378 = keras.layers.Minimum(name = 'Min93378', )([Con15591,Max85675])
Max36043 = keras.layers.MaxPool1D(pool_size=(1), name = 'Max36043', )(Min93378)
model = tf.keras.models.Model(inputs=[in0Zer12702,in0Con15591,in0Up_90633,in0Add54404,in1Add54404,in0Con13673], outputs=Max36043)
w = model.get_layer('GRU45330').get_weights() 
w[0] = np.array([[9, 3, 3], [10, 5, 5], [5, 5, 7], [10, 3, 2], [6, 1, 1]])
w[1] = np.array([[10, 5, 7]])
w[2] = np.array([2, 9, 10])
model.get_layer('GRU45330').set_weights(w) 
in0Zer12702 = tf.constant([[[[1.2472], [1.8109], [1.8918]], [[1.758], [1.7192], [1.9161]], [[1.9284], [1.807], [1.1121]]]])
in0Con15591 = tf.constant([[[0.8778, 0.9699, 0.7534, 0.7083, 0.2012, 0.0648, 0.3492, 0.823, 0.5022, 0.0364, 0.768, 0.9468, 0.1716, 0.3016, 0.5558, 0.3138, 0.3666, 0.2671, 0.3561, 0.4796, 0.5499, 0.2637, 0.612], [0.8725, 0.1534, 0.6265, 0.0639, 0.3361, 0.6643, 0.3536, 0.2759, 0.6315, 0.6586, 0.7606, 0.9811, 0.3011, 0.4334, 0.6829, 0.9869, 0.3883, 0.9267, 0.0745, 0.7536, 0.2521, 0.5569, 0.2991], [0.5222, 0.1216, 0.4612, 0.0194, 0.0514, 0.0931, 0.3681, 0.3496, 0.6013, 0.9885, 0.9992, 0.8577, 0.7926, 0.8673, 0.4646, 0.0781, 0.3672, 0.0101, 0.5878, 0.4263, 0.6742, 0.8797, 0.4778], [0.7968, 0.9176, 0.9024, 0.9508, 0.6667, 0.8113, 0.9133, 0.5966, 0.2299, 0.3137, 0.7597, 0.3844, 0.9425, 0.5339, 0.8685, 0.7065, 0.8722, 0.7412, 0.5469, 0.6691, 0.4136, 0.6436, 0.4106], [0.2595, 0.258, 0.7499, 0.6091, 0.7378, 0.9851, 0.6802, 0.4551, 0.2369, 0.2842, 0.7475, 0.6535, 0.086, 0.6039, 0.9991, 0.5739, 0.8176, 0.9829, 0.1736, 0.913, 0.1655, 0.9178, 0.7107], [0.6543, 0.6175, 0.3871, 0.029, 0.4462, 0.2464, 0.5716, 0.7812, 0.393, 0.6104, 0.3843, 0.6868, 0.7828, 0.4885, 0.6553, 0.848, 0.4566, 0.0959, 0.7039, 0.1611, 0.3701, 0.2091, 0.0773]]])
in0Up_90633 = tf.constant([[[[[1.9853, 1.8966], [1.139, 1.5767]], [[1.9654, 1.6853], [1.8822, 1.2404]], [[1.1306, 1.061], [1.4644, 1.4164]]], [[[1.0189, 1.7853], [1.3647, 1.3231]], [[1.3369, 1.9536], [1.2713, 1.7741]], [[1.4554, 1.6572], [1.2422, 1.7802]]], [[[1.5839, 1.0753], [1.0755, 1.7768]], [[1.7013, 1.8815], [1.7254, 1.2343]], [[1.8481, 1.4185], [1.2663, 1.7377]]]]])
in0Add54404 = tf.constant([[[0.437], [0.4332]]])
in1Add54404 = tf.constant([[[0.6044], [0.2369]]])
in0Con13673 = tf.constant([[[0.8875, 0.4149, 0.3745, 0.6162, 0.6241, 0.408, 0.1726, 0.9375, 0.2825, 0.5988, 0.5943, 0.612, 0.7008, 0.1023, 0.6647, 0.0434, 0.7703, 0.4581, 0.2295, 0.6134, 0.4245, 0.3348, 0.0452], [0.039, 0.1052, 0.2809, 0.9351, 0.9876, 0.4405, 0.6441, 0.9758, 0.3628, 0.3688, 0.4668, 0.878, 0.1953, 0.0927, 0.7699, 0.0841, 0.0018, 0.06, 0.1367, 0.6154, 0.8036, 0.6319, 0.9256], [0.3725, 0.7407, 0.2228, 0.7519, 0.4154, 0.3591, 0.4716, 0.1067, 0.7353, 0.2022, 0.4439, 0.109, 0.1623, 0.296, 0.9479, 0.424, 0.3522, 0.4797, 0.8026, 0.3217, 0.2428, 0.3062, 0.292], [0.7005, 0.9777, 0.4129, 0.1046, 0.6536, 0.0572, 0.8453, 0.7707, 0.8184, 0.3972, 0.8069, 0.9813, 0.3152, 0.0491, 0.7026, 0.2033, 0.5567, 0.5677, 0.146, 0.688, 0.5884, 0.3999, 0.8086], [0.3112, 0.9063, 0.2135, 0.6022, 0.6817, 0.8918, 0.7813, 0.7078, 0.6065, 0.1008, 0.8972, 0.3903, 0.311, 0.6497, 0.8104, 0.3709, 0.7793, 0.8524, 0.8331, 0.7695, 0.2004, 0.0787, 0.1032], [0.2736, 0.7866, 0.5299, 0.9654, 0.2427, 0.1605, 0.2549, 0.0691, 0.9162, 0.1044, 0.2684, 0.0791, 0.7538, 0.7066, 0.0747, 0.8425, 0.2121, 0.8463, 0.2473, 0.9629, 0.9348, 0.5176, 0.9729]]])
print (np.array2string(model.predict([in0Zer12702,in0Con15591,in0Up_90633,in0Add54404,in1Add54404,in0Con13673],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max36043.png')

LZer12702 = zero_padding2D_layer([[[[1.2472], [1.8109], [1.8918]], [[1.758], [1.7192], [1.9161]], [[1.9284], [1.807], [1.1121]]]], 1, 1, 1, 1, Zer12702), 
LRes38709 = reshape_layer(Zer12702, [5, 5], Res38709), 
LGRU45330 = gru_layer(Res38709,[[9, 3, 3], [10, 5, 5], [5, 5, 7], [10, 3, 2], [6, 1, 1]],[[10, 5, 7]],[2, 9, 10], false, GRU45330), 
LRes55466 = reshape_layer(GRU45330, [1, 1], Res55466), 
LZer38543 = zero_padding1D_layer(Res55466, 5, 0, Zer38543), 
LCon15591 = concatenate_layer([Zer38543,[[[0.8778, 0.9699, 0.7534, 0.7083, 0.2012, 0.0648, 0.3492, 0.823, 0.5022, 0.0364, 0.768, 0.9468, 0.1716, 0.3016, 0.5558, 0.3138, 0.3666, 0.2671, 0.3561, 0.4796, 0.5499, 0.2637, 0.612], [0.8725, 0.1534, 0.6265, 0.0639, 0.3361, 0.6643, 0.3536, 0.2759, 0.6315, 0.6586, 0.7606, 0.9811, 0.3011, 0.4334, 0.6829, 0.9869, 0.3883, 0.9267, 0.0745, 0.7536, 0.2521, 0.5569, 0.2991], [0.5222, 0.1216, 0.4612, 0.0194, 0.0514, 0.0931, 0.3681, 0.3496, 0.6013, 0.9885, 0.9992, 0.8577, 0.7926, 0.8673, 0.4646, 0.0781, 0.3672, 0.0101, 0.5878, 0.4263, 0.6742, 0.8797, 0.4778], [0.7968, 0.9176, 0.9024, 0.9508, 0.6667, 0.8113, 0.9133, 0.5966, 0.2299, 0.3137, 0.7597, 0.3844, 0.9425, 0.5339, 0.8685, 0.7065, 0.8722, 0.7412, 0.5469, 0.6691, 0.4136, 0.6436, 0.4106], [0.2595, 0.258, 0.7499, 0.6091, 0.7378, 0.9851, 0.6802, 0.4551, 0.2369, 0.2842, 0.7475, 0.6535, 0.086, 0.6039, 0.9991, 0.5739, 0.8176, 0.9829, 0.1736, 0.913, 0.1655, 0.9178, 0.7107], [0.6543, 0.6175, 0.3871, 0.029, 0.4462, 0.2464, 0.5716, 0.7812, 0.393, 0.6104, 0.3843, 0.6868, 0.7828, 0.4885, 0.6553, 0.848, 0.4566, 0.0959, 0.7039, 0.1611, 0.3701, 0.2091, 0.0773]]]], 2, Con15591), 
LUp_90633 = up_sampling3D_layer([[[[[1.9853, 1.8966], [1.139, 1.5767]], [[1.9654, 1.6853], [1.8822, 1.2404]], [[1.1306, 1.061], [1.4644, 1.4164]]], [[[1.0189, 1.7853], [1.3647, 1.3231]], [[1.3369, 1.9536], [1.2713, 1.7741]], [[1.4554, 1.6572], [1.2422, 1.7802]]], [[[1.5839, 1.0753], [1.0755, 1.7768]], [[1.7013, 1.8815], [1.7254, 1.2343]], [[1.8481, 1.4185], [1.2663, 1.7377]]]]], 2, 2, 1, Up_90633), 
LRes42610 = reshape_layer(Up_90633, [6, 6, 4], Res42610), 
LRes86486 = reshape_layer(Res42610, [6, 24], Res86486), 
LAdd54404 = add_layer([[[[0.437], [0.4332]]], [[[0.6044], [0.2369]]]], Add54404), 
LZer54836 = zero_padding1D_layer(Add54404, 4, 0, Zer54836), 
LCon13673 = concatenate_layer([Zer54836,[[[0.8875, 0.4149, 0.3745, 0.6162, 0.6241, 0.408, 0.1726, 0.9375, 0.2825, 0.5988, 0.5943, 0.612, 0.7008, 0.1023, 0.6647, 0.0434, 0.7703, 0.4581, 0.2295, 0.6134, 0.4245, 0.3348, 0.0452], [0.039, 0.1052, 0.2809, 0.9351, 0.9876, 0.4405, 0.6441, 0.9758, 0.3628, 0.3688, 0.4668, 0.878, 0.1953, 0.0927, 0.7699, 0.0841, 0.0018, 0.06, 0.1367, 0.6154, 0.8036, 0.6319, 0.9256], [0.3725, 0.7407, 0.2228, 0.7519, 0.4154, 0.3591, 0.4716, 0.1067, 0.7353, 0.2022, 0.4439, 0.109, 0.1623, 0.296, 0.9479, 0.424, 0.3522, 0.4797, 0.8026, 0.3217, 0.2428, 0.3062, 0.292], [0.7005, 0.9777, 0.4129, 0.1046, 0.6536, 0.0572, 0.8453, 0.7707, 0.8184, 0.3972, 0.8069, 0.9813, 0.3152, 0.0491, 0.7026, 0.2033, 0.5567, 0.5677, 0.146, 0.688, 0.5884, 0.3999, 0.8086], [0.3112, 0.9063, 0.2135, 0.6022, 0.6817, 0.8918, 0.7813, 0.7078, 0.6065, 0.1008, 0.8972, 0.3903, 0.311, 0.6497, 0.8104, 0.3709, 0.7793, 0.8524, 0.8331, 0.7695, 0.2004, 0.0787, 0.1032], [0.2736, 0.7866, 0.5299, 0.9654, 0.2427, 0.1605, 0.2549, 0.0691, 0.9162, 0.1044, 0.2684, 0.0791, 0.7538, 0.7066, 0.0747, 0.8425, 0.2121, 0.8463, 0.2473, 0.9629, 0.9348, 0.5176, 0.9729]]]], 2, Con13673), 
LMax85675 = maximum_layer([Res86486,Con13673], Max85675), 
LMin93378 = minimum_layer([Con15591,Max85675], Min93378), 
LMax36043 = max_pool1D_layer(Min93378, 1, Max36043), 
exec_layers([LZer12702,LRes38709,LGRU45330,LRes55466,LZer38543,LCon15591,LUp_90633,LRes42610,LRes86486,LAdd54404,LZer54836,LCon13673,LMax85675,LMin93378,LMax36043],["Zer12702","Res38709","GRU45330","Res55466","Zer38543","Con15591","Up_90633","Res42610","Res86486","Add54404","Zer54836","Con13673","Max85675","Min93378","Max36043"],Max36043,"Max36043")

Actual (Unparsed): [[[0.0000000, 0.8778000, 0.9699000, 0.7534000, 0.7083000, 0.2012000, 0.0648000, 0.3492000, 0.8230000, 0.5022000, 0.0364000, 0.7680000, 0.9468000, 0.1716000, 0.3016000, 0.5558000, 0.3138000, 0.3666000, 0.2671000, 0.3561000, 0.4796000, 0.5499000, 0.2637000, 0.6120000], [0.0000000, 0.8725000, 0.1534000, 0.6265000, 0.0639000, 0.3361000, 0.6643000, 0.3536000, 0.2759000, 0.6315000, 0.6586000, 0.7606000, 0.9811000, 0.3011000, 0.4334000, 0.6829000, 0.9869000, 0.3883000, 0.9267000, 0.0745000, 0.7536000, 0.2521000, 0.5569000, 0.2991000], [0.0000000, 0.5222000, 0.1216000, 0.4612000, 0.0194000, 0.0514000, 0.0931000, 0.3681000, 0.3496000, 0.6013000, 0.9885000, 0.9992000, 0.8577000, 0.7926000, 0.8673000, 0.4646000, 0.0781000, 0.3672000, 0.0101000, 0.5878000, 0.4263000, 0.6742000, 0.8797000, 0.4778000], [0.0000000, 0.7968000, 0.9176000, 0.9024000, 0.9508000, 0.6667000, 0.8113000, 0.9133000, 0.5966000, 0.2299000, 0.3137000, 0.7597000, 0.3844000, 0.9425000, 0.5339000, 0.8685000, 0.7065000, 0.8722000, 0.7412000, 0.5469000, 0.6691000, 0.4136000, 0.6436000, 0.4106000], [0.0000000, 0.2595000, 0.2580000, 0.7499000, 0.6091000, 0.7378000, 0.9851000, 0.6802000, 0.4551000, 0.2369000, 0.2842000, 0.7475000, 0.6535000, 0.0860000, 0.6039000, 0.9991000, 0.5739000, 0.8176000, 0.9829000, 0.1736000, 0.9130000, 0.1655000, 0.9178000, 0.7107000], [0.1539651, 0.6543000, 0.6175000, 0.3871000, 0.0290000, 0.4462000, 0.2464000, 0.5716000, 0.7812000, 0.3930000, 0.6104000, 0.3843000, 0.6868000, 0.7828000, 0.4885000, 0.6553000, 0.8480000, 0.4566000, 0.0959000, 0.7039000, 0.1611000, 0.3701000, 0.2091000, 0.0773000]]]

Expected (Unparsed): [[[0,0.8778,0.9699,0.7534,0.7083,0.2012,0.0648,0.3492,0.823,0.5022,0.0364,0.768,0.9468,0.1716,0.3016,0.5558,0.3138,0.3666,0.2671,0.3561,0.4796,0.5499,0.2637,0.612],[0,0.8725,0.1534,0.6265,0.0639,0.3361,0.6643,0.3536,0.2759,0.6315,0.6586,0.7606,0.9811,0.3011,0.4334,0.6829,0.9869,0.3883,0.9267,0.0745,0.7536,0.2521,0.5569,0.2991],[0,0.5222,0.1216,0.4612,0.0194,0.0514,0.0931,0.3681,0.3496,0.6013,0.9885,0.9992,0.8577,0.7926,0.8673,0.4646,0.0781,0.3672,0.0101,0.5878,0.4263,0.6742,0.8797,0.4778],[0,0.7968,0.9176,0.9024,0.9508,0.6667,0.8113,0.9133,0.5966,0.2299,0.3137,0.7597,0.3844,0.9425,0.5339,0.8685,0.7065,0.8722,0.7412,0.5469,0.6691,0.4136,0.6436,0.4106],[0,0.2595,0.258,0.7499,0.6091,0.7378,0.9851,0.6802,0.4551,0.2369,0.2842,0.7475,0.6535,0.086,0.6039,0.9991,0.5739,0.8176,0.9829,0.1736,0.913,0.1655,0.9178,0.7107],[0.1539651475918969,0.6543,0.6175,0.3871,0.029,0.4462,0.2464,0.5716,0.7812,0.393,0.6104,0.3843,0.6868,0.7828,0.4885,0.6553,0.848,0.4566,0.0959,0.7039,0.1611,0.3701,0.2091,0.0773]]]

Actual:   [[[0, 0.8778, 0.9699, 0.7534, 0.7083, 0.2012, 0.0648, 0.3492, 0.823, 0.5022, 0.0364, 0.768, 0.9468, 0.1716, 0.3016, 0.5558, 0.3138, 0.3666, 0.2671, 0.3561, 0.4796, 0.5499, 0.2637, 0.612], [0, 0.8725, 0.1534, 0.6265, 0.0639, 0.3361, 0.6643, 0.3536, 0.2759, 0.6315, 0.6586, 0.7606, 0.9811, 0.3011, 0.4334, 0.6829, 0.9869, 0.3883, 0.9267, 0.0745, 0.7536, 0.2521, 0.5569, 0.2991], [0, 0.5222, 0.1216, 0.4612, 0.0194, 0.0514, 0.0931, 0.3681, 0.3496, 0.6013, 0.9885, 0.9992, 0.8577, 0.7926, 0.8673, 0.4646, 0.0781, 0.3672, 0.0101, 0.5878, 0.4263, 0.6742, 0.8797, 0.4778], [0, 0.7968, 0.9176, 0.9024, 0.9508, 0.6667, 0.8113, 0.9133, 0.5966, 0.2299, 0.3137, 0.7597, 0.3844, 0.9425, 0.5339, 0.8685, 0.7065, 0.8722, 0.7412, 0.5469, 0.6691, 0.4136, 0.6436, 0.4106], [0, 0.2595, 0.258, 0.7499, 0.6091, 0.7378, 0.9851, 0.6802, 0.4551, 0.2369, 0.2842, 0.7475, 0.6535, 0.086, 0.6039, 0.9991, 0.5739, 0.8176, 0.9829, 0.1736, 0.913, 0.1655, 0.9178, 0.7107], [0.154, 0.6543, 0.6175, 0.3871, 0.029, 0.4462, 0.2464, 0.5716, 0.7812, 0.393, 0.6104, 0.3843, 0.6868, 0.7828, 0.4885, 0.6553, 0.848, 0.4566, 0.0959, 0.7039, 0.1611, 0.3701, 0.2091, 0.0773]]]

Expected: [[[0, 0.8778, 0.9699, 0.7534, 0.7083, 0.2012, 0.0648, 0.3492, 0.823, 0.5022, 0.0364, 0.768, 0.9468, 0.1716, 0.3016, 0.5558, 0.3138, 0.3666, 0.2671, 0.3561, 0.4796, 0.5499, 0.2637, 0.612], [0, 0.8725, 0.1534, 0.6265, 0.0639, 0.3361, 0.6643, 0.3536, 0.2759, 0.6315, 0.6586, 0.7606, 0.9811, 0.3011, 0.4334, 0.6829, 0.9869, 0.3883, 0.9267, 0.0745, 0.7536, 0.2521, 0.5569, 0.2991], [0, 0.5222, 0.1216, 0.4612, 0.0194, 0.0514, 0.0931, 0.3681, 0.3496, 0.6013, 0.9885, 0.9992, 0.8577, 0.7926, 0.8673, 0.4646, 0.0781, 0.3672, 0.0101, 0.5878, 0.4263, 0.6742, 0.8797, 0.4778], [0, 0.7968, 0.9176, 0.9024, 0.9508, 0.6667, 0.8113, 0.9133, 0.5966, 0.2299, 0.3137, 0.7597, 0.3844, 0.9425, 0.5339, 0.8685, 0.7065, 0.8722, 0.7412, 0.5469, 0.6691, 0.4136, 0.6436, 0.4106], [0, 0.2595, 0.258, 0.7499, 0.6091, 0.7378, 0.9851, 0.6802, 0.4551, 0.2369, 0.2842, 0.7475, 0.6535, 0.086, 0.6039, 0.9991, 0.5739, 0.8176, 0.9829, 0.1736, 0.913, 0.1655, 0.9178, 0.7107], [0.154, 0.6543, 0.6175, 0.3871, 0.029, 0.4462, 0.2464, 0.5716, 0.7812, 0.393, 0.6104, 0.3843, 0.6868, 0.7828, 0.4885, 0.6553, 0.848, 0.4566, 0.0959, 0.7039, 0.1611, 0.3701, 0.2091, 0.0773]]]