import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Bat34323 = tf.keras.layers.Input(shape=([4, 2, 4]))

Bat34323 = keras.layers.BatchNormalization(axis=2, epsilon=0.8916633527513287,  name = 'Bat34323', )(in0Bat34323)
Up_14935 = keras.layers.UpSampling2D(size=(2, 2), name = 'Up_14935', )(Bat34323)
Con46654 = keras.layers.Conv2D(4, (7, 1),strides=(1, 1), padding='valid', dilation_rate=(1, 1), name = 'Con46654', )(Up_14935)
model = tf.keras.models.Model(inputs=[in0Bat34323], outputs=Con46654)
w = model.get_layer('Bat34323').get_weights() 
w[0] = np.array([0.5428, 0.0752])
w[1] = np.array([0.2794, 0.7144])
w[2] = np.array([0.9577, 0.2288])
w[3] = np.array([0.5864, 0.8624])
model.get_layer('Bat34323').set_weights(w) 
w = model.get_layer('Con46654').get_weights() 
w[0] = np.array([[[[0.2834, 0.7868, 0.0146, 0.64], [0.2211, 0.3588, 0.2067, 0.1612], [0.9439, 0.2568, 0.8113, 0.0773], [0.1475, 0.259, 0.0147, 0.2718]]], [[[0.3902, 0.7411, 0.0733, 0.2959], [0.4362, 0.9996, 0.6395, 0.325], [0.5005, 0.1705, 0.1303, 0.4867], [0.0846, 0.7942, 0.7834, 0.7868]]], [[[0.5991, 0.5931, 0.3749, 0.3244], [0.3799, 0.6936, 0.3135, 0.6132], [0.023, 0.3553, 0.9724, 0.5992], [0.1847, 0.244, 0.6698, 0.4049]]], [[[0.1253, 0.4305, 0.6686, 0.9157], [0.3108, 0.5847, 0.9292, 0.0767], [0.3279, 0.2899, 0.121, 0.1658], [0.2177, 0.0042, 0.5733, 0.3737]]], [[[0.0883, 0.9619, 0.4303, 0.7333], [0.5257, 0.2254, 0.2643, 0.8156], [0.8933, 0.1724, 0.7965, 0.6361], [0.0803, 0.9377, 0.1759, 0.9014]]], [[[0.6416, 0.7118, 0.4761, 0.0646], [0.5573, 0.3474, 0.6831, 0.6579], [0.0309, 0.4226, 0.467, 0.0217], [0.847, 0.7643, 0.4604, 0.8608]]], [[[0.8105, 0.4533, 0.5947, 0.0224], [0.704, 0.495, 0.2889, 0.5145], [0.014, 0.6711, 0.9283, 0.0602], [0.4036, 0.5627, 0.1239, 0.4192]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con46654').set_weights(w) 
in0Bat34323 = tf.constant([[[[1.46, 1.1028, 1.6266, 1.0547], [1.4229, 1.4821, 1.9657, 1.4695]], [[1.4125, 1.109, 1.9046, 1.2769], [1.7998, 1.4191, 1.5478, 1.5787]], [[1.5601, 1.1179, 1.5372, 1.5465], [1.6798, 1.723, 1.693, 1.1479]], [[1.2702, 1.5628, 1.0106, 1.082], [1.2842, 1.3458, 1.145, 1.9494]]]])
print (np.array2string(model.predict([in0Bat34323],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con46654.png')

LBat34323 = batch_normalization_layer([[[[1.46, 1.1028, 1.6266, 1.0547], [1.4229, 1.4821, 1.9657, 1.4695]], [[1.4125, 1.109, 1.9046, 1.2769], [1.7998, 1.4191, 1.5478, 1.5787]], [[1.5601, 1.1179, 1.5372, 1.5465], [1.6798, 1.723, 1.693, 1.1479]], [[1.2702, 1.5628, 1.0106, 1.082], [1.2842, 1.3458, 1.145, 1.9494]]]], 2, 0.8916633527513287, [0.5428, 0.0752], [0.2794, 0.7144], [0.9577, 0.2288], [0.5864, 0.8624], Bat34323), 
LUp_14935 = up_sampling2D_layer(Bat34323, 2, 2, Up_14935), 
LCon46654 = conv2D_layer(Up_14935, 7, 1,[[[[0.2834, 0.7868, 0.0146, 0.64], [0.2211, 0.3588, 0.2067, 0.1612], [0.9439, 0.2568, 0.8113, 0.0773], [0.1475, 0.259, 0.0147, 0.2718]]], [[[0.3902, 0.7411, 0.0733, 0.2959], [0.4362, 0.9996, 0.6395, 0.325], [0.5005, 0.1705, 0.1303, 0.4867], [0.0846, 0.7942, 0.7834, 0.7868]]], [[[0.5991, 0.5931, 0.3749, 0.3244], [0.3799, 0.6936, 0.3135, 0.6132], [0.023, 0.3553, 0.9724, 0.5992], [0.1847, 0.244, 0.6698, 0.4049]]], [[[0.1253, 0.4305, 0.6686, 0.9157], [0.3108, 0.5847, 0.9292, 0.0767], [0.3279, 0.2899, 0.121, 0.1658], [0.2177, 0.0042, 0.5733, 0.3737]]], [[[0.0883, 0.9619, 0.4303, 0.7333], [0.5257, 0.2254, 0.2643, 0.8156], [0.8933, 0.1724, 0.7965, 0.6361], [0.0803, 0.9377, 0.1759, 0.9014]]], [[[0.6416, 0.7118, 0.4761, 0.0646], [0.5573, 0.3474, 0.6831, 0.6579], [0.0309, 0.4226, 0.467, 0.0217], [0.847, 0.7643, 0.4604, 0.8608]]], [[[0.8105, 0.4533, 0.5947, 0.0224], [0.704, 0.495, 0.2889, 0.5145], [0.014, 0.6711, 0.9283, 0.0602], [0.4036, 0.5627, 0.1239, 0.4192]]]],[0, 0, 0, 0], 1, 1, false, 1, 1, Con46654), 
exec_layers([LBat34323,LUp_14935,LCon46654],["Bat34323","Up_14935","Con46654"],Con46654,"Con46654")

Actual (Unparsed): [[[[5.1269491, 6.5347342, 5.9493455, 5.7246392], [5.1269491, 6.5347342, 5.9493455, 5.7246392], [8.5260204, 11.2419948, 10.2542888, 9.6521819], [8.5260204, 11.2419948, 10.2542888, 9.6521819]], [[5.0170406, 6.3243942, 6.0091509, 5.8748621], [5.0170406, 6.3243942, 6.0091509, 5.8748621], [8.5345836, 11.2628052, 10.2348849, 9.6609493], [8.5345836, 11.2628052, 10.2348849, 9.6609493]]]]

Expected (Unparsed): [[[[5.12694903439664,6.5347342335536505,5.949345427965957,5.724639188822411],[5.12694903439664,6.5347342335536505,5.949345427965957,5.724639188822411],[8.526020355609598,11.241994822708866,10.254288832386441,9.652181921380201],[8.526020355609598,11.241994822708866,10.254288832386441,9.652181921380201]],[[5.017040543419936,6.324394184747171,6.009150829323574,5.874862061064664],[5.017040543419936,6.324394184747171,6.009150829323574,5.874862061064664],[8.534583569176169,11.262805207350135,10.23488488547448,9.660949296434548],[8.534583569176169,11.262805207350135,10.23488488547448,9.660949296434548]]]]

Actual:   [[[[5.127, 6.5348, 5.9494, 5.7247], [5.127, 6.5348, 5.9494, 5.7247], [8.5261, 11.242, 10.2543, 9.6522], [8.5261, 11.242, 10.2543, 9.6522]], [[5.0171, 6.3244, 6.0092, 5.8749], [5.0171, 6.3244, 6.0092, 5.8749], [8.5346, 11.2629, 10.2349, 9.661], [8.5346, 11.2629, 10.2349, 9.661]]]]

Expected: [[[[5.127, 6.5348, 5.9494, 5.7247], [5.127, 6.5348, 5.9494, 5.7247], [8.5261, 11.242, 10.2543, 9.6522], [8.5261, 11.242, 10.2543, 9.6522]], [[5.0171, 6.3244, 6.0092, 5.8749], [5.0171, 6.3244, 6.0092, 5.8749], [8.5346, 11.2629, 10.2349, 9.661], [8.5346, 11.2629, 10.2349, 9.661]]]]