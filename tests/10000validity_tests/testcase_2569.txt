import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Up_46726 = tf.keras.layers.Input(shape=([4, 3, 3, 1]))

Up_46726 = keras.layers.UpSampling3D(size=(2, 2, 2), name = 'Up_46726', )(in0Up_46726)
Res86609 = keras.layers.Reshape((8, 6, 6), name = 'Res86609', )(Up_46726)
Res11745 = keras.layers.Reshape((8, 36), name = 'Res11745', )(Res86609)
Glo86166 = keras.layers.GlobalAveragePooling1D(name = 'Glo86166', )(Res11745)
model = tf.keras.models.Model(inputs=[in0Up_46726], outputs=Glo86166)
in0Up_46726 = tf.constant([[[[[1.4209], [1.547], [1.9174]], [[1.6548], [1.9637], [1.015]], [[1.5318], [1.3609], [1.9175]]], [[[1.6862], [1.252], [1.9945]], [[1.7602], [1.6162], [1.763]], [[1.9636], [1.3929], [1.2566]]], [[[1.3217], [1.7441], [1.2978]], [[1.5906], [1.6044], [1.1817]], [[1.4039], [1.5945], [1.3786]]], [[[1.3245], [1.7429], [1.6939]], [[1.0489], [1.273], [1.764]], [[1.9306], [1.2419], [1.0299]]]]])
print (np.array2string(model.predict([in0Up_46726],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Glo86166.png')

LUp_46726 = up_sampling3D_layer([[[[[1.4209], [1.547], [1.9174]], [[1.6548], [1.9637], [1.015]], [[1.5318], [1.3609], [1.9175]]], [[[1.6862], [1.252], [1.9945]], [[1.7602], [1.6162], [1.763]], [[1.9636], [1.3929], [1.2566]]], [[[1.3217], [1.7441], [1.2978]], [[1.5906], [1.6044], [1.1817]], [[1.4039], [1.5945], [1.3786]]], [[[1.3245], [1.7429], [1.6939]], [[1.0489], [1.273], [1.764]], [[1.9306], [1.2419], [1.0299]]]]], 2, 2, 2, Up_46726), 
LRes86609 = reshape_layer(Up_46726, [8, 6, 6], Res86609), 
LRes11745 = reshape_layer(Res86609, [8, 36], Res11745), 
LGlo86166 = global_average_pooling1D_layer(Res11745, Glo86166), 
exec_layers([LUp_46726,LRes86609,LRes11745,LGlo86166],["Up_46726","Res86609","Res11745","Glo86166"],Glo86166,"Glo86166")

Actual (Unparsed): [[1.4383250, 1.4383250, 1.5715000, 1.5715000, 1.7259000, 1.7259000, 1.4383250, 1.4383250, 1.5715000, 1.5715000, 1.7259000, 1.7259000, 1.5136250, 1.5136250, 1.6143250, 1.6143250, 1.4309250, 1.4309250, 1.5136250, 1.5136250, 1.6143250, 1.6143250, 1.4309250, 1.4309250, 1.7074750, 1.7074750, 1.3975500, 1.3975500, 1.3956500, 1.3956500, 1.7074750, 1.7074750, 1.3975500, 1.3975500, 1.3956500, 1.3956500]]

Expected (Unparsed): [[1.438325,1.438325,1.5715000000000001,1.5715000000000001,1.7259,1.7259,1.438325,1.438325,1.5715000000000001,1.5715000000000001,1.7259,1.7259,1.513625,1.513625,1.6143249999999998,1.6143249999999998,1.4309249999999998,1.4309249999999998,1.513625,1.513625,1.6143249999999998,1.6143249999999998,1.4309249999999998,1.4309249999999998,1.707475,1.707475,1.3975499999999998,1.3975499999999998,1.3956499999999998,1.3956499999999998,1.707475,1.707475,1.3975499999999998,1.3975499999999998,1.3956499999999998,1.3956499999999998]]

Actual:   [[1.4384, 1.4384, 1.5715, 1.5715, 1.7259, 1.7259, 1.4384, 1.4384, 1.5715, 1.5715, 1.7259, 1.7259, 1.5137, 1.5137, 1.6144, 1.6144, 1.431, 1.431, 1.5137, 1.5137, 1.6144, 1.6144, 1.431, 1.431, 1.7075, 1.7075, 1.3976, 1.3976, 1.3957, 1.3957, 1.7075, 1.7075, 1.3976, 1.3976, 1.3957, 1.3957]]

Expected: [[1.4384, 1.4384, 1.5716, 1.5716, 1.7259, 1.7259, 1.4384, 1.4384, 1.5716, 1.5716, 1.7259, 1.7259, 1.5137, 1.5137, 1.6144, 1.6144, 1.431, 1.431, 1.5137, 1.5137, 1.6144, 1.6144, 1.431, 1.431, 1.7075, 1.7075, 1.3976, 1.3976, 1.3957, 1.3957, 1.7075, 1.7075, 1.3976, 1.3976, 1.3957, 1.3957]]