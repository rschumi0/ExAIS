import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min58152 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))
in1Min58152 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))
in0Con20225 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in0Sub32815 = tf.keras.layers.Input(shape=([3, 3, 3]))
in1Sub32815 = tf.keras.layers.Input(shape=([3, 3, 3]))
in0Con86328 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in0Con38492 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in0Min18814 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in1Min18814 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Con30869 = tf.keras.layers.Input(shape=([3, 3, 3, 2]))

Min58152 = keras.layers.Minimum(name = 'Min58152', )([in0Min58152,in1Min58152])
Glo23496 = keras.layers.GlobalMaxPool3D(name = 'Glo23496', )(Min58152)
Sof69781 = keras.layers.Softmax(axis=1, name = 'Sof69781', )(Glo23496)
Den41288 = keras.layers.Dense(3,name = 'Den41288', )(Sof69781)
Res85509 = keras.layers.Reshape((3, 1), name = 'Res85509', )(Den41288)
Res31813 = keras.layers.Reshape((3, 1, 1), name = 'Res31813', )(Res85509)
Res63414 = keras.layers.Reshape((3, 1, 1, 1), name = 'Res63414', )(Res31813)
Zer54959 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (2, 0)), name = 'Zer54959', )(Res63414)
Con20225 = keras.layers.Concatenate(axis=4, name = 'Con20225', )([Zer54959,in0Con20225])
Sub32815 = keras.layers.Subtract(name = 'Sub32815', )([in0Sub32815,in1Sub32815])
Res22466 = keras.layers.Reshape((3, 3, 3, 1), name = 'Res22466', )(Sub32815)
Con86328 = keras.layers.Concatenate(axis=4, name = 'Con86328', )([Res22466,in0Con86328])
Con38492 = keras.layers.Conv3DTranspose(4, (1, 1, 1),strides=(1, 1, 1), padding='same', name = 'Con38492', )(in0Con38492)
Zer44311 = keras.layers.ZeroPadding3D(padding=((1, 0), (2, 0), (2, 0)), name = 'Zer44311', )(Con38492)
Mul78758 = keras.layers.Multiply(name = 'Mul78758', )([Con86328,Zer44311])
Min18814 = keras.layers.Minimum(name = 'Min18814', )([in0Min18814,in1Min18814])
Zer15481 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (2, 0)), name = 'Zer15481', )(Min18814)
Con30869 = keras.layers.Concatenate(axis=4, name = 'Con30869', )([Zer15481,in0Con30869])
Mul3483 = keras.layers.Multiply(name = 'Mul3483', )([Mul78758,Con30869])
Min41100 = keras.layers.Minimum(name = 'Min41100', )([Con20225,Mul3483])
model = tf.keras.models.Model(inputs=[in0Min58152,in1Min58152,in0Con20225,in0Sub32815,in1Sub32815,in0Con86328,in0Con38492,in0Min18814,in1Min18814,in0Con30869], outputs=Min41100)
w = model.get_layer('Den41288').get_weights() 
w[0] = np.array([[0.9216, 0.9917, 0.5421], [0.3432, 0.1407, 0.1631]])
w[1] = np.array([0.7459, 0.867, 0.6733])
model.get_layer('Den41288').set_weights(w) 
w = model.get_layer('Con38492').get_weights() 
w[0] = np.array([[[[[0.8619, 0.3903], [0.2829, 0.9771], [0.7874, 0.8131], [0.1863, 0.0985]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con38492').set_weights(w) 
in0Min58152 = tf.constant([[[[[0.1623, 0.3387], [0.5054, 0.4817]], [[0.4126, 0.3172], [0.5376, 0.3776]]]]])
in1Min58152 = tf.constant([[[[[0.0066, 0.3959], [0.0018, 0.2796]], [[0.0809, 0.6083], [0.7104, 0.2645]]]]])
in0Con20225 = tf.constant([[[[[0.4991, 0.0534, 0.8066], [0.9673, 0.8453, 0.0232], [0.7439, 0.6082, 0.7556]], [[0.5677, 0.1731, 0.4764], [0.8276, 0.981, 0.3437], [0.7086, 0.0123, 0.0533]], [[0.65, 0.8579, 0.6863], [0.6198, 0.0175, 0.5405], [0.7244, 0.0554, 0.4073]]], [[[0.6265, 0.7618, 0.6408], [0.7273, 0.4555, 0.4776], [0.5931, 0.0948, 0.066]], [[0.6554, 0.955, 0.8354], [0.9705, 0.978, 0.4664], [0.8219, 0.5747, 0.0023]], [[0.005, 0.7577, 0.9466], [0.523, 0.1738, 0.7911], [0.2721, 0.5859, 0.1397]]], [[[0.4134, 0.9994, 0.7368], [0.8836, 0.932, 0.3712], [0.7046, 0.6052, 0.9437]], [[0.7712, 0.6083, 0.1502], [0.1342, 0.0693, 0.9504], [0.9709, 0.421, 0.942]], [[0.1134, 0.3161, 0.9272], [0.9622, 0.8104, 0.056], [0.5226, 0.1101, 0.9598]]]]])
in0Sub32815 = tf.constant([[[[0.0058, 0.7977, 0.368], [0.5911, 0.183, 0.2253], [0.9387, 0.4012, 0.5119]], [[0.9276, 0.326, 0.0503], [0.9805, 0.4732, 0.5554], [0.9211, 0.4076, 0.8398]], [[0.0463, 0.6016, 0.8361], [0.3693, 0.3629, 0.9952], [0.4561, 0.1397, 0.04]]]])
in1Sub32815 = tf.constant([[[[0.2697, 0.223, 0.6443], [0.6947, 0.5492, 0.5297], [0.3606, 0.6547, 0.9075]], [[0.3877, 0.6556, 0.7625], [0.5304, 0.5796, 0.4805], [0.8461, 0.8783, 0.1551]], [[0.4814, 0.5858, 0.3071], [0.4603, 0.4742, 0.1545], [0.8789, 0.6135, 0.7166]]]])
in0Con86328 = tf.constant([[[[[0.3953, 0.5853, 0.2151], [0.2538, 0.1061, 0.6643], [0.4781, 0.5309, 0.7298]], [[0.125, 0.6595, 0.503], [0.5702, 0.194, 0.6076], [0.7541, 0.9745, 0.9867]], [[0.5597, 0.441, 0.382], [0.6953, 0.7695, 0.6795], [0.813, 0.0931, 0.844]]], [[[0.6373, 0.1962, 0.0196], [0.5975, 0.3646, 0.1974], [0.0045, 0.5129, 0.5297]], [[0.7619, 0.2113, 0.9648], [0.3873, 0.4112, 0.4384], [0.2012, 0.5098, 0.4446]], [[0.0019, 0.709, 0.0336], [0.5897, 0.942, 0.9955], [0.4339, 0.3158, 0.1452]]], [[[0.004, 0.1326, 0.9817], [0.6555, 0.3547, 0.5625], [0.2212, 0.6575, 0.3522]], [[0.6651, 0.4894, 0.3602], [0.2297, 0.1838, 0.4881], [0.2828, 0.4202, 0.5269]], [[0.2703, 0.2511, 0.7321], [0.424, 0.1812, 0.7469], [0.1891, 0.0746, 0.4375]]]]])
in0Con38492 = tf.constant([[[[[0.0575, 0.0308]]], [[[0.9722, 0.0448]]]]])
in0Min18814 = tf.constant([[[[[0.0594, 0.3621]], [[0.6683, 0.7388]]], [[[0.9455, 0.0443]], [[0.7361, 0.929]]]]])
in1Min18814 = tf.constant([[[[[0.1404, 0.2639]], [[0.702, 0.464]]], [[[0.8801, 0.6677]], [[0.7613, 0.4214]]]]])
in0Con30869 = tf.constant([[[[[0.3083, 0.9011], [0.7117, 0.2746], [0.2989, 0.8146]], [[0.8885, 0.9672], [0.0072, 0.1113], [0.6062, 0.0813]], [[0.2399, 0.7119], [0.0917, 0.1989], [0.2689, 0.1306]]], [[[0.3369, 0.5638], [0.2292, 0.5298], [0.73, 0.2376]], [[0.4465, 0.9126], [0.9979, 0.4682], [0.4716, 0.8788]], [[0.6243, 0.3955], [0.9063, 0.3751], [0.9158, 0.0564]]], [[[0.075, 0.7785], [0.0608, 0.8866], [0.2139, 0.4745]], [[0.849, 0.5648], [0.1309, 0.8101], [0.2023, 0.0949]], [[0.2231, 0.9345], [0.3041, 0.4811], [0.3302, 0.5758]]]]])
print (np.array2string(model.predict([in0Min58152,in1Min58152,in0Con20225,in0Sub32815,in1Sub32815,in0Con86328,in0Con38492,in0Min18814,in1Min18814,in0Con30869],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min41100.png')

LMin58152 = minimum_layer([[[[[[0.1623, 0.3387], [0.5054, 0.4817]], [[0.4126, 0.3172], [0.5376, 0.3776]]]]], [[[[[0.0066, 0.3959], [0.0018, 0.2796]], [[0.0809, 0.6083], [0.7104, 0.2645]]]]]], Min58152), 
LGlo23496 = global_max_pool3D_layer(Min58152, Glo23496), 
LSof69781 = softmax_layer(Glo23496, 1, Sof69781), 
LDen41288 = dense_layer(Sof69781, [[0.9216, 0.9917, 0.5421], [0.3432, 0.1407, 0.1631]],[0.7459, 0.867, 0.6733], Den41288), 
LRes85509 = reshape_layer(Den41288, [3, 1], Res85509), 
LRes31813 = reshape_layer(Res85509, [3, 1, 1], Res31813), 
LRes63414 = reshape_layer(Res31813, [3, 1, 1, 1], Res63414), 
LZer54959 = zero_padding3D_layer(Res63414, 0, 0, 2, 0, 2, 0, Zer54959), 
LCon20225 = concatenate_layer([Zer54959,[[[[[0.4991, 0.0534, 0.8066], [0.9673, 0.8453, 0.0232], [0.7439, 0.6082, 0.7556]], [[0.5677, 0.1731, 0.4764], [0.8276, 0.981, 0.3437], [0.7086, 0.0123, 0.0533]], [[0.65, 0.8579, 0.6863], [0.6198, 0.0175, 0.5405], [0.7244, 0.0554, 0.4073]]], [[[0.6265, 0.7618, 0.6408], [0.7273, 0.4555, 0.4776], [0.5931, 0.0948, 0.066]], [[0.6554, 0.955, 0.8354], [0.9705, 0.978, 0.4664], [0.8219, 0.5747, 0.0023]], [[0.005, 0.7577, 0.9466], [0.523, 0.1738, 0.7911], [0.2721, 0.5859, 0.1397]]], [[[0.4134, 0.9994, 0.7368], [0.8836, 0.932, 0.3712], [0.7046, 0.6052, 0.9437]], [[0.7712, 0.6083, 0.1502], [0.1342, 0.0693, 0.9504], [0.9709, 0.421, 0.942]], [[0.1134, 0.3161, 0.9272], [0.9622, 0.8104, 0.056], [0.5226, 0.1101, 0.9598]]]]]], 4, Con20225), 
LSub32815 = subtract_layer([[[[0.0058, 0.7977, 0.368], [0.5911, 0.183, 0.2253], [0.9387, 0.4012, 0.5119]], [[0.9276, 0.326, 0.0503], [0.9805, 0.4732, 0.5554], [0.9211, 0.4076, 0.8398]], [[0.0463, 0.6016, 0.8361], [0.3693, 0.3629, 0.9952], [0.4561, 0.1397, 0.04]]]], [[[[0.2697, 0.223, 0.6443], [0.6947, 0.5492, 0.5297], [0.3606, 0.6547, 0.9075]], [[0.3877, 0.6556, 0.7625], [0.5304, 0.5796, 0.4805], [0.8461, 0.8783, 0.1551]], [[0.4814, 0.5858, 0.3071], [0.4603, 0.4742, 0.1545], [0.8789, 0.6135, 0.7166]]]], Sub32815), 
LRes22466 = reshape_layer(Sub32815, [3, 3, 3, 1], Res22466), 
LCon86328 = concatenate_layer([Res22466,[[[[[0.3953, 0.5853, 0.2151], [0.2538, 0.1061, 0.6643], [0.4781, 0.5309, 0.7298]], [[0.125, 0.6595, 0.503], [0.5702, 0.194, 0.6076], [0.7541, 0.9745, 0.9867]], [[0.5597, 0.441, 0.382], [0.6953, 0.7695, 0.6795], [0.813, 0.0931, 0.844]]], [[[0.6373, 0.1962, 0.0196], [0.5975, 0.3646, 0.1974], [0.0045, 0.5129, 0.5297]], [[0.7619, 0.2113, 0.9648], [0.3873, 0.4112, 0.4384], [0.2012, 0.5098, 0.4446]], [[0.0019, 0.709, 0.0336], [0.5897, 0.942, 0.9955], [0.4339, 0.3158, 0.1452]]], [[[0.004, 0.1326, 0.9817], [0.6555, 0.3547, 0.5625], [0.2212, 0.6575, 0.3522]], [[0.6651, 0.4894, 0.3602], [0.2297, 0.1838, 0.4881], [0.2828, 0.4202, 0.5269]], [[0.2703, 0.2511, 0.7321], [0.424, 0.1812, 0.7469], [0.1891, 0.0746, 0.4375]]]]]], 4, Con86328), 
LCon38492 = conv3D_transpose_layer([[[[[0.0575, 0.0308]]], [[[0.9722, 0.0448]]]]], 1, 1, 1,[[[[[0.8619, 0.3903], [0.2829, 0.9771], [0.7874, 0.8131], [0.1863, 0.0985]]]]],[0, 0, 0, 0], 1, 1, 1, true, Con38492), 
LZer44311 = zero_padding3D_layer(Con38492, 1, 0, 2, 0, 2, 0, Zer44311), 
LMul78758 = multiply_layer([Con86328,Zer44311], Mul78758), 
LMin18814 = minimum_layer([[[[[[0.0594, 0.3621]], [[0.6683, 0.7388]]], [[[0.9455, 0.0443]], [[0.7361, 0.929]]]]], [[[[[0.1404, 0.2639]], [[0.702, 0.464]]], [[[0.8801, 0.6677]], [[0.7613, 0.4214]]]]]], Min18814), 
LZer15481 = zero_padding3D_layer(Min18814, 1, 0, 1, 0, 2, 0, Zer15481), 
LCon30869 = concatenate_layer([Zer15481,[[[[[0.3083, 0.9011], [0.7117, 0.2746], [0.2989, 0.8146]], [[0.8885, 0.9672], [0.0072, 0.1113], [0.6062, 0.0813]], [[0.2399, 0.7119], [0.0917, 0.1989], [0.2689, 0.1306]]], [[[0.3369, 0.5638], [0.2292, 0.5298], [0.73, 0.2376]], [[0.4465, 0.9126], [0.9979, 0.4682], [0.4716, 0.8788]], [[0.6243, 0.3955], [0.9063, 0.3751], [0.9158, 0.0564]]], [[[0.075, 0.7785], [0.0608, 0.8866], [0.2139, 0.4745]], [[0.849, 0.5648], [0.1309, 0.8101], [0.2023, 0.0949]], [[0.2231, 0.9345], [0.3041, 0.4811], [0.3302, 0.5758]]]]]], 4, Con30869), 
LMul3483 = multiply_layer([Mul78758,Con30869], Mul3483), 
LMin41100 = minimum_layer([Con20225,Mul3483], Min41100), 
exec_layers([LMin58152,LGlo23496,LSof69781,LDen41288,LRes85509,LRes31813,LRes63414,LZer54959,LCon20225,LSub32815,LRes22466,LCon86328,LCon38492,LZer44311,LMul78758,LMin18814,LZer15481,LCon30869,LMul3483,LMin41100],["Min58152","Glo23496","Sof69781","Den41288","Res85509","Res31813","Res63414","Zer54959","Con20225","Sub32815","Res22466","Con86328","Con38492","Zer44311","Mul78758","Min18814","Zer15481","Con30869","Mul3483","Min41100"],Min41100,"Min41100")

Actual (Unparsed): [[[[[-0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[-0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0281783, 0.0093339, 0.0203369, 0.0001126]]], [[[-0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[-0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[-0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.4260402, 0.0254049, 0.0197541, 0.0467382]]]]]

Expected (Unparsed): [[[[[0,0.0,0.0,0.0],[0,0.0,0.0,0.0],[0,0.0,0.0,0.0]],[[0,0.0,0.0,0.0],[0,0.0,0.0,0.0],[0,0.0,0.0,0.0]],[[0,0.0,0.0,0.0],[0,0.0,0.0,0.0],[-0.0,0.0,0.0,0.0]]],[[[0,0.0,0.0,0.0],[0,0.0,0.0,0.0],[0,0.0,0.0,0.0]],[[0,0.0,0.0,0.0],[0,0.0,0.0,0.0],[0,0.0,0.0,0.0]],[[0,0.0,0.0,0.0],[0,0.0,0.0,0.0],[0.0281783091324549,0.009333928157328,0.020336926890967204,0.00011257025234399999]]],[[[0,0.0,0.0,0.0],[0,0.0,0.0,0.0],[0,0.0,0.0,0.0]],[[0,0.0,0.0,0.0],[0,0.0,0.0,0.0],[0,0.0,0.0,0.0]],[[0,0.0,0.0,0.0],[0,0.0,0.0,0.0],[-0.4260401772783011,0.025404886548560397,0.0197540539073072,0.04673824812475]]]]]

Actual:   [[[[[-0, 0, 0, 0], [0, 0, 0, 0], [-0, 0, 0, 0]], [[-0, 0, 0, 0], [-0, 0, 0, 0], [-0, 0, 0, 0]], [[0, 0, 0, 0], [-0, 0, 0, 0], [-0, 0, 0, 0]]], [[[0, 0, 0, 0], [-0, 0, 0, 0], [-0, 0, 0, 0]], [[0, 0, 0, 0], [-0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [-0, 0, 0, 0], [0.0282, 0.0094, 0.0204, 0.0002]]], [[[-0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[-0, 0, 0, 0], [-0, 0, 0, 0], [0, 0, 0, 0]], [[-0, 0, 0, 0], [-0, 0, 0, 0], [-0.426, 0.0255, 0.0198, 0.0468]]]]]

Expected: [[[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [-0, 0, 0, 0]]], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0.0282, 0.0094, 0.0204, 0.0002]]], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [-0.426, 0.0255, 0.0198, 0.0468]]]]]