import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave19029 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Ave19029 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Zer85382 = tf.keras.layers.Input(shape=([1, 3, 1]))
in0Con80677 = tf.keras.layers.Input(shape=([3, 5, 1]))
in0Glo10413 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in0Con45053 = tf.keras.layers.Input(shape=([59]))

Ave19029 = keras.layers.Average(name = 'Ave19029', )([in0Ave19029,in1Ave19029])
Zer30941 = keras.layers.ZeroPadding2D(padding=((1, 0), (4, 0)), name = 'Zer30941', )(Ave19029)
Zer85382 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer85382', )(in0Zer85382)
Con80677 = keras.layers.Concatenate(axis=3, name = 'Con80677', )([Zer85382,in0Con80677])
Mul67282 = keras.layers.Multiply(name = 'Mul67282', )([Zer30941,Con80677])
Con97580 = keras.layers.Conv2DTranspose(4, (1, 1),strides=(1, 1), padding='same', name = 'Con97580', )(Mul67282)
Res58166 = keras.layers.Reshape((3, 20), name = 'Res58166', )(Con97580)
Fla84355 = keras.layers.Flatten(name = 'Fla84355', )(Res58166)
Glo10413 = keras.layers.GlobalAveragePooling3D(name = 'Glo10413', )(in0Glo10413)
Con45053 = keras.layers.Concatenate(axis=1, name = 'Con45053', )([Glo10413,in0Con45053])
Ave99309 = keras.layers.Average(name = 'Ave99309', )([Fla84355,Con45053])
model = tf.keras.models.Model(inputs=[in0Ave19029,in1Ave19029,in0Zer85382,in0Con80677,in0Glo10413,in0Con45053], outputs=Ave99309)
w = model.get_layer('Con97580').get_weights() 
w[0] = np.array([[[[0.5735, 0.1708], [0.9086, 0.9859], [0.4407, 0.3062], [0.1187, 0.5841]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con97580').set_weights(w) 
in0Ave19029 = tf.constant([[[[0.3325, 0.1941]], [[0.209, 0.2312]]]])
in1Ave19029 = tf.constant([[[[0.5134, 0.2855]], [[0.6081, 0.0628]]]])
in0Zer85382 = tf.constant([[[[1.0126], [1.219], [1.0455]]]])
in0Con80677 = tf.constant([[[[0.2387], [0.3218], [0.9144], [0.1683], [0.0539]], [[0.4507], [0.476], [0.7305], [0.8562], [0.9755]], [[0.1034], [0.3556], [0.1634], [0.0581], [0.3578]]]])
in0Glo10413 = tf.constant([[[[[1.9091], [1.3616]], [[1.4618], [1.56]]]]])
in0Con45053 = tf.constant([[0.4826, 0.2226, 0.5805, 0.3855, 0.5323, 0.9175, 0.4157, 0.0468, 0.9785, 0.4094, 0.3644, 0.8452, 0.8273, 0.4787, 0.526, 0.0972, 0.9763, 0.1979, 0.1977, 0.6759, 0.8973, 0.044, 0.7604, 0.1888, 0.5914, 0.9729, 0.4043, 0.7712, 0.7841, 0.1741, 0.8117, 0.3035, 0.4144, 0.2554, 0.206, 0.2228, 0.222, 0.552, 0.6275, 0.8725, 0.6383, 0.1024, 0.9019, 0.5088, 0.2462, 0.5881, 0.5304, 0.6645, 0.7925, 0.1958, 0.6513, 0.564, 0.1036, 0.9274, 0.2934, 0.6742, 0.2894, 0.3582, 0.3792]])
print (np.array2string(model.predict([in0Ave19029,in1Ave19029,in0Zer85382,in0Con80677,in0Glo10413,in0Con45053],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave99309.png')

LAve19029 = average_layer([[[[[0.3325, 0.1941]], [[0.209, 0.2312]]]], [[[[0.5134, 0.2855]], [[0.6081, 0.0628]]]]], Ave19029), 
LZer30941 = zero_padding2D_layer(Ave19029, 1, 0, 4, 0, Zer30941), 
LZer85382 = zero_padding2D_layer([[[[1.0126], [1.219], [1.0455]]]], 1, 1, 1, 1, Zer85382), 
LCon80677 = concatenate_layer([Zer85382,[[[[0.2387], [0.3218], [0.9144], [0.1683], [0.0539]], [[0.4507], [0.476], [0.7305], [0.8562], [0.9755]], [[0.1034], [0.3556], [0.1634], [0.0581], [0.3578]]]]], 3, Con80677), 
LMul67282 = multiply_layer([Zer30941,Con80677], Mul67282), 
LCon97580 = conv2D_transpose_layer(Mul67282, 1, 1,[[[[0.5735, 0.1708], [0.9086, 0.9859], [0.4407, 0.3062], [0.1187, 0.5841]]]],[0, 0, 0, 0], 1, 1, true, Con97580), 
LRes58166 = reshape_layer(Con97580, [3, 20], Res58166), 
LFla84355 = flatten_layer(Res58166, Fla84355), 
LGlo10413 = global_average_pooling3D_layer([[[[[1.9091], [1.3616]], [[1.4618], [1.56]]]]], Glo10413), 
LCon45053 = concatenate_layer([Glo10413,[[0.4826, 0.2226, 0.5805, 0.3855, 0.5323, 0.9175, 0.4157, 0.0468, 0.9785, 0.4094, 0.3644, 0.8452, 0.8273, 0.4787, 0.526, 0.0972, 0.9763, 0.1979, 0.1977, 0.6759, 0.8973, 0.044, 0.7604, 0.1888, 0.5914, 0.9729, 0.4043, 0.7712, 0.7841, 0.1741, 0.8117, 0.3035, 0.4144, 0.2554, 0.206, 0.2228, 0.222, 0.552, 0.6275, 0.8725, 0.6383, 0.1024, 0.9019, 0.5088, 0.2462, 0.5881, 0.5304, 0.6645, 0.7925, 0.1958, 0.6513, 0.564, 0.1036, 0.9274, 0.2934, 0.6742, 0.2894, 0.3582, 0.3792]]], 1, Con45053), 
LAve99309 = average_layer([Fla84355,Con45053], Ave99309), 
exec_layers([LAve19029,LZer30941,LZer85382,LCon80677,LMul67282,LCon97580,LRes58166,LFla84355,LGlo10413,LCon45053,LAve99309],["Ave19029","Zer30941","Zer85382","Con80677","Mul67282","Con97580","Res58166","Fla84355","Glo10413","Con45053","Ave99309"],Ave99309,"Ave99309")

Actual (Unparsed): [[0.7865625, 0.2413000, 0.1113000, 0.2902500, 0.1927500, 0.2661500, 0.4587500, 0.2078500, 0.0234000, 0.4892500, 0.2047000, 0.1822000, 0.4226000, 0.4136500, 0.2393500, 0.2630000, 0.0486000, 0.4881500, 0.0989500, 0.0988500, 0.3379500, 0.4486500, 0.0220000, 0.3802000, 0.0944000, 0.2957000, 0.4864500, 0.2021500, 0.3856000, 0.3920500, 0.0870500, 0.4058500, 0.1517500, 0.2072000, 0.1277000, 0.1030000, 0.1313772, 0.2263133, 0.3118139, 0.3820678, 0.4362500, 0.3191500, 0.0512000, 0.4509500, 0.2544000, 0.1231000, 0.2940500, 0.2652000, 0.3322500, 0.3962500, 0.0979000, 0.3256500, 0.2820000, 0.0518000, 0.4637000, 0.1467000, 0.3415917, 0.1706275, 0.1871525, 0.2049608]]

Expected (Unparsed): [[0.7865625,0.2413,0.1113,0.29025,0.19275,0.26615,0.45875,0.20785,0.0234,0.48925,0.2047,0.1822,0.4226,0.41365,0.23935,0.263,0.0486,0.48815,0.09895,0.09885,0.33795,0.44865,0.022,0.3802,0.0944,0.2957,0.48645,0.20215,0.3856,0.39205,0.08705,0.40585,0.15175,0.2072,0.1277,0.103,0.13137718646,0.22631327945500002,0.31181390219000005,0.38206776704499995,0.43625,0.31915,0.0512,0.45095,0.2544,0.1231,0.29405,0.2652,0.33225,0.39625,0.0979,0.32565,0.282,0.0518,0.4637,0.1467,0.34159174964,0.17062749397,0.18715253946000002,0.20496083702999998]]

Actual:   [[0.7866, 0.2413, 0.1113, 0.2903, 0.1928, 0.2662, 0.4588, 0.2079, 0.0234, 0.4893, 0.2047, 0.1822, 0.4226, 0.4137, 0.2394, 0.263, 0.0486, 0.4882, 0.099, 0.0989, 0.338, 0.4487, 0.022, 0.3802, 0.0944, 0.2957, 0.4865, 0.2022, 0.3856, 0.3921, 0.0871, 0.4059, 0.1518, 0.2072, 0.1277, 0.103, 0.1314, 0.2264, 0.3119, 0.3821, 0.4363, 0.3192, 0.0512, 0.451, 0.2544, 0.1231, 0.2941, 0.2652, 0.3323, 0.3963, 0.0979, 0.3257, 0.282, 0.0518, 0.4637, 0.1467, 0.3416, 0.1707, 0.1872, 0.205]]

Expected: [[0.7866, 0.2413, 0.1113, 0.2903, 0.1928, 0.2662, 0.4588, 0.2079, 0.0234, 0.4893, 0.2047, 0.1822, 0.4226, 0.4137, 0.2394, 0.263, 0.0486, 0.4882, 0.099, 0.0989, 0.338, 0.4487, 0.022, 0.3802, 0.0944, 0.2957, 0.4865, 0.2022, 0.3856, 0.3921, 0.0871, 0.4059, 0.1518, 0.2072, 0.1277, 0.103, 0.1314, 0.2264, 0.3119, 0.3821, 0.4363, 0.3192, 0.0512, 0.451, 0.2544, 0.1231, 0.2941, 0.2652, 0.3323, 0.3963, 0.0979, 0.3257, 0.282, 0.0518, 0.4637, 0.1467, 0.3416, 0.1707, 0.1872, 0.205]]