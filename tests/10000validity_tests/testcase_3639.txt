import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min88535 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Min88535 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Ave1631 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Ave1631 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Glo4448 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in0Con4021 = tf.keras.layers.Input(shape=([2]))
in0Con80838 = tf.keras.layers.Input(shape=([4, 5, 1]))
in0Sep26714 = tf.keras.layers.Input(shape=([2, 1, 1]))

Min88535 = keras.layers.Minimum(name = 'Min88535', )([in0Min88535,in1Min88535])
Ave1631 = keras.layers.Average(name = 'Ave1631', )([in0Ave1631,in1Ave1631])
Sub75698 = keras.layers.Subtract(name = 'Sub75698', )([Min88535,Ave1631])
Res68321 = keras.layers.Reshape((2, 2), name = 'Res68321', )(Sub75698)
Fla83784 = keras.layers.Flatten(name = 'Fla83784', )(Res68321)
Glo4448 = keras.layers.GlobalMaxPool3D(name = 'Glo4448', )(in0Glo4448)
Con4021 = keras.layers.Concatenate(axis=1, name = 'Con4021', )([Glo4448,in0Con4021])
Ave80508 = keras.layers.Average(name = 'Ave80508', )([Fla83784,Con4021])
Res78734 = keras.layers.Reshape((4, 1), name = 'Res78734', )(Ave80508)
Res23149 = keras.layers.Reshape((4, 1, 1), name = 'Res23149', )(Res78734)
Zer23437 = keras.layers.ZeroPadding2D(padding=((0, 0), (4, 0)), name = 'Zer23437', )(Res23149)
Con80838 = keras.layers.Concatenate(axis=3, name = 'Con80838', )([Zer23437,in0Con80838])
Sep26714 = keras.layers.SeparableConv2D(2, (1, 1),strides=(2, 2), padding='same', name = 'Sep26714', )(in0Sep26714)
Zer34969 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer34969', )(Sep26714)
Zer74255 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer74255', )(Zer34969)
Ave41757 = keras.layers.Average(name = 'Ave41757', )([Con80838,Zer74255])
model = tf.keras.models.Model(inputs=[in0Min88535,in1Min88535,in0Ave1631,in1Ave1631,in0Glo4448,in0Con4021,in0Con80838,in0Sep26714], outputs=Ave41757)
w = model.get_layer('Sep26714').get_weights() 
w[0] = np.array([[[[0.8043]]]])
w[1] = np.array([[[[0.3345, 0.4829]]]])
w[2] = np.array([0, 0])
model.get_layer('Sep26714').set_weights(w) 
in0Min88535 = tf.constant([[[[0.8231], [0.8066]], [[0.3302], [0.6205]]]])
in1Min88535 = tf.constant([[[[0.9543], [0.7202]], [[0.1454], [0.0057]]]])
in0Ave1631 = tf.constant([[[[0.8924], [0.389]], [[0.7844], [0.349]]]])
in1Ave1631 = tf.constant([[[[0.2773], [0.6673]], [[0.7908], [0.0933]]]])
in0Glo4448 = tf.constant([[[[[1.5535, 1.3197]]], [[[1.4316, 1.2279]]]]])
in0Con4021 = tf.constant([[0.942, 0.3062]])
in0Con80838 = tf.constant([[[[0.1637], [0.462], [0.1009], [0.391], [0.267]], [[0.5945], [0.4648], [0.5066], [0.7611], [0.8166]], [[0.7198], [0.3098], [0.6116], [0.1996], [0.5947]], [[0.3782], [0.9095], [0.9679], [0.6599], [0.456]]]])
in0Sep26714 = tf.constant([[[[0.7354]], [[0.3306]]]])
print (np.array2string(model.predict([in0Min88535,in1Min88535,in0Ave1631,in1Ave1631,in0Glo4448,in0Con4021,in0Con80838,in0Sep26714],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave41757.png')

LMin88535 = minimum_layer([[[[[0.8231], [0.8066]], [[0.3302], [0.6205]]]], [[[[0.9543], [0.7202]], [[0.1454], [0.0057]]]]], Min88535), 
LAve1631 = average_layer([[[[[0.8924], [0.389]], [[0.7844], [0.349]]]], [[[[0.2773], [0.6673]], [[0.7908], [0.0933]]]]], Ave1631), 
LSub75698 = subtract_layer(Min88535,Ave1631, Sub75698), 
LRes68321 = reshape_layer(Sub75698, [2, 2], Res68321), 
LFla83784 = flatten_layer(Res68321, Fla83784), 
LGlo4448 = global_max_pool3D_layer([[[[[1.5535, 1.3197]]], [[[1.4316, 1.2279]]]]], Glo4448), 
LCon4021 = concatenate_layer([Glo4448,[[0.942, 0.3062]]], 1, Con4021), 
LAve80508 = average_layer([Fla83784,Con4021], Ave80508), 
LRes78734 = reshape_layer(Ave80508, [4, 1], Res78734), 
LRes23149 = reshape_layer(Res78734, [4, 1, 1], Res23149), 
LZer23437 = zero_padding2D_layer(Res23149, 0, 0, 4, 0, Zer23437), 
LCon80838 = concatenate_layer([Zer23437,[[[[0.1637], [0.462], [0.1009], [0.391], [0.267]], [[0.5945], [0.4648], [0.5066], [0.7611], [0.8166]], [[0.7198], [0.3098], [0.6116], [0.1996], [0.5947]], [[0.3782], [0.9095], [0.9679], [0.6599], [0.456]]]]], 3, Con80838), 
LSep26714 = separable_conv2D_layer([[[[0.7354]], [[0.3306]]]], 1, 1,[[[[[0.8043]]]],[[[[0.3345, 0.4829]]]]],[0, 0], 2, 2, true, Sep26714), 
LZer34969 = zero_padding2D_layer(Sep26714, 1, 1, 1, 1, Zer34969), 
LZer74255 = zero_padding2D_layer(Zer34969, 1, 0, 2, 0, Zer74255), 
LAve41757 = average_layer([Con80838,Zer74255], Ave41757), 
exec_layers([LMin88535,LAve1631,LSub75698,LRes68321,LFla83784,LGlo4448,LCon4021,LAve80508,LRes78734,LRes23149,LZer23437,LCon80838,LSep26714,LZer34969,LZer74255,LAve41757],["Min88535","Ave1631","Sub75698","Res68321","Fla83784","Glo4448","Con4021","Ave80508","Res78734","Res23149","Zer23437","Con80838","Sep26714","Zer34969","Zer74255","Ave41757"],Ave41757,"Ave41757")

Actual (Unparsed): [[[[0.0000000, 0.0818500], [0.0000000, 0.2310000], [0.0000000, 0.0504500], [0.0000000, 0.1955000], [0.4479375, 0.1335000]], [[0.0000000, 0.2972500], [0.0000000, 0.2324000], [0.0000000, 0.2533000], [0.0000000, 0.3805500], [0.3779375, 0.4083000]], [[0.0000000, 0.3599000], [0.0000000, 0.1549000], [0.0000000, 0.3058000], [0.0989254, 0.2426134], [0.0749500, 0.2973500]], [[0.0000000, 0.1891000], [0.0000000, 0.4547500], [0.0000000, 0.4839500], [0.0000000, 0.3299500], [0.0226875, 0.2280000]]]]

Expected (Unparsed): [[[[0,0.08185],[0,0.231],[0,0.05045],[0,0.1955],[0.44793750000000004,0.1335]],[[0,0.29725],[0,0.2324],[0,0.2533],[0,0.38055],[0.37793750000000004,0.4083]],[[0,0.3599],[0,0.1549],[0,0.3058],[0.09892540129500002,0.242613382019],[0.07494999999999999,0.29735]],[[0,0.1891],[0,0.45475],[0,0.48395],[0,0.32995],[0.022687500000000013,0.228]]]]

Actual:   [[[[0, 0.0819], [0, 0.231], [0, 0.0505], [0, 0.1955], [0.448, 0.1335]], [[0, 0.2973], [0, 0.2324], [0, 0.2533], [0, 0.3806], [0.378, 0.4083]], [[0, 0.3599], [0, 0.1549], [0, 0.3058], [0.099, 0.2427], [0.075, 0.2974]], [[0, 0.1891], [0, 0.4548], [0, 0.484], [0, 0.33], [0.0227, 0.228]]]]

Expected: [[[[0, 0.0819], [0, 0.231], [0, 0.0505], [0, 0.1955], [0.448, 0.1335]], [[0, 0.2973], [0, 0.2324], [0, 0.2533], [0, 0.3806], [0.378, 0.4083]], [[0, 0.3599], [0, 0.1549], [0, 0.3058], [0.099, 0.2427], [0.075, 0.2974]], [[0, 0.1891], [0, 0.4548], [0, 0.484], [0, 0.33], [0.0227, 0.228]]]]