import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave22969 = tf.keras.layers.Input(shape=([2, 2]))
in0Con393 = tf.keras.layers.Input(shape=([1, 2]))
in0Sep68694 = tf.keras.layers.Input(shape=([1, 1]))
in0Min92341 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Min92341 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con37545 = tf.keras.layers.Input(shape=([3]))
in0Con70265 = tf.keras.layers.Input(shape=([4, 1]))
in0Min72733 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Min72733 = tf.keras.layers.Input(shape=([2, 1, 2]))

Ave22969 = keras.layers.AveragePooling1D(pool_size=(2), name = 'Ave22969', )(in0Ave22969)
Res7904 = keras.layers.Reshape((1, 2, 1), name = 'Res7904', )(Ave22969)
Up_35312 = keras.layers.UpSampling2D(size=(1, 1), name = 'Up_35312', )(Res7904)
Res58524 = keras.layers.Reshape((1, 2), name = 'Res58524', )(Up_35312)
Con393 = keras.layers.Concatenate(axis=2, name = 'Con393', )([Res58524,in0Con393])
Sep68694 = keras.layers.SeparableConv1D(4, (1),strides=(1), padding='valid', name = 'Sep68694', )(in0Sep68694)
Mul96038 = keras.layers.Multiply(name = 'Mul96038', )([Con393,Sep68694])
Lea42657 = keras.layers.LeakyReLU(alpha=9.421920802925065, name = 'Lea42657', )(Mul96038)
Fla19996 = keras.layers.Flatten(name = 'Fla19996', )(Lea42657)
Min92341 = keras.layers.Minimum(name = 'Min92341', )([in0Min92341,in1Min92341])
Res24359 = keras.layers.Reshape((2, 1), name = 'Res24359', )(Min92341)
Max76910 = keras.layers.MaxPool1D(pool_size=(2), name = 'Max76910', )(Res24359)
LST35039 = keras.layers.LSTM(1,recurrent_activation='sigmoid', name = 'LST35039', )(Max76910)
Con37545 = keras.layers.Concatenate(axis=1, name = 'Con37545', )([LST35039,in0Con37545])
Max20733 = keras.layers.Maximum(name = 'Max20733', )([Fla19996,Con37545])
Res46147 = keras.layers.Reshape((4, 1), name = 'Res46147', )(Max20733)
Con70265 = keras.layers.Concatenate(axis=2, name = 'Con70265', )([Res46147,in0Con70265])
Min72733 = keras.layers.Minimum(name = 'Min72733', )([in0Min72733,in1Min72733])
Res8767 = keras.layers.Reshape((2, 2), name = 'Res8767', )(Min72733)
Ave19463 = keras.layers.AveragePooling1D(pool_size=(1), strides=(1), padding='valid', name = 'Ave19463', )(Res8767)
Dot17413 = keras.layers.Dot(axes=(2, 2), name = 'Dot17413', )([Con70265,Ave19463])
model = tf.keras.models.Model(inputs=[in0Ave22969,in0Con393,in0Sep68694,in0Min92341,in1Min92341,in0Con37545,in0Con70265,in0Min72733,in1Min72733], outputs=Dot17413)
w = model.get_layer('Sep68694').get_weights() 
w[0] = np.array([[[0.6066]]])
w[1] = np.array([[[0.3379, 0.3143, 0.7654, 0.1102]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep68694').set_weights(w) 
w = model.get_layer('LST35039').get_weights() 
w[0] = np.array([[4, 5, 7, 2]])
w[1] = np.array([[2, 9, 6, 1]])
w[2] = np.array([1, 5, 10, 5])
model.get_layer('LST35039').set_weights(w) 
in0Ave22969 = tf.constant([[[1.8645, 1.238], [1.7193, 1.1488]]])
in0Con393 = tf.constant([[[0.6504, 0.1556]]])
in0Sep68694 = tf.constant([[[0.7541]]])
in0Min92341 = tf.constant([[[[0.3125]], [[0.3182]]]])
in1Min92341 = tf.constant([[[[0.5819]], [[0.6098]]]])
in0Con37545 = tf.constant([[0.5314, 0.0328, 0.6486]])
in0Con70265 = tf.constant([[[0.4366], [0.5758], [0.0256], [0.504]]])
in0Min72733 = tf.constant([[[[0.7304, 0.7763]], [[0.3129, 0.1199]]]])
in1Min72733 = tf.constant([[[[0.1756, 0.5553]], [[0.5652, 0.4582]]]])
print (np.array2string(model.predict([in0Ave22969,in0Con393,in0Sep68694,in0Min92341,in1Min92341,in0Con37545,in0Con70265,in0Min72733,in1Min72733],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Dot17413.png')

LAve22969 = average_pooling1D_layer([[[1.8645, 1.238], [1.7193, 1.1488]]], 2, Ave22969), 
LRes7904 = reshape_layer(Ave22969, [1, 2, 1], Res7904), 
LUp_35312 = up_sampling2D_layer(Res7904, 1, 1, Up_35312), 
LRes58524 = reshape_layer(Up_35312, [1, 2], Res58524), 
LCon393 = concatenate_layer([Res58524,[[[0.6504, 0.1556]]]], 2, Con393), 
LSep68694 = separable_conv1D_layer([[[0.7541]]], 1,[[[[0.6066]]],[[[0.3379, 0.3143, 0.7654, 0.1102]]]],[0, 0, 0, 0], 1, false, Sep68694), 
LMul96038 = multiply_layer([Con393,Sep68694], Mul96038), 
LLea42657 = leaky_relu_layer(Mul96038, 9.421920802925065, Lea42657), 
LFla19996 = flatten_layer(Lea42657, Fla19996), 
LMin92341 = minimum_layer([[[[[0.3125]], [[0.3182]]]], [[[[0.5819]], [[0.6098]]]]], Min92341), 
LRes24359 = reshape_layer(Min92341, [2, 1], Res24359), 
LMax76910 = max_pool1D_layer(Res24359, 2, Max76910), 
LLST35039 = lstm_layer(Max76910,[[4, 5, 7, 2]],[[2, 9, 6, 1]],[1, 5, 10, 5], LST35039), 
LCon37545 = concatenate_layer([LST35039,[[0.5314, 0.0328, 0.6486]]], 1, Con37545), 
LMax20733 = maximum_layer([Fla19996,Con37545], Max20733), 
LRes46147 = reshape_layer(Max20733, [4, 1], Res46147), 
LCon70265 = concatenate_layer([Res46147,[[[0.4366], [0.5758], [0.0256], [0.504]]]], 2, Con70265), 
LMin72733 = minimum_layer([[[[[0.7304, 0.7763]], [[0.3129, 0.1199]]]], [[[[0.1756, 0.5553]], [[0.5652, 0.4582]]]]], Min72733), 
LRes8767 = reshape_layer(Min72733, [2, 2], Res8767), 
LAve19463 = average_pooling1D_layer(Res8767, 1, 1, false, Ave19463), 
LDot17413 = dot_layer(Con70265,Ave19463, 2, 2, Dot17413), 
exec_layers([LAve22969,LRes7904,LUp_35312,LRes58524,LCon393,LSep68694,LMul96038,LLea42657,LFla19996,LMin92341,LRes24359,LMax76910,LLST35039,LCon37545,LMax20733,LRes46147,LCon70265,LMin72733,LRes8767,LAve19463,LDot17413],["Ave22969","Res7904","Up_35312","Res58524","Con393","Sep68694","Mul96038","Lea42657","Fla19996","Min92341","Res24359","Max76910","LST35039","Con37545","Max20733","Res46147","Con70265","Min72733","Res8767","Ave19463","Dot17413"],Dot17413,"Dot17413")

Actual (Unparsed): [[[0.3683386, 0.2766787], [0.4130556, 0.2353135], [0.0542032, 0.0743229], [0.3937654, 0.2633765]]]

Expected (Unparsed): [[[0.3683385686239904,0.2766787316881924],[0.41305558,0.23531348000000002],[0.05420323485029621,0.07432289052766336],[0.39376535999999995,0.26337654]]]

Actual:   [[[0.3684, 0.2767], [0.4131, 0.2354], [0.0543, 0.0744], [0.3938, 0.2634]]]

Expected: [[[0.3684, 0.2767], [0.4131, 0.2354], [0.0543, 0.0744], [0.3938, 0.2634]]]