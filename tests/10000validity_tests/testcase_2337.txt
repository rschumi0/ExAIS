import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max24004 = tf.keras.layers.Input(shape=([1, 2, 1]))
in1Max24004 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con3200 = tf.keras.layers.Input(shape=([14, 7]))
in0Min96979 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Min96979 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))

Max24004 = keras.layers.Maximum(name = 'Max24004', )([in0Max24004,in1Max24004])
Glo27627 = keras.layers.GlobalAveragePooling2D(name = 'Glo27627', )(Max24004)
Res72949 = keras.layers.Reshape((1, 1), name = 'Res72949', )(Glo27627)
Zer28515 = keras.layers.ZeroPadding1D(padding=((7, 0)), name = 'Zer28515', )(Res72949)
Zer25646 = keras.layers.ZeroPadding1D(padding=((6, 0)), name = 'Zer25646', )(Zer28515)
Con3200 = keras.layers.Concatenate(axis=2, name = 'Con3200', )([Zer25646,in0Con3200])
Min96979 = keras.layers.Minimum(name = 'Min96979', )([in0Min96979,in1Min96979])
Thr13036 = keras.layers.ThresholdedReLU(theta=2.686314512088087, name = 'Thr13036', )(Min96979)
Res36539 = keras.layers.Reshape((2, 2, 4), name = 'Res36539', )(Thr13036)
Res59607 = keras.layers.Reshape((2, 8), name = 'Res59607', )(Res36539)
Dot38942 = keras.layers.Dot(axes=(2, 2), name = 'Dot38942', )([Con3200,Res59607])
model = tf.keras.models.Model(inputs=[in0Max24004,in1Max24004,in0Con3200,in0Min96979,in1Min96979], outputs=Dot38942)
in0Max24004 = tf.constant([[[[0.5237], [0.5245]]]])
in1Max24004 = tf.constant([[[[0.4164], [0.533]]]])
in0Con3200 = tf.constant([[[0.9581, 0.2801, 0.5813, 0.1063, 0.5255, 0.8238, 0.8555], [0.8827, 0.5454, 0.552, 0.1258, 0.915, 0.7098, 0.5156], [0.2886, 0.21, 0.3117, 0.4024, 0.6873, 0.6958, 0.9608], [0.9343, 0.6071, 0.2304, 0.0058, 0.3857, 0.7384, 0.8612], [0.6399, 0.3133, 0.4477, 0.576, 0.6208, 0.6785, 0.7329], [0.0808, 0.902, 0.2903, 0.682, 0.589, 0.2435, 0.8986], [0.1027, 0.2141, 0.0448, 0.3315, 0.744, 0.3194, 0.2281], [0.7797, 0.1949, 0.0979, 0.9881, 0.7093, 0.1097, 0.7308], [0.6196, 0.9096, 0.8851, 0.705, 0.4364, 0.8655, 0.2923], [0.2558, 0.0044, 0.9895, 0.8565, 0.4468, 0.5228, 0.2417], [0.9643, 0.0992, 0.2118, 0.3193, 0.7823, 0.637, 0.9877], [0.9105, 0.0722, 0.9305, 0.5437, 0.4684, 0.9001, 0.3866], [0.1905, 0.5871, 0.0554, 0.8613, 0.4574, 0.3373, 0.7167], [0.4504, 0.5078, 0.855, 0.5339, 0.8529, 0.878, 0.0678]]])
in0Min96979 = tf.constant([[[[[0.8021, 0.8035], [0.2231, 0.58]], [[0.2869, 0.0488], [0.163, 0.0563]]], [[[0.5576, 0.5006], [0.5313, 0.6869]], [[0.3267, 0.6468], [0.1304, 0.6291]]]]])
in1Min96979 = tf.constant([[[[[0.8469, 0.618], [0.7827, 0.7315]], [[0.9746, 0.8038], [0.4266, 0.9202]]], [[[0.9959, 0.4128], [0.176, 0.0589]], [[0.7249, 0.3661], [0.4643, 0.7555]]]]])
print (np.array2string(model.predict([in0Max24004,in1Max24004,in0Con3200,in0Min96979,in1Min96979],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Dot38942.png')

LMax24004 = maximum_layer([[[[[0.5237], [0.5245]]]], [[[[0.4164], [0.533]]]]], Max24004), 
LGlo27627 = global_average_pooling2D_layer(Max24004, Glo27627), 
LRes72949 = reshape_layer(Glo27627, [1, 1], Res72949), 
LZer28515 = zero_padding1D_layer(Res72949, 7, 0, Zer28515), 
LZer25646 = zero_padding1D_layer(Zer28515, 6, 0, Zer25646), 
LCon3200 = concatenate_layer([Zer25646,[[[0.9581, 0.2801, 0.5813, 0.1063, 0.5255, 0.8238, 0.8555], [0.8827, 0.5454, 0.552, 0.1258, 0.915, 0.7098, 0.5156], [0.2886, 0.21, 0.3117, 0.4024, 0.6873, 0.6958, 0.9608], [0.9343, 0.6071, 0.2304, 0.0058, 0.3857, 0.7384, 0.8612], [0.6399, 0.3133, 0.4477, 0.576, 0.6208, 0.6785, 0.7329], [0.0808, 0.902, 0.2903, 0.682, 0.589, 0.2435, 0.8986], [0.1027, 0.2141, 0.0448, 0.3315, 0.744, 0.3194, 0.2281], [0.7797, 0.1949, 0.0979, 0.9881, 0.7093, 0.1097, 0.7308], [0.6196, 0.9096, 0.8851, 0.705, 0.4364, 0.8655, 0.2923], [0.2558, 0.0044, 0.9895, 0.8565, 0.4468, 0.5228, 0.2417], [0.9643, 0.0992, 0.2118, 0.3193, 0.7823, 0.637, 0.9877], [0.9105, 0.0722, 0.9305, 0.5437, 0.4684, 0.9001, 0.3866], [0.1905, 0.5871, 0.0554, 0.8613, 0.4574, 0.3373, 0.7167], [0.4504, 0.5078, 0.855, 0.5339, 0.8529, 0.878, 0.0678]]]], 2, Con3200), 
LMin96979 = minimum_layer([[[[[[0.8021, 0.8035], [0.2231, 0.58]], [[0.2869, 0.0488], [0.163, 0.0563]]], [[[0.5576, 0.5006], [0.5313, 0.6869]], [[0.3267, 0.6468], [0.1304, 0.6291]]]]], [[[[[0.8469, 0.618], [0.7827, 0.7315]], [[0.9746, 0.8038], [0.4266, 0.9202]]], [[[0.9959, 0.4128], [0.176, 0.0589]], [[0.7249, 0.3661], [0.4643, 0.7555]]]]]], Min96979), 
LThr13036 = thresholded_relu_layer(Min96979, 2.686314512088087, Thr13036), 
LRes36539 = reshape_layer(Thr13036, [2, 2, 4], Res36539), 
LRes59607 = reshape_layer(Res36539, [2, 8], Res59607), 
LDot38942 = dot_layer(Con3200,Res59607, 2, 2, Dot38942), 
exec_layers([LMax24004,LGlo27627,LRes72949,LZer28515,LZer25646,LCon3200,LMin96979,LThr13036,LRes36539,LRes59607,LDot38942],["Max24004","Glo27627","Res72949","Zer28515","Zer25646","Con3200","Min96979","Thr13036","Res36539","Res59607","Dot38942"],Dot38942,"Dot38942")

Actual (Unparsed): [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0]]]

Actual:   [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]]

Expected: [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]]