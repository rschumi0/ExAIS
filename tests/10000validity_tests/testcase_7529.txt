import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot55653 = tf.keras.layers.Input(shape=([3, 2]))
in1Dot55653 = tf.keras.layers.Input(shape=([3, 2]))
in0Con50880 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))
in0Sub26646 = tf.keras.layers.Input(shape=([3, 3, 2, 3]))
in1Sub26646 = tf.keras.layers.Input(shape=([3, 3, 2, 3]))

Dot55653 = keras.layers.Dot(axes=(2, 2), name = 'Dot55653', )([in0Dot55653,in1Dot55653])
Glo93120 = keras.layers.GlobalAveragePooling1D(name = 'Glo93120', )(Dot55653)
Res89360 = keras.layers.Reshape((3, 1), name = 'Res89360', )(Glo93120)
Glo19785 = keras.layers.GlobalMaxPool1D(name = 'Glo19785', )(Res89360)
Res23014 = keras.layers.Reshape((1, 1), name = 'Res23014', )(Glo19785)
Res27737 = keras.layers.Reshape((1, 1, 1), name = 'Res27737', )(Res23014)
Res74839 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res74839', )(Res27737)
Zer67641 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (1, 0)), name = 'Zer67641', )(Res74839)
Con50880 = keras.layers.Concatenate(axis=4, name = 'Con50880', )([Zer67641,in0Con50880])
Sub26646 = keras.layers.Subtract(name = 'Sub26646', )([in0Sub26646,in1Sub26646])
Mul79552 = keras.layers.Multiply(name = 'Mul79552', )([Con50880,Sub26646])
model = tf.keras.models.Model(inputs=[in0Dot55653,in1Dot55653,in0Con50880,in0Sub26646,in1Sub26646], outputs=Mul79552)
in0Dot55653 = tf.constant([[[0.9075, 0.218], [0.0951, 0.6542], [0.0487, 0.6973]]])
in1Dot55653 = tf.constant([[[0.9504, 0.4957], [0.808, 0.8623], [0.5563, 0.6875]]])
in0Con50880 = tf.constant([[[[[0.3019, 0.0225], [0.3435, 0.783]], [[0.2099, 0.9202], [0.3557, 0.2715]], [[0.0707, 0.6242], [0.2518, 0.8416]]], [[[0.5002, 0.793], [0.1407, 0.4293]], [[0.4021, 0.3891], [0.9086, 0.7715]], [[0.9072, 0.2147], [0.5754, 0.5254]]], [[[0.0813, 0.7695], [0.242, 0.7221]], [[0.0549, 0.73], [0.6642, 0.5532]], [[0.5357, 0.3564], [0.5019, 0.3279]]]]])
in0Sub26646 = tf.constant([[[[[0.6702, 0.6684, 0.12], [0.5547, 0.829, 0.5429]], [[0.8944, 0.762, 0.9876], [0.2945, 0.9691, 0.9547]], [[0.6419, 0.1885, 0.1772], [0.3294, 0.4049, 0.9211]]], [[[0.3577, 0.5347, 0.0494], [0.1327, 0.9705, 0.4771]], [[0.595, 0.791, 0.8511], [0.062, 0.9452, 0.2414]], [[0.7156, 0.633, 0.2958], [0.9771, 0.8753, 0.8921]]], [[[0.7743, 0.2081, 0.508], [0.3777, 0.5474, 0.1277]], [[0.745, 0.1605, 0.939], [0.3659, 0.7817, 0.2741]], [[0.9376, 0.4953, 0.1938], [0.5407, 0.839, 0.6147]]]]])
in1Sub26646 = tf.constant([[[[[0.6545, 0.875, 0.6729], [0.9723, 0.2839, 0.8532]], [[0.4885, 0.3092, 0.9354], [0.3185, 0.5398, 0.1074]], [[0.8259, 0.0629, 0.9019], [0.2073, 0.0506, 0.1718]]], [[[0.0747, 0.3224, 0.6867], [0.4466, 0.6884, 0.8256]], [[0.3904, 0.4327, 0.5066], [0.8055, 0.6138, 0.9688]], [[0.548, 0.7999, 0.8319], [0.8502, 0.2909, 0.8011]]], [[[0.4569, 0.1492, 0.6095], [0.098, 0.4404, 0.9733]], [[0.3004, 0.2703, 0.9137], [0.958, 0.8027, 0.1831]], [[0.6045, 0.5883, 0.9883], [0.1437, 0.1792, 0.5232]]]]])
print (np.array2string(model.predict([in0Dot55653,in1Dot55653,in0Con50880,in0Sub26646,in1Sub26646],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul79552.png')

LDot55653 = dot_layer([[[0.9075, 0.218], [0.0951, 0.6542], [0.0487, 0.6973]]], [[[0.9504, 0.4957], [0.808, 0.8623], [0.5563, 0.6875]]], 2, 2, Dot55653), 
LGlo93120 = global_average_pooling1D_layer(Dot55653, Glo93120), 
LRes89360 = reshape_layer(Glo93120, [3, 1], Res89360), 
LGlo19785 = global_max_pool1D_layer(Res89360, Glo19785), 
LRes23014 = reshape_layer(Glo19785, [1, 1], Res23014), 
LRes27737 = reshape_layer(Res23014, [1, 1, 1], Res27737), 
LRes74839 = reshape_layer(Res27737, [1, 1, 1, 1], Res74839), 
LZer67641 = zero_padding3D_layer(Res74839, 2, 0, 2, 0, 1, 0, Zer67641), 
LCon50880 = concatenate_layer([Zer67641,[[[[[0.3019, 0.0225], [0.3435, 0.783]], [[0.2099, 0.9202], [0.3557, 0.2715]], [[0.0707, 0.6242], [0.2518, 0.8416]]], [[[0.5002, 0.793], [0.1407, 0.4293]], [[0.4021, 0.3891], [0.9086, 0.7715]], [[0.9072, 0.2147], [0.5754, 0.5254]]], [[[0.0813, 0.7695], [0.242, 0.7221]], [[0.0549, 0.73], [0.6642, 0.5532]], [[0.5357, 0.3564], [0.5019, 0.3279]]]]]], 4, Con50880), 
LSub26646 = subtract_layer([[[[[0.6702, 0.6684, 0.12], [0.5547, 0.829, 0.5429]], [[0.8944, 0.762, 0.9876], [0.2945, 0.9691, 0.9547]], [[0.6419, 0.1885, 0.1772], [0.3294, 0.4049, 0.9211]]], [[[0.3577, 0.5347, 0.0494], [0.1327, 0.9705, 0.4771]], [[0.595, 0.791, 0.8511], [0.062, 0.9452, 0.2414]], [[0.7156, 0.633, 0.2958], [0.9771, 0.8753, 0.8921]]], [[[0.7743, 0.2081, 0.508], [0.3777, 0.5474, 0.1277]], [[0.745, 0.1605, 0.939], [0.3659, 0.7817, 0.2741]], [[0.9376, 0.4953, 0.1938], [0.5407, 0.839, 0.6147]]]]], [[[[[0.6545, 0.875, 0.6729], [0.9723, 0.2839, 0.8532]], [[0.4885, 0.3092, 0.9354], [0.3185, 0.5398, 0.1074]], [[0.8259, 0.0629, 0.9019], [0.2073, 0.0506, 0.1718]]], [[[0.0747, 0.3224, 0.6867], [0.4466, 0.6884, 0.8256]], [[0.3904, 0.4327, 0.5066], [0.8055, 0.6138, 0.9688]], [[0.548, 0.7999, 0.8319], [0.8502, 0.2909, 0.8011]]], [[[0.4569, 0.1492, 0.6095], [0.098, 0.4404, 0.9733]], [[0.3004, 0.2703, 0.9137], [0.958, 0.8027, 0.1831]], [[0.6045, 0.5883, 0.9883], [0.1437, 0.1792, 0.5232]]]]], Sub26646), 
LMul79552 = multiply_layer([Con50880,Sub26646], Mul79552), 
exec_layers([LDot55653,LGlo93120,LRes89360,LGlo19785,LRes23014,LRes27737,LRes74839,LZer67641,LCon50880,LSub26646,LMul79552],["Dot55653","Glo93120","Res89360","Glo19785","Res23014","Res27737","Res74839","Zer67641","Con50880","Sub26646","Mul79552"],Mul79552,"Mul79552")

Actual (Unparsed): [[[[[0.0000000, -0.0623725, -0.0124403], [-0.0000000, 0.1872418, -0.2429649]], [[0.0000000, 0.0950427, 0.0480345], [-0.0000000, 0.1527020, 0.2300419]], [[-0.0000000, 0.0088799, -0.4523577], [0.0000000, 0.0892127, 0.6306109]]], [[[0.0000000, 0.1061924, -0.5053789], [-0.0000000, 0.0396915, -0.1496111]], [[0.0000000, 0.1440724, 0.1340449], [-0.0000000, 0.3011101, -0.5611891]], [[0.0000000, -0.1514117, -0.1151007], [0.0000000, 0.3362638, 0.0478114]]], [[[0.0000000, 0.0047886, -0.0781042], [0.0000000, 0.0258940, -0.6106078]], [[0.0000000, -0.0060280, 0.0184690], [-0.0000000, -0.0139482, 0.0503412]], [[0.0000000, -0.0498201, -0.2831598], [0.2915079, 0.3311536, 0.0300029]]]]]

Expected (Unparsed): [[[[[0.0,-0.062372540000000004,-0.012440250000000002],[-0.0,0.18724185,-0.24296489999999993]],[[0.0,0.09504272000000001,0.048034440000000025],[-0.0,0.15270201,0.23004195]],[[-0.0,0.00887992,-0.45235774],[0.0,0.08921274000000001,0.6306108800000001]]],[[[0.0,0.10619245999999996,-0.5053789],[-0.0,0.03969147,-0.14961105]],[[0.0,0.14407243000000003,0.13404494999999997],[-0.0,0.30111004,-0.5611891]],[[0.0,-0.15141168000000005,-0.11510067],[0.0,0.33626376,0.04781139999999998]]],[[[0.0,0.004788570000000001,-0.07810425000000003],[0.0,0.025893999999999997,-0.6106077599999999]],[[0.0,-0.0060280199999999985,0.018468999999999992],[-0.0,-0.013948200000000013,0.0503412]],[[0.0,-0.04982010000000001,-0.2831598],[0.2915078697499999,0.33115362,0.03000285000000001]]]]]

Actual:   [[[[[0, -0.0623, -0.0124], [-0, 0.1873, -0.2429]], [[0, 0.0951, 0.0481], [-0, 0.1528, 0.2301]], [[-0, 0.0089, -0.4523], [0, 0.0893, 0.6307]]], [[[0, 0.1062, -0.5053], [-0, 0.0397, -0.1496]], [[0, 0.1441, 0.1341], [-0, 0.3012, -0.5611]], [[0, -0.1514, -0.1151], [0, 0.3363, 0.0479]]], [[[0, 0.0048, -0.0781], [0, 0.0259, -0.6106]], [[0, -0.006, 0.0185], [-0, -0.0139, 0.0504]], [[0, -0.0498, -0.2831], [0.2916, 0.3312, 0.0301]]]]]

Expected: [[[[[0, -0.0623, -0.0124], [-0, 0.1873, -0.2429]], [[0, 0.0951, 0.0481], [-0, 0.1528, 0.2301]], [[-0, 0.0089, -0.4523], [0, 0.0893, 0.6307]]], [[[0, 0.1062, -0.5053], [-0, 0.0397, -0.1496]], [[0, 0.1441, 0.1341], [-0, 0.3012, -0.5611]], [[0, -0.1514, -0.1151], [0, 0.3363, 0.0479]]], [[[0, 0.0048, -0.0781], [0, 0.0259, -0.6106]], [[0, -0.006, 0.0185], [-0, -0.0139, 0.0504]], [[0, -0.0498, -0.2831], [0.2916, 0.3312, 0.0301]]]]]