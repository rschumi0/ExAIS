import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sof87472 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Dep5987 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con66874 = tf.keras.layers.Input(shape=([6, 3, 2]))
in0Up_4991 = tf.keras.layers.Input(shape=([3, 1, 3]))

Sof87472 = keras.layers.Softmax(axis=1, name = 'Sof87472', input_shape=(1, 2, 1))(in0Sof87472)
Dep5987 = keras.layers.DepthwiseConv2D((1, 1),strides=(1, 1), padding='same', name = 'Dep5987', )(in0Dep5987)
Zer75398 = keras.layers.ZeroPadding2D(padding=((0, 0), (1, 0)), name = 'Zer75398', )(Dep5987)
Min18542 = keras.layers.Minimum(name = 'Min18542', )([Sof87472,Zer75398])
Zer14996 = keras.layers.ZeroPadding2D(padding=((5, 0), (1, 0)), name = 'Zer14996', )(Min18542)
Con66874 = keras.layers.Concatenate(axis=3, name = 'Con66874', )([Zer14996,in0Con66874])
Up_4991 = keras.layers.UpSampling2D(size=(2, 1), name = 'Up_4991', )(in0Up_4991)
Zer58636 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer58636', )(Up_4991)
Mul4888 = keras.layers.Multiply(name = 'Mul4888', )([Con66874,Zer58636])
model = tf.keras.models.Model(inputs=[in0Sof87472,in0Dep5987,in0Con66874,in0Up_4991], outputs=Mul4888)
w = model.get_layer('Dep5987').get_weights() 
w[0] = np.array([[[[0.5886]]]])
w[1] = np.array([0])
model.get_layer('Dep5987').set_weights(w) 
in0Sof87472 = tf.constant([[[[0.3848], [0.4125]]]])
in0Dep5987 = tf.constant([[[[0.1759]]]])
in0Con66874 = tf.constant([[[[0.373, 0.2783], [0.063, 0.3445], [0.1494, 0.4462]], [[0.2301, 0.8967], [0.1358, 0.4986], [0.3215, 0.2974]], [[0.6754, 0.522], [0.9941, 0.0667], [0.0272, 0.706]], [[0.4992, 0.7372], [0.3405, 0.9343], [0.085, 0.3109]], [[0.0399, 0.0438], [0.0096, 0.0166], [0.6088, 0.3975]], [[0.1751, 0.7768], [0.0622, 0.0103], [0.3384, 0.6519]]]])
in0Up_4991 = tf.constant([[[[1.5355, 1.6156, 1.3335]], [[1.1613, 1.8784, 1.092]], [[1.0382, 1.4353, 1.5539]]]])
print (np.array2string(model.predict([in0Sof87472,in0Dep5987,in0Con66874,in0Up_4991],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul4888.png')

LSof87472 = softmax_layer([[[[0.3848], [0.4125]]]], 1, Sof87472), 
LDep5987 = depthwise_conv2D_layer([[[[0.1759]]]], 1, 1,[[[[0.5886]]]],[0], 1, 1, true, Dep5987), 
LZer75398 = zero_padding2D_layer(Dep5987, 0, 0, 1, 0, Zer75398), 
LMin18542 = minimum_layer([Sof87472,Zer75398], Min18542), 
LZer14996 = zero_padding2D_layer(Min18542, 5, 0, 1, 0, Zer14996), 
LCon66874 = concatenate_layer([Zer14996,[[[[0.373, 0.2783], [0.063, 0.3445], [0.1494, 0.4462]], [[0.2301, 0.8967], [0.1358, 0.4986], [0.3215, 0.2974]], [[0.6754, 0.522], [0.9941, 0.0667], [0.0272, 0.706]], [[0.4992, 0.7372], [0.3405, 0.9343], [0.085, 0.3109]], [[0.0399, 0.0438], [0.0096, 0.0166], [0.6088, 0.3975]], [[0.1751, 0.7768], [0.0622, 0.0103], [0.3384, 0.6519]]]]], 3, Con66874), 
LUp_4991 = up_sampling2D_layer([[[[1.5355, 1.6156, 1.3335]], [[1.1613, 1.8784, 1.092]], [[1.0382, 1.4353, 1.5539]]]], 2, 1, Up_4991), 
LZer58636 = zero_padding2D_layer(Up_4991, 0, 0, 2, 0, Zer58636), 
LMul4888 = multiply_layer([Con66874,Zer58636], Mul4888), 
exec_layers([LSof87472,LDep5987,LZer75398,LMin18542,LZer14996,LCon66874,LUp_4991,LZer58636,LMul4888],["Sof87472","Dep5987","Zer75398","Min18542","Zer14996","Con66874","Up_4991","Zer58636","Mul4888"],Mul4888,"Mul4888")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.2413706, 0.5950077]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.5194154, 0.3965829]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0510925, 0.7709520]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.1596640, 0.3395028]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.8738106, 0.6176753]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.1074898, 0.4857055, 1.0129874]]]]

Expected (Unparsed): [[[[0,0.0,0.0],[0,0.0,0.0],[0.0,0.24137064,0.5950076999999999]],[[0,0.0,0.0],[0,0.0,0.0],[0.0,0.5194154,0.39658289999999996]],[[0,0.0,0.0],[0,0.0,0.0],[0.0,0.051092479999999996,0.770952]],[[0,0.0,0.0],[0,0.0,0.0],[0.0,0.15966400000000003,0.33950280000000005]],[[0,0.0,0.0],[0,0.0,0.0],[0.0,0.87381064,0.61767525]],[[0,0.0,0.0],[0,0.0,0.0],[0.107489767068,0.48570552,1.01298741]]]]

Actual:   [[[[0, 0, 0], [0, 0, 0], [0, 0.2414, 0.5951]], [[0, 0, 0], [0, 0, 0], [0, 0.5195, 0.3966]], [[0, 0, 0], [0, 0, 0], [0, 0.0511, 0.771]], [[0, 0, 0], [0, 0, 0], [0, 0.1597, 0.3396]], [[0, 0, 0], [0, 0, 0], [0, 0.8739, 0.6177]], [[0, 0, 0], [0, 0, 0], [0.1075, 0.4858, 1.013]]]]

Expected: [[[[0, 0, 0], [0, 0, 0], [0, 0.2414, 0.5951]], [[0, 0, 0], [0, 0, 0], [0, 0.5195, 0.3966]], [[0, 0, 0], [0, 0, 0], [0, 0.0511, 0.771]], [[0, 0, 0], [0, 0, 0], [0, 0.1597, 0.3396]], [[0, 0, 0], [0, 0, 0], [0, 0.8739, 0.6177]], [[0, 0, 0], [0, 0, 0], [0.1075, 0.4858, 1.013]]]]