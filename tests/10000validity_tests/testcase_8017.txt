import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave32252 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in1Ave32252 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Dot83885 = tf.keras.layers.Input(shape=([2, 2]))
in1Dot83885 = tf.keras.layers.Input(shape=([2, 2]))
in0Con77077 = tf.keras.layers.Input(shape=([2, 2]))
in0Con86274 = tf.keras.layers.Input(shape=([2, 4, 3, 1]))
in0Ave9619 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))
in1Ave9619 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))

Ave32252 = keras.layers.Average(name = 'Ave32252', )([in0Ave32252,in1Ave32252])
Res65614 = keras.layers.Reshape((2, 2, 2), name = 'Res65614', )(Ave32252)
Res8448 = keras.layers.Reshape((2, 4), name = 'Res8448', )(Res65614)
Dot83885 = keras.layers.Dot(axes=(2, 2), name = 'Dot83885', )([in0Dot83885,in1Dot83885])
Con77077 = keras.layers.Concatenate(axis=2, name = 'Con77077', )([Dot83885,in0Con77077])
Min1624 = keras.layers.Minimum(name = 'Min1624', )([Res8448,Con77077])
Thr58353 = keras.layers.ThresholdedReLU(theta=0.7597086964998253, name = 'Thr58353', )(Min1624)
Res17587 = keras.layers.Reshape((2, 4, 1), name = 'Res17587', )(Thr58353)
Res55190 = keras.layers.Reshape((2, 4, 1, 1), name = 'Res55190', )(Res17587)
Zer86569 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer86569', )(Res55190)
Con86274 = keras.layers.Concatenate(axis=4, name = 'Con86274', )([Zer86569,in0Con86274])
Ave9619 = keras.layers.Average(name = 'Ave9619', )([in0Ave9619,in1Ave9619])
Zer92916 = keras.layers.ZeroPadding3D(padding=((1, 0), (2, 0), (1, 0)), name = 'Zer92916', )(Ave9619)
Max15843 = keras.layers.Maximum(name = 'Max15843', )([Con86274,Zer92916])
Sof58586 = keras.layers.Softmax(axis=1, name = 'Sof58586', )(Max15843)
model = tf.keras.models.Model(inputs=[in0Ave32252,in1Ave32252,in0Dot83885,in1Dot83885,in0Con77077,in0Con86274,in0Ave9619,in1Ave9619], outputs=Sof58586)
in0Ave32252 = tf.constant([[[[[0.89, 0.692]], [[0.3066, 0.831]]], [[[0.3431, 0.4428]], [[0.5416, 0.1876]]]]])
in1Ave32252 = tf.constant([[[[[0.116, 0.0986]], [[0.6453, 0.158]]], [[[0.5926, 0.6169]], [[0.6277, 0.6164]]]]])
in0Dot83885 = tf.constant([[[0.8153, 0.4645], [0.1832, 0.9419]]])
in1Dot83885 = tf.constant([[[0.7814, 0.0646], [0.0001, 0.4058]]])
in0Con77077 = tf.constant([[[0.2056, 0.9862], [0.2372, 0.3172]]])
in0Con86274 = tf.constant([[[[[0.0155], [0.9721], [0.333]], [[0.7695], [0.7299], [0.3404]], [[0.8839], [0.3995], [0.2348]], [[0.8775], [0.0576], [0.1224]]], [[[0.716], [0.2102], [0.1669]], [[0.8101], [0.2892], [0.9708]], [[0.6245], [0.4921], [0.0669]], [[0.9395], [0.9877], [0.829]]]]])
in0Ave9619 = tf.constant([[[[[0.9353, 0.9615], [0.9219, 0.4995]], [[0.8359, 0.7331], [0.3713, 0.6535]]]]])
in1Ave9619 = tf.constant([[[[[0.598, 0.089], [0.7071, 0.4688]], [[0.8565, 0.7805], [0.472, 0.5361]]]]])
print (np.array2string(model.predict([in0Ave32252,in1Ave32252,in0Dot83885,in1Dot83885,in0Con77077,in0Con86274,in0Ave9619,in1Ave9619],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sof58586.png')

LAve32252 = average_layer([[[[[[0.89, 0.692]], [[0.3066, 0.831]]], [[[0.3431, 0.4428]], [[0.5416, 0.1876]]]]], [[[[[0.116, 0.0986]], [[0.6453, 0.158]]], [[[0.5926, 0.6169]], [[0.6277, 0.6164]]]]]], Ave32252), 
LRes65614 = reshape_layer(Ave32252, [2, 2, 2], Res65614), 
LRes8448 = reshape_layer(Res65614, [2, 4], Res8448), 
LDot83885 = dot_layer([[[0.8153, 0.4645], [0.1832, 0.9419]]], [[[0.7814, 0.0646], [0.0001, 0.4058]]], 2, 2, Dot83885), 
LCon77077 = concatenate_layer([Dot83885,[[[0.2056, 0.9862], [0.2372, 0.3172]]]], 2, Con77077), 
LMin1624 = minimum_layer([Res8448,Con77077], Min1624), 
LThr58353 = thresholded_relu_layer(Min1624, 0.7597086964998253, Thr58353), 
LRes17587 = reshape_layer(Thr58353, [2, 4, 1], Res17587), 
LRes55190 = reshape_layer(Res17587, [2, 4, 1, 1], Res55190), 
LZer86569 = zero_padding3D_layer(Res55190, 0, 0, 0, 0, 2, 0, Zer86569), 
LCon86274 = concatenate_layer([Zer86569,[[[[[0.0155], [0.9721], [0.333]], [[0.7695], [0.7299], [0.3404]], [[0.8839], [0.3995], [0.2348]], [[0.8775], [0.0576], [0.1224]]], [[[0.716], [0.2102], [0.1669]], [[0.8101], [0.2892], [0.9708]], [[0.6245], [0.4921], [0.0669]], [[0.9395], [0.9877], [0.829]]]]]], 4, Con86274), 
LAve9619 = average_layer([[[[[[0.9353, 0.9615], [0.9219, 0.4995]], [[0.8359, 0.7331], [0.3713, 0.6535]]]]], [[[[[0.598, 0.089], [0.7071, 0.4688]], [[0.8565, 0.7805], [0.472, 0.5361]]]]]], Ave9619), 
LZer92916 = zero_padding3D_layer(Ave9619, 1, 0, 2, 0, 1, 0, Zer92916), 
LMax15843 = maximum_layer([Con86274,Zer92916], Max15843), 
LSof58586 = softmax_layer(Max15843, 1, Sof58586), 
exec_layers([LAve32252,LRes65614,LRes8448,LDot83885,LCon77077,LMin1624,LThr58353,LRes17587,LRes55190,LZer86569,LCon86274,LAve9619,LZer92916,LMax15843,LSof58586],["Ave32252","Res65614","Res8448","Dot83885","Con77077","Min1624","Thr58353","Res17587","Res55190","Zer86569","Con86274","Ave9619","Zer92916","Max15843","Sof58586"],Sof58586,"Sof58586")

Actual (Unparsed): [[[[[0.5000000, 0.3317014], [0.5000000, 0.6817661], [0.5000000, 0.5414298]], [[0.5000000, 0.4898514], [0.5000000, 0.6084258], [0.5000000, 0.3474199]], [[0.5000000, 0.5644888], [0.3172042, 0.4686039], [0.3069324, 0.4379835]], [[0.5000000, 0.4845050], [0.3002306, 0.2829044], [0.3961220, 0.3303506]]], [[[0.5000000, 0.6682986], [0.5000000, 0.3182339], [0.5000000, 0.4585702]], [[0.5000000, 0.5101486], [0.5000000, 0.3915742], [0.5000000, 0.6525801]], [[0.5000000, 0.4355112], [0.6827958, 0.5313961], [0.6930676, 0.5620165]], [[0.5000000, 0.5154950], [0.6997694, 0.7170956], [0.6038780, 0.6696494]]]]]

Expected (Unparsed): [[[[[0.5,0.33170138071906113],[0.5,0.6817661021385032],[0.5,0.5414297924992445]],[[0.5,0.489851394008051],[0.5,0.6084258140882254],[0.5,0.3474198445548028]],[[0.5,0.5644887927973117],[0.3172042236573258,0.46860386152535444],[0.3069324028567207,0.4379834927284463]],[[0.5,0.4845049632587987],[0.3002306012917555,0.28290442711539066],[0.3961219871215331,0.3303505506930461]]],[[[0.5,0.6682986192809388],[0.5,0.31823389786149686],[0.5,0.45857020750075556]],[[0.5,0.5101486059919489],[0.5,0.39157418591177473],[0.5,0.6525801554451972]],[[0.5,0.4355112072026883],[0.6827957763426742,0.5313961384746455],[0.6930675971432794,0.5620165072715537]],[[0.5,0.5154950367412013],[0.6997693987082445,0.7170955728846092],[0.6038780128784669,0.6696494493069538]]]]]

Actual:   [[[[[0.5, 0.3318], [0.5, 0.6818], [0.5, 0.5415]], [[0.5, 0.4899], [0.5, 0.6085], [0.5, 0.3475]], [[0.5, 0.5645], [0.3173, 0.4687], [0.307, 0.438]], [[0.5, 0.4846], [0.3003, 0.283], [0.3962, 0.3304]]], [[[0.5, 0.6683], [0.5, 0.3183], [0.5, 0.4586]], [[0.5, 0.5102], [0.5, 0.3916], [0.5, 0.6526]], [[0.5, 0.4356], [0.6828, 0.5314], [0.6931, 0.5621]], [[0.5, 0.5155], [0.6998, 0.7171], [0.6039, 0.6697]]]]]

Expected: [[[[[0.5, 0.3318], [0.5, 0.6818], [0.5, 0.5415]], [[0.5, 0.4899], [0.5, 0.6085], [0.5, 0.3475]], [[0.5, 0.5645], [0.3173, 0.4687], [0.307, 0.438]], [[0.5, 0.4846], [0.3003, 0.283], [0.3962, 0.3304]]], [[[0.5, 0.6683], [0.5, 0.3183], [0.5, 0.4586]], [[0.5, 0.5102], [0.5, 0.3916], [0.5, 0.6526]], [[0.5, 0.4356], [0.6828, 0.5314], [0.6931, 0.5621]], [[0.5, 0.5155], [0.6998, 0.7171], [0.6039, 0.6697]]]]]