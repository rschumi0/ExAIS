import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave54673 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con73413 = tf.keras.layers.Input(shape=([3, 5, 4, 2]))
in0Zer70055 = tf.keras.layers.Input(shape=([1, 3, 2, 3]))

Ave54673 = keras.layers.AveragePooling2D(pool_size=(1, 1), name = 'Ave54673', )(in0Ave54673)
Con46961 = keras.layers.Conv2D(3, (1, 1),strides=(1, 1), padding='same', dilation_rate=(1, 1), name = 'Con46961', )(Ave54673)
Res97626 = keras.layers.Reshape((2, 1, 3, 1), name = 'Res97626', )(Con46961)
Zer23226 = keras.layers.ZeroPadding3D(padding=((1, 0), (4, 0), (1, 0)), name = 'Zer23226', )(Res97626)
Con73413 = keras.layers.Concatenate(axis=4, name = 'Con73413', )([Zer23226,in0Con73413])
Zer70055 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer70055', )(in0Zer70055)
Thr71167 = keras.layers.ThresholdedReLU(theta=6.572397749092303, name = 'Thr71167', )(Zer70055)
Min92624 = keras.layers.Minimum(name = 'Min92624', )([Con73413,Thr71167])
model = tf.keras.models.Model(inputs=[in0Ave54673,in0Con73413,in0Zer70055], outputs=Min92624)
w = model.get_layer('Con46961').get_weights() 
w[0] = np.array([[[[0.7526, 0.1824, 0.3792]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con46961').set_weights(w) 
in0Ave54673 = tf.constant([[[[1.185]], [[1.9818]]]])
in0Con73413 = tf.constant([[[[[0.8366, 0.4523], [0.0179, 0.8865], [0.3137, 0.9116], [0.9763, 0.1095]], [[0.5891, 0.407], [0.3575, 0.6209], [0.6606, 0.5257], [0.8777, 0.3715]], [[0.3057, 0.5304], [0.7894, 0.5192], [0.9166, 0.3342], [0.2948, 0.8602]], [[0.3534, 0.043], [0.2204, 0.7117], [0.7415, 0.0259], [0.4637, 0.8308]], [[0.0337, 0.0075], [0.696, 0.6821], [0.4611, 0.8563], [0.6836, 0.2564]]], [[[0.7019, 0.5868], [0.379, 0.6866], [0.7157, 0.5883], [0.6228, 0.1061]], [[0.7066, 0.2486], [0.8985, 0.5528], [0.6099, 0.9491], [0.0846, 0.2329]], [[0.8258, 0.8725], [0.5616, 0.1295], [0.6664, 0.1897], [0.3477, 0.7648]], [[0.1254, 0.9676], [0.1621, 0.9059], [0.1327, 0.5752], [0.442, 0.1443]], [[0.4148, 0.4573], [0.3781, 0.5697], [0.4431, 0.8902], [0.9757, 0.2112]]], [[[0.7276, 0.7385], [0.9938, 0.5253], [0.8856, 0.2912], [0.3752, 0.9718]], [[0.5005, 0.9715], [0.4358, 0.6386], [0.7753, 0.0862], [0.6522, 0.9506]], [[0.3784, 0.8088], [0.3612, 0.731], [0.6847, 0.2763], [0.0598, 0.2683]], [[0.8199, 0.0188], [0.2865, 0.59], [0.5315, 0.9391], [0.2528, 0.8402]], [[0.9306, 0.7124], [0.4942, 0.5175], [0.5752, 0.7866], [0.8141, 0.3412]]]]])
in0Zer70055 = tf.constant([[[[[1.2534, 1.1754, 1.8637], [1.6118, 1.1289, 1.2981]], [[1.5086, 1.6251, 1.3628], [1.5641, 1.0604, 1.893]], [[1.5184, 1.8387, 1.4769], [1.3583, 1.8108, 1.246]]]]])
print (np.array2string(model.predict([in0Ave54673,in0Con73413,in0Zer70055],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min92624.png')

LAve54673 = average_pooling2D_layer([[[[1.185]], [[1.9818]]]], 1, 1, Ave54673), 
LCon46961 = conv2D_layer(Ave54673, 1, 1,[[[[0.7526, 0.1824, 0.3792]]]],[0, 0, 0], 1, 1, true, 1, 1, Con46961), 
LRes97626 = reshape_layer(Con46961, [2, 1, 3, 1], Res97626), 
LZer23226 = zero_padding3D_layer(Res97626, 1, 0, 4, 0, 1, 0, Zer23226), 
LCon73413 = concatenate_layer([Zer23226,[[[[[0.8366, 0.4523], [0.0179, 0.8865], [0.3137, 0.9116], [0.9763, 0.1095]], [[0.5891, 0.407], [0.3575, 0.6209], [0.6606, 0.5257], [0.8777, 0.3715]], [[0.3057, 0.5304], [0.7894, 0.5192], [0.9166, 0.3342], [0.2948, 0.8602]], [[0.3534, 0.043], [0.2204, 0.7117], [0.7415, 0.0259], [0.4637, 0.8308]], [[0.0337, 0.0075], [0.696, 0.6821], [0.4611, 0.8563], [0.6836, 0.2564]]], [[[0.7019, 0.5868], [0.379, 0.6866], [0.7157, 0.5883], [0.6228, 0.1061]], [[0.7066, 0.2486], [0.8985, 0.5528], [0.6099, 0.9491], [0.0846, 0.2329]], [[0.8258, 0.8725], [0.5616, 0.1295], [0.6664, 0.1897], [0.3477, 0.7648]], [[0.1254, 0.9676], [0.1621, 0.9059], [0.1327, 0.5752], [0.442, 0.1443]], [[0.4148, 0.4573], [0.3781, 0.5697], [0.4431, 0.8902], [0.9757, 0.2112]]], [[[0.7276, 0.7385], [0.9938, 0.5253], [0.8856, 0.2912], [0.3752, 0.9718]], [[0.5005, 0.9715], [0.4358, 0.6386], [0.7753, 0.0862], [0.6522, 0.9506]], [[0.3784, 0.8088], [0.3612, 0.731], [0.6847, 0.2763], [0.0598, 0.2683]], [[0.8199, 0.0188], [0.2865, 0.59], [0.5315, 0.9391], [0.2528, 0.8402]], [[0.9306, 0.7124], [0.4942, 0.5175], [0.5752, 0.7866], [0.8141, 0.3412]]]]]], 4, Con73413), 
LZer70055 = zero_padding3D_layer([[[[[1.2534, 1.1754, 1.8637], [1.6118, 1.1289, 1.2981]], [[1.5086, 1.6251, 1.3628], [1.5641, 1.0604, 1.893]], [[1.5184, 1.8387, 1.4769], [1.3583, 1.8108, 1.246]]]]], 1, 1, 1, 1, 1, 1, Zer70055), 
LThr71167 = thresholded_relu_layer(Zer70055, 6.572397749092303, Thr71167), 
LMin92624 = minimum_layer([Con73413,Thr71167], Min92624), 
exec_layers([LAve54673,LCon46961,LRes97626,LZer23226,LCon73413,LZer70055,LThr71167,LMin92624],["Ave54673","Con46961","Res97626","Zer23226","Con73413","Zer70055","Thr71167","Min92624"],Min92624,"Min92624")

Actual (Unparsed): [[[[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]]]]

Expected (Unparsed): [[[[[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0]]],[[[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0]]],[[[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0]]]]]

Actual:   [[[[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]]]]

Expected: [[[[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]]]]