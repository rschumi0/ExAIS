import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Lay85085 = tf.keras.layers.Input(shape=([2, 4, 3]))
in0Per43888 = tf.keras.layers.Input(shape=([3, 3]))
in0Con79653 = tf.keras.layers.Input(shape=([3, 9]))
in0Sep18747 = tf.keras.layers.Input(shape=([1, 2]))
in0Con53643 = tf.keras.layers.Input(shape=([3, 8]))

Lay85085 = keras.layers.LayerNormalization(axis=1, epsilon=2.0421534248191184, name = 'Lay85085', )(in0Lay85085)
ELU76665 = keras.layers.ELU(alpha=-5.803779848099295, name = 'ELU76665', )(Lay85085)
Res43634 = keras.layers.Reshape((2, 12), name = 'Res43634', )(ELU76665)
Zer46444 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer46444', )(Res43634)
Per43888 = keras.layers.Permute((2,1), name = 'Per43888',)(in0Per43888)
Con79653 = keras.layers.Concatenate(axis=2, name = 'Con79653', )([Per43888,in0Con79653])
Mul96579 = keras.layers.Multiply(name = 'Mul96579', )([Zer46444,Con79653])
Sep18747 = keras.layers.SeparableConv1D(4, (1),strides=(1), padding='valid', name = 'Sep18747', )(in0Sep18747)
Zer98768 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer98768', )(Sep18747)
Con53643 = keras.layers.Concatenate(axis=2, name = 'Con53643', )([Zer98768,in0Con53643])
Max81393 = keras.layers.Maximum(name = 'Max81393', )([Mul96579,Con53643])
model = tf.keras.models.Model(inputs=[in0Lay85085,in0Per43888,in0Con79653,in0Sep18747,in0Con53643], outputs=Max81393)
w = model.get_layer('Sep18747').get_weights() 
w[0] = np.array([[[0.5005], [0.2332]]])
w[1] = np.array([[[0.5876, 0.2797, 0.7984, 0.7517], [0.4275, 0.5046, 0.5525, 0.0314]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep18747').set_weights(w) 
in0Lay85085 = tf.constant([[[[1.2402, 1.5149, 1.7973], [1.7586, 1.2106, 1.6743], [1.0694, 1.6956, 1.9053], [1.3129, 1.9839, 1.6753]], [[1.2004, 1.8994, 1.8506], [1.1141, 1.9298, 1.2897], [1.7556, 1.3914, 1.594], [1.2316, 1.6614, 1.1558]]]])
in0Per43888 = tf.constant([[[1.2799, 1.9008, 1.0401], [1.353, 1.8922, 1.6837], [1.0079, 1.3455, 1.7534]]])
in0Con79653 = tf.constant([[[0.4205, 0.5044, 0.4543, 0.151, 0.4592, 0.0739, 0.8315, 0.8531, 0.5947], [0.9866, 0.7607, 0.3679, 0.6461, 0.7492, 0.4031, 0.7996, 0.2106, 0.7627], [0.8442, 0.676, 0.9588, 0.1428, 0.6616, 0.8683, 0.3789, 0.6201, 0.6801]]])
in0Sep18747 = tf.constant([[[0.5126, 0.9586]]])
in0Con53643 = tf.constant([[[0.9976, 0.7399, 0.6054, 0.4647, 0.4405, 0.0524, 0.9158, 0.8443], [0.7878, 0.6912, 0.6405, 0.5585, 0.7086, 0.4106, 0.9438, 0.2567], [0.8534, 0.7379, 0.282, 0.5955, 0.4779, 0.3013, 0.8105, 0.5177]]])
print (np.array2string(model.predict([in0Lay85085,in0Per43888,in0Con79653,in0Sep18747,in0Con53643],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max81393.png')

LLay85085 = layer_normalization_layer([[[[1.2402, 1.5149, 1.7973], [1.7586, 1.2106, 1.6743], [1.0694, 1.6956, 1.9053], [1.3129, 1.9839, 1.6753]], [[1.2004, 1.8994, 1.8506], [1.1141, 1.9298, 1.2897], [1.7556, 1.3914, 1.594], [1.2316, 1.6614, 1.1558]]]], 1, 2.0421534248191184, Lay85085), 
LELU76665 = elu_layer(Lay85085, -5.803779848099295, ELU76665), 
LRes43634 = reshape_layer(ELU76665, [2, 12], Res43634), 
LZer46444 = zero_padding1D_layer(Res43634, 1, 0, Zer46444), 
LPer43888 = permute_layer([[[1.2799, 1.9008, 1.0401], [1.353, 1.8922, 1.6837], [1.0079, 1.3455, 1.7534]]], 2,1, Per43888), 
LCon79653 = concatenate_layer([Per43888,[[[0.4205, 0.5044, 0.4543, 0.151, 0.4592, 0.0739, 0.8315, 0.8531, 0.5947], [0.9866, 0.7607, 0.3679, 0.6461, 0.7492, 0.4031, 0.7996, 0.2106, 0.7627], [0.8442, 0.676, 0.9588, 0.1428, 0.6616, 0.8683, 0.3789, 0.6201, 0.6801]]]], 2, Con79653), 
LMul96579 = multiply_layer([Zer46444,Con79653], Mul96579), 
LSep18747 = separable_conv1D_layer([[[0.5126, 0.9586]]], 1,[[[[0.5005], [0.2332]]],[[[0.5876, 0.2797, 0.7984, 0.7517], [0.4275, 0.5046, 0.5525, 0.0314]]]],[0, 0, 0, 0], 1, false, Sep18747), 
LZer98768 = zero_padding1D_layer(Sep18747, 2, 0, Zer98768), 
LCon53643 = concatenate_layer([Zer98768,[[[0.9976, 0.7399, 0.6054, 0.4647, 0.4405, 0.0524, 0.9158, 0.8443], [0.7878, 0.6912, 0.6405, 0.5585, 0.7086, 0.4106, 0.9438, 0.2567], [0.8534, 0.7379, 0.282, 0.5955, 0.4779, 0.3013, 0.8105, 0.5177]]]], 2, Con53643), 
LMax81393 = maximum_layer([Mul96579,Con53643], Max81393), 
exec_layers([LLay85085,LELU76665,LRes43634,LZer46444,LPer43888,LCon79653,LMul96579,LSep18747,LZer98768,LCon53643,LMax81393],["Lay85085","ELU76665","Res43634","Zer46444","Per43888","Con79653","Mul96579","Sep18747","Zer98768","Con53643","Max81393"],Max81393,"Max81393")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.9976000, 0.7399000, 0.6054000, 0.4647000, 0.4405000, 0.0524000, 0.9158000, 0.8443000], [0.0264669, 1.3708018, 0.1442546, 0.2170298, 0.9559918, 0.6912000, 0.7807442, 0.5585000, 0.7086000, 0.4106000, 0.9438000, 0.2567000], [0.2463182, 0.2244874, 0.3283434, 0.9674807, 0.8534000, 0.7379000, 0.2820000, 0.5955000, 0.5171594, 0.3013000, 0.8105000, 0.6463709]]]

Expected (Unparsed): [[[0.0,0.0,0.0,0.0,0.9976,0.7399,0.6054,0.4647,0.4405,0.0524,0.9158,0.8443],[0.026466908230496237,1.3708017626156697,0.14425457488069943,0.21702978061354083,0.955991839110736,0.6912,0.7807441668600651,0.5585,0.7086,0.4106,0.9438,0.2567],[0.24631819167999996,0.224487396130097,0.32834344971999996,0.9674806567819435,0.8534,0.7379,0.282,0.5955,0.5171593607696537,0.3013,0.8105,0.6463708886842241]]]

Actual:   [[[0, 0, 0, 0, 0.9976, 0.7399, 0.6054, 0.4647, 0.4405, 0.0524, 0.9158, 0.8443], [0.0265, 1.3709, 0.1443, 0.2171, 0.956, 0.6912, 0.7808, 0.5585, 0.7086, 0.4106, 0.9438, 0.2567], [0.2464, 0.2245, 0.3284, 0.9675, 0.8534, 0.7379, 0.282, 0.5955, 0.5172, 0.3013, 0.8105, 0.6464]]]

Expected: [[[0, 0, 0, 0, 0.9976, 0.7399, 0.6054, 0.4647, 0.4405, 0.0524, 0.9158, 0.8443], [0.0265, 1.3709, 0.1443, 0.2171, 0.956, 0.6912, 0.7808, 0.5585, 0.7086, 0.4106, 0.9438, 0.2567], [0.2464, 0.2245, 0.3284, 0.9675, 0.8534, 0.7379, 0.282, 0.5955, 0.5172, 0.3013, 0.8105, 0.6464]]]