import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sof61187 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in0Max4270 = tf.keras.layers.Input(shape=([2, 2]))
in0Con83278 = tf.keras.layers.Input(shape=([2, 2]))
in0Mul53334 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Mul53334 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Con90501 = tf.keras.layers.Input(shape=([8]))

Sof61187 = keras.layers.Softmax(axis=1, name = 'Sof61187', input_shape=(1, 2, 2, 1))(in0Sof61187)
Res83786 = keras.layers.Reshape((1, 2, 2), name = 'Res83786', )(Sof61187)
Res28677 = keras.layers.Reshape((1, 4), name = 'Res28677', )(Res83786)
Zer61297 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer61297', )(Res28677)
Max4270 = keras.layers.MaxPool1D(pool_size=(1), name = 'Max4270', )(in0Max4270)
Con83278 = keras.layers.Concatenate(axis=2, name = 'Con83278', )([Max4270,in0Con83278])
Add8541 = keras.layers.Add(name = 'Add8541', )([Zer61297,Con83278])
Res23369 = keras.layers.Reshape((2, 4, 1), name = 'Res23369', )(Add8541)
Up_37107 = keras.layers.UpSampling2D(size=(2, 2), name = 'Up_37107', )(Res23369)
Res5365 = keras.layers.Reshape((4, 8), name = 'Res5365', )(Up_37107)
Fla98316 = keras.layers.Flatten(name = 'Fla98316', )(Res5365)
Mul53334 = keras.layers.Multiply(name = 'Mul53334', )([in0Mul53334,in1Mul53334])
Res18098 = keras.layers.Reshape((2, 2, 4), name = 'Res18098', )(Mul53334)
Con82833 = keras.layers.Conv2DTranspose(3, (2, 1),strides=(1, 2), padding='same', name = 'Con82833', )(Res18098)
Fla23770 = keras.layers.Flatten(name = 'Fla23770', )(Con82833)
Con90501 = keras.layers.Concatenate(axis=1, name = 'Con90501', )([Fla23770,in0Con90501])
Sub66420 = keras.layers.Subtract(name = 'Sub66420', )([Fla98316,Con90501])
model = tf.keras.models.Model(inputs=[in0Sof61187,in0Max4270,in0Con83278,in0Mul53334,in1Mul53334,in0Con90501], outputs=Sub66420)
w = model.get_layer('Con82833').get_weights() 
w[0] = np.array([[[[0.7986, 0.297, 0.1429, 0.5261], [0.0863, 0.9389, 0.2276, 0.96], [0.6848, 0.4666, 0.8157, 0.3564]]], [[[0.8611, 0.5204, 0.7369, 0.6235], [0.7017, 0.5548, 0.3699, 0.1162], [0.8208, 0.6458, 0.2698, 0.7199]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con82833').set_weights(w) 
in0Sof61187 = tf.constant([[[[[0.8897], [0.3969]], [[0.8941], [0.3794]]]]])
in0Max4270 = tf.constant([[[1.9133, 1.9506], [1.7115, 1.8489]]])
in0Con83278 = tf.constant([[[0.985, 0.3289], [0.1718, 0.3875]]])
in0Mul53334 = tf.constant([[[[[0.9873, 0.2903], [0.917, 0.2525]], [[0.4425, 0.4314], [0.3191, 0.8953]]], [[[0.7979, 0.7546], [0.3718, 0.7756]], [[0.3995, 0.7463], [0.7264, 0.597]]]]])
in1Mul53334 = tf.constant([[[[[0.9452, 0.1379], [0.4216, 0.7589]], [[0.1095, 0.3009], [0.8939, 0.4076]]], [[[0.3341, 0.1804], [0.3014, 0.6344]], [[0.8666, 0.8835], [0.6182, 0.8178]]]]])
in0Con90501 = tf.constant([[0.2801, 0.9241, 0.7585, 0.8489, 0.2656, 0.6857, 0.0227, 0.8852]])
print (np.array2string(model.predict([in0Sof61187,in0Max4270,in0Con83278,in0Mul53334,in1Mul53334,in0Con90501],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub66420.png')

LSof61187 = softmax_layer([[[[[0.8897], [0.3969]], [[0.8941], [0.3794]]]]], 1, Sof61187), 
LRes83786 = reshape_layer(Sof61187, [1, 2, 2], Res83786), 
LRes28677 = reshape_layer(Res83786, [1, 4], Res28677), 
LZer61297 = zero_padding1D_layer(Res28677, 1, 0, Zer61297), 
LMax4270 = max_pool1D_layer([[[1.9133, 1.9506], [1.7115, 1.8489]]], 1, Max4270), 
LCon83278 = concatenate_layer([Max4270,[[[0.985, 0.3289], [0.1718, 0.3875]]]], 2, Con83278), 
LAdd8541 = add_layer([Zer61297,Con83278], Add8541), 
LRes23369 = reshape_layer(Add8541, [2, 4, 1], Res23369), 
LUp_37107 = up_sampling2D_layer(Res23369, 2, 2, Up_37107), 
LRes5365 = reshape_layer(Up_37107, [4, 8], Res5365), 
LFla98316 = flatten_layer(Res5365, Fla98316), 
LMul53334 = multiply_layer([[[[[[0.9873, 0.2903], [0.917, 0.2525]], [[0.4425, 0.4314], [0.3191, 0.8953]]], [[[0.7979, 0.7546], [0.3718, 0.7756]], [[0.3995, 0.7463], [0.7264, 0.597]]]]], [[[[[0.9452, 0.1379], [0.4216, 0.7589]], [[0.1095, 0.3009], [0.8939, 0.4076]]], [[[0.3341, 0.1804], [0.3014, 0.6344]], [[0.8666, 0.8835], [0.6182, 0.8178]]]]]], Mul53334), 
LRes18098 = reshape_layer(Mul53334, [2, 2, 4], Res18098), 
LCon82833 = conv2D_transpose_layer(Res18098, 2, 1,[[[[0.7986, 0.297, 0.1429, 0.5261], [0.0863, 0.9389, 0.2276, 0.96], [0.6848, 0.4666, 0.8157, 0.3564]]], [[[0.8611, 0.5204, 0.7369, 0.6235], [0.7017, 0.5548, 0.3699, 0.1162], [0.8208, 0.6458, 0.2698, 0.7199]]]],[0, 0, 0], 1, 2, true, Con82833), 
LFla23770 = flatten_layer(Con82833, Fla23770), 
LCon90501 = concatenate_layer([Fla23770,[[0.2801, 0.9241, 0.7585, 0.8489, 0.2656, 0.6857, 0.0227, 0.8852]]], 1, Con90501), 
LSub66420 = subtract_layer(Fla98316,Con90501, Sub66420), 
exec_layers([LSof61187,LRes83786,LRes28677,LZer61297,LMax4270,LCon83278,LAdd8541,LRes23369,LUp_37107,LRes5365,LFla98316,LMul53334,LRes18098,LCon82833,LFla23770,LCon90501,LSub66420],["Sof61187","Res83786","Res28677","Zer61297","Max4270","Con83278","Add8541","Res23369","Up_37107","Res5365","Fla98316","Mul53334","Res18098","Con82833","Fla23770","Con90501","Sub66420"],Sub66420,"Sub66420")

Actual (Unparsed): [[1.0001015, 1.5232297, 0.9092187, 1.9506000, 0.9850000, 0.9850000, 0.0189038, -0.2124072, 1.4568183, 1.9133000, 1.9506000, 1.9506000, -0.7719713, -0.5059881, -1.2180178, 0.3289000, 2.7115000, 2.7115000, 1.5085619, 1.3751159, -0.3765091, 1.1718000, 1.3875000, 1.3875000, 2.4314001, 1.7874001, 2.0904000, 1.9999999, 0.9062000, 0.4861000, 1.3648000, 0.5023000]]

Expected (Unparsed): [[1.000101457849,1.523229637739,0.90921863981,1.9506,0.985,0.985,0.018903823601000014,-0.21240726106299995,1.456818209699,1.9133,1.9506,1.9506,-0.7719712988050002,-0.5059880833229998,-1.2180177439250002,0.3289,2.7115,2.7115,1.5085618666879999,1.3751158778870003,-0.3765091699479999,1.1718,1.3875,1.3875,2.4314,1.7873999999999999,2.0904,2.0,0.9061999999999999,0.4861,1.3648,0.5023]]

Actual:   [[1.0002, 1.5233, 0.9093, 1.9506, 0.985, 0.985, 0.019, -0.2124, 1.4569, 1.9133, 1.9506, 1.9506, -0.7719, -0.5059, -1.218, 0.3289, 2.7115, 2.7115, 1.5086, 1.3752, -0.3765, 1.1718, 1.3875, 1.3875, 2.4315, 1.7875, 2.0904, 2, 0.9062, 0.4861, 1.3648, 0.5023]]

Expected: [[1.0002, 1.5233, 0.9093, 1.9506, 0.985, 0.985, 0.019, -0.2124, 1.4569, 1.9133, 1.9506, 1.9506, -0.7719, -0.5059, -1.218, 0.3289, 2.7115, 2.7115, 1.5086, 1.3752, -0.3765, 1.1718, 1.3875, 1.3875, 2.4314, 1.7874, 2.0904, 2, 0.9062, 0.4861, 1.3648, 0.5023]]