import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub93173 = tf.keras.layers.Input(shape=([2, 2, 3]))
in1Sub93173 = tf.keras.layers.Input(shape=([2, 2, 3]))

Sub93173 = keras.layers.Subtract(name = 'Sub93173', )([in0Sub93173,in1Sub93173])
Lay43391 = keras.layers.LayerNormalization(axis=2, epsilon=2.0360066257096214, name = 'Lay43391', )(Sub93173)
Den82341 = keras.layers.Dense(3,name = 'Den82341', )(Lay43391)
Res23336 = keras.layers.Reshape((2, 2, 3, 1), name = 'Res23336', )(Den82341)
Up_29811 = keras.layers.UpSampling3D(size=(2, 1, 2), name = 'Up_29811', )(Res23336)
model = tf.keras.models.Model(inputs=[in0Sub93173,in1Sub93173], outputs=Up_29811)
w = model.get_layer('Den82341').get_weights() 
w[0] = np.array([[0.4149, 0.0854, 0.553], [0.6421, 0.9763, 0.958], [0.9321, 0.668, 0.5424]])
w[1] = np.array([0.908, 0.2836, 0.6375])
model.get_layer('Den82341').set_weights(w) 
in0Sub93173 = tf.constant([[[[0.0045, 0.717, 0.775], [0.4527, 0.8126, 0.2214]], [[0.8187, 0.2021, 0.243], [0.5464, 0.3144, 0.691]]]])
in1Sub93173 = tf.constant([[[[0.6863, 0.017, 0.4322], [0.9594, 0.7975, 0.0514]], [[0.342, 0.6306, 0.6522], [0.4209, 0.5298, 0.5596]]]])
print (np.array2string(model.predict([in0Sub93173,in1Sub93173],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Up_29811.png')

LSub93173 = subtract_layer([[[[0.0045, 0.717, 0.775], [0.4527, 0.8126, 0.2214]], [[0.8187, 0.2021, 0.243], [0.5464, 0.3144, 0.691]]]], [[[[0.6863, 0.017, 0.4322], [0.9594, 0.7975, 0.0514]], [[0.342, 0.6306, 0.6522], [0.4209, 0.5298, 0.5596]]]], Sub93173), 
LLay43391 = layer_normalization_layer(Sub93173, 2, 2.0360066257096214, Lay43391), 
LDen82341 = dense_layer(Lay43391, [[0.4149, 0.0854, 0.553], [0.6421, 0.9763, 0.958], [0.9321, 0.668, 0.5424]],[0.908, 0.2836, 0.6375], Den82341), 
LRes23336 = reshape_layer(Den82341, [2, 2, 3, 1], Res23336), 
LUp_29811 = up_sampling3D_layer(Res23336, 2, 1, 2, Up_29811), 
exec_layers([LSub93173,LLay43391,LDen82341,LRes23336,LUp_29811],["Sub93173","Lay43391","Den82341","Res23336","Up_29811"],Up_29811,"Up_29811")

Actual (Unparsed): [[[[[1.0887750], [1.0887750], [0.5465845], [0.5465845], [0.8599856], [0.8599856]], [[0.7272250], [0.7272250], [0.0206155], [0.0206155], [0.4150144], [0.4150144]]], [[[1.0887750], [1.0887750], [0.5465845], [0.5465845], [0.8599856], [0.8599856]], [[0.7272250], [0.7272250], [0.0206155], [0.0206155], [0.4150144], [0.4150144]]], [[[0.7373775], [0.7373775], [0.0969999], [0.0969999], [0.5327540], [0.5327540]], [[1.0786225], [1.0786225], [0.4702001], [0.4702001], [0.7422460], [0.7422460]]], [[[0.7373775], [0.7373775], [0.0969999], [0.0969999], [0.5327540], [0.5327540]], [[1.0786225], [1.0786225], [0.4702001], [0.4702001], [0.7422460], [0.7422460]]]]]

Expected (Unparsed): [[[[[1.0887749702680434],[1.0887749702680434],[0.5465844975113177],[0.5465844975113177],[0.8599856152844878],[0.8599856152844878]],[[0.7272250297319568],[0.7272250297319568],[0.020615502488682387],[0.020615502488682387],[0.41501438471551216],[0.41501438471551216]]],[[[1.0887749702680434],[1.0887749702680434],[0.5465844975113177],[0.5465844975113177],[0.8599856152844878],[0.8599856152844878]],[[0.7272250297319568],[0.7272250297319568],[0.020615502488682387],[0.020615502488682387],[0.41501438471551216],[0.41501438471551216]]],[[[0.7373774561381513],[0.7373774561381513],[0.09699983781923667],[0.09699983781923667],[0.5327540117158667],[0.5327540117158667]],[[1.0786225438618489],[1.0786225438618489],[0.4702001621807634],[0.4702001621807634],[0.7422459882841334],[0.7422459882841334]]],[[[0.7373774561381513],[0.7373774561381513],[0.09699983781923667],[0.09699983781923667],[0.5327540117158667],[0.5327540117158667]],[[1.0786225438618489],[1.0786225438618489],[0.4702001621807634],[0.4702001621807634],[0.7422459882841334],[0.7422459882841334]]]]]

Actual:   [[[[[1.0888], [1.0888], [0.5466], [0.5466], [0.86], [0.86]], [[0.7273], [0.7273], [0.0207], [0.0207], [0.4151], [0.4151]]], [[[1.0888], [1.0888], [0.5466], [0.5466], [0.86], [0.86]], [[0.7273], [0.7273], [0.0207], [0.0207], [0.4151], [0.4151]]], [[[0.7374], [0.7374], [0.097], [0.097], [0.5328], [0.5328]], [[1.0787], [1.0787], [0.4703], [0.4703], [0.7423], [0.7423]]], [[[0.7374], [0.7374], [0.097], [0.097], [0.5328], [0.5328]], [[1.0787], [1.0787], [0.4703], [0.4703], [0.7423], [0.7423]]]]]

Expected: [[[[[1.0888], [1.0888], [0.5466], [0.5466], [0.86], [0.86]], [[0.7273], [0.7273], [0.0207], [0.0207], [0.4151], [0.4151]]], [[[1.0888], [1.0888], [0.5466], [0.5466], [0.86], [0.86]], [[0.7273], [0.7273], [0.0207], [0.0207], [0.4151], [0.4151]]], [[[0.7374], [0.7374], [0.097], [0.097], [0.5328], [0.5328]], [[1.0787], [1.0787], [0.4703], [0.4703], [0.7423], [0.7423]]], [[[0.7374], [0.7374], [0.097], [0.097], [0.5328], [0.5328]], [[1.0787], [1.0787], [0.4703], [0.4703], [0.7423], [0.7423]]]]]