import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con31347 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con94932 = tf.keras.layers.Input(shape=([4, 2, 2, 2]))
in0Max64865 = tf.keras.layers.Input(shape=([1, 2]))

Con31347 = keras.layers.Conv2D(2, (1, 2),strides=(1, 1), padding='valid', dilation_rate=(1, 1), name = 'Con31347', )(in0Con31347)
Res28890 = keras.layers.Reshape((2, 1, 2, 1), name = 'Res28890', )(Con31347)
Up_14775 = keras.layers.UpSampling3D(size=(2, 2, 1), name = 'Up_14775', )(Res28890)
Con94932 = keras.layers.Concatenate(axis=4, name = 'Con94932', )([Up_14775,in0Con94932])
Max64865 = keras.layers.MaxPool1D(pool_size=(1), strides=(1), padding='valid', name = 'Max64865', )(in0Max64865)
ELU41730 = keras.layers.ELU(alpha=6.967820548722411, name = 'ELU41730', )(Max64865)
Res95002 = keras.layers.Reshape((1, 2, 1), name = 'Res95002', )(ELU41730)
Res9859 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res9859', )(Res95002)
Con64898 = keras.layers.Conv3D(3, (1, 1, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con64898', )(Res9859)
Zer96656 = keras.layers.ZeroPadding3D(padding=((3, 0), (0, 0), (1, 0)), name = 'Zer96656', )(Con64898)
Add90777 = keras.layers.Add(name = 'Add90777', )([Con94932,Zer96656])
Den59879 = keras.layers.Dense(3,name = 'Den59879', )(Add90777)
model = tf.keras.models.Model(inputs=[in0Con31347,in0Con94932,in0Max64865], outputs=Den59879)
w = model.get_layer('Con31347').get_weights() 
w[0] = np.array([[[[0.3643, 0.4179], [0.0116, 0.1635]], [[0.599, 0.8367], [0.2931, 0.9747]]]])
w[1] = np.array([0, 0])
model.get_layer('Con31347').set_weights(w) 
w = model.get_layer('Con64898').get_weights() 
w[0] = np.array([[[[[0.2682, 0.8401, 0.1304]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con64898').set_weights(w) 
w = model.get_layer('Den59879').get_weights() 
w[0] = np.array([[0.0221, 0.2002, 0.178], [0.3361, 0.6749, 0.6509], [0.4578, 0.6284, 0.3843]])
w[1] = np.array([0.6241, 0.8057, 0.5779])
model.get_layer('Den59879').set_weights(w) 
in0Con31347 = tf.constant([[[[0.0797, 0.9749], [0.6628, 0.7971]], [[0.846, 0.4639], [0.0644, 0.4484]]]])
in0Con94932 = tf.constant([[[[[0.7752, 0.1562], [0.3555, 0.0489]], [[0.5105, 0.5583], [0.9419, 0.909]]], [[[0.6576, 0.6351], [0.0026, 0.4604]], [[0.6664, 0.4271], [0.0174, 0.5277]]], [[[0.4625, 0.9949], [0.8694, 0.5155]], [[0.927, 0.5211], [0.323, 0.6885]]], [[[0.8538, 0.2145], [0.7271, 0.9134]], [[0.9828, 0.8537], [0.8457, 0.989]]]]])
in0Max64865 = tf.constant([[[1.5598, 1.3957]]])
print (np.array2string(model.predict([in0Con31347,in0Con94932,in0Max64865],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Den59879.png')

LCon31347 = conv2D_layer([[[[0.0797, 0.9749], [0.6628, 0.7971]], [[0.846, 0.4639], [0.0644, 0.4484]]]], 1, 2,[[[[0.3643, 0.4179], [0.0116, 0.1635]], [[0.599, 0.8367], [0.2931, 0.9747]]]],[0, 0], 1, 1, false, 1, 1, Con31347), 
LRes28890 = reshape_layer(Con31347, [2, 1, 2, 1], Res28890), 
LUp_14775 = up_sampling3D_layer(Res28890, 2, 2, 1, Up_14775), 
LCon94932 = concatenate_layer([Up_14775,[[[[[0.7752, 0.1562], [0.3555, 0.0489]], [[0.5105, 0.5583], [0.9419, 0.909]]], [[[0.6576, 0.6351], [0.0026, 0.4604]], [[0.6664, 0.4271], [0.0174, 0.5277]]], [[[0.4625, 0.9949], [0.8694, 0.5155]], [[0.927, 0.5211], [0.323, 0.6885]]], [[[0.8538, 0.2145], [0.7271, 0.9134]], [[0.9828, 0.8537], [0.8457, 0.989]]]]]], 4, Con94932), 
LMax64865 = max_pool1D_layer([[[1.5598, 1.3957]]], 1, 1, false, Max64865), 
LELU41730 = elu_layer(Max64865, 6.967820548722411, ELU41730), 
LRes95002 = reshape_layer(ELU41730, [1, 2, 1], Res95002), 
LRes9859 = reshape_layer(Res95002, [1, 2, 1, 1], Res9859), 
LCon64898 = conv3D_layer(Res9859, 1, 1, 1,[[[[[0.2682, 0.8401, 0.1304]]]]],[0, 0, 0], 1, 1, 1, false, 1, 1, 1, Con64898), 
LZer96656 = zero_padding3D_layer(Con64898, 3, 0, 0, 0, 1, 0, Zer96656), 
LAdd90777 = add_layer([Con94932,Zer96656], Add90777), 
LDen59879 = dense_layer(Add90777, [[0.0221, 0.2002, 0.178], [0.3361, 0.6749, 0.6509], [0.4578, 0.6284, 0.3843]],[0.6241, 0.8057, 0.5779], Den59879), 
exec_layers([LCon31347,LRes28890,LUp_14775,LCon94932,LMax64865,LELU41730,LRes95002,LRes9859,LCon64898,LZer96656,LAdd90777,LDen59879],["Con31347","Res28890","Up_14775","Con94932","Max64865","ELU41730","Res95002","Res9859","Con64898","Zer96656","Add90777","Den59879"],Den59879,"Den59879")

Actual (Unparsed): [[[[[0.9709820, 1.5613709, 1.2619417], [0.7996548, 1.3815007, 1.0993950]], [[1.0660977, 1.6354045, 1.2441755], [1.3904976, 2.3177489, 1.8116192]]], [[[1.1506970, 1.7829434, 1.3694371], [0.8694298, 1.4019151, 1.0278318]], [[1.0584323, 1.6581754, 1.2952307], [0.9052140, 1.4541950, 1.0633285]]], [[[1.2456986, 1.8398493, 1.3473587], [1.1726405, 1.9006484, 1.5057179]], [[1.1849114, 1.8556044, 1.4676204], [1.0681949, 1.6405962, 1.2165500]]], [[[1.0199474, 1.6135343, 1.3021481], [1.8497544, 3.1505979, 2.5715694]], [[1.3559301, 2.1022696, 1.6317588], [1.8671217, 3.1628480, 2.5720283]]]]]

Expected (Unparsed): [[[[[0.970981975796,1.561370910152,1.26194169528],[0.799654810111,1.381500732182,1.0993949819800002]],[[1.066097685796,1.635404520152,1.24417549528],[1.3904976301110001,2.317748932182,1.81161917198]]],[[[1.150697035796,1.7829434301519997,1.36943712528],[0.869429820111,1.401915122182,1.02783182198]],[[1.058432315796,1.6581753501519998,1.2952306452799998],[0.905214040111,1.454194962182,1.06332853198]]],[[[1.245698603028,1.839849262136,1.34735868104],[1.172640533221,1.900648328002,1.5057178517799998]],[[1.1849114130279998,1.8556043921360001,1.46762039104],[1.0681948932210001,1.6405961680019998,1.21654999178]]],[[[1.019947413028,1.613534272136,1.30214813104],[1.8497543688309999,3.1505978583039997,2.5715693366980004]],[[1.355930073028,2.102269652136,1.63175879104],[1.8671216708360001,3.162848015895,2.5720282501170004]]]]]

Actual:   [[[[[0.971, 1.5614, 1.262], [0.7997, 1.3816, 1.0994]], [[1.0661, 1.6355, 1.2442], [1.3905, 2.3178, 1.8117]]], [[[1.1507, 1.783, 1.3695], [0.8695, 1.402, 1.0279]], [[1.0585, 1.6582, 1.2953], [0.9053, 1.4542, 1.0634]]], [[[1.2457, 1.8399, 1.3474], [1.1727, 1.9007, 1.5058]], [[1.185, 1.8557, 1.4677], [1.0682, 1.6406, 1.2166]]], [[[1.02, 1.6136, 1.3022], [1.8498, 3.1506, 2.5716]], [[1.356, 2.1023, 1.6318], [1.8672, 3.1629, 2.5721]]]]]

Expected: [[[[[0.971, 1.5614, 1.262], [0.7997, 1.3816, 1.0994]], [[1.0661, 1.6355, 1.2442], [1.3905, 2.3178, 1.8117]]], [[[1.1507, 1.783, 1.3695], [0.8695, 1.402, 1.0279]], [[1.0585, 1.6582, 1.2953], [0.9053, 1.4542, 1.0634]]], [[[1.2457, 1.8399, 1.3474], [1.1727, 1.9007, 1.5058]], [[1.185, 1.8557, 1.4677], [1.0682, 1.6406, 1.2166]]], [[[1.02, 1.6136, 1.3022], [1.8498, 3.1506, 2.5716]], [[1.356, 2.1023, 1.6318], [1.8672, 3.1629, 2.5721]]]]]