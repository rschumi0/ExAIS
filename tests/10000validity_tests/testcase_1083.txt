import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max27688 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in1Max27688 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))

Max27688 = keras.layers.Maximum(name = 'Max27688', )([in0Max27688,in1Max27688])
Fla85505 = keras.layers.Flatten(name = 'Fla85505', )(Max27688)
Res33047 = keras.layers.Reshape((8, 1), name = 'Res33047', )(Fla85505)
Res19070 = keras.layers.Reshape((8, 1, 1), name = 'Res19070', )(Res33047)
Res41026 = keras.layers.Reshape((8, 1, 1, 1), name = 'Res41026', )(Res19070)
Up_17507 = keras.layers.UpSampling3D(size=(1, 2, 2), name = 'Up_17507', )(Res41026)
model = tf.keras.models.Model(inputs=[in0Max27688,in1Max27688], outputs=Up_17507)
in0Max27688 = tf.constant([[[[[0.2551], [0.192]], [[0.8194], [0.5014]]], [[[0.2163], [0.1738]], [[0.0481], [0.2457]]]]])
in1Max27688 = tf.constant([[[[[0.626], [0.9766]], [[0.3737], [0.286]]], [[[0.0826], [0.1275]], [[0.2224], [0.4955]]]]])
print (np.array2string(model.predict([in0Max27688,in1Max27688],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Up_17507.png')

LMax27688 = maximum_layer([[[[[[0.2551], [0.192]], [[0.8194], [0.5014]]], [[[0.2163], [0.1738]], [[0.0481], [0.2457]]]]], [[[[[0.626], [0.9766]], [[0.3737], [0.286]]], [[[0.0826], [0.1275]], [[0.2224], [0.4955]]]]]], Max27688), 
LFla85505 = flatten_layer(Max27688, Fla85505), 
LRes33047 = reshape_layer(Fla85505, [8, 1], Res33047), 
LRes19070 = reshape_layer(Res33047, [8, 1, 1], Res19070), 
LRes41026 = reshape_layer(Res19070, [8, 1, 1, 1], Res41026), 
LUp_17507 = up_sampling3D_layer(Res41026, 1, 2, 2, Up_17507), 
exec_layers([LMax27688,LFla85505,LRes33047,LRes19070,LRes41026,LUp_17507],["Max27688","Fla85505","Res33047","Res19070","Res41026","Up_17507"],Up_17507,"Up_17507")

Actual (Unparsed): [[[[[0.6260000], [0.6260000]], [[0.6260000], [0.6260000]]], [[[0.9766000], [0.9766000]], [[0.9766000], [0.9766000]]], [[[0.8194000], [0.8194000]], [[0.8194000], [0.8194000]]], [[[0.5014000], [0.5014000]], [[0.5014000], [0.5014000]]], [[[0.2163000], [0.2163000]], [[0.2163000], [0.2163000]]], [[[0.1738000], [0.1738000]], [[0.1738000], [0.1738000]]], [[[0.2224000], [0.2224000]], [[0.2224000], [0.2224000]]], [[[0.4955000], [0.4955000]], [[0.4955000], [0.4955000]]]]]

Expected (Unparsed): [[[[[0.626],[0.626]],[[0.626],[0.626]]],[[[0.9766],[0.9766]],[[0.9766],[0.9766]]],[[[0.8194],[0.8194]],[[0.8194],[0.8194]]],[[[0.5014],[0.5014]],[[0.5014],[0.5014]]],[[[0.2163],[0.2163]],[[0.2163],[0.2163]]],[[[0.1738],[0.1738]],[[0.1738],[0.1738]]],[[[0.2224],[0.2224]],[[0.2224],[0.2224]]],[[[0.4955],[0.4955]],[[0.4955],[0.4955]]]]]

Actual:   [[[[[0.626], [0.626]], [[0.626], [0.626]]], [[[0.9766], [0.9766]], [[0.9766], [0.9766]]], [[[0.8194], [0.8194]], [[0.8194], [0.8194]]], [[[0.5014], [0.5014]], [[0.5014], [0.5014]]], [[[0.2163], [0.2163]], [[0.2163], [0.2163]]], [[[0.1738], [0.1738]], [[0.1738], [0.1738]]], [[[0.2224], [0.2224]], [[0.2224], [0.2224]]], [[[0.4955], [0.4955]], [[0.4955], [0.4955]]]]]

Expected: [[[[[0.626], [0.626]], [[0.626], [0.626]]], [[[0.9766], [0.9766]], [[0.9766], [0.9766]]], [[[0.8194], [0.8194]], [[0.8194], [0.8194]]], [[[0.5014], [0.5014]], [[0.5014], [0.5014]]], [[[0.2163], [0.2163]], [[0.2163], [0.2163]]], [[[0.1738], [0.1738]], [[0.1738], [0.1738]]], [[[0.2224], [0.2224]], [[0.2224], [0.2224]]], [[[0.4955], [0.4955]], [[0.4955], [0.4955]]]]]