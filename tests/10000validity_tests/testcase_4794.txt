import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul20059 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in1Mul20059 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in0Min90916 = tf.keras.layers.Input(shape=([2, 2]))
in1Min90916 = tf.keras.layers.Input(shape=([2, 2]))
in0Con72841 = tf.keras.layers.Input(shape=([2, 2]))
in0Max70056 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in1Max70056 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))

Mul20059 = keras.layers.Multiply(name = 'Mul20059', )([in0Mul20059,in1Mul20059])
Res66187 = keras.layers.Reshape((2, 1, 4), name = 'Res66187', )(Mul20059)
Res81326 = keras.layers.Reshape((2, 4), name = 'Res81326', )(Res66187)
Min90916 = keras.layers.Minimum(name = 'Min90916', )([in0Min90916,in1Min90916])
Ave38865 = keras.layers.AveragePooling1D(pool_size=(1), name = 'Ave38865', )(Min90916)
Con72841 = keras.layers.Concatenate(axis=2, name = 'Con72841', )([Ave38865,in0Con72841])
Mul86996 = keras.layers.Multiply(name = 'Mul86996', )([Res81326,Con72841])
Res58531 = keras.layers.Reshape((2, 4, 1), name = 'Res58531', )(Mul86996)
Res90793 = keras.layers.Reshape((2, 4, 1, 1), name = 'Res90793', )(Res58531)
Zer94462 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer94462', )(Res90793)
Max70056 = keras.layers.Maximum(name = 'Max70056', )([in0Max70056,in1Max70056])
Zer3019 = keras.layers.ZeroPadding3D(padding=((1, 0), (2, 0), (1, 0)), name = 'Zer3019', )(Max70056)
Add21981 = keras.layers.Add(name = 'Add21981', )([Zer94462,Zer3019])
model = tf.keras.models.Model(inputs=[in0Mul20059,in1Mul20059,in0Min90916,in1Min90916,in0Con72841,in0Max70056,in1Max70056], outputs=Add21981)
in0Mul20059 = tf.constant([[[[[0.6242, 0.4432], [0.4833, 0.6801]]], [[[0.9435, 0.462], [0.3779, 0.9461]]]]])
in1Mul20059 = tf.constant([[[[[0.8351, 0.7546], [0.295, 0.2305]]], [[[0.2916, 0.8025], [0.134, 0.696]]]]])
in0Min90916 = tf.constant([[[0.0333, 0.7536], [0.0006, 0.2765]]])
in1Min90916 = tf.constant([[[0.4247, 0.1789], [0.5394, 0.3439]]])
in0Con72841 = tf.constant([[[0.0852, 0.799], [0.5317, 0.3605]]])
in0Max70056 = tf.constant([[[[[0.3223], [0.5206]], [[0.7817], [0.9342]]]]])
in1Max70056 = tf.constant([[[[[0.6547], [0.653]], [[0.5755], [0.7311]]]]])
print (np.array2string(model.predict([in0Mul20059,in1Mul20059,in0Min90916,in1Min90916,in0Con72841,in0Max70056,in1Max70056],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add21981.png')

LMul20059 = multiply_layer([[[[[[0.6242, 0.4432], [0.4833, 0.6801]]], [[[0.9435, 0.462], [0.3779, 0.9461]]]]], [[[[[0.8351, 0.7546], [0.295, 0.2305]]], [[[0.2916, 0.8025], [0.134, 0.696]]]]]], Mul20059), 
LRes66187 = reshape_layer(Mul20059, [2, 1, 4], Res66187), 
LRes81326 = reshape_layer(Res66187, [2, 4], Res81326), 
LMin90916 = minimum_layer([[[[0.0333, 0.7536], [0.0006, 0.2765]]], [[[0.4247, 0.1789], [0.5394, 0.3439]]]], Min90916), 
LAve38865 = average_pooling1D_layer(Min90916, 1, Ave38865), 
LCon72841 = concatenate_layer([Ave38865,[[[0.0852, 0.799], [0.5317, 0.3605]]]], 2, Con72841), 
LMul86996 = multiply_layer([Res81326,Con72841], Mul86996), 
LRes58531 = reshape_layer(Mul86996, [2, 4, 1], Res58531), 
LRes90793 = reshape_layer(Res58531, [2, 4, 1, 1], Res90793), 
LZer94462 = zero_padding3D_layer(Res90793, 0, 0, 0, 0, 2, 0, Zer94462), 
LMax70056 = maximum_layer([[[[[[0.3223], [0.5206]], [[0.7817], [0.9342]]]]], [[[[[0.6547], [0.653]], [[0.5755], [0.7311]]]]]], Max70056), 
LZer3019 = zero_padding3D_layer(Max70056, 1, 0, 2, 0, 1, 0, Zer3019), 
LAdd21981 = add_layer([Zer94462,Zer3019], Add21981), 
exec_layers([LMul20059,LRes66187,LRes81326,LMin90916,LAve38865,LCon72841,LMul86996,LRes58531,LRes90793,LZer94462,LMax70056,LZer3019,LAdd21981],["Mul20059","Res66187","Res81326","Min90916","Ave38865","Con72841","Mul86996","Res58531","Res90793","Zer94462","Max70056","Zer3019","Add21981"],Add21981,"Add21981")

Actual (Unparsed): [[[[[0.0000000], [0.0000000], [0.0173583]], [[0.0000000], [0.0000000], [0.0598311]], [[0.0000000], [0.0000000], [0.0121473]], [[0.0000000], [0.0000000], [0.1252537]]], [[[0.0000000], [0.0000000], [0.0001651]], [[0.0000000], [0.0000000], [0.1025138]], [[0.0000000], [0.6547000], [0.6799245]], [[0.0000000], [0.7817000], [1.1715840]]]]]

Expected (Unparsed): [[[[[0],[0],[0.017358271686]],[[0],[0],[0.05983108700800001]],[[0],[0],[0.0121472622]],[[0],[0],[0.12525367695000003]]],[[[0],[0],[0.00016507476000000002]],[[0],[0],[0.10251375750000001]],[[0],[0.6547],[0.67992454362]],[[0],[0.7817],[1.1715840588]]]]]

Actual:   [[[[[0], [0], [0.0174]], [[0], [0], [0.0599]], [[0], [0], [0.0122]], [[0], [0], [0.1253]]], [[[0], [0], [0.0002]], [[0], [0], [0.1026]], [[0], [0.6547], [0.68]], [[0], [0.7817], [1.1716]]]]]

Expected: [[[[[0], [0], [0.0174]], [[0], [0], [0.0599]], [[0], [0], [0.0122]], [[0], [0], [0.1253]]], [[[0], [0], [0.0002]], [[0], [0], [0.1026]], [[0], [0.6547], [0.68]], [[0], [0.7817], [1.1716]]]]]