import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer79140 = tf.keras.layers.Input(shape=([1, 4, 3, 2]))
in0Sep48045 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Sub94992 = tf.keras.layers.Input(shape=([2]))
in1Sub94992 = tf.keras.layers.Input(shape=([2]))
in0Con98006 = tf.keras.layers.Input(shape=([3, 10]))

Zer79140 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer79140', )(in0Zer79140)
Res67765 = keras.layers.Reshape((3, 6, 10), name = 'Res67765', )(Zer79140)
Con68588 = keras.layers.Conv2D(2, (3, 3),strides=(1, 1), padding='same', dilation_rate=(1, 1), name = 'Con68588', )(Res67765)
Thr13194 = keras.layers.ThresholdedReLU(theta=7.913024058367244, name = 'Thr13194', )(Con68588)
Res11805 = keras.layers.Reshape((3, 12), name = 'Res11805', )(Thr13194)
Sep48045 = keras.layers.SeparableConv2D(2, (1, 1),strides=(1, 1), padding='valid', name = 'Sep48045', )(in0Sep48045)
Res72273 = keras.layers.Reshape((1, 2), name = 'Res72273', )(Sep48045)
Sub94992 = keras.layers.Subtract(name = 'Sub94992', )([in0Sub94992,in1Sub94992])
Res66953 = keras.layers.Reshape((1, 2), name = 'Res66953', )(Sub94992)
Max69230 = keras.layers.Maximum(name = 'Max69230', )([Res72273,Res66953])
Zer92689 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer92689', )(Max69230)
Con98006 = keras.layers.Concatenate(axis=2, name = 'Con98006', )([Zer92689,in0Con98006])
Min24675 = keras.layers.Minimum(name = 'Min24675', )([Res11805,Con98006])
model = tf.keras.models.Model(inputs=[in0Zer79140,in0Sep48045,in0Sub94992,in1Sub94992,in0Con98006], outputs=Min24675)
w = model.get_layer('Con68588').get_weights() 
w[0] = np.array([[[[0.1418, 0.3244], [0.2193, 0.4358], [0.0799, 0.5583], [0.9805, 0.2673], [0.1022, 0.8703], [0.8348, 0.0544], [0.9135, 0.8816], [0.0082, 0.7859], [0.5613, 0.174], [0.8827, 0.0947]], [[0.6592, 0.7919], [0.4258, 0.3954], [0.1173, 0.3873], [0.4181, 0.1905], [0.2267, 0.3933], [0.5146, 0.9195], [0.2064, 0.2867], [0.3281, 0.9148], [0.6076, 0.9524], [0.3977, 0.9981]], [[0.2961, 0.3989], [0.1226, 0.0017], [0.0813, 0.5895], [0.4819, 0.0308], [0.4485, 0.9536], [0.636, 0.5983], [0.2623, 0.2194], [0.3113, 0.8555], [0.7586, 0.5715], [0.2063, 0.0204]]], [[[0.6176, 0.7775], [0.5254, 0.7612], [0.4207, 0.8501], [0.1472, 0.7327], [0.3336, 0.0172], [0.8625, 0.68], [0.428, 0.2552], [0.5811, 0.5285], [0.6608, 0.4108], [0.3999, 0.6587]], [[0.1571, 0.9796], [0.9467, 0.1293], [0.1156, 0.9437], [0.4728, 0.9558], [0.3443, 0.679], [0.7516, 0.6787], [0.1681, 0.8321], [0.9623, 0.3623], [0.2044, 0.2448], [0.3819, 0.8525]], [[0.2944, 0.4529], [0.8951, 0.5943], [0.6992, 0.0245], [0.0389, 0.5573], [0.523, 0.0198], [0.5451, 0.8536], [0.2065, 0.1493], [0.1166, 0.4412], [0.8536, 0.7905], [0.4793, 0.9062]]], [[[0.0954, 0.8795], [0.5888, 0.6883], [0.1774, 0.8396], [0.2392, 0.2741], [0.9617, 0.1274], [0.2198, 0.8205], [0.578, 0.6848], [0.5981, 0.3897], [0.5266, 0.5689], [0.6667, 0.4788]], [[0.1415, 0.2982], [0.5876, 0.8096], [0.4527, 0.0024], [0.7897, 0.4063], [0.6547, 0.2907], [0.7327, 0.8355], [0.5818, 0.8662], [0.7357, 0.1067], [0.8209, 0.3026], [0.1887, 0.1406]], [[0.3484, 0.0747], [0.613, 0.8999], [0.8715, 0.8874], [0.7195, 0.2477], [0.3715, 0.5827], [0.8219, 0.3482], [0.7023, 0.4222], [0.7103, 0.9588], [0.4801, 0.3385], [0.3594, 0.2747]]]])
w[1] = np.array([0, 0])
model.get_layer('Con68588').set_weights(w) 
w = model.get_layer('Sep48045').get_weights() 
w[0] = np.array([[[[0.3492]]]])
w[1] = np.array([[[[0.3099, 0.381]]]])
w[2] = np.array([0, 0])
model.get_layer('Sep48045').set_weights(w) 
in0Zer79140 = tf.constant([[[[[1.9342, 1.0803], [1.1632, 1.9478], [1.1429, 1.0688]], [[1.3834, 1.1928], [1.6814, 1.1798], [1.0689, 1.1591]], [[1.6187, 1.5986], [1.0287, 1.3482], [1.7296, 1.7929]], [[1.7166, 1.8743], [1.9874, 1.0775], [1.4548, 1.3083]]]]])
in0Sep48045 = tf.constant([[[[0.2402]]]])
in0Sub94992 = tf.constant([[0.4654, 0.0664]])
in1Sub94992 = tf.constant([[0.1244, 0.9737]])
in0Con98006 = tf.constant([[[0.291, 0.1693, 0.3006, 0.2011, 0.7124, 0.3023, 0.2062, 0.4945, 0.0534, 0.8576], [0.4006, 0.4463, 0.6831, 0.3445, 0.4271, 0.2918, 0.9238, 0.3833, 0.8426, 0.6548], [0.0864, 0.2897, 0.8307, 0.6573, 0.1731, 0.1936, 0.5639, 0.1049, 0.7861, 0.1965]]])
print (np.array2string(model.predict([in0Zer79140,in0Sep48045,in0Sub94992,in1Sub94992,in0Con98006],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min24675.png')

LZer79140 = zero_padding3D_layer([[[[[1.9342, 1.0803], [1.1632, 1.9478], [1.1429, 1.0688]], [[1.3834, 1.1928], [1.6814, 1.1798], [1.0689, 1.1591]], [[1.6187, 1.5986], [1.0287, 1.3482], [1.7296, 1.7929]], [[1.7166, 1.8743], [1.9874, 1.0775], [1.4548, 1.3083]]]]], 1, 1, 1, 1, 1, 1, Zer79140), 
LRes67765 = reshape_layer(Zer79140, [3, 6, 10], Res67765), 
LCon68588 = conv2D_layer(Res67765, 3, 3,[[[[0.1418, 0.3244], [0.2193, 0.4358], [0.0799, 0.5583], [0.9805, 0.2673], [0.1022, 0.8703], [0.8348, 0.0544], [0.9135, 0.8816], [0.0082, 0.7859], [0.5613, 0.174], [0.8827, 0.0947]], [[0.6592, 0.7919], [0.4258, 0.3954], [0.1173, 0.3873], [0.4181, 0.1905], [0.2267, 0.3933], [0.5146, 0.9195], [0.2064, 0.2867], [0.3281, 0.9148], [0.6076, 0.9524], [0.3977, 0.9981]], [[0.2961, 0.3989], [0.1226, 0.0017], [0.0813, 0.5895], [0.4819, 0.0308], [0.4485, 0.9536], [0.636, 0.5983], [0.2623, 0.2194], [0.3113, 0.8555], [0.7586, 0.5715], [0.2063, 0.0204]]], [[[0.6176, 0.7775], [0.5254, 0.7612], [0.4207, 0.8501], [0.1472, 0.7327], [0.3336, 0.0172], [0.8625, 0.68], [0.428, 0.2552], [0.5811, 0.5285], [0.6608, 0.4108], [0.3999, 0.6587]], [[0.1571, 0.9796], [0.9467, 0.1293], [0.1156, 0.9437], [0.4728, 0.9558], [0.3443, 0.679], [0.7516, 0.6787], [0.1681, 0.8321], [0.9623, 0.3623], [0.2044, 0.2448], [0.3819, 0.8525]], [[0.2944, 0.4529], [0.8951, 0.5943], [0.6992, 0.0245], [0.0389, 0.5573], [0.523, 0.0198], [0.5451, 0.8536], [0.2065, 0.1493], [0.1166, 0.4412], [0.8536, 0.7905], [0.4793, 0.9062]]], [[[0.0954, 0.8795], [0.5888, 0.6883], [0.1774, 0.8396], [0.2392, 0.2741], [0.9617, 0.1274], [0.2198, 0.8205], [0.578, 0.6848], [0.5981, 0.3897], [0.5266, 0.5689], [0.6667, 0.4788]], [[0.1415, 0.2982], [0.5876, 0.8096], [0.4527, 0.0024], [0.7897, 0.4063], [0.6547, 0.2907], [0.7327, 0.8355], [0.5818, 0.8662], [0.7357, 0.1067], [0.8209, 0.3026], [0.1887, 0.1406]], [[0.3484, 0.0747], [0.613, 0.8999], [0.8715, 0.8874], [0.7195, 0.2477], [0.3715, 0.5827], [0.8219, 0.3482], [0.7023, 0.4222], [0.7103, 0.9588], [0.4801, 0.3385], [0.3594, 0.2747]]]],[0, 0], 1, 1, true, 1, 1, Con68588), 
LThr13194 = thresholded_relu_layer(Con68588, 7.913024058367244, Thr13194), 
LRes11805 = reshape_layer(Thr13194, [3, 12], Res11805), 
LSep48045 = separable_conv2D_layer([[[[0.2402]]]], 1, 1,[[[[[0.3492]]]],[[[[0.3099, 0.381]]]]],[0, 0], 1, 1, false, Sep48045), 
LRes72273 = reshape_layer(Sep48045, [1, 2], Res72273), 
LSub94992 = subtract_layer([[0.4654, 0.0664]], [[0.1244, 0.9737]], Sub94992), 
LRes66953 = reshape_layer(Sub94992, [1, 2], Res66953), 
LMax69230 = maximum_layer([Res72273,Res66953], Max69230), 
LZer92689 = zero_padding1D_layer(Max69230, 2, 0, Zer92689), 
LCon98006 = concatenate_layer([Zer92689,[[[0.291, 0.1693, 0.3006, 0.2011, 0.7124, 0.3023, 0.2062, 0.4945, 0.0534, 0.8576], [0.4006, 0.4463, 0.6831, 0.3445, 0.4271, 0.2918, 0.9238, 0.3833, 0.8426, 0.6548], [0.0864, 0.2897, 0.8307, 0.6573, 0.1731, 0.1936, 0.5639, 0.1049, 0.7861, 0.1965]]]], 2, Con98006), 
LMin24675 = minimum_layer([Res11805,Con98006], Min24675), 
exec_layers([LZer79140,LRes67765,LCon68588,LThr13194,LRes11805,LSep48045,LRes72273,LSub94992,LRes66953,LMax69230,LZer92689,LCon98006,LMin24675],["Zer79140","Res67765","Con68588","Thr13194","Res11805","Sep48045","Res72273","Sub94992","Res66953","Max69230","Zer92689","Con98006","Min24675"],Min24675,"Min24675")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.2910000, 0.1693000, 0.3006000, 0.2011000, 0.7124000, 0.3023000, 0.2062000, 0.4945000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.4463000, 0.6831000, 0.3445000, 0.4271000, 0.2918000, 0.9238000, 0.3833000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.2897000, 0.8307000, 0.6573000, 0.1731000, 0.1936000, 0.0000000, 0.1049000, 0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0,0,0.291,0.1693,0.3006,0.2011,0.7124,0.3023,0.2062,0.4945,0,0],[0,0,0,0.4463,0.6831,0.3445,0.4271,0.2918,0.9238,0.3833,0,0],[0,0,0,0.2897,0.8307,0.6573,0.1731,0.1936,0,0.1049,0,0]]]

Actual:   [[[0, 0, 0.291, 0.1693, 0.3006, 0.2011, 0.7124, 0.3023, 0.2062, 0.4945, 0, 0], [0, 0, 0, 0.4463, 0.6831, 0.3445, 0.4271, 0.2918, 0.9238, 0.3833, 0, 0], [0, 0, 0, 0.2897, 0.8307, 0.6573, 0.1731, 0.1936, 0, 0.1049, 0, 0]]]

Expected: [[[0, 0, 0.291, 0.1693, 0.3006, 0.2011, 0.7124, 0.3023, 0.2062, 0.4945, 0, 0], [0, 0, 0, 0.4463, 0.6831, 0.3445, 0.4271, 0.2918, 0.9238, 0.3833, 0, 0], [0, 0, 0, 0.2897, 0.8307, 0.6573, 0.1731, 0.1936, 0, 0.1049, 0, 0]]]