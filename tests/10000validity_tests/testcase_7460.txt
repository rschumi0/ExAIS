import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub56735 = tf.keras.layers.Input(shape=([2, 2, 3, 3]))
in1Sub56735 = tf.keras.layers.Input(shape=([2, 2, 3, 3]))
in0Mul94125 = tf.keras.layers.Input(shape=([1, 1]))
in1Mul94125 = tf.keras.layers.Input(shape=([1, 1]))
in0Con16463 = tf.keras.layers.Input(shape=([2, 17]))

Sub56735 = keras.layers.Subtract(name = 'Sub56735', )([in0Sub56735,in1Sub56735])
Res40674 = keras.layers.Reshape((2, 2, 9), name = 'Res40674', )(Sub56735)
Res19254 = keras.layers.Reshape((2, 18), name = 'Res19254', )(Res40674)
Mul94125 = keras.layers.Multiply(name = 'Mul94125', )([in0Mul94125,in1Mul94125])
Zer75753 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer75753', )(Mul94125)
Con16463 = keras.layers.Concatenate(axis=2, name = 'Con16463', )([Zer75753,in0Con16463])
Min37649 = keras.layers.Minimum(name = 'Min37649', )([Res19254,Con16463])
model = tf.keras.models.Model(inputs=[in0Sub56735,in1Sub56735,in0Mul94125,in1Mul94125,in0Con16463], outputs=Min37649)
in0Sub56735 = tf.constant([[[[[0.7861, 0.7637, 0.8685], [0.2877, 0.5209, 0.4115], [0.8865, 0.9198, 0.3602]], [[0.9488, 0.8158, 0.3249], [0.1505, 0.5131, 0.0901], [0.2612, 0.1821, 0.5167]]], [[[0.5218, 0.3945, 0.9696], [0.3729, 0.5216, 0.7709], [0.5947, 0.1885, 0.4023]], [[0.5214, 0.3673, 0.4565], [0.7925, 0.8458, 0.3592], [0.8825, 0.6314, 0.686]]]]])
in1Sub56735 = tf.constant([[[[[0.7069, 0.3503, 0.6963], [0.1383, 0.4461, 0.6921], [0.1192, 0.5788, 0.038]], [[0.3647, 0.8928, 0.6788], [0.6842, 0.3567, 0.9349], [0.9738, 0.9802, 0.6472]]], [[[0.883, 0.4149, 0.459], [0.3241, 0.4277, 0.3806], [0.096, 0.0302, 0.6526]], [[0.9547, 0.9017, 0.7507], [0.5514, 0.8873, 0.3196], [0.0836, 0.6152, 0.5481]]]]])
in0Mul94125 = tf.constant([[[0.2604]]])
in1Mul94125 = tf.constant([[[0.038]]])
in0Con16463 = tf.constant([[[0.3635, 0.7076, 0.2581, 0.39, 0.2289, 0.3877, 0.1233, 0.2465, 0.9524, 0.5746, 0.4164, 0.2834, 0.5337, 0.6688, 0.4391, 0.5678, 0.2661], [0.1511, 0.215, 0.2384, 0.7233, 0.072, 0.5658, 0.3226, 0.6616, 0.3343, 0.9919, 0.7271, 0.921, 0.9819, 0.1635, 0.4105, 0.8971, 0.3974]]])
print (np.array2string(model.predict([in0Sub56735,in1Sub56735,in0Mul94125,in1Mul94125,in0Con16463],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min37649.png')

LSub56735 = subtract_layer([[[[[0.7861, 0.7637, 0.8685], [0.2877, 0.5209, 0.4115], [0.8865, 0.9198, 0.3602]], [[0.9488, 0.8158, 0.3249], [0.1505, 0.5131, 0.0901], [0.2612, 0.1821, 0.5167]]], [[[0.5218, 0.3945, 0.9696], [0.3729, 0.5216, 0.7709], [0.5947, 0.1885, 0.4023]], [[0.5214, 0.3673, 0.4565], [0.7925, 0.8458, 0.3592], [0.8825, 0.6314, 0.686]]]]], [[[[[0.7069, 0.3503, 0.6963], [0.1383, 0.4461, 0.6921], [0.1192, 0.5788, 0.038]], [[0.3647, 0.8928, 0.6788], [0.6842, 0.3567, 0.9349], [0.9738, 0.9802, 0.6472]]], [[[0.883, 0.4149, 0.459], [0.3241, 0.4277, 0.3806], [0.096, 0.0302, 0.6526]], [[0.9547, 0.9017, 0.7507], [0.5514, 0.8873, 0.3196], [0.0836, 0.6152, 0.5481]]]]], Sub56735), 
LRes40674 = reshape_layer(Sub56735, [2, 2, 9], Res40674), 
LRes19254 = reshape_layer(Res40674, [2, 18], Res19254), 
LMul94125 = multiply_layer([[[[0.2604]]], [[[0.038]]]], Mul94125), 
LZer75753 = zero_padding1D_layer(Mul94125, 1, 0, Zer75753), 
LCon16463 = concatenate_layer([Zer75753,[[[0.3635, 0.7076, 0.2581, 0.39, 0.2289, 0.3877, 0.1233, 0.2465, 0.9524, 0.5746, 0.4164, 0.2834, 0.5337, 0.6688, 0.4391, 0.5678, 0.2661], [0.1511, 0.215, 0.2384, 0.7233, 0.072, 0.5658, 0.3226, 0.6616, 0.3343, 0.9919, 0.7271, 0.921, 0.9819, 0.1635, 0.4105, 0.8971, 0.3974]]]], 2, Con16463), 
LMin37649 = minimum_layer([Res19254,Con16463], Min37649), 
exec_layers([LSub56735,LRes40674,LRes19254,LMul94125,LZer75753,LCon16463,LMin37649],["Sub56735","Res40674","Res19254","Mul94125","Zer75753","Con16463","Min37649"],Min37649,"Min37649")

Actual (Unparsed): [[[0.0000000, 0.3635000, 0.1722000, 0.1494000, 0.0748000, -0.2806000, 0.3877000, 0.1233000, 0.2465000, 0.5841000, -0.0770000, -0.3539000, -0.5337000, 0.1564000, -0.8448000, -0.7126000, -0.7981000, -0.1305000], [-0.3612000, -0.0204000, 0.2150000, 0.0488000, 0.0939000, 0.0720000, 0.4987000, 0.1583000, -0.2503000, -0.4333000, -0.5344000, -0.2942000, 0.2411000, -0.0415000, 0.0396000, 0.4105000, 0.0162000, 0.1379000]]]

Expected (Unparsed): [[[0,0.3635,0.17220000000000002,0.1494,0.07480000000000003,-0.28060000000000007,0.3877,0.1233,0.2465,0.5841,-0.07700000000000007,-0.35389999999999994,-0.5337000000000001,0.15639999999999998,-0.8448,-0.7126,-0.7980999999999999,-0.13049999999999995],[-0.36119999999999997,-0.020399999999999974,0.215,0.04880000000000001,0.09389999999999993,0.072,0.49870000000000003,0.1583,-0.25029999999999997,-0.4333,-0.5344,-0.2942,0.24109999999999998,-0.04149999999999998,0.039600000000000024,0.4105,0.016199999999999992,0.13790000000000002]]]

Actual:   [[[0, 0.3635, 0.1722, 0.1494, 0.0748, -0.2806, 0.3877, 0.1233, 0.2465, 0.5841, -0.077, -0.3539, -0.5337, 0.1564, -0.8448, -0.7126, -0.7981, -0.1305], [-0.3612, -0.0204, 0.215, 0.0488, 0.0939, 0.072, 0.4987, 0.1583, -0.2503, -0.4333, -0.5344, -0.2942, 0.2411, -0.0415, 0.0396, 0.4105, 0.0162, 0.1379]]]

Expected: [[[0, 0.3635, 0.1723, 0.1494, 0.0749, -0.2806, 0.3877, 0.1233, 0.2465, 0.5841, -0.077, -0.3538, -0.5337, 0.1564, -0.8448, -0.7126, -0.798, -0.1304], [-0.3611, -0.0203, 0.215, 0.0489, 0.0939, 0.072, 0.4988, 0.1583, -0.2502, -0.4333, -0.5344, -0.2942, 0.2411, -0.0414, 0.0397, 0.4105, 0.0162, 0.138]]]