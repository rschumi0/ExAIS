import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max76363 = tf.keras.layers.Input(shape=([1, 2]))
in1Max76363 = tf.keras.layers.Input(shape=([1, 2]))
in0Con66370 = tf.keras.layers.Input(shape=([2]))
in0Ave14527 = tf.keras.layers.Input(shape=([2, 2]))
in1Ave14527 = tf.keras.layers.Input(shape=([2, 2]))
in0Con85 = tf.keras.layers.Input(shape=([4, 3, 3, 1]))
in0Ave81215 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Ave81215 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))

Max76363 = keras.layers.Maximum(name = 'Max76363', )([in0Max76363,in1Max76363])
Fla6263 = keras.layers.Flatten(name = 'Fla6263', )(Max76363)
Con66370 = keras.layers.Concatenate(axis=1, name = 'Con66370', )([Fla6263,in0Con66370])
Ave14527 = keras.layers.Average(name = 'Ave14527', )([in0Ave14527,in1Ave14527])
Fla34975 = keras.layers.Flatten(name = 'Fla34975', )(Ave14527)
Mul63289 = keras.layers.Multiply(name = 'Mul63289', )([Con66370,Fla34975])
Res22085 = keras.layers.Reshape((4, 1), name = 'Res22085', )(Mul63289)
Res2019 = keras.layers.Reshape((4, 1, 1), name = 'Res2019', )(Res22085)
Res12198 = keras.layers.Reshape((4, 1, 1, 1), name = 'Res12198', )(Res2019)
Zer65360 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (2, 0)), name = 'Zer65360', )(Res12198)
Con85 = keras.layers.Concatenate(axis=4, name = 'Con85', )([Zer65360,in0Con85])
Ave81215 = keras.layers.Average(name = 'Ave81215', )([in0Ave81215,in1Ave81215])
Zer71689 = keras.layers.ZeroPadding3D(padding=((2, 0), (1, 0), (1, 0)), name = 'Zer71689', )(Ave81215)
Add82088 = keras.layers.Add(name = 'Add82088', )([Con85,Zer71689])
model = tf.keras.models.Model(inputs=[in0Max76363,in1Max76363,in0Con66370,in0Ave14527,in1Ave14527,in0Con85,in0Ave81215,in1Ave81215], outputs=Add82088)
in0Max76363 = tf.constant([[[0.3677, 0.6875]]])
in1Max76363 = tf.constant([[[0.5802, 0.5871]]])
in0Con66370 = tf.constant([[0.6386, 0.4535]])
in0Ave14527 = tf.constant([[[0.2426, 0.5806], [0.5658, 0.8707]]])
in1Ave14527 = tf.constant([[[0.7473, 0.9538], [0.4743, 0.1814]]])
in0Con85 = tf.constant([[[[[0.1279], [0.7444], [0.7864]], [[0.2589], [0.2145], [0.3993]], [[0.2439], [0.0361], [0.8856]]], [[[0.3007], [0.5547], [0.1529]], [[0.2786], [0.1762], [0.3549]], [[0.7217], [0.7398], [0.7405]]], [[[0.201], [0.5098], [0.6169]], [[0.8962], [0.741], [0.1688]], [[0.8423], [0.7672], [0.2744]]], [[[0.8574], [0.6883], [0.2155]], [[0.0986], [0.6432], [0.7068]], [[0.1281], [0.4934], [0.6617]]]]])
in0Ave81215 = tf.constant([[[[[0.107, 0.7402], [0.3425, 0.512]], [[0.7793, 0.7844], [0.1782, 0.5889]]], [[[0.5576, 0.0552], [0.7065, 0.1834]], [[0.6257, 0.7897], [0.601, 0.57]]]]])
in1Ave81215 = tf.constant([[[[[0.608, 0.5832], [0.996, 0.4004]], [[0.5734, 0.4304], [0.4429, 0.8321]]], [[[0.031, 0.1155], [0.5087, 0.2244]], [[0.1832, 0.1532], [0.8924, 0.0922]]]]])
print (np.array2string(model.predict([in0Max76363,in1Max76363,in0Con66370,in0Ave14527,in1Ave14527,in0Con85,in0Ave81215,in1Ave81215],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add82088.png')

LMax76363 = maximum_layer([[[[0.3677, 0.6875]]], [[[0.5802, 0.5871]]]], Max76363), 
LFla6263 = flatten_layer(Max76363, Fla6263), 
LCon66370 = concatenate_layer([Fla6263,[[0.6386, 0.4535]]], 1, Con66370), 
LAve14527 = average_layer([[[[0.2426, 0.5806], [0.5658, 0.8707]]], [[[0.7473, 0.9538], [0.4743, 0.1814]]]], Ave14527), 
LFla34975 = flatten_layer(Ave14527, Fla34975), 
LMul63289 = multiply_layer([Con66370,Fla34975], Mul63289), 
LRes22085 = reshape_layer(Mul63289, [4, 1], Res22085), 
LRes2019 = reshape_layer(Res22085, [4, 1, 1], Res2019), 
LRes12198 = reshape_layer(Res2019, [4, 1, 1, 1], Res12198), 
LZer65360 = zero_padding3D_layer(Res12198, 0, 0, 2, 0, 2, 0, Zer65360), 
LCon85 = concatenate_layer([Zer65360,[[[[[0.1279], [0.7444], [0.7864]], [[0.2589], [0.2145], [0.3993]], [[0.2439], [0.0361], [0.8856]]], [[[0.3007], [0.5547], [0.1529]], [[0.2786], [0.1762], [0.3549]], [[0.7217], [0.7398], [0.7405]]], [[[0.201], [0.5098], [0.6169]], [[0.8962], [0.741], [0.1688]], [[0.8423], [0.7672], [0.2744]]], [[[0.8574], [0.6883], [0.2155]], [[0.0986], [0.6432], [0.7068]], [[0.1281], [0.4934], [0.6617]]]]]], 4, Con85), 
LAve81215 = average_layer([[[[[[0.107, 0.7402], [0.3425, 0.512]], [[0.7793, 0.7844], [0.1782, 0.5889]]], [[[0.5576, 0.0552], [0.7065, 0.1834]], [[0.6257, 0.7897], [0.601, 0.57]]]]], [[[[[0.608, 0.5832], [0.996, 0.4004]], [[0.5734, 0.4304], [0.4429, 0.8321]]], [[[0.031, 0.1155], [0.5087, 0.2244]], [[0.1832, 0.1532], [0.8924, 0.0922]]]]]], Ave81215), 
LZer71689 = zero_padding3D_layer(Ave81215, 2, 0, 1, 0, 1, 0, Zer71689), 
LAdd82088 = add_layer([Con85,Zer71689], Add82088), 
exec_layers([LMax76363,LFla6263,LCon66370,LAve14527,LFla34975,LMul63289,LRes22085,LRes2019,LRes12198,LZer65360,LCon85,LAve81215,LZer71689,LAdd82088],["Max76363","Fla6263","Con66370","Ave14527","Fla34975","Mul63289","Res22085","Res2019","Res12198","Zer65360","Con85","Ave81215","Zer71689","Add82088"],Add82088,"Add82088")

Actual (Unparsed): [[[[[0.0000000, 0.1279000], [0.0000000, 0.7444000], [0.0000000, 0.7864000]], [[0.0000000, 0.2589000], [0.0000000, 0.2145000], [0.0000000, 0.3993000]], [[0.0000000, 0.2439000], [0.0000000, 0.0361000], [0.2871700, 0.8856000]]], [[[0.0000000, 0.3007000], [0.0000000, 0.5547000], [0.0000000, 0.1529000]], [[0.0000000, 0.2786000], [0.0000000, 0.1762000], [0.0000000, 0.3549000]], [[0.0000000, 0.7217000], [0.0000000, 0.7398000], [0.5274500, 0.7405000]]], [[[0.0000000, 0.2010000], [0.0000000, 0.5098000], [0.0000000, 0.6169000]], [[0.0000000, 0.8962000], [0.3575000, 1.4027000], [0.6692500, 0.6250000]], [[0.0000000, 0.8423000], [0.6763500, 1.3746000], [0.6426539, 0.9849000]]], [[[0.0000000, 0.8574000], [0.0000000, 0.6883000], [0.0000000, 0.2155000]], [[0.0000000, 0.0986000], [0.2943000, 0.7285500], [0.6076000, 0.9107000]], [[0.0000000, 0.1281000], [0.4044500, 0.9648500], [0.9852637, 0.9928000]]]]]

Expected (Unparsed): [[[[[0,0.1279],[0,0.7444],[0,0.7864]],[[0,0.2589],[0,0.2145],[0,0.3993]],[[0,0.2439],[0,0.0361],[0.28716999000000004,0.8856]]],[[[0,0.3007],[0,0.5547],[0,0.1529]],[[0,0.2786],[0,0.1762],[0,0.3549]],[[0,0.7217],[0,0.7398],[0.52745,0.7405]]],[[[0,0.201],[0,0.5098],[0,0.6169]],[[0,0.8962],[0.3575,1.4026999999999998],[0.66925,0.625]],[[0,0.8423],[0.67635,1.3746],[0.64265393,0.9848999999999999]]],[[[0,0.8574],[0,0.6883],[0,0.2155]],[[0,0.0986],[0.2943,0.72855],[0.6076,0.9107]],[[0,0.1281],[0.40445000000000003,0.96485],[0.9852636749999999,0.9927999999999999]]]]]

Actual:   [[[[[0, 0.1279], [0, 0.7444], [0, 0.7864]], [[0, 0.2589], [0, 0.2145], [0, 0.3993]], [[0, 0.2439], [0, 0.0361], [0.2872, 0.8856]]], [[[0, 0.3007], [0, 0.5547], [0, 0.1529]], [[0, 0.2786], [0, 0.1762], [0, 0.3549]], [[0, 0.7217], [0, 0.7398], [0.5275, 0.7405]]], [[[0, 0.201], [0, 0.5098], [0, 0.6169]], [[0, 0.8962], [0.3575, 1.4027], [0.6693, 0.625]], [[0, 0.8423], [0.6764, 1.3746], [0.6427, 0.9849]]], [[[0, 0.8574], [0, 0.6883], [0, 0.2155]], [[0, 0.0986], [0.2943, 0.7286], [0.6076, 0.9107]], [[0, 0.1281], [0.4045, 0.9649], [0.9853, 0.9928]]]]]

Expected: [[[[[0, 0.1279], [0, 0.7444], [0, 0.7864]], [[0, 0.2589], [0, 0.2145], [0, 0.3993]], [[0, 0.2439], [0, 0.0361], [0.2872, 0.8856]]], [[[0, 0.3007], [0, 0.5547], [0, 0.1529]], [[0, 0.2786], [0, 0.1762], [0, 0.3549]], [[0, 0.7217], [0, 0.7398], [0.5275, 0.7405]]], [[[0, 0.201], [0, 0.5098], [0, 0.6169]], [[0, 0.8962], [0.3575, 1.4027], [0.6693, 0.625]], [[0, 0.8423], [0.6764, 1.3746], [0.6427, 0.9849]]], [[[0, 0.8574], [0, 0.6883], [0, 0.2155]], [[0, 0.0986], [0.2943, 0.7286], [0.6076, 0.9107]], [[0, 0.1281], [0.4045, 0.9649], [0.9853, 0.9928]]]]]