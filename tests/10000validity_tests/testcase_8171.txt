import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub15035 = tf.keras.layers.Input(shape=([3, 3]))
in1Sub15035 = tf.keras.layers.Input(shape=([3, 3]))
in0Add37045 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in1Add37045 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))

Sub15035 = keras.layers.Subtract(name = 'Sub15035', )([in0Sub15035,in1Sub15035])
Res87756 = keras.layers.Reshape((3, 3, 1), name = 'Res87756', )(Sub15035)
Cro90415 = keras.layers.Cropping2D(cropping=((1, 1), (0, 0)), name = 'Cro90415', )(Res87756)
Res27521 = keras.layers.Reshape((1, 3, 1, 1), name = 'Res27521', )(Cro90415)
Add37045 = keras.layers.Add(name = 'Add37045', )([in0Add37045,in1Add37045])
Zer98058 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (0, 0)), name = 'Zer98058', )(Add37045)
Add37540 = keras.layers.Add(name = 'Add37540', )([Res27521,Zer98058])
Res47765 = keras.layers.Reshape((1, 3, 1), name = 'Res47765', )(Add37540)
Glo42566 = keras.layers.GlobalMaxPool2D(name = 'Glo42566', )(Res47765)
Den80579 = keras.layers.Dense(3,name = 'Den80579', )(Glo42566)
Res36038 = keras.layers.Reshape((3, 1), name = 'Res36038', )(Den80579)
Res44622 = keras.layers.Reshape((3, 1, 1), name = 'Res44622', )(Res36038)
Res5675 = keras.layers.Reshape((3, 1, 1, 1), name = 'Res5675', )(Res44622)
Up_10517 = keras.layers.UpSampling3D(size=(2, 2, 2), name = 'Up_10517', )(Res5675)
model = tf.keras.models.Model(inputs=[in0Sub15035,in1Sub15035,in0Add37045,in1Add37045], outputs=Up_10517)
w = model.get_layer('Den80579').get_weights() 
w[0] = np.array([[0.8203, 0.7962, 0.8577]])
w[1] = np.array([0.434, 0.347, 0.4158])
model.get_layer('Den80579').set_weights(w) 
in0Sub15035 = tf.constant([[[0.7716, 0.9971, 0.9478], [0.4954, 0.1656, 0.2702], [0.4015, 0.78, 0.606]]])
in1Sub15035 = tf.constant([[[0.688, 0.9389, 0.7792], [0.6207, 0.6017, 0.1977], [0.6163, 0.1912, 0.013]]])
in0Add37045 = tf.constant([[[[[0.2848]], [[0.9656]]]]])
in1Add37045 = tf.constant([[[[[0.71]], [[0.7657]]]]])
print (np.array2string(model.predict([in0Sub15035,in1Sub15035,in0Add37045,in1Add37045],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Up_10517.png')

LSub15035 = subtract_layer([[[0.7716, 0.9971, 0.9478], [0.4954, 0.1656, 0.2702], [0.4015, 0.78, 0.606]]], [[[0.688, 0.9389, 0.7792], [0.6207, 0.6017, 0.1977], [0.6163, 0.1912, 0.013]]], Sub15035), 
LRes87756 = reshape_layer(Sub15035, [3, 3, 1], Res87756), 
LCro90415 = cropping2D_layer(Res87756, 1, 1, 0, 0, Cro90415), 
LRes27521 = reshape_layer(Cro90415, [1, 3, 1, 1], Res27521), 
LAdd37045 = add_layer([[[[[[0.2848]], [[0.9656]]]]], [[[[[0.71]], [[0.7657]]]]]], Add37045), 
LZer98058 = zero_padding3D_layer(Add37045, 0, 0, 1, 0, 0, 0, Zer98058), 
LAdd37540 = add_layer([Res27521,Zer98058], Add37540), 
LRes47765 = reshape_layer(Add37540, [1, 3, 1], Res47765), 
LGlo42566 = global_max_pool2D_layer(Res47765, Glo42566), 
LDen80579 = dense_layer(Glo42566, [[0.8203, 0.7962, 0.8577]],[0.434, 0.347, 0.4158], Den80579), 
LRes36038 = reshape_layer(Den80579, [3, 1], Res36038), 
LRes44622 = reshape_layer(Res36038, [3, 1, 1], Res44622), 
LRes5675 = reshape_layer(Res44622, [3, 1, 1, 1], Res5675), 
LUp_10517 = up_sampling3D_layer(Res5675, 2, 2, 2, Up_10517), 
exec_layers([LSub15035,LRes87756,LCro90415,LRes27521,LAdd37045,LZer98058,LAdd37540,LRes47765,LGlo42566,LDen80579,LRes36038,LRes44622,LRes5675,LUp_10517],["Sub15035","Res87756","Cro90415","Res27521","Add37045","Zer98058","Add37540","Res47765","Glo42566","Den80579","Res36038","Res44622","Res5675","Up_10517"],Up_10517,"Up_10517")

Actual (Unparsed): [[[[[1.9136572], [1.9136572]], [[1.9136572], [1.9136572]]], [[[1.9136572], [1.9136572]], [[1.9136572], [1.9136572]]], [[[1.7831856], [1.7831856]], [[1.7831856], [1.7831856]]], [[[1.7831856], [1.7831856]], [[1.7831856], [1.7831856]]], [[[1.9629193], [1.9629193]], [[1.9629193], [1.9629193]]], [[[1.9629193], [1.9629193]], [[1.9629193], [1.9629193]]]]]

Expected (Unparsed): [[[[[1.91365714],[1.91365714]],[[1.91365714],[1.91365714]]],[[[1.91365714],[1.91365714]],[[1.91365714],[1.91365714]]],[[[1.7831855600000002],[1.7831855600000002]],[[1.7831855600000002],[1.7831855600000002]]],[[[1.7831855600000002],[1.7831855600000002]],[[1.7831855600000002],[1.7831855600000002]]],[[[1.96291926],[1.96291926]],[[1.96291926],[1.96291926]]],[[[1.96291926],[1.96291926]],[[1.96291926],[1.96291926]]]]]

Actual:   [[[[[1.9137], [1.9137]], [[1.9137], [1.9137]]], [[[1.9137], [1.9137]], [[1.9137], [1.9137]]], [[[1.7832], [1.7832]], [[1.7832], [1.7832]]], [[[1.7832], [1.7832]], [[1.7832], [1.7832]]], [[[1.963], [1.963]], [[1.963], [1.963]]], [[[1.963], [1.963]], [[1.963], [1.963]]]]]

Expected: [[[[[1.9137], [1.9137]], [[1.9137], [1.9137]]], [[[1.9137], [1.9137]], [[1.9137], [1.9137]]], [[[1.7832], [1.7832]], [[1.7832], [1.7832]]], [[[1.7832], [1.7832]], [[1.7832], [1.7832]]], [[[1.963], [1.963]], [[1.963], [1.963]]], [[[1.963], [1.963]], [[1.963], [1.963]]]]]