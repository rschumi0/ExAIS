import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con27198 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con36105 = tf.keras.layers.Input(shape=([3, 3, 2]))
in0Add16477 = tf.keras.layers.Input(shape=([1, 1]))
in1Add16477 = tf.keras.layers.Input(shape=([1, 1]))

Con27198 = keras.layers.Conv2D(2, (1, 1),strides=(1, 1), padding='same', dilation_rate=(1, 1), name = 'Con27198', )(in0Con27198)
Zer72051 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer72051', )(Con27198)
Con36105 = keras.layers.Concatenate(axis=3, name = 'Con36105', )([Zer72051,in0Con36105])
Add16477 = keras.layers.Add(name = 'Add16477', )([in0Add16477,in1Add16477])
Res65188 = keras.layers.Reshape((1, 1, 1), name = 'Res65188', )(Add16477)
Zer33099 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer33099', )(Res65188)
Sep37990 = keras.layers.SeparableConv2D(4, (2, 1),strides=(1, 1), padding='same', name = 'Sep37990', )(Zer33099)
Mul78952 = keras.layers.Multiply(name = 'Mul78952', )([Con36105,Sep37990])
model = tf.keras.models.Model(inputs=[in0Con27198,in0Con36105,in0Add16477,in1Add16477], outputs=Mul78952)
w = model.get_layer('Con27198').get_weights() 
w[0] = np.array([[[[0.0722, 0.3774], [0.0856, 0.3918]]]])
w[1] = np.array([0, 0])
model.get_layer('Con27198').set_weights(w) 
w = model.get_layer('Sep37990').get_weights() 
w[0] = np.array([[[[0.0364]]], [[[0.9364]]]])
w[1] = np.array([[[[0.7841, 0.849, 0.2602, 0.0708]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep37990').set_weights(w) 
in0Con27198 = tf.constant([[[[0.8631, 0.0375]]]])
in0Con36105 = tf.constant([[[[0.6641, 0.367], [0.8783, 0.962], [0.2303, 0.7756]], [[0.2662, 0.5931], [0.586, 0.1082], [0.8387, 0.4798]], [[0.6142, 0.4267], [0.8732, 0.8126], [0.5543, 0.3049]]]])
in0Add16477 = tf.constant([[[0.3785]]])
in1Add16477 = tf.constant([[[0.596]]])
print (np.array2string(model.predict([in0Con27198,in0Con36105,in0Add16477,in1Add16477],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul78952.png')

LCon27198 = conv2D_layer([[[[0.8631, 0.0375]]]], 1, 1,[[[[0.0722, 0.3774], [0.0856, 0.3918]]]],[0, 0], 1, 1, true, 1, 1, Con27198), 
LZer72051 = zero_padding2D_layer(Con27198, 2, 0, 2, 0, Zer72051), 
LCon36105 = concatenate_layer([Zer72051,[[[[0.6641, 0.367], [0.8783, 0.962], [0.2303, 0.7756]], [[0.2662, 0.5931], [0.586, 0.1082], [0.8387, 0.4798]], [[0.6142, 0.4267], [0.8732, 0.8126], [0.5543, 0.3049]]]]], 3, Con36105), 
LAdd16477 = add_layer([[[[0.3785]]], [[[0.596]]]], Add16477), 
LRes65188 = reshape_layer(Add16477, [1, 1, 1], Res65188), 
LZer33099 = zero_padding2D_layer(Res65188, 1, 1, 1, 1, Zer33099), 
LSep37990 = separable_conv2D_layer(Zer33099, 2, 1,[[[[[0.0364]]], [[[0.9364]]]],[[[[0.7841, 0.849, 0.2602, 0.0708]]]]],[0, 0, 0, 0], 1, 1, true, Sep37990), 
LMul78952 = multiply_layer([Con36105,Sep37990], Mul78952), 
exec_layers([LCon27198,LZer72051,LCon36105,LAdd16477,LRes65188,LZer33099,LSep37990,LMul78952],["Con27198","Zer72051","Con36105","Add16477","Res65188","Zer33099","Sep37990","Mul78952"],Mul78952,"Mul78952")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.2085420, 0.0621515], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0054086, 0.0002717], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]]]]

Expected (Unparsed): [[[[0.0,0.0,0.0,0.0],[0.0,0.0,0.20854194678378798,0.06215149478928],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.005408640742959999,0.000271733852208],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]]]]

Actual:   [[[[0, 0, 0, 0], [0, 0, 0.2086, 0.0622], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0.0055, 0.0003], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]]

Expected: [[[[0, 0, 0, 0], [0, 0, 0.2086, 0.0622], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0.0055, 0.0003], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]]