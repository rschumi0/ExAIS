import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave152 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Ave152 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Glo57420 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con85082 = tf.keras.layers.Input(shape=([16, 1, 14]))
in0Mul83456 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Mul83456 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Mul77655 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Mul77655 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con73275 = tf.keras.layers.Input(shape=([2, 1, 15]))

Ave152 = keras.layers.Average(name = 'Ave152', )([in0Ave152,in1Ave152])
Res82214 = keras.layers.Reshape((2, 1, 2, 1), name = 'Res82214', )(Ave152)
Zer66570 = keras.layers.ZeroPadding3D(padding=((14, 0), (0, 0), (0, 0)), name = 'Zer66570', )(Res82214)
Glo57420 = keras.layers.GlobalMaxPool2D(name = 'Glo57420', )(in0Glo57420)
Res55568 = keras.layers.Reshape((1, 1), name = 'Res55568', )(Glo57420)
Zer35444 = keras.layers.ZeroPadding1D(padding=((7, 0)), name = 'Zer35444', )(Res55568)
Res9058 = keras.layers.Reshape((8, 1, 1), name = 'Res9058', )(Zer35444)
Res15444 = keras.layers.Reshape((8, 1, 1, 1), name = 'Res15444', )(Res9058)
Up_17489 = keras.layers.UpSampling3D(size=(2, 1, 2), name = 'Up_17489', )(Res15444)
Mul76293 = keras.layers.Multiply(name = 'Mul76293', )([Zer66570,Up_17489])
Res60459 = keras.layers.Reshape((16, 1, 2), name = 'Res60459', )(Mul76293)
Con85082 = keras.layers.Concatenate(axis=3, name = 'Con85082', )([Res60459,in0Con85082])
Mul83456 = keras.layers.Multiply(name = 'Mul83456', )([in0Mul83456,in1Mul83456])
Res99031 = keras.layers.Reshape((2, 1, 2, 1), name = 'Res99031', )(Mul83456)
Con36101 = keras.layers.Conv3DTranspose(4, (1, 1, 2),strides=(1, 1, 2), padding='valid', name = 'Con36101', )(Res99031)
Res2162 = keras.layers.Reshape((2, 1, 16), name = 'Res2162', )(Con36101)
Mul77655 = keras.layers.Multiply(name = 'Mul77655', )([in0Mul77655,in1Mul77655])
Con73275 = keras.layers.Concatenate(axis=3, name = 'Con73275', )([Mul77655,in0Con73275])
Min39495 = keras.layers.Minimum(name = 'Min39495', )([Res2162,Con73275])
Thr66640 = keras.layers.ThresholdedReLU(theta=1.0721464087255383, name = 'Thr66640', )(Min39495)
Zer75810 = keras.layers.ZeroPadding2D(padding=((14, 0), (0, 0)), name = 'Zer75810', )(Thr66640)
Min58087 = keras.layers.Minimum(name = 'Min58087', )([Con85082,Zer75810])
model = tf.keras.models.Model(inputs=[in0Ave152,in1Ave152,in0Glo57420,in0Con85082,in0Mul83456,in1Mul83456,in0Mul77655,in1Mul77655,in0Con73275], outputs=Min58087)
w = model.get_layer('Con36101').get_weights() 
w[0] = np.array([[[[[0.8039], [0.5107], [0.8979], [0.2008]], [[0.0984], [0.6831], [0.4272], [0.9262]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con36101').set_weights(w) 
in0Ave152 = tf.constant([[[[0.5634, 0.2131]], [[0.2341, 0.809]]]])
in1Ave152 = tf.constant([[[[0.1206, 0.0911]], [[0.7056, 0.1158]]]])
in0Glo57420 = tf.constant([[[[1.5452]], [[1.6405]]]])
in0Con85082 = tf.constant([[[[0.7136, 0.6631, 0.1675, 0.9043, 0.3618, 0.5671, 0.8784, 0.3496, 0.69, 0.1954, 0.0339, 0.1494, 0.7253, 0.7921]], [[0.5056, 0.1162, 0.4955, 0.2402, 0.4746, 0.313, 0.3007, 0.3144, 0.0944, 0.8674, 0.9013, 0.1357, 0.9594, 0.0856]], [[0.7842, 0.8713, 0.3707, 0.5734, 0.5221, 0.5569, 0.7632, 0.0491, 0.3882, 0.2911, 0.8202, 0.5398, 0.808, 0.9455]], [[0.7363, 0.6957, 0.9352, 0.9699, 0.8109, 0.0249, 0.6242, 0.8308, 0.0547, 0.9572, 0.3384, 0.1157, 0.7758, 0.7754]], [[0.0792, 0.359, 0.1718, 0.6221, 0.2547, 0.2035, 0.8031, 0.982, 0.5108, 0.5952, 0.4457, 0.2697, 0.9446, 0.3296]], [[0.2304, 0.4118, 0.7908, 0.4166, 0.1634, 0.6006, 0.6238, 0.4098, 0.0926, 0.7194, 0.3583, 0.0627, 0.936, 0.2919]], [[0.8428, 0.4105, 0.5194, 0.1907, 0.6416, 0.6581, 0.6856, 0.7564, 0.6791, 0.0548, 0.4305, 0.4246, 0.7793, 0.2754]], [[0.6988, 0.4347, 0.7771, 0.6963, 0.1275, 0.7053, 0.7996, 0.3534, 0.4676, 0.4986, 0.5199, 0.2992, 0.6276, 0.0693]], [[0.6701, 0.539, 0.2916, 0.0953, 0.8707, 0.7194, 0.839, 0.3213, 0.8757, 0.2663, 0.8631, 0.5114, 0.6666, 0.7251]], [[0.9248, 0.5033, 0.4369, 0.6427, 0.3089, 0.8847, 0.4001, 0.4505, 0.453, 0.5695, 0.5273, 0.4548, 0.4108, 0.3439]], [[0.7754, 0.2227, 0.1801, 0.2721, 0.101, 0.3641, 0.9766, 0.704, 0.5725, 0.9533, 0.5666, 0.5118, 0.1903, 0.6059]], [[0.5868, 0.0971, 0.6052, 0.5371, 0.3715, 0.6559, 0.7831, 0.7594, 0.1866, 0.1673, 0.8086, 0.9484, 0.9236, 0.5796]], [[0.4407, 0.4057, 0.2482, 0.7084, 0.7396, 0.9759, 0.917, 0.4323, 0.0664, 0.7385, 0.4746, 0.8733, 0.0281, 0.7888]], [[0.8296, 0.3849, 0.4841, 0.4452, 0.2682, 0.3342, 0.5617, 0.7754, 0.3101, 0.8607, 0.7384, 0.4251, 0.4374, 0.0232]], [[0.4398, 0.3439, 0.134, 0.0039, 0.2748, 0.1598, 0.8623, 0.3297, 0.9837, 0.6291, 0.5728, 0.3903, 0.4119, 0.803]], [[0.0935, 0.8876, 0.335, 0.2948, 0.2781, 0.2334, 0.7637, 0.306, 0.1064, 0.3267, 0.4303, 0.8743, 0.024, 0.5901]]]])
in0Mul83456 = tf.constant([[[[0.6747, 0.3227]], [[0.5254, 0.3346]]]])
in1Mul83456 = tf.constant([[[[0.6717, 0.4012]], [[0.7353, 0.4896]]]])
in0Mul77655 = tf.constant([[[[0.3717]], [[0.2039]]]])
in1Mul77655 = tf.constant([[[[0.5738]], [[0.2278]]]])
in0Con73275 = tf.constant([[[[0.6817, 0.7396, 0.938, 0.3895, 0.9868, 0.0768, 0.8136, 0.2659, 0.5991, 0.4402, 0.7832, 0.6097, 0.6534, 0.1448, 0.9619]], [[0.1, 0.4123, 0.9209, 0.712, 0.5864, 0.8469, 0.3273, 0.7581, 0.0723, 0.284, 0.4695, 0.077, 0.5111, 0.8395, 0.4755]]]])
print (np.array2string(model.predict([in0Ave152,in1Ave152,in0Glo57420,in0Con85082,in0Mul83456,in1Mul83456,in0Mul77655,in1Mul77655,in0Con73275],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min58087.png')

LAve152 = average_layer([[[[[0.5634, 0.2131]], [[0.2341, 0.809]]]], [[[[0.1206, 0.0911]], [[0.7056, 0.1158]]]]], Ave152), 
LRes82214 = reshape_layer(Ave152, [2, 1, 2, 1], Res82214), 
LZer66570 = zero_padding3D_layer(Res82214, 14, 0, 0, 0, 0, 0, Zer66570), 
LGlo57420 = global_max_pool2D_layer([[[[1.5452]], [[1.6405]]]], Glo57420), 
LRes55568 = reshape_layer(Glo57420, [1, 1], Res55568), 
LZer35444 = zero_padding1D_layer(Res55568, 7, 0, Zer35444), 
LRes9058 = reshape_layer(Zer35444, [8, 1, 1], Res9058), 
LRes15444 = reshape_layer(Res9058, [8, 1, 1, 1], Res15444), 
LUp_17489 = up_sampling3D_layer(Res15444, 2, 1, 2, Up_17489), 
LMul76293 = multiply_layer([Zer66570,Up_17489], Mul76293), 
LRes60459 = reshape_layer(Mul76293, [16, 1, 2], Res60459), 
LCon85082 = concatenate_layer([Res60459,[[[[0.7136, 0.6631, 0.1675, 0.9043, 0.3618, 0.5671, 0.8784, 0.3496, 0.69, 0.1954, 0.0339, 0.1494, 0.7253, 0.7921]], [[0.5056, 0.1162, 0.4955, 0.2402, 0.4746, 0.313, 0.3007, 0.3144, 0.0944, 0.8674, 0.9013, 0.1357, 0.9594, 0.0856]], [[0.7842, 0.8713, 0.3707, 0.5734, 0.5221, 0.5569, 0.7632, 0.0491, 0.3882, 0.2911, 0.8202, 0.5398, 0.808, 0.9455]], [[0.7363, 0.6957, 0.9352, 0.9699, 0.8109, 0.0249, 0.6242, 0.8308, 0.0547, 0.9572, 0.3384, 0.1157, 0.7758, 0.7754]], [[0.0792, 0.359, 0.1718, 0.6221, 0.2547, 0.2035, 0.8031, 0.982, 0.5108, 0.5952, 0.4457, 0.2697, 0.9446, 0.3296]], [[0.2304, 0.4118, 0.7908, 0.4166, 0.1634, 0.6006, 0.6238, 0.4098, 0.0926, 0.7194, 0.3583, 0.0627, 0.936, 0.2919]], [[0.8428, 0.4105, 0.5194, 0.1907, 0.6416, 0.6581, 0.6856, 0.7564, 0.6791, 0.0548, 0.4305, 0.4246, 0.7793, 0.2754]], [[0.6988, 0.4347, 0.7771, 0.6963, 0.1275, 0.7053, 0.7996, 0.3534, 0.4676, 0.4986, 0.5199, 0.2992, 0.6276, 0.0693]], [[0.6701, 0.539, 0.2916, 0.0953, 0.8707, 0.7194, 0.839, 0.3213, 0.8757, 0.2663, 0.8631, 0.5114, 0.6666, 0.7251]], [[0.9248, 0.5033, 0.4369, 0.6427, 0.3089, 0.8847, 0.4001, 0.4505, 0.453, 0.5695, 0.5273, 0.4548, 0.4108, 0.3439]], [[0.7754, 0.2227, 0.1801, 0.2721, 0.101, 0.3641, 0.9766, 0.704, 0.5725, 0.9533, 0.5666, 0.5118, 0.1903, 0.6059]], [[0.5868, 0.0971, 0.6052, 0.5371, 0.3715, 0.6559, 0.7831, 0.7594, 0.1866, 0.1673, 0.8086, 0.9484, 0.9236, 0.5796]], [[0.4407, 0.4057, 0.2482, 0.7084, 0.7396, 0.9759, 0.917, 0.4323, 0.0664, 0.7385, 0.4746, 0.8733, 0.0281, 0.7888]], [[0.8296, 0.3849, 0.4841, 0.4452, 0.2682, 0.3342, 0.5617, 0.7754, 0.3101, 0.8607, 0.7384, 0.4251, 0.4374, 0.0232]], [[0.4398, 0.3439, 0.134, 0.0039, 0.2748, 0.1598, 0.8623, 0.3297, 0.9837, 0.6291, 0.5728, 0.3903, 0.4119, 0.803]], [[0.0935, 0.8876, 0.335, 0.2948, 0.2781, 0.2334, 0.7637, 0.306, 0.1064, 0.3267, 0.4303, 0.8743, 0.024, 0.5901]]]]], 3, Con85082), 
LMul83456 = multiply_layer([[[[[0.6747, 0.3227]], [[0.5254, 0.3346]]]], [[[[0.6717, 0.4012]], [[0.7353, 0.4896]]]]], Mul83456), 
LRes99031 = reshape_layer(Mul83456, [2, 1, 2, 1], Res99031), 
LCon36101 = conv3D_transpose_layer(Res99031, 1, 1, 2,[[[[[0.8039], [0.5107], [0.8979], [0.2008]], [[0.0984], [0.6831], [0.4272], [0.9262]]]]],[0, 0, 0, 0], 1, 1, 2, false, Con36101), 
LRes2162 = reshape_layer(Con36101, [2, 1, 16], Res2162), 
LMul77655 = multiply_layer([[[[[0.3717]], [[0.2039]]]], [[[[0.5738]], [[0.2278]]]]], Mul77655), 
LCon73275 = concatenate_layer([Mul77655,[[[[0.6817, 0.7396, 0.938, 0.3895, 0.9868, 0.0768, 0.8136, 0.2659, 0.5991, 0.4402, 0.7832, 0.6097, 0.6534, 0.1448, 0.9619]], [[0.1, 0.4123, 0.9209, 0.712, 0.5864, 0.8469, 0.3273, 0.7581, 0.0723, 0.284, 0.4695, 0.077, 0.5111, 0.8395, 0.4755]]]]], 3, Con73275), 
LMin39495 = minimum_layer([Res2162,Con73275], Min39495), 
LThr66640 = thresholded_relu_layer(Min39495, 1.0721464087255383, Thr66640), 
LZer75810 = zero_padding2D_layer(Thr66640, 14, 0, 0, 0, Zer75810), 
LMin58087 = minimum_layer([Con85082,Zer75810], Min58087), 
exec_layers([LAve152,LRes82214,LZer66570,LGlo57420,LRes55568,LZer35444,LRes9058,LRes15444,LUp_17489,LMul76293,LRes60459,LCon85082,LMul83456,LRes99031,LCon36101,LRes2162,LMul77655,LCon73275,LMin39495,LThr66640,LZer75810,LMin58087],["Ave152","Res82214","Zer66570","Glo57420","Res55568","Zer35444","Res9058","Res15444","Up_17489","Mul76293","Res60459","Con85082","Mul83456","Res99031","Con36101","Res2162","Mul77655","Con73275","Min39495","Thr66640","Zer75810","Min58087"],Min58087,"Min58087")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]]]]

Expected (Unparsed): [[[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]]]

Actual:   [[[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]]

Expected: [[[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]]