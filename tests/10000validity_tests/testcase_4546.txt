import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul79152 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in1Mul79152 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Max32892 = tf.keras.layers.Input(shape=([1, 2, 1]))
in1Max32892 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con89356 = tf.keras.layers.Input(shape=([3, 4, 3, 1]))
in0Ave89197 = tf.keras.layers.Input(shape=([2, 2]))
in1Ave89197 = tf.keras.layers.Input(shape=([2, 2]))
in0Con68743 = tf.keras.layers.Input(shape=([3, 20]))

Mul79152 = keras.layers.Multiply(name = 'Mul79152', )([in0Mul79152,in1Mul79152])
Zer83529 = keras.layers.ZeroPadding3D(padding=((1, 0), (2, 0), (2, 0)), name = 'Zer83529', )(Mul79152)
Max32892 = keras.layers.Maximum(name = 'Max32892', )([in0Max32892,in1Max32892])
Res56298 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res56298', )(Max32892)
Zer78751 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer78751', )(Res56298)
Con89356 = keras.layers.Concatenate(axis=4, name = 'Con89356', )([Zer78751,in0Con89356])
Add50014 = keras.layers.Add(name = 'Add50014', )([Zer83529,Con89356])
Res92851 = keras.layers.Reshape((3, 4, 6), name = 'Res92851', )(Add50014)
Res90900 = keras.layers.Reshape((3, 24), name = 'Res90900', )(Res92851)
Ave89197 = keras.layers.Average(name = 'Ave89197', )([in0Ave89197,in1Ave89197])
Glo60329 = keras.layers.GlobalAveragePooling1D(name = 'Glo60329', )(Ave89197)
Res72985 = keras.layers.Reshape((2, 1), name = 'Res72985', )(Glo60329)
Loc89123 = keras.layers.LocallyConnected1D(4, (2),strides=(1), name = 'Loc89123', )(Res72985)
Zer80534 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer80534', )(Loc89123)
Con68743 = keras.layers.Concatenate(axis=2, name = 'Con68743', )([Zer80534,in0Con68743])
Add47373 = keras.layers.Add(name = 'Add47373', )([Res90900,Con68743])
model = tf.keras.models.Model(inputs=[in0Mul79152,in1Mul79152,in0Max32892,in1Max32892,in0Con89356,in0Ave89197,in1Ave89197,in0Con68743], outputs=Add47373)
w = model.get_layer('Loc89123').get_weights() 
w[0] = np.array([[[0.5069, 0.3792, 0.9123, 0.285], [0.7386, 0.4636, 0.217, 0.5908]]])
w[1] = np.array([[0, 0, 0, 0]])
model.get_layer('Loc89123').set_weights(w) 
in0Mul79152 = tf.constant([[[[[0.1956, 0.6035]], [[0.7146, 0.6698]]], [[[0.1615, 0.1645]], [[0.0805, 0.563]]]]])
in1Mul79152 = tf.constant([[[[[0.4154, 0.3786]], [[0.5584, 0.0548]]], [[[0.7372, 0.5698]], [[0.8693, 0.956]]]]])
in0Max32892 = tf.constant([[[[0.8647], [0.4627]]]])
in1Max32892 = tf.constant([[[[0.1139], [0.5283]]]])
in0Con89356 = tf.constant([[[[[0.8348], [0.5915], [0.6606]], [[0.365], [0.8956], [0.9524]], [[0.141], [0.6317], [0.1576]], [[0.672], [0.1606], [0.3848]]], [[[0.1191], [0.9847], [0.7153]], [[0.7076], [0.1862], [0.4011]], [[0.9112], [0.1345], [0.6045]], [[0.7811], [0.59], [0.1206]]], [[[0.432], [0.8309], [0.2363]], [[0.9476], [0.0405], [0.5189]], [[0.7333], [0.4745], [0.9913]], [[0.2428], [0.413], [0.6217]]]]])
in0Ave89197 = tf.constant([[[0.6409, 0.4909], [0.4978, 0.4255]]])
in1Ave89197 = tf.constant([[[0.3053, 0.0952], [0.0385, 0.6443]]])
in0Con68743 = tf.constant([[[0.1041, 0.8839, 0.8699, 0.3655, 0.4857, 0.4277, 0.5018, 0.7239, 0.7284, 0.8012, 0.6785, 0.8254, 0.3247, 0.3645, 0.3832, 0.3889, 0.205, 0.6093, 0.0394, 0.7568], [0.5844, 0.3361, 0.36, 0.1245, 0.0816, 0.3196, 0.2861, 0.7855, 0.4301, 0.548, 0.3506, 0.2159, 0.7319, 0.7626, 0.2566, 0.4148, 0.7382, 0.8163, 0.3288, 0.1618], [0.0862, 0.3205, 0.7628, 0.7574, 0.7691, 0.1566, 0.2771, 0.372, 0.369, 0.69, 0.8533, 0.3432, 0.7482, 0.9451, 0.7407, 0.6365, 0.9568, 0.5719, 0.796, 0.2083]]])
print (np.array2string(model.predict([in0Mul79152,in1Mul79152,in0Max32892,in1Max32892,in0Con89356,in0Ave89197,in1Ave89197,in0Con68743],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add47373.png')

LMul79152 = multiply_layer([[[[[[0.1956, 0.6035]], [[0.7146, 0.6698]]], [[[0.1615, 0.1645]], [[0.0805, 0.563]]]]], [[[[[0.4154, 0.3786]], [[0.5584, 0.0548]]], [[[0.7372, 0.5698]], [[0.8693, 0.956]]]]]], Mul79152), 
LZer83529 = zero_padding3D_layer(Mul79152, 1, 0, 2, 0, 2, 0, Zer83529), 
LMax32892 = maximum_layer([[[[[0.8647], [0.4627]]]], [[[[0.1139], [0.5283]]]]], Max32892), 
LRes56298 = reshape_layer(Max32892, [1, 2, 1, 1], Res56298), 
LZer78751 = zero_padding3D_layer(Res56298, 1, 1, 1, 1, 1, 1, Zer78751), 
LCon89356 = concatenate_layer([Zer78751,[[[[[0.8348], [0.5915], [0.6606]], [[0.365], [0.8956], [0.9524]], [[0.141], [0.6317], [0.1576]], [[0.672], [0.1606], [0.3848]]], [[[0.1191], [0.9847], [0.7153]], [[0.7076], [0.1862], [0.4011]], [[0.9112], [0.1345], [0.6045]], [[0.7811], [0.59], [0.1206]]], [[[0.432], [0.8309], [0.2363]], [[0.9476], [0.0405], [0.5189]], [[0.7333], [0.4745], [0.9913]], [[0.2428], [0.413], [0.6217]]]]]], 4, Con89356), 
LAdd50014 = add_layer([Zer83529,Con89356], Add50014), 
LRes92851 = reshape_layer(Add50014, [3, 4, 6], Res92851), 
LRes90900 = reshape_layer(Res92851, [3, 24], Res90900), 
LAve89197 = average_layer([[[[0.6409, 0.4909], [0.4978, 0.4255]]], [[[0.3053, 0.0952], [0.0385, 0.6443]]]], Ave89197), 
LGlo60329 = global_average_pooling1D_layer(Ave89197, Glo60329), 
LRes72985 = reshape_layer(Glo60329, [2, 1], Res72985), 
LLoc89123 = locally_connected1D_layer(Res72985, 2,[[[0.5069, 0.3792, 0.9123, 0.285], [0.7386, 0.4636, 0.217, 0.5908]]],[[0, 0, 0, 0]], 1, Loc89123), 
LZer80534 = zero_padding1D_layer(Loc89123, 2, 0, Zer80534), 
LCon68743 = concatenate_layer([Zer80534,[[[0.1041, 0.8839, 0.8699, 0.3655, 0.4857, 0.4277, 0.5018, 0.7239, 0.7284, 0.8012, 0.6785, 0.8254, 0.3247, 0.3645, 0.3832, 0.3889, 0.205, 0.6093, 0.0394, 0.7568], [0.5844, 0.3361, 0.36, 0.1245, 0.0816, 0.3196, 0.2861, 0.7855, 0.4301, 0.548, 0.3506, 0.2159, 0.7319, 0.7626, 0.2566, 0.4148, 0.7382, 0.8163, 0.3288, 0.1618], [0.0862, 0.3205, 0.7628, 0.7574, 0.7691, 0.1566, 0.2771, 0.372, 0.369, 0.69, 0.8533, 0.3432, 0.7482, 0.9451, 0.7407, 0.6365, 0.9568, 0.5719, 0.796, 0.2083]]]], 2, Con68743), 
LAdd47373 = add_layer([Res90900,Con68743], Add47373), 
exec_layers([LMul79152,LZer83529,LMax32892,LRes56298,LZer78751,LCon89356,LAdd50014,LRes92851,LRes90900,LAve89197,LGlo60329,LRes72985,LLoc89123,LZer80534,LCon68743,LAdd47373],["Mul79152","Zer83529","Max32892","Res56298","Zer78751","Con89356","Add50014","Res92851","Res90900","Ave89197","Glo60329","Res72985","Loc89123","Zer80534","Con68743","Add47373"],Add47373,"Add47373")

Actual (Unparsed): [[[0.0000000, 0.8348000, 0.0000000, 0.5915000, 0.1041000, 1.5445000, 0.8699000, 0.7305000, 0.4857000, 1.3233000, 0.5018000, 1.6763000, 0.7284000, 0.9422000, 0.6785000, 1.4571000, 0.3247000, 0.5221000, 0.3832000, 1.0609000, 0.2050000, 0.7699000, 0.0394000, 1.1416000], [0.0000000, 0.1191000, 0.0000000, 0.9847000, 0.5844000, 1.0514000, 0.3600000, 0.8321000, 0.9463000, 0.5058000, 0.2861000, 1.1866000, 0.4301000, 1.4592000, 0.8789000, 0.3504000, 0.8131522, 1.5955851, 0.2566000, 1.1959000, 0.7382000, 1.4062999, 0.7278326, 0.3191050], [0.4936317, 0.7644598, 0.4279538, 1.1811046, 0.0862000, 0.5568000, 0.7628000, 1.7050000, 0.7691000, 0.1971000, 0.2771000, 0.8909000, 0.3690000, 1.4233000, 0.8533000, 0.8177000, 0.8672578, 2.0301321, 0.7407000, 0.8793000, 0.9568000, 0.9849000, 0.8659787, 1.3682280]]]

Expected (Unparsed): [[[0,0.8348,0,0.5915,0.1041,1.5445,0.8699,0.7304999999999999,0.4857,1.3233,0.5018,1.6763,0.7284,0.9422,0.6785,1.4571,0.3247,0.5221,0.3832,1.0609000000000002,0.205,0.7698999999999999,0.0394,1.1416],[0,0.1191,0,0.9847,0.5844,1.0514000000000001,0.36,0.8321000000000001,0.9463,0.5058,0.2861,1.1865999999999999,0.4301,1.4592,0.8789,0.35040000000000004,0.81315224,1.5955851,0.2566,1.1959,0.7382,1.4062999999999999,0.7278326399999999,0.31910504],[0.4936317475,0.76445981,0.42795376249999995,1.181104555,0.0862,0.5568,0.7628,1.705,0.7691,0.1971,0.2771,0.8909,0.369,1.4232999999999998,0.8533,0.8177,0.8672578,2.0301321000000003,0.7407,0.8793,0.9568,0.9848999999999999,0.8659786500000001,1.3682279999999998]]]

Actual:   [[[0, 0.8348, 0, 0.5915, 0.1041, 1.5445, 0.8699, 0.7305, 0.4857, 1.3233, 0.5018, 1.6763, 0.7284, 0.9422, 0.6785, 1.4571, 0.3247, 0.5221, 0.3832, 1.0609, 0.205, 0.7699, 0.0394, 1.1416], [0, 0.1191, 0, 0.9847, 0.5844, 1.0514, 0.36, 0.8321, 0.9463, 0.5058, 0.2861, 1.1866, 0.4301, 1.4592, 0.8789, 0.3504, 0.8132, 1.5956, 0.2566, 1.1959, 0.7382, 1.4063, 0.7279, 0.3192], [0.4937, 0.7645, 0.428, 1.1812, 0.0862, 0.5568, 0.7628, 1.705, 0.7691, 0.1971, 0.2771, 0.8909, 0.369, 1.4233, 0.8533, 0.8177, 0.8673, 2.0302, 0.7407, 0.8793, 0.9568, 0.9849, 0.866, 1.3683]]]

Expected: [[[0, 0.8348, 0, 0.5915, 0.1041, 1.5445, 0.8699, 0.7305, 0.4857, 1.3233, 0.5018, 1.6763, 0.7284, 0.9422, 0.6785, 1.4571, 0.3247, 0.5221, 0.3832, 1.061, 0.205, 0.7699, 0.0394, 1.1416], [0, 0.1191, 0, 0.9847, 0.5844, 1.0515, 0.36, 0.8322, 0.9463, 0.5058, 0.2861, 1.1866, 0.4301, 1.4592, 0.8789, 0.3505, 0.8132, 1.5956, 0.2566, 1.1959, 0.7382, 1.4063, 0.7279, 0.3192], [0.4937, 0.7645, 0.428, 1.1812, 0.0862, 0.5568, 0.7628, 1.705, 0.7691, 0.1971, 0.2771, 0.8909, 0.369, 1.4233, 0.8533, 0.8177, 0.8673, 2.0302, 0.7407, 0.8793, 0.9568, 0.9849, 0.866, 1.3683]]]