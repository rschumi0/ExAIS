import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub67280 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in1Sub67280 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in0Dot50445 = tf.keras.layers.Input(shape=([2, 2]))
in1Dot50445 = tf.keras.layers.Input(shape=([2, 2]))
in0Con46300 = tf.keras.layers.Input(shape=([79]))

Sub67280 = keras.layers.Subtract(name = 'Sub67280', )([in0Sub67280,in1Sub67280])
Res80194 = keras.layers.Reshape((3, 3, 9), name = 'Res80194', )(Sub67280)
Res93921 = keras.layers.Reshape((3, 27), name = 'Res93921', )(Res80194)
Fla19195 = keras.layers.Flatten(name = 'Fla19195', )(Res93921)
Dot50445 = keras.layers.Dot(axes=(2, 2), name = 'Dot50445', )([in0Dot50445,in1Dot50445])
ELU79083 = keras.layers.ELU(alpha=-7.896355652138814, name = 'ELU79083', )(Dot50445)
Glo23313 = keras.layers.GlobalMaxPool1D(name = 'Glo23313', )(ELU79083)
Con46300 = keras.layers.Concatenate(axis=1, name = 'Con46300', )([Glo23313,in0Con46300])
Max97029 = keras.layers.Maximum(name = 'Max97029', )([Fla19195,Con46300])
Res62408 = keras.layers.Reshape((81, 1), name = 'Res62408', )(Max97029)
PRe20122 = keras.layers.PReLU(name = 'PRe20122', )(Res62408)
model = tf.keras.models.Model(inputs=[in0Sub67280,in1Sub67280,in0Dot50445,in1Dot50445,in0Con46300], outputs=PRe20122)
w = model.get_layer('PRe20122').get_weights() 
w[0] = np.array([[0.1393], [0.4544], [0.2763], [0.0048], [0.4775], [0.0386], [0.9901], [0.9215], [0.2262], [0.8406], [0.9409], [0.1139], [0.648], [0.473], [0.4749], [0.0257], [0.0693], [0.5956], [0.3666], [0.2242], [0.6389], [0.8497], [0.7999], [0.1254], [0.097], [0.3126], [0.1472], [0.5531], [0.4468], [0.1777], [0.612], [0.1847], [0.4028], [0.5074], [0.1692], [0.0956], [0.4933], [0.3285], [0.1388], [0.5527], [0.7399], [0.0467], [0.1562], [0.9243], [0.9048], [0.137], [0.2656], [0.079], [0.3995], [0.3383], [0.3577], [0.925], [0.0846], [0.1263], [0.1943], [0.8059], [0.3522], [0.0669], [0.8209], [0.3145], [0.0813], [0.7652], [0.2526], [0.7107], [0.2826], [0.5137], [0.94], [0.5378], [0.5082], [0.4196], [0.6676], [0.2201], [0.3935], [0.7419], [0.2216], [0.3932], [0.0158], [0.4068], [0.3717], [0.4708], [0.1114]])
model.get_layer('PRe20122').set_weights(w) 
in0Sub67280 = tf.constant([[[[[0.127, 0.2544, 0.6205], [0.7343, 0.1996, 0.3641], [0.3483, 0.6333, 0.1396]], [[0.9052, 0.8657, 0.0836], [0.502, 0.6939, 0.1053], [0.8521, 0.0268, 0.0131]], [[0.6627, 0.3795, 0.3336], [0.52, 0.8063, 0.3781], [0.3231, 0.1934, 0.7137]]], [[[0.3678, 0.019, 0.3794], [0.8883, 0.0941, 0.0058], [0.3026, 0.72, 0.7831]], [[0.4552, 0.3749, 0.0606], [0.3588, 0.9722, 0.2594], [0.5041, 0.0723, 0.1339]], [[0.9203, 0.787, 0.4739], [0.6522, 0.8289, 0.3489], [0.2978, 0.5434, 0.0842]]], [[[0.6363, 0.6218, 0.5561], [0.4528, 0.1686, 0.6151], [0.3765, 0.2397, 0.7391]], [[0.2943, 0.8098, 0.457], [0.3744, 0.969, 0.217], [0.9759, 0.8404, 0.4795]], [[0.9764, 0.2193, 0.5478], [0.9019, 0.6351, 0.4793], [0.6849, 0.1287, 0.7173]]]]])
in1Sub67280 = tf.constant([[[[[0.1292, 0.2855, 0.6211], [0.8635, 0.8419, 0.7244], [0.6716, 0.0909, 0.4205]], [[0.8284, 0.7175, 0.4824], [0.0028, 0.3846, 0.6002], [0.5424, 0.2108, 0.3386]], [[0.181, 0.7879, 0.2801], [0.3803, 0.3893, 0.8829], [0.3287, 0.9374, 0.6073]]], [[[0.7709, 0.7012, 0.817], [0.2755, 0.8107, 0.7602], [0.8673, 0.7405, 0.8801]], [[0.5868, 0.0672, 0.6621], [0.7743, 0.7984, 0.3926], [0.7455, 0.9981, 0.098]], [[0.66, 0.1708, 0.2283], [0.2256, 0.2993, 0.8563], [0.3025, 0.7004, 0.6713]]], [[[0.6089, 0.5834, 0.1129], [0.111, 0.2923, 0.9415], [0.756, 0.3541, 0.3721]], [[0.4001, 0.067, 0.3805], [0.5894, 0.6969, 0.6958], [0.9969, 0.0519, 0.628]], [[0.0071, 0.6736, 0.7392], [0.0623, 0.4842, 0.2471], [0.2679, 0.9414, 0.8045]]]]])
in0Dot50445 = tf.constant([[[0.1061, 0.7814], [0.4109, 0.329]]])
in1Dot50445 = tf.constant([[[0.3902, 0.9935], [0.4714, 0.3656]]])
in0Con46300 = tf.constant([[0.0109, 0.8616, 0.5249, 0.1803, 0.5007, 0.856, 0.6942, 0.4341, 0.3793, 0.9107, 0.7633, 0.5253, 0.5488, 0.1328, 0.0179, 0.5905, 0.2622, 0.5721, 0.284, 0.7049, 0.9075, 0.6352, 0.2594, 0.6123, 0.9356, 0.0828, 0.5004, 0.0432, 0.2616, 0.0707, 0.1215, 0.8789, 0.9652, 0.3907, 0.4663, 0.9398, 0.2709, 0.6635, 0.3642, 0.1027, 0.596, 0.7428, 0.102, 0.7849, 0.9222, 0.9995, 0.9045, 0.5734, 0.8677, 0.4724, 0.5485, 0.9206, 0.6154, 0.0963, 0.711, 0.3816, 0.2869, 0.3478, 0.7946, 0.8261, 0.443, 0.6843, 0.2629, 0.421, 0.1393, 0.0962, 0.9724, 0.9509, 0.3676, 0.9388, 0.5924, 0.2217, 0.7733, 0.9663, 0.9649, 0.8726, 0.257, 0.1514, 0.1812]])
print (np.array2string(model.predict([in0Sub67280,in1Sub67280,in0Dot50445,in1Dot50445,in0Con46300],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='PRe20122.png')

LSub67280 = subtract_layer([[[[[0.127, 0.2544, 0.6205], [0.7343, 0.1996, 0.3641], [0.3483, 0.6333, 0.1396]], [[0.9052, 0.8657, 0.0836], [0.502, 0.6939, 0.1053], [0.8521, 0.0268, 0.0131]], [[0.6627, 0.3795, 0.3336], [0.52, 0.8063, 0.3781], [0.3231, 0.1934, 0.7137]]], [[[0.3678, 0.019, 0.3794], [0.8883, 0.0941, 0.0058], [0.3026, 0.72, 0.7831]], [[0.4552, 0.3749, 0.0606], [0.3588, 0.9722, 0.2594], [0.5041, 0.0723, 0.1339]], [[0.9203, 0.787, 0.4739], [0.6522, 0.8289, 0.3489], [0.2978, 0.5434, 0.0842]]], [[[0.6363, 0.6218, 0.5561], [0.4528, 0.1686, 0.6151], [0.3765, 0.2397, 0.7391]], [[0.2943, 0.8098, 0.457], [0.3744, 0.969, 0.217], [0.9759, 0.8404, 0.4795]], [[0.9764, 0.2193, 0.5478], [0.9019, 0.6351, 0.4793], [0.6849, 0.1287, 0.7173]]]]], [[[[[0.1292, 0.2855, 0.6211], [0.8635, 0.8419, 0.7244], [0.6716, 0.0909, 0.4205]], [[0.8284, 0.7175, 0.4824], [0.0028, 0.3846, 0.6002], [0.5424, 0.2108, 0.3386]], [[0.181, 0.7879, 0.2801], [0.3803, 0.3893, 0.8829], [0.3287, 0.9374, 0.6073]]], [[[0.7709, 0.7012, 0.817], [0.2755, 0.8107, 0.7602], [0.8673, 0.7405, 0.8801]], [[0.5868, 0.0672, 0.6621], [0.7743, 0.7984, 0.3926], [0.7455, 0.9981, 0.098]], [[0.66, 0.1708, 0.2283], [0.2256, 0.2993, 0.8563], [0.3025, 0.7004, 0.6713]]], [[[0.6089, 0.5834, 0.1129], [0.111, 0.2923, 0.9415], [0.756, 0.3541, 0.3721]], [[0.4001, 0.067, 0.3805], [0.5894, 0.6969, 0.6958], [0.9969, 0.0519, 0.628]], [[0.0071, 0.6736, 0.7392], [0.0623, 0.4842, 0.2471], [0.2679, 0.9414, 0.8045]]]]], Sub67280), 
LRes80194 = reshape_layer(Sub67280, [3, 3, 9], Res80194), 
LRes93921 = reshape_layer(Res80194, [3, 27], Res93921), 
LFla19195 = flatten_layer(Res93921, Fla19195), 
LDot50445 = dot_layer([[[0.1061, 0.7814], [0.4109, 0.329]]], [[[0.3902, 0.9935], [0.4714, 0.3656]]], 2, 2, Dot50445), 
LELU79083 = elu_layer(Dot50445, -7.896355652138814, ELU79083), 
LGlo23313 = global_max_pool1D_layer(ELU79083, Glo23313), 
LCon46300 = concatenate_layer([Glo23313,[[0.0109, 0.8616, 0.5249, 0.1803, 0.5007, 0.856, 0.6942, 0.4341, 0.3793, 0.9107, 0.7633, 0.5253, 0.5488, 0.1328, 0.0179, 0.5905, 0.2622, 0.5721, 0.284, 0.7049, 0.9075, 0.6352, 0.2594, 0.6123, 0.9356, 0.0828, 0.5004, 0.0432, 0.2616, 0.0707, 0.1215, 0.8789, 0.9652, 0.3907, 0.4663, 0.9398, 0.2709, 0.6635, 0.3642, 0.1027, 0.596, 0.7428, 0.102, 0.7849, 0.9222, 0.9995, 0.9045, 0.5734, 0.8677, 0.4724, 0.5485, 0.9206, 0.6154, 0.0963, 0.711, 0.3816, 0.2869, 0.3478, 0.7946, 0.8261, 0.443, 0.6843, 0.2629, 0.421, 0.1393, 0.0962, 0.9724, 0.9509, 0.3676, 0.9388, 0.5924, 0.2217, 0.7733, 0.9663, 0.9649, 0.8726, 0.257, 0.1514, 0.1812]]], 1, Con46300), 
LMax97029 = maximum_layer([Fla19195,Con46300], Max97029), 
LRes62408 = reshape_layer(Max97029, [81, 1], Res62408), 
LPRe20122 = prelu_layer(Res62408, [[0.1393], [0.4544], [0.2763], [0.0048], [0.4775], [0.0386], [0.9901], [0.9215], [0.2262], [0.8406], [0.9409], [0.1139], [0.648], [0.473], [0.4749], [0.0257], [0.0693], [0.5956], [0.3666], [0.2242], [0.6389], [0.8497], [0.7999], [0.1254], [0.097], [0.3126], [0.1472], [0.5531], [0.4468], [0.1777], [0.612], [0.1847], [0.4028], [0.5074], [0.1692], [0.0956], [0.4933], [0.3285], [0.1388], [0.5527], [0.7399], [0.0467], [0.1562], [0.9243], [0.9048], [0.137], [0.2656], [0.079], [0.3995], [0.3383], [0.3577], [0.925], [0.0846], [0.1263], [0.1943], [0.8059], [0.3522], [0.0669], [0.8209], [0.3145], [0.0813], [0.7652], [0.2526], [0.7107], [0.2826], [0.5137], [0.94], [0.5378], [0.5082], [0.4196], [0.6676], [0.2201], [0.3935], [0.7419], [0.2216], [0.3932], [0.0158], [0.4068], [0.3717], [0.4708], [0.1114]], PRe20122), 
exec_layers([LSub67280,LRes80194,LRes93921,LFla19195,LDot50445,LELU79083,LGlo23313,LCon46300,LMax97029,LRes62408,LPRe20122],["Sub67280","Res80194","Res93921","Fla19195","Dot50445","ELU79083","Glo23313","Con46300","Max97029","Res62408","PRe20122"],PRe20122,"PRe20122")

Actual (Unparsed): [[[0.8177211], [0.3356954], [0.0109000], [0.8616000], [0.5249000], [0.1803000], [0.5007000], [0.8560000], [0.6942000], [0.4341000], [0.3793000], [0.9107000], [0.7633000], [0.5253000], [0.5488000], [0.3097000], [0.0179000], [0.5905000], [0.4817000], [0.5721000], [0.2840000], [0.7049000], [0.9075000], [0.6352000], [0.2594000], [0.6123000], [0.9356000], [0.0828000], [0.5004000], [0.0432000], [0.6128000], [0.0707000], [0.1215000], [0.8789000], [0.9652000], [0.3907000], [0.4663000], [0.9398000], [0.2709000], [0.6635000], [0.3642000], [0.1027000], [0.5960000], [0.7428000], [0.1020000], [0.7849000], [0.9222000], [0.9995000], [0.9045000], [0.5734000], [0.8677000], [0.4724000], [0.5485000], [0.9206000], [0.6154000], [0.0963000], [0.7110000], [0.3816000], [0.2869000], [0.3478000], [0.7946000], [0.8261000], [0.4430000], [0.6843000], [0.7428000], [0.4210000], [0.1393000], [0.2721000], [0.9724000], [0.9509000], [0.7885000], [0.9388000], [0.9693000], [0.2217000], [0.7733000], [0.9663000], [0.9649000], [0.8726000], [0.4170000], [0.1514000], [0.1812000]]]

Expected (Unparsed): [[[0.81772112],[0.33569538],[0.0109],[0.8616],[0.5249],[0.1803],[0.5007],[0.856],[0.6942],[0.4341],[0.3793],[0.9107],[0.7633],[0.5253],[0.5488],[0.3097],[0.0179],[0.5905],[0.48169999999999996],[0.5721],[0.284],[0.7049],[0.9075],[0.6352],[0.2594],[0.6123],[0.9356],[0.0828],[0.5004],[0.0432],[0.6128],[0.0707],[0.1215],[0.8789],[0.9652],[0.3907],[0.4663],[0.9398],[0.2709],[0.6635],[0.3642],[0.1027],[0.596],[0.7428],[0.102],[0.7849],[0.9222],[0.9995],[0.9045],[0.5734],[0.8677],[0.4724],[0.5485],[0.9206],[0.6154],[0.0963],[0.711],[0.3816],[0.2869],[0.3478],[0.7946],[0.8261],[0.443],[0.6843],[0.7427999999999999],[0.421],[0.1393],[0.2721],[0.9724],[0.9509],[0.7885],[0.9388],[0.9693],[0.2217],[0.7733],[0.9663],[0.9649],[0.8726],[0.4169999999999999],[0.1514],[0.1812]]]

Actual:   [[[0.8178], [0.3357], [0.0109], [0.8616], [0.5249], [0.1803], [0.5007], [0.856], [0.6942], [0.4341], [0.3793], [0.9107], [0.7633], [0.5253], [0.5488], [0.3097], [0.0179], [0.5905], [0.4817], [0.5721], [0.284], [0.7049], [0.9075], [0.6352], [0.2594], [0.6123], [0.9356], [0.0828], [0.5004], [0.0432], [0.6128], [0.0707], [0.1215], [0.8789], [0.9652], [0.3907], [0.4663], [0.9398], [0.2709], [0.6635], [0.3642], [0.1027], [0.596], [0.7428], [0.102], [0.7849], [0.9222], [0.9995], [0.9045], [0.5734], [0.8677], [0.4724], [0.5485], [0.9206], [0.6154], [0.0963], [0.711], [0.3816], [0.2869], [0.3478], [0.7946], [0.8261], [0.443], [0.6843], [0.7428], [0.421], [0.1393], [0.2721], [0.9724], [0.9509], [0.7885], [0.9388], [0.9693], [0.2217], [0.7733], [0.9663], [0.9649], [0.8726], [0.417], [0.1514], [0.1812]]]

Expected: [[[0.8178], [0.3357], [0.0109], [0.8616], [0.5249], [0.1803], [0.5007], [0.856], [0.6942], [0.4341], [0.3793], [0.9107], [0.7633], [0.5253], [0.5488], [0.3097], [0.0179], [0.5905], [0.4817], [0.5721], [0.284], [0.7049], [0.9075], [0.6352], [0.2594], [0.6123], [0.9356], [0.0828], [0.5004], [0.0432], [0.6128], [0.0707], [0.1215], [0.8789], [0.9652], [0.3907], [0.4663], [0.9398], [0.2709], [0.6635], [0.3642], [0.1027], [0.596], [0.7428], [0.102], [0.7849], [0.9222], [0.9995], [0.9045], [0.5734], [0.8677], [0.4724], [0.5485], [0.9206], [0.6154], [0.0963], [0.711], [0.3816], [0.2869], [0.3478], [0.7946], [0.8261], [0.443], [0.6843], [0.7428], [0.421], [0.1393], [0.2721], [0.9724], [0.9509], [0.7885], [0.9388], [0.9693], [0.2217], [0.7733], [0.9663], [0.9649], [0.8726], [0.417], [0.1514], [0.1812]]]