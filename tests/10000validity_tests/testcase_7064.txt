import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con79466 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in0Con17161 = tf.keras.layers.Input(shape=([2, 4]))
in0Cro9091 = tf.keras.layers.Input(shape=([3, 3, 2, 4]))

Con79466 = keras.layers.Conv3DTranspose(2, (1, 1, 2),strides=(1, 1, 1), padding='same', name = 'Con79466', )(in0Con79466)
Res40656 = keras.layers.Reshape((2, 1, 4), name = 'Res40656', )(Con79466)
Res42561 = keras.layers.Reshape((2, 4), name = 'Res42561', )(Res40656)
Con17161 = keras.layers.Concatenate(axis=2, name = 'Con17161', )([Res42561,in0Con17161])
Cro9091 = keras.layers.Cropping3D(cropping=((1, 0), (2, 0), (0, 0)), name = 'Cro9091', )(in0Cro9091)
Res77240 = keras.layers.Reshape((2, 1, 8), name = 'Res77240', )(Cro9091)
Res56612 = keras.layers.Reshape((2, 8), name = 'Res56612', )(Res77240)
Dot67471 = keras.layers.Dot(axes=(1, 1), name = 'Dot67471', )([Con17161,Res56612])
model = tf.keras.models.Model(inputs=[in0Con79466,in0Con17161,in0Cro9091], outputs=Dot67471)
w = model.get_layer('Con79466').get_weights() 
w[0] = np.array([[[[[0.2535, 0.4232], [0.1243, 0.7023]], [[0.3284, 0.2537], [0.1148, 0.7256]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con79466').set_weights(w) 
in0Con79466 = tf.constant([[[[[0.8811, 0.1355], [0.903, 0.6991]]], [[[0.4522, 0.7643], [0.6171, 0.4602]]]]])
in0Con17161 = tf.constant([[[0.3418, 0.3627, 0.9139, 0.2231], [0.6545, 0.1579, 0.8174, 0.356]]])
in0Cro9091 = tf.constant([[[[[1.7726, 1.4696, 1.8593, 1.7185], [1.185, 1.8352, 1.5356, 1.7915]], [[1.6165, 1.0555, 1.452, 1.9431], [1.4865, 1.2049, 1.788, 1.2845]], [[1.1024, 1.9695, 1.1181, 1.1617], [1.3589, 1.3445, 1.7208, 1.6307]]], [[[1.0343, 1.4401, 1.7811, 1.2801], [1.4862, 1.4656, 1.4924, 1.0948]], [[1.0884, 1.1599, 1.9946, 1.2796], [1.3238, 1.4278, 1.5463, 1.9593]], [[1.048, 1.7034, 1.3236, 1.4534], [1.0745, 1.6128, 1.7604, 1.3907]]], [[[1.8962, 1.8356, 1.4034, 1.2695], [1.0545, 1.676, 1.8388, 1.1984]], [[1.3943, 1.7461, 1.3689, 1.4574], [1.2037, 1.335, 1.7634, 1.2104]], [[1.0246, 1.4947, 1.5942, 1.1658], [1.7441, 1.6054, 1.3702, 1.238]]]]])
print (np.array2string(model.predict([in0Con79466,in0Con17161,in0Cro9091],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Dot67471.png')

LCon79466 = conv3D_transpose_layer([[[[[0.8811, 0.1355], [0.903, 0.6991]]], [[[0.4522, 0.7643], [0.6171, 0.4602]]]]], 1, 1, 2,[[[[[0.2535, 0.4232], [0.1243, 0.7023]], [[0.3284, 0.2537], [0.1148, 0.7256]]]]],[0, 0], 1, 1, 1, true, Con79466), 
LRes40656 = reshape_layer(Con79466, [2, 1, 4], Res40656), 
LRes42561 = reshape_layer(Res40656, [2, 4], Res42561), 
LCon17161 = concatenate_layer([Res42561,[[[0.3418, 0.3627, 0.9139, 0.2231], [0.6545, 0.1579, 0.8174, 0.356]]]], 2, Con17161), 
LCro9091 = cropping3D_layer([[[[[1.7726, 1.4696, 1.8593, 1.7185], [1.185, 1.8352, 1.5356, 1.7915]], [[1.6165, 1.0555, 1.452, 1.9431], [1.4865, 1.2049, 1.788, 1.2845]], [[1.1024, 1.9695, 1.1181, 1.1617], [1.3589, 1.3445, 1.7208, 1.6307]]], [[[1.0343, 1.4401, 1.7811, 1.2801], [1.4862, 1.4656, 1.4924, 1.0948]], [[1.0884, 1.1599, 1.9946, 1.2796], [1.3238, 1.4278, 1.5463, 1.9593]], [[1.048, 1.7034, 1.3236, 1.4534], [1.0745, 1.6128, 1.7604, 1.3907]]], [[[1.8962, 1.8356, 1.4034, 1.2695], [1.0545, 1.676, 1.8388, 1.1984]], [[1.3943, 1.7461, 1.3689, 1.4574], [1.2037, 1.335, 1.7634, 1.2104]], [[1.0246, 1.4947, 1.5942, 1.1658], [1.7441, 1.6054, 1.3702, 1.238]]]]], 1, 0, 2, 0, 0, 0, Cro9091), 
LRes77240 = reshape_layer(Cro9091, [2, 1, 8], Res77240), 
LRes56612 = reshape_layer(Res77240, [2, 8], Res56612), 
LDot67471 = dot_layer(Con17161,Res56612, 1, 1, Dot67471), 
exec_layers([LCon79466,LRes40656,LRes42561,LCon17161,LCro9091,LRes77240,LRes56612,LDot67471],["Con79466","Res40656","Res42561","Con17161","Cro9091","Res77240","Res56612","Dot67471"],Dot67471,"Dot67471")

Actual (Unparsed): [[[0.7430375, 1.1329534, 1.0699320, 0.9186918, 1.0656779, 1.1560177, 1.0944119, 0.9327215], [0.8220707, 1.2349777, 1.2162405, 0.9887772, 1.2541412, 1.2820759, 1.1728191, 1.0187565], [1.5998865, 2.4820528, 2.2288058, 2.0418040, 2.1214147, 2.4819599, 2.4440645, 2.0386808], [1.8723689, 2.8715570, 2.6668316, 2.3398820, 2.6177397, 2.9102410, 2.7920146, 2.3622150], [1.0288071, 1.5605033, 1.4958104, 1.2597882, 1.5087775, 1.6019893, 1.4985007, 1.2856123], [0.5418939, 0.8538363, 0.7317939, 0.7112280, 0.6651145, 0.8384552, 0.8548517, 0.6998871], [1.7952752, 2.7785050, 2.5127372, 2.2811872, 2.4076128, 2.7861918, 2.7288311, 2.2829019], [0.5985664, 0.9121417, 0.8628304, 0.7392784, 0.8606206, 0.9313381, 0.8805365, 0.7509932]]]

Expected (Unparsed): [[[0.743037505316,1.132953395692,1.0699320089520001,0.918691804298,1.065677889211,1.156017703444,1.094411920072,0.932721458695],[0.82207070245,1.2349777164370002,1.2162404953380002,0.9887771999220001,1.2541412693450003,1.282075974754,1.172819056522,1.018756507166],[1.5998865353280003,2.48205281085,2.2288057004520003,2.041803994518,2.121414719553,2.48195995704,2.4440644542600003,2.038680788787],[1.8723689143780002,2.871557056755,2.6668314956220005,2.339882043248,2.6177396942780002,2.9102410150500004,2.7920144991900004,2.362214933777],[1.0288070999999999,1.5605032699999999,1.49581038,1.25978822,1.50877755,1.60198934,1.49850062,1.28561226],[0.54189394,0.85383631,0.7317939000000001,0.7112280000000001,0.66511454,0.8384552200000001,0.85485166,0.69988709],[1.79527524,2.7785050399999998,2.51273712,2.28118718,2.4076128900000002,2.78619188,2.72883104,2.2829019300000004],[0.5985663999999999,0.9121417399999999,0.86283036,0.73927834,0.8606205499999999,0.93133808,0.88053644,0.7509931699999999]]]

Actual:   [[[0.7431, 1.133, 1.07, 0.9187, 1.0657, 1.1561, 1.0945, 0.9328], [0.8221, 1.235, 1.2163, 0.9888, 1.2542, 1.2821, 1.1729, 1.0188], [1.5999, 2.4821, 2.2289, 2.0419, 2.1215, 2.482, 2.4441, 2.0387], [1.8724, 2.8716, 2.6669, 2.3399, 2.6178, 2.9103, 2.7921, 2.3623], [1.0289, 1.5606, 1.4959, 1.2598, 1.5088, 1.602, 1.4986, 1.2857], [0.5419, 0.8539, 0.7318, 0.7113, 0.6652, 0.8385, 0.8549, 0.6999], [1.7953, 2.7786, 2.5128, 2.2812, 2.4077, 2.7862, 2.7289, 2.283], [0.5986, 0.9122, 0.8629, 0.7393, 0.8607, 0.9314, 0.8806, 0.751]]]

Expected: [[[0.7431, 1.133, 1.07, 0.9187, 1.0657, 1.1561, 1.0945, 0.9328], [0.8221, 1.235, 1.2163, 0.9888, 1.2542, 1.2821, 1.1729, 1.0188], [1.5999, 2.4821, 2.2289, 2.0419, 2.1215, 2.482, 2.4441, 2.0387], [1.8724, 2.8716, 2.6669, 2.3399, 2.6178, 2.9103, 2.7921, 2.3623], [1.0289, 1.5606, 1.4959, 1.2598, 1.5088, 1.602, 1.4986, 1.2857], [0.5419, 0.8539, 0.7318, 0.7113, 0.6652, 0.8385, 0.8549, 0.6999], [1.7953, 2.7786, 2.5128, 2.2812, 2.4077, 2.7862, 2.7289, 2.283], [0.5986, 0.9122, 0.8629, 0.7393, 0.8607, 0.9314, 0.8806, 0.751]]]