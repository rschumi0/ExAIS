import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max87765 = tf.keras.layers.Input(shape=([2, 1, 2]))

Max87765 = keras.layers.MaxPool2D(pool_size=(1, 1), strides=(1, 2), padding='valid', name = 'Max87765', )(in0Max87765)
Res90253 = keras.layers.Reshape((2, 1, 2, 1), name = 'Res90253', )(Max87765)
Zer71786 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer71786', )(Res90253)
Den12910 = keras.layers.Dense(2,name = 'Den12910', )(Zer71786)
model = tf.keras.models.Model(inputs=[in0Max87765], outputs=Den12910)
w = model.get_layer('Den12910').get_weights() 
w[0] = np.array([[0.2065, 0.2951]])
w[1] = np.array([0.6462, 0.0785])
model.get_layer('Den12910').set_weights(w) 
in0Max87765 = tf.constant([[[[1.6051, 1.0016]], [[1.9312, 1.2751]]]])
print (np.array2string(model.predict([in0Max87765],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Den12910.png')

LMax87765 = max_pool2D_layer([[[[1.6051, 1.0016]], [[1.9312, 1.2751]]]], 1, 1, 1, 2, false, Max87765), 
LRes90253 = reshape_layer(Max87765, [2, 1, 2, 1], Res90253), 
LZer71786 = zero_padding3D_layer(Res90253, 1, 1, 1, 1, 1, 1, Zer71786), 
LDen12910 = dense_layer(Zer71786, [[0.2065, 0.2951]],[0.6462, 0.0785], Den12910), 
exec_layers([LMax87765,LRes90253,LZer71786,LDen12910],["Max87765","Res90253","Zer71786","Den12910"],Den12910,"Den12910")

Actual (Unparsed): [[[[[0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000]], [[0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000]], [[0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000]]], [[[0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000]], [[0.6462000, 0.0785000], [0.9776532, 0.5521650], [0.8530304, 0.3740722], [0.6462000, 0.0785000]], [[0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000]]], [[[0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000]], [[0.6462000, 0.0785000], [1.0449928, 0.6483971], [0.9095081, 0.4547820], [0.6462000, 0.0785000]], [[0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000]]], [[[0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000]], [[0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000]], [[0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000], [0.6462000, 0.0785000]]]]]

Expected (Unparsed): [[[[[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785]],[[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785]],[[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785]]],[[[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785]],[[0.6462,0.0785],[0.97765315,0.55216501],[0.8530304,0.37407216],[0.6462,0.0785]],[[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785]]],[[[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785]],[[0.6462,0.0785],[1.0449928,0.6483971199999999],[0.90950815,0.45478200999999996],[0.6462,0.0785]],[[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785]]],[[[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785]],[[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785]],[[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785],[0.6462,0.0785]]]]]

Actual:   [[[[[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]], [[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]], [[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]]], [[[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]], [[0.6462, 0.0785], [0.9777, 0.5522], [0.8531, 0.3741], [0.6462, 0.0785]], [[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]]], [[[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]], [[0.6462, 0.0785], [1.045, 0.6484], [0.9096, 0.4548], [0.6462, 0.0785]], [[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]]], [[[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]], [[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]], [[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]]]]]

Expected: [[[[[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]], [[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]], [[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]]], [[[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]], [[0.6462, 0.0785], [0.9777, 0.5522], [0.8531, 0.3741], [0.6462, 0.0785]], [[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]]], [[[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]], [[0.6462, 0.0785], [1.045, 0.6484], [0.9096, 0.4548], [0.6462, 0.0785]], [[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]]], [[[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]], [[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]], [[0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785], [0.6462, 0.0785]]]]]