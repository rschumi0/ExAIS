import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul92725 = tf.keras.layers.Input(shape=([1, 1]))
in1Mul92725 = tf.keras.layers.Input(shape=([1, 1]))
in0Con23639 = tf.keras.layers.Input(shape=([5, 7]))
in0Lay60125 = tf.keras.layers.Input(shape=([1, 4, 2]))
in0Den87920 = tf.keras.layers.Input(shape=([5, 2]))
in0Con1465 = tf.keras.layers.Input(shape=([5, 7]))

Mul92725 = keras.layers.Multiply(name = 'Mul92725', )([in0Mul92725,in1Mul92725])
Sim66869 = keras.layers.SimpleRNN(2,name = 'Sim66869', )(Mul92725)
Fla50502 = keras.layers.Flatten(name = 'Fla50502', )(Sim66869)
Res24975 = keras.layers.Reshape((2, 1), name = 'Res24975', )(Fla50502)
Zer54331 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer54331', )(Res24975)
Con23639 = keras.layers.Concatenate(axis=2, name = 'Con23639', )([Zer54331,in0Con23639])
Lay60125 = keras.layers.LayerNormalization(axis=2, epsilon=1.651272441451687, name = 'Lay60125', )(in0Lay60125)
Res19092 = keras.layers.Reshape((1, 8), name = 'Res19092', )(Lay60125)
Zer57232 = keras.layers.ZeroPadding1D(padding=((4, 0)), name = 'Zer57232', )(Res19092)
Den87920 = keras.layers.Dense(1,name = 'Den87920', )(in0Den87920)
Con1465 = keras.layers.Concatenate(axis=2, name = 'Con1465', )([Den87920,in0Con1465])
Max75377 = keras.layers.Maximum(name = 'Max75377', )([Zer57232,Con1465])
Sub63991 = keras.layers.Subtract(name = 'Sub63991', )([Con23639,Max75377])
model = tf.keras.models.Model(inputs=[in0Mul92725,in1Mul92725,in0Con23639,in0Lay60125,in0Den87920,in0Con1465], outputs=Sub63991)
w = model.get_layer('Sim66869').get_weights() 
w[0] = np.array([[8, 3]])
w[1] = np.array([[10, 8], [2, 6]])
w[2] = np.array([6, 5])
model.get_layer('Sim66869').set_weights(w) 
w = model.get_layer('Den87920').get_weights() 
w[0] = np.array([[0.7151], [0.5847]])
w[1] = np.array([0.9626])
model.get_layer('Den87920').set_weights(w) 
in0Mul92725 = tf.constant([[[0.4492]]])
in1Mul92725 = tf.constant([[[0.2231]]])
in0Con23639 = tf.constant([[[0.5578, 0.6327, 0.1008, 0.8996, 0.7727, 0.4674, 0.2555], [0.2544, 0.5307, 0.7574, 0.0264, 0.9174, 0.8659, 0.5847], [0.9552, 0.1595, 0.6813, 0.0304, 0.7419, 0.107, 0.2476], [0.0368, 0.1508, 0.5236, 0.2034, 0.5525, 0.7265, 0.7177], [0.2165, 0.3062, 0.1925, 0.2774, 0.2128, 0.9036, 0.9225]]])
in0Lay60125 = tf.constant([[[[1.4628, 1.4317], [1.44, 1.5408], [1.1123, 1.5632], [1.876, 1.4894]]]])
in0Den87920 = tf.constant([[[0.3536, 0.8253], [0.3935, 0.3634], [0.4909, 0.7806], [0.2923, 0.0158], [0.9812, 0.3705]]])
in0Con1465 = tf.constant([[[0.9889, 0.9035, 0.884, 0.8688, 0.9826, 0.0373, 0.3049], [0.6048, 0.8001, 0.4296, 0.5258, 0.2585, 0.1611, 0.9087], [0.3768, 0.0117, 0.5668, 0.4604, 0.8854, 0.9957, 0.9942], [0.0739, 0.7385, 0.3454, 0.4764, 0.4256, 0.5994, 0.7537], [0.0282, 0.9294, 0.0336, 0.1199, 0.5342, 0.6897, 0.2208]]])
print (np.array2string(model.predict([in0Mul92725,in1Mul92725,in0Con23639,in0Lay60125,in0Den87920,in0Con1465],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub63991.png')

LMul92725 = multiply_layer([[[[0.4492]]], [[[0.2231]]]], Mul92725), 
LSim66869 = simple_rnn_layer(Mul92725,[[8, 3]],[[10, 8], [2, 6]],[6, 5], Sim66869), 
LFla50502 = flatten_layer(Sim66869, Fla50502), 
LRes24975 = reshape_layer(Fla50502, [2, 1], Res24975), 
LZer54331 = zero_padding1D_layer(Res24975, 3, 0, Zer54331), 
LCon23639 = concatenate_layer([Zer54331,[[[0.5578, 0.6327, 0.1008, 0.8996, 0.7727, 0.4674, 0.2555], [0.2544, 0.5307, 0.7574, 0.0264, 0.9174, 0.8659, 0.5847], [0.9552, 0.1595, 0.6813, 0.0304, 0.7419, 0.107, 0.2476], [0.0368, 0.1508, 0.5236, 0.2034, 0.5525, 0.7265, 0.7177], [0.2165, 0.3062, 0.1925, 0.2774, 0.2128, 0.9036, 0.9225]]]], 2, Con23639), 
LLay60125 = layer_normalization_layer([[[[1.4628, 1.4317], [1.44, 1.5408], [1.1123, 1.5632], [1.876, 1.4894]]]], 2, 1.651272441451687, Lay60125), 
LRes19092 = reshape_layer(Lay60125, [1, 8], Res19092), 
LZer57232 = zero_padding1D_layer(Res19092, 4, 0, Zer57232), 
LDen87920 = dense_layer([[[0.3536, 0.8253], [0.3935, 0.3634], [0.4909, 0.7806], [0.2923, 0.0158], [0.9812, 0.3705]]], [[0.7151], [0.5847]],[0.9626], Den87920), 
LCon1465 = concatenate_layer([Den87920,[[[0.9889, 0.9035, 0.884, 0.8688, 0.9826, 0.0373, 0.3049], [0.6048, 0.8001, 0.4296, 0.5258, 0.2585, 0.1611, 0.9087], [0.3768, 0.0117, 0.5668, 0.4604, 0.8854, 0.9957, 0.9942], [0.0739, 0.7385, 0.3454, 0.4764, 0.4256, 0.5994, 0.7537], [0.0282, 0.9294, 0.0336, 0.1199, 0.5342, 0.6897, 0.2208]]]], 2, Con1465), 
LMax75377 = maximum_layer([Zer57232,Con1465], Max75377), 
LSub63991 = subtract_layer(Con23639,Max75377, Sub63991), 
exec_layers([LMul92725,LSim66869,LFla50502,LRes24975,LZer54331,LCon23639,LLay60125,LRes19092,LZer57232,LDen87920,LCon1465,LMax75377,LSub63991],["Mul92725","Sim66869","Fla50502","Res24975","Zer54331","Con23639","Lay60125","Res19092","Zer57232","Den87920","Con1465","Max75377","Sub63991"],Sub63991,"Sub63991")

Actual (Unparsed): [[[-1.6980123, -0.4311000, -0.2708000, -0.7832000, 0.0308000, -0.2099000, 0.4301000, -0.0494000], [-1.4564718, -0.3504000, -0.2694000, 0.3278000, -0.4994000, 0.6589000, 0.7048000, -0.3240000], [-1.7700594, 0.5784000, 0.1478000, 0.1145000, -0.4300000, -0.1435000, -0.8887000, -0.7466000], [-0.1808645, -0.0371000, -0.5877000, 0.1782000, -0.2730000, 0.1269000, 0.1271000, -0.0360000], [-0.8809372, 0.1883000, -0.6232000, 0.1589000, 0.1575000, -0.3214000, 0.2139000, 0.7017000]]]

Expected (Unparsed): [[[-1.69801227,-0.43110000000000004,-0.27079999999999993,-0.7832,0.03079999999999994,-0.20989999999999998,0.4301,-0.0494],[-1.45647183,-0.3504,-0.2694000000000001,0.3278,-0.49940000000000007,0.6589,0.7048,-0.32399999999999995],[-1.77005941,0.5784,0.14780000000000001,0.11450000000000005,-0.43,-0.14349999999999996,-0.8887,-0.7465999999999999],[-0.18086446240703047,-0.037099999999999994,-0.5877000000000001,0.17819999999999997,-0.273,0.1269,0.1271,-0.03600000000000003],[-0.8809372360853601,0.1883,-0.6232,0.1589,0.15749999999999997,-0.3214,0.21389999999999998,0.7017]]]

Actual:   [[[-1.698, -0.4311, -0.2708, -0.7832, 0.0308, -0.2099, 0.4301, -0.0494], [-1.4564, -0.3504, -0.2694, 0.3278, -0.4994, 0.6589, 0.7048, -0.324], [-1.77, 0.5784, 0.1478, 0.1145, -0.43, -0.1435, -0.8887, -0.7466], [-0.1808, -0.0371, -0.5877, 0.1782, -0.273, 0.1269, 0.1271, -0.036], [-0.8809, 0.1883, -0.6232, 0.1589, 0.1575, -0.3214, 0.2139, 0.7017]]]

Expected: [[[-1.698, -0.4311, -0.2707, -0.7832, 0.0308, -0.2098, 0.4301, -0.0494], [-1.4564, -0.3504, -0.2694, 0.3278, -0.4994, 0.6589, 0.7048, -0.3239], [-1.77, 0.5784, 0.1479, 0.1146, -0.43, -0.1434, -0.8887, -0.7465], [-0.1808, -0.037, -0.5877, 0.1782, -0.273, 0.1269, 0.1271, -0.036], [-0.8809, 0.1883, -0.6232, 0.1589, 0.1575, -0.3214, 0.2139, 0.7017]]]