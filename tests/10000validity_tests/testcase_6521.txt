import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Up_7330 = tf.keras.layers.Input(shape=([1, 3]))
in0Con55526 = tf.keras.layers.Input(shape=([1, 3, 1]))
in0Lea56894 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Con67319 = tf.keras.layers.Input(shape=([1, 3, 2, 3]))
in0Con51699 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))

Up_7330 = keras.layers.UpSampling1D(size=(1), name = 'Up_7330', )(in0Up_7330)
Res73930 = keras.layers.Reshape((1, 3, 1), name = 'Res73930', )(Up_7330)
Con55526 = keras.layers.Concatenate(axis=3, name = 'Con55526', )([Res73930,in0Con55526])
Lea56894 = keras.layers.LeakyReLU(alpha=1.3361781434269935, name = 'Lea56894', input_shape=(1, 2, 2))(in0Lea56894)
Zer79515 = keras.layers.ZeroPadding2D(padding=((0, 0), (1, 0)), name = 'Zer79515', )(Lea56894)
Mul38011 = keras.layers.Multiply(name = 'Mul38011', )([Con55526,Zer79515])
Res97406 = keras.layers.Reshape((1, 3, 2, 1), name = 'Res97406', )(Mul38011)
Con67319 = keras.layers.Concatenate(axis=4, name = 'Con67319', )([Res97406,in0Con67319])
Con51699 = keras.layers.Conv3D(4, (1, 2, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con51699', )(in0Con51699)
Zer87009 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (1, 0)), name = 'Zer87009', )(Con51699)
Mul11320 = keras.layers.Multiply(name = 'Mul11320', )([Con67319,Zer87009])
model = tf.keras.models.Model(inputs=[in0Up_7330,in0Con55526,in0Lea56894,in0Con67319,in0Con51699], outputs=Mul11320)
w = model.get_layer('Con51699').get_weights() 
w[0] = np.array([[[[[0.1876, 0.7018, 0.7596, 0.613], [0.9577, 0.0691, 0.0991, 0.3121]]], [[[0.3813, 0.9132, 0.0189, 0.3608], [0.2459, 0.2637, 0.725, 0.7211]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con51699').set_weights(w) 
in0Up_7330 = tf.constant([[[1.5542, 1.7743, 1.5998]]])
in0Con55526 = tf.constant([[[[0.0824], [0.5623], [0.6624]]]])
in0Lea56894 = tf.constant([[[[0.354, 0.7045], [0.3468, 0.0941]]]])
in0Con67319 = tf.constant([[[[[0.9437, 0.9733, 0.1854], [0.3961, 0.4345, 0.4637]], [[0.3181, 0.6961, 0.4564], [0.83, 0.192, 0.2184]], [[0.7569, 0.7092, 0.4288], [0.6546, 0.6097, 0.507]]]]])
in0Con51699 = tf.constant([[[[[0.7112, 0.4183]], [[0.5037, 0.5495]]]]])
print (np.array2string(model.predict([in0Up_7330,in0Con55526,in0Lea56894,in0Con67319,in0Con51699],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul11320.png')

LUp_7330 = up_sampling1D_layer([[[1.5542, 1.7743, 1.5998]]], 1, Up_7330), 
LRes73930 = reshape_layer(Up_7330, [1, 3, 1], Res73930), 
LCon55526 = concatenate_layer([Res73930,[[[[0.0824], [0.5623], [0.6624]]]]], 3, Con55526), 
LLea56894 = leaky_relu_layer([[[[0.354, 0.7045], [0.3468, 0.0941]]]], 1.3361781434269935, Lea56894), 
LZer79515 = zero_padding2D_layer(Lea56894, 0, 0, 1, 0, Zer79515), 
LMul38011 = multiply_layer([Con55526,Zer79515], Mul38011), 
LRes97406 = reshape_layer(Mul38011, [1, 3, 2, 1], Res97406), 
LCon67319 = concatenate_layer([Res97406,[[[[[0.9437, 0.9733, 0.1854], [0.3961, 0.4345, 0.4637]], [[0.3181, 0.6961, 0.4564], [0.83, 0.192, 0.2184]], [[0.7569, 0.7092, 0.4288], [0.6546, 0.6097, 0.507]]]]]], 4, Con67319), 
LCon51699 = conv3D_layer([[[[[0.7112, 0.4183]], [[0.5037, 0.5495]]]]], 1, 2, 1,[[[[[0.1876, 0.7018, 0.7596, 0.613], [0.9577, 0.0691, 0.0991, 0.3121]]], [[[0.3813, 0.9132, 0.0189, 0.3608], [0.2459, 0.2637, 0.725, 0.7211]]]]],[0, 0, 0, 0], 1, 1, 1, false, 1, 1, 1, Con51699), 
LZer87009 = zero_padding3D_layer(Con51699, 0, 0, 2, 0, 1, 0, Zer87009), 
LMul11320 = multiply_layer([Con67319,Zer87009], Mul11320), 
exec_layers([LUp_7330,LRes73930,LCon55526,LLea56894,LZer79515,LMul38011,LRes97406,LCon67319,LCon51699,LZer87009,LMul11320],["Up_7330","Res73930","Con55526","Lea56894","Zer79515","Mul38011","Res97406","Con67319","Con51699","Zer87009","Mul11320"],Mul11320,"Mul11320")

Actual (Unparsed): [[[[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0536808, 0.7416007, 0.6033521, 0.5802597]]]]]

Expected (Unparsed): [[[[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.053680797069897604,0.741600712728,0.6033520962560001,0.5802596950800001]]]]]

Actual:   [[[[[0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0.0537, 0.7417, 0.6034, 0.5803]]]]]

Expected: [[[[[0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0.0537, 0.7417, 0.6034, 0.5803]]]]]