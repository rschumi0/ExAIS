import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub4538 = tf.keras.layers.Input(shape=([3]))
in1Sub4538 = tf.keras.layers.Input(shape=([3]))
in0Con63553 = tf.keras.layers.Input(shape=([4, 1]))
in0Up_36311 = tf.keras.layers.Input(shape=([4, 1]))
in0Con82242 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Ave27146 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Ave27146 = tf.keras.layers.Input(shape=([2, 1, 2]))

Sub4538 = keras.layers.Subtract(name = 'Sub4538', )([in0Sub4538,in1Sub4538])
Res29394 = keras.layers.Reshape((3, 1), name = 'Res29394', )(Sub4538)
Zer89983 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer89983', )(Res29394)
Con63553 = keras.layers.Concatenate(axis=2, name = 'Con63553', )([Zer89983,in0Con63553])
Up_36311 = keras.layers.UpSampling1D(size=(1), name = 'Up_36311', )(in0Up_36311)
Res20116 = keras.layers.Reshape((4, 1, 1), name = 'Res20116', )(Up_36311)
Cro64448 = keras.layers.Cropping2D(cropping=((2, 1), (0, 0)), name = 'Cro64448', )(Res20116)
Zer69915 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer69915', )(Cro64448)
Con82242 = keras.layers.Concatenate(axis=3, name = 'Con82242', )([Zer69915,in0Con82242])
Ave27146 = keras.layers.Average(name = 'Ave27146', )([in0Ave27146,in1Ave27146])
Mul70677 = keras.layers.Multiply(name = 'Mul70677', )([Con82242,Ave27146])
Res4786 = keras.layers.Reshape((2, 2), name = 'Res4786', )(Mul70677)
Dot93043 = keras.layers.Dot(axes=(2, 2), name = 'Dot93043', )([Con63553,Res4786])
model = tf.keras.models.Model(inputs=[in0Sub4538,in1Sub4538,in0Con63553,in0Up_36311,in0Con82242,in0Ave27146,in1Ave27146], outputs=Dot93043)
in0Sub4538 = tf.constant([[0.8596, 0.1383, 0.7718]])
in1Sub4538 = tf.constant([[0.1171, 0.1467, 0.7443]])
in0Con63553 = tf.constant([[[0.282], [0.6246], [0.1915], [0.5664]]])
in0Up_36311 = tf.constant([[[1.8202], [1.211], [1.0883], [1.5325]]])
in0Con82242 = tf.constant([[[[0.0861]], [[0.4544]]]])
in0Ave27146 = tf.constant([[[[0.2512, 0.4667]], [[0.3626, 0.7001]]]])
in1Ave27146 = tf.constant([[[[0.9744, 0.212]], [[0.2521, 0.9628]]]])
print (np.array2string(model.predict([in0Sub4538,in1Sub4538,in0Con63553,in0Up_36311,in0Con82242,in0Ave27146,in1Ave27146],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Dot93043.png')

LSub4538 = subtract_layer([[0.8596, 0.1383, 0.7718]], [[0.1171, 0.1467, 0.7443]], Sub4538), 
LRes29394 = reshape_layer(Sub4538, [3, 1], Res29394), 
LZer89983 = zero_padding1D_layer(Res29394, 1, 0, Zer89983), 
LCon63553 = concatenate_layer([Zer89983,[[[0.282], [0.6246], [0.1915], [0.5664]]]], 2, Con63553), 
LUp_36311 = up_sampling1D_layer([[[1.8202], [1.211], [1.0883], [1.5325]]], 1, Up_36311), 
LRes20116 = reshape_layer(Up_36311, [4, 1, 1], Res20116), 
LCro64448 = cropping2D_layer(Res20116, 2, 1, 0, 0, Cro64448), 
LZer69915 = zero_padding2D_layer(Cro64448, 1, 0, 0, 0, Zer69915), 
LCon82242 = concatenate_layer([Zer69915,[[[[0.0861]], [[0.4544]]]]], 3, Con82242), 
LAve27146 = average_layer([[[[[0.2512, 0.4667]], [[0.3626, 0.7001]]]], [[[[0.9744, 0.212]], [[0.2521, 0.9628]]]]], Ave27146), 
LMul70677 = multiply_layer([Con82242,Ave27146], Mul70677), 
LRes4786 = reshape_layer(Mul70677, [2, 2], Res4786), 
LDot93043 = dot_layer(Con63553,Res4786, 2, 2, Dot93043), 
exec_layers([LSub4538,LRes29394,LZer89983,LCon63553,LUp_36311,LRes20116,LCro64448,LZer69915,LCon82242,LAve27146,LMul70677,LRes4786,LDot93043],["Sub4538","Res29394","Zer89983","Con63553","Up_36311","Res20116","Cro64448","Zer69915","Con82242","Ave27146","Mul70677","Res4786","Dot93043"],Dot93043,"Dot93043")

Actual (Unparsed): [[[0.0082395, 0.1065427], [0.0182496, 0.4843388], [0.0055953, 0.0695411], [0.0165491, 0.2231905]]]

Expected (Unparsed): [[[0.008239485869999999,0.10654266815999999],[0.018249584661,0.48433876186050007],[0.0055952537025,0.069541075878],[0.016549095024,0.22319053006950004]]]

Actual:   [[[0.0083, 0.1066], [0.0183, 0.4844], [0.0056, 0.0696], [0.0166, 0.2232]]]

Expected: [[[0.0083, 0.1066], [0.0183, 0.4844], [0.0056, 0.0696], [0.0166, 0.2232]]]