import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con98220 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Mul36136 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in1Mul36136 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in0Con15342 = tf.keras.layers.Input(shape=([2, 3, 1]))

Con98220 = keras.layers.Conv3D(3, (1, 2, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con98220', )(in0Con98220)
Res90851 = keras.layers.Reshape((2, 1, 3), name = 'Res90851', )(Con98220)
Zer96039 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer96039', )(Res90851)
Mul36136 = keras.layers.Multiply(name = 'Mul36136', )([in0Mul36136,in1Mul36136])
Res98031 = keras.layers.Reshape((1, 2, 2), name = 'Res98031', )(Mul36136)
Dep10850 = keras.layers.DepthwiseConv2D((1, 1),strides=(1, 1), padding='valid', name = 'Dep10850', )(Res98031)
Zer41105 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer41105', )(Dep10850)
Con15342 = keras.layers.Concatenate(axis=3, name = 'Con15342', )([Zer41105,in0Con15342])
Mul20811 = keras.layers.Multiply(name = 'Mul20811', )([Zer96039,Con15342])
Cro11801 = keras.layers.Cropping2D(cropping=((1, 0), (0, 0)), name = 'Cro11801', )(Mul20811)
Sof89100 = keras.layers.Softmax(axis=1, name = 'Sof89100', )(Cro11801)
model = tf.keras.models.Model(inputs=[in0Con98220,in0Mul36136,in1Mul36136,in0Con15342], outputs=Sof89100)
w = model.get_layer('Con98220').get_weights() 
w[0] = np.array([[[[[0.1968, 0.8399, 0.7718], [0.0124, 0.2718, 0.5266]]], [[[0.055, 0.272, 0.9914], [0.8931, 0.1341, 0.7554]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con98220').set_weights(w) 
w = model.get_layer('Dep10850').get_weights() 
w[0] = np.array([[[[0.5307], [0.2121]]]])
w[1] = np.array([0, 0])
model.get_layer('Dep10850').set_weights(w) 
in0Con98220 = tf.constant([[[[[0.4507, 0.2626]], [[0.6196, 0.2517]]], [[[0.6412, 0.6304]], [[0.1769, 0.3359]]]]])
in0Mul36136 = tf.constant([[[[[0.1251, 0.7681]], [[0.7341, 0.3519]]]]])
in1Mul36136 = tf.constant([[[[[0.7777, 0.3264]], [[0.9101, 0.3733]]]]])
in0Con15342 = tf.constant([[[[0.008], [0.158], [0.6635]], [[0.4562], [0.5215], [0.2991]]]])
print (np.array2string(model.predict([in0Con98220,in0Mul36136,in1Mul36136,in0Con15342],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sof89100.png')

LCon98220 = conv3D_layer([[[[[0.4507, 0.2626]], [[0.6196, 0.2517]]], [[[0.6412, 0.6304]], [[0.1769, 0.3359]]]]], 1, 2, 1,[[[[[0.1968, 0.8399, 0.7718], [0.0124, 0.2718, 0.5266]]], [[[0.055, 0.272, 0.9914], [0.8931, 0.1341, 0.7554]]]]],[0, 0, 0], 1, 1, 1, false, 1, 1, 1, Con98220), 
LRes90851 = reshape_layer(Con98220, [2, 1, 3], Res90851), 
LZer96039 = zero_padding2D_layer(Res90851, 0, 0, 2, 0, Zer96039), 
LMul36136 = multiply_layer([[[[[[0.1251, 0.7681]], [[0.7341, 0.3519]]]]], [[[[[0.7777, 0.3264]], [[0.9101, 0.3733]]]]]], Mul36136), 
LRes98031 = reshape_layer(Mul36136, [1, 2, 2], Res98031), 
LDep10850 = depthwise_conv2D_layer(Res98031, 1, 1,[[[[0.5307], [0.2121]]]],[0, 0], 1, 1, false, Dep10850), 
LZer41105 = zero_padding2D_layer(Dep10850, 1, 0, 1, 0, Zer41105), 
LCon15342 = concatenate_layer([Zer41105,[[[[0.008], [0.158], [0.6635]], [[0.4562], [0.5215], [0.2991]]]]], 3, Con15342), 
LMul20811 = multiply_layer([Zer96039,Con15342], Mul20811), 
LCro11801 = cropping2D_layer(Mul20811, 1, 0, 0, 0, Cro11801), 
LSof89100 = softmax_layer(Cro11801, 1, Sof89100), 
exec_layers([LCon98220,LRes90851,LZer96039,LMul36136,LRes98031,LDep10850,LZer41105,LCon15342,LMul20811,LCro11801,LSof89100],["Con98220","Res90851","Zer96039","Mul36136","Res98031","Dep10850","Zer41105","Con15342","Mul20811","Cro11801","Sof89100"],Sof89100,"Sof89100")

Actual (Unparsed): [[[[1.0000000, 1.0000000, 1.0000000], [1.0000000, 1.0000000, 1.0000000], [1.0000000, 1.0000000, 1.0000000]]]]

Expected (Unparsed): [[[[1.0,1.0,1.0],[1.0,1.0,1.0],[1.0,1.0,1.0]]]]

Actual:   [[[[1, 1, 1], [1, 1, 1], [1, 1, 1]]]]

Expected: [[[[1, 1, 1], [1, 1, 1], [1, 1, 1]]]]