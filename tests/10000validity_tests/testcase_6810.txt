import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave57381 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Con43241 = tf.keras.layers.Input(shape=([5, 4, 2]))
in0Den85584 = tf.keras.layers.Input(shape=([5, 4, 3]))

Ave57381 = keras.layers.AveragePooling2D(pool_size=(1, 2), strides=(1, 1), padding='valid', name = 'Ave57381', )(in0Ave57381)
Zer8821 = keras.layers.ZeroPadding2D(padding=((4, 0), (3, 0)), name = 'Zer8821', )(Ave57381)
Con43241 = keras.layers.Concatenate(axis=3, name = 'Con43241', )([Zer8821,in0Con43241])
Den85584 = keras.layers.Dense(4,name = 'Den85584', )(in0Den85584)
Add5771 = keras.layers.Add(name = 'Add5771', )([Con43241,Den85584])
model = tf.keras.models.Model(inputs=[in0Ave57381,in0Con43241,in0Den85584], outputs=Add5771)
w = model.get_layer('Den85584').get_weights() 
w[0] = np.array([[0.1857, 0.6039, 0.086, 0.5951], [0.621, 0.1631, 0.3865, 0.9151], [0.0691, 0.2998, 0.0077, 0.4708]])
w[1] = np.array([0.7174, 0.4429, 0.6915, 0.7619])
model.get_layer('Den85584').set_weights(w) 
in0Ave57381 = tf.constant([[[[1.1284, 1.3647], [1.6461, 1.3788]]]])
in0Con43241 = tf.constant([[[[0.9617, 0.4023], [0.3079, 0.5281], [0.5585, 0.1205], [0.6103, 0.1422]], [[0.0359, 0.7395], [0.665, 0.9713], [0.8364, 0.4213], [0.3368, 0.3043]], [[0.48, 0.8733], [0.8923, 0.6321], [0.0572, 0.4944], [0.249, 0.671]], [[0.145, 0.6754], [0.6445, 0.5203], [0.5069, 0.4197], [0.6364, 0.2545]], [[0.7329, 0.7246], [0.656, 0.661], [0.056, 0.9662], [0.4347, 0.2855]]]])
in0Den85584 = tf.constant([[[[0.4419, 0.7433, 0.4512], [0.293, 0.7854, 0.3483], [0.7147, 0.5504, 0.2889], [0.2972, 0.6794, 0.624]], [[0.626, 0.7774, 0.8801], [0.0168, 0.2125, 0.6757], [0.6401, 0.4338, 0.7676], [0.4449, 0.0623, 0.1754]], [[0.9991, 0.9176, 0.1505], [0.2322, 0.7393, 0.4465], [0.0211, 0.6131, 0.2008], [0.4435, 0.78, 0.0303]], [[0.1488, 0.1204, 0.5294], [0.1782, 0.693, 0.9895], [0.1401, 0.4968, 0.0914], [0.4765, 0.8835, 0.4876]], [[0.4276, 0.8145, 0.7478], [0.3643, 0.2731, 0.2452], [0.2837, 0.062, 0.4811], [0.4341, 0.1204, 0.4038]]]])
print (np.array2string(model.predict([in0Ave57381,in0Con43241,in0Den85584],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add5771.png')

LAve57381 = average_pooling2D_layer([[[[1.1284, 1.3647], [1.6461, 1.3788]]]], 1, 2, 1, 1, false, Ave57381), 
LZer8821 = zero_padding2D_layer(Ave57381, 4, 0, 3, 0, Zer8821), 
LCon43241 = concatenate_layer([Zer8821,[[[[0.9617, 0.4023], [0.3079, 0.5281], [0.5585, 0.1205], [0.6103, 0.1422]], [[0.0359, 0.7395], [0.665, 0.9713], [0.8364, 0.4213], [0.3368, 0.3043]], [[0.48, 0.8733], [0.8923, 0.6321], [0.0572, 0.4944], [0.249, 0.671]], [[0.145, 0.6754], [0.6445, 0.5203], [0.5069, 0.4197], [0.6364, 0.2545]], [[0.7329, 0.7246], [0.656, 0.661], [0.056, 0.9662], [0.4347, 0.2855]]]]], 3, Con43241), 
LDen85584 = dense_layer([[[[0.4419, 0.7433, 0.4512], [0.293, 0.7854, 0.3483], [0.7147, 0.5504, 0.2889], [0.2972, 0.6794, 0.624]], [[0.626, 0.7774, 0.8801], [0.0168, 0.2125, 0.6757], [0.6401, 0.4338, 0.7676], [0.4449, 0.0623, 0.1754]], [[0.9991, 0.9176, 0.1505], [0.2322, 0.7393, 0.4465], [0.0211, 0.6131, 0.2008], [0.4435, 0.78, 0.0303]], [[0.1488, 0.1204, 0.5294], [0.1782, 0.693, 0.9895], [0.1401, 0.4968, 0.0914], [0.4765, 0.8835, 0.4876]], [[0.4276, 0.8145, 0.7478], [0.3643, 0.2731, 0.2452], [0.2837, 0.062, 0.4811], [0.4341, 0.1204, 0.4038]]]], [[0.1857, 0.6039, 0.086, 0.5951], [0.621, 0.1631, 0.3865, 0.9151], [0.0691, 0.2998, 0.0077, 0.4708]],[0.7174, 0.4429, 0.6915, 0.7619], Den85584), 
LAdd5771 = add_layer([Con43241,Den85584], Add5771), 
exec_layers([LAve57381,LZer8821,LCon43241,LDen85584,LAdd5771],["Ave57381","Zer8821","Con43241","Den85584","Add5771"],Add5771,"Add5771")

Actual (Unparsed): [[[[1.2922281, 0.9662654, 1.9819631, 2.3197935], [1.2836110, 0.8523618, 1.3308370, 2.3470635], [1.2118812, 1.0508898, 1.5264183, 1.9474031], [1.2376159, 0.9202644, 1.5947521, 1.9964619]], [[1.3772285, 1.2115893, 1.0884779, 2.9996824], [0.8991731, 0.6902791, 1.4452790, 2.2557760], [1.1586975, 1.1303357, 1.7565228, 2.3224800], [0.8508264, 0.7743212, 1.0919909, 1.4705491]], [[1.4831620, 1.2410370, 1.6132338, 3.1403156], [1.2504780, 0.8375661, 1.8929467, 2.4189278], [1.1159286, 0.6158387, 0.9890239, 1.9244410], [1.2862317, 0.8470316, 1.2803443, 2.4248701]], [[0.8563821, 0.7111117, 0.8999078, 1.8852705], [1.2492192, 0.9601954, 1.6267889, 2.4882677], [1.0582451, 0.6359362, 1.4031656, 1.7626263], [1.3882327, 1.0209397, 1.7141062, 2.3380181]], [[1.3542828, 1.0581630, 1.7817359, 2.8383779], [0.9715889, 0.7809543, 1.4862710, 2.0050489], [0.8418291, 0.7685724, 0.7995657, 2.1801679], [2.2879334, 2.2174995, 1.2131765, 1.6060200]]]]

Expected (Unparsed): [[[[1.29222805,0.9662654,1.98196309,2.31979348],[1.2836110299999999,0.85236178,1.33083701,2.34706348],[1.21188118,1.05088979,1.5264183299999998,1.94740313],[1.2376158400000001,0.92026442,1.5947521,1.9964618600000001]],[[1.3772285100000001,1.2115893199999999,1.0884778700000002,2.99968242],[0.8991731300000001,0.6902791300000001,1.4452789400000001,2.25577599],[1.1586975300000002,1.13033565,1.75652282,2.32247997],[0.85082637,0.7743211600000001,1.0919909300000001,1.47054904]],[[1.48316202,1.24103695,1.6132338499999999,3.1403155700000003],[1.25047799,0.83756611,1.8929467,2.4189278499999998],[1.11592865,0.61583874,0.98902391,1.92444106],[1.28623168,0.8470315900000001,1.2803443100000003,2.42487009]],[[0.8563821,0.7111116799999999,0.89990778,1.88527044],[1.24921919,0.96019538,1.62678885,2.4882677199999996],[1.05824511,0.6359361899999999,1.40316558,1.76262631],[1.38823271,1.0209396800000001,1.7141062699999998,2.3380180800000003]],[[1.3542828,1.05816303,1.78173591,2.8383779500000004],[0.97158893,0.7809543400000001,1.48627099,2.0050489000000002],[0.8418291000000001,0.76857241,0.79956567,2.18016795],[2.28793335,2.21749947,1.2131764600000001,1.60601999]]]]

Actual:   [[[[1.2923, 0.9663, 1.982, 2.3198], [1.2837, 0.8524, 1.3309, 2.3471], [1.2119, 1.0509, 1.5265, 1.9475], [1.2377, 0.9203, 1.5948, 1.9965]], [[1.3773, 1.2116, 1.0885, 2.9997], [0.8992, 0.6903, 1.4453, 2.2558], [1.1587, 1.1304, 1.7566, 2.3225], [0.8509, 0.7744, 1.092, 1.4706]], [[1.4832, 1.2411, 1.6133, 3.1404], [1.2505, 0.8376, 1.893, 2.419], [1.116, 0.6159, 0.9891, 1.9245], [1.2863, 0.8471, 1.2804, 2.4249]], [[0.8564, 0.7112, 0.9, 1.8853], [1.2493, 0.9602, 1.6268, 2.4883], [1.0583, 0.636, 1.4032, 1.7627], [1.3883, 1.021, 1.7142, 2.3381]], [[1.3543, 1.0582, 1.7818, 2.8384], [0.9716, 0.781, 1.4863, 2.0051], [0.8419, 0.7686, 0.7996, 2.1802], [2.288, 2.2175, 1.2132, 1.6061]]]]

Expected: [[[[1.2923, 0.9663, 1.982, 2.3198], [1.2837, 0.8524, 1.3309, 2.3471], [1.2119, 1.0509, 1.5265, 1.9475], [1.2377, 0.9203, 1.5948, 1.9965]], [[1.3773, 1.2116, 1.0885, 2.9997], [0.8992, 0.6903, 1.4453, 2.2558], [1.1587, 1.1304, 1.7566, 2.3225], [0.8509, 0.7744, 1.092, 1.4706]], [[1.4832, 1.2411, 1.6133, 3.1404], [1.2505, 0.8376, 1.893, 2.419], [1.116, 0.6159, 0.9891, 1.9245], [1.2863, 0.8471, 1.2804, 2.4249]], [[0.8564, 0.7112, 0.9, 1.8853], [1.2493, 0.9602, 1.6268, 2.4883], [1.0583, 0.636, 1.4032, 1.7627], [1.3883, 1.021, 1.7142, 2.3381]], [[1.3543, 1.0582, 1.7818, 2.8384], [0.9716, 0.781, 1.4863, 2.0051], [0.8419, 0.7686, 0.7996, 2.1802], [2.288, 2.2175, 1.2132, 1.6061]]]]