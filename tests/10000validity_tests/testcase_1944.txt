import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro41094 = tf.keras.layers.Input(shape=([1, 4, 4]))
in0Ave92045 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in1Ave92045 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in0Ave86381 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Ave86381 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con31073 = tf.keras.layers.Input(shape=([2, 2, 3]))

Cro41094 = keras.layers.Cropping2D(cropping=((0, 0), (3, 0)), name = 'Cro41094', )(in0Cro41094)
Zer67295 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer67295', )(Cro41094)
Ave92045 = keras.layers.Average(name = 'Ave92045', )([in0Ave92045,in1Ave92045])
Res2295 = keras.layers.Reshape((2, 1, 4), name = 'Res2295', )(Ave92045)
Zer81483 = keras.layers.ZeroPadding2D(padding=((0, 0), (1, 0)), name = 'Zer81483', )(Res2295)
Ave86381 = keras.layers.Average(name = 'Ave86381', )([in0Ave86381,in1Ave86381])
Con31073 = keras.layers.Concatenate(axis=3, name = 'Con31073', )([Ave86381,in0Con31073])
Add10991 = keras.layers.Add(name = 'Add10991', )([Zer81483,Con31073])
Ave76267 = keras.layers.Average(name = 'Ave76267', )([Zer67295,Add10991])
model = tf.keras.models.Model(inputs=[in0Cro41094,in0Ave92045,in1Ave92045,in0Ave86381,in1Ave86381,in0Con31073], outputs=Ave76267)
in0Cro41094 = tf.constant([[[[1.7874, 1.7223, 1.5657, 1.6672], [1.5691, 1.4436, 1.5361, 1.5464], [1.6397, 1.1038, 1.1642, 1.5101], [1.0397, 1.2594, 1.6792, 1.7523]]]])
in0Ave92045 = tf.constant([[[[[0.3769, 0.5468], [0.8996, 0.2962]]], [[[0.7993, 0.5663], [0.434, 0.1348]]]]])
in1Ave92045 = tf.constant([[[[[0.0607, 0.0021], [0.6137, 0.6309]]], [[[0.6561, 0.2852], [0.3657, 0.3684]]]]])
in0Ave86381 = tf.constant([[[[0.4382], [0.4169]], [[0.2359], [0.6619]]]])
in1Ave86381 = tf.constant([[[[0.9552], [0.5365]], [[0.6854], [0.0985]]]])
in0Con31073 = tf.constant([[[[0.6821, 0.035, 0.5891], [0.3486, 0.6013, 0.0684]], [[0.1631, 0.2335, 0.0254], [0.2792, 0.8964, 0.0216]]]])
print (np.array2string(model.predict([in0Cro41094,in0Ave92045,in1Ave92045,in0Ave86381,in1Ave86381,in0Con31073],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave76267.png')

LCro41094 = cropping2D_layer([[[[1.7874, 1.7223, 1.5657, 1.6672], [1.5691, 1.4436, 1.5361, 1.5464], [1.6397, 1.1038, 1.1642, 1.5101], [1.0397, 1.2594, 1.6792, 1.7523]]]], 0, 0, 3, 0, Cro41094), 
LZer67295 = zero_padding2D_layer(Cro41094, 1, 0, 1, 0, Zer67295), 
LAve92045 = average_layer([[[[[[0.3769, 0.5468], [0.8996, 0.2962]]], [[[0.7993, 0.5663], [0.434, 0.1348]]]]], [[[[[0.0607, 0.0021], [0.6137, 0.6309]]], [[[0.6561, 0.2852], [0.3657, 0.3684]]]]]], Ave92045), 
LRes2295 = reshape_layer(Ave92045, [2, 1, 4], Res2295), 
LZer81483 = zero_padding2D_layer(Res2295, 0, 0, 1, 0, Zer81483), 
LAve86381 = average_layer([[[[[0.4382], [0.4169]], [[0.2359], [0.6619]]]], [[[[0.9552], [0.5365]], [[0.6854], [0.0985]]]]], Ave86381), 
LCon31073 = concatenate_layer([Ave86381,[[[[0.6821, 0.035, 0.5891], [0.3486, 0.6013, 0.0684]], [[0.1631, 0.2335, 0.0254], [0.2792, 0.8964, 0.0216]]]]], 3, Con31073), 
LAdd10991 = add_layer([Zer81483,Con31073], Add10991), 
LAve76267 = average_layer([Zer67295,Add10991], Ave76267), 
exec_layers([LCro41094,LZer67295,LAve92045,LRes2295,LZer81483,LAve86381,LCon31073,LAdd10991,LAve76267],["Cro41094","Zer67295","Ave92045","Res2295","Zer81483","Ave86381","Con31073","Add10991","Ave76267"],Ave76267,"Ave76267")

Actual (Unparsed): [[[[0.3483500, 0.3410500, 0.0175000, 0.2945500], [0.3477500, 0.3115250, 0.6789750, 0.2659750]], [[0.2303250, 0.0815500, 0.1167500, 0.0127000], [1.0738000, 0.9821750, 1.4877250, 1.0127500]]]]

Expected (Unparsed): [[[[0.34835,0.34105,0.0175,0.29455],[0.34775,0.311525,0.678975,0.265975]],[[0.230325,0.08155,0.11675,0.0127],[1.0738,0.982175,1.4877250000000002,1.01275]]]]

Actual:   [[[[0.3484, 0.3411, 0.0175, 0.2946], [0.3478, 0.3116, 0.679, 0.266]], [[0.2304, 0.0816, 0.1168, 0.0127], [1.0738, 0.9822, 1.4878, 1.0128]]]]

Expected: [[[[0.3484, 0.3411, 0.0175, 0.2946], [0.3478, 0.3116, 0.679, 0.266]], [[0.2304, 0.0816, 0.1168, 0.0127], [1.0738, 0.9822, 1.4878, 1.0128]]]]