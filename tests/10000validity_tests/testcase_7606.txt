import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul56990 = tf.keras.layers.Input(shape=([2, 2]))
in1Mul56990 = tf.keras.layers.Input(shape=([2, 2]))

Mul56990 = keras.layers.Multiply(name = 'Mul56990', )([in0Mul56990,in1Mul56990])
Zer71084 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer71084', )(Mul56990)
Den87775 = keras.layers.Dense(1,name = 'Den87775', )(Zer71084)
model = tf.keras.models.Model(inputs=[in0Mul56990,in1Mul56990], outputs=Den87775)
w = model.get_layer('Den87775').get_weights() 
w[0] = np.array([[0.2968], [0.9827]])
w[1] = np.array([0.3036])
model.get_layer('Den87775').set_weights(w) 
in0Mul56990 = tf.constant([[[0.6404, 0.8158], [0.2346, 0.4789]]])
in1Mul56990 = tf.constant([[[0.8224, 0.6926], [0.3757, 0.0898]]])
print (np.array2string(model.predict([in0Mul56990,in1Mul56990],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Den87775.png')

LMul56990 = multiply_layer([[[[0.6404, 0.8158], [0.2346, 0.4789]]], [[[0.8224, 0.6926], [0.3757, 0.0898]]]], Mul56990), 
LZer71084 = zero_padding1D_layer(Mul56990, 1, 1, Zer71084), 
LDen87775 = dense_layer(Zer71084, [[0.2968], [0.9827]],[0.3036], Den87775), 
exec_layers([LMul56990,LZer71084,LDen87775],["Mul56990","Zer71084","Den87775"],Den87775,"Den87775")

Actual (Unparsed): [[[0.3036000], [1.0151624], [0.3720209], [0.3036000]]]

Expected (Unparsed): [[[0.3036],[1.015162340844],[0.37202095019000003],[0.3036]]]

Actual:   [[[0.3036], [1.0152], [0.3721], [0.3036]]]

Expected: [[[0.3036], [1.0152], [0.3721], [0.3036]]]