import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub59619 = tf.keras.layers.Input(shape=([2]))
in1Sub59619 = tf.keras.layers.Input(shape=([2]))
in0Con51857 = tf.keras.layers.Input(shape=([16, 1, 3, 1]))
in0Con48336 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Glo57727 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con5530 = tf.keras.layers.Input(shape=([15]))
in0Con36722 = tf.keras.layers.Input(shape=([16, 1, 3, 1]))
in0Con21630 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))

Sub59619 = keras.layers.Subtract(name = 'Sub59619', )([in0Sub59619,in1Sub59619])
Sof83265 = keras.layers.Softmax(axis=1, name = 'Sof83265', )(Sub59619)
Res41888 = keras.layers.Reshape((2, 1), name = 'Res41888', )(Sof83265)
Res87551 = keras.layers.Reshape((2, 1, 1), name = 'Res87551', )(Res41888)
Res56330 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res56330', )(Res87551)
Zer58572 = keras.layers.ZeroPadding3D(padding=((14, 0), (0, 0), (2, 0)), name = 'Zer58572', )(Res56330)
Con51857 = keras.layers.Concatenate(axis=4, name = 'Con51857', )([Zer58572,in0Con51857])
Con48336 = keras.layers.Conv2D(4, (2, 2),strides=(1, 1), padding='same', dilation_rate=(1, 1), name = 'Con48336', )(in0Con48336)
Res72415 = keras.layers.Reshape((2, 8), name = 'Res72415', )(Con48336)
Fla21383 = keras.layers.Flatten(name = 'Fla21383', )(Res72415)
Glo57727 = keras.layers.GlobalMaxPool2D(name = 'Glo57727', )(in0Glo57727)
Con5530 = keras.layers.Concatenate(axis=1, name = 'Con5530', )([Glo57727,in0Con5530])
Mul99389 = keras.layers.Multiply(name = 'Mul99389', )([Fla21383,Con5530])
Res54180 = keras.layers.Reshape((16, 1), name = 'Res54180', )(Mul99389)
Res1389 = keras.layers.Reshape((16, 1, 1), name = 'Res1389', )(Res54180)
Res98319 = keras.layers.Reshape((16, 1, 1, 1), name = 'Res98319', )(Res1389)
Zer16991 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer16991', )(Res98319)
Con36722 = keras.layers.Concatenate(axis=4, name = 'Con36722', )([Zer16991,in0Con36722])
Con21630 = keras.layers.Conv3D(2, (1, 1, 1),strides=(1, 1, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con21630', )(in0Con21630)
Zer77268 = keras.layers.ZeroPadding3D(padding=((15, 0), (0, 0), (1, 0)), name = 'Zer77268', )(Con21630)
Sub85000 = keras.layers.Subtract(name = 'Sub85000', )([Con36722,Zer77268])
Ave81090 = keras.layers.Average(name = 'Ave81090', )([Con51857,Sub85000])
model = tf.keras.models.Model(inputs=[in0Sub59619,in1Sub59619,in0Con51857,in0Con48336,in0Glo57727,in0Con5530,in0Con36722,in0Con21630], outputs=Ave81090)
w = model.get_layer('Con48336').get_weights() 
w[0] = np.array([[[[0.9022, 0.4503, 0.8598, 0.7793], [0.1855, 0.6723, 0.7049, 0.0772]], [[0.5118, 0.2609, 0.1219, 0.7469], [0.5735, 0.9767, 0.6716, 0.9785]]], [[[0.6998, 0.5341, 0.9567, 0.1923], [0.6166, 0.1505, 0.0993, 0.0136]], [[0.2242, 0.7875, 0.4955, 0.093], [0.4543, 0.4513, 0.8575, 0.9018]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con48336').set_weights(w) 
w = model.get_layer('Con21630').get_weights() 
w[0] = np.array([[[[[0.0841, 0.501]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con21630').set_weights(w) 
in0Sub59619 = tf.constant([[0.3955, 0.4028]])
in1Sub59619 = tf.constant([[0.7069, 0.8082]])
in0Con51857 = tf.constant([[[[[0.0835], [0.9431], [0.8752]]], [[[0.9579], [0.7644], [0.13]]], [[[0.7826], [0.448], [0.2364]]], [[[0.4041], [0.8876], [0.316]]], [[[0.9195], [0.4956], [0.2817]]], [[[0.1862], [0.8813], [0.4065]]], [[[0.83], [0.2257], [0.7522]]], [[[0.4327], [0.8928], [0.7549]]], [[[0.2824], [0.5167], [0.556]]], [[[0.0267], [0.6861], [0.7209]]], [[[0.0765], [0.7097], [0.3245]]], [[[0.4555], [0.851], [0.789]]], [[[0.3358], [0.8539], [0.9813]]], [[[0.1798], [0.5384], [0.346]]], [[[0.4291], [0.3389], [0.3041]]], [[[0.0501], [0.8264], [0.5558]]]]])
in0Con48336 = tf.constant([[[[0.8543, 0.5683], [0.0288, 0.0911]], [[0.2884, 0.56], [0.8345, 0.1934]]]])
in0Glo57727 = tf.constant([[[[1.6967], [1.6645]], [[1.4355], [1.0123]]]])
in0Con5530 = tf.constant([[0.8568, 0.2073, 0.1842, 0.127, 0.9375, 0.6809, 0.6164, 0.182, 0.5724, 0.3053, 0.608, 0.9701, 0.8667, 0.0418, 0.2367]])
in0Con36722 = tf.constant([[[[[0.1211], [0.9124], [0.2119]]], [[[0.1792], [0.7311], [0.1766]]], [[[0.9095], [0.6454], [0.15]]], [[[0.4113], [0.1322], [0.9233]]], [[[0.6325], [0.6063], [0.203]]], [[[0.224], [0.8518], [0.1506]]], [[[0.5961], [0.3091], [0.277]]], [[[0.9096], [0.0211], [0.6038]]], [[[0.8068], [0.4113], [0.4563]]], [[[0.6367], [0.1571], [0.9137]]], [[[0.0749], [0.6355], [0.3976]]], [[[0.0666], [0.0446], [0.8191]]], [[[0.4662], [0.5989], [0.2576]]], [[[0.9047], [0.4498], [0.9648]]], [[[0.146], [0.6215], [0.9128]]], [[[0.164], [0.8739], [0.567]]]]])
in0Con21630 = tf.constant([[[[[0.8104], [0.0901]]]]])
print (np.array2string(model.predict([in0Sub59619,in1Sub59619,in0Con51857,in0Con48336,in0Glo57727,in0Con5530,in0Con36722,in0Con21630],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave81090.png')

LSub59619 = subtract_layer([[0.3955, 0.4028]], [[0.7069, 0.8082]], Sub59619), 
LSof83265 = softmax_layer(Sub59619, 1, Sof83265), 
LRes41888 = reshape_layer(Sof83265, [2, 1], Res41888), 
LRes87551 = reshape_layer(Res41888, [2, 1, 1], Res87551), 
LRes56330 = reshape_layer(Res87551, [2, 1, 1, 1], Res56330), 
LZer58572 = zero_padding3D_layer(Res56330, 14, 0, 0, 0, 2, 0, Zer58572), 
LCon51857 = concatenate_layer([Zer58572,[[[[[0.0835], [0.9431], [0.8752]]], [[[0.9579], [0.7644], [0.13]]], [[[0.7826], [0.448], [0.2364]]], [[[0.4041], [0.8876], [0.316]]], [[[0.9195], [0.4956], [0.2817]]], [[[0.1862], [0.8813], [0.4065]]], [[[0.83], [0.2257], [0.7522]]], [[[0.4327], [0.8928], [0.7549]]], [[[0.2824], [0.5167], [0.556]]], [[[0.0267], [0.6861], [0.7209]]], [[[0.0765], [0.7097], [0.3245]]], [[[0.4555], [0.851], [0.789]]], [[[0.3358], [0.8539], [0.9813]]], [[[0.1798], [0.5384], [0.346]]], [[[0.4291], [0.3389], [0.3041]]], [[[0.0501], [0.8264], [0.5558]]]]]], 4, Con51857), 
LCon48336 = conv2D_layer([[[[0.8543, 0.5683], [0.0288, 0.0911]], [[0.2884, 0.56], [0.8345, 0.1934]]]], 2, 2,[[[[0.9022, 0.4503, 0.8598, 0.7793], [0.1855, 0.6723, 0.7049, 0.0772]], [[0.5118, 0.2609, 0.1219, 0.7469], [0.5735, 0.9767, 0.6716, 0.9785]]], [[[0.6998, 0.5341, 0.9567, 0.1923], [0.6166, 0.1505, 0.0993, 0.0136]], [[0.2242, 0.7875, 0.4955, 0.093], [0.4543, 0.4513, 0.8575, 0.9018]]]],[0, 0, 0, 0], 1, 1, true, 1, 1, Con48336), 
LRes72415 = reshape_layer(Con48336, [2, 8], Res72415), 
LFla21383 = flatten_layer(Res72415, Fla21383), 
LGlo57727 = global_max_pool2D_layer([[[[1.6967], [1.6645]], [[1.4355], [1.0123]]]], Glo57727), 
LCon5530 = concatenate_layer([Glo57727,[[0.8568, 0.2073, 0.1842, 0.127, 0.9375, 0.6809, 0.6164, 0.182, 0.5724, 0.3053, 0.608, 0.9701, 0.8667, 0.0418, 0.2367]]], 1, Con5530), 
LMul99389 = multiply_layer([Fla21383,Con5530], Mul99389), 
LRes54180 = reshape_layer(Mul99389, [16, 1], Res54180), 
LRes1389 = reshape_layer(Res54180, [16, 1, 1], Res1389), 
LRes98319 = reshape_layer(Res1389, [16, 1, 1, 1], Res98319), 
LZer16991 = zero_padding3D_layer(Res98319, 0, 0, 0, 0, 2, 0, Zer16991), 
LCon36722 = concatenate_layer([Zer16991,[[[[[0.1211], [0.9124], [0.2119]]], [[[0.1792], [0.7311], [0.1766]]], [[[0.9095], [0.6454], [0.15]]], [[[0.4113], [0.1322], [0.9233]]], [[[0.6325], [0.6063], [0.203]]], [[[0.224], [0.8518], [0.1506]]], [[[0.5961], [0.3091], [0.277]]], [[[0.9096], [0.0211], [0.6038]]], [[[0.8068], [0.4113], [0.4563]]], [[[0.6367], [0.1571], [0.9137]]], [[[0.0749], [0.6355], [0.3976]]], [[[0.0666], [0.0446], [0.8191]]], [[[0.4662], [0.5989], [0.2576]]], [[[0.9047], [0.4498], [0.9648]]], [[[0.146], [0.6215], [0.9128]]], [[[0.164], [0.8739], [0.567]]]]]], 4, Con36722), 
LCon21630 = conv3D_layer([[[[[0.8104], [0.0901]]]]], 1, 1, 1,[[[[[0.0841, 0.501]]]]],[0, 0], 1, 1, 1, true, 1, 1, 1, Con21630), 
LZer77268 = zero_padding3D_layer(Con21630, 15, 0, 0, 0, 1, 0, Zer77268), 
LSub85000 = subtract_layer(Con36722,Zer77268, Sub85000), 
LAve81090 = average_layer([Con51857,Sub85000], Ave81090), 
exec_layers([LSub59619,LSof83265,LRes41888,LRes87551,LRes56330,LZer58572,LCon51857,LCon48336,LRes72415,LFla21383,LGlo57727,LCon5530,LMul99389,LRes54180,LRes1389,LRes98319,LZer16991,LCon36722,LCon21630,LZer77268,LSub85000,LAve81090],["Sub59619","Sof83265","Res41888","Res87551","Res56330","Zer58572","Con51857","Con48336","Res72415","Fla21383","Glo57727","Con5530","Mul99389","Res54180","Res1389","Res98319","Zer16991","Con36722","Con21630","Zer77268","Sub85000","Ave81090"],Ave81090,"Ave81090")

Actual (Unparsed): [[[[[0.0000000, 0.1023000], [0.0000000, 0.9277500], [1.4975326, 0.5435500]]], [[[0.0000000, 0.5685500], [0.0000000, 0.7477500], [0.7908330, 0.1533000]]], [[[0.0000000, 0.8460500], [0.0000000, 0.5467000], [0.2187710, 0.1932000]]], [[[0.0000000, 0.4077000], [0.0000000, 0.5099000], [0.1045678, 0.6196500]]], [[[0.0000000, 0.7760000], [0.0000000, 0.5509500], [0.0473784, 0.2423500]]], [[[0.0000000, 0.2051000], [0.0000000, 0.8665500], [0.2573570, 0.2785500]]], [[[0.0000000, 0.7130500], [0.0000000, 0.2674000], [0.3086347, 0.5146000]]], [[[0.0000000, 0.6711500], [0.0000000, 0.4569500], [0.0593536, 0.6793500]]], [[[0.0000000, 0.5446000], [0.0000000, 0.4640000], [0.0820899, 0.5061500]]], [[[0.0000000, 0.3317000], [0.0000000, 0.4216000], [0.2612918, 0.8173000]]], [[[0.0000000, 0.0757000], [0.0000000, 0.6726000], [0.1334655, 0.3610500]]], [[[0.0000000, 0.2610500], [0.0000000, 0.4478000], [0.3284757, 0.8040500]]], [[[0.0000000, 0.4010000], [0.0000000, 0.7264000], [0.3825888, 0.6194500]]], [[[0.0000000, 0.5422500], [0.0000000, 0.4941000], [0.2191876, 0.6554000]]], [[[0.0000000, 0.2875500], [0.0000000, 0.4802000], [0.2795864, 0.6084500]]], [[[0.0000000, 0.1070500], [-0.0340773, 0.6471448], [0.3132030, 0.5388299]]]]]

Expected (Unparsed): [[[[[0,0.1023],[0,0.9277500000000001],[1.4975325650940001,0.54355]]],[[[0,0.56855],[0,0.7477499999999999],[0.7908329459519999,0.1533]]],[[[0,0.84605],[0,0.5467],[0.21877103049299998,0.19319999999999998]]],[[[0,0.4077],[0,0.5099],[0.104567831196,0.61965]]],[[[0,0.776],[0,0.5509499999999999],[0.047378362825,0.24235]]],[[[0,0.2051],[0,0.8665499999999999],[0.257357025,0.27854999999999996]]],[[[0,0.71305],[0,0.26739999999999997],[0.30863474323,0.5146]]],[[[0,0.6711499999999999],[0,0.45695],[0.05935357207,0.67935]]],[[[0,0.5446],[0,0.464],[0.08208986968000001,0.50615]]],[[[0,0.3317],[0,0.42160000000000003],[0.26129182797000006,0.8172999999999999]]],[[[0,0.07569999999999999],[0,0.6726],[0.1334654532715,0.36105]]],[[[0,0.26105],[0,0.4478],[0.32847566928,0.80405]]],[[[0,0.401],[0,0.7263999999999999],[0.38258881407999995,0.61945]]],[[[0,0.54225],[0,0.4941],[0.21918763696950003,0.6554]]],[[[0,0.28755],[0,0.4802],[0.2795864186053376,0.6084499999999999]]],[[[0,0.10705],[-0.03407732,0.6471448],[0.3132030259341624,0.53882995]]]]]

Actual:   [[[[[0, 0.1023], [0, 0.9278], [1.4976, 0.5436]]], [[[0, 0.5686], [0, 0.7478], [0.7909, 0.1533]]], [[[0, 0.8461], [0, 0.5467], [0.2188, 0.1932]]], [[[0, 0.4077], [0, 0.5099], [0.1046, 0.6197]]], [[[0, 0.776], [0, 0.551], [0.0474, 0.2424]]], [[[0, 0.2051], [0, 0.8666], [0.2574, 0.2786]]], [[[0, 0.7131], [0, 0.2674], [0.3087, 0.5146]]], [[[0, 0.6712], [0, 0.457], [0.0594, 0.6794]]], [[[0, 0.5446], [0, 0.464], [0.0821, 0.5062]]], [[[0, 0.3317], [0, 0.4216], [0.2613, 0.8173]]], [[[0, 0.0757], [0, 0.6726], [0.1335, 0.3611]]], [[[0, 0.2611], [0, 0.4478], [0.3285, 0.8041]]], [[[0, 0.401], [0, 0.7264], [0.3826, 0.6195]]], [[[0, 0.5423], [0, 0.4941], [0.2192, 0.6554]]], [[[0, 0.2876], [0, 0.4802], [0.2796, 0.6085]]], [[[0, 0.1071], [-0.034, 0.6472], [0.3133, 0.5389]]]]]

Expected: [[[[[0, 0.1023], [0, 0.9278], [1.4976, 0.5436]]], [[[0, 0.5686], [0, 0.7478], [0.7909, 0.1533]]], [[[0, 0.8461], [0, 0.5467], [0.2188, 0.1932]]], [[[0, 0.4077], [0, 0.5099], [0.1046, 0.6197]]], [[[0, 0.776], [0, 0.551], [0.0474, 0.2424]]], [[[0, 0.2051], [0, 0.8666], [0.2574, 0.2786]]], [[[0, 0.7131], [0, 0.2674], [0.3087, 0.5146]]], [[[0, 0.6712], [0, 0.457], [0.0594, 0.6794]]], [[[0, 0.5446], [0, 0.464], [0.0821, 0.5062]]], [[[0, 0.3317], [0, 0.4217], [0.2613, 0.8173]]], [[[0, 0.0757], [0, 0.6726], [0.1335, 0.3611]]], [[[0, 0.2611], [0, 0.4478], [0.3285, 0.8041]]], [[[0, 0.401], [0, 0.7264], [0.3826, 0.6195]]], [[[0, 0.5423], [0, 0.4941], [0.2192, 0.6554]]], [[[0, 0.2876], [0, 0.4802], [0.2796, 0.6085]]], [[[0, 0.1071], [-0.034, 0.6472], [0.3133, 0.5389]]]]]