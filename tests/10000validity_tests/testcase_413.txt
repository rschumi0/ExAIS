import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Lea74577 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Con45057 = tf.keras.layers.Input(shape=([2, 2]))
in0Sep9567 = tf.keras.layers.Input(shape=([1, 1]))
in0Loc81965 = tf.keras.layers.Input(shape=([2, 2, 1]))

Lea74577 = keras.layers.LeakyReLU(alpha=0.879692057564334, name = 'Lea74577', input_shape=(2, 1, 2))(in0Lea74577)
Dep34496 = keras.layers.DepthwiseConv2D((1, 1),strides=(1, 1), padding='same', name = 'Dep34496', )(Lea74577)
Res32921 = keras.layers.Reshape((2, 2), name = 'Res32921', )(Dep34496)
PRe96065 = keras.layers.PReLU(name = 'PRe96065', )(Res32921)
Con45057 = keras.layers.Concatenate(axis=2, name = 'Con45057', )([PRe96065,in0Con45057])
Sep9567 = keras.layers.SeparableConv1D(4, (1),strides=(1), padding='same', name = 'Sep9567', )(in0Sep9567)
Zer92812 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer92812', )(Sep9567)
Min58599 = keras.layers.Minimum(name = 'Min58599', )([Con45057,Zer92812])
Res90308 = keras.layers.Reshape((2, 4, 1), name = 'Res90308', )(Min58599)
Res74650 = keras.layers.Reshape((2, 4, 1, 1), name = 'Res74650', )(Res90308)
Zer92384 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (4, 0)), name = 'Zer92384', )(Res74650)
Loc81965 = keras.layers.LocallyConnected2D(3, (2, 1),strides=(1, 1), name = 'Loc81965', )(in0Loc81965)
Res14639 = keras.layers.Reshape((1, 2, 3, 1), name = 'Res14639', )(Loc81965)
Zer75655 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer75655', )(Res14639)
Max7218 = keras.layers.Maximum(name = 'Max7218', )([Zer92384,Zer75655])
model = tf.keras.models.Model(inputs=[in0Lea74577,in0Con45057,in0Sep9567,in0Loc81965], outputs=Max7218)
w = model.get_layer('Dep34496').get_weights() 
w[0] = np.array([[[[0.9314], [0.6929]]]])
w[1] = np.array([0, 0])
model.get_layer('Dep34496').set_weights(w) 
w = model.get_layer('PRe96065').get_weights() 
w[0] = np.array([[0.0535, 0.5791], [0.5225, 0.4188]])
model.get_layer('PRe96065').set_weights(w) 
w = model.get_layer('Sep9567').get_weights() 
w[0] = np.array([[[0.1857]]])
w[1] = np.array([[[0.5942, 0.6271, 0.913, 0.0508]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep9567').set_weights(w) 
w = model.get_layer('Loc81965').get_weights() 
w[0] = np.array([[[0.7049, 0.7446, 0.5155], [0.873, 0.2595, 0.6526]], [[0.4115, 0.9685, 0.2621], [0.4535, 0.5002, 0.1796]]])
w[1] = np.array([[[0, 0, 0], [0, 0, 0]]])
model.get_layer('Loc81965').set_weights(w) 
in0Lea74577 = tf.constant([[[[0.2537, 0.3225]], [[0.9497, 0.7322]]]])
in0Con45057 = tf.constant([[[0.4068, 0.8142], [0.732, 0.6546]]])
in0Sep9567 = tf.constant([[[0.0546]]])
in0Loc81965 = tf.constant([[[[0.0778], [0.9586]], [[0.333], [0.9666]]]])
print (np.array2string(model.predict([in0Lea74577,in0Con45057,in0Sep9567,in0Loc81965],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max7218.png')

LLea74577 = leaky_relu_layer([[[[0.2537, 0.3225]], [[0.9497, 0.7322]]]], 0.879692057564334, Lea74577), 
LDep34496 = depthwise_conv2D_layer(Lea74577, 1, 1,[[[[0.9314], [0.6929]]]],[0, 0], 1, 1, true, Dep34496), 
LRes32921 = reshape_layer(Dep34496, [2, 2], Res32921), 
LPRe96065 = prelu_layer(Res32921, [[0.0535, 0.5791], [0.5225, 0.4188]], PRe96065), 
LCon45057 = concatenate_layer([PRe96065,[[[0.4068, 0.8142], [0.732, 0.6546]]]], 2, Con45057), 
LSep9567 = separable_conv1D_layer([[[0.0546]]], 1,[[[[0.1857]]],[[[0.5942, 0.6271, 0.913, 0.0508]]]],[0, 0, 0, 0], 1, true, Sep9567), 
LZer92812 = zero_padding1D_layer(Sep9567, 1, 0, Zer92812), 
LMin58599 = minimum_layer([Con45057,Zer92812], Min58599), 
LRes90308 = reshape_layer(Min58599, [2, 4, 1], Res90308), 
LRes74650 = reshape_layer(Res90308, [2, 4, 1, 1], Res74650), 
LZer92384 = zero_padding3D_layer(Res74650, 1, 0, 0, 0, 4, 0, Zer92384), 
LLoc81965 = locally_connected2D_layer([[[[0.0778], [0.9586]], [[0.333], [0.9666]]]], 2, 1,[[[0.7049, 0.7446, 0.5155], [0.873, 0.2595, 0.6526]], [[0.4115, 0.9685, 0.2621], [0.4535, 0.5002, 0.1796]]],[[[0, 0, 0], [0, 0, 0]]], 1, 1, Loc81965), 
LRes14639 = reshape_layer(Loc81965, [1, 2, 3, 1], Res14639), 
LZer75655 = zero_padding3D_layer(Res14639, 1, 1, 1, 1, 1, 1, Zer75655), 
LMax7218 = maximum_layer([Zer92384,Zer75655], Max7218), 
exec_layers([LLea74577,LDep34496,LRes32921,LPRe96065,LCon45057,LSep9567,LZer92812,LMin58599,LRes90308,LRes74650,LZer92384,LLoc81965,LRes14639,LZer75655,LMax7218],["Lea74577","Dep34496","Res32921","PRe96065","Con45057","Sep9567","Zer92812","Min58599","Res90308","Res74650","Zer92384","Loc81965","Res14639","Zer75655","Max7218"],Max7218,"Max7218")

Actual (Unparsed): [[[[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.3455502], [0.1443434], [0.2574217], [0.0000000]], [[0.0000000], [0.8328170], [1.4118974], [0.4248504], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0060247]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0063583]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0092571]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0005151]]]]]

Expected (Unparsed): [[[[[0],[0],[0],[0],[0]],[[0],[0],[0],[0],[0]],[[0],[0],[0],[0],[0]],[[0],[0],[0],[0],[0]]],[[[0],[0],[0],[0],[0]],[[0],[0.34555022],[0.14434338],[0.2574217],[0]],[[0],[0.8328169999999999],[1.41189742],[0.42485042000000006],[0]],[[0],[0],[0],[0],[0]]],[[[0],[0],[0],[0],[0.006024724524]],[[0],[0],[0],[0],[0.006358304862]],[[0],[0],[0],[0],[0.00925710786]],[[0],[0],[0],[0],[0.000515072376]]]]]

Actual:   [[[[[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]]], [[[0], [0], [0], [0], [0]], [[0], [0.3456], [0.1444], [0.2575], [0]], [[0], [0.8329], [1.4119], [0.4249], [0]], [[0], [0], [0], [0], [0]]], [[[0], [0], [0], [0], [0.0061]], [[0], [0], [0], [0], [0.0064]], [[0], [0], [0], [0], [0.0093]], [[0], [0], [0], [0], [0.0006]]]]]

Expected: [[[[[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]]], [[[0], [0], [0], [0], [0]], [[0], [0.3456], [0.1444], [0.2575], [0]], [[0], [0.8329], [1.4119], [0.4249], [0]], [[0], [0], [0], [0], [0]]], [[[0], [0], [0], [0], [0.0061]], [[0], [0], [0], [0], [0.0064]], [[0], [0], [0], [0], [0.0093]], [[0], [0], [0], [0], [0.0006]]]]]