import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con32217 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Min26863 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Min26863 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con59597 = tf.keras.layers.Input(shape=([2, 3, 11]))

Con32217 = keras.layers.Conv3DTranspose(4, (1, 2, 2),strides=(1, 1, 1), padding='valid', name = 'Con32217', )(in0Con32217)
Sof47264 = keras.layers.Softmax(axis=1, name = 'Sof47264', )(Con32217)
Res44029 = keras.layers.Reshape((2, 3, 12), name = 'Res44029', )(Sof47264)
Min26863 = keras.layers.Minimum(name = 'Min26863', )([in0Min26863,in1Min26863])
Zer80326 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer80326', )(Min26863)
Con59597 = keras.layers.Concatenate(axis=3, name = 'Con59597', )([Zer80326,in0Con59597])
Min73199 = keras.layers.Minimum(name = 'Min73199', )([Res44029,Con59597])
model = tf.keras.models.Model(inputs=[in0Con32217,in0Min26863,in1Min26863,in0Con59597], outputs=Min73199)
w = model.get_layer('Con32217').get_weights() 
w[0] = np.array([[[[[0.6652], [0.5666], [0.4241], [0.2982]], [[0.2799], [0.8024], [0.1617], [0.7133]]], [[[0.2926], [0.5987], [0.7206], [0.9499]], [[0.7983], [0.2199], [0.9875], [0.6683]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con32217').set_weights(w) 
in0Con32217 = tf.constant([[[[[0.2551], [0.802]], [[0.4333], [0.559]]], [[[0.6246], [0.8807]], [[0.2953], [0.8095]]]]])
in0Min26863 = tf.constant([[[[0.2143]]]])
in1Min26863 = tf.constant([[[[0.2805]]]])
in0Con59597 = tf.constant([[[[0.277, 0.7062, 0.5894, 0.4115, 0.7869, 0.5212, 0.0942, 0.983, 0.1274, 0.787, 0.0043], [0.669, 0.6926, 0.4169, 0.8824, 0.9238, 0.7833, 0.6976, 0.4573, 0.9432, 0.5603, 0.6188], [0.3734, 0.4642, 0.483, 0.9749, 0.4004, 0.6168, 0.2983, 0.3433, 0.1515, 0.1801, 0.1791]], [[0.4232, 0.1541, 0.8692, 0.9217, 0.6359, 0.1956, 0.0859, 0.2109, 0.3355, 0.2303, 0.9034], [0.8322, 0.4522, 0.7707, 0.9212, 0.3722, 0.9043, 0.6135, 0.029, 0.3853, 0.6504, 0.9517], [0.0461, 0.2219, 0.828, 0.4113, 0.6671, 0.7195, 0.0251, 0.3162, 0.1355, 0.7359, 0.3661]]]])
print (np.array2string(model.predict([in0Con32217,in0Min26863,in1Min26863,in0Con59597],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min73199.png')

LCon32217 = conv3D_transpose_layer([[[[[0.2551], [0.802]], [[0.4333], [0.559]]], [[[0.6246], [0.8807]], [[0.2953], [0.8095]]]]], 1, 2, 2,[[[[[0.6652], [0.5666], [0.4241], [0.2982]], [[0.2799], [0.8024], [0.1617], [0.7133]]], [[[0.2926], [0.5987], [0.7206], [0.9499]], [[0.7983], [0.2199], [0.9875], [0.6683]]]]],[0, 0, 0, 0], 1, 1, 1, false, Con32217), 
LSof47264 = softmax_layer(Con32217, 1, Sof47264), 
LRes44029 = reshape_layer(Sof47264, [2, 3, 12], Res44029), 
LMin26863 = minimum_layer([[[[[0.2143]]]], [[[[0.2805]]]]], Min26863), 
LZer80326 = zero_padding2D_layer(Min26863, 1, 0, 2, 0, Zer80326), 
LCon59597 = concatenate_layer([Zer80326,[[[[0.277, 0.7062, 0.5894, 0.4115, 0.7869, 0.5212, 0.0942, 0.983, 0.1274, 0.787, 0.0043], [0.669, 0.6926, 0.4169, 0.8824, 0.9238, 0.7833, 0.6976, 0.4573, 0.9432, 0.5603, 0.6188], [0.3734, 0.4642, 0.483, 0.9749, 0.4004, 0.6168, 0.2983, 0.3433, 0.1515, 0.1801, 0.1791]], [[0.4232, 0.1541, 0.8692, 0.9217, 0.6359, 0.1956, 0.0859, 0.2109, 0.3355, 0.2303, 0.9034], [0.8322, 0.4522, 0.7707, 0.9212, 0.3722, 0.9043, 0.6135, 0.029, 0.3853, 0.6504, 0.9517], [0.0461, 0.2219, 0.828, 0.4113, 0.6671, 0.7195, 0.0251, 0.3162, 0.1355, 0.7359, 0.3661]]]]], 3, Con59597), 
LMin73199 = minimum_layer([Res44029,Con59597], Min73199), 
exec_layers([LCon32217,LSof47264,LRes44029,LMin26863,LZer80326,LCon59597,LMin73199],["Con32217","Sof47264","Res44029","Min26863","Zer80326","Con59597","Min73199"],Min73199,"Min73199")

Actual (Unparsed): [[[[0.0000000, 0.2770000, 0.4609037, 0.4724816, 0.4115000, 0.4155476, 0.4767356, 0.0942000, 0.4944932, 0.1274000, 0.4968186, 0.0043000], [0.0000000, 0.4643036, 0.4482520, 0.4169000, 0.3903108, 0.4601912, 0.3762455, 0.4260568, 0.4573000, 0.4456389, 0.4704789, 0.4424371], [0.0000000, 0.3734000, 0.4642000, 0.4830000, 0.5092162, 0.4004000, 0.4889430, 0.2983000, 0.3433000, 0.1515000, 0.1801000, 0.1791000]], [[0.0000000, 0.4232000, 0.1541000, 0.5275184, 0.5388650, 0.5844524, 0.1956000, 0.0859000, 0.2109000, 0.3355000, 0.2303000, 0.5140305], [0.0000000, 0.5356964, 0.4522000, 0.5768453, 0.6096892, 0.3722000, 0.6237545, 0.5739432, 0.0290000, 0.3853000, 0.5295211, 0.5575629], [0.2143000, 0.0461000, 0.2219000, 0.4672753, 0.4113000, 0.5298714, 0.5110570, 0.0251000, 0.3162000, 0.1355000, 0.5615287, 0.3661000]]]]

Expected (Unparsed): [[[[0,0.277,0.46090373520279576,0.47248161043874926,0.4115,0.41554758833411676,0.4767356054228723,0.0942,0.4944931901745493,0.1274,0.4968185954344581,0.0043],[0,0.4643036209132931,0.4482519866517837,0.4169,0.3903108248203783,0.4601912267015607,0.37624552009134216,0.4260568210309579,0.4573,0.44563889175878685,0.47047885043597537,0.4424371381452851],[0,0.3734,0.4642,0.483,0.50921623103163,0.4004,0.4889429779377037,0.2983,0.3433,0.1515,0.1801,0.1791]],[[0,0.4232,0.1541,0.5275183895612507,0.5388650139302447,0.5844524116658831,0.1956,0.0859,0.2109,0.3355,0.2303,0.5140304931337675],[0,0.5356963790867069,0.4522,0.5768453399303525,0.6096891751796216,0.3722,0.6237544799086578,0.5739431789690421,0.029,0.3853,0.5295211495640246,0.5575628618547148],[0.2143,0.0461,0.2219,0.467275297246155,0.4113,0.5298714220969866,0.5110570220622963,0.0251,0.3162,0.1355,0.5615287549818436,0.3661]]]]

Actual:   [[[[0, 0.277, 0.461, 0.4725, 0.4115, 0.4156, 0.4768, 0.0942, 0.4945, 0.1274, 0.4969, 0.0043], [0, 0.4644, 0.4483, 0.4169, 0.3904, 0.4602, 0.3763, 0.4261, 0.4573, 0.4457, 0.4705, 0.4425], [0, 0.3734, 0.4642, 0.483, 0.5093, 0.4004, 0.489, 0.2983, 0.3433, 0.1515, 0.1801, 0.1791]], [[0, 0.4232, 0.1541, 0.5276, 0.5389, 0.5845, 0.1956, 0.0859, 0.2109, 0.3355, 0.2303, 0.5141], [0, 0.5357, 0.4522, 0.5769, 0.6097, 0.3722, 0.6238, 0.574, 0.029, 0.3853, 0.5296, 0.5576], [0.2143, 0.0461, 0.2219, 0.4673, 0.4113, 0.5299, 0.5111, 0.0251, 0.3162, 0.1355, 0.5616, 0.3661]]]]

Expected: [[[[0, 0.277, 0.461, 0.4725, 0.4115, 0.4156, 0.4768, 0.0942, 0.4945, 0.1274, 0.4969, 0.0043], [0, 0.4644, 0.4483, 0.4169, 0.3904, 0.4602, 0.3763, 0.4261, 0.4573, 0.4457, 0.4705, 0.4425], [0, 0.3734, 0.4642, 0.483, 0.5093, 0.4004, 0.489, 0.2983, 0.3433, 0.1515, 0.1801, 0.1791]], [[0, 0.4232, 0.1541, 0.5276, 0.5389, 0.5845, 0.1956, 0.0859, 0.2109, 0.3355, 0.2303, 0.5141], [0, 0.5357, 0.4522, 0.5769, 0.6097, 0.3722, 0.6238, 0.574, 0.029, 0.3853, 0.5296, 0.5576], [0.2143, 0.0461, 0.2219, 0.4673, 0.4113, 0.5299, 0.5111, 0.0251, 0.3162, 0.1355, 0.5616, 0.3661]]]]