import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave98691 = tf.keras.layers.Input(shape=([1, 1, 2]))
in1Ave98691 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Dot53789 = tf.keras.layers.Input(shape=([3]))
in1Dot53789 = tf.keras.layers.Input(shape=([3]))
in0Con12524 = tf.keras.layers.Input(shape=([1]))
in0Con79016 = tf.keras.layers.Input(shape=([2, 3, 1]))
in0Ave93250 = tf.keras.layers.Input(shape=([1, 2, 2]))
in1Ave93250 = tf.keras.layers.Input(shape=([1, 2, 2]))

Ave98691 = keras.layers.Average(name = 'Ave98691', )([in0Ave98691,in1Ave98691])
Res22570 = keras.layers.Reshape((1, 2), name = 'Res22570', )(Ave98691)
Fla3900 = keras.layers.Flatten(name = 'Fla3900', )(Res22570)
Dot53789 = keras.layers.Dot(axes=(1, 1), name = 'Dot53789', )([in0Dot53789,in1Dot53789])
Con12524 = keras.layers.Concatenate(axis=1, name = 'Con12524', )([Dot53789,in0Con12524])
Mul4334 = keras.layers.Multiply(name = 'Mul4334', )([Fla3900,Con12524])
Res8715 = keras.layers.Reshape((2, 1), name = 'Res8715', )(Mul4334)
Res10414 = keras.layers.Reshape((2, 1, 1), name = 'Res10414', )(Res8715)
Zer17015 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer17015', )(Res10414)
Con79016 = keras.layers.Concatenate(axis=3, name = 'Con79016', )([Zer17015,in0Con79016])
Ave93250 = keras.layers.Average(name = 'Ave93250', )([in0Ave93250,in1Ave93250])
Zer74079 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer74079', )(Ave93250)
Min36555 = keras.layers.Minimum(name = 'Min36555', )([Con79016,Zer74079])
model = tf.keras.models.Model(inputs=[in0Ave98691,in1Ave98691,in0Dot53789,in1Dot53789,in0Con12524,in0Con79016,in0Ave93250,in1Ave93250], outputs=Min36555)
in0Ave98691 = tf.constant([[[[0.9062, 0.3603]]]])
in1Ave98691 = tf.constant([[[[0.7667, 0.9804]]]])
in0Dot53789 = tf.constant([[0.9858, 0.8686, 0.4511]])
in1Dot53789 = tf.constant([[0.145, 0.0467, 0.0568]])
in0Con12524 = tf.constant([[0.3433]])
in0Con79016 = tf.constant([[[[0.8298], [0.1967], [0.5063]], [[0.2664], [0.6014], [0.7914]]]])
in0Ave93250 = tf.constant([[[[0.2993, 0.1], [0.7147, 0.2166]]]])
in1Ave93250 = tf.constant([[[[0.8962, 0.59], [0.2122, 0.321]]]])
print (np.array2string(model.predict([in0Ave98691,in1Ave98691,in0Dot53789,in1Dot53789,in0Con12524,in0Con79016,in0Ave93250,in1Ave93250],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min36555.png')

LAve98691 = average_layer([[[[[0.9062, 0.3603]]]], [[[[0.7667, 0.9804]]]]], Ave98691), 
LRes22570 = reshape_layer(Ave98691, [1, 2], Res22570), 
LFla3900 = flatten_layer(Res22570, Fla3900), 
LDot53789 = dot_layer([[0.9858, 0.8686, 0.4511]], [[0.145, 0.0467, 0.0568]], 1, 1, Dot53789), 
LCon12524 = concatenate_layer([Dot53789,[[0.3433]]], 1, Con12524), 
LMul4334 = multiply_layer([Fla3900,Con12524], Mul4334), 
LRes8715 = reshape_layer(Mul4334, [2, 1], Res8715), 
LRes10414 = reshape_layer(Res8715, [2, 1, 1], Res10414), 
LZer17015 = zero_padding2D_layer(Res10414, 0, 0, 2, 0, Zer17015), 
LCon79016 = concatenate_layer([Zer17015,[[[[0.8298], [0.1967], [0.5063]], [[0.2664], [0.6014], [0.7914]]]]], 3, Con79016), 
LAve93250 = average_layer([[[[[0.2993, 0.1], [0.7147, 0.2166]]]], [[[[0.8962, 0.59], [0.2122, 0.321]]]]], Ave93250), 
LZer74079 = zero_padding2D_layer(Ave93250, 1, 0, 1, 0, Zer74079), 
LMin36555 = minimum_layer([Con79016,Zer74079], Min36555), 
exec_layers([LAve98691,LRes22570,LFla3900,LDot53789,LCon12524,LMul4334,LRes8715,LRes10414,LZer17015,LCon79016,LAve93250,LZer74079,LMin36555],["Ave98691","Res22570","Fla3900","Dot53789","Con12524","Mul4334","Res8715","Res10414","Zer17015","Con79016","Ave93250","Zer74079","Min36555"],Min36555,"Min36555")

Actual (Unparsed): [[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.3450000], [0.2301312, 0.2688000]]]]

Expected (Unparsed): [[[[0,0],[0,0],[0,0]],[[0,0],[0,0.345],[0.230131155,0.2688]]]]

Actual:   [[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0.345], [0.2302, 0.2688]]]]

Expected: [[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0.345], [0.2302, 0.2688]]]]