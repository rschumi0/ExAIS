import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Up_26202 = tf.keras.layers.Input(shape=([3, 4, 2, 2]))
in0Add35998 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Add35998 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con1360 = tf.keras.layers.Input(shape=([3, 8, 7]))

Up_26202 = keras.layers.UpSampling3D(size=(1, 2, 2), name = 'Up_26202', )(in0Up_26202)
Res42533 = keras.layers.Reshape((3, 8, 8), name = 'Res42533', )(Up_26202)
Add35998 = keras.layers.Add(name = 'Add35998', )([in0Add35998,in1Add35998])
Zer9610 = keras.layers.ZeroPadding2D(padding=((1, 0), (6, 0)), name = 'Zer9610', )(Add35998)
Con1360 = keras.layers.Concatenate(axis=3, name = 'Con1360', )([Zer9610,in0Con1360])
Min26309 = keras.layers.Minimum(name = 'Min26309', )([Res42533,Con1360])
ReL40625 = keras.layers.ReLU(max_value=5.483265488011382, negative_slope=9.618854223547478, threshold=2.4008729520265226, name = 'ReL40625', )(Min26309)
Con91423 = keras.layers.Conv2D(4, (1, 5),strides=(1, 1), padding='valid', dilation_rate=(1, 1), name = 'Con91423', )(ReL40625)
model = tf.keras.models.Model(inputs=[in0Up_26202,in0Add35998,in1Add35998,in0Con1360], outputs=Con91423)
w = model.get_layer('Con91423').get_weights() 
w[0] = np.array([[[[0.1029, 0.0079, 0.6615, 0.327], [0.2222, 0.3992, 0.8427, 0.5174], [0.0607, 0.5374, 0.9423, 0.0963], [0.759, 0.9472, 0.8671, 0.0206], [0.7688, 0.5616, 0.5612, 0.8958], [0.6704, 0.8913, 0.234, 0.6245], [0.02, 0.8723, 0.8374, 0.8817], [0.9335, 0.037, 0.5235, 0.0287]], [[0.9554, 0.4398, 0.863, 0.192], [0.2574, 0.4607, 0.7973, 0.7546], [0.3643, 0.2088, 0.6627, 0.4334], [0.4178, 0.7533, 0.128, 0.4488], [0.4481, 0.8184, 0.566, 0.0338], [0.2535, 0.9002, 0.1945, 0.6723], [0.258, 0.9824, 0.3122, 0.0118], [0.1587, 0.1605, 0.088, 0.35]], [[0.2617, 0.5205, 0.6562, 0.9625], [0.1515, 0.5582, 0.7237, 0.3061], [0.7474, 0.2765, 0.4966, 0.3117], [0.8519, 0.8505, 0.5019, 0.5618], [0.0211, 0.4137, 0.794, 0.1384], [0.9506, 0.084, 0.1139, 0.3209], [0.6051, 0.8235, 0.8, 0.1172], [0.0011, 0.1041, 0.636, 0.8184]], [[0.8937, 0.6388, 0.366, 0.3804], [0.6165, 0.6302, 0.3079, 0.4595], [0.9746, 0.0865, 0.3511, 0.3516], [0.4039, 0.7594, 0.6383, 0.9226], [0.5714, 0.1709, 0.3997, 0.8507], [0.2175, 0.0127, 0.7333, 0.154], [0.3156, 0.924, 0.6067, 0.0216], [0.5631, 0.2872, 0.9918, 0.4293]], [[0.8041, 0.2122, 0.8414, 0.8835], [0.236, 0.3267, 0.5621, 0.9066], [0.1503, 0.3366, 0.7488, 0.5559], [0.5236, 0.5743, 0.2052, 0.3489], [0.9841, 0.917, 0.6975, 0.4589], [0.5561, 0.521, 0.4582, 0.9397], [0.1105, 0.7952, 0.1952, 0.0389], [0.6354, 0.9125, 0.2427, 0.3693]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con91423').set_weights(w) 
in0Up_26202 = tf.constant([[[[[1.5283, 1.7251], [1.5903, 1.5684]], [[1.6023, 1.8775], [1.1414, 1.3196]], [[1.4539, 1.3115], [1.2145, 1.681]], [[1.6831, 1.005], [1.7144, 1.1006]]], [[[1.9624, 1.9591], [1.3513, 1.0648]], [[1.294, 1.8415], [1.856, 1.207]], [[1.8252, 1.3682], [1.4969, 1.9879]], [[1.557, 1.3459], [1.1974, 1.6811]]], [[[1.0619, 1.3374], [1.6689, 1.8984]], [[1.0237, 1.1157], [1.492, 1.0389]], [[1.0081, 1.4292], [1.0092, 1.8587]], [[1.3781, 1.1089], [1.2222, 1.822]]]]])
in0Add35998 = tf.constant([[[[0.6814], [0.2235]], [[0.6267], [0.0167]]]])
in1Add35998 = tf.constant([[[[0.1505], [0.8081]], [[0.0661], [0.1969]]]])
in0Con1360 = tf.constant([[[[0.6451, 0.2657, 0.3809, 0.5062, 0.6828, 0.4803, 0.9193], [0.2445, 0.1055, 0.139, 0.4558, 0.7453, 0.018, 0.124], [0.3497, 0.9215, 0.6139, 0.2503, 0.3088, 0.2897, 0.895], [0.7258, 0.6657, 0.0527, 0.5202, 0.4608, 0.5954, 0.2943], [0.5556, 0.5906, 0.4266, 0.9415, 0.1386, 0.1984, 0.019], [0.4762, 0.7124, 0.503, 0.9009, 0.857, 0.5396, 0.7109], [0.4916, 0.7539, 0.6629, 0.3223, 0.2693, 0.9883, 0.3422], [0.9293, 0.1882, 0.0226, 0.2715, 0.4456, 0.9962, 0.4521]], [[0.5536, 0.2696, 0.3591, 0.7101, 0.4932, 0.0951, 0.8605], [0.6212, 0.7601, 0.9583, 0.0117, 0.0087, 0.3683, 0.6383], [0.3804, 0.2959, 0.2182, 0.7108, 0.827, 0.9278, 0.6602], [0.3971, 0.6234, 0.4852, 0.6466, 0.8476, 0.9219, 0.5599], [0.5653, 0.6521, 0.6384, 0.8202, 0.7715, 0.1775, 0.323], [0.2067, 0.168, 0.8018, 0.9981, 0.8662, 0.9241, 0.2326], [0.2632, 0.2591, 0.5686, 0.88, 0.1909, 0.8557, 0.2427], [0.6841, 0.665, 0.9744, 0.8595, 0.8921, 0.85, 0.6097]], [[0.2784, 0.0243, 0.4246, 0.5472, 0.3741, 0.6743, 0.057], [0.6691, 0.0572, 0.8438, 0.3587, 0.1177, 0.8859, 0.235], [0.2109, 0.9027, 0.8974, 0.2877, 0.9286, 0.6111, 0.6832], [0.784, 0.1978, 0.1147, 0.5349, 0.5224, 0.1035, 0.5536], [0.6942, 0.9071, 0.8514, 0.4187, 0.3552, 0.2949, 0.9778], [0.2601, 0.089, 0.5934, 0.9428, 0.3986, 0.7844, 0.9171], [0.0045, 0.0363, 0.0351, 0.0712, 0.1856, 0.3265, 0.14], [0.2557, 0.9582, 0.2914, 0.5304, 0.6613, 0.9983, 0.956]]]])
print (np.array2string(model.predict([in0Up_26202,in0Add35998,in1Add35998,in0Con1360],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con91423.png')

LUp_26202 = up_sampling3D_layer([[[[[1.5283, 1.7251], [1.5903, 1.5684]], [[1.6023, 1.8775], [1.1414, 1.3196]], [[1.4539, 1.3115], [1.2145, 1.681]], [[1.6831, 1.005], [1.7144, 1.1006]]], [[[1.9624, 1.9591], [1.3513, 1.0648]], [[1.294, 1.8415], [1.856, 1.207]], [[1.8252, 1.3682], [1.4969, 1.9879]], [[1.557, 1.3459], [1.1974, 1.6811]]], [[[1.0619, 1.3374], [1.6689, 1.8984]], [[1.0237, 1.1157], [1.492, 1.0389]], [[1.0081, 1.4292], [1.0092, 1.8587]], [[1.3781, 1.1089], [1.2222, 1.822]]]]], 1, 2, 2, Up_26202), 
LRes42533 = reshape_layer(Up_26202, [3, 8, 8], Res42533), 
LAdd35998 = add_layer([[[[[0.6814], [0.2235]], [[0.6267], [0.0167]]]], [[[[0.1505], [0.8081]], [[0.0661], [0.1969]]]]], Add35998), 
LZer9610 = zero_padding2D_layer(Add35998, 1, 0, 6, 0, Zer9610), 
LCon1360 = concatenate_layer([Zer9610,[[[[0.6451, 0.2657, 0.3809, 0.5062, 0.6828, 0.4803, 0.9193], [0.2445, 0.1055, 0.139, 0.4558, 0.7453, 0.018, 0.124], [0.3497, 0.9215, 0.6139, 0.2503, 0.3088, 0.2897, 0.895], [0.7258, 0.6657, 0.0527, 0.5202, 0.4608, 0.5954, 0.2943], [0.5556, 0.5906, 0.4266, 0.9415, 0.1386, 0.1984, 0.019], [0.4762, 0.7124, 0.503, 0.9009, 0.857, 0.5396, 0.7109], [0.4916, 0.7539, 0.6629, 0.3223, 0.2693, 0.9883, 0.3422], [0.9293, 0.1882, 0.0226, 0.2715, 0.4456, 0.9962, 0.4521]], [[0.5536, 0.2696, 0.3591, 0.7101, 0.4932, 0.0951, 0.8605], [0.6212, 0.7601, 0.9583, 0.0117, 0.0087, 0.3683, 0.6383], [0.3804, 0.2959, 0.2182, 0.7108, 0.827, 0.9278, 0.6602], [0.3971, 0.6234, 0.4852, 0.6466, 0.8476, 0.9219, 0.5599], [0.5653, 0.6521, 0.6384, 0.8202, 0.7715, 0.1775, 0.323], [0.2067, 0.168, 0.8018, 0.9981, 0.8662, 0.9241, 0.2326], [0.2632, 0.2591, 0.5686, 0.88, 0.1909, 0.8557, 0.2427], [0.6841, 0.665, 0.9744, 0.8595, 0.8921, 0.85, 0.6097]], [[0.2784, 0.0243, 0.4246, 0.5472, 0.3741, 0.6743, 0.057], [0.6691, 0.0572, 0.8438, 0.3587, 0.1177, 0.8859, 0.235], [0.2109, 0.9027, 0.8974, 0.2877, 0.9286, 0.6111, 0.6832], [0.784, 0.1978, 0.1147, 0.5349, 0.5224, 0.1035, 0.5536], [0.6942, 0.9071, 0.8514, 0.4187, 0.3552, 0.2949, 0.9778], [0.2601, 0.089, 0.5934, 0.9428, 0.3986, 0.7844, 0.9171], [0.0045, 0.0363, 0.0351, 0.0712, 0.1856, 0.3265, 0.14], [0.2557, 0.9582, 0.2914, 0.5304, 0.6613, 0.9983, 0.956]]]]], 3, Con1360), 
LMin26309 = minimum_layer([Res42533,Con1360], Min26309), 
LReL40625 = relu_layer(Min26309, 5.483265488011382, 9.618854223547478, 2.4008729520265226, ReL40625), 
LCon91423 = conv2D_layer(ReL40625, 1, 5,[[[[0.1029, 0.0079, 0.6615, 0.327], [0.2222, 0.3992, 0.8427, 0.5174], [0.0607, 0.5374, 0.9423, 0.0963], [0.759, 0.9472, 0.8671, 0.0206], [0.7688, 0.5616, 0.5612, 0.8958], [0.6704, 0.8913, 0.234, 0.6245], [0.02, 0.8723, 0.8374, 0.8817], [0.9335, 0.037, 0.5235, 0.0287]], [[0.9554, 0.4398, 0.863, 0.192], [0.2574, 0.4607, 0.7973, 0.7546], [0.3643, 0.2088, 0.6627, 0.4334], [0.4178, 0.7533, 0.128, 0.4488], [0.4481, 0.8184, 0.566, 0.0338], [0.2535, 0.9002, 0.1945, 0.6723], [0.258, 0.9824, 0.3122, 0.0118], [0.1587, 0.1605, 0.088, 0.35]], [[0.2617, 0.5205, 0.6562, 0.9625], [0.1515, 0.5582, 0.7237, 0.3061], [0.7474, 0.2765, 0.4966, 0.3117], [0.8519, 0.8505, 0.5019, 0.5618], [0.0211, 0.4137, 0.794, 0.1384], [0.9506, 0.084, 0.1139, 0.3209], [0.6051, 0.8235, 0.8, 0.1172], [0.0011, 0.1041, 0.636, 0.8184]], [[0.8937, 0.6388, 0.366, 0.3804], [0.6165, 0.6302, 0.3079, 0.4595], [0.9746, 0.0865, 0.3511, 0.3516], [0.4039, 0.7594, 0.6383, 0.9226], [0.5714, 0.1709, 0.3997, 0.8507], [0.2175, 0.0127, 0.7333, 0.154], [0.3156, 0.924, 0.6067, 0.0216], [0.5631, 0.2872, 0.9918, 0.4293]], [[0.8041, 0.2122, 0.8414, 0.8835], [0.236, 0.3267, 0.5621, 0.9066], [0.1503, 0.3366, 0.7488, 0.5559], [0.5236, 0.5743, 0.2052, 0.3489], [0.9841, 0.917, 0.6975, 0.4589], [0.5561, 0.521, 0.4582, 0.9397], [0.1105, 0.7952, 0.1952, 0.0389], [0.6354, 0.9125, 0.2427, 0.3693]]]],[0, 0, 0, 0], 1, 1, false, 1, 1, Con91423), 
exec_layers([LUp_26202,LRes42533,LAdd35998,LZer9610,LCon1360,LMin26309,LReL40625,LCon91423],["Up_26202","Res42533","Add35998","Zer9610","Con1360","Min26309","ReL40625","Con91423"],Con91423,"Con91423")

Actual (Unparsed): [[[[-358.7921344, -402.5544330, -429.7276900, -345.8260617], [-359.3352521, -396.8588994, -436.8954805, -339.3329909], [-358.7350616, -389.4223405, -411.2377841, -346.9815580], [-360.0037956, -386.1002284, -415.6419929, -339.1073805]], [[-345.6314593, -390.3442874, -411.9532852, -333.5281591], [-344.2632660, -374.1591065, -409.8182975, -340.0499741], [-343.4210474, -368.5460432, -407.1609639, -324.7624621], [-324.2755758, -349.8925816, -392.1528089, -309.0692751]], [[-353.7682849, -386.1163892, -427.7070800, -336.1058146], [-352.0665245, -375.3843010, -417.5990023, -332.6325368], [-358.3462395, -392.0727675, -412.2610724, -338.5094408], [-362.1169938, -387.4564199, -424.7486663, -340.6138751]]]]

Expected (Unparsed): [[[[-358.7921350244627,-402.55443305194433,-429.72769012875307,-345.8260619285937],[-359.33525237413585,-396.8588996789711,-436.8954808083209,-339.33299135747194],[-358.73506213005845,-389.42234109083705,-411.2377846902322,-346.98155843822764],[-360.003796023908,-386.1002292171907,-415.6419934245151,-339.1073804583389]],[[-345.63145929139057,-390.34428758762755,-411.9532851816102,-333.5281593287109],[-344.2632655791728,-374.15910598394606,-409.8182971874163,-340.04997401809743],[-343.4210472641392,-368.5460429356919,-407.16096356686785,-324.7624620774086],[-324.27557516445626,-349.89258138561024,-392.1528080656636,-309.06927438271055]],[[-353.76828585716567,-386.116390238926,-427.70708089201673,-336.10581517029857],[-352.0665251896993,-375.3843016731694,-417.59900279712514,-332.6325377121595],[-358.3462398590998,-392.07276818167577,-412.2610728380314,-338.50944102614983],[-362.1169936581211,-387.4564194650346,-424.74866568783466,-340.6138748260913]]]]

Actual:   [[[[-358.7921, -402.5544, -429.7276, -345.826], [-359.3352, -396.8588, -436.8954, -339.3329], [-358.735, -389.4223, -411.2377, -346.9815], [-360.0037, -386.1002, -415.6419, -339.1073]], [[-345.6314, -390.3442, -411.9532, -333.5281], [-344.2632, -374.1591, -409.8182, -340.0499], [-343.421, -368.546, -407.1609, -324.7624], [-324.2755, -349.8925, -392.1528, -309.0692]], [[-353.7682, -386.1163, -427.707, -336.1058], [-352.0665, -375.3843, -417.599, -332.6325], [-358.3462, -392.0727, -412.261, -338.5094], [-362.1169, -387.4564, -424.7486, -340.6138]]]]

Expected: [[[[-358.7921, -402.5544, -429.7276, -345.826], [-359.3352, -396.8588, -436.8954, -339.3329], [-358.735, -389.4223, -411.2377, -346.9815], [-360.0037, -386.1002, -415.6419, -339.1073]], [[-345.6314, -390.3442, -411.9532, -333.5281], [-344.2632, -374.1591, -409.8182, -340.0499], [-343.421, -368.546, -407.1609, -324.7624], [-324.2755, -349.8925, -392.1528, -309.0692]], [[-353.7682, -386.1163, -427.707, -336.1058], [-352.0665, -375.3843, -417.599, -332.6325], [-358.3462, -392.0727, -412.261, -338.5094], [-362.1169, -387.4564, -424.7486, -340.6138]]]]