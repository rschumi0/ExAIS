import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con63893 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in0Lea1037 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Mul56908 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))
in1Mul56908 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))
in0Con15041 = tf.keras.layers.Input(shape=([2, 1, 1, 3]))
in0Cro14314 = tf.keras.layers.Input(shape=([3, 3, 4, 3]))
in0Fla87874 = tf.keras.layers.Input(shape=([2, 2]))
in0Max62687 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))
in1Max62687 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))
in0Con29324 = tf.keras.layers.Input(shape=([4, 2]))
in0Con65300 = tf.keras.layers.Input(shape=([4, 1]))
in0Con69636 = tf.keras.layers.Input(shape=([5, 5, 14]))
in0Min48108 = tf.keras.layers.Input(shape=([1, 2, 1]))
in1Min48108 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con72279 = tf.keras.layers.Input(shape=([5, 3, 14]))
in0Zer60699 = tf.keras.layers.Input(shape=([3, 1, 3, 3]))

Con63893 = keras.layers.Conv3D(4, (2, 1, 1),strides=(1, 1, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con63893', )(in0Con63893)
Lea1037 = keras.layers.LeakyReLU(alpha=9.167509921350701, name = 'Lea1037', input_shape=(2, 1, 1))(in0Lea1037)
Res17135 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res17135', )(Lea1037)
Cro25027 = keras.layers.Cropping3D(cropping=((1, 0), (0, 0), (0, 0)), name = 'Cro25027', )(Res17135)
Mul56908 = keras.layers.Multiply(name = 'Mul56908', )([in0Mul56908,in1Mul56908])
Add59251 = keras.layers.Add(name = 'Add59251', )([Cro25027,Mul56908])
Zer75252 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (0, 0)), name = 'Zer75252', )(Add59251)
Con15041 = keras.layers.Concatenate(axis=4, name = 'Con15041', )([Zer75252,in0Con15041])
Sub1240 = keras.layers.Subtract(name = 'Sub1240', )([Con63893,Con15041])
Res13081 = keras.layers.Reshape((2, 1, 4), name = 'Res13081', )(Sub1240)
Res34577 = keras.layers.Reshape((2, 4), name = 'Res34577', )(Res13081)
Zer58126 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer58126', )(Res34577)
Cro14314 = keras.layers.Cropping3D(cropping=((2, 0), (2, 0), (3, 0)), name = 'Cro14314', )(in0Cro14314)
Res33039 = keras.layers.Reshape((1, 1, 3), name = 'Res33039', )(Cro14314)
Res26010 = keras.layers.Reshape((1, 3), name = 'Res26010', )(Res33039)
Zer35273 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer35273', )(Res26010)
Fla87874 = keras.layers.Flatten(name = 'Fla87874', )(in0Fla87874)
Res50966 = keras.layers.Reshape((4, 1), name = 'Res50966', )(Fla87874)
Max62687 = keras.layers.Maximum(name = 'Max62687', )([in0Max62687,in1Max62687])
Res54844 = keras.layers.Reshape((4, 1), name = 'Res54844', )(Max62687)
Ave66560 = keras.layers.Average(name = 'Ave66560', )([Res50966,Res54844])
Con29324 = keras.layers.Concatenate(axis=2, name = 'Con29324', )([Ave66560,in0Con29324])
Add11841 = keras.layers.Add(name = 'Add11841', )([Zer35273,Con29324])
Con65300 = keras.layers.Concatenate(axis=2, name = 'Con65300', )([Add11841,in0Con65300])
Max46711 = keras.layers.Maximum(name = 'Max46711', )([Zer58126,Con65300])
Res47268 = keras.layers.Reshape((4, 4, 1), name = 'Res47268', )(Max46711)
Zer65131 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer65131', )(Res47268)
Con69636 = keras.layers.Concatenate(axis=3, name = 'Con69636', )([Zer65131,in0Con69636])
Min48108 = keras.layers.Minimum(name = 'Min48108', )([in0Min48108,in1Min48108])
Zer64311 = keras.layers.ZeroPadding2D(padding=((4, 0), (1, 0)), name = 'Zer64311', )(Min48108)
Con72279 = keras.layers.Concatenate(axis=3, name = 'Con72279', )([Zer64311,in0Con72279])
Zer60699 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer60699', )(in0Zer60699)
Res39437 = keras.layers.Reshape((5, 3, 15), name = 'Res39437', )(Zer60699)
Cro90870 = keras.layers.Cropping2D(cropping=((2, 0), (2, 0)), name = 'Cro90870', )(Res39437)
Zer25836 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer25836', )(Cro90870)
Mul37102 = keras.layers.Multiply(name = 'Mul37102', )([Con72279,Zer25836])
Zer8048 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer8048', )(Mul37102)
Min56853 = keras.layers.Minimum(name = 'Min56853', )([Con69636,Zer8048])
model = tf.keras.models.Model(inputs=[in0Con63893,in0Lea1037,in0Mul56908,in1Mul56908,in0Con15041,in0Cro14314,in0Fla87874,in0Max62687,in1Max62687,in0Con29324,in0Con65300,in0Con69636,in0Min48108,in1Min48108,in0Con72279,in0Zer60699], outputs=Min56853)
w = model.get_layer('Con63893').get_weights() 
w[0] = np.array([[[[[0.5871, 0.3204, 0.0548, 0.9558]]]], [[[[0.2588, 0.0418, 0.1345, 0.4046]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con63893').set_weights(w) 
in0Con63893 = tf.constant([[[[[0.3371]]], [[[0.2198]]]]])
in0Lea1037 = tf.constant([[[[0.0806]], [[0.357]]]])
in0Mul56908 = tf.constant([[[[[0.4087]]]]])
in1Mul56908 = tf.constant([[[[[0.3265]]]]])
in0Con15041 = tf.constant([[[[[0.9274, 0.4535, 0.7793]]], [[[0.4332, 0.2909, 0.5101]]]]])
in0Cro14314 = tf.constant([[[[[1.9327, 1.5924, 1.5742], [1.0036, 1.6311, 1.4112], [1.1486, 1.506, 1.0237], [1.1625, 1.3533, 1.0289]], [[1.9661, 1.7355, 1.9866], [1.5098, 1.0379, 1.1107], [1.1004, 1.3319, 1.6191], [1.2064, 1.6665, 1.8872]], [[1.4739, 1.7134, 1.5849], [1.5258, 1.0653, 1.0036], [1.416, 1.8897, 1.0559], [1.0009, 1.9045, 1.0108]]], [[[1.8366, 1.1124, 1.701], [1.8398, 1.4697, 1.9292], [1.6866, 1.0613, 1.1331], [1.4285, 1.9579, 1.1538]], [[1.0094, 1.836, 1.84], [1.6552, 1.5737, 1.1389], [1.2602, 1.5056, 1.4069], [1.4799, 1.4383, 1.1582]], [[1.9829, 1.3081, 1.1263], [1.8713, 1.3616, 1.2153], [1.5664, 1.2251, 1.3566], [1.842, 1.9256, 1.4422]]], [[[1.5407, 1.1035, 1.2133], [1.5342, 1.402, 1.2575], [1.5908, 1.6446, 1.07], [1.0091, 1.5423, 1.2144]], [[1.2957, 1.9333, 1.5917], [1.7544, 1.7836, 1.9857], [1.1214, 1.0819, 1.5557], [1.7658, 1.3797, 1.8451]], [[1.753, 1.4982, 1.9448], [1.0469, 1.1704, 1.409], [1.7576, 1.0575, 1.8655], [1.2845, 1.329, 1.3056]]]]])
in0Fla87874 = tf.constant([[[1.3798, 1.5217], [1.8843, 1.4293]]])
in0Max62687 = tf.constant([[[[[0.4694, 0.908], [0.0142, 0.1793]]]]])
in1Max62687 = tf.constant([[[[[0.7535, 0.6983], [0.8689, 0.7725]]]]])
in0Con29324 = tf.constant([[[0.932, 0.4565], [0.404, 0.6268], [0.1003, 0.8728], [0.3294, 0.0228]]])
in0Con65300 = tf.constant([[[0.6652], [0.9233], [0.0087], [0.5111]]])
in0Con69636 = tf.constant([[[[0.7293, 0.4869, 0.8258, 0.684, 0.7083, 0.8083, 0.9028, 0.7039, 0.9605, 0.2851, 0.6526, 0.3023, 0.3913, 0.0677], [0.0249, 0.5272, 0.7514, 0.3735, 0.6179, 0.4734, 0.7288, 0.2763, 0.7431, 0.2728, 0.585, 0.0886, 0.1729, 0.6285], [0.7613, 0.4741, 0.6097, 0.7263, 0.8033, 0.8284, 0.3556, 0.8958, 0.1559, 0.3939, 0.8793, 0.9667, 0.8676, 0.0417], [0.9787, 0.8688, 0.0073, 0.6394, 0.0205, 0.6548, 0.6474, 0.4564, 0.3008, 0.7934, 0.593, 0.1053, 0.9152, 0.2758], [0.6501, 0.1134, 0.654, 0.8032, 0.1161, 0.3288, 0.3444, 0.0879, 0.3486, 0.0215, 0.75, 0.0825, 0.7222, 0.7152]], [[0.6084, 0.7816, 0.0205, 0.5013, 0.638, 0.0854, 0.3243, 0.8281, 0.3778, 0.1034, 0.7562, 0.5322, 0.5365, 0.1899], [0.022, 0.1861, 0.1239, 0.9475, 0.5471, 0.6717, 0.0114, 0.4163, 0.1496, 0.258, 0.7263, 0.6703, 0.615, 0.3611], [0.2244, 0.088, 0.2384, 0.5955, 0.1038, 0.6303, 0.3911, 0.685, 0.2227, 0.565, 0.4277, 0.299, 0.9694, 0.2092], [0.8057, 0.9009, 0.4935, 0.4271, 0.111, 0.2528, 0.0528, 0.8154, 0.7992, 0.3057, 0.2565, 0.7377, 0.8512, 0.8259], [0.3924, 0.6268, 0.2135, 0.2543, 0.2154, 0.2654, 0.8513, 0.9766, 0.541, 0.0744, 0.4744, 0.3982, 0.7433, 0.7937]], [[0.5139, 0.9532, 0.7848, 0.3218, 0.7259, 0.4597, 0.722, 0.8965, 0.8768, 0.0329, 0.7228, 0.2449, 0.3253, 0.1077], [0.5106, 0.8095, 0.9582, 0.9896, 0.8042, 0.664, 0.8598, 0.7525, 0.764, 0.275, 0.2976, 0.2319, 0.6717, 0.8341], [0.0953, 0.3255, 0.075, 0.4906, 0.2268, 0.8036, 0.4078, 0.4461, 0.5166, 0.3601, 0.6623, 0.5392, 0.6574, 0.6865], [0.0326, 0.6435, 0.3699, 0.9405, 0.5767, 0.9306, 0.418, 0.0991, 0.8496, 0.8079, 0.3672, 0.3341, 0.1495, 0.132], [0.4285, 0.73, 0.4891, 0.1178, 0.4635, 0.3752, 0.654, 0.2184, 0.245, 0.1005, 0.744, 0.1336, 0.3655, 0.9153]], [[0.4038, 0.0191, 0.7609, 0.4943, 0.5486, 0.915, 0.6844, 0.9068, 0.7607, 0.3925, 0.0996, 0.149, 0.696, 0.4211], [0.8901, 0.9363, 0.7737, 0.5047, 0.9842, 0.6482, 0.1428, 0.2007, 0.4795, 0.2742, 0.4236, 0.2436, 0.1186, 0.7079], [0.9981, 0.6245, 0.0166, 0.7572, 0.6939, 0.1456, 0.3653, 0.7961, 0.5451, 0.1636, 0.9573, 0.0691, 0.9424, 0.4645], [0.7558, 0.2793, 0.8926, 0.469, 0.4167, 0.2377, 0.294, 0.2619, 0.6181, 0.0361, 0.1041, 0.2546, 0.2902, 0.413], [0.0304, 0.6472, 0.3562, 0.7295, 0.9018, 0.2387, 0.3883, 0.2438, 0.1965, 0.5465, 0.6681, 0.1793, 0.294, 0.6479]], [[0.4954, 0.4191, 0.8971, 0.629, 0.2352, 0.5262, 0.723, 0.0366, 0.5126, 0.19, 0.0079, 0.2711, 0.171, 0.1286], [0.5809, 0.4259, 0.0947, 0.9396, 0.2713, 0.6846, 0.7616, 0.3844, 0.1913, 0.0178, 0.4416, 0.1164, 0.0007, 0.5908], [0.2849, 0.9177, 0.6053, 0.9851, 0.1538, 0.0978, 0.8668, 0.0671, 0.9438, 0.8234, 0.8077, 0.0949, 0.3136, 0.8008], [0.4864, 0.446, 0.1963, 0.9102, 0.1824, 0.166, 0.1997, 0.1053, 0.7887, 0.3961, 0.0209, 0.1334, 0.3346, 0.6166], [0.2981, 0.4067, 0.3802, 0.5618, 0.9, 0.6594, 0.6167, 0.605, 0.5173, 0.865, 0.3814, 0.3935, 0.557, 0.2527]]]])
in0Min48108 = tf.constant([[[[0.3584], [0.2986]]]])
in1Min48108 = tf.constant([[[[0.0539], [0.7153]]]])
in0Con72279 = tf.constant([[[[0.1891, 0.3951, 0.9374, 0.3393, 0.9933, 0.6632, 0.448, 0.8517, 0.5743, 0.1385, 0.9287, 0.919, 0.3982, 0.8519], [0.5403, 0.6986, 0.6424, 0.5831, 0.9886, 0.7759, 0.6515, 0.717, 0.5614, 0.4051, 0.8275, 0.5432, 0.0517, 0.7224], [0.2598, 0.1451, 0.7543, 0.8678, 0.6359, 0.6471, 0.5351, 0.2799, 0.6222, 0.864, 0.7021, 0.9045, 0.9557, 0.3349]], [[0.0318, 0.7016, 0.9423, 0.3125, 0.844, 0.6238, 0.9275, 0.5258, 0.4596, 0.1934, 0.5696, 0.4395, 0.7235, 0.9096], [0.4263, 0.2892, 0.5309, 0.9797, 0.4476, 0.392, 0.4569, 0.2906, 0.4561, 0.1002, 0.654, 0.106, 0.5926, 0.2963], [0.1597, 0.7133, 0.0071, 0.5117, 0.6318, 0.125, 0.78, 0.5914, 0.3199, 0.9892, 0.1779, 0.3257, 0.7691, 0.0596]], [[0.8639, 0.6213, 0.3556, 0.9347, 0.6117, 0.5955, 0.2533, 0.2874, 0.4058, 0.4421, 0.8469, 0.4742, 0.548, 0.04], [0.9207, 0.2416, 0.5375, 0.0528, 0.1777, 0.2246, 0.0414, 0.7044, 0.7725, 0.0729, 0.2346, 0.5047, 0.5788, 0.3331], [0.1463, 0.9464, 0.8532, 0.6661, 0.4267, 0.5987, 0.8076, 0.5843, 0.1207, 0.0822, 0.3548, 0.657, 0.6189, 0.1251]], [[0.9553, 0.05, 0.9476, 0.2733, 0.0603, 0.3434, 0.9515, 0.8553, 0.1176, 0.7981, 0.7271, 0.4866, 0.49, 0.6353], [0.8733, 0.7407, 0.919, 0.4319, 0.737, 0.6091, 0.3624, 0.4381, 0.8546, 0.0269, 0.1279, 0.4789, 0.2164, 0.0505], [0.2359, 0.1138, 0.814, 0.239, 0.8511, 0.8981, 0.1691, 0.4136, 0.4411, 0.9149, 0.1882, 0.2467, 0.046, 0.2267]], [[0.7414, 0.0678, 0.6694, 0.5357, 0.8167, 0.8649, 0.3392, 0.1336, 0.9719, 0.704, 0.8308, 0.1735, 0.0699, 0.6974], [0.3885, 0.4013, 0.9661, 0.2059, 0.0432, 0.7483, 0.8952, 0.1805, 0.2781, 0.605, 0.7958, 0.4179, 0.8675, 0.1708], [0.7073, 0.0337, 0.6843, 0.0073, 0.6738, 0.6429, 0.1514, 0.8071, 0.2984, 0.5747, 0.8008, 0.4403, 0.2061, 0.9511]]]])
in0Zer60699 = tf.constant([[[[[1.4605, 1.0099, 1.1636], [1.3379, 1.6121, 1.8373], [1.3245, 1.4112, 1.8732]]], [[[1.3307, 1.2103, 1.2535], [1.0637, 1.7811, 1.7367], [1.6777, 1.9037, 1.8754]]], [[[1.0499, 1.9767, 1.4143], [1.0815, 1.4804, 1.9018], [1.7134, 1.624, 1.8493]]]]])
print (np.array2string(model.predict([in0Con63893,in0Lea1037,in0Mul56908,in1Mul56908,in0Con15041,in0Cro14314,in0Fla87874,in0Max62687,in1Max62687,in0Con29324,in0Con65300,in0Con69636,in0Min48108,in1Min48108,in0Con72279,in0Zer60699],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min56853.png')

LCon63893 = conv3D_layer([[[[[0.3371]]], [[[0.2198]]]]], 2, 1, 1,[[[[[0.5871, 0.3204, 0.0548, 0.9558]]]], [[[[0.2588, 0.0418, 0.1345, 0.4046]]]]],[0, 0, 0, 0], 1, 1, 1, true, 1, 1, 1, Con63893), 
LLea1037 = leaky_relu_layer([[[[0.0806]], [[0.357]]]], 9.167509921350701, Lea1037), 
LRes17135 = reshape_layer(Lea1037, [2, 1, 1, 1], Res17135), 
LCro25027 = cropping3D_layer(Res17135, 1, 0, 0, 0, 0, 0, Cro25027), 
LMul56908 = multiply_layer([[[[[[0.4087]]]]], [[[[[0.3265]]]]]], Mul56908), 
LAdd59251 = add_layer([Cro25027,Mul56908], Add59251), 
LZer75252 = zero_padding3D_layer(Add59251, 1, 0, 0, 0, 0, 0, Zer75252), 
LCon15041 = concatenate_layer([Zer75252,[[[[[0.9274, 0.4535, 0.7793]]], [[[0.4332, 0.2909, 0.5101]]]]]], 4, Con15041), 
LSub1240 = subtract_layer(Con63893,Con15041, Sub1240), 
LRes13081 = reshape_layer(Sub1240, [2, 1, 4], Res13081), 
LRes34577 = reshape_layer(Res13081, [2, 4], Res34577), 
LZer58126 = zero_padding1D_layer(Res34577, 2, 0, Zer58126), 
LCro14314 = cropping3D_layer([[[[[1.9327, 1.5924, 1.5742], [1.0036, 1.6311, 1.4112], [1.1486, 1.506, 1.0237], [1.1625, 1.3533, 1.0289]], [[1.9661, 1.7355, 1.9866], [1.5098, 1.0379, 1.1107], [1.1004, 1.3319, 1.6191], [1.2064, 1.6665, 1.8872]], [[1.4739, 1.7134, 1.5849], [1.5258, 1.0653, 1.0036], [1.416, 1.8897, 1.0559], [1.0009, 1.9045, 1.0108]]], [[[1.8366, 1.1124, 1.701], [1.8398, 1.4697, 1.9292], [1.6866, 1.0613, 1.1331], [1.4285, 1.9579, 1.1538]], [[1.0094, 1.836, 1.84], [1.6552, 1.5737, 1.1389], [1.2602, 1.5056, 1.4069], [1.4799, 1.4383, 1.1582]], [[1.9829, 1.3081, 1.1263], [1.8713, 1.3616, 1.2153], [1.5664, 1.2251, 1.3566], [1.842, 1.9256, 1.4422]]], [[[1.5407, 1.1035, 1.2133], [1.5342, 1.402, 1.2575], [1.5908, 1.6446, 1.07], [1.0091, 1.5423, 1.2144]], [[1.2957, 1.9333, 1.5917], [1.7544, 1.7836, 1.9857], [1.1214, 1.0819, 1.5557], [1.7658, 1.3797, 1.8451]], [[1.753, 1.4982, 1.9448], [1.0469, 1.1704, 1.409], [1.7576, 1.0575, 1.8655], [1.2845, 1.329, 1.3056]]]]], 2, 0, 2, 0, 3, 0, Cro14314), 
LRes33039 = reshape_layer(Cro14314, [1, 1, 3], Res33039), 
LRes26010 = reshape_layer(Res33039, [1, 3], Res26010), 
LZer35273 = zero_padding1D_layer(Res26010, 3, 0, Zer35273), 
LFla87874 = flatten_layer([[[1.3798, 1.5217], [1.8843, 1.4293]]], Fla87874), 
LRes50966 = reshape_layer(Fla87874, [4, 1], Res50966), 
LMax62687 = maximum_layer([[[[[[0.4694, 0.908], [0.0142, 0.1793]]]]], [[[[[0.7535, 0.6983], [0.8689, 0.7725]]]]]], Max62687), 
LRes54844 = reshape_layer(Max62687, [4, 1], Res54844), 
LAve66560 = average_layer([Res50966,Res54844], Ave66560), 
LCon29324 = concatenate_layer([Ave66560,[[[0.932, 0.4565], [0.404, 0.6268], [0.1003, 0.8728], [0.3294, 0.0228]]]], 2, Con29324), 
LAdd11841 = add_layer([Zer35273,Con29324], Add11841), 
LCon65300 = concatenate_layer([Add11841,[[[0.6652], [0.9233], [0.0087], [0.5111]]]], 2, Con65300), 
LMax46711 = maximum_layer([Zer58126,Con65300], Max46711), 
LRes47268 = reshape_layer(Max46711, [4, 4, 1], Res47268), 
LZer65131 = zero_padding2D_layer(Res47268, 1, 0, 1, 0, Zer65131), 
LCon69636 = concatenate_layer([Zer65131,[[[[0.7293, 0.4869, 0.8258, 0.684, 0.7083, 0.8083, 0.9028, 0.7039, 0.9605, 0.2851, 0.6526, 0.3023, 0.3913, 0.0677], [0.0249, 0.5272, 0.7514, 0.3735, 0.6179, 0.4734, 0.7288, 0.2763, 0.7431, 0.2728, 0.585, 0.0886, 0.1729, 0.6285], [0.7613, 0.4741, 0.6097, 0.7263, 0.8033, 0.8284, 0.3556, 0.8958, 0.1559, 0.3939, 0.8793, 0.9667, 0.8676, 0.0417], [0.9787, 0.8688, 0.0073, 0.6394, 0.0205, 0.6548, 0.6474, 0.4564, 0.3008, 0.7934, 0.593, 0.1053, 0.9152, 0.2758], [0.6501, 0.1134, 0.654, 0.8032, 0.1161, 0.3288, 0.3444, 0.0879, 0.3486, 0.0215, 0.75, 0.0825, 0.7222, 0.7152]], [[0.6084, 0.7816, 0.0205, 0.5013, 0.638, 0.0854, 0.3243, 0.8281, 0.3778, 0.1034, 0.7562, 0.5322, 0.5365, 0.1899], [0.022, 0.1861, 0.1239, 0.9475, 0.5471, 0.6717, 0.0114, 0.4163, 0.1496, 0.258, 0.7263, 0.6703, 0.615, 0.3611], [0.2244, 0.088, 0.2384, 0.5955, 0.1038, 0.6303, 0.3911, 0.685, 0.2227, 0.565, 0.4277, 0.299, 0.9694, 0.2092], [0.8057, 0.9009, 0.4935, 0.4271, 0.111, 0.2528, 0.0528, 0.8154, 0.7992, 0.3057, 0.2565, 0.7377, 0.8512, 0.8259], [0.3924, 0.6268, 0.2135, 0.2543, 0.2154, 0.2654, 0.8513, 0.9766, 0.541, 0.0744, 0.4744, 0.3982, 0.7433, 0.7937]], [[0.5139, 0.9532, 0.7848, 0.3218, 0.7259, 0.4597, 0.722, 0.8965, 0.8768, 0.0329, 0.7228, 0.2449, 0.3253, 0.1077], [0.5106, 0.8095, 0.9582, 0.9896, 0.8042, 0.664, 0.8598, 0.7525, 0.764, 0.275, 0.2976, 0.2319, 0.6717, 0.8341], [0.0953, 0.3255, 0.075, 0.4906, 0.2268, 0.8036, 0.4078, 0.4461, 0.5166, 0.3601, 0.6623, 0.5392, 0.6574, 0.6865], [0.0326, 0.6435, 0.3699, 0.9405, 0.5767, 0.9306, 0.418, 0.0991, 0.8496, 0.8079, 0.3672, 0.3341, 0.1495, 0.132], [0.4285, 0.73, 0.4891, 0.1178, 0.4635, 0.3752, 0.654, 0.2184, 0.245, 0.1005, 0.744, 0.1336, 0.3655, 0.9153]], [[0.4038, 0.0191, 0.7609, 0.4943, 0.5486, 0.915, 0.6844, 0.9068, 0.7607, 0.3925, 0.0996, 0.149, 0.696, 0.4211], [0.8901, 0.9363, 0.7737, 0.5047, 0.9842, 0.6482, 0.1428, 0.2007, 0.4795, 0.2742, 0.4236, 0.2436, 0.1186, 0.7079], [0.9981, 0.6245, 0.0166, 0.7572, 0.6939, 0.1456, 0.3653, 0.7961, 0.5451, 0.1636, 0.9573, 0.0691, 0.9424, 0.4645], [0.7558, 0.2793, 0.8926, 0.469, 0.4167, 0.2377, 0.294, 0.2619, 0.6181, 0.0361, 0.1041, 0.2546, 0.2902, 0.413], [0.0304, 0.6472, 0.3562, 0.7295, 0.9018, 0.2387, 0.3883, 0.2438, 0.1965, 0.5465, 0.6681, 0.1793, 0.294, 0.6479]], [[0.4954, 0.4191, 0.8971, 0.629, 0.2352, 0.5262, 0.723, 0.0366, 0.5126, 0.19, 0.0079, 0.2711, 0.171, 0.1286], [0.5809, 0.4259, 0.0947, 0.9396, 0.2713, 0.6846, 0.7616, 0.3844, 0.1913, 0.0178, 0.4416, 0.1164, 0.0007, 0.5908], [0.2849, 0.9177, 0.6053, 0.9851, 0.1538, 0.0978, 0.8668, 0.0671, 0.9438, 0.8234, 0.8077, 0.0949, 0.3136, 0.8008], [0.4864, 0.446, 0.1963, 0.9102, 0.1824, 0.166, 0.1997, 0.1053, 0.7887, 0.3961, 0.0209, 0.1334, 0.3346, 0.6166], [0.2981, 0.4067, 0.3802, 0.5618, 0.9, 0.6594, 0.6167, 0.605, 0.5173, 0.865, 0.3814, 0.3935, 0.557, 0.2527]]]]], 3, Con69636), 
LMin48108 = minimum_layer([[[[[0.3584], [0.2986]]]], [[[[0.0539], [0.7153]]]]], Min48108), 
LZer64311 = zero_padding2D_layer(Min48108, 4, 0, 1, 0, Zer64311), 
LCon72279 = concatenate_layer([Zer64311,[[[[0.1891, 0.3951, 0.9374, 0.3393, 0.9933, 0.6632, 0.448, 0.8517, 0.5743, 0.1385, 0.9287, 0.919, 0.3982, 0.8519], [0.5403, 0.6986, 0.6424, 0.5831, 0.9886, 0.7759, 0.6515, 0.717, 0.5614, 0.4051, 0.8275, 0.5432, 0.0517, 0.7224], [0.2598, 0.1451, 0.7543, 0.8678, 0.6359, 0.6471, 0.5351, 0.2799, 0.6222, 0.864, 0.7021, 0.9045, 0.9557, 0.3349]], [[0.0318, 0.7016, 0.9423, 0.3125, 0.844, 0.6238, 0.9275, 0.5258, 0.4596, 0.1934, 0.5696, 0.4395, 0.7235, 0.9096], [0.4263, 0.2892, 0.5309, 0.9797, 0.4476, 0.392, 0.4569, 0.2906, 0.4561, 0.1002, 0.654, 0.106, 0.5926, 0.2963], [0.1597, 0.7133, 0.0071, 0.5117, 0.6318, 0.125, 0.78, 0.5914, 0.3199, 0.9892, 0.1779, 0.3257, 0.7691, 0.0596]], [[0.8639, 0.6213, 0.3556, 0.9347, 0.6117, 0.5955, 0.2533, 0.2874, 0.4058, 0.4421, 0.8469, 0.4742, 0.548, 0.04], [0.9207, 0.2416, 0.5375, 0.0528, 0.1777, 0.2246, 0.0414, 0.7044, 0.7725, 0.0729, 0.2346, 0.5047, 0.5788, 0.3331], [0.1463, 0.9464, 0.8532, 0.6661, 0.4267, 0.5987, 0.8076, 0.5843, 0.1207, 0.0822, 0.3548, 0.657, 0.6189, 0.1251]], [[0.9553, 0.05, 0.9476, 0.2733, 0.0603, 0.3434, 0.9515, 0.8553, 0.1176, 0.7981, 0.7271, 0.4866, 0.49, 0.6353], [0.8733, 0.7407, 0.919, 0.4319, 0.737, 0.6091, 0.3624, 0.4381, 0.8546, 0.0269, 0.1279, 0.4789, 0.2164, 0.0505], [0.2359, 0.1138, 0.814, 0.239, 0.8511, 0.8981, 0.1691, 0.4136, 0.4411, 0.9149, 0.1882, 0.2467, 0.046, 0.2267]], [[0.7414, 0.0678, 0.6694, 0.5357, 0.8167, 0.8649, 0.3392, 0.1336, 0.9719, 0.704, 0.8308, 0.1735, 0.0699, 0.6974], [0.3885, 0.4013, 0.9661, 0.2059, 0.0432, 0.7483, 0.8952, 0.1805, 0.2781, 0.605, 0.7958, 0.4179, 0.8675, 0.1708], [0.7073, 0.0337, 0.6843, 0.0073, 0.6738, 0.6429, 0.1514, 0.8071, 0.2984, 0.5747, 0.8008, 0.4403, 0.2061, 0.9511]]]]], 3, Con72279), 
LZer60699 = zero_padding3D_layer([[[[[1.4605, 1.0099, 1.1636], [1.3379, 1.6121, 1.8373], [1.3245, 1.4112, 1.8732]]], [[[1.3307, 1.2103, 1.2535], [1.0637, 1.7811, 1.7367], [1.6777, 1.9037, 1.8754]]], [[[1.0499, 1.9767, 1.4143], [1.0815, 1.4804, 1.9018], [1.7134, 1.624, 1.8493]]]]], 1, 1, 1, 1, 1, 1, Zer60699), 
LRes39437 = reshape_layer(Zer60699, [5, 3, 15], Res39437), 
LCro90870 = cropping2D_layer(Res39437, 2, 0, 2, 0, Cro90870), 
LZer25836 = zero_padding2D_layer(Cro90870, 1, 1, 1, 1, Zer25836), 
LMul37102 = multiply_layer([Con72279,Zer25836], Mul37102), 
LZer8048 = zero_padding2D_layer(Mul37102, 0, 0, 2, 0, Zer8048), 
LMin56853 = minimum_layer([Con69636,Zer8048], Min56853), 
exec_layers([LCon63893,LLea1037,LRes17135,LCro25027,LMul56908,LAdd59251,LZer75252,LCon15041,LSub1240,LRes13081,LRes34577,LZer58126,LCro14314,LRes33039,LRes26010,LZer35273,LFla87874,LRes50966,LMax62687,LRes54844,LAve66560,LCon29324,LAdd11841,LCon65300,LMax46711,LRes47268,LZer65131,LCon69636,LMin48108,LZer64311,LCon72279,LZer60699,LRes39437,LCro90870,LZer25836,LMul37102,LZer8048,LMin56853],["Con63893","Lea1037","Res17135","Cro25027","Mul56908","Add59251","Zer75252","Con15041","Sub1240","Res13081","Res34577","Zer58126","Cro14314","Res33039","Res26010","Zer35273","Fla87874","Res50966","Max62687","Res54844","Ave66560","Con29324","Add11841","Con65300","Max46711","Res47268","Zer65131","Con69636","Min48108","Zer64311","Con72279","Zer60699","Res39437","Cro90870","Zer25836","Mul37102","Zer8048","Min56853"],Min56853,"Min56853")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]]]]

Expected (Unparsed): [[[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]],[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]]]]

Actual:   [[[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]]

Expected: [[[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]]