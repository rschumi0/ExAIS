import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo9854 = tf.keras.layers.Input(shape=([1, 1, 2]))

Glo9854 = keras.layers.GlobalAveragePooling2D(name = 'Glo9854', )(in0Glo9854)
Res15125 = keras.layers.Reshape((2, 1), name = 'Res15125', )(Glo9854)
Res74487 = keras.layers.Reshape((2, 1, 1), name = 'Res74487', )(Res15125)
Res92208 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res92208', )(Res74487)
Con73301 = keras.layers.Conv3DTranspose(4, (1, 1, 1),strides=(1, 8, 1), padding='same', name = 'Con73301', )(Res92208)
ReL29000 = keras.layers.ReLU(max_value=4.837455910395027, negative_slope=7.787958944181525, threshold=5.528142061635119, name = 'ReL29000', )(Con73301)
model = tf.keras.models.Model(inputs=[in0Glo9854], outputs=ReL29000)
w = model.get_layer('Con73301').get_weights() 
w[0] = np.array([[[[[0.4698], [0.3664], [0.1042], [0.0693]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con73301').set_weights(w) 
in0Glo9854 = tf.constant([[[[1.1672, 1.8437]]]])
print (np.array2string(model.predict([in0Glo9854],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='ReL29000.png')

LGlo9854 = global_average_pooling2D_layer([[[[1.1672, 1.8437]]]], Glo9854), 
LRes15125 = reshape_layer(Glo9854, [2, 1], Res15125), 
LRes74487 = reshape_layer(Res15125, [2, 1, 1], Res74487), 
LRes92208 = reshape_layer(Res74487, [2, 1, 1, 1], Res92208), 
LCon73301 = conv3D_transpose_layer(Res92208, 1, 1, 1,[[[[[0.4698], [0.3664], [0.1042], [0.0693]]]]],[0, 0, 0, 0], 1, 8, 1, true, Con73301), 
LReL29000 = relu_layer(Con73301, 4.837455910395027, 7.787958944181525, 5.528142061635119, ReL29000), 
exec_layers([LGlo9854,LRes15125,LRes74487,LRes92208,LCon73301,LReL29000],["Glo9854","Res15125","Res74487","Res92208","Con73301","ReL29000"],ReL29000,"ReL29000")

Actual (Unparsed): [[[[[-38.7824119, -39.7223288, -42.1057544, -42.4229991]], [[-43.0529434, -43.0529434, -43.0529434, -43.0529434]], [[-43.0529434, -43.0529434, -43.0529434, -43.0529434]], [[-43.0529434, -43.0529434, -43.0529434, -43.0529434]], [[-43.0529434, -43.0529434, -43.0529434, -43.0529434]], [[-43.0529434, -43.0529434, -43.0529434, -43.0529434]], [[-43.0529434, -43.0529434, -43.0529434, -43.0529434]], [[-43.0529434, -43.0529434, -43.0529434, -43.0529434]]], [[[-36.3072448, -37.7919303, -41.5567710, -42.0578883]], [[-43.0529434, -43.0529434, -43.0529434, -43.0529434]], [[-43.0529434, -43.0529434, -43.0529434, -43.0529434]], [[-43.0529434, -43.0529434, -43.0529434, -43.0529434]], [[-43.0529434, -43.0529434, -43.0529434, -43.0529434]], [[-43.0529434, -43.0529434, -43.0529434, -43.0529434]], [[-43.0529434, -43.0529434, -43.0529434, -43.0529434]], [[-43.0529434, -43.0529434, -43.0529434, -43.0529434]]]]]

Expected (Unparsed): [[[[[-38.78241176531837,-39.72232869259405,-42.10575440179793,-42.42299909001767]],[[-43.05294341361732,-43.05294341361732,-43.05294341361732,-43.05294341361732]],[[-43.05294341361732,-43.05294341361732,-43.05294341361732,-43.05294341361732]],[[-43.05294341361732,-43.05294341361732,-43.05294341361732,-43.05294341361732]],[[-43.05294341361732,-43.05294341361732,-43.05294341361732,-43.05294341361732]],[[-43.05294341361732,-43.05294341361732,-43.05294341361732,-43.05294341361732]],[[-43.05294341361732,-43.05294341361732,-43.05294341361732,-43.05294341361732]],[[-43.05294341361732,-43.05294341361732,-43.05294341361732,-43.05294341361732]]],[[[-36.30724499006628,-37.79193042428335,-41.55677105147595,-42.05788828217397]],[[-43.05294341361732,-43.05294341361732,-43.05294341361732,-43.05294341361732]],[[-43.05294341361732,-43.05294341361732,-43.05294341361732,-43.05294341361732]],[[-43.05294341361732,-43.05294341361732,-43.05294341361732,-43.05294341361732]],[[-43.05294341361732,-43.05294341361732,-43.05294341361732,-43.05294341361732]],[[-43.05294341361732,-43.05294341361732,-43.05294341361732,-43.05294341361732]],[[-43.05294341361732,-43.05294341361732,-43.05294341361732,-43.05294341361732]],[[-43.05294341361732,-43.05294341361732,-43.05294341361732,-43.05294341361732]]]]]

Actual:   [[[[[-38.7824, -39.7223, -42.1057, -42.4229]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]]], [[[-36.3072, -37.7919, -41.5567, -42.0578]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]]]]]

Expected: [[[[[-38.7824, -39.7223, -42.1057, -42.4229]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]]], [[[-36.3072, -37.7919, -41.5567, -42.0578]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]], [[-43.0529, -43.0529, -43.0529, -43.0529]]]]]