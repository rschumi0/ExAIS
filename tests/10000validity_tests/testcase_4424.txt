import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min38088 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in1Min38088 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in0Con19685 = tf.keras.layers.Input(shape=([2, 6]))
in0Add7820 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Add7820 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Ave3997 = tf.keras.layers.Input(shape=([2, 1]))
in1Ave3997 = tf.keras.layers.Input(shape=([2, 1]))
in0Con34520 = tf.keras.layers.Input(shape=([2, 7]))

Min38088 = keras.layers.Minimum(name = 'Min38088', )([in0Min38088,in1Min38088])
Bat9835 = keras.layers.BatchNormalization(axis=3, epsilon=0.36586549756171316,  name = 'Bat9835', )(Min38088)
Res19769 = keras.layers.Reshape((1, 1, 2), name = 'Res19769', )(Bat9835)
Res73734 = keras.layers.Reshape((1, 2), name = 'Res73734', )(Res19769)
Zer35066 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer35066', )(Res73734)
Con19685 = keras.layers.Concatenate(axis=2, name = 'Con19685', )([Zer35066,in0Con19685])
Add7820 = keras.layers.Add(name = 'Add7820', )([in0Add7820,in1Add7820])
Res15753 = keras.layers.Reshape((2, 2, 4), name = 'Res15753', )(Add7820)
Res64984 = keras.layers.Reshape((2, 8), name = 'Res64984', )(Res15753)
Ave87807 = keras.layers.AveragePooling1D(pool_size=(2), strides=(1), padding='same', name = 'Ave87807', )(Res64984)
Ave3997 = keras.layers.Average(name = 'Ave3997', )([in0Ave3997,in1Ave3997])
Con34520 = keras.layers.Concatenate(axis=2, name = 'Con34520', )([Ave3997,in0Con34520])
Ave54532 = keras.layers.Average(name = 'Ave54532', )([Ave87807,Con34520])
Min82560 = keras.layers.Minimum(name = 'Min82560', )([Con19685,Ave54532])
model = tf.keras.models.Model(inputs=[in0Min38088,in1Min38088,in0Con19685,in0Add7820,in1Add7820,in0Ave3997,in1Ave3997,in0Con34520], outputs=Min82560)
w = model.get_layer('Bat9835').get_weights() 
w[0] = np.array([0.1723])
w[1] = np.array([0.5695])
w[2] = np.array([0.9044])
w[3] = np.array([0.826])
model.get_layer('Bat9835').set_weights(w) 
in0Min38088 = tf.constant([[[[[0.1922, 0.7284]]]]])
in1Min38088 = tf.constant([[[[[0.4162, 0.4617]]]]])
in0Con19685 = tf.constant([[[0.5367, 0.8056, 0.3299, 0.7933, 0.8065, 0.2669], [0.1049, 0.5722, 0.2562, 0.7038, 0.9379, 0.2851]]])
in0Add7820 = tf.constant([[[[[0.359, 0.6622], [0.7956, 0.1341]], [[0.7169, 0.8997], [0.3692, 0.6266]]], [[[0.3145, 0.1906], [0.4216, 0.2223]], [[0.975, 0.4759], [0.8199, 0.2573]]]]])
in1Add7820 = tf.constant([[[[[0.1592, 0.4549], [0.6123, 0.4162]], [[0.8415, 0.6561], [0.2047, 0.3034]]], [[[0.7981, 0.1108], [0.0754, 0.5484]], [[0.1837, 0.9574], [0.7928, 0.3841]]]]])
in0Ave3997 = tf.constant([[[0.6488], [0.6962]]])
in1Ave3997 = tf.constant([[[0.3075], [0.983]]])
in0Con34520 = tf.constant([[[0.9428, 0.7114, 0.066, 0.4836, 0.1575, 0.598, 0.3271], [0.4351, 0.3973, 0.8829, 0.6727, 0.9186, 0.855, 0.2117]]])
print (np.array2string(model.predict([in0Min38088,in1Min38088,in0Con19685,in0Add7820,in1Add7820,in0Ave3997,in1Ave3997,in0Con34520],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min82560.png')

LMin38088 = minimum_layer([[[[[[0.1922, 0.7284]]]]], [[[[[0.4162, 0.4617]]]]]], Min38088), 
LBat9835 = batch_normalization_layer(Min38088, 3, 0.36586549756171316, [0.1723], [0.5695], [0.9044], [0.826], Bat9835), 
LRes19769 = reshape_layer(Bat9835, [1, 1, 2], Res19769), 
LRes73734 = reshape_layer(Res19769, [1, 2], Res73734), 
LZer35066 = zero_padding1D_layer(Res73734, 1, 0, Zer35066), 
LCon19685 = concatenate_layer([Zer35066,[[[0.5367, 0.8056, 0.3299, 0.7933, 0.8065, 0.2669], [0.1049, 0.5722, 0.2562, 0.7038, 0.9379, 0.2851]]]], 2, Con19685), 
LAdd7820 = add_layer([[[[[[0.359, 0.6622], [0.7956, 0.1341]], [[0.7169, 0.8997], [0.3692, 0.6266]]], [[[0.3145, 0.1906], [0.4216, 0.2223]], [[0.975, 0.4759], [0.8199, 0.2573]]]]], [[[[[0.1592, 0.4549], [0.6123, 0.4162]], [[0.8415, 0.6561], [0.2047, 0.3034]]], [[[0.7981, 0.1108], [0.0754, 0.5484]], [[0.1837, 0.9574], [0.7928, 0.3841]]]]]], Add7820), 
LRes15753 = reshape_layer(Add7820, [2, 2, 4], Res15753), 
LRes64984 = reshape_layer(Res15753, [2, 8], Res64984), 
LAve87807 = average_pooling1D_layer(Res64984, 2, 1, true, Ave87807), 
LAve3997 = average_layer([[[[0.6488], [0.6962]]], [[[0.3075], [0.983]]]], Ave3997), 
LCon34520 = concatenate_layer([Ave3997,[[[0.9428, 0.7114, 0.066, 0.4836, 0.1575, 0.598, 0.3271], [0.4351, 0.3973, 0.8829, 0.6727, 0.9186, 0.855, 0.2117]]]], 2, Con34520), 
LAve54532 = average_layer([Ave87807,Con34520], Ave54532), 
LMin82560 = minimum_layer([Con19685,Ave54532], Min82560), 
exec_layers([LMin38088,LBat9835,LRes19769,LRes73734,LZer35066,LCon19685,LAdd7820,LRes15753,LRes64984,LAve87807,LAve3997,LCon34520,LAve54532,LMin82560],["Min38088","Bat9835","Res19769","Res73734","Zer35066","Con19685","Add7820","Res15753","Res64984","Ave87807","Ave3997","Con34520","Ave54532","Min82560"],Min82560,"Min82560")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.5367000, 0.3632500, 0.3299000, 0.7933000, 0.8065000, 0.2669000], [0.4570981, 0.3682500, 0.1049000, 0.5722000, 0.2562000, 0.7038000, 0.9379000, 0.2851000]]]

Expected (Unparsed): [[[0,0,0.5367,0.36324999999999996,0.3299,0.7933,0.8065,0.2669],[0.4570981076620033,0.36824999999999997,0.1049,0.5722,0.2562,0.7038,0.9379,0.2851]]]

Actual:   [[[0, 0, 0.5367, 0.3633, 0.3299, 0.7933, 0.8065, 0.2669], [0.4571, 0.3683, 0.1049, 0.5722, 0.2562, 0.7038, 0.9379, 0.2851]]]

Expected: [[[0, 0, 0.5367, 0.3633, 0.3299, 0.7933, 0.8065, 0.2669], [0.4571, 0.3683, 0.1049, 0.5722, 0.2562, 0.7038, 0.9379, 0.2851]]]