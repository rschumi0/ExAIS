import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo8954 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con8544 = tf.keras.layers.Input(shape=([3, 5, 3]))
in0Per49246 = tf.keras.layers.Input(shape=([4, 2]))
in0Con21510 = tf.keras.layers.Input(shape=([3, 5, 3]))
in0Den78441 = tf.keras.layers.Input(shape=([3, 5, 3]))

Glo8954 = keras.layers.GlobalMaxPool2D(name = 'Glo8954', )(in0Glo8954)
Den10781 = keras.layers.Dense(3,name = 'Den10781', )(Glo8954)
Res3775 = keras.layers.Reshape((3, 1), name = 'Res3775', )(Den10781)
Res69819 = keras.layers.Reshape((3, 1, 1), name = 'Res69819', )(Res3775)
Zer79005 = keras.layers.ZeroPadding2D(padding=((0, 0), (4, 0)), name = 'Zer79005', )(Res69819)
Con8544 = keras.layers.Concatenate(axis=3, name = 'Con8544', )([Zer79005,in0Con8544])
Per49246 = keras.layers.Permute((1,2), name = 'Per49246',)(in0Per49246)
Sim15696 = keras.layers.SimpleRNN(1,name = 'Sim15696', )(Per49246)
Res89906 = keras.layers.Reshape((1, 1), name = 'Res89906', )(Sim15696)
Res33756 = keras.layers.Reshape((1, 1, 1), name = 'Res33756', )(Res89906)
Zer34102 = keras.layers.ZeroPadding2D(padding=((2, 0), (4, 0)), name = 'Zer34102', )(Res33756)
Con21510 = keras.layers.Concatenate(axis=3, name = 'Con21510', )([Zer34102,in0Con21510])
Den78441 = keras.layers.Dense(4,name = 'Den78441', )(in0Den78441)
Mul1121 = keras.layers.Multiply(name = 'Mul1121', )([Con21510,Den78441])
Add96898 = keras.layers.Add(name = 'Add96898', )([Con8544,Mul1121])
model = tf.keras.models.Model(inputs=[in0Glo8954,in0Con8544,in0Per49246,in0Con21510,in0Den78441], outputs=Add96898)
w = model.get_layer('Den10781').get_weights() 
w[0] = np.array([[0.3072, 0.0248, 0.6064]])
w[1] = np.array([0.7738, 0.0527, 0.6386])
model.get_layer('Den10781').set_weights(w) 
w = model.get_layer('Sim15696').get_weights() 
w[0] = np.array([[1], [4]])
w[1] = np.array([[10]])
w[2] = np.array([3])
model.get_layer('Sim15696').set_weights(w) 
w = model.get_layer('Den78441').get_weights() 
w[0] = np.array([[0.8632, 0.9398, 0.4156, 0.9069], [0.8764, 0.8344, 0.9546, 0.4547], [0.4942, 0.8201, 0.4661, 0.8945]])
w[1] = np.array([0.0732, 0.1637, 0.7019, 0.426])
model.get_layer('Den78441').set_weights(w) 
in0Glo8954 = tf.constant([[[[1.0154]], [[1.567]]]])
in0Con8544 = tf.constant([[[[0.8579, 0.4826, 0.9292], [0.325, 0.2147, 0.7555], [0.8021, 0.9105, 0.4904], [0.8814, 0.4157, 0.507], [0.5105, 0.3415, 0.2318]], [[0.8246, 0.88, 0.0877], [0.0791, 0.187, 0.0045], [0.5218, 0.4698, 0.9017], [0.3367, 0.9913, 0.0358], [0.4694, 0.5059, 0.1634]], [[0.1269, 0.1045, 0.3643], [0.0254, 0.8252, 0.3801], [0.2734, 0.8056, 0.2423], [0.8099, 0.1434, 0.8052], [0.9873, 0.829, 0.839]]]])
in0Per49246 = tf.constant([[[1.1412, 1.8976], [1.0158, 1.989], [1.4028, 1.7326], [1.0199, 1.5411]]])
in0Con21510 = tf.constant([[[[0.2411, 0.2088, 0.7305], [0.4521, 0.4828, 0.9758], [0.113, 0.7404, 0.2792], [0.7595, 0.2887, 0.5014], [0.9355, 0.102, 0.0204]], [[0.9509, 0.3783, 0.2589], [0.2209, 0.0809, 0.0453], [0.9294, 0.1619, 0.7248], [0.3005, 0.027, 0.5827], [0.5911, 0.0382, 0.5748]], [[0.5261, 0.6721, 0.4449], [0.9966, 0.6092, 0.324], [0.5918, 0.9122, 0.2225], [0.358, 0.6472, 0.0469], [0.8436, 0.6815, 0.0202]]]])
in0Den78441 = tf.constant([[[[0.4604, 0.3204, 0.4714], [0.4039, 0.2811, 0.8785], [0.3901, 0.3816, 0.7135], [0.1562, 0.0295, 0.7235], [0.3919, 0.0699, 0.0064]], [[0.4446, 0.242, 0.2527], [0.1102, 0.6885, 0.0556], [0.6341, 0.0557, 0.4287], [0.3611, 0.7541, 0.1631], [0.4673, 0.74, 0.5016]], [[0.3173, 0.2572, 0.8115], [0.3648, 0.5891, 0.5466], [0.3406, 0.0821, 0.5851], [0.2253, 0.3117, 0.7893], [0.933, 0.0383, 0.3541]]]])
print (np.array2string(model.predict([in0Glo8954,in0Con8544,in0Per49246,in0Con21510,in0Den78441],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add96898.png')

LGlo8954 = global_max_pool2D_layer([[[[1.0154]], [[1.567]]]], Glo8954), 
LDen10781 = dense_layer(Glo8954, [[0.3072, 0.0248, 0.6064]],[0.7738, 0.0527, 0.6386], Den10781), 
LRes3775 = reshape_layer(Den10781, [3, 1], Res3775), 
LRes69819 = reshape_layer(Res3775, [3, 1, 1], Res69819), 
LZer79005 = zero_padding2D_layer(Res69819, 0, 0, 4, 0, Zer79005), 
LCon8544 = concatenate_layer([Zer79005,[[[[0.8579, 0.4826, 0.9292], [0.325, 0.2147, 0.7555], [0.8021, 0.9105, 0.4904], [0.8814, 0.4157, 0.507], [0.5105, 0.3415, 0.2318]], [[0.8246, 0.88, 0.0877], [0.0791, 0.187, 0.0045], [0.5218, 0.4698, 0.9017], [0.3367, 0.9913, 0.0358], [0.4694, 0.5059, 0.1634]], [[0.1269, 0.1045, 0.3643], [0.0254, 0.8252, 0.3801], [0.2734, 0.8056, 0.2423], [0.8099, 0.1434, 0.8052], [0.9873, 0.829, 0.839]]]]], 3, Con8544), 
LPer49246 = permute_layer([[[1.1412, 1.8976], [1.0158, 1.989], [1.4028, 1.7326], [1.0199, 1.5411]]], 1,2, Per49246), 
LSim15696 = simple_rnn_layer(Per49246,[[1], [4]],[[10]],[3], Sim15696), 
LRes89906 = reshape_layer(Sim15696, [1, 1], Res89906), 
LRes33756 = reshape_layer(Res89906, [1, 1, 1], Res33756), 
LZer34102 = zero_padding2D_layer(Res33756, 2, 0, 4, 0, Zer34102), 
LCon21510 = concatenate_layer([Zer34102,[[[[0.2411, 0.2088, 0.7305], [0.4521, 0.4828, 0.9758], [0.113, 0.7404, 0.2792], [0.7595, 0.2887, 0.5014], [0.9355, 0.102, 0.0204]], [[0.9509, 0.3783, 0.2589], [0.2209, 0.0809, 0.0453], [0.9294, 0.1619, 0.7248], [0.3005, 0.027, 0.5827], [0.5911, 0.0382, 0.5748]], [[0.5261, 0.6721, 0.4449], [0.9966, 0.6092, 0.324], [0.5918, 0.9122, 0.2225], [0.358, 0.6472, 0.0469], [0.8436, 0.6815, 0.0202]]]]], 3, Con21510), 
LDen78441 = dense_layer([[[[0.4604, 0.3204, 0.4714], [0.4039, 0.2811, 0.8785], [0.3901, 0.3816, 0.7135], [0.1562, 0.0295, 0.7235], [0.3919, 0.0699, 0.0064]], [[0.4446, 0.242, 0.2527], [0.1102, 0.6885, 0.0556], [0.6341, 0.0557, 0.4287], [0.3611, 0.7541, 0.1631], [0.4673, 0.74, 0.5016]], [[0.3173, 0.2572, 0.8115], [0.3648, 0.5891, 0.5466], [0.3406, 0.0821, 0.5851], [0.2253, 0.3117, 0.7893], [0.933, 0.0383, 0.3541]]]], [[0.8632, 0.9398, 0.4156, 0.9069], [0.8764, 0.8344, 0.9546, 0.4547], [0.4942, 0.8201, 0.4661, 0.8945]],[0.0732, 0.1637, 0.7019, 0.426], Den78441), 
LMul1121 = multiply_layer([Con21510,Den78441], Mul1121), 
LAdd96898 = add_layer([Con8544,Mul1121], Add96898), 
exec_layers([LGlo8954,LDen10781,LRes3775,LRes69819,LZer79005,LCon8544,LPer49246,LSim15696,LRes89906,LRes33756,LZer34102,LCon21510,LDen78441,LMul1121,LAdd96898],["Glo8954","Den10781","Res3775","Res69819","Zer79005","Con8544","Per49246","Sim15696","Res89906","Res33756","Zer34102","Con21510","Den78441","Mul1121","Add96898"],Add96898,"Add96898")

Actual (Unparsed): [[[[0.0000000, 1.1593524, 0.7788487, 1.9598551], [0.0000000, 1.0023782, 0.9618657, 2.4201478], [0.0000000, 0.9641267, 2.0661632, 0.9347526], [0.0000000, 1.5865608, 0.7425664, 1.1228407], [1.2551824, 1.0676659, 0.4368173, 0.2485060]], [[0.0000000, 1.7666558, 1.3473792, 0.3893923], [0.0000000, 0.2751152, 0.3027563, 0.0447597], [0.0000000, 1.5977479, 0.6670622, 1.9235696], [0.0000000, 0.7171454, 1.0357922, 0.7596671], [0.0915616, 1.4338900, 0.5760471, 1.1031713]], [[0.0000000, 0.8329353, 1.0841080, 1.0568291], [0.0000000, 1.4668331, 1.8429515, 0.8705176], [0.0000000, 0.8842208, 1.8952604, 0.5305694], [0.0000000, 1.2691511, 1.0889438, 0.8745221], [2.6759568, 2.1370326, 1.7089951, 0.8714471]]]]

Expected (Unparsed): [[[[0.0,1.159352349702,0.7788487014559999,1.95985510117],[0.0,1.002378224611,0.9618657097,2.4201477918139997],[0.0,0.9641266738100001,2.066163165108,0.934752652032],[0.0,1.5865607446449999,0.742566362299,1.1228406290519999],[1.2551824,1.06766585711,0.43681728844,0.248506017776]],[[0.0,1.766655821735,1.347379220269,0.389392361581],[0.0,0.27511515552800003,0.302756281142,0.04475971950899999],[0.0,1.5977479128220002,0.667062238475,1.923569593904],[0.0,0.7171453595649999,1.0357921641099999,0.7596671220869999],[0.09156159999999999,1.43389000837,0.576047028248,1.1031713120359998]],[[0.0,0.8329353383570002,1.084108030115,1.056829097704],[0.0,1.4668331474840002,1.8429514511999998,0.87051760716],[0.0,0.884220824834,1.895260418786,0.5305694336],[0.0,1.2691511172999999,1.088943816056,0.874522111929],[2.67595674,2.137032595188,1.708995046185,0.8714471622319999]]]]

Actual:   [[[[0, 1.1594, 0.7789, 1.9599], [0, 1.0024, 0.9619, 2.4202], [0, 0.9642, 2.0662, 0.9348], [0, 1.5866, 0.7426, 1.1229], [1.2552, 1.0677, 0.4369, 0.2486]], [[0, 1.7667, 1.3474, 0.3894], [0, 0.2752, 0.3028, 0.0448], [0, 1.5978, 0.6671, 1.9236], [0, 0.7172, 1.0358, 0.7597], [0.0916, 1.4339, 0.5761, 1.1032]], [[0, 0.833, 1.0842, 1.0569], [0, 1.4669, 1.843, 0.8706], [0, 0.8843, 1.8953, 0.5306], [0, 1.2692, 1.089, 0.8746], [2.676, 2.1371, 1.709, 0.8715]]]]

Expected: [[[[0, 1.1594, 0.7789, 1.9599], [0, 1.0024, 0.9619, 2.4202], [0, 0.9642, 2.0662, 0.9348], [0, 1.5866, 0.7426, 1.1229], [1.2552, 1.0677, 0.4369, 0.2486]], [[0, 1.7667, 1.3474, 0.3894], [0, 0.2752, 0.3028, 0.0448], [0, 1.5978, 0.6671, 1.9236], [0, 0.7172, 1.0358, 0.7597], [0.0916, 1.4339, 0.5761, 1.1032]], [[0, 0.833, 1.0842, 1.0569], [0, 1.4669, 1.843, 0.8706], [0, 0.8843, 1.8953, 0.5306], [0, 1.2692, 1.089, 0.8746], [2.676, 2.1371, 1.709, 0.8715]]]]