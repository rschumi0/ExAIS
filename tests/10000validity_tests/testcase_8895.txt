import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Thr33289 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in0Min699 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Min699 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con92814 = tf.keras.layers.Input(shape=([2, 1, 3]))
in0Con62996 = tf.keras.layers.Input(shape=([4, 4, 1, 1]))
in0Min89533 = tf.keras.layers.Input(shape=([1, 2]))
in1Min89533 = tf.keras.layers.Input(shape=([1, 2]))
in0Con89550 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Add96679 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in1Add96679 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))

Thr33289 = keras.layers.ThresholdedReLU(theta=9.699982818229621, name = 'Thr33289', input_shape=(2, 1, 2, 2))(in0Thr33289)
Res6154 = keras.layers.Reshape((2, 1, 4), name = 'Res6154', )(Thr33289)
Min699 = keras.layers.Minimum(name = 'Min699', )([in0Min699,in1Min699])
Con92814 = keras.layers.Concatenate(axis=3, name = 'Con92814', )([Min699,in0Con92814])
Add93812 = keras.layers.Add(name = 'Add93812', )([Res6154,Con92814])
Res40180 = keras.layers.Reshape((2, 4), name = 'Res40180', )(Add93812)
Zer77422 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer77422', )(Res40180)
Res95984 = keras.layers.Reshape((4, 4, 1), name = 'Res95984', )(Zer77422)
Res11561 = keras.layers.Reshape((4, 4, 1, 1), name = 'Res11561', )(Res95984)
Con62996 = keras.layers.Concatenate(axis=4, name = 'Con62996', )([Res11561,in0Con62996])
Min89533 = keras.layers.Minimum(name = 'Min89533', )([in0Min89533,in1Min89533])
Res34050 = keras.layers.Reshape((1, 2, 1), name = 'Res34050', )(Min89533)
Res74004 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res74004', )(Res34050)
Con89550 = keras.layers.Concatenate(axis=4, name = 'Con89550', )([Res74004,in0Con89550])
Add96679 = keras.layers.Add(name = 'Add96679', )([in0Add96679,in1Add96679])
Zer77236 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (0, 0)), name = 'Zer77236', )(Add96679)
Min74372 = keras.layers.Minimum(name = 'Min74372', )([Con89550,Zer77236])
Zer97013 = keras.layers.ZeroPadding3D(padding=((3, 0), (2, 0), (0, 0)), name = 'Zer97013', )(Min74372)
Ave78997 = keras.layers.Average(name = 'Ave78997', )([Con62996,Zer97013])
model = tf.keras.models.Model(inputs=[in0Thr33289,in0Min699,in1Min699,in0Con92814,in0Con62996,in0Min89533,in1Min89533,in0Con89550,in0Add96679,in1Add96679], outputs=Ave78997)
in0Thr33289 = tf.constant([[[[[0.0655, 0.3147], [0.4927, 0.199]]], [[[0.5838, 0.9567], [0.2333, 0.855]]]]])
in0Min699 = tf.constant([[[[0.5087]], [[0.4148]]]])
in1Min699 = tf.constant([[[[0.76]], [[0.6073]]]])
in0Con92814 = tf.constant([[[[0.7818, 0.5335, 0.4038]], [[0.6763, 0.8955, 0.3349]]]])
in0Con62996 = tf.constant([[[[[0.1122]], [[0.0874]], [[0.935]], [[0.0762]]], [[[0.8055]], [[0.6347]], [[0.4867]], [[0.7716]]], [[[0.2273]], [[0.5762]], [[0.8144]], [[0.939]]], [[[0.8155]], [[0.0659]], [[0.4486]], [[0.9028]]]]])
in0Min89533 = tf.constant([[[0.8169, 0.5986]]])
in1Min89533 = tf.constant([[[0.273, 0.4524]]])
in0Con89550 = tf.constant([[[[[0.8863]], [[0.241]]]]])
in0Add96679 = tf.constant([[[[[0.7146, 0.214]]]]])
in1Add96679 = tf.constant([[[[[0.8344, 0.9605]]]]])
print (np.array2string(model.predict([in0Thr33289,in0Min699,in1Min699,in0Con92814,in0Con62996,in0Min89533,in1Min89533,in0Con89550,in0Add96679,in1Add96679],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave78997.png')

LThr33289 = thresholded_relu_layer([[[[[0.0655, 0.3147], [0.4927, 0.199]]], [[[0.5838, 0.9567], [0.2333, 0.855]]]]], 9.699982818229621, Thr33289), 
LRes6154 = reshape_layer(Thr33289, [2, 1, 4], Res6154), 
LMin699 = minimum_layer([[[[[0.5087]], [[0.4148]]]], [[[[0.76]], [[0.6073]]]]], Min699), 
LCon92814 = concatenate_layer([Min699,[[[[0.7818, 0.5335, 0.4038]], [[0.6763, 0.8955, 0.3349]]]]], 3, Con92814), 
LAdd93812 = add_layer([Res6154,Con92814], Add93812), 
LRes40180 = reshape_layer(Add93812, [2, 4], Res40180), 
LZer77422 = zero_padding1D_layer(Res40180, 1, 1, Zer77422), 
LRes95984 = reshape_layer(Zer77422, [4, 4, 1], Res95984), 
LRes11561 = reshape_layer(Res95984, [4, 4, 1, 1], Res11561), 
LCon62996 = concatenate_layer([Res11561,[[[[[0.1122]], [[0.0874]], [[0.935]], [[0.0762]]], [[[0.8055]], [[0.6347]], [[0.4867]], [[0.7716]]], [[[0.2273]], [[0.5762]], [[0.8144]], [[0.939]]], [[[0.8155]], [[0.0659]], [[0.4486]], [[0.9028]]]]]], 4, Con62996), 
LMin89533 = minimum_layer([[[[0.8169, 0.5986]]], [[[0.273, 0.4524]]]], Min89533), 
LRes34050 = reshape_layer(Min89533, [1, 2, 1], Res34050), 
LRes74004 = reshape_layer(Res34050, [1, 2, 1, 1], Res74004), 
LCon89550 = concatenate_layer([Res74004,[[[[[0.8863]], [[0.241]]]]]], 4, Con89550), 
LAdd96679 = add_layer([[[[[[0.7146, 0.214]]]]], [[[[[0.8344, 0.9605]]]]]], Add96679), 
LZer77236 = zero_padding3D_layer(Add96679, 0, 0, 1, 0, 0, 0, Zer77236), 
LMin74372 = minimum_layer([Con89550,Zer77236], Min74372), 
LZer97013 = zero_padding3D_layer(Min74372, 3, 0, 2, 0, 0, 0, Zer97013), 
LAve78997 = average_layer([Con62996,Zer97013], Ave78997), 
exec_layers([LThr33289,LRes6154,LMin699,LCon92814,LAdd93812,LRes40180,LZer77422,LRes95984,LRes11561,LCon62996,LMin89533,LRes34050,LRes74004,LCon89550,LAdd96679,LZer77236,LMin74372,LZer97013,LAve78997],["Thr33289","Res6154","Min699","Con92814","Add93812","Res40180","Zer77422","Res95984","Res11561","Con62996","Min89533","Res34050","Res74004","Con89550","Add96679","Zer77236","Min74372","Zer97013","Ave78997"],Ave78997,"Ave78997")

Actual (Unparsed): [[[[[0.0000000, 0.0561000]], [[0.0000000, 0.0437000]], [[0.0000000, 0.4675000]], [[0.0000000, 0.0381000]]], [[[0.2543500, 0.4027500]], [[0.3909000, 0.3173500]], [[0.2667500, 0.2433500]], [[0.2019000, 0.3858000]]], [[[0.2074000, 0.1136500]], [[0.3381500, 0.2881000]], [[0.4477500, 0.4072000]], [[0.1674500, 0.4695000]]], [[[0.0000000, 0.4077500]], [[0.0000000, 0.0329500]], [[0.0000000, 0.2243000]], [[0.2262000, 0.5719000]]]]]

Expected (Unparsed): [[[[[0,0.0561]],[[0,0.0437]],[[0,0.4675]],[[0,0.0381]]],[[[0.25435,0.40275]],[[0.3909,0.31735]],[[0.26675,0.24335]],[[0.2019,0.3858]]],[[[0.2074,0.11365]],[[0.33815,0.2881]],[[0.44775,0.4072]],[[0.16745,0.4695]]],[[[0,0.40775]],[[0,0.03295]],[[0,0.2243]],[[0.2262,0.5719000000000001]]]]]

Actual:   [[[[[0, 0.0561]], [[0, 0.0437]], [[0, 0.4675]], [[0, 0.0381]]], [[[0.2544, 0.4028]], [[0.3909, 0.3174]], [[0.2668, 0.2434]], [[0.2019, 0.3858]]], [[[0.2074, 0.1137]], [[0.3382, 0.2881]], [[0.4478, 0.4072]], [[0.1675, 0.4695]]], [[[0, 0.4078]], [[0, 0.033]], [[0, 0.2243]], [[0.2262, 0.5719]]]]]

Expected: [[[[[0, 0.0561]], [[0, 0.0437]], [[0, 0.4675]], [[0, 0.0381]]], [[[0.2544, 0.4028]], [[0.3909, 0.3174]], [[0.2668, 0.2434]], [[0.2019, 0.3858]]], [[[0.2074, 0.1137]], [[0.3382, 0.2881]], [[0.4478, 0.4072]], [[0.1675, 0.4695]]], [[[0, 0.4078]], [[0, 0.033]], [[0, 0.2243]], [[0.2262, 0.572]]]]]