import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con93323 = tf.keras.layers.Input(shape=([1, 1]))
in0Con77054 = tf.keras.layers.Input(shape=([1, 3, 7]))
in0Con97521 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))

Con93323 = keras.layers.Conv1D(3, (1),strides=(1), padding='same', dilation_rate=(1), name = 'Con93323', )(in0Con93323)
ELU73149 = keras.layers.ELU(alpha=-3.433589521671843, name = 'ELU73149', )(Con93323)
Res88379 = keras.layers.Reshape((1, 3, 1), name = 'Res88379', )(ELU73149)
Con77054 = keras.layers.Concatenate(axis=3, name = 'Con77054', )([Res88379,in0Con77054])
Con97521 = keras.layers.Conv3DTranspose(4, (1, 1, 1),strides=(1, 1, 1), padding='valid', name = 'Con97521', )(in0Con97521)
Res56473 = keras.layers.Reshape((2, 1, 8), name = 'Res56473', )(Con97521)
Cro40612 = keras.layers.Cropping2D(cropping=((1, 0), (0, 0)), name = 'Cro40612', )(Res56473)
Zer13783 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer13783', )(Cro40612)
Add57107 = keras.layers.Add(name = 'Add57107', )([Con77054,Zer13783])
model = tf.keras.models.Model(inputs=[in0Con93323,in0Con77054,in0Con97521], outputs=Add57107)
w = model.get_layer('Con93323').get_weights() 
w[0] = np.array([[[0.1726, 0.1207, 0.6936]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con93323').set_weights(w) 
w = model.get_layer('Con97521').get_weights() 
w[0] = np.array([[[[[0.7714, 0.2695], [0.3196, 0.0675], [0.1504, 0.1033], [0.2844, 0.019]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con97521').set_weights(w) 
in0Con93323 = tf.constant([[[0.0706]]])
in0Con77054 = tf.constant([[[[0.8849, 0.1068, 0.6347, 0.854, 0.4458, 0.6974, 0.2733], [0.4438, 0.8413, 0.5156, 0.3447, 0.0961, 0.2979, 0.0574], [0.6247, 0.422, 0.4734, 0.4518, 0.1424, 0.5408, 0.2293]]]])
in0Con97521 = tf.constant([[[[[0.3911, 0.0856], [0.2511, 0.0132]]], [[[0.4619, 0.365], [0.4326, 0.822]]]]])
print (np.array2string(model.predict([in0Con93323,in0Con77054,in0Con97521],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add57107.png')

LCon93323 = conv1D_layer([[[0.0706]]], 1,[[[0.1726, 0.1207, 0.6936]]],[0, 0, 0], 1, true, 1, Con93323), 
LELU73149 = elu_layer(Con93323, -3.433589521671843, ELU73149), 
LRes88379 = reshape_layer(ELU73149, [1, 3, 1], Res88379), 
LCon77054 = concatenate_layer([Res88379,[[[[0.8849, 0.1068, 0.6347, 0.854, 0.4458, 0.6974, 0.2733], [0.4438, 0.8413, 0.5156, 0.3447, 0.0961, 0.2979, 0.0574], [0.6247, 0.422, 0.4734, 0.4518, 0.1424, 0.5408, 0.2293]]]]], 3, Con77054), 
LCon97521 = conv3D_transpose_layer([[[[[0.3911, 0.0856], [0.2511, 0.0132]]], [[[0.4619, 0.365], [0.4326, 0.822]]]]], 1, 1, 1,[[[[[0.7714, 0.2695], [0.3196, 0.0675], [0.1504, 0.1033], [0.2844, 0.019]]]]],[0, 0, 0, 0], 1, 1, 1, false, Con97521), 
LRes56473 = reshape_layer(Con97521, [2, 1, 8], Res56473), 
LCro40612 = cropping2D_layer(Res56473, 1, 0, 0, 0, Cro40612), 
LZer13783 = zero_padding2D_layer(Cro40612, 0, 0, 2, 0, Zer13783), 
LAdd57107 = add_layer([Con77054,Zer13783], Add57107), 
exec_layers([LCon93323,LELU73149,LRes88379,LCon77054,LCon97521,LRes56473,LCro40612,LZer13783,LAdd57107],["Con93323","ELU73149","Res88379","Con77054","Con97521","Res56473","Cro40612","Zer13783","Add57107"],Add57107,"Add57107")

Actual (Unparsed): [[[[0.0121856, 0.8849000, 0.1068000, 0.6347000, 0.8540000, 0.4458000, 0.6974000, 0.2733000], [0.0085214, 0.4438000, 0.8413000, 0.5156000, 0.3447000, 0.0961000, 0.2979000, 0.0574000], [0.5036453, 0.7969607, 0.5291743, 0.6116994, 1.0070366, 0.3361440, 0.6907756, 0.3679494]]]]

Expected (Unparsed): [[[[0.01218556,0.8849,0.1068,0.6347,0.854,0.4458,0.6974,0.2733],[0.00852142,0.4438,0.8413,0.5156,0.3447,0.0961,0.2979,0.0574],[0.50364532,0.7969607400000001,0.52917426,0.61169936,1.00703664,0.33614396,0.6907756399999999,0.36794943999999996]]]]

Actual:   [[[[0.0122, 0.8849, 0.1068, 0.6347, 0.854, 0.4458, 0.6974, 0.2733], [0.0086, 0.4438, 0.8413, 0.5156, 0.3447, 0.0961, 0.2979, 0.0574], [0.5037, 0.797, 0.5292, 0.6117, 1.0071, 0.3362, 0.6908, 0.368]]]]

Expected: [[[[0.0122, 0.8849, 0.1068, 0.6347, 0.854, 0.4458, 0.6974, 0.2733], [0.0086, 0.4438, 0.8413, 0.5156, 0.3447, 0.0961, 0.2979, 0.0574], [0.5037, 0.797, 0.5292, 0.6117, 1.0071, 0.3362, 0.6908, 0.368]]]]