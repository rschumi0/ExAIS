import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Up_92107 = tf.keras.layers.Input(shape=([1, 4, 1, 2]))
in0Cro90633 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))

Up_92107 = keras.layers.UpSampling3D(size=(2, 2, 1), name = 'Up_92107', )(in0Up_92107)
Cro90633 = keras.layers.Cropping3D(cropping=((1, 0), (0, 1), (0, 0)), name = 'Cro90633', )(in0Cro90633)
Zer94020 = keras.layers.ZeroPadding3D(padding=((1, 0), (7, 0), (0, 0)), name = 'Zer94020', )(Cro90633)
Sub60076 = keras.layers.Subtract(name = 'Sub60076', )([Up_92107,Zer94020])
Res93900 = keras.layers.Reshape((2, 8, 2), name = 'Res93900', )(Sub60076)
Res88052 = keras.layers.Reshape((2, 16), name = 'Res88052', )(Res93900)
Per26827 = keras.layers.Permute((1,2), name = 'Per26827',)(Res88052)
model = tf.keras.models.Model(inputs=[in0Up_92107,in0Cro90633], outputs=Per26827)
in0Up_92107 = tf.constant([[[[[1.417, 1.2568]], [[1.1209, 1.4839]], [[1.0491, 1.2039]], [[1.1593, 1.6081]]]]])
in0Cro90633 = tf.constant([[[[[1.9891, 1.5739]], [[1.0955, 1.7467]]], [[[1.895, 1.7239]], [[1.476, 1.109]]]]])
print (np.array2string(model.predict([in0Up_92107,in0Cro90633],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Per26827.png')

LUp_92107 = up_sampling3D_layer([[[[[1.417, 1.2568]], [[1.1209, 1.4839]], [[1.0491, 1.2039]], [[1.1593, 1.6081]]]]], 2, 2, 1, Up_92107), 
LCro90633 = cropping3D_layer([[[[[1.9891, 1.5739]], [[1.0955, 1.7467]]], [[[1.895, 1.7239]], [[1.476, 1.109]]]]], 1, 0, 0, 1, 0, 0, Cro90633), 
LZer94020 = zero_padding3D_layer(Cro90633, 1, 0, 7, 0, 0, 0, Zer94020), 
LSub60076 = subtract_layer(Up_92107,Zer94020, Sub60076), 
LRes93900 = reshape_layer(Sub60076, [2, 8, 2], Res93900), 
LRes88052 = reshape_layer(Res93900, [2, 16], Res88052), 
LPer26827 = permute_layer(Res88052, 1,2, Per26827), 
exec_layers([LUp_92107,LCro90633,LZer94020,LSub60076,LRes93900,LRes88052,LPer26827],["Up_92107","Cro90633","Zer94020","Sub60076","Res93900","Res88052","Per26827"],Per26827,"Per26827")

Actual (Unparsed): [[[1.4170001, 1.2568001, 1.4170001, 1.2568001, 1.1209000, 1.4839000, 1.1209000, 1.4839000, 1.0491000, 1.2039000, 1.0491000, 1.2039000, 1.1593000, 1.6081001, 1.1593000, 1.6081001], [1.4170001, 1.2568001, 1.4170001, 1.2568001, 1.1209000, 1.4839000, 1.1209000, 1.4839000, 1.0491000, 1.2039000, 1.0491000, 1.2039000, 1.1593000, 1.6081001, -0.7357000, -0.1157999]]]

Expected (Unparsed): [[[1.417,1.2568,1.417,1.2568,1.1209,1.4839,1.1209,1.4839,1.0491,1.2039,1.0491,1.2039,1.1593,1.6081,1.1593,1.6081],[1.417,1.2568,1.417,1.2568,1.1209,1.4839,1.1209,1.4839,1.0491,1.2039,1.0491,1.2039,1.1593,1.6081,-0.7357,-0.1157999999999999]]]

Actual:   [[[1.4171, 1.2569, 1.4171, 1.2569, 1.1209, 1.4839, 1.1209, 1.4839, 1.0491, 1.2039, 1.0491, 1.2039, 1.1593, 1.6082, 1.1593, 1.6082], [1.4171, 1.2569, 1.4171, 1.2569, 1.1209, 1.4839, 1.1209, 1.4839, 1.0491, 1.2039, 1.0491, 1.2039, 1.1593, 1.6082, -0.7357, -0.1157]]]

Expected: [[[1.417, 1.2568, 1.417, 1.2568, 1.1209, 1.4839, 1.1209, 1.4839, 1.0491, 1.2039, 1.0491, 1.2039, 1.1593, 1.6081, 1.1593, 1.6081], [1.417, 1.2568, 1.417, 1.2568, 1.1209, 1.4839, 1.1209, 1.4839, 1.0491, 1.2039, 1.0491, 1.2039, 1.1593, 1.6081, -0.7357, -0.1157]]]