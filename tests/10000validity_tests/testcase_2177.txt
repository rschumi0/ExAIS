import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Den24020 = tf.keras.layers.Input(shape=([3, 5]))
in0Den45772 = tf.keras.layers.Input(shape=([4, 5, 3]))
in0Con19972 = tf.keras.layers.Input(shape=([2]))

Den24020 = keras.layers.Dense(1,name = 'Den24020', )(in0Den24020)
Fla53565 = keras.layers.Flatten(name = 'Fla53565', )(Den24020)
Den45772 = keras.layers.Dense(1,name = 'Den45772', )(in0Den45772)
Cro1051 = keras.layers.Cropping2D(cropping=((0, 0), (1, 0)), name = 'Cro1051', )(Den45772)
Res751 = keras.layers.Reshape((4, 4), name = 'Res751', )(Cro1051)
GRU28418 = keras.layers.GRU(1,reset_after=True, recurrent_activation='sigmoid', name = 'GRU28418', )(Res751)
Con19972 = keras.layers.Concatenate(axis=1, name = 'Con19972', )([GRU28418,in0Con19972])
Ave23758 = keras.layers.Average(name = 'Ave23758', )([Fla53565,Con19972])
model = tf.keras.models.Model(inputs=[in0Den24020,in0Den45772,in0Con19972], outputs=Ave23758)
w = model.get_layer('Den24020').get_weights() 
w[0] = np.array([[0.2896], [0.0012], [0.1154], [0.1428], [0.154]])
w[1] = np.array([0.4516])
model.get_layer('Den24020').set_weights(w) 
w = model.get_layer('Den45772').get_weights() 
w[0] = np.array([[0.2462], [0.1054], [0.5138]])
w[1] = np.array([0.519])
model.get_layer('Den45772').set_weights(w) 
w = model.get_layer('GRU28418').get_weights() 
w[0] = np.array([[7, 10, 10], [3, 3, 3], [10, 8, 6], [1, 10, 6]])
w[1] = np.array([[4, 9, 8]])
w[2] = np.array([[5, 2, 2], [10, 10, 3]])
model.get_layer('GRU28418').set_weights(w) 
in0Den24020 = tf.constant([[[0.1746, 0.2391, 0.2718, 0.2064, 0.8621], [0.687, 0.6613, 0.8501, 0.6836, 0.1404], [0.8879, 0.6534, 0.577, 0.5423, 0.3473]]])
in0Den45772 = tf.constant([[[[0.9797, 0.5648, 0.4548], [0.7626, 0.238, 0.9126], [0.8195, 0.1212, 0.7662], [0.1185, 0.4136, 0.6261], [0.8877, 0.7679, 0.3307]], [[0.5967, 0.6928, 0.2769], [0.7745, 0.7486, 0.2031], [0.8144, 0.9475, 0.57], [0.7101, 0.2367, 0.8423], [0.5724, 0.2416, 0.7036]], [[0.2968, 0.0387, 0.3097], [0.7499, 0.7634, 0.5186], [0.3191, 0.981, 0.8588], [0.7268, 0.2733, 0.2333], [0.9117, 0.6909, 0.7079]], [[0.9934, 0.4063, 0.9613], [0.1006, 0.1067, 0.43], [0.4505, 0.3586, 0.3225], [0.9785, 0.9998, 0.3711], [0.0188, 0.2457, 0.0831]]]])
in0Con19972 = tf.constant([[0.7347, 0.9198]])
print (np.array2string(model.predict([in0Den24020,in0Den45772,in0Con19972],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave23758.png')

LDen24020 = dense_layer([[[0.1746, 0.2391, 0.2718, 0.2064, 0.8621], [0.687, 0.6613, 0.8501, 0.6836, 0.1404], [0.8879, 0.6534, 0.577, 0.5423, 0.3473]]], [[0.2896], [0.0012], [0.1154], [0.1428], [0.154]],[0.4516], Den24020), 
LFla53565 = flatten_layer(Den24020, Fla53565), 
LDen45772 = dense_layer([[[[0.9797, 0.5648, 0.4548], [0.7626, 0.238, 0.9126], [0.8195, 0.1212, 0.7662], [0.1185, 0.4136, 0.6261], [0.8877, 0.7679, 0.3307]], [[0.5967, 0.6928, 0.2769], [0.7745, 0.7486, 0.2031], [0.8144, 0.9475, 0.57], [0.7101, 0.2367, 0.8423], [0.5724, 0.2416, 0.7036]], [[0.2968, 0.0387, 0.3097], [0.7499, 0.7634, 0.5186], [0.3191, 0.981, 0.8588], [0.7268, 0.2733, 0.2333], [0.9117, 0.6909, 0.7079]], [[0.9934, 0.4063, 0.9613], [0.1006, 0.1067, 0.43], [0.4505, 0.3586, 0.3225], [0.9785, 0.9998, 0.3711], [0.0188, 0.2457, 0.0831]]]], [[0.2462], [0.1054], [0.5138]],[0.519], Den45772), 
LCro1051 = cropping2D_layer(Den45772, 0, 0, 1, 0, Cro1051), 
LRes751 = reshape_layer(Cro1051, [4, 4], Res751), 
LGRU28418 = gru_layer(Res751,[[7, 10, 10], [3, 3, 3], [10, 8, 6], [1, 10, 6]],[[4, 9, 8]],[[5, 2, 2], [10, 10, 3]], true, GRU28418), 
LCon19972 = concatenate_layer([GRU28418,[[0.7347, 0.9198]]], 1, Con19972), 
LAve23758 = average_layer([Fla53565,Con19972], Ave23758), 
exec_layers([LDen24020,LFla53565,LDen45772,LCro1051,LRes751,LGRU28418,LCon19972,LAve23758],["Den24020","Fla53565","Den45772","Cro1051","Res751","GRU28418","Con19972","Ave23758"],Ave23758,"Ave23758")

Actual (Unparsed): [[0.3480271, 0.8016950, 0.9134152]]

Expected (Unparsed): [[0.348027060000001,0.8016949900000001,0.91341518]]

Actual:   [[0.3481, 0.8017, 0.9135]]

Expected: [[0.3481, 0.8017, 0.9135]]