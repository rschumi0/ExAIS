import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sep63010 = tf.keras.layers.Input(shape=([1, 2, 2]))

Sep63010 = keras.layers.SeparableConv2D(4, (1, 1),strides=(1, 1), padding='same', name = 'Sep63010', )(in0Sep63010)
Thr85871 = keras.layers.ThresholdedReLU(theta=4.703629261410464, name = 'Thr85871', )(Sep63010)
Res18117 = keras.layers.Reshape((1, 2, 4, 1), name = 'Res18117', )(Thr85871)
Up_10211 = keras.layers.UpSampling3D(size=(2, 1, 1), name = 'Up_10211', )(Res18117)
model = tf.keras.models.Model(inputs=[in0Sep63010], outputs=Up_10211)
w = model.get_layer('Sep63010').get_weights() 
w[0] = np.array([[[[0.6202], [0.7424]]]])
w[1] = np.array([[[[0.8417, 0.3758, 0.0948, 0.006], [0.7726, 0.3381, 0.943, 0.6736]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep63010').set_weights(w) 
in0Sep63010 = tf.constant([[[[0.191, 0.7643], [0.8708, 0.9458]]]])
print (np.array2string(model.predict([in0Sep63010],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Up_10211.png')

LSep63010 = separable_conv2D_layer([[[[0.191, 0.7643], [0.8708, 0.9458]]]], 1, 1,[[[[[0.6202], [0.7424]]]],[[[[0.8417, 0.3758, 0.0948, 0.006], [0.7726, 0.3381, 0.943, 0.6736]]]]],[0, 0, 0, 0], 1, 1, true, Sep63010), 
LThr85871 = thresholded_relu_layer(Sep63010, 4.703629261410464, Thr85871), 
LRes18117 = reshape_layer(Thr85871, [1, 2, 4, 1], Res18117), 
LUp_10211 = up_sampling3D_layer(Res18117, 2, 1, 1, Up_10211), 
exec_layers([LSep63010,LThr85871,LRes18117,LUp_10211],["Sep63010","Thr85871","Res18117","Up_10211"],Up_10211,"Up_10211")

Actual (Unparsed): [[[[[0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000]]]]]

Expected (Unparsed): [[[[[0],[0],[0],[0]],[[0],[0],[0],[0]]],[[[0],[0],[0],[0]],[[0],[0],[0],[0]]]]]

Actual:   [[[[[0], [0], [0], [0]], [[0], [0], [0], [0]]], [[[0], [0], [0], [0]], [[0], [0], [0], [0]]]]]

Expected: [[[[[0], [0], [0], [0]], [[0], [0], [0], [0]]], [[[0], [0], [0], [0]], [[0], [0], [0], [0]]]]]