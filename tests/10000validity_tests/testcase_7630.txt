import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Loc70157 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con25503 = tf.keras.layers.Input(shape=([3, 1]))
in0Lea30779 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Dot37186 = tf.keras.layers.Input(shape=([3, 2]))
in1Dot37186 = tf.keras.layers.Input(shape=([3, 2]))
in0Dot18045 = tf.keras.layers.Input(shape=([3]))
in1Dot18045 = tf.keras.layers.Input(shape=([3]))
in0Min96403 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Min96403 = tf.keras.layers.Input(shape=([2, 2, 1]))

Loc70157 = keras.layers.LocallyConnected2D(3, (1, 2),strides=(1, 1), name = 'Loc70157', )(in0Loc70157)
Res957 = keras.layers.Reshape((1, 3), name = 'Res957', )(Loc70157)
Zer96015 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer96015', )(Res957)
Con25503 = keras.layers.Concatenate(axis=2, name = 'Con25503', )([Zer96015,in0Con25503])
Lea30779 = keras.layers.LeakyReLU(alpha=3.3548990015128104, name = 'Lea30779', input_shape=(1, 1, 2))(in0Lea30779)
Res26420 = keras.layers.Reshape((1, 2), name = 'Res26420', )(Lea30779)
Zer56665 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer56665', )(Res26420)
Dot37186 = keras.layers.Dot(axes=(1, 1), name = 'Dot37186', )([in0Dot37186,in1Dot37186])
Sof49341 = keras.layers.Softmax(axis=1, name = 'Sof49341', )(Dot37186)
Min16613 = keras.layers.Minimum(name = 'Min16613', )([Zer56665,Sof49341])
Dot18045 = keras.layers.Dot(axes=(1, 1), name = 'Dot18045', )([in0Dot18045,in1Dot18045])
Res47966 = keras.layers.Reshape((1, 1), name = 'Res47966', )(Dot18045)
Res97166 = keras.layers.Reshape((1, 1, 1), name = 'Res97166', )(Res47966)
Zer91036 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer91036', )(Res97166)
Min96403 = keras.layers.Minimum(name = 'Min96403', )([in0Min96403,in1Min96403])
Sub31309 = keras.layers.Subtract(name = 'Sub31309', )([Zer91036,Min96403])
Sep53251 = keras.layers.SeparableConv2D(2, (1, 1),strides=(1, 1), padding='same', name = 'Sep53251', )(Sub31309)
Res69650 = keras.layers.Reshape((2, 4), name = 'Res69650', )(Sep53251)
Dot80679 = keras.layers.Dot(axes=(1, 1), name = 'Dot80679', )([Min16613,Res69650])
Zer44087 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer44087', )(Dot80679)
Mul68650 = keras.layers.Multiply(name = 'Mul68650', )([Con25503,Zer44087])
model = tf.keras.models.Model(inputs=[in0Loc70157,in0Con25503,in0Lea30779,in0Dot37186,in1Dot37186,in0Dot18045,in1Dot18045,in0Min96403,in1Min96403], outputs=Mul68650)
w = model.get_layer('Loc70157').get_weights() 
w[0] = np.array([[[0.4215, 0.6685, 0.5725], [0.5614, 0.0173, 0.3105]]])
w[1] = np.array([[[0, 0, 0]]])
model.get_layer('Loc70157').set_weights(w) 
w = model.get_layer('Sep53251').get_weights() 
w[0] = np.array([[[[0.0787]]]])
w[1] = np.array([[[[0.5261, 0.47]]]])
w[2] = np.array([0, 0])
model.get_layer('Sep53251').set_weights(w) 
in0Loc70157 = tf.constant([[[[0.0701], [0.0568]]]])
in0Con25503 = tf.constant([[[0.1944], [0.6755], [0.817]]])
in0Lea30779 = tf.constant([[[[0.9364, 0.696]]]])
in0Dot37186 = tf.constant([[[0.6401, 0.8267], [0.489, 0.27], [0.8941, 0.3881]]])
in1Dot37186 = tf.constant([[[0.2693, 0.4098], [0.5358, 0.9095], [0.9, 0.6108]]])
in0Dot18045 = tf.constant([[0.8127, 0.7634, 0.009]])
in1Dot18045 = tf.constant([[0.3034, 0.4219, 0.7931]])
in0Min96403 = tf.constant([[[[0.6314], [0.8057]], [[0.6629], [0.3154]]]])
in1Min96403 = tf.constant([[[[0.1255], [0.7323]], [[0.3312], [0.2471]]]])
print (np.array2string(model.predict([in0Loc70157,in0Con25503,in0Lea30779,in0Dot37186,in1Dot37186,in0Dot18045,in1Dot18045,in0Min96403,in1Min96403],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul68650.png')

LLoc70157 = locally_connected2D_layer([[[[0.0701], [0.0568]]]], 1, 2,[[[0.4215, 0.6685, 0.5725], [0.5614, 0.0173, 0.3105]]],[[[0, 0, 0]]], 1, 1, Loc70157), 
LRes957 = reshape_layer(Loc70157, [1, 3], Res957), 
LZer96015 = zero_padding1D_layer(Res957, 1, 1, Zer96015), 
LCon25503 = concatenate_layer([Zer96015,[[[0.1944], [0.6755], [0.817]]]], 2, Con25503), 
LLea30779 = leaky_relu_layer([[[[0.9364, 0.696]]]], 3.3548990015128104, Lea30779), 
LRes26420 = reshape_layer(Lea30779, [1, 2], Res26420), 
LZer56665 = zero_padding1D_layer(Res26420, 1, 0, Zer56665), 
LDot37186 = dot_layer([[[0.6401, 0.8267], [0.489, 0.27], [0.8941, 0.3881]]], [[[0.2693, 0.4098], [0.5358, 0.9095], [0.9, 0.6108]]], 1, 1, Dot37186), 
LSof49341 = softmax_layer(Dot37186, 1, Sof49341), 
LMin16613 = minimum_layer([Zer56665,Sof49341], Min16613), 
LDot18045 = dot_layer([[0.8127, 0.7634, 0.009]], [[0.3034, 0.4219, 0.7931]], 1, 1, Dot18045), 
LRes47966 = reshape_layer(Dot18045, [1, 1], Res47966), 
LRes97166 = reshape_layer(Res47966, [1, 1, 1], Res97166), 
LZer91036 = zero_padding2D_layer(Res97166, 1, 0, 1, 0, Zer91036), 
LMin96403 = minimum_layer([[[[[0.6314], [0.8057]], [[0.6629], [0.3154]]]], [[[[0.1255], [0.7323]], [[0.3312], [0.2471]]]]], Min96403), 
LSub31309 = subtract_layer(Zer91036,Min96403, Sub31309), 
LSep53251 = separable_conv2D_layer(Sub31309, 1, 1,[[[[[0.0787]]]],[[[[0.5261, 0.47]]]]],[0, 0], 1, 1, true, Sep53251), 
LRes69650 = reshape_layer(Sep53251, [2, 4], Res69650), 
LDot80679 = dot_layer(Min16613,Res69650, 1, 1, Dot80679), 
LZer44087 = zero_padding1D_layer(Dot80679, 1, 0, Zer44087), 
LMul68650 = multiply_layer([Con25503,Zer44087], Mul68650), 
exec_layers([LLoc70157,LRes957,LZer96015,LCon25503,LLea30779,LRes26420,LZer56665,LDot37186,LSof49341,LMin16613,LDot18045,LRes47966,LRes97166,LZer91036,LMin96403,LSub31309,LSep53251,LRes69650,LDot80679,LZer44087,LMul68650],["Loc70157","Res957","Zer96015","Con25503","Lea30779","Res26420","Zer56665","Dot37186","Sof49341","Min16613","Dot18045","Res47966","Res97166","Zer91036","Min96403","Sub31309","Sep53251","Res69650","Dot80679","Zer44087","Mul68650"],Mul68650,"Mul68650")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0003136, -0.0002182, 0.0002927, 0.0030573], [-0.0000000, -0.0000000, 0.0000000, 0.0039106]]]

Expected (Unparsed): [[[0,0,0,0.0],[-0.0003136212307741102,-0.0002181993290152508,0.000292671005168447,0.003057330508246342],[-0.0,-0.0,0.0,0.003910644519690112]]]

Actual:   [[[0, 0, 0, 0], [-0.0003, -0.0002, 0.0003, 0.0031], [-0, -0, 0, 0.004]]]

Expected: [[[0, 0, 0, 0], [-0.0003, -0.0002, 0.0003, 0.0031], [-0, -0, 0, 0.004]]]