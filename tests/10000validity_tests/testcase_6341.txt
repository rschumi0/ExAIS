import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con85562 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con61092 = tf.keras.layers.Input(shape=([8, 7, 3]))
in0Mul69036 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))
in1Mul69036 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))

Con85562 = keras.layers.Conv2D(4, (2, 1),strides=(1, 1), padding='same', dilation_rate=(1, 1), name = 'Con85562', )(in0Con85562)
Res34960 = keras.layers.Reshape((2, 8), name = 'Res34960', )(Con85562)
Glo8893 = keras.layers.GlobalAveragePooling1D(name = 'Glo8893', )(Res34960)
Res80608 = keras.layers.Reshape((8, 1), name = 'Res80608', )(Glo8893)
Res6644 = keras.layers.Reshape((8, 1, 1), name = 'Res6644', )(Res80608)
Zer587 = keras.layers.ZeroPadding2D(padding=((0, 0), (6, 0)), name = 'Zer587', )(Res6644)
Con61092 = keras.layers.Concatenate(axis=3, name = 'Con61092', )([Zer587,in0Con61092])
Mul69036 = keras.layers.Multiply(name = 'Mul69036', )([in0Mul69036,in1Mul69036])
Sof1954 = keras.layers.Softmax(axis=1, name = 'Sof1954', )(Mul69036)
Res81881 = keras.layers.Reshape((1, 2, 4), name = 'Res81881', )(Sof1954)
Zer90244 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer90244', )(Res81881)
Zer30797 = keras.layers.ZeroPadding2D(padding=((5, 0), (3, 0)), name = 'Zer30797', )(Zer90244)
Min83839 = keras.layers.Minimum(name = 'Min83839', )([Con61092,Zer30797])
model = tf.keras.models.Model(inputs=[in0Con85562,in0Con61092,in0Mul69036,in1Mul69036], outputs=Min83839)
w = model.get_layer('Con85562').get_weights() 
w[0] = np.array([[[[0.0655, 0.5679, 0.2438, 0.8788], [0.1797, 0.0249, 0.5241, 0.1354]]], [[[0.6696, 0.9173, 0.5756, 0.7368], [0.6774, 0.5815, 0.8633, 0.2041]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con85562').set_weights(w) 
in0Con85562 = tf.constant([[[[0.9846, 0.4538], [0.2541, 0.314]], [[0.1609, 0.8528], [0.5259, 0.2132]]]])
in0Con61092 = tf.constant([[[[0.9314, 0.825, 0.8707], [0.2478, 0.7952, 0.8688], [0.3148, 0.5262, 0.0897], [0.2286, 0.9264, 0.7822], [0.9138, 0.7529, 0.4263], [0.8398, 0.8142, 0.7336], [0.1867, 0.2759, 0.7265]], [[0.4715, 0.9152, 0.5863], [0.1455, 0.0929, 0.817], [0.7065, 0.8226, 0.75], [0.5884, 0.8595, 0.6225], [0.8041, 0.0042, 0.3693], [0.9098, 0.7117, 0.1794], [0.9063, 0.9822, 0.1137]], [[0.8099, 0.6117, 0.6185], [0.0609, 0.8251, 0.6859], [0.7683, 0.4001, 0.9239], [0.3178, 0.7726, 0.0933], [0.4053, 0.286, 0.2777], [0.6439, 0.5556, 0.1653], [0.1794, 0.8653, 0.6079]], [[0.8376, 0.5182, 0.9418], [0.9512, 0.9229, 0.2369], [0.1043, 0.8333, 0.8243], [0.1038, 0.2713, 0.2761], [0.3079, 0.9113, 0.6916], [0.3013, 0.9313, 0.2638], [0.963, 0.8499, 0.1741]], [[0.8845, 0.8017, 0.9737], [0.8268, 0.392, 0.5883], [0.9722, 0.0488, 0.9227], [0.0269, 0.1562, 0.5217], [0.8097, 0.2183, 0.8285], [0.2888, 0.7665, 0.0727], [0.8918, 0.2022, 0.6707]], [[0.2624, 0.2131, 0.375], [0.094, 0.8533, 0.5107], [0.6786, 0.1826, 0.3418], [0.0582, 0.115, 0.357], [0.0711, 0.9487, 0.8466], [0.5704, 0.9073, 0.0076], [0.7731, 0.5412, 0.6105]], [[0.6975, 0.8037, 0.459], [0.5559, 0.5223, 0.3977], [0.1518, 0.3299, 0.5008], [0.5166, 0.599, 0.2552], [0.2578, 0.8649, 0.9743], [0.0828, 0.1587, 0.1842], [0.113, 0.9315, 0.6991]], [[0.4085, 0.4117, 0.0496], [0.0547, 0.6895, 0.687], [0.1294, 0.2948, 0.6559], [0.4499, 0.7136, 0.2673], [0.7861, 0.3833, 0.6988], [0.5753, 0.4385, 0.5497], [0.062, 0.3806, 0.9134]]]])
in0Mul69036 = tf.constant([[[[[0.1358, 0.5328], [0.3244, 0.1854]], [[0.736, 0.054], [0.0182, 0.8207]]]]])
in1Mul69036 = tf.constant([[[[[0.8936, 0.6031], [0.8455, 0.0331]], [[0.2622, 0.1951], [0.6297, 0.5313]]]]])
print (np.array2string(model.predict([in0Con85562,in0Con61092,in0Mul69036,in1Mul69036],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min83839.png')

LCon85562 = conv2D_layer([[[[0.9846, 0.4538], [0.2541, 0.314]], [[0.1609, 0.8528], [0.5259, 0.2132]]]], 2, 1,[[[[0.0655, 0.5679, 0.2438, 0.8788], [0.1797, 0.0249, 0.5241, 0.1354]]], [[[0.6696, 0.9173, 0.5756, 0.7368], [0.6774, 0.5815, 0.8633, 0.2041]]]],[0, 0, 0, 0], 1, 1, true, 1, 1, Con85562), 
LRes34960 = reshape_layer(Con85562, [2, 8], Res34960), 
LGlo8893 = global_average_pooling1D_layer(Res34960, Glo8893), 
LRes80608 = reshape_layer(Glo8893, [8, 1], Res80608), 
LRes6644 = reshape_layer(Res80608, [8, 1, 1], Res6644), 
LZer587 = zero_padding2D_layer(Res6644, 0, 0, 6, 0, Zer587), 
LCon61092 = concatenate_layer([Zer587,[[[[0.9314, 0.825, 0.8707], [0.2478, 0.7952, 0.8688], [0.3148, 0.5262, 0.0897], [0.2286, 0.9264, 0.7822], [0.9138, 0.7529, 0.4263], [0.8398, 0.8142, 0.7336], [0.1867, 0.2759, 0.7265]], [[0.4715, 0.9152, 0.5863], [0.1455, 0.0929, 0.817], [0.7065, 0.8226, 0.75], [0.5884, 0.8595, 0.6225], [0.8041, 0.0042, 0.3693], [0.9098, 0.7117, 0.1794], [0.9063, 0.9822, 0.1137]], [[0.8099, 0.6117, 0.6185], [0.0609, 0.8251, 0.6859], [0.7683, 0.4001, 0.9239], [0.3178, 0.7726, 0.0933], [0.4053, 0.286, 0.2777], [0.6439, 0.5556, 0.1653], [0.1794, 0.8653, 0.6079]], [[0.8376, 0.5182, 0.9418], [0.9512, 0.9229, 0.2369], [0.1043, 0.8333, 0.8243], [0.1038, 0.2713, 0.2761], [0.3079, 0.9113, 0.6916], [0.3013, 0.9313, 0.2638], [0.963, 0.8499, 0.1741]], [[0.8845, 0.8017, 0.9737], [0.8268, 0.392, 0.5883], [0.9722, 0.0488, 0.9227], [0.0269, 0.1562, 0.5217], [0.8097, 0.2183, 0.8285], [0.2888, 0.7665, 0.0727], [0.8918, 0.2022, 0.6707]], [[0.2624, 0.2131, 0.375], [0.094, 0.8533, 0.5107], [0.6786, 0.1826, 0.3418], [0.0582, 0.115, 0.357], [0.0711, 0.9487, 0.8466], [0.5704, 0.9073, 0.0076], [0.7731, 0.5412, 0.6105]], [[0.6975, 0.8037, 0.459], [0.5559, 0.5223, 0.3977], [0.1518, 0.3299, 0.5008], [0.5166, 0.599, 0.2552], [0.2578, 0.8649, 0.9743], [0.0828, 0.1587, 0.1842], [0.113, 0.9315, 0.6991]], [[0.4085, 0.4117, 0.0496], [0.0547, 0.6895, 0.687], [0.1294, 0.2948, 0.6559], [0.4499, 0.7136, 0.2673], [0.7861, 0.3833, 0.6988], [0.5753, 0.4385, 0.5497], [0.062, 0.3806, 0.9134]]]]], 3, Con61092), 
LMul69036 = multiply_layer([[[[[[0.1358, 0.5328], [0.3244, 0.1854]], [[0.736, 0.054], [0.0182, 0.8207]]]]], [[[[[0.8936, 0.6031], [0.8455, 0.0331]], [[0.2622, 0.1951], [0.6297, 0.5313]]]]]], Mul69036), 
LSof1954 = softmax_layer(Mul69036, 1, Sof1954), 
LRes81881 = reshape_layer(Sof1954, [1, 2, 4], Res81881), 
LZer90244 = zero_padding2D_layer(Res81881, 1, 1, 1, 1, Zer90244), 
LZer30797 = zero_padding2D_layer(Zer90244, 5, 0, 3, 0, Zer30797), 
LMin83839 = minimum_layer([Con61092,Zer30797], Min83839), 
exec_layers([LCon85562,LRes34960,LGlo8893,LRes80608,LRes6644,LZer587,LCon61092,LMul69036,LSof1954,LRes81881,LZer90244,LZer30797,LMin83839],["Con85562","Res34960","Glo8893","Res80608","Res6644","Zer587","Con61092","Mul69036","Sof1954","Res81881","Zer90244","Zer30797","Min83839"],Min83839,"Min83839")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.2578000, 0.8649000, 0.9743000], [0.0000000, 0.0828000, 0.1587000, 0.1842000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]]]]

Expected (Unparsed): [[[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0.2578,0.8649,0.9743],[0,0.0828,0.1587,0.1842],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]]]

Actual:   [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0.2578, 0.8649, 0.9743], [0, 0.0828, 0.1587, 0.1842], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]]

Expected: [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0.2578, 0.8649, 0.9743], [0, 0.0828, 0.1587, 0.1842], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]]