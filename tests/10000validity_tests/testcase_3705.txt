import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0ReL15987 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con86442 = tf.keras.layers.Input(shape=([3, 5, 1]))
in0Den9603 = tf.keras.layers.Input(shape=([3, 5, 4]))

ReL15987 = keras.layers.ReLU(max_value=5.312762303492879, negative_slope=7.483950215453418, threshold=1.329250763294163, name = 'ReL15987', input_shape=(1, 1, 1))(in0ReL15987)
Fla14824 = keras.layers.Flatten(name = 'Fla14824', )(ReL15987)
Res26791 = keras.layers.Reshape((1, 1), name = 'Res26791', )(Fla14824)
Res58869 = keras.layers.Reshape((1, 1, 1), name = 'Res58869', )(Res26791)
Zer66176 = keras.layers.ZeroPadding2D(padding=((2, 0), (4, 0)), name = 'Zer66176', )(Res58869)
Con86442 = keras.layers.Concatenate(axis=3, name = 'Con86442', )([Zer66176,in0Con86442])
Den9603 = keras.layers.Dense(2,name = 'Den9603', )(in0Den9603)
Max70992 = keras.layers.Maximum(name = 'Max70992', )([Con86442,Den9603])
model = tf.keras.models.Model(inputs=[in0ReL15987,in0Con86442,in0Den9603], outputs=Max70992)
w = model.get_layer('Den9603').get_weights() 
w[0] = np.array([[0.0224, 0.7875], [0.6769, 0.1811], [0.8419, 0.0186], [0.4735, 0.1645]])
w[1] = np.array([0.0173, 0.189])
model.get_layer('Den9603').set_weights(w) 
in0ReL15987 = tf.constant([[[[0.6261]]]])
in0Con86442 = tf.constant([[[[0.782], [0.7449], [0.2246], [0.4806], [0.893]], [[0.7012], [0.1595], [0.8318], [0.1123], [0.6995]], [[0.551], [0.464], [0.5315], [0.8279], [0.7859]]]])
in0Den9603 = tf.constant([[[[0.633, 0.2193, 0.1295, 0.355], [0.936, 0.4195, 0.8181, 0.0754], [0.9443, 0.5468, 0.5133, 0.5646], [0.2128, 0.0365, 0.2779, 0.1801], [0.563, 0.4716, 0.4729, 0.4913]], [[0.1157, 0.5625, 0.3224, 0.9333], [0.5412, 0.3946, 0.2751, 0.3988], [0.0445, 0.4655, 0.5552, 0.4691], [0.2335, 0.0839, 0.8173, 0.545], [0.6859, 0.03, 0.8778, 0.4882]], [[0.7265, 0.9881, 0.0819, 0.5036], [0.6537, 0.1534, 0.9812, 0.9067], [0.4112, 0.5879, 0.6505, 0.1023], [0.4951, 0.3545, 0.1484, 0.5765], [0.7035, 0.1942, 0.3424, 0.9497]]]])
print (np.array2string(model.predict([in0ReL15987,in0Con86442,in0Den9603],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max70992.png')

LReL15987 = relu_layer([[[[0.6261]]]], 5.312762303492879, 7.483950215453418, 1.329250763294163, ReL15987), 
LFla14824 = flatten_layer(ReL15987, Fla14824), 
LRes26791 = reshape_layer(Fla14824, [1, 1], Res26791), 
LRes58869 = reshape_layer(Res26791, [1, 1, 1], Res58869), 
LZer66176 = zero_padding2D_layer(Res58869, 2, 0, 4, 0, Zer66176), 
LCon86442 = concatenate_layer([Zer66176,[[[[0.782], [0.7449], [0.2246], [0.4806], [0.893]], [[0.7012], [0.1595], [0.8318], [0.1123], [0.6995]], [[0.551], [0.464], [0.5315], [0.8279], [0.7859]]]]], 3, Con86442), 
LDen9603 = dense_layer([[[[0.633, 0.2193, 0.1295, 0.355], [0.936, 0.4195, 0.8181, 0.0754], [0.9443, 0.5468, 0.5133, 0.5646], [0.2128, 0.0365, 0.2779, 0.1801], [0.563, 0.4716, 0.4729, 0.4913]], [[0.1157, 0.5625, 0.3224, 0.9333], [0.5412, 0.3946, 0.2751, 0.3988], [0.0445, 0.4655, 0.5552, 0.4691], [0.2335, 0.0839, 0.8173, 0.545], [0.6859, 0.03, 0.8778, 0.4882]], [[0.7265, 0.9881, 0.0819, 0.5036], [0.6537, 0.1534, 0.9812, 0.9067], [0.4112, 0.5879, 0.6505, 0.1023], [0.4951, 0.3545, 0.1484, 0.5765], [0.7035, 0.1942, 0.3424, 0.9497]]]], [[0.0224, 0.7875], [0.6769, 0.1811], [0.8419, 0.0186], [0.4735, 0.1645]],[0.0173, 0.189], Den9603), 
LMax70992 = maximum_layer([Con86442,Den9603], Max70992), 
exec_layers([LReL15987,LFla14824,LRes26791,LRes58869,LZer66176,LCon86442,LDen9603,LMax70992],["ReL15987","Fla14824","Res26791","Res58869","Zer66176","Con86442","Den9603","Max70992"],Max70992,"Max70992")

Actual (Unparsed): [[[[0.4570419, 0.7880089], [1.0466862, 1.0296914], [1.1080666, 1.1340858], [0.3660149, 0.4806000], [0.9799023, 0.8930000]], [[1.1139941, 0.7012000], [0.7169661, 0.7573765], [1.0229355, 0.8318000], [1.0254647, 0.4929298], [1.0231537, 0.8312152]], [[1.0098247, 1.0244292], [1.3911741, 0.8989720], [1.0205554, 0.6482163], [0.6662620, 0.8279000], [0.9024619, 0.9407701]]]]

Expected (Unparsed): [[[[0.45704191999999993,0.78800893],[1.04668624,1.0296914099999999],[1.1080666099999998,1.1340858100000002],[0.36601492999999996,0.4806],[0.9799023,0.893]],[[1.1139940400000001,0.7012],[0.71696611,0.7573765199999999],[1.02293548,0.8318],[1.02546468,0.49292982],[1.02315368,0.83121523]],[[1.0098247,1.0244292000000002],[1.39117407,0.89897196],[1.02055539,0.6482163400000002],[0.6662619999999999,0.8279],[0.90246189,0.9407701600000001]]]]

Actual:   [[[[0.4571, 0.7881], [1.0467, 1.0297], [1.1081, 1.1341], [0.3661, 0.4806], [0.98, 0.893]], [[1.114, 0.7012], [0.717, 0.7574], [1.023, 0.8318], [1.0255, 0.493], [1.0232, 0.8313]], [[1.0099, 1.0245], [1.3912, 0.899], [1.0206, 0.6483], [0.6663, 0.8279], [0.9025, 0.9408]]]]

Expected: [[[[0.4571, 0.7881], [1.0467, 1.0297], [1.1081, 1.1341], [0.3661, 0.4806], [0.98, 0.893]], [[1.114, 0.7012], [0.717, 0.7574], [1.023, 0.8318], [1.0255, 0.493], [1.0232, 0.8313]], [[1.0099, 1.0245], [1.3912, 0.899], [1.0206, 0.6483], [0.6663, 0.8279], [0.9025, 0.9408]]]]