import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub81298 = tf.keras.layers.Input(shape=([2, 3, 3]))
in1Sub81298 = tf.keras.layers.Input(shape=([2, 3, 3]))
in0Add43511 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Add43511 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con36544 = tf.keras.layers.Input(shape=([2, 3, 2]))
in0Add46814 = tf.keras.layers.Input(shape=([2, 2]))
in1Add46814 = tf.keras.layers.Input(shape=([2, 2]))
in0Con54012 = tf.keras.layers.Input(shape=([4, 2, 2]))
in0Lay20757 = tf.keras.layers.Input(shape=([4, 2, 3]))

Sub81298 = keras.layers.Subtract(name = 'Sub81298', )([in0Sub81298,in1Sub81298])
Add43511 = keras.layers.Add(name = 'Add43511', )([in0Add43511,in1Add43511])
Zer44309 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer44309', )(Add43511)
Con36544 = keras.layers.Concatenate(axis=3, name = 'Con36544', )([Zer44309,in0Con36544])
Ave20703 = keras.layers.Average(name = 'Ave20703', )([Sub81298,Con36544])
Sof95315 = keras.layers.Softmax(axis=1, name = 'Sof95315', )(Ave20703)
Zer82512 = keras.layers.ZeroPadding2D(padding=((2, 0), (1, 0)), name = 'Zer82512', )(Sof95315)
Add46814 = keras.layers.Add(name = 'Add46814', )([in0Add46814,in1Add46814])
Thr16087 = keras.layers.ThresholdedReLU(theta=7.449029849830756, name = 'Thr16087', )(Add46814)
Thr11567 = keras.layers.ThresholdedReLU(theta=2.883384005287724, name = 'Thr11567', )(Thr16087)
Res62939 = keras.layers.Reshape((2, 2, 1), name = 'Res62939', )(Thr11567)
Zer60577 = keras.layers.ZeroPadding2D(padding=((2, 0), (0, 0)), name = 'Zer60577', )(Res62939)
Con54012 = keras.layers.Concatenate(axis=3, name = 'Con54012', )([Zer60577,in0Con54012])
Lay20757 = keras.layers.LayerNormalization(axis=1, epsilon=2.385517243174557, name = 'Lay20757', )(in0Lay20757)
Ave5183 = keras.layers.Average(name = 'Ave5183', )([Con54012,Lay20757])
Zer75890 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer75890', )(Ave5183)
Sub28777 = keras.layers.Subtract(name = 'Sub28777', )([Zer82512,Zer75890])
model = tf.keras.models.Model(inputs=[in0Sub81298,in1Sub81298,in0Add43511,in1Add43511,in0Con36544,in0Add46814,in1Add46814,in0Con54012,in0Lay20757], outputs=Sub28777)
in0Sub81298 = tf.constant([[[[0.2409, 0.7176, 0.4902], [0.6033, 0.8307, 0.0898], [0.4316, 0.3802, 0.2139]], [[0.3801, 0.7567, 0.2793], [0.0892, 0.905, 0.2824], [0.6156, 0.5069, 0.8535]]]])
in1Sub81298 = tf.constant([[[[0.2286, 0.932, 0.0635], [0.9722, 0.5163, 0.9002], [0.0032, 0.121, 0.7436]], [[0.4647, 0.9538, 0.5753], [0.3514, 0.4371, 0.9751], [0.8131, 0.3251, 0.128]]]])
in0Add43511 = tf.constant([[[[0.5693]], [[0.6649]]]])
in1Add43511 = tf.constant([[[[0.1485]], [[0.7577]]]])
in0Con36544 = tf.constant([[[[0.0772, 0.6171], [0.4024, 0.0828], [0.5605, 0.1447]], [[0.8095, 0.9528], [0.583, 0.2335], [0.971, 0.8115]]]])
in0Add46814 = tf.constant([[[0.3182, 0.1279], [0.6267, 0.3275]]])
in1Add46814 = tf.constant([[[0.8466, 0.8504], [0.6208, 0.3512]]])
in0Con54012 = tf.constant([[[[0.4306, 0.6519], [0.6484, 0.3931]], [[0.1267, 0.6801], [0.1525, 0.578]], [[0.5881, 0.1496], [0.4439, 0.791]], [[0.7078, 0.7471], [0.2045, 0.3308]]]])
in0Lay20757 = tf.constant([[[[1.8864, 1.2775, 1.7057], [1.3499, 1.3155, 1.7152]], [[1.2497, 1.2919, 1.1823], [1.1192, 1.4415, 1.2278]], [[1.8895, 1.242, 1.3474], [1.2102, 1.9067, 1.8836]], [[1.1648, 1.2176, 1.6123], [1.3827, 1.4583, 1.2075]]]])
print (np.array2string(model.predict([in0Sub81298,in1Sub81298,in0Add43511,in1Add43511,in0Con36544,in0Add46814,in1Add46814,in0Con54012,in0Lay20757],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub28777.png')

LSub81298 = subtract_layer([[[[0.2409, 0.7176, 0.4902], [0.6033, 0.8307, 0.0898], [0.4316, 0.3802, 0.2139]], [[0.3801, 0.7567, 0.2793], [0.0892, 0.905, 0.2824], [0.6156, 0.5069, 0.8535]]]], [[[[0.2286, 0.932, 0.0635], [0.9722, 0.5163, 0.9002], [0.0032, 0.121, 0.7436]], [[0.4647, 0.9538, 0.5753], [0.3514, 0.4371, 0.9751], [0.8131, 0.3251, 0.128]]]], Sub81298), 
LAdd43511 = add_layer([[[[[0.5693]], [[0.6649]]]], [[[[0.1485]], [[0.7577]]]]], Add43511), 
LZer44309 = zero_padding2D_layer(Add43511, 0, 0, 2, 0, Zer44309), 
LCon36544 = concatenate_layer([Zer44309,[[[[0.0772, 0.6171], [0.4024, 0.0828], [0.5605, 0.1447]], [[0.8095, 0.9528], [0.583, 0.2335], [0.971, 0.8115]]]]], 3, Con36544), 
LAve20703 = average_layer([Sub81298,Con36544], Ave20703), 
LSof95315 = softmax_layer(Ave20703, 1, Sof95315), 
LZer82512 = zero_padding2D_layer(Sof95315, 2, 0, 1, 0, Zer82512), 
LAdd46814 = add_layer([[[[0.3182, 0.1279], [0.6267, 0.3275]]], [[[0.8466, 0.8504], [0.6208, 0.3512]]]], Add46814), 
LThr16087 = thresholded_relu_layer(Add46814, 7.449029849830756, Thr16087), 
LThr11567 = thresholded_relu_layer(Thr16087, 2.883384005287724, Thr11567), 
LRes62939 = reshape_layer(Thr11567, [2, 2, 1], Res62939), 
LZer60577 = zero_padding2D_layer(Res62939, 2, 0, 0, 0, Zer60577), 
LCon54012 = concatenate_layer([Zer60577,[[[[0.4306, 0.6519], [0.6484, 0.3931]], [[0.1267, 0.6801], [0.1525, 0.578]], [[0.5881, 0.1496], [0.4439, 0.791]], [[0.7078, 0.7471], [0.2045, 0.3308]]]]], 3, Con54012), 
LLay20757 = layer_normalization_layer([[[[1.8864, 1.2775, 1.7057], [1.3499, 1.3155, 1.7152]], [[1.2497, 1.2919, 1.1823], [1.1192, 1.4415, 1.2278]], [[1.8895, 1.242, 1.3474], [1.2102, 1.9067, 1.8836]], [[1.1648, 1.2176, 1.6123], [1.3827, 1.4583, 1.2075]]]], 1, 2.385517243174557, Lay20757), 
LAve5183 = average_layer([Con54012,Lay20757], Ave5183), 
LZer75890 = zero_padding2D_layer(Ave5183, 0, 0, 2, 0, Zer75890), 
LSub28777 = subtract_layer(Zer82512,Zer75890, Sub28777), 
exec_layers([LSub81298,LAdd43511,LZer44309,LCon36544,LAve20703,LSof95315,LZer82512,LAdd46814,LThr16087,LThr11567,LRes62939,LZer60577,LCon54012,LLay20757,LAve5183,LZer75890,LSub28777],["Sub81298","Add43511","Zer44309","Con36544","Ave20703","Sof95315","Zer82512","Add46814","Thr16087","Thr11567","Res62939","Zer60577","Con54012","Lay20757","Ave5183","Zer75890","Sub28777"],Sub28777,"Sub28777")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [-0.1070896, -0.2218543, -0.4041593], [-0.0272579, -0.2553200, -0.2622526]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0941618, -0.0745651, -0.2503391], [0.0472492, -0.0477369, -0.1997567]], [[0.0000000, 0.0000000, 0.0000000], [0.5121101, 0.4073817, 0.5482246], [0.3785962, 0.1692203, 0.4284429], [0.5079985, 0.1159845, -0.2380594]], [[0.0000000, 0.0000000, 0.0000000], [0.4878899, 0.5926183, 0.4517754], [0.6343317, 0.2005992, 0.1117055], [0.4720102, 0.4624224, 0.6536187]]]]

Expected (Unparsed): [[[[0,0,0],[0,0,0],[-0.10708962561134755,-0.2218542958790833,-0.40415931995990645],[-0.027257891005995644,-0.25532000161915513,-0.2622525944067007]],[[0,0,0],[0,0,0],[0.09416174577810048,-0.07456512850420921,-0.2503390735563989],[0.04724916414901853,-0.04773688439118516,-0.19975669135202095]],[[0,0,0],[0.5121101311466653,0.407381683520873,0.5482246239463803],[0.3785961731935952,0.16922029862544963,0.4284428411431108],[0.5079985107903016,0.11598450341584926,-0.2380594300969161]],[[0,0,0],[0.4878898688533348,0.592618316479127,0.4517753760536197],[0.6343317066396519,0.20059912575784283,0.11170555237319474],[0.4720102160666756,0.46242238259449103,0.6536187158556379]]]]

Actual:   [[[[0, 0, 0], [0, 0, 0], [-0.107, -0.2218, -0.4041], [-0.0272, -0.2553, -0.2622]], [[0, 0, 0], [0, 0, 0], [0.0942, -0.0745, -0.2503], [0.0473, -0.0477, -0.1997]], [[0, 0, 0], [0.5122, 0.4074, 0.5483], [0.3786, 0.1693, 0.4285], [0.508, 0.116, -0.238]], [[0, 0, 0], [0.4879, 0.5927, 0.4518], [0.6344, 0.2006, 0.1118], [0.4721, 0.4625, 0.6537]]]]

Expected: [[[[0, 0, 0], [0, 0, 0], [-0.107, -0.2218, -0.4041], [-0.0272, -0.2553, -0.2622]], [[0, 0, 0], [0, 0, 0], [0.0942, -0.0745, -0.2503], [0.0473, -0.0477, -0.1997]], [[0, 0, 0], [0.5122, 0.4074, 0.5483], [0.3786, 0.1693, 0.4285], [0.508, 0.116, -0.238]], [[0, 0, 0], [0.4879, 0.5927, 0.4518], [0.6344, 0.2006, 0.1118], [0.4721, 0.4625, 0.6537]]]]