import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sof65251 = tf.keras.layers.Input(shape=([2, 2]))

Sof65251 = keras.layers.Softmax(axis=1, name = 'Sof65251', input_shape=(2, 2))(in0Sof65251)
Res20080 = keras.layers.Reshape((2, 2, 1), name = 'Res20080', )(Sof65251)
Res92984 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res92984', )(Res20080)
Con1499 = keras.layers.Conv3D(3, (2, 2, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con1499', )(Res92984)
Zer55688 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer55688', )(Con1499)
model = tf.keras.models.Model(inputs=[in0Sof65251], outputs=Zer55688)
w = model.get_layer('Con1499').get_weights() 
w[0] = np.array([[[[[0.8332, 0.1045, 0.9828]]], [[[0.2862, 0.1015, 0.1261]]]], [[[[0.0268, 0.6241, 0.2654]]], [[[0.6225, 0.3471, 0.6172]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con1499').set_weights(w) 
in0Sof65251 = tf.constant([[[0.6507, 0.9537], [0.3921, 0.9061]]])
print (np.array2string(model.predict([in0Sof65251],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Zer55688.png')

LSof65251 = softmax_layer([[[0.6507, 0.9537], [0.3921, 0.9061]]], 1, Sof65251), 
LRes20080 = reshape_layer(Sof65251, [2, 2, 1], Res20080), 
LRes92984 = reshape_layer(Res20080, [2, 2, 1, 1], Res92984), 
LCon1499 = conv3D_layer(Res92984, 2, 2, 1,[[[[[0.8332, 0.1045, 0.9828]]], [[[0.2862, 0.1015, 0.1261]]]], [[[[0.0268, 0.6241, 0.2654]]], [[[0.6225, 0.3471, 0.6172]]]]],[0, 0, 0], 1, 1, 1, false, 1, 1, 1, Con1499), 
LZer55688 = zero_padding3D_layer(Con1499, 1, 1, 1, 1, 1, 1, Zer55688), 
exec_layers([LSof65251,LRes20080,LRes92984,LCon1499,LZer55688],["Sof65251","Res20080","Res92984","Con1499","Zer55688"],Zer55688,"Zer55688")

Actual (Unparsed): [[[[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.9321939, 0.5522717, 1.0360302], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]]]]

Expected (Unparsed): [[[[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]]],[[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0.932193942719623,0.5522717315060768,1.0360301726939747],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]]],[[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]]]]]

Actual:   [[[[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0.9322, 0.5523, 1.0361], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]]]

Expected: [[[[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0.9322, 0.5523, 1.0361], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]]]