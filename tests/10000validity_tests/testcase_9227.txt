import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave22451 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Ave22451 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Min62977 = tf.keras.layers.Input(shape=([1, 2, 1]))
in1Min62977 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con32349 = tf.keras.layers.Input(shape=([2, 3, 2]))

Ave22451 = keras.layers.Average(name = 'Ave22451', )([in0Ave22451,in1Ave22451])
Res32344 = keras.layers.Reshape((2, 2, 2, 1), name = 'Res32344', )(Ave22451)
Con983 = keras.layers.Conv3D(3, (1, 2, 2),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con983', )(Res32344)
Res81311 = keras.layers.Reshape((2, 1, 3), name = 'Res81311', )(Con983)
Zer74778 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer74778', )(Res81311)
Min62977 = keras.layers.Minimum(name = 'Min62977', )([in0Min62977,in1Min62977])
Thr44899 = keras.layers.ThresholdedReLU(theta=5.389098437553252, name = 'Thr44899', )(Min62977)
Lay16379 = keras.layers.LayerNormalization(axis=1, epsilon=1.1501839088280275, name = 'Lay16379', )(Thr44899)
Zer75277 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer75277', )(Lay16379)
Con32349 = keras.layers.Concatenate(axis=3, name = 'Con32349', )([Zer75277,in0Con32349])
Min3815 = keras.layers.Minimum(name = 'Min3815', )([Zer74778,Con32349])
model = tf.keras.models.Model(inputs=[in0Ave22451,in1Ave22451,in0Min62977,in1Min62977,in0Con32349], outputs=Min3815)
w = model.get_layer('Con983').get_weights() 
w[0] = np.array([[[[[0.6741, 0.9838, 0.9757]], [[0.7009, 0.8838, 0.0772]]], [[[0.9767, 0.9697, 0.7321]], [[0.9153, 0.0392, 0.27]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con983').set_weights(w) 
in0Ave22451 = tf.constant([[[[0.106, 0.1436], [0.8181, 0.4569]], [[0.2674, 0.3587], [0.636, 0.6923]]]])
in1Ave22451 = tf.constant([[[[0.9633, 0.6614], [0.7913, 0.3841]], [[0.335, 0.4859], [0.9714, 0.6514]]]])
in0Min62977 = tf.constant([[[[0.5465], [0.2915]]]])
in1Min62977 = tf.constant([[[[0.6344], [0.3955]]]])
in0Con32349 = tf.constant([[[[0.9184, 0.9389], [0.4438, 0.2011], [0.1531, 0.1144]], [[0.5883, 0.7624], [0.3014, 0.4773], [0.7395, 0.7401]]]])
print (np.array2string(model.predict([in0Ave22451,in1Ave22451,in0Min62977,in1Min62977,in0Con32349],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min3815.png')

LAve22451 = average_layer([[[[[0.106, 0.1436], [0.8181, 0.4569]], [[0.2674, 0.3587], [0.636, 0.6923]]]], [[[[0.9633, 0.6614], [0.7913, 0.3841]], [[0.335, 0.4859], [0.9714, 0.6514]]]]], Ave22451), 
LRes32344 = reshape_layer(Ave22451, [2, 2, 2, 1], Res32344), 
LCon983 = conv3D_layer(Res32344, 1, 2, 2,[[[[[0.6741, 0.9838, 0.9757]], [[0.7009, 0.8838, 0.0772]]], [[[0.9767, 0.9697, 0.7321]], [[0.9153, 0.0392, 0.27]]]]],[0, 0, 0], 1, 1, 1, false, 1, 1, 1, Con983), 
LRes81311 = reshape_layer(Con983, [2, 1, 3], Res81311), 
LZer74778 = zero_padding2D_layer(Res81311, 0, 0, 2, 0, Zer74778), 
LMin62977 = minimum_layer([[[[[0.5465], [0.2915]]]], [[[[0.6344], [0.3955]]]]], Min62977), 
LThr44899 = thresholded_relu_layer(Min62977, 5.389098437553252, Thr44899), 
LLay16379 = layer_normalization_layer(Thr44899, 1, 1.1501839088280275, Lay16379), 
LZer75277 = zero_padding2D_layer(Lay16379, 1, 0, 1, 0, Zer75277), 
LCon32349 = concatenate_layer([Zer75277,[[[[0.9184, 0.9389], [0.4438, 0.2011], [0.1531, 0.1144]], [[0.5883, 0.7624], [0.3014, 0.4773], [0.7395, 0.7401]]]]], 3, Con32349), 
LMin3815 = minimum_layer([Zer74778,Con32349], Min3815), 
exec_layers([LAve22451,LRes32344,LCon983,LRes81311,LZer74778,LMin62977,LThr44899,LLay16379,LZer75277,LCon32349,LMin3815],["Ave22451","Res32344","Con983","Res81311","Zer74778","Min62977","Thr44899","Lay16379","Zer75277","Con32349","Min3815"],Min3815,"Min3815")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.1531000, 0.1144000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.7395000, 0.7401000]]]]

Expected (Unparsed): [[[[0,0,0],[0,0,0],[0,0.1531,0.1144]],[[0,0,0],[0,0,0],[0.0,0.7395,0.7401]]]]

Actual:   [[[[0, 0, 0], [0, 0, 0], [0, 0.1531, 0.1144]], [[0, 0, 0], [0, 0, 0], [0, 0.7395, 0.7401]]]]

Expected: [[[[0, 0, 0], [0, 0, 0], [0, 0.1531, 0.1144]], [[0, 0, 0], [0, 0, 0], [0, 0.7395, 0.7401]]]]