import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer32511 = tf.keras.layers.Input(shape=([1, 2, 3]))
in0Dot48323 = tf.keras.layers.Input(shape=([2]))
in1Dot48323 = tf.keras.layers.Input(shape=([2]))
in0Con78360 = tf.keras.layers.Input(shape=([2, 32]))

Zer32511 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer32511', )(in0Zer32511)
Res33692 = keras.layers.Reshape((3, 4, 3, 1), name = 'Res33692', )(Zer32511)
Con99219 = keras.layers.Conv3D(4, (2, 2, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con99219', )(Res33692)
Res33926 = keras.layers.Reshape((2, 3, 12), name = 'Res33926', )(Con99219)
Res47895 = keras.layers.Reshape((2, 36), name = 'Res47895', )(Res33926)
Dot48323 = keras.layers.Dot(axes=(1, 1), name = 'Dot48323', )([in0Dot48323,in1Dot48323])
Res32132 = keras.layers.Reshape((1, 1), name = 'Res32132', )(Dot48323)
Sep66465 = keras.layers.SeparableConv1D(4, (1),strides=(1), padding='same', name = 'Sep66465', )(Res32132)
Zer19185 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer19185', )(Sep66465)
Con78360 = keras.layers.Concatenate(axis=2, name = 'Con78360', )([Zer19185,in0Con78360])
Min52138 = keras.layers.Minimum(name = 'Min52138', )([Res47895,Con78360])
model = tf.keras.models.Model(inputs=[in0Zer32511,in0Dot48323,in1Dot48323,in0Con78360], outputs=Min52138)
w = model.get_layer('Con99219').get_weights() 
w[0] = np.array([[[[[0.0136, 0.9288, 0.6929, 0.2986]]], [[[0.1707, 0.7563, 0.2017, 0.9162]]]], [[[[0.8486, 0.2263, 0.7738, 0.6011]]], [[[0.0019, 0.0885, 0.4466, 0.5966]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con99219').set_weights(w) 
w = model.get_layer('Sep66465').get_weights() 
w[0] = np.array([[[0.7882]]])
w[1] = np.array([[[0.5445, 0.1091, 0.3042, 0.1937]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep66465').set_weights(w) 
in0Zer32511 = tf.constant([[[[1.3843, 1.9545, 1.4593], [1.1289, 1.8684, 1.8352]]]])
in0Dot48323 = tf.constant([[0.4933, 0.2473]])
in1Dot48323 = tf.constant([[0.2032, 0.5242]])
in0Con78360 = tf.constant([[[0.3454, 0.847, 0.4495, 0.5886, 0.7, 0.691, 0.4307, 0.6187, 0.4955, 0.3395, 0.3254, 0.5025, 0.2606, 0.3599, 0.4157, 0.2843, 0.3692, 0.3584, 0.364, 0.8058, 0.659, 0.8771, 0.0631, 0.8997, 0.3541, 0.3506, 0.2838, 0.1034, 0.6899, 0.1581, 0.0761, 0.679], [0.041, 0.6574, 0.4839, 0.9017, 0.4094, 0.8426, 0.8945, 0.1631, 0.8509, 0.9264, 0.2673, 0.424, 0.7845, 0.718, 0.5557, 0.9475, 0.1631, 0.1383, 0.8741, 0.0447, 0.164, 0.5963, 0.3433, 0.7732, 0.4009, 0.2361, 0.0955, 0.1435, 0.6557, 0.2555, 0.6202, 0.4074]]])
print (np.array2string(model.predict([in0Zer32511,in0Dot48323,in1Dot48323,in0Con78360],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min52138.png')

LZer32511 = zero_padding2D_layer([[[[1.3843, 1.9545, 1.4593], [1.1289, 1.8684, 1.8352]]]], 1, 1, 1, 1, Zer32511), 
LRes33692 = reshape_layer(Zer32511, [3, 4, 3, 1], Res33692), 
LCon99219 = conv3D_layer(Res33692, 2, 2, 1,[[[[[0.0136, 0.9288, 0.6929, 0.2986]]], [[[0.1707, 0.7563, 0.2017, 0.9162]]]], [[[[0.8486, 0.2263, 0.7738, 0.6011]]], [[[0.0019, 0.0885, 0.4466, 0.5966]]]]],[0, 0, 0, 0], 1, 1, 1, false, 1, 1, 1, Con99219), 
LRes33926 = reshape_layer(Con99219, [2, 3, 12], Res33926), 
LRes47895 = reshape_layer(Res33926, [2, 36], Res47895), 
LDot48323 = dot_layer([[0.4933, 0.2473]], [[0.2032, 0.5242]], 1, 1, Dot48323), 
LRes32132 = reshape_layer(Dot48323, [1, 1], Res32132), 
LSep66465 = separable_conv1D_layer(Res32132, 1,[[[[0.7882]]],[[[0.5445, 0.1091, 0.3042, 0.1937]]]],[0, 0, 0, 0], 1, true, Sep66465), 
LZer19185 = zero_padding1D_layer(Sep66465, 1, 0, Zer19185), 
LCon78360 = concatenate_layer([Zer19185,[[[0.3454, 0.847, 0.4495, 0.5886, 0.7, 0.691, 0.4307, 0.6187, 0.4955, 0.3395, 0.3254, 0.5025, 0.2606, 0.3599, 0.4157, 0.2843, 0.3692, 0.3584, 0.364, 0.8058, 0.659, 0.8771, 0.0631, 0.8997, 0.3541, 0.3506, 0.2838, 0.1034, 0.6899, 0.1581, 0.0761, 0.679], [0.041, 0.6574, 0.4839, 0.9017, 0.4094, 0.8426, 0.8945, 0.1631, 0.8509, 0.9264, 0.2673, 0.424, 0.7845, 0.718, 0.5557, 0.9475, 0.1631, 0.1383, 0.8741, 0.0447, 0.164, 0.5963, 0.3433, 0.7732, 0.4009, 0.2361, 0.0955, 0.1435, 0.6557, 0.2555, 0.6202, 0.4074]]]], 2, Con78360), 
LMin52138 = minimum_layer([Res47895,Con78360], Min52138), 
exec_layers([LZer32511,LRes33692,LCon99219,LRes33926,LRes47895,LDot48323,LRes32132,LSep66465,LZer19185,LCon78360,LMin52138],["Zer32511","Res33692","Con99219","Res33926","Res47895","Dot48323","Res32132","Sep66465","Zer19185","Con78360","Min52138"],Min52138,"Min52138")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0037135, 0.1729732, 0.4495000, 0.5886000, 0.0027727, 0.1291481, 0.4307000, 0.6187000, 0.4955000, 0.3395000, 0.3254000, 0.5025000, 0.2606000, 0.3599000, 0.4157000, 0.2843000, 0.3692000, 0.3584000, 0.3640000, 0.8058000, 0.6590000, 0.2554701, 0.0631000, 0.6785818, 0.3541000, 0.3506000, 0.2838000, 0.1034000, 0.6899000, 0.1581000, 0.0761000, 0.6790000], [0.0986558, 0.0197674, 0.0551168, 0.0350957, 0.0410000, 0.6574000, 0.3942226, 0.9017000, 0.2491025, 0.8426000, 0.2943408, 0.1631000, 0.2115297, 0.9264000, 0.2673000, 0.4240000, 0.3455171, 0.7180000, 0.5557000, 0.9475000, 0.1631000, 0.1383000, 0.8741000, 0.0447000, 0.0153530, 0.5963000, 0.3433000, 0.3370896, 0.0254102, 0.2361000, 0.0955000, 0.1435000, 0.0249587, 0.2555000, 0.6202000, 0.4074000]]]

Expected (Unparsed): [[[0,0,0,0,0.00371355,0.17297325,0.4495,0.5886,0.00277267,0.12914805,0.4307,0.6187,0.4955,0.3395,0.3254,0.5025,0.2606,0.3599,0.4157,0.2843,0.3692,0.3584,0.364,0.8058,0.659,0.25547007,0.0631,0.67858179,0.3541,0.3506,0.2838,0.1034,0.6899,0.1581,0.0761,0.679],[0.098655816206178,0.0197674004556364,0.0551168031036168,0.0350957421471748,0.041,0.6574,0.39422264999999995,0.9017,0.24910251,0.8426,0.29434081,0.1631,0.21152971,0.9264,0.2673,0.424,0.34551708,0.718,0.5557,0.9475,0.1631,0.1383,0.8741,0.0447,0.01535304,0.5963,0.3433,0.33708953999999997,0.02541024,0.2361,0.0955,0.1435,0.024958719999999997,0.2555,0.6202,0.4074]]]

Actual:   [[[0, 0, 0, 0, 0.0038, 0.173, 0.4495, 0.5886, 0.0028, 0.1292, 0.4307, 0.6187, 0.4955, 0.3395, 0.3254, 0.5025, 0.2606, 0.3599, 0.4157, 0.2843, 0.3692, 0.3584, 0.364, 0.8058, 0.659, 0.2555, 0.0631, 0.6786, 0.3541, 0.3506, 0.2838, 0.1034, 0.6899, 0.1581, 0.0761, 0.679], [0.0987, 0.0198, 0.0552, 0.0351, 0.041, 0.6574, 0.3943, 0.9017, 0.2492, 0.8426, 0.2944, 0.1631, 0.2116, 0.9264, 0.2673, 0.424, 0.3456, 0.718, 0.5557, 0.9475, 0.1631, 0.1383, 0.8741, 0.0447, 0.0154, 0.5963, 0.3433, 0.3371, 0.0255, 0.2361, 0.0955, 0.1435, 0.025, 0.2555, 0.6202, 0.4074]]]

Expected: [[[0, 0, 0, 0, 0.0038, 0.173, 0.4495, 0.5886, 0.0028, 0.1292, 0.4307, 0.6187, 0.4955, 0.3395, 0.3254, 0.5025, 0.2606, 0.3599, 0.4157, 0.2843, 0.3692, 0.3584, 0.364, 0.8058, 0.659, 0.2555, 0.0631, 0.6786, 0.3541, 0.3506, 0.2838, 0.1034, 0.6899, 0.1581, 0.0761, 0.679], [0.0987, 0.0198, 0.0552, 0.0351, 0.041, 0.6574, 0.3943, 0.9017, 0.2492, 0.8426, 0.2944, 0.1631, 0.2116, 0.9264, 0.2673, 0.424, 0.3456, 0.718, 0.5557, 0.9475, 0.1631, 0.1383, 0.8741, 0.0447, 0.0154, 0.5963, 0.3433, 0.3371, 0.0255, 0.2361, 0.0955, 0.1435, 0.025, 0.2555, 0.6202, 0.4074]]]