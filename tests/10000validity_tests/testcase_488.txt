import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min86181 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Min86181 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Max59873 = tf.keras.layers.Input(shape=([1, 2]))
in1Max59873 = tf.keras.layers.Input(shape=([1, 2]))

Min86181 = keras.layers.Minimum(name = 'Min86181', )([in0Min86181,in1Min86181])
Thr76015 = keras.layers.ThresholdedReLU(theta=7.284694607506382, name = 'Thr76015', )(Min86181)
Con76903 = keras.layers.Conv2DTranspose(3, (1, 1),strides=(1, 1), padding='same', name = 'Con76903', )(Thr76015)
Res76984 = keras.layers.Reshape((2, 1, 3, 1), name = 'Res76984', )(Con76903)
Max59873 = keras.layers.Maximum(name = 'Max59873', )([in0Max59873,in1Max59873])
Res84024 = keras.layers.Reshape((1, 2, 1), name = 'Res84024', )(Max59873)
Res30915 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res30915', )(Res84024)
Cro95881 = keras.layers.Cropping3D(cropping=((0, 0), (0, 1), (0, 0)), name = 'Cro95881', )(Res30915)
Zer42180 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (2, 0)), name = 'Zer42180', )(Cro95881)
Ave35145 = keras.layers.Average(name = 'Ave35145', )([Res76984,Zer42180])
Con37784 = keras.layers.Conv3DTranspose(4, (1, 1, 1),strides=(1, 1, 4), padding='same', name = 'Con37784', )(Ave35145)
model = tf.keras.models.Model(inputs=[in0Min86181,in1Min86181,in0Max59873,in1Max59873], outputs=Con37784)
w = model.get_layer('Con76903').get_weights() 
w[0] = np.array([[[[0.5111, 0.3363], [0.3259, 0.7202], [0.5011, 0.8542]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con76903').set_weights(w) 
w = model.get_layer('Con37784').get_weights() 
w[0] = np.array([[[[[0.9311], [0.1759], [0.8355], [0.0857]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con37784').set_weights(w) 
in0Min86181 = tf.constant([[[[0.8447, 0.0031]], [[0.3906, 0.6087]]]])
in1Min86181 = tf.constant([[[[0.2707, 0.6067]], [[0.8978, 0.1719]]]])
in0Max59873 = tf.constant([[[0.3766, 0.2255]]])
in1Max59873 = tf.constant([[[0.2052, 0.5868]]])
print (np.array2string(model.predict([in0Min86181,in1Min86181,in0Max59873,in1Max59873],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con37784.png')

LMin86181 = minimum_layer([[[[[0.8447, 0.0031]], [[0.3906, 0.6087]]]], [[[[0.2707, 0.6067]], [[0.8978, 0.1719]]]]], Min86181), 
LThr76015 = thresholded_relu_layer(Min86181, 7.284694607506382, Thr76015), 
LCon76903 = conv2D_transpose_layer(Thr76015, 1, 1,[[[[0.5111, 0.3363], [0.3259, 0.7202], [0.5011, 0.8542]]]],[0, 0, 0], 1, 1, true, Con76903), 
LRes76984 = reshape_layer(Con76903, [2, 1, 3, 1], Res76984), 
LMax59873 = maximum_layer([[[[0.3766, 0.2255]]], [[[0.2052, 0.5868]]]], Max59873), 
LRes84024 = reshape_layer(Max59873, [1, 2, 1], Res84024), 
LRes30915 = reshape_layer(Res84024, [1, 2, 1, 1], Res30915), 
LCro95881 = cropping3D_layer(Res30915, 0, 0, 0, 1, 0, 0, Cro95881), 
LZer42180 = zero_padding3D_layer(Cro95881, 1, 0, 0, 0, 2, 0, Zer42180), 
LAve35145 = average_layer([Res76984,Zer42180], Ave35145), 
LCon37784 = conv3D_transpose_layer(Ave35145, 1, 1, 1,[[[[[0.9311], [0.1759], [0.8355], [0.0857]]]]],[0, 0, 0, 0], 1, 1, 4, true, Con37784), 
exec_layers([LMin86181,LThr76015,LCon76903,LRes76984,LMax59873,LRes84024,LRes30915,LCro95881,LZer42180,LAve35145,LCon37784],["Min86181","Thr76015","Con76903","Res76984","Max59873","Res84024","Res30915","Cro95881","Zer42180","Ave35145","Con37784"],Con37784,"Con37784")

Actual (Unparsed): [[[[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.1753261, 0.0331220, 0.1573246, 0.0161373], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]]]]]

Expected (Unparsed): [[[[[0.0,0.0,0.0,0.0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0.0,0.0,0.0,0.0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0.0,0.0,0.0,0.0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]],[[[0.0,0.0,0.0,0.0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0.0,0.0,0.0,0.0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0.17532613,0.03312197,0.15732465,0.01613731],[0,0,0,0],[0,0,0,0],[0,0,0,0]]]]]

Actual:   [[[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0.1754, 0.0332, 0.1574, 0.0162], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]]]

Expected: [[[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]], [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0.1754, 0.0332, 0.1574, 0.0162], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]]]