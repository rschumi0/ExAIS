import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul96734 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Mul96734 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con24801 = tf.keras.layers.Input(shape=([2, 5]))
in0Cro89877 = tf.keras.layers.Input(shape=([2, 4, 3, 2]))
in0Sof69069 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con21344 = tf.keras.layers.Input(shape=([6, 5]))

Mul96734 = keras.layers.Multiply(name = 'Mul96734', )([in0Mul96734,in1Mul96734])
Cro91983 = keras.layers.Cropping2D(cropping=((0, 0), (0, 0)), name = 'Cro91983', )(Mul96734)
Res55465 = keras.layers.Reshape((2, 1), name = 'Res55465', )(Cro91983)
Con24801 = keras.layers.Concatenate(axis=2, name = 'Con24801', )([Res55465,in0Con24801])
Cro89877 = keras.layers.Cropping3D(cropping=((0, 0), (3, 0), (0, 0)), name = 'Cro89877', )(in0Cro89877)
Res93770 = keras.layers.Reshape((2, 1, 6), name = 'Res93770', )(Cro89877)
Res85797 = keras.layers.Reshape((2, 6), name = 'Res85797', )(Res93770)
Dot53195 = keras.layers.Dot(axes=(1, 1), name = 'Dot53195', )([Con24801,Res85797])
Sof69069 = keras.layers.Softmax(axis=1, name = 'Sof69069', input_shape=(2, 1, 1))(in0Sof69069)
Res17586 = keras.layers.Reshape((2, 1), name = 'Res17586', )(Sof69069)
Zer30760 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer30760', )(Res17586)
Zer21121 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer21121', )(Zer30760)
Con21344 = keras.layers.Concatenate(axis=2, name = 'Con21344', )([Zer21121,in0Con21344])
Mul72748 = keras.layers.Multiply(name = 'Mul72748', )([Dot53195,Con21344])
model = tf.keras.models.Model(inputs=[in0Mul96734,in1Mul96734,in0Con24801,in0Cro89877,in0Sof69069,in0Con21344], outputs=Mul72748)
in0Mul96734 = tf.constant([[[[0.476]], [[0.2151]]]])
in1Mul96734 = tf.constant([[[[0.7337]], [[0.5912]]]])
in0Con24801 = tf.constant([[[0.7022, 0.4301, 0.7024, 0.3259, 0.972], [0.2571, 0.5316, 0.9014, 0.191, 0.3078]]])
in0Cro89877 = tf.constant([[[[[1.953, 1.1206], [1.6864, 1.6228], [1.8854, 1.8206]], [[1.959, 1.0176], [1.8051, 1.8361], [1.0759, 1.0346]], [[1.0309, 1.6368], [1.8797, 1.7106], [1.6106, 1.1799]], [[1.2409, 1.3909], [1.9423, 1.7356], [1.0639, 1.2298]]], [[[1.0702, 1.3912], [1.4693, 1.2538], [1.9587, 1.6343]], [[1.0461, 1.4181], [1.0171, 1.3245], [1.236, 1.3233]], [[1.766, 1.1804], [1.2365, 1.9062], [1.8172, 1.6334]], [[1.2931, 1.4693], [1.2734, 1.5299], [1.8847, 1.8727]]]]])
in0Sof69069 = tf.constant([[[[0.2421]], [[0.6967]]]])
in0Con21344 = tf.constant([[[0.1148, 0.9064, 0.9993, 0.1428, 0.0689], [0.7691, 0.9089, 0.1835, 0.1646, 0.5258], [0.9022, 0.5962, 0.0308, 0.794, 0.0005], [0.6518, 0.4375, 0.3406, 0.2879, 0.3328], [0.6765, 0.1288, 0.4021, 0.6898, 0.4638], [0.5298, 0.4907, 0.5725, 0.524, 0.0818]]])
print (np.array2string(model.predict([in0Mul96734,in1Mul96734,in0Con24801,in0Cro89877,in0Sof69069,in0Con21344],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul72748.png')

LMul96734 = multiply_layer([[[[[0.476]], [[0.2151]]]], [[[[0.7337]], [[0.5912]]]]], Mul96734), 
LCro91983 = cropping2D_layer(Mul96734, 0, 0, 0, 0, Cro91983), 
LRes55465 = reshape_layer(Cro91983, [2, 1], Res55465), 
LCon24801 = concatenate_layer([Res55465,[[[0.7022, 0.4301, 0.7024, 0.3259, 0.972], [0.2571, 0.5316, 0.9014, 0.191, 0.3078]]]], 2, Con24801), 
LCro89877 = cropping3D_layer([[[[[1.953, 1.1206], [1.6864, 1.6228], [1.8854, 1.8206]], [[1.959, 1.0176], [1.8051, 1.8361], [1.0759, 1.0346]], [[1.0309, 1.6368], [1.8797, 1.7106], [1.6106, 1.1799]], [[1.2409, 1.3909], [1.9423, 1.7356], [1.0639, 1.2298]]], [[[1.0702, 1.3912], [1.4693, 1.2538], [1.9587, 1.6343]], [[1.0461, 1.4181], [1.0171, 1.3245], [1.236, 1.3233]], [[1.766, 1.1804], [1.2365, 1.9062], [1.8172, 1.6334]], [[1.2931, 1.4693], [1.2734, 1.5299], [1.8847, 1.8727]]]]], 0, 0, 3, 0, 0, 0, Cro89877), 
LRes93770 = reshape_layer(Cro89877, [2, 1, 6], Res93770), 
LRes85797 = reshape_layer(Res93770, [2, 6], Res85797), 
LDot53195 = dot_layer(Con24801,Res85797, 1, 1, Dot53195), 
LSof69069 = softmax_layer([[[[0.2421]], [[0.6967]]]], 1, Sof69069), 
LRes17586 = reshape_layer(Sof69069, [2, 1], Res17586), 
LZer30760 = zero_padding1D_layer(Res17586, 1, 1, Zer30760), 
LZer21121 = zero_padding1D_layer(Zer30760, 2, 0, Zer21121), 
LCon21344 = concatenate_layer([Zer21121,[[[0.1148, 0.9064, 0.9993, 0.1428, 0.0689], [0.7691, 0.9089, 0.1835, 0.1646, 0.5258], [0.9022, 0.5962, 0.0308, 0.794, 0.0005], [0.6518, 0.4375, 0.3406, 0.2879, 0.3328], [0.6765, 0.1288, 0.4021, 0.6898, 0.4638], [0.5298, 0.4907, 0.5725, 0.524, 0.0818]]]], 2, Con21344), 
LMul72748 = multiply_layer([Dot53195,Con21344], Mul72748), 
exec_layers([LMul96734,LCro91983,LRes55465,LCon24801,LCro89877,LRes93770,LRes85797,LDot53195,LSof69069,LRes17586,LZer30760,LZer21121,LCon21344,LMul72748],["Mul96734","Cro91983","Res55465","Con24801","Cro89877","Res93770","Res85797","Dot53195","Sof69069","Res17586","Zer30760","Zer21121","Con21344","Mul72748"],Mul72748,"Mul72748")

Actual (Unparsed): [[[0.0000000, 0.0772152, 0.7616169, 0.8001355, 0.0872836, 0.0460006], [0.0000000, 1.0417052, 1.5371991, 0.2958159, 0.2027258, 0.7072203], [0.0000000, 1.2444098, 0.9016467, 0.0480411, 1.1588350, 0.0007622], [0.7909822, 1.5000494, 1.0990500, 0.8849256, 0.7042472, 0.8492601], [0.3984772, 0.4965041, 0.1128565, 0.3449386, 0.4874835, 0.3517819], [0.0000000, 0.9558680, 1.1187313, 1.2354014, 0.8458520, 0.1449318]]]

Expected (Unparsed): [[[0.0,0.0772151957201408,0.7616169151087552,0.8001355164054743,0.08728358455864321,0.046000581574157595],[0.0,1.0417051953910001,1.5371991203800002,0.295815874435,0.20272579597,0.7072203126340001],[0.0,1.2444098461339999,0.9016467758539999,0.048041113120000006,1.15883498854,0.00076223215],[0.790982122430983,1.500049378324,1.0990499975,0.88492556438,0.7042471435259999,0.8492601062399999],[0.39847720901609934,0.496504057665,0.11285648813600002,0.34493864617400005,0.48748352935800005,0.351781873776],[0.0,0.9558679891320001,1.118731286484,1.2354014254499999,0.84585204504,0.144931821588]]]

Actual:   [[[0, 0.0773, 0.7617, 0.8002, 0.0873, 0.0461], [0, 1.0418, 1.5372, 0.2959, 0.2028, 0.7073], [0, 1.2445, 0.9017, 0.0481, 1.1589, 0.0008], [0.791, 1.5001, 1.0991, 0.885, 0.7043, 0.8493], [0.3985, 0.4966, 0.1129, 0.345, 0.4875, 0.3518], [0, 0.9559, 1.1188, 1.2355, 0.8459, 0.145]]]

Expected: [[[0, 0.0773, 0.7617, 0.8002, 0.0873, 0.0461], [0, 1.0418, 1.5372, 0.2959, 0.2028, 0.7073], [0, 1.2445, 0.9017, 0.0481, 1.1589, 0.0008], [0.791, 1.5001, 1.0991, 0.885, 0.7043, 0.8493], [0.3985, 0.4966, 0.1129, 0.345, 0.4875, 0.3518], [0, 0.9559, 1.1188, 1.2355, 0.8459, 0.145]]]