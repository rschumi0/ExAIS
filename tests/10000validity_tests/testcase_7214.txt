import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul25221 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in1Mul25221 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in0Lea49833 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in0LST40546 = tf.keras.layers.Input(shape=([2, 1]))
in0Con96299 = tf.keras.layers.Input(shape=([3, 1]))
in0Dot67031 = tf.keras.layers.Input(shape=([2, 2]))
in1Dot67031 = tf.keras.layers.Input(shape=([2, 2]))
in0Con26776 = tf.keras.layers.Input(shape=([3, 2, 3, 1]))
in0Ave52544 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Ave52544 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))

Mul25221 = keras.layers.Multiply(name = 'Mul25221', )([in0Mul25221,in1Mul25221])
Zer56987 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (1, 0)), name = 'Zer56987', )(Mul25221)
Lea49833 = keras.layers.LeakyReLU(alpha=2.8906826592968824, name = 'Lea49833', input_shape=(2, 1, 2, 1))(in0Lea49833)
Mul95599 = keras.layers.Multiply(name = 'Mul95599', )([Zer56987,Lea49833])
Res25769 = keras.layers.Reshape((2, 1, 2), name = 'Res25769', )(Mul95599)
Res56905 = keras.layers.Reshape((2, 2), name = 'Res56905', )(Res25769)
Zer3142 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer3142', )(Res56905)
LST40546 = keras.layers.LSTM(3,recurrent_activation='sigmoid', name = 'LST40546', )(in0LST40546)
Res94515 = keras.layers.Reshape((3, 1), name = 'Res94515', )(LST40546)
Con96299 = keras.layers.Concatenate(axis=2, name = 'Con96299', )([Res94515,in0Con96299])
Dot67031 = keras.layers.Dot(axes=(1, 1), name = 'Dot67031', )([in0Dot67031,in1Dot67031])
Zer89897 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer89897', )(Dot67031)
Sub53242 = keras.layers.Subtract(name = 'Sub53242', )([Con96299,Zer89897])
Min38153 = keras.layers.Minimum(name = 'Min38153', )([Zer3142,Sub53242])
Res86210 = keras.layers.Reshape((3, 2, 1), name = 'Res86210', )(Min38153)
Res80265 = keras.layers.Reshape((3, 2, 1, 1), name = 'Res80265', )(Res86210)
Zer6438 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer6438', )(Res80265)
Con26776 = keras.layers.Concatenate(axis=4, name = 'Con26776', )([Zer6438,in0Con26776])
Ave52544 = keras.layers.Average(name = 'Ave52544', )([in0Ave52544,in1Ave52544])
Zer31524 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (1, 0)), name = 'Zer31524', )(Ave52544)
Sub58220 = keras.layers.Subtract(name = 'Sub58220', )([Con26776,Zer31524])
model = tf.keras.models.Model(inputs=[in0Mul25221,in1Mul25221,in0Lea49833,in0LST40546,in0Con96299,in0Dot67031,in1Dot67031,in0Con26776,in0Ave52544,in1Ave52544], outputs=Sub58220)
w = model.get_layer('LST40546').get_weights() 
w[0] = np.array([[4, 7, 3, 8, 1, 4, 10, 1, 1, 6, 1, 7]])
w[1] = np.array([[1, 1, 2, 1, 1, 1, 6, 8, 4, 7, 9, 6], [6, 5, 9, 8, 6, 8, 7, 10, 7, 8, 8, 3], [3, 10, 8, 8, 4, 6, 10, 5, 9, 10, 10, 8]])
w[2] = np.array([8, 6, 1, 10, 4, 9, 4, 4, 5, 1, 4, 8])
model.get_layer('LST40546').set_weights(w) 
in0Mul25221 = tf.constant([[[[[0.9443]]], [[[0.6831]]]]])
in1Mul25221 = tf.constant([[[[[0.6677]]], [[[0.059]]]]])
in0Lea49833 = tf.constant([[[[[0.0746], [0.0917]]], [[[0.2927], [0.1582]]]]])
in0LST40546 = tf.constant([[[7], [9]]])
in0Con96299 = tf.constant([[[0.7994], [0.4164], [0.9448]]])
in0Dot67031 = tf.constant([[[0.4763, 0.7877], [0.1341, 0.1538]]])
in1Dot67031 = tf.constant([[[0.7129, 0.7371], [0.5716, 0.3714]]])
in0Con26776 = tf.constant([[[[[0.3982], [0.2189], [0.648]], [[0.5291], [0.0962], [0.7072]]], [[[0.8101], [0.8555], [0.4559]], [[0.017], [0.8883], [0.843]]], [[[0.2392], [0.5154], [0.2924]], [[0.0393], [0.8628], [0.3698]]]]])
in0Ave52544 = tf.constant([[[[[0.836, 0.0004], [0.7878, 0.5587]], [[0.1424, 0.1972], [0.4561, 0.6405]]], [[[0.9811, 0.6668], [0.9034, 0.7215]], [[0.3411, 0.0483], [0.3618, 0.4501]]]]])
in1Ave52544 = tf.constant([[[[[0.7882, 0.5745], [0.7252, 0.1031]], [[0.6555, 0.2811], [0.0412, 0.1419]]], [[[0.6418, 0.595], [0.0472, 0.2068]], [[0.1364, 0.1825], [0.554, 0.3856]]]]])
print (np.array2string(model.predict([in0Mul25221,in1Mul25221,in0Lea49833,in0LST40546,in0Con96299,in0Dot67031,in1Dot67031,in0Con26776,in0Ave52544,in1Ave52544],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub58220.png')

LMul25221 = multiply_layer([[[[[[0.9443]]], [[[0.6831]]]]], [[[[[0.6677]]], [[[0.059]]]]]], Mul25221), 
LZer56987 = zero_padding3D_layer(Mul25221, 0, 0, 0, 0, 1, 0, Zer56987), 
LLea49833 = leaky_relu_layer([[[[[0.0746], [0.0917]]], [[[0.2927], [0.1582]]]]], 2.8906826592968824, Lea49833), 
LMul95599 = multiply_layer([Zer56987,Lea49833], Mul95599), 
LRes25769 = reshape_layer(Mul95599, [2, 1, 2], Res25769), 
LRes56905 = reshape_layer(Res25769, [2, 2], Res56905), 
LZer3142 = zero_padding1D_layer(Res56905, 1, 0, Zer3142), 
LLST40546 = lstm_layer([[[7], [9]]],[[4, 7, 3, 8, 1, 4, 10, 1, 1, 6, 1, 7]],[[1, 1, 2, 1, 1, 1, 6, 8, 4, 7, 9, 6], [6, 5, 9, 8, 6, 8, 7, 10, 7, 8, 8, 3], [3, 10, 8, 8, 4, 6, 10, 5, 9, 10, 10, 8]],[8, 6, 1, 10, 4, 9, 4, 4, 5, 1, 4, 8], LST40546), 
LRes94515 = reshape_layer(LST40546, [3, 1], Res94515), 
LCon96299 = concatenate_layer([Res94515,[[[0.7994], [0.4164], [0.9448]]]], 2, Con96299), 
LDot67031 = dot_layer([[[0.4763, 0.7877], [0.1341, 0.1538]]], [[[0.7129, 0.7371], [0.5716, 0.3714]]], 1, 1, Dot67031), 
LZer89897 = zero_padding1D_layer(Dot67031, 1, 0, Zer89897), 
LSub53242 = subtract_layer(Con96299,Zer89897, Sub53242), 
LMin38153 = minimum_layer([Zer3142,Sub53242], Min38153), 
LRes86210 = reshape_layer(Min38153, [3, 2, 1], Res86210), 
LRes80265 = reshape_layer(Res86210, [3, 2, 1, 1], Res80265), 
LZer6438 = zero_padding3D_layer(Res80265, 0, 0, 0, 0, 2, 0, Zer6438), 
LCon26776 = concatenate_layer([Zer6438,[[[[[0.3982], [0.2189], [0.648]], [[0.5291], [0.0962], [0.7072]]], [[[0.8101], [0.8555], [0.4559]], [[0.017], [0.8883], [0.843]]], [[[0.2392], [0.5154], [0.2924]], [[0.0393], [0.8628], [0.3698]]]]]], 4, Con26776), 
LAve52544 = average_layer([[[[[[0.836, 0.0004], [0.7878, 0.5587]], [[0.1424, 0.1972], [0.4561, 0.6405]]], [[[0.9811, 0.6668], [0.9034, 0.7215]], [[0.3411, 0.0483], [0.3618, 0.4501]]]]], [[[[[0.7882, 0.5745], [0.7252, 0.1031]], [[0.6555, 0.2811], [0.0412, 0.1419]]], [[[0.6418, 0.595], [0.0472, 0.2068]], [[0.1364, 0.1825], [0.554, 0.3856]]]]]], Ave52544), 
LZer31524 = zero_padding3D_layer(Ave52544, 1, 0, 0, 0, 1, 0, Zer31524), 
LSub58220 = subtract_layer(Con26776,Zer31524, Sub58220), 
exec_layers([LMul25221,LZer56987,LLea49833,LMul95599,LRes25769,LRes56905,LZer3142,LLST40546,LRes94515,LCon96299,LDot67031,LZer89897,LSub53242,LMin38153,LRes86210,LRes80265,LZer6438,LCon26776,LAve52544,LZer31524,LSub58220],["Mul25221","Zer56987","Lea49833","Mul95599","Res25769","Res56905","Zer3142","LST40546","Res94515","Con96299","Dot67031","Zer89897","Sub53242","Min38153","Res86210","Res80265","Zer6438","Con26776","Ave52544","Zer31524","Sub58220"],Sub58220,"Sub58220")

Actual (Unparsed): [[[[[0.0000000, 0.3982000], [0.0000000, 0.2189000], [0.0000000, 0.6480000]], [[0.0000000, 0.5291000], [0.0000000, 0.0962000], [0.0000000, 0.7072000]]], [[[0.0000000, 0.8101000], [-0.8121000, 0.5680500], [-0.7565000, 0.1250000]], [[0.0000000, 0.0170000], [-0.3989500, 0.6491500], [-0.2331355, 0.4518000]]], [[[0.0000000, 0.2392000], [-0.8114500, -0.1155000], [-0.4753000, -0.1717500]], [[0.0000000, 0.0393000], [-0.2387500, 0.7474000], [-0.4515241, -0.0480500]]]]]

Expected (Unparsed): [[[[[0,0.3982],[0,0.2189],[0,0.648]],[[0,0.5291],[0,0.0962],[0,0.7072]]],[[[0,0.8101],[-0.8121,0.56805],[-0.7565,0.12500000000000006]],[[0,0.017],[-0.39894999999999997,0.64915],[-0.23313547000000004,0.4518]]],[[[0,0.2392],[-0.81145,-0.11550000000000005],[-0.4753,-0.17175]],[[0,0.0393],[-0.23875000000000002,0.7474000000000001],[-0.45152408122000004,-0.04804999999999998]]]]]

Actual:   [[[[[0, 0.3982], [0, 0.2189], [0, 0.648]], [[0, 0.5291], [0, 0.0962], [0, 0.7072]]], [[[0, 0.8101], [-0.8121, 0.5681], [-0.7565, 0.125]], [[0, 0.017], [-0.3989, 0.6492], [-0.2331, 0.4518]]], [[[0, 0.2392], [-0.8114, -0.1155], [-0.4753, -0.1717]], [[0, 0.0393], [-0.2387, 0.7474], [-0.4515, -0.048]]]]]

Expected: [[[[[0, 0.3982], [0, 0.2189], [0, 0.648]], [[0, 0.5291], [0, 0.0962], [0, 0.7072]]], [[[0, 0.8101], [-0.8121, 0.5681], [-0.7565, 0.1251]], [[0, 0.017], [-0.3989, 0.6492], [-0.2331, 0.4518]]], [[[0, 0.2392], [-0.8114, -0.1155], [-0.4753, -0.1717]], [[0, 0.0393], [-0.2387, 0.7475], [-0.4515, -0.048]]]]]