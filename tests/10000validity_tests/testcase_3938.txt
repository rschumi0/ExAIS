import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max14264 = tf.keras.layers.Input(shape=([1, 1]))
in0Con61019 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))
in0Sub82079 = tf.keras.layers.Input(shape=([3, 3, 2, 3]))
in1Sub82079 = tf.keras.layers.Input(shape=([3, 3, 2, 3]))

Max14264 = keras.layers.MaxPool1D(pool_size=(1), strides=(1), padding='same', name = 'Max14264', )(in0Max14264)
Sof9192 = keras.layers.Softmax(axis=1, name = 'Sof9192', )(Max14264)
Res16069 = keras.layers.Reshape((1, 1, 1), name = 'Res16069', )(Sof9192)
Res75781 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res75781', )(Res16069)
Zer28507 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (1, 0)), name = 'Zer28507', )(Res75781)
Con61019 = keras.layers.Concatenate(axis=4, name = 'Con61019', )([Zer28507,in0Con61019])
Sub82079 = keras.layers.Subtract(name = 'Sub82079', )([in0Sub82079,in1Sub82079])
Ave41909 = keras.layers.Average(name = 'Ave41909', )([Con61019,Sub82079])
model = tf.keras.models.Model(inputs=[in0Max14264,in0Con61019,in0Sub82079,in1Sub82079], outputs=Ave41909)
in0Max14264 = tf.constant([[[1.8479]]])
in0Con61019 = tf.constant([[[[[0.155, 0.1247], [0.3764, 0.7607]], [[0.8679, 0.7833], [0.5102, 0.0003]], [[0.5549, 0.0067], [0.9461, 0.2365]]], [[[0.3765, 0.2603], [0.5248, 0.4237]], [[0.2518, 0.2355], [0.5512, 0.3749]], [[0.7123, 0.4666], [0.4151, 0.2098]]], [[[0.5941, 0.231], [0.6142, 0.5379]], [[0.1226, 0.4037], [0.4065, 0.3076]], [[0.9924, 0.4653], [0.8896, 0.9175]]]]])
in0Sub82079 = tf.constant([[[[[0.3607, 0.7834, 0.0603], [0.4618, 0.1183, 0.454]], [[0.0435, 0.6136, 0.2405], [0.2039, 0.6023, 0.9128]], [[0.3163, 0.5037, 0.5657], [0.9593, 0.7016, 0.1616]]], [[[0.1141, 0.3828, 0.7728], [0.3776, 0.4414, 0.4144]], [[0.258, 0.6826, 0.4486], [0.6905, 0.7957, 0.3322]], [[0.3866, 0.5509, 0.5363], [0.0561, 0.4185, 0.4411]]], [[[0.297, 0.6733, 0.6609], [0.1487, 0.5098, 0.9751]], [[0.381, 0.5193, 0.9593], [0.4511, 0.6748, 0.9773]], [[0.0983, 0.8878, 0.1346], [0.6533, 0.5505, 0.6023]]]]])
in1Sub82079 = tf.constant([[[[[0.7231, 0.1671, 0.2608], [0.0954, 0.3177, 0.1481]], [[0.64, 0.1995, 0.1595], [0.3911, 0.9617, 0.3814]], [[0.7511, 0.1349, 0.2211], [0.7184, 0.58, 0.3323]]], [[[0.6374, 0.2064, 0.4163], [0.9353, 0.9931, 0.4833]], [[0.8308, 0.1562, 0.0446], [0.7558, 0.0099, 0.3876]], [[0.3064, 0.6996, 0.9078], [0.9646, 0.617, 0.3737]]], [[[0.2667, 0.2324, 0.0262], [0.7349, 0.0632, 0.4506]], [[0.7105, 0.1682, 0.492], [0.9052, 0.8168, 0.5588]], [[0.6866, 0.2287, 0.3658], [0.8248, 0.9948, 0.3348]]]]])
print (np.array2string(model.predict([in0Max14264,in0Con61019,in0Sub82079,in1Sub82079],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave41909.png')

LMax14264 = max_pool1D_layer([[[1.8479]]], 1, 1, true, Max14264), 
LSof9192 = softmax_layer(Max14264, 1, Sof9192), 
LRes16069 = reshape_layer(Sof9192, [1, 1, 1], Res16069), 
LRes75781 = reshape_layer(Res16069, [1, 1, 1, 1], Res75781), 
LZer28507 = zero_padding3D_layer(Res75781, 2, 0, 2, 0, 1, 0, Zer28507), 
LCon61019 = concatenate_layer([Zer28507,[[[[[0.155, 0.1247], [0.3764, 0.7607]], [[0.8679, 0.7833], [0.5102, 0.0003]], [[0.5549, 0.0067], [0.9461, 0.2365]]], [[[0.3765, 0.2603], [0.5248, 0.4237]], [[0.2518, 0.2355], [0.5512, 0.3749]], [[0.7123, 0.4666], [0.4151, 0.2098]]], [[[0.5941, 0.231], [0.6142, 0.5379]], [[0.1226, 0.4037], [0.4065, 0.3076]], [[0.9924, 0.4653], [0.8896, 0.9175]]]]]], 4, Con61019), 
LSub82079 = subtract_layer([[[[[0.3607, 0.7834, 0.0603], [0.4618, 0.1183, 0.454]], [[0.0435, 0.6136, 0.2405], [0.2039, 0.6023, 0.9128]], [[0.3163, 0.5037, 0.5657], [0.9593, 0.7016, 0.1616]]], [[[0.1141, 0.3828, 0.7728], [0.3776, 0.4414, 0.4144]], [[0.258, 0.6826, 0.4486], [0.6905, 0.7957, 0.3322]], [[0.3866, 0.5509, 0.5363], [0.0561, 0.4185, 0.4411]]], [[[0.297, 0.6733, 0.6609], [0.1487, 0.5098, 0.9751]], [[0.381, 0.5193, 0.9593], [0.4511, 0.6748, 0.9773]], [[0.0983, 0.8878, 0.1346], [0.6533, 0.5505, 0.6023]]]]], [[[[[0.7231, 0.1671, 0.2608], [0.0954, 0.3177, 0.1481]], [[0.64, 0.1995, 0.1595], [0.3911, 0.9617, 0.3814]], [[0.7511, 0.1349, 0.2211], [0.7184, 0.58, 0.3323]]], [[[0.6374, 0.2064, 0.4163], [0.9353, 0.9931, 0.4833]], [[0.8308, 0.1562, 0.0446], [0.7558, 0.0099, 0.3876]], [[0.3064, 0.6996, 0.9078], [0.9646, 0.617, 0.3737]]], [[[0.2667, 0.2324, 0.0262], [0.7349, 0.0632, 0.4506]], [[0.7105, 0.1682, 0.492], [0.9052, 0.8168, 0.5588]], [[0.6866, 0.2287, 0.3658], [0.8248, 0.9948, 0.3348]]]]], Sub82079), 
LAve41909 = average_layer([Con61019,Sub82079], Ave41909), 
exec_layers([LMax14264,LSof9192,LRes16069,LRes75781,LZer28507,LCon61019,LSub82079,LAve41909],["Max14264","Sof9192","Res16069","Res75781","Zer28507","Con61019","Sub82079","Ave41909"],Ave41909,"Ave41909")

Actual (Unparsed): [[[[[-0.1812000, 0.3856500, -0.0379000], [0.1832000, 0.0885000, 0.5333000]], [[-0.2982500, 0.6410000, 0.4321500], [-0.0936000, 0.0754000, 0.2658500]], [[-0.2174000, 0.4618500, 0.1756500], [0.1204500, 0.5338500, 0.0329000]]], [[[-0.2616500, 0.2764500, 0.3084000], [-0.2788500, -0.0134500, 0.1774000]], [[-0.2864000, 0.3891000, 0.3197500], [-0.0326500, 0.6685000, 0.1597500]], [[0.0401000, 0.2818000, 0.0475500], [-0.4542500, 0.1083000, 0.1386000]]], [[[0.0151500, 0.5175000, 0.4328500], [-0.2931000, 0.5304000, 0.5312000]], [[-0.1647500, 0.2368500, 0.4355000], [-0.2270500, 0.1322500, 0.3630500]], [[-0.2941500, 0.8257500, 0.1170500], [0.4142500, 0.2226500, 0.5925000]]]]]

Expected (Unparsed): [[[[[-0.18119999999999997,0.38565,-0.03789999999999999],[0.1832,0.08850000000000002,0.5333]],[[-0.29825,0.641,0.43215],[-0.0936,0.07539999999999997,0.2658499999999999]],[[-0.21739999999999998,0.46185,0.17565],[0.12045,0.53385,0.0329]]],[[[-0.26165,0.27645,0.3084],[-0.27885000000000004,-0.013449999999999962,0.1774]],[[-0.2864,0.3891,0.31975],[-0.03265000000000001,0.6685,0.15975]],[[0.0401,0.2818,0.04754999999999998],[-0.45425,0.10830000000000001,0.1386]]],[[[0.015149999999999997,0.5175,0.43285],[-0.2931,0.5304,0.5312]],[[-0.16475,0.23684999999999998,0.4355],[-0.22705,0.13224999999999998,0.36305]],[[-0.29415,0.82575,0.11704999999999999],[0.41425,0.22264999999999996,0.5925]]]]]

Actual:   [[[[[-0.1812, 0.3857, -0.0379], [0.1832, 0.0885, 0.5333]], [[-0.2982, 0.641, 0.4322], [-0.0936, 0.0754, 0.2659]], [[-0.2174, 0.4619, 0.1757], [0.1205, 0.5339, 0.0329]]], [[[-0.2616, 0.2765, 0.3084], [-0.2788, -0.0134, 0.1774]], [[-0.2864, 0.3891, 0.3198], [-0.0326, 0.6685, 0.1598]], [[0.0401, 0.2818, 0.0476], [-0.4542, 0.1083, 0.1386]]], [[[0.0152, 0.5175, 0.4329], [-0.2931, 0.5304, 0.5312]], [[-0.1647, 0.2369, 0.4355], [-0.227, 0.1323, 0.3631]], [[-0.2941, 0.8258, 0.1171], [0.4143, 0.2227, 0.5925]]]]]

Expected: [[[[[-0.1811, 0.3857, -0.0378], [0.1832, 0.0886, 0.5333]], [[-0.2982, 0.641, 0.4322], [-0.0936, 0.0754, 0.2659]], [[-0.2173, 0.4619, 0.1757], [0.1205, 0.5339, 0.0329]]], [[[-0.2616, 0.2765, 0.3084], [-0.2788, -0.0134, 0.1774]], [[-0.2864, 0.3891, 0.3198], [-0.0326, 0.6685, 0.1598]], [[0.0401, 0.2818, 0.0476], [-0.4542, 0.1084, 0.1386]]], [[[0.0152, 0.5175, 0.4329], [-0.2931, 0.5304, 0.5312]], [[-0.1647, 0.2369, 0.4355], [-0.227, 0.1323, 0.3631]], [[-0.2941, 0.8258, 0.1171], [0.4143, 0.2227, 0.5925]]]]]