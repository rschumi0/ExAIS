import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Loc73287 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Mul66664 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))
in1Mul66664 = tf.keras.layers.Input(shape=([1, 2, 2, 2]))

Loc73287 = keras.layers.LocallyConnected2D(2, (1, 1),strides=(10, 1), name = 'Loc73287', )(in0Loc73287)
Glo71610 = keras.layers.GlobalAveragePooling2D(name = 'Glo71610', )(Loc73287)
Res78865 = keras.layers.Reshape((2, 1), name = 'Res78865', )(Glo71610)
Res77693 = keras.layers.Reshape((2, 1, 1), name = 'Res77693', )(Res78865)
Res98168 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res98168', )(Res77693)
Con43811 = keras.layers.Conv3DTranspose(2, (2, 1, 1),strides=(1, 1, 1), padding='valid', name = 'Con43811', )(Res98168)
Zer75430 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (2, 0)), name = 'Zer75430', )(Con43811)
Mul66664 = keras.layers.Multiply(name = 'Mul66664', )([in0Mul66664,in1Mul66664])
Zer30354 = keras.layers.ZeroPadding3D(padding=((2, 0), (1, 0), (1, 0)), name = 'Zer30354', )(Mul66664)
Mul98505 = keras.layers.Multiply(name = 'Mul98505', )([Zer75430,Zer30354])
model = tf.keras.models.Model(inputs=[in0Loc73287,in0Mul66664,in1Mul66664], outputs=Mul98505)
w = model.get_layer('Loc73287').get_weights() 
w[0] = np.array([[[0.079, 0.9531]]])
w[1] = np.array([[[0, 0]]])
model.get_layer('Loc73287').set_weights(w) 
w = model.get_layer('Con43811').get_weights() 
w[0] = np.array([[[[[0.8356], [0.9903]]]], [[[[0.4052], [0.7548]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con43811').set_weights(w) 
in0Loc73287 = tf.constant([[[[0.2766]], [[0.5827]]]])
in0Mul66664 = tf.constant([[[[[0.1723, 0.2004], [0.1317, 0.4544]], [[0.0063, 0.1135], [0.5792, 0.9119]]]]])
in1Mul66664 = tf.constant([[[[[0.7338, 0.9498], [0.7911, 0.2377]], [[0.5225, 0.1569], [0.5679, 0.8635]]]]])
print (np.array2string(model.predict([in0Loc73287,in0Mul66664,in1Mul66664],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul98505.png')

LLoc73287 = locally_connected2D_layer([[[[0.2766]], [[0.5827]]]], 1, 1,[[[0.079, 0.9531]]],[[[0, 0]]], 10, 1, Loc73287), 
LGlo71610 = global_average_pooling2D_layer(Loc73287, Glo71610), 
LRes78865 = reshape_layer(Glo71610, [2, 1], Res78865), 
LRes77693 = reshape_layer(Res78865, [2, 1, 1], Res77693), 
LRes98168 = reshape_layer(Res77693, [2, 1, 1, 1], Res98168), 
LCon43811 = conv3D_transpose_layer(Res98168, 2, 1, 1,[[[[[0.8356], [0.9903]]]], [[[[0.4052], [0.7548]]]]],[0, 0], 1, 1, 1, false, Con43811), 
LZer75430 = zero_padding3D_layer(Con43811, 0, 0, 2, 0, 2, 0, Zer75430), 
LMul66664 = multiply_layer([[[[[[0.1723, 0.2004], [0.1317, 0.4544]], [[0.0063, 0.1135], [0.5792, 0.9119]]]]], [[[[[0.7338, 0.9498], [0.7911, 0.2377]], [[0.5225, 0.1569], [0.5679, 0.8635]]]]]], Mul66664), 
LZer30354 = zero_padding3D_layer(Mul66664, 2, 0, 1, 0, 1, 0, Zer30354), 
LMul98505 = multiply_layer([Zer75430,Zer30354], Mul98505), 
exec_layers([LLoc73287,LGlo71610,LRes78865,LRes77693,LRes98168,LCon43811,LZer75430,LMul66664,LZer30354,LMul98505],["Loc73287","Glo71610","Res78865","Res77693","Res98168","Con43811","Zer75430","Mul66664","Zer30354","Mul98505"],Mul98505,"Mul98505")

Actual (Unparsed): [[[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0351367, 0.1566867]]]]]

Expected (Unparsed): [[[[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0.0,0.0]]],[[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0.0,0.0]]],[[[0,0],[0,0],[0,0]],[[0,0],[0.0,0.0],[0.0,0.0]],[[0,0],[0.0,0.0],[0.035136662238608,0.15668668575169384]]]]]

Actual:   [[[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0.0352, 0.1567]]]]]

Expected: [[[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0.0352, 0.1567]]]]]