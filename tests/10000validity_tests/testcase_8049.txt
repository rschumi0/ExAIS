import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub83268 = tf.keras.layers.Input(shape=([3, 3]))
in1Sub83268 = tf.keras.layers.Input(shape=([3, 3]))
in0Con45304 = tf.keras.layers.Input(shape=([6, 4, 2]))
in0Sub48444 = tf.keras.layers.Input(shape=([3, 2, 3]))
in1Sub48444 = tf.keras.layers.Input(shape=([3, 2, 3]))
in0Fla66422 = tf.keras.layers.Input(shape=([3, 1]))

Sub83268 = keras.layers.Subtract(name = 'Sub83268', )([in0Sub83268,in1Sub83268])
Res49907 = keras.layers.Reshape((3, 3, 1), name = 'Res49907', )(Sub83268)
Zer95697 = keras.layers.ZeroPadding2D(padding=((3, 0), (1, 0)), name = 'Zer95697', )(Res49907)
Con45304 = keras.layers.Concatenate(axis=3, name = 'Con45304', )([Zer95697,in0Con45304])
Sub48444 = keras.layers.Subtract(name = 'Sub48444', )([in0Sub48444,in1Sub48444])
Res44526 = keras.layers.Reshape((3, 2, 3, 1), name = 'Res44526', )(Sub48444)
Up_97162 = keras.layers.UpSampling3D(size=(2, 2, 1), name = 'Up_97162', )(Res44526)
Res72517 = keras.layers.Reshape((6, 4, 3), name = 'Res72517', )(Up_97162)
Fla66422 = keras.layers.Flatten(name = 'Fla66422', )(in0Fla66422)
Res69080 = keras.layers.Reshape((3, 1), name = 'Res69080', )(Fla66422)
Res60653 = keras.layers.Reshape((3, 1, 1), name = 'Res60653', )(Res69080)
Con96149 = keras.layers.Conv2DTranspose(3, (3, 1),strides=(1, 1), padding='same', name = 'Con96149', )(Res60653)
Zer85685 = keras.layers.ZeroPadding2D(padding=((3, 0), (3, 0)), name = 'Zer85685', )(Con96149)
Add35195 = keras.layers.Add(name = 'Add35195', )([Res72517,Zer85685])
Max80723 = keras.layers.Maximum(name = 'Max80723', )([Con45304,Add35195])
model = tf.keras.models.Model(inputs=[in0Sub83268,in1Sub83268,in0Con45304,in0Sub48444,in1Sub48444,in0Fla66422], outputs=Max80723)
w = model.get_layer('Con96149').get_weights() 
w[0] = np.array([[[[0.2293], [0.9265], [0.6696]]], [[[0.2663], [0.5774], [0.7338]]], [[[0.5275], [0.387], [0.5011]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con96149').set_weights(w) 
in0Sub83268 = tf.constant([[[0.9309, 0.4194, 0.9439], [0.5448, 0.2225, 0.5045], [0.6686, 0.5106, 0.7491]]])
in1Sub83268 = tf.constant([[[0.805, 0.6525, 0.3872], [0.2497, 0.674, 0.5479], [0.6634, 0.7391, 0.7453]]])
in0Con45304 = tf.constant([[[[0.7427, 0.4318], [0.9828, 0.6564], [0.108, 0.6941], [0.8012, 0.2685]], [[0.3094, 0.5584], [0.9966, 0.129], [0.5554, 0.2373], [0.232, 0.264]], [[0.539, 0.1778], [0.5304, 0.9037], [0.4966, 0.6897], [0.6327, 0.0949]], [[0.8151, 0.0448], [0.6013, 0.5946], [0.1991, 0.1212], [0.7352, 0.7488]], [[0.2135, 0.9365], [0.1777, 0.4754], [0.0933, 0.2218], [0.6898, 0.9185]], [[0.0732, 0.526], [0.9426, 0.8168], [0.1315, 0.2044], [0.3347, 0.1383]]]])
in0Sub48444 = tf.constant([[[[0.8209, 0.1296, 0.0789], [0.0898, 0.8384, 0.0102]], [[0.8293, 0.9923, 0.1535], [0.4679, 0.2481, 0.5775]], [[0.8266, 0.7312, 0.6227], [0.7559, 0.8254, 0.8492]]]])
in1Sub48444 = tf.constant([[[[0.476, 0.4722, 0.2975], [0.6092, 0.5687, 0.0378]], [[0.7774, 0.4647, 0.0365], [0.4103, 0.1999, 0.4191]], [[0.4474, 0.6394, 0.9252], [0.6838, 0.0407, 0.3436]]]])
in0Fla66422 = tf.constant([[[1.8533], [1.5871], [1.9194]]])
print (np.array2string(model.predict([in0Sub83268,in1Sub83268,in0Con45304,in0Sub48444,in1Sub48444,in0Fla66422],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max80723.png')

LSub83268 = subtract_layer([[[0.9309, 0.4194, 0.9439], [0.5448, 0.2225, 0.5045], [0.6686, 0.5106, 0.7491]]], [[[0.805, 0.6525, 0.3872], [0.2497, 0.674, 0.5479], [0.6634, 0.7391, 0.7453]]], Sub83268), 
LRes49907 = reshape_layer(Sub83268, [3, 3, 1], Res49907), 
LZer95697 = zero_padding2D_layer(Res49907, 3, 0, 1, 0, Zer95697), 
LCon45304 = concatenate_layer([Zer95697,[[[[0.7427, 0.4318], [0.9828, 0.6564], [0.108, 0.6941], [0.8012, 0.2685]], [[0.3094, 0.5584], [0.9966, 0.129], [0.5554, 0.2373], [0.232, 0.264]], [[0.539, 0.1778], [0.5304, 0.9037], [0.4966, 0.6897], [0.6327, 0.0949]], [[0.8151, 0.0448], [0.6013, 0.5946], [0.1991, 0.1212], [0.7352, 0.7488]], [[0.2135, 0.9365], [0.1777, 0.4754], [0.0933, 0.2218], [0.6898, 0.9185]], [[0.0732, 0.526], [0.9426, 0.8168], [0.1315, 0.2044], [0.3347, 0.1383]]]]], 3, Con45304), 
LSub48444 = subtract_layer([[[[0.8209, 0.1296, 0.0789], [0.0898, 0.8384, 0.0102]], [[0.8293, 0.9923, 0.1535], [0.4679, 0.2481, 0.5775]], [[0.8266, 0.7312, 0.6227], [0.7559, 0.8254, 0.8492]]]], [[[[0.476, 0.4722, 0.2975], [0.6092, 0.5687, 0.0378]], [[0.7774, 0.4647, 0.0365], [0.4103, 0.1999, 0.4191]], [[0.4474, 0.6394, 0.9252], [0.6838, 0.0407, 0.3436]]]], Sub48444), 
LRes44526 = reshape_layer(Sub48444, [3, 2, 3, 1], Res44526), 
LUp_97162 = up_sampling3D_layer(Res44526, 2, 2, 1, Up_97162), 
LRes72517 = reshape_layer(Up_97162, [6, 4, 3], Res72517), 
LFla66422 = flatten_layer([[[1.8533], [1.5871], [1.9194]]], Fla66422), 
LRes69080 = reshape_layer(Fla66422, [3, 1], Res69080), 
LRes60653 = reshape_layer(Res69080, [3, 1, 1], Res60653), 
LCon96149 = conv2D_transpose_layer(Res60653, 3, 1,[[[[0.2293], [0.9265], [0.6696]]], [[[0.2663], [0.5774], [0.7338]]], [[[0.5275], [0.387], [0.5011]]]],[0, 0, 0], 1, 1, true, Con96149), 
LZer85685 = zero_padding2D_layer(Con96149, 3, 0, 3, 0, Zer85685), 
LAdd35195 = add_layer([Res72517,Zer85685], Add35195), 
LMax80723 = maximum_layer([Con45304,Add35195], Max80723), 
exec_layers([LSub83268,LRes49907,LZer95697,LCon45304,LSub48444,LRes44526,LUp_97162,LRes72517,LFla66422,LRes69080,LRes60653,LCon96149,LZer85685,LAdd35195,LMax80723],["Sub83268","Res49907","Zer95697","Con45304","Sub48444","Res44526","Up_97162","Res72517","Fla66422","Res69080","Res60653","Con96149","Zer85685","Add35195","Max80723"],Max80723,"Max80723")

Actual (Unparsed): [[[[0.3449000, 0.7427000, 0.4318000], [0.3449000, 0.9828000, 0.6564000], [0.0000000, 0.2697000, 0.6941000], [0.0000000, 0.8012000, 0.2685000]], [[0.3449000, 0.3094000, 0.5584000], [0.3449000, 0.9966000, 0.1290000], [0.0000000, 0.5554000, 0.2373000], [0.0000000, 0.2697000, 0.2640000]], [[0.0519000, 0.5390000, 0.1778000], [0.0519000, 0.5304000, 0.9037000], [0.0576000, 0.4966000, 0.6897000], [0.0576000, 0.6327000, 0.1584000]], [[0.0519000, 0.8151000, 0.1170000], [0.1259000, 0.6013000, 0.5946000], [0.0576000, 0.1991000, 0.1584000], [0.9150558, 2.5887436, 2.5810737]], [[0.3792000, 0.2135000, 0.9365000], [0.3792000, 0.1777000, 0.4754000], [0.0721000, 0.7847000, 0.5056000], [1.9124789, 4.1966427, 3.8841328]], [[0.3792000, 0.0918000, 0.5260000], [0.3792000, 0.9426000, 0.8168000], [0.0721000, 0.7847000, 0.5056000], [1.4204315, 2.5071693, 2.7093515]]]]

Expected (Unparsed): [[[[0.3449,0.7427,0.4318],[0.3449,0.9828,0.6564],[0,0.26970000000000005,0.6941],[0,0.8012,0.2685]],[[0.3449,0.3094,0.5584],[0.3449,0.9966,0.129],[0,0.5554,0.2373],[0,0.26970000000000005,0.264]],[[0.05190000000000006,0.539,0.1778],[0.05190000000000006,0.5304,0.9037],[0.057599999999999985,0.4966,0.6897],[0.057599999999999985,0.6327,0.15840000000000004]],[[0.05190000000000006,0.8151,0.11699999999999999],[0.1258999999999999,0.6013,0.5946],[0.057599999999999985,0.1991,0.15840000000000004],[0.91505582,2.5887435699999997,2.5810736999999997]],[[0.3792,0.2135,0.9365],[0.3792,0.1777,0.4754],[0.07210000000000005,0.7847000000000001,0.5055999999999999],[1.9124788999999998,4.19664274,3.88413285]],[[0.3792,0.09179999999999999,0.526],[0.3792,0.9426,0.8168],[0.07210000000000005,0.7847000000000001,0.5055999999999999],[1.4204314699999998,2.50716926,2.7093515299999997]]]]

Actual:   [[[[0.3449, 0.7427, 0.4318], [0.3449, 0.9828, 0.6564], [0, 0.2697, 0.6941], [0, 0.8012, 0.2685]], [[0.3449, 0.3094, 0.5584], [0.3449, 0.9966, 0.129], [0, 0.5554, 0.2373], [0, 0.2697, 0.264]], [[0.0519, 0.539, 0.1778], [0.0519, 0.5304, 0.9037], [0.0576, 0.4966, 0.6897], [0.0576, 0.6327, 0.1584]], [[0.0519, 0.8151, 0.117], [0.1259, 0.6013, 0.5946], [0.0576, 0.1991, 0.1584], [0.9151, 2.5888, 2.5811]], [[0.3792, 0.2135, 0.9365], [0.3792, 0.1777, 0.4754], [0.0721, 0.7847, 0.5056], [1.9125, 4.1967, 3.8842]], [[0.3792, 0.0918, 0.526], [0.3792, 0.9426, 0.8168], [0.0721, 0.7847, 0.5056], [1.4205, 2.5072, 2.7094]]]]

Expected: [[[[0.3449, 0.7427, 0.4318], [0.3449, 0.9828, 0.6564], [0, 0.2698, 0.6941], [0, 0.8012, 0.2685]], [[0.3449, 0.3094, 0.5584], [0.3449, 0.9966, 0.129], [0, 0.5554, 0.2373], [0, 0.2698, 0.264]], [[0.052, 0.539, 0.1778], [0.052, 0.5304, 0.9037], [0.0576, 0.4966, 0.6897], [0.0576, 0.6327, 0.1585]], [[0.052, 0.8151, 0.117], [0.1259, 0.6013, 0.5946], [0.0576, 0.1991, 0.1585], [0.9151, 2.5888, 2.5811]], [[0.3792, 0.2135, 0.9365], [0.3792, 0.1777, 0.4754], [0.0722, 0.7848, 0.5056], [1.9125, 4.1967, 3.8842]], [[0.3792, 0.0918, 0.526], [0.3792, 0.9426, 0.8168], [0.0722, 0.7848, 0.5056], [1.4205, 2.5072, 2.7094]]]]