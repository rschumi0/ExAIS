import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0ReL88336 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Con39181 = tf.keras.layers.Input(shape=([1, 1, 2, 3]))
in0Cro55008 = tf.keras.layers.Input(shape=([3, 3, 4, 4]))

ReL88336 = keras.layers.ReLU(max_value=3.013065491375452, negative_slope=1.0566870741823118, threshold=5.471001939821544, name = 'ReL88336', input_shape=(1, 2, 1, 1))(in0ReL88336)
Res73300 = keras.layers.Reshape((1, 2, 1), name = 'Res73300', )(ReL88336)
Up_32172 = keras.layers.UpSampling2D(size=(2, 1), name = 'Up_32172', )(Res73300)
Dep41915 = keras.layers.DepthwiseConv2D((2, 2),strides=(2, 2), padding='same', name = 'Dep41915', )(Up_32172)
Res24463 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res24463', )(Dep41915)
Zer28886 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (1, 0)), name = 'Zer28886', )(Res24463)
Con39181 = keras.layers.Concatenate(axis=4, name = 'Con39181', )([Zer28886,in0Con39181])
Cro55008 = keras.layers.Cropping3D(cropping=((0, 2), (1, 1), (0, 2)), name = 'Cro55008', )(in0Cro55008)
Min63600 = keras.layers.Minimum(name = 'Min63600', )([Con39181,Cro55008])
model = tf.keras.models.Model(inputs=[in0ReL88336,in0Con39181,in0Cro55008], outputs=Min63600)
w = model.get_layer('Dep41915').get_weights() 
w[0] = np.array([[[[0.8436]], [[0.1727]]], [[[0.6011]], [[0.6954]]]])
w[1] = np.array([0])
model.get_layer('Dep41915').set_weights(w) 
in0ReL88336 = tf.constant([[[[[0.5745]], [[0.2319]]]]])
in0Con39181 = tf.constant([[[[[0.6497, 0.209, 0.9314], [0.5923, 0.5204, 0.6882]]]]])
in0Cro55008 = tf.constant([[[[[1.2912, 1.0674, 1.4456, 1.461], [1.3368, 1.0936, 1.3121, 1.8662], [1.521, 1.7414, 1.6797, 1.1132], [1.8053, 1.0788, 1.5405, 1.2945]], [[1.3982, 1.1952, 1.3605, 1.7508], [1.5185, 1.159, 1.213, 1.7336], [1.7112, 1.0436, 1.2475, 1.1853], [1.0654, 1.0064, 1.3806, 1.5216]], [[1.2653, 1.5274, 1.8219, 1.1937], [1.5278, 1.8248, 1.8084, 1.9802], [1.127, 1.1509, 1.71, 1.4128], [1.388, 1.1438, 1.4888, 1.475]]], [[[1.7435, 1.658, 1.3507, 1.7302], [1.6897, 1.5331, 1.3073, 1.3329], [1.2545, 1.5702, 1.2853, 1.956], [1.8923, 1.5821, 1.3639, 1.5275]], [[1.5624, 1.7584, 1.6991, 1.8115], [1.1105, 1.7446, 1.7044, 1.2918], [1.9766, 1.7721, 1.0933, 1.5191], [1.6806, 1.8957, 1.4653, 1.0696]], [[1.4997, 1.8978, 1.2159, 1.5292], [1.2455, 1.6975, 1.6859, 1.464], [1.0713, 1.1698, 1.6317, 1.1691], [1.7985, 1.1226, 1.2922, 1.0954]]], [[[1.335, 1.8057, 1.5583, 1.2489], [1.3784, 1.7329, 1.0063, 1.5266], [1.7466, 1.7893, 1.8496, 1.9094], [1.3568, 1.5601, 1.1843, 1.6674]], [[1.0889, 1.5746, 1.2526, 1.248], [1.5094, 1.6871, 1.8386, 1.3178], [1.7093, 1.1309, 1.3195, 1.5063], [1.3122, 1.8773, 1.346, 1.7596]], [[1.0478, 1.8054, 1.6015, 1.8564], [1.1543, 1.8492, 1.5976, 1.5578], [1.27, 1.7223, 1.0054, 1.0696], [1.4089, 1.0445, 1.5931, 1.9803]]]]])
print (np.array2string(model.predict([in0ReL88336,in0Con39181,in0Cro55008],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min63600.png')

LReL88336 = relu_layer([[[[[0.5745]], [[0.2319]]]]], 3.013065491375452, 1.0566870741823118, 5.471001939821544, ReL88336), 
LRes73300 = reshape_layer(ReL88336, [1, 2, 1], Res73300), 
LUp_32172 = up_sampling2D_layer(Res73300, 2, 1, Up_32172), 
LDep41915 = depthwise_conv2D_layer(Up_32172, 2, 2,[[[[0.8436]], [[0.1727]]], [[[0.6011]], [[0.6954]]]],[0], 2, 2, true, Dep41915), 
LRes24463 = reshape_layer(Dep41915, [1, 1, 1, 1], Res24463), 
LZer28886 = zero_padding3D_layer(Res24463, 0, 0, 0, 0, 1, 0, Zer28886), 
LCon39181 = concatenate_layer([Zer28886,[[[[[0.6497, 0.209, 0.9314], [0.5923, 0.5204, 0.6882]]]]]], 4, Con39181), 
LCro55008 = cropping3D_layer([[[[[1.2912, 1.0674, 1.4456, 1.461], [1.3368, 1.0936, 1.3121, 1.8662], [1.521, 1.7414, 1.6797, 1.1132], [1.8053, 1.0788, 1.5405, 1.2945]], [[1.3982, 1.1952, 1.3605, 1.7508], [1.5185, 1.159, 1.213, 1.7336], [1.7112, 1.0436, 1.2475, 1.1853], [1.0654, 1.0064, 1.3806, 1.5216]], [[1.2653, 1.5274, 1.8219, 1.1937], [1.5278, 1.8248, 1.8084, 1.9802], [1.127, 1.1509, 1.71, 1.4128], [1.388, 1.1438, 1.4888, 1.475]]], [[[1.7435, 1.658, 1.3507, 1.7302], [1.6897, 1.5331, 1.3073, 1.3329], [1.2545, 1.5702, 1.2853, 1.956], [1.8923, 1.5821, 1.3639, 1.5275]], [[1.5624, 1.7584, 1.6991, 1.8115], [1.1105, 1.7446, 1.7044, 1.2918], [1.9766, 1.7721, 1.0933, 1.5191], [1.6806, 1.8957, 1.4653, 1.0696]], [[1.4997, 1.8978, 1.2159, 1.5292], [1.2455, 1.6975, 1.6859, 1.464], [1.0713, 1.1698, 1.6317, 1.1691], [1.7985, 1.1226, 1.2922, 1.0954]]], [[[1.335, 1.8057, 1.5583, 1.2489], [1.3784, 1.7329, 1.0063, 1.5266], [1.7466, 1.7893, 1.8496, 1.9094], [1.3568, 1.5601, 1.1843, 1.6674]], [[1.0889, 1.5746, 1.2526, 1.248], [1.5094, 1.6871, 1.8386, 1.3178], [1.7093, 1.1309, 1.3195, 1.5063], [1.3122, 1.8773, 1.346, 1.7596]], [[1.0478, 1.8054, 1.6015, 1.8564], [1.1543, 1.8492, 1.5976, 1.5578], [1.27, 1.7223, 1.0054, 1.0696], [1.4089, 1.0445, 1.5931, 1.9803]]]]], 0, 2, 1, 1, 0, 2, Cro55008), 
LMin63600 = minimum_layer([Con39181,Cro55008], Min63600), 
exec_layers([LReL88336,LRes73300,LUp_32172,LDep41915,LRes24463,LZer28886,LCon39181,LCro55008,LMin63600],["ReL88336","Res73300","Up_32172","Dep41915","Res24463","Zer28886","Con39181","Cro55008","Min63600"],Min63600,"Min63600")

Actual (Unparsed): [[[[[0.0000000, 0.6497000, 0.2090000, 0.9314000], [-12.2808602, 0.5923000, 0.5204000, 0.6882000]]]]]

Expected (Unparsed): [[[[[0,0.6497,0.209,0.9314],[-12.280860232361388,0.5923,0.5204,0.6882]]]]]

Actual:   [[[[[0, 0.6497, 0.209, 0.9314], [-12.2808, 0.5923, 0.5204, 0.6882]]]]]

Expected: [[[[[0, 0.6497, 0.209, 0.9314], [-12.2808, 0.5923, 0.5204, 0.6882]]]]]