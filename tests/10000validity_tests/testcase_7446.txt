import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min36714 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in1Min36714 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in0Con90503 = tf.keras.layers.Input(shape=([3, 1, 2, 2]))
in0Con84219 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))

Min36714 = keras.layers.Minimum(name = 'Min36714', )([in0Min36714,in1Min36714])
Zer26287 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (0, 0)), name = 'Zer26287', )(Min36714)
Con90503 = keras.layers.Concatenate(axis=4, name = 'Con90503', )([Zer26287,in0Con90503])
Con84219 = keras.layers.Conv3DTranspose(4, (2, 1, 1),strides=(1, 1, 1), padding='valid', name = 'Con84219', )(in0Con84219)
Mul90365 = keras.layers.Multiply(name = 'Mul90365', )([Con90503,Con84219])
ReL85425 = keras.layers.ReLU(max_value=9.476311348778815, negative_slope=1.426600546884193, threshold=8.888994999644268, name = 'ReL85425', )(Mul90365)
model = tf.keras.models.Model(inputs=[in0Min36714,in1Min36714,in0Con90503,in0Con84219], outputs=ReL85425)
w = model.get_layer('Con84219').get_weights() 
w[0] = np.array([[[[[0.7312, 0.8351], [0.2303, 0.4436], [0.9807, 0.1218], [0.1176, 0.9488]]]], [[[[0.6199, 0.793], [0.4716, 0.8896], [0.5911, 0.982], [0.679, 0.784]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con84219').set_weights(w) 
in0Min36714 = tf.constant([[[[[0.7946, 0.217], [0.0279, 0.7414]]], [[[0.1205, 0.2562], [0.8281, 0.9669]]]]])
in1Min36714 = tf.constant([[[[[0.8695, 0.4925], [0.8799, 0.3876]]], [[[0.2857, 0.5058], [0.8288, 0.9954]]]]])
in0Con90503 = tf.constant([[[[[0.4868, 0.2254], [0.1137, 0.007]]], [[[0.3032, 0.05], [0.5031, 0.8362]]], [[[0.6446, 0.2023], [0.8034, 0.8288]]]]])
in0Con84219 = tf.constant([[[[[0.3009, 0.9535], [0.5646, 0.6884]]], [[[0.8523, 0.8122], [0.5654, 0.9919]]]]])
print (np.array2string(model.predict([in0Min36714,in1Min36714,in0Con90503,in0Con84219],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='ReL85425.png')

LMin36714 = minimum_layer([[[[[[0.7946, 0.217], [0.0279, 0.7414]]], [[[0.1205, 0.2562], [0.8281, 0.9669]]]]], [[[[[0.8695, 0.4925], [0.8799, 0.3876]]], [[[0.2857, 0.5058], [0.8288, 0.9954]]]]]], Min36714), 
LZer26287 = zero_padding3D_layer(Min36714, 1, 0, 0, 0, 0, 0, Zer26287), 
LCon90503 = concatenate_layer([Zer26287,[[[[[0.4868, 0.2254], [0.1137, 0.007]]], [[[0.3032, 0.05], [0.5031, 0.8362]]], [[[0.6446, 0.2023], [0.8034, 0.8288]]]]]], 4, Con90503), 
LCon84219 = conv3D_transpose_layer([[[[[0.3009, 0.9535], [0.5646, 0.6884]]], [[[0.8523, 0.8122], [0.5654, 0.9919]]]]], 2, 1, 1,[[[[[0.7312, 0.8351], [0.2303, 0.4436], [0.9807, 0.1218], [0.1176, 0.9488]]]], [[[[0.6199, 0.793], [0.4716, 0.8896], [0.5911, 0.982], [0.679, 0.784]]]]],[0, 0, 0, 0], 1, 1, 1, false, Con84219), 
LMul90365 = multiply_layer([Con90503,Con84219], Mul90365), 
LReL85425 = relu_layer(Mul90365, 9.476311348778815, 1.426600546884193, 8.888994999644268, ReL85425), 
exec_layers([LMin36714,LZer26287,LCon90503,LCon84219,LMul90365,LReL85425],["Min36714","Zer26287","Con90503","Con84219","Mul90365","ReL85425"],ReL85425,"ReL85425")

Actual (Unparsed): [[[[[-12.6810451, -12.6810451, -12.3954593, -12.3787613], [-12.6810451, -12.6810451, -12.5776316, -12.6738595]]], [[[-10.1371589, -12.2022251, -11.7947704, -12.5510318], [-12.5959619, -11.8798839, -11.4716501, -10.3778981]]], [[[-12.4795006, -12.2700541, -11.4843181, -12.3302570], [-11.3377492, -11.0960865, -11.1816151, -11.3076599]]]]]

Expected (Unparsed): [[[[[-12.681045127743369,-12.681045127743369,-12.395459323823978,-12.37876128179567],[-12.681045127743369,-12.681045127743369,-12.57763160497952,-12.673859545990936]]],[[[-10.13715892872311,-12.202225087216027,-11.79477040851463,-12.551031819852852],[-12.595961934731687,-11.879883926641465,-11.47164997845034,-10.377898072567493]]],[[[-12.479500634577269,-12.270054046638062,-11.484318034106707,-12.330257041107254],[-11.33774928876778,-11.09608655717554,-11.181615118282316,-11.307659950365474]]]]]

Actual:   [[[[[-12.681, -12.681, -12.3954, -12.3787], [-12.681, -12.681, -12.5776, -12.6738]]], [[[-10.1371, -12.2022, -11.7947, -12.551], [-12.5959, -11.8798, -11.4716, -10.3778]]], [[[-12.4795, -12.27, -11.4843, -12.3302], [-11.3377, -11.096, -11.1816, -11.3076]]]]]

Expected: [[[[[-12.681, -12.681, -12.3954, -12.3787], [-12.681, -12.681, -12.5776, -12.6738]]], [[[-10.1371, -12.2022, -11.7947, -12.551], [-12.5959, -11.8798, -11.4716, -10.3778]]], [[[-12.4795, -12.27, -11.4843, -12.3302], [-11.3377, -11.096, -11.1816, -11.3076]]]]]