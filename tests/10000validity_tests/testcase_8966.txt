import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo18860 = tf.keras.layers.Input(shape=([2, 2]))
in0Glo26020 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Con5653 = tf.keras.layers.Input(shape=([2, 2, 3, 2]))
in0Lea75511 = tf.keras.layers.Input(shape=([1, 1]))
in0Con65694 = tf.keras.layers.Input(shape=([2, 2, 3, 2]))
in0Sub12613 = tf.keras.layers.Input(shape=([2, 2, 3, 3]))
in1Sub12613 = tf.keras.layers.Input(shape=([2, 2, 3, 3]))
in0Mul64512 = tf.keras.layers.Input(shape=([1, 2, 2]))
in1Mul64512 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Con18114 = tf.keras.layers.Input(shape=([2, 2, 7]))

Glo18860 = keras.layers.GlobalAveragePooling1D(name = 'Glo18860', )(in0Glo18860)
Res22652 = keras.layers.Reshape((2, 1), name = 'Res22652', )(Glo18860)
Res70012 = keras.layers.Reshape((2, 1, 1), name = 'Res70012', )(Res22652)
Glo26020 = keras.layers.GlobalMaxPool3D(name = 'Glo26020', )(in0Glo26020)
Res70926 = keras.layers.Reshape((2, 1), name = 'Res70926', )(Glo26020)
Res77509 = keras.layers.Reshape((2, 1, 1), name = 'Res77509', )(Res70926)
Cro13905 = keras.layers.Cropping2D(cropping=((0, 1), (0, 0)), name = 'Cro13905', )(Res77509)
Zer40045 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer40045', )(Cro13905)
Max35573 = keras.layers.Maximum(name = 'Max35573', )([Res70012,Zer40045])
Res27331 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res27331', )(Max35573)
Zer42538 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (2, 0)), name = 'Zer42538', )(Res27331)
Con5653 = keras.layers.Concatenate(axis=4, name = 'Con5653', )([Zer42538,in0Con5653])
Lea75511 = keras.layers.LeakyReLU(alpha=9.739191613097011, name = 'Lea75511', input_shape=(1, 1))(in0Lea75511)
Res42624 = keras.layers.Reshape((1, 1, 1), name = 'Res42624', )(Lea75511)
Res85424 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res85424', )(Res42624)
Zer29509 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (2, 0)), name = 'Zer29509', )(Res85424)
Con65694 = keras.layers.Concatenate(axis=4, name = 'Con65694', )([Zer29509,in0Con65694])
Sub12613 = keras.layers.Subtract(name = 'Sub12613', )([in0Sub12613,in1Sub12613])
Max45435 = keras.layers.Maximum(name = 'Max45435', )([Con65694,Sub12613])
Sub2721 = keras.layers.Subtract(name = 'Sub2721', )([Con5653,Max45435])
Res81976 = keras.layers.Reshape((2, 2, 9), name = 'Res81976', )(Sub2721)
Mul64512 = keras.layers.Multiply(name = 'Mul64512', )([in0Mul64512,in1Mul64512])
Bat28613 = keras.layers.BatchNormalization(axis=1, epsilon=0.6294724241917639,  name = 'Bat28613', )(Mul64512)
Zer23562 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer23562', )(Bat28613)
Con18114 = keras.layers.Concatenate(axis=3, name = 'Con18114', )([Zer23562,in0Con18114])
Ave80380 = keras.layers.Average(name = 'Ave80380', )([Res81976,Con18114])
model = tf.keras.models.Model(inputs=[in0Glo18860,in0Glo26020,in0Con5653,in0Lea75511,in0Con65694,in0Sub12613,in1Sub12613,in0Mul64512,in1Mul64512,in0Con18114], outputs=Ave80380)
w = model.get_layer('Bat28613').get_weights() 
w[0] = np.array([0.1172])
w[1] = np.array([0.011])
w[2] = np.array([0.9251])
w[3] = np.array([0.0122])
model.get_layer('Bat28613').set_weights(w) 
in0Glo18860 = tf.constant([[[1.3954, 1.1676], [1.2999, 1.7007]]])
in0Glo26020 = tf.constant([[[[[1.0575, 1.2715]], [[1.1559, 1.8134]]], [[[1.1992, 1.6168]], [[1.0035, 1.8367]]]]])
in0Con5653 = tf.constant([[[[[0.1845, 0.9533], [0.362, 0.2294], [0.9323, 0.7169]], [[0.5537, 0.8822], [0.0661, 0.9558], [0.6941, 0.7399]]], [[[0.2104, 0.8549], [0.9394, 0.4883], [0.1272, 0.2867]], [[0.9741, 0.9307], [0.3478, 0.1219], [0.7785, 0.3567]]]]])
in0Lea75511 = tf.constant([[[0.9104]]])
in0Con65694 = tf.constant([[[[[0.0382, 0.7311], [0.4757, 0.986], [0.0303, 0.716]], [[0.8049, 0.4493], [0.2535, 0.5746], [0.0793, 0.0022]]], [[[0.8322, 0.8802], [0.3033, 0.5619], [0.4142, 0.6336]], [[0.5782, 0.0919], [0.5199, 0.452], [0.0425, 0.2611]]]]])
in0Sub12613 = tf.constant([[[[[0.2094, 0.301, 0.8694], [0.147, 0.5915, 0.8062], [0.0827, 0.3174, 0.7193]], [[0.5356, 0.2952, 0.363], [0.4098, 0.6162, 0.4308], [0.1592, 0.908, 0.5238]]], [[[0.6486, 0.4327, 0.6946], [0.2735, 0.3213, 0.4229], [0.1263, 0.3613, 0.8485]], [[0.1949, 0.8834, 0.6437], [0.4916, 0.8586, 0.4818], [0.884, 0.0373, 0.9389]]]]])
in1Sub12613 = tf.constant([[[[[0.3032, 0.3965, 0.1144], [0.8005, 0.6919, 0.0762], [0.4143, 0.3382, 0.6743]], [[0.1112, 0.9019, 0.1089], [0.767, 0.8483, 0.3404], [0.7045, 0.1569, 0.6049]]], [[[0.0993, 0.4431, 0.261], [0.7016, 0.2667, 0.3914], [0.3025, 0.6284, 0.5468]], [[0.3182, 0.0773, 0.0525], [0.2847, 0.4326, 0.525], [0.3225, 0.233, 0.6563]]]]])
in0Mul64512 = tf.constant([[[[0.0704, 0.2338], [0.3521, 0.745]]]])
in1Mul64512 = tf.constant([[[[0.9534, 0.0812], [0.0167, 0.7869]]]])
in0Con18114 = tf.constant([[[[0.9956, 0.0183, 0.7261, 0.2665, 0.035, 0.0539, 0.8089], [0.0579, 0.1974, 0.0412, 0.084, 0.4559, 0.2942, 0.2183]], [[0.5973, 0.6357, 0.5161, 0.0153, 0.1733, 0.41, 0.0091], [0.2174, 0.2972, 0.9804, 0.2551, 0.1057, 0.9408, 0.2621]]]])
print (np.array2string(model.predict([in0Glo18860,in0Glo26020,in0Con5653,in0Lea75511,in0Con65694,in0Sub12613,in1Sub12613,in0Mul64512,in1Mul64512,in0Con18114],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave80380.png')

LGlo18860 = global_average_pooling1D_layer([[[1.3954, 1.1676], [1.2999, 1.7007]]], Glo18860), 
LRes22652 = reshape_layer(Glo18860, [2, 1], Res22652), 
LRes70012 = reshape_layer(Res22652, [2, 1, 1], Res70012), 
LGlo26020 = global_max_pool3D_layer([[[[[1.0575, 1.2715]], [[1.1559, 1.8134]]], [[[1.1992, 1.6168]], [[1.0035, 1.8367]]]]], Glo26020), 
LRes70926 = reshape_layer(Glo26020, [2, 1], Res70926), 
LRes77509 = reshape_layer(Res70926, [2, 1, 1], Res77509), 
LCro13905 = cropping2D_layer(Res77509, 0, 1, 0, 0, Cro13905), 
LZer40045 = zero_padding2D_layer(Cro13905, 1, 0, 0, 0, Zer40045), 
LMax35573 = maximum_layer([Res70012,Zer40045], Max35573), 
LRes27331 = reshape_layer(Max35573, [2, 1, 1, 1], Res27331), 
LZer42538 = zero_padding3D_layer(Res27331, 0, 0, 1, 0, 2, 0, Zer42538), 
LCon5653 = concatenate_layer([Zer42538,[[[[[0.1845, 0.9533], [0.362, 0.2294], [0.9323, 0.7169]], [[0.5537, 0.8822], [0.0661, 0.9558], [0.6941, 0.7399]]], [[[0.2104, 0.8549], [0.9394, 0.4883], [0.1272, 0.2867]], [[0.9741, 0.9307], [0.3478, 0.1219], [0.7785, 0.3567]]]]]], 4, Con5653), 
LLea75511 = leaky_relu_layer([[[0.9104]]], 9.739191613097011, Lea75511), 
LRes42624 = reshape_layer(Lea75511, [1, 1, 1], Res42624), 
LRes85424 = reshape_layer(Res42624, [1, 1, 1, 1], Res85424), 
LZer29509 = zero_padding3D_layer(Res85424, 1, 0, 1, 0, 2, 0, Zer29509), 
LCon65694 = concatenate_layer([Zer29509,[[[[[0.0382, 0.7311], [0.4757, 0.986], [0.0303, 0.716]], [[0.8049, 0.4493], [0.2535, 0.5746], [0.0793, 0.0022]]], [[[0.8322, 0.8802], [0.3033, 0.5619], [0.4142, 0.6336]], [[0.5782, 0.0919], [0.5199, 0.452], [0.0425, 0.2611]]]]]], 4, Con65694), 
LSub12613 = subtract_layer([[[[[0.2094, 0.301, 0.8694], [0.147, 0.5915, 0.8062], [0.0827, 0.3174, 0.7193]], [[0.5356, 0.2952, 0.363], [0.4098, 0.6162, 0.4308], [0.1592, 0.908, 0.5238]]], [[[0.6486, 0.4327, 0.6946], [0.2735, 0.3213, 0.4229], [0.1263, 0.3613, 0.8485]], [[0.1949, 0.8834, 0.6437], [0.4916, 0.8586, 0.4818], [0.884, 0.0373, 0.9389]]]]], [[[[[0.3032, 0.3965, 0.1144], [0.8005, 0.6919, 0.0762], [0.4143, 0.3382, 0.6743]], [[0.1112, 0.9019, 0.1089], [0.767, 0.8483, 0.3404], [0.7045, 0.1569, 0.6049]]], [[[0.0993, 0.4431, 0.261], [0.7016, 0.2667, 0.3914], [0.3025, 0.6284, 0.5468]], [[0.3182, 0.0773, 0.0525], [0.2847, 0.4326, 0.525], [0.3225, 0.233, 0.6563]]]]], Sub12613), 
LMax45435 = maximum_layer([Con65694,Sub12613], Max45435), 
LSub2721 = subtract_layer(Con5653,Max45435, Sub2721), 
LRes81976 = reshape_layer(Sub2721, [2, 2, 9], Res81976), 
LMul64512 = multiply_layer([[[[[0.0704, 0.2338], [0.3521, 0.745]]]], [[[[0.9534, 0.0812], [0.0167, 0.7869]]]]], Mul64512), 
LBat28613 = batch_normalization_layer(Mul64512, 1, 0.6294724241917639, [0.1172], [0.011], [0.9251], [0.0122], Bat28613), 
LZer23562 = zero_padding2D_layer(Bat28613, 1, 0, 0, 0, Zer23562), 
LCon18114 = concatenate_layer([Zer23562,[[[[0.9956, 0.0183, 0.7261, 0.2665, 0.035, 0.0539, 0.8089], [0.0579, 0.1974, 0.0412, 0.084, 0.4559, 0.2942, 0.2183]], [[0.5973, 0.6357, 0.5161, 0.0153, 0.1733, 0.41, 0.0091], [0.2174, 0.2972, 0.9804, 0.2551, 0.1057, 0.9408, 0.2621]]]]], 3, Con18114), 
LAve80380 = average_layer([Res81976,Con18114], Ave80380), 
exec_layers([LGlo18860,LRes22652,LRes70012,LGlo26020,LRes70926,LRes77509,LCro13905,LZer40045,LMax35573,LRes27331,LZer42538,LCon5653,LLea75511,LRes42624,LRes85424,LZer29509,LCon65694,LSub12613,LMax45435,LSub2721,LRes81976,LMul64512,LBat28613,LZer23562,LCon18114,LAve80380],["Glo18860","Res22652","Res70012","Glo26020","Res70926","Res77509","Cro13905","Zer40045","Max35573","Res27331","Zer42538","Con5653","Lea75511","Res42624","Res85424","Zer29509","Con65694","Sub12613","Max45435","Sub2721","Res81976","Mul64512","Bat28613","Zer23562","Con18114","Ave80380"],Ave80380,"Ave80380")

Actual (Unparsed): [[[[0.0000000, 0.0731500, 0.5969500, 0.0091500, 0.3062000, -0.2450500, 0.0175000, 0.4779500, 0.4049000], [-0.2122000, -0.1256000, 0.2454000, 0.0987000, -0.0731000, 0.2326000, 0.9017750, 0.1186000, 0.4780000]], [[-0.3319151, -0.3716864, 0.2860000, 0.3178500, 0.5761000, -0.0291500, 0.0866500, 0.0615000, -0.1689000], [-0.0617451, 0.0647109, 0.2784500, 0.0451500, 0.4041500, -0.0375000, 0.3147250, 0.8384000, 0.1681000]]]]

Expected (Unparsed): [[[[0,0.07314999999999999,0.5969500000000001,0.00915,0.30619999999999997,-0.24504999999999996,0.0175,0.47795,0.4049],[-0.2122,-0.1256,0.2454,0.0987,-0.0731,0.2326,0.901775,0.11860000000000004,0.478]],[[-0.3319151276366863,-0.3716864039043727,0.28600000000000003,0.31785,0.5761000000000001,-0.02914999999999997,0.08665,0.06149999999999997,-0.16890000000000002],[-0.061745056057017626,0.06471090945781284,0.27845,0.04515000000000002,0.40415,-0.037500000000000006,0.31472500000000003,0.8384,0.16810000000000003]]]]

Actual:   [[[[0, 0.0732, 0.597, 0.0092, 0.3062, -0.245, 0.0175, 0.478, 0.4049], [-0.2122, -0.1256, 0.2454, 0.0987, -0.0731, 0.2326, 0.9018, 0.1186, 0.478]], [[-0.3319, -0.3716, 0.286, 0.3179, 0.5761, -0.0291, 0.0867, 0.0615, -0.1689], [-0.0617, 0.0648, 0.2785, 0.0452, 0.4042, -0.0375, 0.3148, 0.8384, 0.1681]]]]

Expected: [[[[0, 0.0732, 0.597, 0.0092, 0.3062, -0.245, 0.0175, 0.478, 0.4049], [-0.2122, -0.1256, 0.2454, 0.0987, -0.0731, 0.2326, 0.9018, 0.1187, 0.478]], [[-0.3319, -0.3716, 0.2861, 0.3179, 0.5762, -0.0291, 0.0867, 0.0615, -0.1689], [-0.0617, 0.0648, 0.2785, 0.0452, 0.4042, -0.0375, 0.3148, 0.8384, 0.1682]]]]