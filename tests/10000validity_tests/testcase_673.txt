import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add64286 = tf.keras.layers.Input(shape=([2, 2]))
in1Add64286 = tf.keras.layers.Input(shape=([2, 2]))
in0Max91217 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Max91217 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Glo98133 = tf.keras.layers.Input(shape=([1, 2]))
in0Con67940 = tf.keras.layers.Input(shape=([4, 4, 3, 1]))
in0Up_91962 = tf.keras.layers.Input(shape=([2, 2, 3, 2]))
in0Min87095 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in1Min87095 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in0Con52184 = tf.keras.layers.Input(shape=([4, 4, 3, 1]))

Add64286 = keras.layers.Add(name = 'Add64286', )([in0Add64286,in1Add64286])
Res83017 = keras.layers.Reshape((2, 2, 1), name = 'Res83017', )(Add64286)
Res66386 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res66386', )(Res83017)
Zer49697 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer49697', )(Res66386)
Max91217 = keras.layers.Maximum(name = 'Max91217', )([in0Max91217,in1Max91217])
Res63586 = keras.layers.Reshape((2, 1), name = 'Res63586', )(Max91217)
Glo98133 = keras.layers.GlobalMaxPool1D(name = 'Glo98133', )(in0Glo98133)
Res25253 = keras.layers.Reshape((2, 1), name = 'Res25253', )(Glo98133)
Add94192 = keras.layers.Add(name = 'Add94192', )([Res63586,Res25253])
Res30244 = keras.layers.Reshape((2, 1, 1), name = 'Res30244', )(Add94192)
Res10252 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res10252', )(Res30244)
Up_65734 = keras.layers.UpSampling3D(size=(1, 1, 2), name = 'Up_65734', )(Res10252)
Zer48276 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (1, 0)), name = 'Zer48276', )(Up_65734)
Min20365 = keras.layers.Minimum(name = 'Min20365', )([Zer49697,Zer48276])
Zer96022 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (0, 0)), name = 'Zer96022', )(Min20365)
Con67940 = keras.layers.Concatenate(axis=4, name = 'Con67940', )([Zer96022,in0Con67940])
Up_91962 = keras.layers.UpSampling3D(size=(2, 2, 1), name = 'Up_91962', )(in0Up_91962)
Ave16509 = keras.layers.Average(name = 'Ave16509', )([Con67940,Up_91962])
Min87095 = keras.layers.Minimum(name = 'Min87095', )([in0Min87095,in1Min87095])
Zer69879 = keras.layers.ZeroPadding3D(padding=((2, 0), (3, 0), (2, 0)), name = 'Zer69879', )(Min87095)
Con52184 = keras.layers.Concatenate(axis=4, name = 'Con52184', )([Zer69879,in0Con52184])
Max53125 = keras.layers.Maximum(name = 'Max53125', )([Ave16509,Con52184])
model = tf.keras.models.Model(inputs=[in0Add64286,in1Add64286,in0Max91217,in1Max91217,in0Glo98133,in0Con67940,in0Up_91962,in0Min87095,in1Min87095,in0Con52184], outputs=Max53125)
in0Add64286 = tf.constant([[[0.9176, 0.7679], [0.4888, 0.5078]]])
in1Add64286 = tf.constant([[[0.8053, 0.5972], [0.3407, 0.9083]]])
in0Max91217 = tf.constant([[[[0.4476]], [[0.7856]]]])
in1Max91217 = tf.constant([[[[0.2986]], [[0.8014]]]])
in0Glo98133 = tf.constant([[[1.3638, 1.5793]]])
in0Con67940 = tf.constant([[[[[0.965], [0.2939], [0.9551]], [[0.7272], [0.7543], [0.442]], [[0.4423], [0.8103], [0.2221]], [[0.7106], [0.6564], [0.6737]]], [[[0.7015], [0.8388], [0.6379]], [[0.6983], [0.6452], [0.4234]], [[0.3228], [0.9639], [0.2725]], [[0.8917], [0.2374], [0.4344]]], [[[0.6252], [0.3825], [0.3555]], [[0.6751], [0.295], [0.7988]], [[0.4268], [0.5863], [0.8102]], [[0.1829], [0.2023], [0.5438]]], [[[0.4301], [0.7392], [0.6347]], [[0.0251], [0.8843], [0.2833]], [[0.3085], [0.272], [0.4159]], [[0.633], [0.0704], [0.7877]]]]])
in0Up_91962 = tf.constant([[[[[1.5598, 1.8656], [1.2859, 1.6888], [1.0699, 1.5296]], [[1.3628, 1.6442], [1.0039, 1.816], [1.0526, 1.9807]]], [[[1.5558, 1.0598], [1.5948, 1.479], [1.776, 1.8261]], [[1.5576, 1.8594], [1.2527, 1.1045], [1.7234, 1.9137]]]]])
in0Min87095 = tf.constant([[[[[0.1493]]], [[[0.5218]]]]])
in1Min87095 = tf.constant([[[[[0.4907]]], [[[0.0472]]]]])
in0Con52184 = tf.constant([[[[[0.2224], [0.5615], [0.049]], [[0.2207], [0.1726], [0.4095]], [[0.3375], [0.9116], [0.1456]], [[0.0174], [0.7063], [0.8109]]], [[[0.9789], [0.6947], [0.7607]], [[0.3376], [0.6927], [0.4709]], [[0.7518], [0.6841], [0.498]], [[0.4323], [0.8064], [0.7594]]], [[[0.1103], [0.0185], [0.9283]], [[0.9367], [0.9819], [0.383]], [[0.7954], [0.8711], [0.799]], [[0.22], [0.5594], [0.5296]]], [[[0.4754], [0.1709], [0.6946]], [[0.368], [0.9212], [0.037]], [[0.4437], [0.275], [0.0634]], [[0.5443], [0.5561], [0.508]]]]])
print (np.array2string(model.predict([in0Add64286,in1Add64286,in0Max91217,in1Max91217,in0Glo98133,in0Con67940,in0Up_91962,in0Min87095,in1Min87095,in0Con52184],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max53125.png')

LAdd64286 = add_layer([[[[0.9176, 0.7679], [0.4888, 0.5078]]], [[[0.8053, 0.5972], [0.3407, 0.9083]]]], Add64286), 
LRes83017 = reshape_layer(Add64286, [2, 2, 1], Res83017), 
LRes66386 = reshape_layer(Res83017, [2, 2, 1, 1], Res66386), 
LZer49697 = zero_padding3D_layer(Res66386, 0, 0, 0, 0, 2, 0, Zer49697), 
LMax91217 = maximum_layer([[[[[0.4476]], [[0.7856]]]], [[[[0.2986]], [[0.8014]]]]], Max91217), 
LRes63586 = reshape_layer(Max91217, [2, 1], Res63586), 
LGlo98133 = global_max_pool1D_layer([[[1.3638, 1.5793]]], Glo98133), 
LRes25253 = reshape_layer(Glo98133, [2, 1], Res25253), 
LAdd94192 = add_layer([Res63586,Res25253], Add94192), 
LRes30244 = reshape_layer(Add94192, [2, 1, 1], Res30244), 
LRes10252 = reshape_layer(Res30244, [2, 1, 1, 1], Res10252), 
LUp_65734 = up_sampling3D_layer(Res10252, 1, 1, 2, Up_65734), 
LZer48276 = zero_padding3D_layer(Up_65734, 0, 0, 1, 0, 1, 0, Zer48276), 
LMin20365 = minimum_layer([Zer49697,Zer48276], Min20365), 
LZer96022 = zero_padding3D_layer(Min20365, 2, 0, 2, 0, 0, 0, Zer96022), 
LCon67940 = concatenate_layer([Zer96022,[[[[[0.965], [0.2939], [0.9551]], [[0.7272], [0.7543], [0.442]], [[0.4423], [0.8103], [0.2221]], [[0.7106], [0.6564], [0.6737]]], [[[0.7015], [0.8388], [0.6379]], [[0.6983], [0.6452], [0.4234]], [[0.3228], [0.9639], [0.2725]], [[0.8917], [0.2374], [0.4344]]], [[[0.6252], [0.3825], [0.3555]], [[0.6751], [0.295], [0.7988]], [[0.4268], [0.5863], [0.8102]], [[0.1829], [0.2023], [0.5438]]], [[[0.4301], [0.7392], [0.6347]], [[0.0251], [0.8843], [0.2833]], [[0.3085], [0.272], [0.4159]], [[0.633], [0.0704], [0.7877]]]]]], 4, Con67940), 
LUp_91962 = up_sampling3D_layer([[[[[1.5598, 1.8656], [1.2859, 1.6888], [1.0699, 1.5296]], [[1.3628, 1.6442], [1.0039, 1.816], [1.0526, 1.9807]]], [[[1.5558, 1.0598], [1.5948, 1.479], [1.776, 1.8261]], [[1.5576, 1.8594], [1.2527, 1.1045], [1.7234, 1.9137]]]]], 2, 2, 1, Up_91962), 
LAve16509 = average_layer([Con67940,Up_91962], Ave16509), 
LMin87095 = minimum_layer([[[[[[0.1493]]], [[[0.5218]]]]], [[[[[0.4907]]], [[[0.0472]]]]]], Min87095), 
LZer69879 = zero_padding3D_layer(Min87095, 2, 0, 3, 0, 2, 0, Zer69879), 
LCon52184 = concatenate_layer([Zer69879,[[[[[0.2224], [0.5615], [0.049]], [[0.2207], [0.1726], [0.4095]], [[0.3375], [0.9116], [0.1456]], [[0.0174], [0.7063], [0.8109]]], [[[0.9789], [0.6947], [0.7607]], [[0.3376], [0.6927], [0.4709]], [[0.7518], [0.6841], [0.498]], [[0.4323], [0.8064], [0.7594]]], [[[0.1103], [0.0185], [0.9283]], [[0.9367], [0.9819], [0.383]], [[0.7954], [0.8711], [0.799]], [[0.22], [0.5594], [0.5296]]], [[[0.4754], [0.1709], [0.6946]], [[0.368], [0.9212], [0.037]], [[0.4437], [0.275], [0.0634]], [[0.5443], [0.5561], [0.508]]]]]], 4, Con52184), 
LMax53125 = maximum_layer([Ave16509,Con52184], Max53125), 
exec_layers([LAdd64286,LRes83017,LRes66386,LZer49697,LMax91217,LRes63586,LGlo98133,LRes25253,LAdd94192,LRes30244,LRes10252,LUp_65734,LZer48276,LMin20365,LZer96022,LCon67940,LUp_91962,LAve16509,LMin87095,LZer69879,LCon52184,LMax53125],["Add64286","Res83017","Res66386","Zer49697","Max91217","Res63586","Glo98133","Res25253","Add94192","Res30244","Res10252","Up_65734","Zer48276","Min20365","Zer96022","Con67940","Up_91962","Ave16509","Min87095","Zer69879","Con52184","Max53125"],Max53125,"Max53125")

Actual (Unparsed): [[[[[0.7799000, 1.4153000], [0.6429500, 0.9913500], [0.5349500, 1.2423500]], [[0.7799000, 1.2964000], [0.6429500, 1.2215500], [0.5349500, 0.9858000]], [[0.6814000, 1.0432500], [0.5019500, 1.3131500], [0.5263000, 1.1014000]], [[0.6814000, 1.1774000], [0.5019500, 1.2362000], [0.5263000, 1.3272000]]], [[[0.7799000, 1.2835500], [0.6429500, 1.2638000], [0.5349500, 1.0837500]], [[0.7799000, 1.2819500], [0.6429500, 1.1670000], [0.5349500, 0.9765000]], [[0.6814000, 0.9835000], [0.5019500, 1.3899500], [0.5263000, 1.1266000]], [[0.6814000, 1.2679500], [0.5019500, 1.0267000], [0.5263000, 1.2075500]]], [[[0.7779000, 0.8425000], [0.7974000, 0.9307500], [0.8880000, 1.0908000]], [[0.7779000, 0.9367000], [0.7974000, 0.9819000], [0.8880000, 1.3124500]], [[0.7788000, 1.1431000], [0.6263500, 0.8711000], [0.8617000, 1.3619500]], [[0.7788000, 1.0211500], [0.6263500, 0.6534000], [1.5442500, 1.2287500]]], [[[0.7779000, 0.7449500], [0.7974000, 1.1091000], [0.8880000, 1.2304000]], [[0.7779000, 0.5424500], [0.7974000, 1.1816500], [0.8880000, 1.0547000]], [[0.7788000, 1.0839500], [0.6263500, 0.6882500], [0.8617000, 1.1648000]], [[0.7788000, 1.2462000], [0.6263500, 0.5874500], [1.5697500, 1.3507000]]]]]

Expected (Unparsed): [[[[[0.7799,1.4153],[0.64295,0.9913500000000001],[0.53495,1.24235]],[[0.7799,1.2964],[0.64295,1.2215500000000001],[0.53495,0.9858]],[[0.6814,1.04325],[0.50195,1.31315],[0.5263,1.1014]],[[0.6814,1.1774],[0.50195,1.2362],[0.5263,1.3272]]],[[[0.7799,1.28355],[0.64295,1.2638],[0.53495,1.08375]],[[0.7799,1.28195],[0.64295,1.167],[0.53495,0.9765]],[[0.6814,0.9835],[0.50195,1.38995],[0.5263,1.1266]],[[0.6814,1.2679500000000001],[0.50195,1.0267],[0.5263,1.20755]]],[[[0.7779,0.8425],[0.7974,0.9307500000000001],[0.888,1.0908]],[[0.7779,0.9367],[0.7974,0.9819],[0.888,1.3124500000000001]],[[0.7788,1.1431],[0.62635,0.8711],[0.8617,1.36195]],[[0.7788,1.02115],[0.62635,0.6534],[1.54425,1.22875]]],[[[0.7779,0.74495],[0.7974,1.1091],[0.888,1.2304]],[[0.7779,0.54245],[0.7974,1.18165],[0.888,1.0547]],[[0.7788,1.08395],[0.62635,0.68825],[0.8617,1.1648]],[[0.7788,1.2462],[0.62635,0.58745],[1.56975,1.3507]]]]]

Actual:   [[[[[0.7799, 1.4153], [0.643, 0.9914], [0.535, 1.2424]], [[0.7799, 1.2964], [0.643, 1.2216], [0.535, 0.9858]], [[0.6814, 1.0433], [0.502, 1.3132], [0.5263, 1.1014]], [[0.6814, 1.1774], [0.502, 1.2362], [0.5263, 1.3272]]], [[[0.7799, 1.2836], [0.643, 1.2638], [0.535, 1.0838]], [[0.7799, 1.282], [0.643, 1.167], [0.535, 0.9765]], [[0.6814, 0.9835], [0.502, 1.39], [0.5263, 1.1266]], [[0.6814, 1.268], [0.502, 1.0267], [0.5263, 1.2076]]], [[[0.7779, 0.8425], [0.7974, 0.9308], [0.888, 1.0908]], [[0.7779, 0.9367], [0.7974, 0.9819], [0.888, 1.3125]], [[0.7788, 1.1431], [0.6264, 0.8711], [0.8617, 1.362]], [[0.7788, 1.0212], [0.6264, 0.6534], [1.5443, 1.2288]]], [[[0.7779, 0.745], [0.7974, 1.1091], [0.888, 1.2304]], [[0.7779, 0.5425], [0.7974, 1.1817], [0.888, 1.0547]], [[0.7788, 1.084], [0.6264, 0.6883], [0.8617, 1.1648]], [[0.7788, 1.2462], [0.6264, 0.5875], [1.5698, 1.3507]]]]]

Expected: [[[[[0.7799, 1.4153], [0.643, 0.9914], [0.535, 1.2424]], [[0.7799, 1.2964], [0.643, 1.2216], [0.535, 0.9858]], [[0.6814, 1.0433], [0.502, 1.3132], [0.5263, 1.1014]], [[0.6814, 1.1774], [0.502, 1.2362], [0.5263, 1.3272]]], [[[0.7799, 1.2836], [0.643, 1.2638], [0.535, 1.0838]], [[0.7799, 1.282], [0.643, 1.167], [0.535, 0.9765]], [[0.6814, 0.9835], [0.502, 1.39], [0.5263, 1.1266]], [[0.6814, 1.268], [0.502, 1.0267], [0.5263, 1.2076]]], [[[0.7779, 0.8425], [0.7974, 0.9308], [0.888, 1.0908]], [[0.7779, 0.9367], [0.7974, 0.9819], [0.888, 1.3125]], [[0.7788, 1.1431], [0.6264, 0.8711], [0.8617, 1.362]], [[0.7788, 1.0212], [0.6264, 0.6534], [1.5443, 1.2288]]], [[[0.7779, 0.745], [0.7974, 1.1091], [0.888, 1.2304]], [[0.7779, 0.5425], [0.7974, 1.1817], [0.888, 1.0547]], [[0.7788, 1.084], [0.6264, 0.6883], [0.8617, 1.1648]], [[0.7788, 1.2462], [0.6264, 0.5875], [1.5698, 1.3507]]]]]