import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub68317 = tf.keras.layers.Input(shape=([2, 2]))
in1Sub68317 = tf.keras.layers.Input(shape=([2, 2]))
in0Bat32086 = tf.keras.layers.Input(shape=([4, 3, 1]))
in0Con12800 = tf.keras.layers.Input(shape=([4, 3, 1]))
in0Min57223 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in1Min57223 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))

Sub68317 = keras.layers.Subtract(name = 'Sub68317', )([in0Sub68317,in1Sub68317])
Res50570 = keras.layers.Reshape((2, 2, 1), name = 'Res50570', )(Sub68317)
Cro39562 = keras.layers.Cropping2D(cropping=((1, 0), (0, 0)), name = 'Cro39562', )(Res50570)
Zer47439 = keras.layers.ZeroPadding2D(padding=((3, 0), (1, 0)), name = 'Zer47439', )(Cro39562)
Bat32086 = keras.layers.BatchNormalization(axis=3, epsilon=0.21363347649935022,  name = 'Bat32086', )(in0Bat32086)
Sub64842 = keras.layers.Subtract(name = 'Sub64842', )([Zer47439,Bat32086])
Con12800 = keras.layers.Concatenate(axis=3, name = 'Con12800', )([Sub64842,in0Con12800])
Min57223 = keras.layers.Minimum(name = 'Min57223', )([in0Min57223,in1Min57223])
Res78901 = keras.layers.Reshape((2, 1, 2), name = 'Res78901', )(Min57223)
Sep23147 = keras.layers.SeparableConv2D(2, (1, 1),strides=(1, 1), padding='same', name = 'Sep23147', )(Res78901)
Zer50788 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer50788', )(Sep23147)
Ave83001 = keras.layers.Average(name = 'Ave83001', )([Con12800,Zer50788])
model = tf.keras.models.Model(inputs=[in0Sub68317,in1Sub68317,in0Bat32086,in0Con12800,in0Min57223,in1Min57223], outputs=Ave83001)
w = model.get_layer('Bat32086').get_weights() 
w[0] = np.array([0.6853])
w[1] = np.array([0.0824])
w[2] = np.array([0.2819])
w[3] = np.array([0.2548])
model.get_layer('Bat32086').set_weights(w) 
w = model.get_layer('Sep23147').get_weights() 
w[0] = np.array([[[[0.5136], [0.4901]]]])
w[1] = np.array([[[[0.9998, 0.8314], [0.0588, 0.1651]]]])
w[2] = np.array([0, 0])
model.get_layer('Sep23147').set_weights(w) 
in0Sub68317 = tf.constant([[[0.8176, 0.657], [0.6331, 0.8919]]])
in1Sub68317 = tf.constant([[[0.5895, 0.6963], [0.8616, 0.4028]]])
in0Bat32086 = tf.constant([[[[1.841], [1.8182], [1.4607]], [[1.955], [1.6432], [1.2086]], [[1.4209], [1.8977], [1.7872]], [[1.0155], [1.7942], [1.7735]]]])
in0Con12800 = tf.constant([[[[0.1593], [0.2218], [0.5854]], [[0.0166], [0.2903], [0.8393]], [[0.7403], [0.1882], [0.2921]], [[0.0254], [0.7438], [0.76]]]])
in0Min57223 = tf.constant([[[[[0.9923], [0.6622]]], [[[0.3519], [0.2289]]]]])
in1Min57223 = tf.constant([[[[[0.1306], [0.0867]]], [[[0.2681], [0.1522]]]]])
print (np.array2string(model.predict([in0Sub68317,in1Sub68317,in0Bat32086,in0Con12800,in0Min57223,in1Min57223],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave83001.png')

LSub68317 = subtract_layer([[[0.8176, 0.657], [0.6331, 0.8919]]], [[[0.5895, 0.6963], [0.8616, 0.4028]]], Sub68317), 
LRes50570 = reshape_layer(Sub68317, [2, 2, 1], Res50570), 
LCro39562 = cropping2D_layer(Res50570, 1, 0, 0, 0, Cro39562), 
LZer47439 = zero_padding2D_layer(Cro39562, 3, 0, 1, 0, Zer47439), 
LBat32086 = batch_normalization_layer([[[[1.841], [1.8182], [1.4607]], [[1.955], [1.6432], [1.2086]], [[1.4209], [1.8977], [1.7872]], [[1.0155], [1.7942], [1.7735]]]], 3, 0.21363347649935022, [0.6853], [0.0824], [0.2819], [0.2548], Bat32086), 
LSub64842 = subtract_layer(Zer47439,Bat32086, Sub64842), 
LCon12800 = concatenate_layer([Sub64842,[[[[0.1593], [0.2218], [0.5854]], [[0.0166], [0.2903], [0.8393]], [[0.7403], [0.1882], [0.2921]], [[0.0254], [0.7438], [0.76]]]]], 3, Con12800), 
LMin57223 = minimum_layer([[[[[[0.9923], [0.6622]]], [[[0.3519], [0.2289]]]]], [[[[[0.1306], [0.0867]]], [[[0.2681], [0.1522]]]]]], Min57223), 
LRes78901 = reshape_layer(Min57223, [2, 1, 2], Res78901), 
LSep23147 = separable_conv2D_layer(Res78901, 1, 1,[[[[[0.5136], [0.4901]]]],[[[[0.9998, 0.8314], [0.0588, 0.1651]]]]],[0, 0], 1, 1, true, Sep23147), 
LZer50788 = zero_padding2D_layer(Sep23147, 2, 0, 2, 0, Zer50788), 
LAve83001 = average_layer([Con12800,Zer50788], Ave83001), 
exec_layers([LSub68317,LRes50570,LCro39562,LZer47439,LBat32086,LSub64842,LCon12800,LMin57223,LRes78901,LSep23147,LZer50788,LAve83001],["Sub68317","Res50570","Cro39562","Zer47439","Bat32086","Sub64842","Con12800","Min57223","Res78901","Sep23147","Zer50788","Ave83001"],Ave83001,"Ave83001")

Actual (Unparsed): [[[[-0.8217500, 0.0796500], [-0.8103354, 0.1109000], [-0.6313561, 0.2927000]], [[-0.8788232, 0.0083000], [-0.7227232, 0.1451500], [-0.5051444, 0.4196500]], [[-0.6114306, 0.3701500], [-0.8501364, 0.0941000], [-0.7600349, 0.1774413]], [[-0.4084705, 0.0127000], [-0.9125700, 0.3719000], [-0.4723794, 0.4433980]]]]

Expected (Unparsed): [[[[-0.821750031446542,0.07965],[-0.8103354071652381,0.1109],[-0.6313561010000538,0.2927]],[[-0.8788231528530623,0.0083],[-0.7227231593920709,0.14515],[-0.5051444000651083,0.41965]],[[-0.6114305726493563,0.37015],[-0.8501363997250482,0.0941],[-0.7600348957919912,0.17744124707050002]],[[-0.4084705426651166,0.0127],[-0.9125700131849179,0.3719],[-0.47237938482489183,0.443397964023]]]]

Actual:   [[[[-0.8217, 0.0797], [-0.8103, 0.1109], [-0.6313, 0.2927]], [[-0.8788, 0.0083], [-0.7227, 0.1452], [-0.5051, 0.4197]], [[-0.6114, 0.3702], [-0.8501, 0.0941], [-0.76, 0.1775]], [[-0.4084, 0.0127], [-0.9125, 0.3719], [-0.4723, 0.4434]]]]

Expected: [[[[-0.8217, 0.0797], [-0.8103, 0.1109], [-0.6313, 0.2927]], [[-0.8788, 0.0083], [-0.7227, 0.1452], [-0.5051, 0.4197]], [[-0.6114, 0.3702], [-0.8501, 0.0941], [-0.76, 0.1775]], [[-0.4084, 0.0127], [-0.9125, 0.3719], [-0.4723, 0.4434]]]]