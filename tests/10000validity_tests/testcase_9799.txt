import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub42249 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))
in1Sub42249 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))
in0Sub52351 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))
in1Sub52351 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))

Sub42249 = keras.layers.Subtract(name = 'Sub42249', )([in0Sub42249,in1Sub42249])
Sub52351 = keras.layers.Subtract(name = 'Sub52351', )([in0Sub52351,in1Sub52351])
Mul84799 = keras.layers.Multiply(name = 'Mul84799', )([Sub42249,Sub52351])
Den17239 = keras.layers.Dense(4,name = 'Den17239', )(Mul84799)
model = tf.keras.models.Model(inputs=[in0Sub42249,in1Sub42249,in0Sub52351,in1Sub52351], outputs=Den17239)
w = model.get_layer('Den17239').get_weights() 
w[0] = np.array([[0.9484, 0.3932, 0.324, 0.3307], [0.2758, 0.3113, 0.2737, 0.2518]])
w[1] = np.array([0.9504, 0.2105, 0.2566, 0.856])
model.get_layer('Den17239').set_weights(w) 
in0Sub42249 = tf.constant([[[[[0.7147, 0.0799], [0.3893, 0.7254]], [[0.9641, 0.9037], [0.7613, 0.6252]], [[0.8337, 0.4379], [0.7494, 0.2907]]], [[[0.6854, 0.2239], [0.3187, 0.7776]], [[0.3991, 0.1003], [0.7541, 0.0341]], [[0.9345, 0.0359], [0.3746, 0.8916]]], [[[0.2184, 0.4155], [0.245, 0.9506]], [[0.2969, 0.6579], [0.4586, 0.5794]], [[0.9018, 0.9794], [0.7807, 0.8138]]]]])
in1Sub42249 = tf.constant([[[[[0.0608, 0.5743], [0.4457, 0.5497]], [[0.1505, 0.4812], [0.6827, 0.0533]], [[0.8382, 0.9243], [0.1061, 0.4777]]], [[[0.6871, 0.9774], [0.4565, 0.7741]], [[0.8118, 0.9839], [0.2976, 0.1102]], [[0.86, 0.2853], [0.1869, 0.6684]]], [[[0.7702, 0.4573], [0.5249, 0.4868]], [[0.2108, 0.4384], [0.7542, 0.8268]], [[0.3392, 0.6427], [0.8379, 0.4035]]]]])
in0Sub52351 = tf.constant([[[[[0.5362, 0.3935], [0.9698, 0.7001]], [[0.0716, 0.7915], [0.2914, 0.4998]], [[0.2318, 0.4318], [0.9782, 0.7186]]], [[[0.3044, 0.2252], [0.4386, 0.5971]], [[0.9532, 0.9458], [0.5234, 0.3193]], [[0.9434, 0.0262], [0.5827, 0.167]]], [[[0.8769, 0.5524], [0.9278, 0.3879]], [[0.5862, 0.3719], [0.7563, 0.0601]], [[0.1, 0.7244], [0.8794, 0.3682]]]]])
in1Sub52351 = tf.constant([[[[[0.6431, 0.8239], [0.6551, 0.8717]], [[0.9602, 0.3816], [0.3777, 0.5426]], [[0.3662, 0.1432], [0.9943, 0.576]]], [[[0.3139, 0.1326], [0.4338, 0.2382]], [[0.9471, 0.4447], [0.0145, 0.3047]], [[0.0561, 0.1089], [0.3734, 0.9621]]], [[[0.0932, 0.7587], [0.106, 0.4025]], [[0.4178, 0.5833], [0.8396, 0.7198]], [[0.7424, 0.3159], [0.7776, 0.1348]]]]])
print (np.array2string(model.predict([in0Sub42249,in1Sub42249,in0Sub52351,in1Sub52351],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Den17239.png')

LSub42249 = subtract_layer([[[[[0.7147, 0.0799], [0.3893, 0.7254]], [[0.9641, 0.9037], [0.7613, 0.6252]], [[0.8337, 0.4379], [0.7494, 0.2907]]], [[[0.6854, 0.2239], [0.3187, 0.7776]], [[0.3991, 0.1003], [0.7541, 0.0341]], [[0.9345, 0.0359], [0.3746, 0.8916]]], [[[0.2184, 0.4155], [0.245, 0.9506]], [[0.2969, 0.6579], [0.4586, 0.5794]], [[0.9018, 0.9794], [0.7807, 0.8138]]]]], [[[[[0.0608, 0.5743], [0.4457, 0.5497]], [[0.1505, 0.4812], [0.6827, 0.0533]], [[0.8382, 0.9243], [0.1061, 0.4777]]], [[[0.6871, 0.9774], [0.4565, 0.7741]], [[0.8118, 0.9839], [0.2976, 0.1102]], [[0.86, 0.2853], [0.1869, 0.6684]]], [[[0.7702, 0.4573], [0.5249, 0.4868]], [[0.2108, 0.4384], [0.7542, 0.8268]], [[0.3392, 0.6427], [0.8379, 0.4035]]]]], Sub42249), 
LSub52351 = subtract_layer([[[[[0.5362, 0.3935], [0.9698, 0.7001]], [[0.0716, 0.7915], [0.2914, 0.4998]], [[0.2318, 0.4318], [0.9782, 0.7186]]], [[[0.3044, 0.2252], [0.4386, 0.5971]], [[0.9532, 0.9458], [0.5234, 0.3193]], [[0.9434, 0.0262], [0.5827, 0.167]]], [[[0.8769, 0.5524], [0.9278, 0.3879]], [[0.5862, 0.3719], [0.7563, 0.0601]], [[0.1, 0.7244], [0.8794, 0.3682]]]]], [[[[[0.6431, 0.8239], [0.6551, 0.8717]], [[0.9602, 0.3816], [0.3777, 0.5426]], [[0.3662, 0.1432], [0.9943, 0.576]]], [[[0.3139, 0.1326], [0.4338, 0.2382]], [[0.9471, 0.4447], [0.0145, 0.3047]], [[0.0561, 0.1089], [0.3734, 0.9621]]], [[[0.0932, 0.7587], [0.106, 0.4025]], [[0.4178, 0.5833], [0.8396, 0.7198]], [[0.7424, 0.3159], [0.7776, 0.1348]]]]], Sub52351), 
LMul84799 = multiply_layer([Sub42249,Sub52351], Mul84799), 
LDen17239 = dense_layer(Mul84799, [[0.9484, 0.3932, 0.324, 0.3307], [0.2758, 0.3113, 0.2737, 0.2518]],[0.9504, 0.2105, 0.2566, 0.856], Den17239), 
exec_layers([LSub42249,LSub52351,LMul84799,LDen17239],["Sub42249","Sub52351","Mul84799","Den17239"],Den17239,"Den17239")

Actual (Unparsed): [[[[[0.9427924, 0.2492560, 0.2921923, 0.8864639], [0.9252514, 0.1941353, 0.2425972, 0.8425386]], [[0.3125038, -0.0198580, 0.0697595, 0.6605229], [0.9372160, 0.2002131, 0.2477028, 0.8475934]], [[0.9122582, 0.1670391, 0.2183753, 0.8208536], [0.9332228, 0.1981264, 0.2459458, 0.8458603]]], [[[0.9311716, 0.1887857, 0.2375081, 0.8384362], [0.9501191, 0.2106310, 0.2567295, 0.8560976]], [[0.8258959, 0.0716752, 0.1345977, 0.7436775], [1.1704191, 0.3014995, 0.3315653, 0.9325461]], [[1.0187813, 0.2429127, 0.2836628, 0.8830540], [0.9387133, 0.1707018, 0.2207560, 0.8243057]]], [[[0.5426468, 0.0431468, 0.1188478, 0.7151616], [0.7303797, 0.1179475, 0.1802196, 0.7782267]], [[0.9513533, 0.2017561, 0.2485974, 0.8491108], [1.0187662, 0.2709892, 0.3092485, 0.9052392]], [[0.6455688, 0.1112087, 0.1771470, 0.7711134], [0.9712892, 0.2380218, 0.2809240, 0.8781877]]]]]

Expected (Unparsed): [[[[[0.942792444364,0.249256021276,0.292192338472,0.8864638999309999],[0.925251369432,0.194135329388,0.242597210236,0.842538579028]],[[0.31250383438600005,-0.019858032196999997,0.06975947163499999,0.660522904178],[0.9372159872320001,0.200213063908,0.247702807196,0.847593413198]],[[0.912258156288,0.167039057408,0.21837530675199998,0.820853572288],[0.9332227599480001,0.198126388424,0.24594575093999996,0.845860347949]]],[[[0.93117161988,0.18878567284999997,0.23750806143,0.838436222425],[0.950119136474,0.21063096128699998,0.25672950169500003,0.856097560362]],[[0.825895924884,0.071675219648,0.13459765426799997,0.743677493143],[1.170419076592,0.301499539642,0.331565266278,0.932546094587]],[[1.018781371144,0.242912714614,0.283662813906,0.883054013879],[0.9387132614679999,0.17070183643599998,0.220756005856,0.824305731851]]],[[[0.542646853228,0.043146812230000005,0.11884781431799998,0.71516157725],[0.7303797317280001,0.11794745865199999,0.18021957624399998,0.778226725462]],[[0.9513533248760001,0.201756065178,0.24859744424999997,0.849110799528],[1.018766165756,0.27098915684999997,0.30924852430599997,0.90523920744]],[[0.6455688045940001,0.11120872986699999,0.17714701795499999,0.771113373842],[0.971289221452,0.238021751554,0.280923973234,0.878187727364]]]]]

Actual:   [[[[[0.9428, 0.2493, 0.2922, 0.8865], [0.9253, 0.1942, 0.2426, 0.8426]], [[0.3126, -0.0198, 0.0698, 0.6606], [0.9373, 0.2003, 0.2478, 0.8476]], [[0.9123, 0.1671, 0.2184, 0.8209], [0.9333, 0.1982, 0.246, 0.8459]]], [[[0.9312, 0.1888, 0.2376, 0.8385], [0.9502, 0.2107, 0.2568, 0.8561]], [[0.8259, 0.0717, 0.1346, 0.7437], [1.1705, 0.3015, 0.3316, 0.9326]], [[1.0188, 0.243, 0.2837, 0.8831], [0.9388, 0.1708, 0.2208, 0.8244]]], [[[0.5427, 0.0432, 0.1189, 0.7152], [0.7304, 0.118, 0.1803, 0.7783]], [[0.9514, 0.2018, 0.2486, 0.8492], [1.0188, 0.271, 0.3093, 0.9053]], [[0.6456, 0.1113, 0.1772, 0.7712], [0.9713, 0.2381, 0.281, 0.8782]]]]]

Expected: [[[[[0.9428, 0.2493, 0.2922, 0.8865], [0.9253, 0.1942, 0.2426, 0.8426]], [[0.3126, -0.0198, 0.0698, 0.6606], [0.9373, 0.2003, 0.2478, 0.8476]], [[0.9123, 0.1671, 0.2184, 0.8209], [0.9333, 0.1982, 0.246, 0.8459]]], [[[0.9312, 0.1888, 0.2376, 0.8385], [0.9502, 0.2107, 0.2568, 0.8561]], [[0.8259, 0.0717, 0.1346, 0.7437], [1.1705, 0.3015, 0.3316, 0.9326]], [[1.0188, 0.243, 0.2837, 0.8831], [0.9388, 0.1708, 0.2208, 0.8244]]], [[[0.5427, 0.0432, 0.1189, 0.7152], [0.7304, 0.118, 0.1803, 0.7783]], [[0.9514, 0.2018, 0.2486, 0.8492], [1.0188, 0.271, 0.3093, 0.9053]], [[0.6456, 0.1113, 0.1772, 0.7712], [0.9713, 0.2381, 0.281, 0.8782]]]]]