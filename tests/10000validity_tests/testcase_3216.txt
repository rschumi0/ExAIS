import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min41463 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Min41463 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con87440 = tf.keras.layers.Input(shape=([3, 3, 3]))
in0Con3957 = tf.keras.layers.Input(shape=([2, 2, 2]))

Min41463 = keras.layers.Minimum(name = 'Min41463', )([in0Min41463,in1Min41463])
Res64643 = keras.layers.Reshape((2, 4), name = 'Res64643', )(Min41463)
Zer41891 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer41891', )(Res64643)
Den81734 = keras.layers.Dense(3,name = 'Den81734', )(Zer41891)
Res91391 = keras.layers.Reshape((3, 3, 1), name = 'Res91391', )(Den81734)
Con87440 = keras.layers.Concatenate(axis=3, name = 'Con87440', )([Res91391,in0Con87440])
Con3957 = keras.layers.Conv2DTranspose(4, (2, 2),strides=(1, 1), padding='same', name = 'Con3957', )(in0Con3957)
Zer74598 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer74598', )(Con3957)
Mul3061 = keras.layers.Multiply(name = 'Mul3061', )([Con87440,Zer74598])
model = tf.keras.models.Model(inputs=[in0Min41463,in1Min41463,in0Con87440,in0Con3957], outputs=Mul3061)
w = model.get_layer('Den81734').get_weights() 
w[0] = np.array([[0.2443, 0.1439, 0.0321], [0.5385, 0.6834, 0.7978], [0.9062, 0.6623, 0.6357], [0.8807, 0.6647, 0.1361]])
w[1] = np.array([0.4328, 0.5825, 0.8237])
model.get_layer('Den81734').set_weights(w) 
w = model.get_layer('Con3957').get_weights() 
w[0] = np.array([[[[0.1216, 0.269], [0.5785, 0.9566], [0.5804, 0.4443], [0.3236, 0.6072]], [[0.3201, 0.6651], [0.2829, 0.5434], [0.3165, 0.9081], [0.7127, 0.7312]]], [[[0.5659, 0.44], [0.2688, 0.4095], [0.5331, 0.924], [0.7049, 0.9853]], [[0.763, 0.0288], [0.9643, 0.8584], [0.7463, 0.8861], [0.3203, 0.0892]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con3957').set_weights(w) 
in0Min41463 = tf.constant([[[[0.3572, 0.2217], [0.0181, 0.4345]], [[0.0897, 0.1504], [0.044, 0.9942]]]])
in1Min41463 = tf.constant([[[[0.7741, 0.1078], [0.7712, 0.4539]], [[0.8391, 0.3142], [0.6487, 0.0698]]]])
in0Con87440 = tf.constant([[[[0.3302, 0.5922, 0.844], [0.8215, 0.9083, 0.9947], [0.409, 0.2189, 0.6296]], [[0.4767, 0.4602, 0.1239], [0.3702, 0.1906, 0.3175], [0.6803, 0.5063, 0.5325]], [[0.7658, 0.9541, 0.847], [0.65, 0.0446, 0.3054], [0.8289, 0.9827, 0.0734]]]])
in0Con3957 = tf.constant([[[[0.3261, 0.0411], [0.989, 0.2595]], [[0.0547, 0.3952], [0.8666, 0.1167]]]])
print (np.array2string(model.predict([in0Min41463,in1Min41463,in0Con87440,in0Con3957],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul3061.png')

LMin41463 = minimum_layer([[[[[0.3572, 0.2217], [0.0181, 0.4345]], [[0.0897, 0.1504], [0.044, 0.9942]]]], [[[[0.7741, 0.1078], [0.7712, 0.4539]], [[0.8391, 0.3142], [0.6487, 0.0698]]]]], Min41463), 
LRes64643 = reshape_layer(Min41463, [2, 4], Res64643), 
LZer41891 = zero_padding1D_layer(Res64643, 1, 0, Zer41891), 
LDen81734 = dense_layer(Zer41891, [[0.2443, 0.1439, 0.0321], [0.5385, 0.6834, 0.7978], [0.9062, 0.6623, 0.6357], [0.8807, 0.6647, 0.1361]],[0.4328, 0.5825, 0.8237], Den81734), 
LRes91391 = reshape_layer(Den81734, [3, 3, 1], Res91391), 
LCon87440 = concatenate_layer([Res91391,[[[[0.3302, 0.5922, 0.844], [0.8215, 0.9083, 0.9947], [0.409, 0.2189, 0.6296]], [[0.4767, 0.4602, 0.1239], [0.3702, 0.1906, 0.3175], [0.6803, 0.5063, 0.5325]], [[0.7658, 0.9541, 0.847], [0.65, 0.0446, 0.3054], [0.8289, 0.9827, 0.0734]]]]], 3, Con87440), 
LCon3957 = conv2D_transpose_layer([[[[0.3261, 0.0411], [0.989, 0.2595]], [[0.0547, 0.3952], [0.8666, 0.1167]]]], 2, 2,[[[[0.1216, 0.269], [0.5785, 0.9566], [0.5804, 0.4443], [0.3236, 0.6072]], [[0.3201, 0.6651], [0.2829, 0.5434], [0.3165, 0.9081], [0.7127, 0.7312]]], [[[0.5659, 0.44], [0.2688, 0.4095], [0.5331, 0.924], [0.7049, 0.9853]], [[0.763, 0.0288], [0.9643, 0.8584], [0.7463, 0.8861], [0.3203, 0.0892]]]],[0, 0, 0, 0], 1, 1, true, Con3957), 
LZer74598 = zero_padding2D_layer(Con3957, 1, 0, 1, 0, Zer74598), 
LMul3061 = multiply_layer([Con87440,Zer74598], Mul3061), 
exec_layers([LMin41463,LRes64643,LZer41891,LDen81734,LRes91391,LCon87440,LCon3957,LZer74598,LMul3061],["Min41463","Res64643","Zer41891","Den81734","Res91391","Con87440","Con3957","Zer74598","Mul3061"],Mul3061,"Mul3061")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0511342, 0.0843927, 0.0395551, 0.0414280], [0.3191529, 0.6360544, 0.4201505, 0.3940887]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.2441766, 0.3342160, 0.0186943, 0.1612604], [1.3195776, 1.2972588, 1.9436029, 0.1277303]]]]

Expected (Unparsed): [[[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.05113416983353081,0.084392683722,0.039555059802,0.0414279969],[0.3191528619343096,0.6360543968890001,0.42015052856299995,0.394088654175]],[[0.0,0.0,0.0,0.0],[0.24417655902061947,0.33421596000000003,0.01869433753,0.161260386432],[1.3195776272449349,1.297258796295,1.943602888532,0.127730263822]]]]

Actual:   [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0.0512, 0.0844, 0.0396, 0.0415], [0.3192, 0.6361, 0.4202, 0.3941]], [[0, 0, 0, 0], [0.2442, 0.3343, 0.0187, 0.1613], [1.3196, 1.2973, 1.9437, 0.1278]]]]

Expected: [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0.0512, 0.0844, 0.0396, 0.0415], [0.3192, 0.6361, 0.4202, 0.3941]], [[0, 0, 0, 0], [0.2442, 0.3343, 0.0187, 0.1613], [1.3196, 1.2973, 1.9437, 0.1278]]]]