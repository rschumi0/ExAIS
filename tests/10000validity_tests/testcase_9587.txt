import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add40757 = tf.keras.layers.Input(shape=([1, 2]))
in1Add40757 = tf.keras.layers.Input(shape=([1, 2]))
in0Con71957 = tf.keras.layers.Input(shape=([8, 1, 1, 3]))
in0Sep11577 = tf.keras.layers.Input(shape=([2, 2]))
in0Mul10471 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in1Mul10471 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Con10786 = tf.keras.layers.Input(shape=([4]))

Add40757 = keras.layers.Add(name = 'Add40757', )([in0Add40757,in1Add40757])
GRU73947 = keras.layers.GRU(1,reset_after=True, recurrent_activation='sigmoid', name = 'GRU73947', )(Add40757)
Res44468 = keras.layers.Reshape((1, 1), name = 'Res44468', )(GRU73947)
Res43267 = keras.layers.Reshape((1, 1, 1), name = 'Res43267', )(Res44468)
Res61727 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res61727', )(Res43267)
Zer51637 = keras.layers.ZeroPadding3D(padding=((7, 0), (0, 0), (0, 0)), name = 'Zer51637', )(Res61727)
Con71957 = keras.layers.Concatenate(axis=4, name = 'Con71957', )([Zer51637,in0Con71957])
Sep11577 = keras.layers.SeparableConv1D(4, (1),strides=(1), padding='valid', name = 'Sep11577', )(in0Sep11577)
Fla58419 = keras.layers.Flatten(name = 'Fla58419', )(Sep11577)
Mul10471 = keras.layers.Multiply(name = 'Mul10471', )([in0Mul10471,in1Mul10471])
Res13605 = keras.layers.Reshape((2, 2, 2), name = 'Res13605', )(Mul10471)
Res46461 = keras.layers.Reshape((2, 4), name = 'Res46461', )(Res13605)
Glo78012 = keras.layers.GlobalAveragePooling1D(name = 'Glo78012', )(Res46461)
Con10786 = keras.layers.Concatenate(axis=1, name = 'Con10786', )([Glo78012,in0Con10786])
Ave59763 = keras.layers.Average(name = 'Ave59763', )([Fla58419,Con10786])
Res25357 = keras.layers.Reshape((8, 1), name = 'Res25357', )(Ave59763)
Res90795 = keras.layers.Reshape((8, 1, 1), name = 'Res90795', )(Res25357)
Res79090 = keras.layers.Reshape((8, 1, 1, 1), name = 'Res79090', )(Res90795)
Con56967 = keras.layers.Conv3DTranspose(4, (7, 1, 1),strides=(1, 1, 1), padding='same', name = 'Con56967', )(Res79090)
Ave88371 = keras.layers.Average(name = 'Ave88371', )([Con71957,Con56967])
model = tf.keras.models.Model(inputs=[in0Add40757,in1Add40757,in0Con71957,in0Sep11577,in0Mul10471,in1Mul10471,in0Con10786], outputs=Ave88371)
w = model.get_layer('GRU73947').get_weights() 
w[0] = np.array([[4, 10, 7], [8, 7, 1]])
w[1] = np.array([[2, 10, 10]])
w[2] = np.array([[7, 7, 5], [6, 10, 4]])
model.get_layer('GRU73947').set_weights(w) 
w = model.get_layer('Sep11577').get_weights() 
w[0] = np.array([[[0.7814], [0.4231]]])
w[1] = np.array([[[0.0695, 0.2857, 0.8335, 0.603], [0.2828, 0.4747, 0.88, 0.8287]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep11577').set_weights(w) 
w = model.get_layer('Con56967').get_weights() 
w[0] = np.array([[[[[0.5169], [0.2376], [0.9607], [0.3341]]]], [[[[0.8979], [0.2927], [0.3466], [0.4781]]]], [[[[0.1556], [0.6936], [0.1269], [0.9411]]]], [[[[0.119], [0.9751], [0.8608], [0.6551]]]], [[[[0.8899], [0.9182], [0.3098], [0.6318]]]], [[[[0.1056], [0.4664], [0.1193], [0.0976]]]], [[[[0.6611], [0.6157], [0.2105], [0.616]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con56967').set_weights(w) 
in0Add40757 = tf.constant([[[0.6202, 0.6343]]])
in1Add40757 = tf.constant([[[0.0725, 0.5473]]])
in0Con71957 = tf.constant([[[[[0.9247, 0.4302, 0.6536]]], [[[0.743, 0.9969, 0.9407]]], [[[0.605, 0.1336, 0.1307]]], [[[0.4822, 0.8504, 0.3405]]], [[[0.7814, 0.5227, 0.21]]], [[[0.9534, 0.6897, 0.041]]], [[[0.9329, 0.5399, 0.9567]]], [[[0.1372, 0.9629, 0.1044]]]]])
in0Sep11577 = tf.constant([[[0.3213, 0.7648], [0.4427, 0.8408]]])
in0Mul10471 = tf.constant([[[[[0.0997], [0.5365]], [[0.6963], [0.6347]]], [[[0.6427], [0.4277]], [[0.5219], [0.8228]]]]])
in1Mul10471 = tf.constant([[[[[0.488], [0.1561]], [[0.4363], [0.1219]]], [[[0.8463], [0.9327]], [[0.5106], [0.6269]]]]])
in0Con10786 = tf.constant([[0.7967, 0.9949, 0.9674, 0.5879]])
print (np.array2string(model.predict([in0Add40757,in1Add40757,in0Con71957,in0Sep11577,in0Mul10471,in1Mul10471,in0Con10786],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave88371.png')

LAdd40757 = add_layer([[[[0.6202, 0.6343]]], [[[0.0725, 0.5473]]]], Add40757), 
LGRU73947 = gru_layer(Add40757,[[4, 10, 7], [8, 7, 1]],[[2, 10, 10]],[[7, 7, 5], [6, 10, 4]], true, GRU73947), 
LRes44468 = reshape_layer(GRU73947, [1, 1], Res44468), 
LRes43267 = reshape_layer(Res44468, [1, 1, 1], Res43267), 
LRes61727 = reshape_layer(Res43267, [1, 1, 1, 1], Res61727), 
LZer51637 = zero_padding3D_layer(Res61727, 7, 0, 0, 0, 0, 0, Zer51637), 
LCon71957 = concatenate_layer([Zer51637,[[[[[0.9247, 0.4302, 0.6536]]], [[[0.743, 0.9969, 0.9407]]], [[[0.605, 0.1336, 0.1307]]], [[[0.4822, 0.8504, 0.3405]]], [[[0.7814, 0.5227, 0.21]]], [[[0.9534, 0.6897, 0.041]]], [[[0.9329, 0.5399, 0.9567]]], [[[0.1372, 0.9629, 0.1044]]]]]], 4, Con71957), 
LSep11577 = separable_conv1D_layer([[[0.3213, 0.7648], [0.4427, 0.8408]]], 1,[[[[0.7814], [0.4231]]],[[[0.0695, 0.2857, 0.8335, 0.603], [0.2828, 0.4747, 0.88, 0.8287]]]],[0, 0, 0, 0], 1, false, Sep11577), 
LFla58419 = flatten_layer(Sep11577, Fla58419), 
LMul10471 = multiply_layer([[[[[[0.0997], [0.5365]], [[0.6963], [0.6347]]], [[[0.6427], [0.4277]], [[0.5219], [0.8228]]]]], [[[[[0.488], [0.1561]], [[0.4363], [0.1219]]], [[[0.8463], [0.9327]], [[0.5106], [0.6269]]]]]], Mul10471), 
LRes13605 = reshape_layer(Mul10471, [2, 2, 2], Res13605), 
LRes46461 = reshape_layer(Res13605, [2, 4], Res46461), 
LGlo78012 = global_average_pooling1D_layer(Res46461, Glo78012), 
LCon10786 = concatenate_layer([Glo78012,[[0.7967, 0.9949, 0.9674, 0.5879]]], 1, Con10786), 
LAve59763 = average_layer([Fla58419,Con10786], Ave59763), 
LRes25357 = reshape_layer(Ave59763, [8, 1], Res25357), 
LRes90795 = reshape_layer(Res25357, [8, 1, 1], Res90795), 
LRes79090 = reshape_layer(Res90795, [8, 1, 1, 1], Res79090), 
LCon56967 = conv3D_transpose_layer(Res79090, 7, 1, 1,[[[[[0.5169], [0.2376], [0.9607], [0.3341]]]], [[[[0.8979], [0.2927], [0.3466], [0.4781]]]], [[[[0.1556], [0.6936], [0.1269], [0.9411]]]], [[[[0.119], [0.9751], [0.8608], [0.6551]]]], [[[[0.8899], [0.9182], [0.3098], [0.6318]]]], [[[[0.1056], [0.4664], [0.1193], [0.0976]]]], [[[[0.6611], [0.6157], [0.2105], [0.616]]]]],[0, 0, 0, 0], 1, 1, 1, true, Con56967), 
LAve88371 = average_layer([Con71957,Con56967], Ave88371), 
exec_layers([LAdd40757,LGRU73947,LRes44468,LRes43267,LRes61727,LZer51637,LCon71957,LSep11577,LFla58419,LMul10471,LRes13605,LRes46461,LGlo78012,LCon10786,LAve59763,LRes25357,LRes90795,LRes79090,LCon56967,LAve88371],["Add40757","GRU73947","Res44468","Res43267","Res61727","Zer51637","Con71957","Sep11577","Fla58419","Mul10471","Res13605","Res46461","Glo78012","Con10786","Ave59763","Res25357","Res90795","Res79090","Con56967","Ave88371"],Ave88371,"Ave88371")

Actual (Unparsed): [[[[[0.2976538, 0.7416121, 0.5566264, 0.6559084]]], [[[0.4141657, 0.8205230, 0.9383195, 0.9566550]]], [[[0.5355369, 0.9134107, 0.6885040, 0.6606269]]], [[[0.7959338, 1.0566611, 1.1903198, 0.9831127]]], [[[0.8267219, 1.3409263, 1.0009787, 1.0356038]]], [[[0.6962146, 1.5513019, 0.8946127, 1.0098058]]], [[[0.5127036, 1.5456018, 0.8051279, 1.3242266]]], [[[0.5670891, 0.9837825, 0.9239422, 0.6514111]]]]]

Expected (Unparsed): [[[[[0.2976538027978664,0.7416121302505554,0.5566264390182364,0.6559084001029647]]],[[[0.4141656976966739,0.820523020570515,0.9383194892532684,0.9566549983595916]]],[[[0.5355368656170878,0.9134106586610583,0.688503972201026,0.6606269442193922]]],[[[0.7959337865389895,1.056661056976554,1.1903197949248114,0.9831126618867542]]],[[[0.826721909533729,1.3409262790665228,1.0009786749362923,1.0356038470178894]]],[[[0.6962146289092533,1.5513018953192912,0.8946126896958867,1.0098057847996356]]],[[[0.5127035983507873,1.5456018462393435,0.8051279009955662,1.3242265755507328]]],[[[0.5670890991240206,0.9837825050595044,0.9239422555588881,0.6514111146347012]]]]]

Actual:   [[[[[0.2977, 0.7417, 0.5567, 0.656]]], [[[0.4142, 0.8206, 0.9384, 0.9567]]], [[[0.5356, 0.9135, 0.6886, 0.6607]]], [[[0.796, 1.0567, 1.1904, 0.9832]]], [[[0.8268, 1.341, 1.001, 1.0357]]], [[[0.6963, 1.5514, 0.8947, 1.0099]]], [[[0.5128, 1.5457, 0.8052, 1.3243]]], [[[0.5671, 0.9838, 0.924, 0.6515]]]]]

Expected: [[[[[0.2977, 0.7417, 0.5567, 0.656]]], [[[0.4142, 0.8206, 0.9384, 0.9567]]], [[[0.5356, 0.9135, 0.6886, 0.6607]]], [[[0.796, 1.0567, 1.1904, 0.9832]]], [[[0.8268, 1.341, 1.001, 1.0357]]], [[[0.6963, 1.5514, 0.8947, 1.0099]]], [[[0.5128, 1.5457, 0.8052, 1.3243]]], [[[0.5671, 0.9838, 0.924, 0.6515]]]]]