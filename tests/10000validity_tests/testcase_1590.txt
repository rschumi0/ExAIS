import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min6270 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Min6270 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))

Min6270 = keras.layers.Minimum(name = 'Min6270', )([in0Min6270,in1Min6270])
Lay16531 = keras.layers.LayerNormalization(axis=1, epsilon=1.8272474618944363, name = 'Lay16531', )(Min6270)
model = tf.keras.models.Model(inputs=[in0Min6270,in1Min6270], outputs=Lay16531)
in0Min6270 = tf.constant([[[[[0.1979, 0.6958], [0.135, 0.5625]], [[0.3184, 0.9126], [0.6216, 0.7886]]], [[[0.0842, 0.8969], [0.3332, 0.6443]], [[0.6651, 0.5405], [0.8786, 0.661]]]]])
in1Min6270 = tf.constant([[[[[0.398, 0.9627], [0.2112, 0.2017]], [[0.1366, 0.0216], [0.5179, 0.2257]]], [[[0.6325, 0.1059], [0.5103, 0.0138]], [[0.0276, 0.6961], [0.7229, 0.6058]]]]])
print (np.array2string(model.predict([in0Min6270,in1Min6270],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Lay16531.png')

LMin6270 = minimum_layer([[[[[[0.1979, 0.6958], [0.135, 0.5625]], [[0.3184, 0.9126], [0.6216, 0.7886]]], [[[0.0842, 0.8969], [0.3332, 0.6443]], [[0.6651, 0.5405], [0.8786, 0.661]]]]], [[[[[0.398, 0.9627], [0.2112, 0.2017]], [[0.1366, 0.0216], [0.5179, 0.2257]]], [[[0.6325, 0.1059], [0.5103, 0.0138]], [[0.0276, 0.6961], [0.7229, 0.6058]]]]]], Min6270), 
LLay16531 = layer_normalization_layer(Min6270, 1, 1.8272474618944363, Lay16531), 
exec_layers([LMin6270,LLay16531],["Min6270","Lay16531"],Lay16531,"Lay16531")

Actual (Unparsed): [[[[[0.0420192, 0.2131817], [-0.0731158, 0.0693349]], [[0.0402852, -0.1884948], [-0.0756102, -0.1392255]]], [[[-0.0420192, -0.2131817], [0.0731158, -0.0693349]], [[-0.0402852, 0.1884948], [0.0756102, 0.1392255]]]]]

Expected (Unparsed): [[[[[0.04201922596355328,0.21318167525568496],[-0.0731157612815997,0.06933486694066451]],[[0.04028516301065325,-0.18849476400984308],[-0.07561016940223035,-0.13922548401965423]]],[[[-0.0420192259635533,-0.21318167525568496],[0.0731157612815997,-0.06933486694066451]],[[-0.04028516301065326,0.18849476400984314],[0.07561016940223027,0.13922548401965423]]]]]

Actual:   [[[[[0.0421, 0.2132], [-0.0731, 0.0694]], [[0.0403, -0.1884], [-0.0756, -0.1392]]], [[[-0.042, -0.2131], [0.0732, -0.0693]], [[-0.0402, 0.1885], [0.0757, 0.1393]]]]]

Expected: [[[[[0.0421, 0.2132], [-0.0731, 0.0694]], [[0.0403, -0.1884], [-0.0756, -0.1392]]], [[[-0.042, -0.2131], [0.0732, -0.0693]], [[-0.0402, 0.1885], [0.0757, 0.1393]]]]]