import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul67255 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Mul67255 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con58389 = tf.keras.layers.Input(shape=([1]))
in0Max34250 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in1Max34250 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in0Con31943 = tf.keras.layers.Input(shape=([1]))
in0LST98942 = tf.keras.layers.Input(shape=([3, 2]))
in0Con21053 = tf.keras.layers.Input(shape=([1, 33]))
in0Bat96256 = tf.keras.layers.Input(shape=([1, 3]))
in0Con59082 = tf.keras.layers.Input(shape=([3, 6, 2, 2]))
in0Cro57964 = tf.keras.layers.Input(shape=([4, 3, 4, 3]))

Mul67255 = keras.layers.Multiply(name = 'Mul67255', )([in0Mul67255,in1Mul67255])
Res66376 = keras.layers.Reshape((2, 1), name = 'Res66376', )(Mul67255)
Fla69004 = keras.layers.Flatten(name = 'Fla69004', )(Res66376)
Con58389 = keras.layers.Concatenate(axis=1, name = 'Con58389', )([Fla69004,in0Con58389])
Max34250 = keras.layers.Maximum(name = 'Max34250', )([in0Max34250,in1Max34250])
Res40002 = keras.layers.Reshape((1, 1, 2), name = 'Res40002', )(Max34250)
Res82377 = keras.layers.Reshape((1, 2), name = 'Res82377', )(Res40002)
Fla92323 = keras.layers.Flatten(name = 'Fla92323', )(Res82377)
Con31943 = keras.layers.Concatenate(axis=1, name = 'Con31943', )([Fla92323,in0Con31943])
LST98942 = keras.layers.LSTM(3,recurrent_activation='sigmoid', name = 'LST98942', )(in0LST98942)
Min58476 = keras.layers.Minimum(name = 'Min58476', )([Con31943,LST98942])
Dot71642 = keras.layers.Dot(axes=(1, 1), name = 'Dot71642', )([Con58389,Min58476])
Res45384 = keras.layers.Reshape((1, 1), name = 'Res45384', )(Dot71642)
Res6452 = keras.layers.Reshape((1, 1, 1), name = 'Res6452', )(Res45384)
Con48402 = keras.layers.Conv2DTranspose(3, (1, 1),strides=(1, 1), padding='same', name = 'Con48402', )(Res6452)
Res22660 = keras.layers.Reshape((1, 3), name = 'Res22660', )(Con48402)
Con21053 = keras.layers.Concatenate(axis=2, name = 'Con21053', )([Res22660,in0Con21053])
Bat96256 = keras.layers.BatchNormalization(axis=1, epsilon=0.6230108586082458,  name = 'Bat96256', )(in0Bat96256)
Res25969 = keras.layers.Reshape((1, 3, 1), name = 'Res25969', )(Bat96256)
Con22544 = keras.layers.Conv2DTranspose(2, (1, 1),strides=(3, 2), padding='same', name = 'Con22544', )(Res25969)
Res20519 = keras.layers.Reshape((3, 6, 2, 1), name = 'Res20519', )(Con22544)
Con59082 = keras.layers.Concatenate(axis=4, name = 'Con59082', )([Res20519,in0Con59082])
Cro57964 = keras.layers.Cropping3D(cropping=((0, 1), (0, 0), (3, 0)), name = 'Cro57964', )(in0Cro57964)
Zer34389 = keras.layers.ZeroPadding3D(padding=((0, 0), (3, 0), (1, 0)), name = 'Zer34389', )(Cro57964)
Ave41891 = keras.layers.Average(name = 'Ave41891', )([Con59082,Zer34389])
Res72597 = keras.layers.Reshape((3, 6, 6), name = 'Res72597', )(Ave41891)
Res5528 = keras.layers.Reshape((3, 36), name = 'Res5528', )(Res72597)
Dot32524 = keras.layers.Dot(axes=(2, 2), name = 'Dot32524', )([Con21053,Res5528])
model = tf.keras.models.Model(inputs=[in0Mul67255,in1Mul67255,in0Con58389,in0Max34250,in1Max34250,in0Con31943,in0LST98942,in0Con21053,in0Bat96256,in0Con59082,in0Cro57964], outputs=Dot32524)
w = model.get_layer('LST98942').get_weights() 
w[0] = np.array([[7, 2, 6, 2, 9, 1, 1, 8, 9, 5, 8, 8], [1, 2, 8, 3, 5, 4, 10, 7, 1, 6, 7, 5]])
w[1] = np.array([[2, 8, 4, 5, 6, 5, 4, 10, 8, 5, 10, 3], [4, 8, 1, 6, 5, 8, 5, 10, 9, 4, 6, 6], [9, 1, 2, 9, 4, 8, 2, 4, 10, 2, 2, 2]])
w[2] = np.array([7, 3, 6, 8, 8, 6, 3, 7, 10, 5, 1, 7])
model.get_layer('LST98942').set_weights(w) 
w = model.get_layer('Con48402').get_weights() 
w[0] = np.array([[[[0.7964], [0.879], [0.8406]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con48402').set_weights(w) 
w = model.get_layer('Bat96256').get_weights() 
w[0] = np.array([0.078])
w[1] = np.array([0.3028])
w[2] = np.array([0.5728])
w[3] = np.array([0.2545])
model.get_layer('Bat96256').set_weights(w) 
w = model.get_layer('Con22544').get_weights() 
w[0] = np.array([[[[0.6196], [0.3099]]]])
w[1] = np.array([0, 0])
model.get_layer('Con22544').set_weights(w) 
in0Mul67255 = tf.constant([[[[0.0526]], [[0.3018]]]])
in1Mul67255 = tf.constant([[[[0.444]], [[0.6517]]]])
in0Con58389 = tf.constant([[0.4443]])
in0Max34250 = tf.constant([[[[[0.1375], [0.6896]]]]])
in1Max34250 = tf.constant([[[[[0.8936], [0.1414]]]]])
in0Con31943 = tf.constant([[0.7862]])
in0LST98942 = tf.constant([[[10, 10], [9, 10], [3, 9]]])
in0Con21053 = tf.constant([[[0.2329, 0.8242, 0.0061, 0.7272, 0.3606, 0.1379, 0.229, 0.2208, 0.1185, 0.8945, 0.9698, 0.1674, 0.3134, 0.1641, 0.5238, 0.0539, 0.8495, 0.6344, 0.6071, 0.9568, 0.6989, 0.2754, 0.8513, 0.233, 0.5596, 0.6402, 0.2324, 0.3602, 0.9838, 0.6375, 0.6603, 0.0256, 0.1899]]])
in0Bat96256 = tf.constant([[[1.395, 1.2354, 1.6288]]])
in0Con59082 = tf.constant([[[[[0.8959, 0.5182], [0.0407, 0.0815]], [[0.9219, 0.9946], [0.1222, 0.0271]], [[0.7646, 0.5619], [0.8744, 0.0293]], [[0.6291, 0.4875], [0.3988, 0.8898]], [[0.4014, 0.453], [0.8222, 0.264]], [[0.3226, 0.8587], [0.6812, 0.4127]]], [[[0.6023, 0.4792], [0.4712, 0.8335]], [[0.5346, 0.0724], [0.9054, 0.6248]], [[0.2171, 0.928], [0.23, 0.7086]], [[0.2823, 0.7555], [0.0184, 0.8458]], [[0.1492, 0.7602], [0.2285, 0.7129]], [[0.1757, 0.231], [0.948, 0.1772]]], [[[0.752, 0.4739], [0.178, 0.3093]], [[0.8133, 0.4645], [0.2048, 0.5994]], [[0.4675, 0.1645], [0.6001, 0.3075]], [[0.4389, 0.05], [0.6526, 0.8703]], [[0.8063, 0.0322], [0.0841, 0.8119]], [[0.0815, 0.6164], [0.2316, 0.6627]]]]])
in0Cro57964 = tf.constant([[[[[1.6386, 1.7524, 1.4703], [1.8353, 1.9013, 1.7954], [1.4513, 1.9472, 1.2262], [1.8789, 1.6688, 1.6851]], [[1.4642, 1.8678, 1.0027], [1.2639, 1.0519, 1.0591], [1.3655, 1.4209, 1.5321], [1.0786, 1.7133, 1.5629]], [[1.0979, 1.0078, 1.0917], [1.8311, 1.9373, 1.1168], [1.7065, 1.7035, 1.3009], [1.3599, 1.2265, 1.7388]]], [[[1.7681, 1.223, 1.6605], [1.2039, 1.1431, 1.6048], [1.1846, 1.6167, 1.7782], [1.1576, 1.2381, 1.693]], [[1.892, 1.9214, 1.0551], [1.7861, 1.6255, 1.1404], [1.5557, 1.6741, 1.1646], [1.8687, 1.1779, 1.4693]], [[1.2433, 1.3444, 1.8033], [1.4953, 1.742, 1.1392], [1.3986, 1.2148, 1.8922], [1.774, 1.3799, 1.672]]], [[[1.81, 1.8339, 1.9875], [1.4646, 1.6954, 1.6118], [1.1567, 1.9543, 1.0513], [1.9633, 1.4632, 1.2842]], [[1.7079, 1.3648, 1.7323], [1.7859, 1.2663, 1.1339], [1.8072, 1.5228, 1.8189], [1.3916, 1.7923, 1.0472]], [[1.4458, 1.6251, 1.8096], [1.9258, 1.0404, 1.6444], [1.9371, 1.2283, 1.4748], [1.3158, 1.5327, 1.9671]]], [[[1.9807, 1.7056, 1.5914], [1.4258, 1.8894, 1.165], [1.1312, 1.4216, 1.5552], [1.4532, 1.8575, 1.8083]], [[1.3658, 1.2062, 1.5181], [1.9471, 1.2345, 1.9348], [1.4275, 1.445, 1.8653], [1.2605, 1.6133, 1.1957]], [[1.3803, 1.2846, 1.9162], [1.6418, 1.6117, 1.8267], [1.164, 1.2238, 1.4705], [1.7634, 1.2283, 1.18]]]]])
print (np.array2string(model.predict([in0Mul67255,in1Mul67255,in0Con58389,in0Max34250,in1Max34250,in0Con31943,in0LST98942,in0Con21053,in0Bat96256,in0Con59082,in0Cro57964],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Dot32524.png')

LMul67255 = multiply_layer([[[[[0.0526]], [[0.3018]]]], [[[[0.444]], [[0.6517]]]]], Mul67255), 
LRes66376 = reshape_layer(Mul67255, [2, 1], Res66376), 
LFla69004 = flatten_layer(Res66376, Fla69004), 
LCon58389 = concatenate_layer([Fla69004,[[0.4443]]], 1, Con58389), 
LMax34250 = maximum_layer([[[[[[0.1375], [0.6896]]]]], [[[[[0.8936], [0.1414]]]]]], Max34250), 
LRes40002 = reshape_layer(Max34250, [1, 1, 2], Res40002), 
LRes82377 = reshape_layer(Res40002, [1, 2], Res82377), 
LFla92323 = flatten_layer(Res82377, Fla92323), 
LCon31943 = concatenate_layer([Fla92323,[[0.7862]]], 1, Con31943), 
LLST98942 = lstm_layer([[[10, 10], [9, 10], [3, 9]]],[[7, 2, 6, 2, 9, 1, 1, 8, 9, 5, 8, 8], [1, 2, 8, 3, 5, 4, 10, 7, 1, 6, 7, 5]],[[2, 8, 4, 5, 6, 5, 4, 10, 8, 5, 10, 3], [4, 8, 1, 6, 5, 8, 5, 10, 9, 4, 6, 6], [9, 1, 2, 9, 4, 8, 2, 4, 10, 2, 2, 2]],[7, 3, 6, 8, 8, 6, 3, 7, 10, 5, 1, 7], LST98942), 
LMin58476 = minimum_layer([Con31943,LST98942], Min58476), 
LDot71642 = dot_layer(Con58389,Min58476, 1, 1, Dot71642), 
LRes45384 = reshape_layer(Dot71642, [1, 1], Res45384), 
LRes6452 = reshape_layer(Res45384, [1, 1, 1], Res6452), 
LCon48402 = conv2D_transpose_layer(Res6452, 1, 1,[[[[0.7964], [0.879], [0.8406]]]],[0, 0, 0], 1, 1, true, Con48402), 
LRes22660 = reshape_layer(Con48402, [1, 3], Res22660), 
LCon21053 = concatenate_layer([Res22660,[[[0.2329, 0.8242, 0.0061, 0.7272, 0.3606, 0.1379, 0.229, 0.2208, 0.1185, 0.8945, 0.9698, 0.1674, 0.3134, 0.1641, 0.5238, 0.0539, 0.8495, 0.6344, 0.6071, 0.9568, 0.6989, 0.2754, 0.8513, 0.233, 0.5596, 0.6402, 0.2324, 0.3602, 0.9838, 0.6375, 0.6603, 0.0256, 0.1899]]]], 2, Con21053), 
LBat96256 = batch_normalization_layer([[[1.395, 1.2354, 1.6288]]], 1, 0.6230108586082458, [0.078], [0.3028], [0.5728], [0.2545], Bat96256), 
LRes25969 = reshape_layer(Bat96256, [1, 3, 1], Res25969), 
LCon22544 = conv2D_transpose_layer(Res25969, 1, 1,[[[[0.6196], [0.3099]]]],[0, 0], 3, 2, true, Con22544), 
LRes20519 = reshape_layer(Con22544, [3, 6, 2, 1], Res20519), 
LCon59082 = concatenate_layer([Res20519,[[[[[0.8959, 0.5182], [0.0407, 0.0815]], [[0.9219, 0.9946], [0.1222, 0.0271]], [[0.7646, 0.5619], [0.8744, 0.0293]], [[0.6291, 0.4875], [0.3988, 0.8898]], [[0.4014, 0.453], [0.8222, 0.264]], [[0.3226, 0.8587], [0.6812, 0.4127]]], [[[0.6023, 0.4792], [0.4712, 0.8335]], [[0.5346, 0.0724], [0.9054, 0.6248]], [[0.2171, 0.928], [0.23, 0.7086]], [[0.2823, 0.7555], [0.0184, 0.8458]], [[0.1492, 0.7602], [0.2285, 0.7129]], [[0.1757, 0.231], [0.948, 0.1772]]], [[[0.752, 0.4739], [0.178, 0.3093]], [[0.8133, 0.4645], [0.2048, 0.5994]], [[0.4675, 0.1645], [0.6001, 0.3075]], [[0.4389, 0.05], [0.6526, 0.8703]], [[0.8063, 0.0322], [0.0841, 0.8119]], [[0.0815, 0.6164], [0.2316, 0.6627]]]]]], 4, Con59082), 
LCro57964 = cropping3D_layer([[[[[1.6386, 1.7524, 1.4703], [1.8353, 1.9013, 1.7954], [1.4513, 1.9472, 1.2262], [1.8789, 1.6688, 1.6851]], [[1.4642, 1.8678, 1.0027], [1.2639, 1.0519, 1.0591], [1.3655, 1.4209, 1.5321], [1.0786, 1.7133, 1.5629]], [[1.0979, 1.0078, 1.0917], [1.8311, 1.9373, 1.1168], [1.7065, 1.7035, 1.3009], [1.3599, 1.2265, 1.7388]]], [[[1.7681, 1.223, 1.6605], [1.2039, 1.1431, 1.6048], [1.1846, 1.6167, 1.7782], [1.1576, 1.2381, 1.693]], [[1.892, 1.9214, 1.0551], [1.7861, 1.6255, 1.1404], [1.5557, 1.6741, 1.1646], [1.8687, 1.1779, 1.4693]], [[1.2433, 1.3444, 1.8033], [1.4953, 1.742, 1.1392], [1.3986, 1.2148, 1.8922], [1.774, 1.3799, 1.672]]], [[[1.81, 1.8339, 1.9875], [1.4646, 1.6954, 1.6118], [1.1567, 1.9543, 1.0513], [1.9633, 1.4632, 1.2842]], [[1.7079, 1.3648, 1.7323], [1.7859, 1.2663, 1.1339], [1.8072, 1.5228, 1.8189], [1.3916, 1.7923, 1.0472]], [[1.4458, 1.6251, 1.8096], [1.9258, 1.0404, 1.6444], [1.9371, 1.2283, 1.4748], [1.3158, 1.5327, 1.9671]]], [[[1.9807, 1.7056, 1.5914], [1.4258, 1.8894, 1.165], [1.1312, 1.4216, 1.5552], [1.4532, 1.8575, 1.8083]], [[1.3658, 1.2062, 1.5181], [1.9471, 1.2345, 1.9348], [1.4275, 1.445, 1.8653], [1.2605, 1.6133, 1.1957]], [[1.3803, 1.2846, 1.9162], [1.6418, 1.6117, 1.8267], [1.164, 1.2238, 1.4705], [1.7634, 1.2283, 1.18]]]]], 0, 1, 0, 0, 3, 0, Cro57964), 
LZer34389 = zero_padding3D_layer(Cro57964, 0, 0, 3, 0, 1, 0, Zer34389), 
LAve41891 = average_layer([Con59082,Zer34389], Ave41891), 
LRes72597 = reshape_layer(Ave41891, [3, 6, 6], Res72597), 
LRes5528 = reshape_layer(Res72597, [3, 36], Res5528), 
LDot32524 = dot_layer(Con21053,Res5528, 2, 2, Dot32524), 
exec_layers([LMul67255,LRes66376,LFla69004,LCon58389,LMax34250,LRes40002,LRes82377,LFla92323,LCon31943,LLST98942,LMin58476,LDot71642,LRes45384,LRes6452,LCon48402,LRes22660,LCon21053,LBat96256,LRes25969,LCon22544,LRes20519,LCon59082,LCro57964,LZer34389,LAve41891,LRes72597,LRes5528,LDot32524],["Mul67255","Res66376","Fla69004","Con58389","Max34250","Res40002","Res82377","Fla92323","Con31943","LST98942","Min58476","Dot71642","Res45384","Res6452","Con48402","Res22660","Con21053","Bat96256","Res25969","Con22544","Res20519","Con59082","Cro57964","Zer34389","Ave41891","Res72597","Res5528","Dot32524"],Dot32524,"Dot32524")

Actual (Unparsed): [[[6.8574931, 5.5872966, 6.0088167]]]

Expected (Unparsed): [[[6.857493070330434,5.587296592365259,6.00881676348667]]]

Actual:   [[[6.8575, 5.5873, 6.0089]]]

Expected: [[[6.8575, 5.5873, 6.0089]]]