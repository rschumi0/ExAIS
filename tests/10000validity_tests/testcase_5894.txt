import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul72171 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Mul72171 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Con32753 = tf.keras.layers.Input(shape=([2, 2]))
in0Mul75783 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in1Mul75783 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Max30656 = tf.keras.layers.Input(shape=([2, 2]))
in1Max30656 = tf.keras.layers.Input(shape=([2, 2]))
in0Con98487 = tf.keras.layers.Input(shape=([2, 2]))

Mul72171 = keras.layers.Multiply(name = 'Mul72171', )([in0Mul72171,in1Mul72171])
Res81505 = keras.layers.Reshape((2, 2, 4), name = 'Res81505', )(Mul72171)
Res26789 = keras.layers.Reshape((2, 8), name = 'Res26789', )(Res81505)
Sep70809 = keras.layers.SeparableConv1D(2, (2),strides=(1), padding='valid', name = 'Sep70809', )(Res26789)
Zer4138 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer4138', )(Sep70809)
Con32753 = keras.layers.Concatenate(axis=2, name = 'Con32753', )([Zer4138,in0Con32753])
Mul75783 = keras.layers.Multiply(name = 'Mul75783', )([in0Mul75783,in1Mul75783])
Res31376 = keras.layers.Reshape((2, 2, 2), name = 'Res31376', )(Mul75783)
Res31894 = keras.layers.Reshape((2, 4), name = 'Res31894', )(Res31376)
Max30656 = keras.layers.Maximum(name = 'Max30656', )([in0Max30656,in1Max30656])
Con98487 = keras.layers.Concatenate(axis=2, name = 'Con98487', )([Max30656,in0Con98487])
Max87011 = keras.layers.Maximum(name = 'Max87011', )([Res31894,Con98487])
Con52673 = keras.layers.Conv1D(4, (1),strides=(1), padding='valid', dilation_rate=(1), name = 'Con52673', )(Max87011)
Min67232 = keras.layers.Minimum(name = 'Min67232', )([Con32753,Con52673])
model = tf.keras.models.Model(inputs=[in0Mul72171,in1Mul72171,in0Con32753,in0Mul75783,in1Mul75783,in0Max30656,in1Max30656,in0Con98487], outputs=Min67232)
w = model.get_layer('Sep70809').get_weights() 
w[0] = np.array([[[0.1526], [0.735], [0.9943], [0.2051], [0.9973], [0.7975], [0.9299], [0.7886]], [[0.3481], [0.145], [0.946], [0.9938], [0.1454], [0.0978], [0.9468], [0.7479]]])
w[1] = np.array([[[0.9461, 0.1576], [0.8003, 0.7313], [0.2996, 0.62], [0.6407, 0.3982], [0.1993, 0.9562], [0.0538, 0.5116], [0.2803, 0.5065], [0.5995, 0.8417]]])
w[2] = np.array([0, 0])
model.get_layer('Sep70809').set_weights(w) 
w = model.get_layer('Con52673').get_weights() 
w[0] = np.array([[[0.9739, 0.3693, 0.0408, 0.7707], [0.3679, 0.675, 0.9316, 0.5118], [0.1393, 0.6789, 0.6822, 0.9866], [0.5502, 0.3482, 0.8251, 0.8911]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con52673').set_weights(w) 
in0Mul72171 = tf.constant([[[[[0.5411, 0.2432], [0.4327, 0.5246]], [[0.5086, 0.2237], [0.7523, 0.4198]]], [[[0.8475, 0.4466], [0.9891, 0.6313]], [[0.0635, 0.8076], [0.175, 0.2662]]]]])
in1Mul72171 = tf.constant([[[[[0.5058, 0.9605], [0.2449, 0.9533]], [[0.3262, 0.2572], [0.7176, 0.675]]], [[[0.1814, 0.88], [0.6662, 0.4903]], [[0.6427, 0.0724], [0.7947, 0.9731]]]]])
in0Con32753 = tf.constant([[[0.0081, 0.9406], [0.3759, 0.7597]]])
in0Mul75783 = tf.constant([[[[[0.0189], [0.3204]], [[0.8864], [0.9674]]], [[[0.7078], [0.1815]], [[0.4969], [0.4336]]]]])
in1Mul75783 = tf.constant([[[[[0.2469], [0.2149]], [[0.5269], [0.7435]]], [[[0.9513], [0.1289]], [[0.2301], [0.7728]]]]])
in0Max30656 = tf.constant([[[0.399, 0.8261], [0.2848, 0.5334]]])
in1Max30656 = tf.constant([[[0.0515, 0.5023], [0.7902, 0.8907]]])
in0Con98487 = tf.constant([[[0.1606, 0.9134], [0.6674, 0.0521]]])
print (np.array2string(model.predict([in0Mul72171,in1Mul72171,in0Con32753,in0Mul75783,in1Mul75783,in0Max30656,in1Max30656,in0Con98487],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min67232.png')

LMul72171 = multiply_layer([[[[[[0.5411, 0.2432], [0.4327, 0.5246]], [[0.5086, 0.2237], [0.7523, 0.4198]]], [[[0.8475, 0.4466], [0.9891, 0.6313]], [[0.0635, 0.8076], [0.175, 0.2662]]]]], [[[[[0.5058, 0.9605], [0.2449, 0.9533]], [[0.3262, 0.2572], [0.7176, 0.675]]], [[[0.1814, 0.88], [0.6662, 0.4903]], [[0.6427, 0.0724], [0.7947, 0.9731]]]]]], Mul72171), 
LRes81505 = reshape_layer(Mul72171, [2, 2, 4], Res81505), 
LRes26789 = reshape_layer(Res81505, [2, 8], Res26789), 
LSep70809 = separable_conv1D_layer(Res26789, 2,[[[[0.1526], [0.735], [0.9943], [0.2051], [0.9973], [0.7975], [0.9299], [0.7886]], [[0.3481], [0.145], [0.946], [0.9938], [0.1454], [0.0978], [0.9468], [0.7479]]],[[[0.9461, 0.1576], [0.8003, 0.7313], [0.2996, 0.62], [0.6407, 0.3982], [0.1993, 0.9562], [0.0538, 0.5116], [0.2803, 0.5065], [0.5995, 0.8417]]]],[0, 0], 1, false, Sep70809), 
LZer4138 = zero_padding1D_layer(Sep70809, 1, 0, Zer4138), 
LCon32753 = concatenate_layer([Zer4138,[[[0.0081, 0.9406], [0.3759, 0.7597]]]], 2, Con32753), 
LMul75783 = multiply_layer([[[[[[0.0189], [0.3204]], [[0.8864], [0.9674]]], [[[0.7078], [0.1815]], [[0.4969], [0.4336]]]]], [[[[[0.2469], [0.2149]], [[0.5269], [0.7435]]], [[[0.9513], [0.1289]], [[0.2301], [0.7728]]]]]], Mul75783), 
LRes31376 = reshape_layer(Mul75783, [2, 2, 2], Res31376), 
LRes31894 = reshape_layer(Res31376, [2, 4], Res31894), 
LMax30656 = maximum_layer([[[[0.399, 0.8261], [0.2848, 0.5334]]], [[[0.0515, 0.5023], [0.7902, 0.8907]]]], Max30656), 
LCon98487 = concatenate_layer([Max30656,[[[0.1606, 0.9134], [0.6674, 0.0521]]]], 2, Con98487), 
LMax87011 = maximum_layer([Res31894,Con98487], Max87011), 
LCon52673 = conv1D_layer(Max87011, 1,[[[0.9739, 0.3693, 0.0408, 0.7707], [0.3679, 0.675, 0.9316, 0.5118], [0.1393, 0.6789, 0.6822, 0.9866], [0.5502, 0.3482, 0.8251, 0.8911]]],[0, 0, 0, 0], 1, false, 1, Con52673), 
LMin67232 = minimum_layer([Con32753,Con52673], Min67232), 
exec_layers([LMul72171,LRes81505,LRes26789,LSep70809,LZer4138,LCon32753,LMul75783,LRes31376,LRes31894,LMax30656,LCon98487,LMax87011,LCon52673,LMin67232],["Mul72171","Res81505","Res26789","Sep70809","Zer4138","Con32753","Mul75783","Res31376","Res31894","Max30656","Con98487","Max87011","Con52673","Min67232"],Min67232,"Min67232")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0081000, 0.9406000], [1.2189460, 1.4628182, 0.3759000, 0.7597000]]]

Expected (Unparsed): [[[0,0,0.0081,0.9406],[1.2189459808897423,1.462818193056,0.3759,0.7597]]]

Actual:   [[[0, 0, 0.0081, 0.9406], [1.219, 1.4629, 0.3759, 0.7597]]]

Expected: [[[0, 0, 0.0081, 0.9406], [1.219, 1.4629, 0.3759, 0.7597]]]