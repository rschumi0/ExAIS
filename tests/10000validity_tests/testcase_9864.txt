import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot49482 = tf.keras.layers.Input(shape=([3, 3]))
in1Dot49482 = tf.keras.layers.Input(shape=([3, 3]))
in0Con49082 = tf.keras.layers.Input(shape=([3, 4, 3]))
in0Glo3524 = tf.keras.layers.Input(shape=([1, 1]))

Dot49482 = keras.layers.Dot(axes=(2, 1), name = 'Dot49482', )([in0Dot49482,in1Dot49482])
Up_85513 = keras.layers.UpSampling1D(size=(1), name = 'Up_85513', )(Dot49482)
Den7441 = keras.layers.Dense(4,name = 'Den7441', )(Up_85513)
Res81855 = keras.layers.Reshape((3, 4, 1), name = 'Res81855', )(Den7441)
Con49082 = keras.layers.Concatenate(axis=3, name = 'Con49082', )([Res81855,in0Con49082])
Glo3524 = keras.layers.GlobalMaxPool1D(name = 'Glo3524', )(in0Glo3524)
Res47402 = keras.layers.Reshape((1, 1), name = 'Res47402', )(Glo3524)
Res8042 = keras.layers.Reshape((1, 1, 1), name = 'Res8042', )(Res47402)
Sep39578 = keras.layers.SeparableConv2D(4, (1, 1),strides=(1, 1), padding='same', name = 'Sep39578', )(Res8042)
Zer60050 = keras.layers.ZeroPadding2D(padding=((2, 0), (3, 0)), name = 'Zer60050', )(Sep39578)
Mul85129 = keras.layers.Multiply(name = 'Mul85129', )([Con49082,Zer60050])
model = tf.keras.models.Model(inputs=[in0Dot49482,in1Dot49482,in0Con49082,in0Glo3524], outputs=Mul85129)
w = model.get_layer('Den7441').get_weights() 
w[0] = np.array([[0.8133, 0.8187, 0.0694, 0.1149], [0.081, 0.0529, 0.1418, 0.6649], [0.6202, 0.1119, 0.5889, 0.8879]])
w[1] = np.array([0.8707, 0.9333, 0.0523, 0.282])
model.get_layer('Den7441').set_weights(w) 
w = model.get_layer('Sep39578').get_weights() 
w[0] = np.array([[[[0.3926]]]])
w[1] = np.array([[[[0.1516, 0.1509, 0.5489, 0.9662]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep39578').set_weights(w) 
in0Dot49482 = tf.constant([[[0.9159, 0.3911, 0.367], [0.5685, 0.8836, 0.4649], [0.1066, 0.2604, 0.6495]]])
in1Dot49482 = tf.constant([[[0.9083, 0.0655, 0.6306], [0.0403, 0.2274, 0.3167], [0.853, 0.776, 0.8446]]])
in0Con49082 = tf.constant([[[[0.4684, 0.5172, 0.6106], [0.3438, 0.1217, 0.4743], [0.2447, 0.1932, 0.818], [0.377, 0.9717, 0.2032]], [[0.9407, 0.5638, 0.8355], [0.2029, 0.4045, 0.5147], [0.4687, 0.9892, 0.778], [0.8087, 0.7649, 0.2814]], [[0.8036, 0.008, 0.6439], [0.6511, 0.2026, 0.3076], [0.6686, 0.0316, 0.215], [0.4519, 0.6008, 0.4655]]]])
in0Glo3524 = tf.constant([[[1.75]]])
print (np.array2string(model.predict([in0Dot49482,in1Dot49482,in0Con49082,in0Glo3524],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul85129.png')

LDot49482 = dot_layer([[[0.9159, 0.3911, 0.367], [0.5685, 0.8836, 0.4649], [0.1066, 0.2604, 0.6495]]], [[[0.9083, 0.0655, 0.6306], [0.0403, 0.2274, 0.3167], [0.853, 0.776, 0.8446]]], 2, 1, Dot49482), 
LUp_85513 = up_sampling1D_layer(Dot49482, 1, Up_85513), 
LDen7441 = dense_layer(Up_85513, [[0.8133, 0.8187, 0.0694, 0.1149], [0.081, 0.0529, 0.1418, 0.6649], [0.6202, 0.1119, 0.5889, 0.8879]],[0.8707, 0.9333, 0.0523, 0.282], Den7441), 
LRes81855 = reshape_layer(Den7441, [3, 4, 1], Res81855), 
LCon49082 = concatenate_layer([Res81855,[[[[0.4684, 0.5172, 0.6106], [0.3438, 0.1217, 0.4743], [0.2447, 0.1932, 0.818], [0.377, 0.9717, 0.2032]], [[0.9407, 0.5638, 0.8355], [0.2029, 0.4045, 0.5147], [0.4687, 0.9892, 0.778], [0.8087, 0.7649, 0.2814]], [[0.8036, 0.008, 0.6439], [0.6511, 0.2026, 0.3076], [0.6686, 0.0316, 0.215], [0.4519, 0.6008, 0.4655]]]]], 3, Con49082), 
LGlo3524 = global_max_pool1D_layer([[[1.75]]], Glo3524), 
LRes47402 = reshape_layer(Glo3524, [1, 1], Res47402), 
LRes8042 = reshape_layer(Res47402, [1, 1, 1], Res8042), 
LSep39578 = separable_conv2D_layer(Res8042, 1, 1,[[[[[0.3926]]]],[[[[0.1516, 0.1509, 0.5489, 0.9662]]]]],[0, 0, 0, 0], 1, 1, true, Sep39578), 
LZer60050 = zero_padding2D_layer(Sep39578, 2, 0, 3, 0, Zer60050), 
LMul85129 = multiply_layer([Con49082,Zer60050], Mul85129), 
exec_layers([LDot49482,LUp_85513,LDen7441,LRes81855,LCon49082,LGlo3524,LRes47402,LRes8042,LSep39578,LZer60050,LMul85129],["Dot49482","Up_85513","Den7441","Res81855","Con49082","Glo3524","Res47402","Res8042","Sep39578","Zer60050","Mul85129"],Mul85129,"Mul85129")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.1413516, 0.0468511, 0.2265747, 0.3090118]]]]

Expected (Unparsed): [[[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.14135157847594382,0.04685111435550001,0.22657474439600003,0.309011799005]]]]

Actual:   [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0.1414, 0.0469, 0.2266, 0.3091]]]]

Expected: [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0.1414, 0.0469, 0.2266, 0.3091]]]]