import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo66432 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Sub2675 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in1Sub2675 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in0Con7690 = tf.keras.layers.Input(shape=([6]))
in0Sub9790 = tf.keras.layers.Input(shape=([3, 3]))
in1Sub9790 = tf.keras.layers.Input(shape=([3, 3]))
in0LST52650 = tf.keras.layers.Input(shape=([2, 2]))
in0Con80744 = tf.keras.layers.Input(shape=([6]))
in0Con187 = tf.keras.layers.Input(shape=([27]))

Glo66432 = keras.layers.GlobalAveragePooling3D(name = 'Glo66432', )(in0Glo66432)
Res96404 = keras.layers.Reshape((2, 1), name = 'Res96404', )(Glo66432)
Res18007 = keras.layers.Reshape((2, 1, 1), name = 'Res18007', )(Res96404)
Res64152 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res64152', )(Res18007)
Zer26325 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer26325', )(Res64152)
Res85228 = keras.layers.Reshape((4, 3, 3), name = 'Res85228', )(Zer26325)
Res40123 = keras.layers.Reshape((4, 9), name = 'Res40123', )(Res85228)
Fla64647 = keras.layers.Flatten(name = 'Fla64647', )(Res40123)
Sub2675 = keras.layers.Subtract(name = 'Sub2675', )([in0Sub2675,in1Sub2675])
Up_81147 = keras.layers.UpSampling3D(size=(1, 2, 1), name = 'Up_81147', )(Sub2675)
Glo48784 = keras.layers.GlobalMaxPool3D(name = 'Glo48784', )(Up_81147)
Con7690 = keras.layers.Concatenate(axis=1, name = 'Con7690', )([Glo48784,in0Con7690])
Sub9790 = keras.layers.Subtract(name = 'Sub9790', )([in0Sub9790,in1Sub9790])
Fla96017 = keras.layers.Flatten(name = 'Fla96017', )(Sub9790)
LST52650 = keras.layers.LSTM(3,recurrent_activation='sigmoid', name = 'LST52650', )(in0LST52650)
Con80744 = keras.layers.Concatenate(axis=1, name = 'Con80744', )([LST52650,in0Con80744])
Max29485 = keras.layers.Maximum(name = 'Max29485', )([Fla96017,Con80744])
Max95287 = keras.layers.Maximum(name = 'Max95287', )([Con7690,Max29485])
Con187 = keras.layers.Concatenate(axis=1, name = 'Con187', )([Max95287,in0Con187])
Min70991 = keras.layers.Minimum(name = 'Min70991', )([Fla64647,Con187])
model = tf.keras.models.Model(inputs=[in0Glo66432,in0Sub2675,in1Sub2675,in0Con7690,in0Sub9790,in1Sub9790,in0LST52650,in0Con80744,in0Con187], outputs=Min70991)
w = model.get_layer('LST52650').get_weights() 
w[0] = np.array([[7, 4, 8, 1, 6, 7, 2, 4, 9, 4, 10, 6], [9, 9, 10, 3, 1, 5, 3, 6, 9, 4, 8, 1]])
w[1] = np.array([[1, 2, 5, 8, 10, 1, 1, 7, 6, 10, 3, 9], [3, 1, 7, 7, 5, 4, 10, 9, 4, 10, 3, 10], [1, 6, 6, 6, 8, 3, 8, 4, 6, 10, 8, 2]])
w[2] = np.array([10, 2, 4, 1, 3, 6, 5, 5, 8, 8, 7, 7])
model.get_layer('LST52650').set_weights(w) 
in0Glo66432 = tf.constant([[[[[1.9983, 1.0538]], [[1.9833, 1.0548]]], [[[1.1547, 1.6553]], [[1.2843, 1.5083]]]]])
in0Sub2675 = tf.constant([[[[[0.7265, 0.4307, 0.3302], [0.0436, 0.1637, 0.8307], [0.3782, 0.402, 0.0932]], [[0.8959, 0.784, 0.3933], [0.3209, 0.0653, 0.0495], [0.2207, 0.3173, 0.991]], [[0.79, 0.6746, 0.1214], [0.6948, 0.8566, 0.2113], [0.3613, 0.9892, 0.5627]]], [[[0.5936, 0.0078, 0.0724], [0.3387, 0.338, 0.5534], [0.6026, 0.1635, 0.6867]], [[0.5403, 0.3589, 0.8112], [0.2021, 0.7482, 0.8047], [0.2853, 0.3683, 0.897]], [[0.4825, 0.817, 0.7765], [0.4209, 0.1909, 0.4522], [0.5687, 0.7234, 0.3199]]], [[[0.5639, 0.8204, 0.3401], [0.555, 0.5917, 0.4529], [0.601, 0.399, 0.9327]], [[0.0853, 0.712, 0.6061], [0.1853, 0.9557, 0.6544], [0.6745, 0.8846, 0.6773]], [[0.9421, 0.0026, 0.4547], [0.1237, 0.0661, 0.1765], [0.3539, 0.1878, 0.4092]]]]])
in1Sub2675 = tf.constant([[[[[0.1287, 0.2918, 0.5008], [0.5196, 0.5834, 0.9537], [0.4567, 0.8938, 0.2884]], [[0.8882, 0.0472, 0.8387], [0.0196, 0.081, 0.0805], [0.5587, 0.2448, 0.2719]], [[0.3284, 0.3439, 0.6292], [0.2497, 0.03, 0.6238], [0.2785, 0.2079, 0.9631]]], [[[0.6949, 0.7257, 0.7351], [0.9886, 0.1308, 0.1912], [0.1703, 0.5699, 0.2389]], [[0.5694, 0.8628, 0.2776], [0.4424, 0.9319, 0.3418], [0.6976, 0.1335, 0.0726]], [[0.5216, 0.4786, 0.3694], [0.7692, 0.8494, 0.4813], [0.7651, 0.9838, 0.7347]]], [[[0.1181, 0.0724, 0.187], [0.6914, 0.0097, 0.2315], [0.351, 0.3704, 0.0281]], [[0.1296, 0.9291, 0.0641], [0.6429, 0.9073, 0.3164], [0.3235, 0.2434, 0.4184]], [[0.8678, 0.0444, 0.7695], [0.3643, 0.5408, 0.7513], [0.5526, 0.7032, 0.6233]]]]])
in0Con7690 = tf.constant([[0.8948, 0.5857, 0.405, 0.204, 0.1145, 0.4004]])
in0Sub9790 = tf.constant([[[0.8363, 0.7405, 0.1629], [0.8117, 0.1944, 0.0619], [0.0743, 0.1092, 0.0372]]])
in1Sub9790 = tf.constant([[[0.9684, 0.2878, 0.6324], [0.6653, 0.3893, 0.6334], [0.4294, 0.6315, 0.4298]]])
in0LST52650 = tf.constant([[[8, 7], [9, 9]]])
in0Con80744 = tf.constant([[0.8405, 0.29, 0.5085, 0.3337, 0.2016, 0.6087]])
in0Con187 = tf.constant([[0.1378, 0.5094, 0.3818, 0.7652, 0.1859, 0.4443, 0.0172, 0.8885, 0.9669, 0.6457, 0.3357, 0.3411, 0.1522, 0.7586, 0.1419, 0.9701, 0.1136, 0.4731, 0.5721, 0.2372, 0.6104, 0.2856, 0.2675, 0.0421, 0.8274, 0.6555, 0.2731]])
print (np.array2string(model.predict([in0Glo66432,in0Sub2675,in1Sub2675,in0Con7690,in0Sub9790,in1Sub9790,in0LST52650,in0Con80744,in0Con187],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min70991.png')

LGlo66432 = global_average_pooling3D_layer([[[[[1.9983, 1.0538]], [[1.9833, 1.0548]]], [[[1.1547, 1.6553]], [[1.2843, 1.5083]]]]], Glo66432), 
LRes96404 = reshape_layer(Glo66432, [2, 1], Res96404), 
LRes18007 = reshape_layer(Res96404, [2, 1, 1], Res18007), 
LRes64152 = reshape_layer(Res18007, [2, 1, 1, 1], Res64152), 
LZer26325 = zero_padding3D_layer(Res64152, 1, 1, 1, 1, 1, 1, Zer26325), 
LRes85228 = reshape_layer(Zer26325, [4, 3, 3], Res85228), 
LRes40123 = reshape_layer(Res85228, [4, 9], Res40123), 
LFla64647 = flatten_layer(Res40123, Fla64647), 
LSub2675 = subtract_layer([[[[[0.7265, 0.4307, 0.3302], [0.0436, 0.1637, 0.8307], [0.3782, 0.402, 0.0932]], [[0.8959, 0.784, 0.3933], [0.3209, 0.0653, 0.0495], [0.2207, 0.3173, 0.991]], [[0.79, 0.6746, 0.1214], [0.6948, 0.8566, 0.2113], [0.3613, 0.9892, 0.5627]]], [[[0.5936, 0.0078, 0.0724], [0.3387, 0.338, 0.5534], [0.6026, 0.1635, 0.6867]], [[0.5403, 0.3589, 0.8112], [0.2021, 0.7482, 0.8047], [0.2853, 0.3683, 0.897]], [[0.4825, 0.817, 0.7765], [0.4209, 0.1909, 0.4522], [0.5687, 0.7234, 0.3199]]], [[[0.5639, 0.8204, 0.3401], [0.555, 0.5917, 0.4529], [0.601, 0.399, 0.9327]], [[0.0853, 0.712, 0.6061], [0.1853, 0.9557, 0.6544], [0.6745, 0.8846, 0.6773]], [[0.9421, 0.0026, 0.4547], [0.1237, 0.0661, 0.1765], [0.3539, 0.1878, 0.4092]]]]], [[[[[0.1287, 0.2918, 0.5008], [0.5196, 0.5834, 0.9537], [0.4567, 0.8938, 0.2884]], [[0.8882, 0.0472, 0.8387], [0.0196, 0.081, 0.0805], [0.5587, 0.2448, 0.2719]], [[0.3284, 0.3439, 0.6292], [0.2497, 0.03, 0.6238], [0.2785, 0.2079, 0.9631]]], [[[0.6949, 0.7257, 0.7351], [0.9886, 0.1308, 0.1912], [0.1703, 0.5699, 0.2389]], [[0.5694, 0.8628, 0.2776], [0.4424, 0.9319, 0.3418], [0.6976, 0.1335, 0.0726]], [[0.5216, 0.4786, 0.3694], [0.7692, 0.8494, 0.4813], [0.7651, 0.9838, 0.7347]]], [[[0.1181, 0.0724, 0.187], [0.6914, 0.0097, 0.2315], [0.351, 0.3704, 0.0281]], [[0.1296, 0.9291, 0.0641], [0.6429, 0.9073, 0.3164], [0.3235, 0.2434, 0.4184]], [[0.8678, 0.0444, 0.7695], [0.3643, 0.5408, 0.7513], [0.5526, 0.7032, 0.6233]]]]], Sub2675), 
LUp_81147 = up_sampling3D_layer(Sub2675, 1, 2, 1, Up_81147), 
LGlo48784 = global_max_pool3D_layer(Up_81147, Glo48784), 
LCon7690 = concatenate_layer([Glo48784,[[0.8948, 0.5857, 0.405, 0.204, 0.1145, 0.4004]]], 1, Con7690), 
LSub9790 = subtract_layer([[[0.8363, 0.7405, 0.1629], [0.8117, 0.1944, 0.0619], [0.0743, 0.1092, 0.0372]]], [[[0.9684, 0.2878, 0.6324], [0.6653, 0.3893, 0.6334], [0.4294, 0.6315, 0.4298]]], Sub9790), 
LFla96017 = flatten_layer(Sub9790, Fla96017), 
LLST52650 = lstm_layer([[[8, 7], [9, 9]]],[[7, 4, 8, 1, 6, 7, 2, 4, 9, 4, 10, 6], [9, 9, 10, 3, 1, 5, 3, 6, 9, 4, 8, 1]],[[1, 2, 5, 8, 10, 1, 1, 7, 6, 10, 3, 9], [3, 1, 7, 7, 5, 4, 10, 9, 4, 10, 3, 10], [1, 6, 6, 6, 8, 3, 8, 4, 6, 10, 8, 2]],[10, 2, 4, 1, 3, 6, 5, 5, 8, 8, 7, 7], LST52650), 
LCon80744 = concatenate_layer([LST52650,[[0.8405, 0.29, 0.5085, 0.3337, 0.2016, 0.6087]]], 1, Con80744), 
LMax29485 = maximum_layer([Fla96017,Con80744], Max29485), 
LMax95287 = maximum_layer([Con7690,Max29485], Max95287), 
LCon187 = concatenate_layer([Max95287,[[0.1378, 0.5094, 0.3818, 0.7652, 0.1859, 0.4443, 0.0172, 0.8885, 0.9669, 0.6457, 0.3357, 0.3411, 0.1522, 0.7586, 0.1419, 0.9701, 0.1136, 0.4731, 0.5721, 0.2372, 0.6104, 0.2856, 0.2675, 0.0421, 0.8274, 0.6555, 0.2731]]], 1, Con187), 
LMin70991 = minimum_layer([Fla64647,Con187], Min70991), 
exec_layers([LGlo66432,LRes96404,LRes18007,LRes64152,LZer26325,LRes85228,LRes40123,LFla64647,LSub2675,LUp_81147,LGlo48784,LCon7690,LSub9790,LFla96017,LLST52650,LCon80744,LMax29485,LMax95287,LCon187,LMin70991],["Glo66432","Res96404","Res18007","Res64152","Zer26325","Res85228","Res40123","Fla64647","Sub2675","Up_81147","Glo48784","Con7690","Sub9790","Fla96017","LST52650","Con80744","Max29485","Max95287","Con187","Min70991"],Min70991,"Min70991")

Actual (Unparsed): [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.1859000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7586000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]]

Expected (Unparsed): [[0,0,0,0,0,0,0,0,0,0,0,0,0,0.1859,0,0,0,0,0,0,0,0,0.7586,0,0,0,0,0,0,0,0,0,0,0,0,0]]

Actual:   [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1859, 0, 0, 0, 0, 0, 0, 0, 0, 0.7586, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

Expected: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1859, 0, 0, 0, 0, 0, 0, 0, 0, 0.7586, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]