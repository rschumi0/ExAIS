import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con34497 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Min18431 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Min18431 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con69092 = tf.keras.layers.Input(shape=([6, 3, 1]))

Con34497 = keras.layers.Conv2DTranspose(2, (1, 1),strides=(3, 1), padding='valid', name = 'Con34497', )(in0Con34497)
Zer13165 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer13165', )(Con34497)
Min18431 = keras.layers.Minimum(name = 'Min18431', )([in0Min18431,in1Min18431])
Zer95447 = keras.layers.ZeroPadding2D(padding=((4, 0), (1, 0)), name = 'Zer95447', )(Min18431)
Con69092 = keras.layers.Concatenate(axis=3, name = 'Con69092', )([Zer95447,in0Con69092])
Max72676 = keras.layers.Maximum(name = 'Max72676', )([Zer13165,Con69092])
Sof91391 = keras.layers.Softmax(axis=1, name = 'Sof91391', )(Max72676)
model = tf.keras.models.Model(inputs=[in0Con34497,in0Min18431,in1Min18431,in0Con69092], outputs=Sof91391)
w = model.get_layer('Con34497').get_weights() 
w[0] = np.array([[[[0.8897, 0.568], [0.9209, 0.2182]]]])
w[1] = np.array([0, 0])
model.get_layer('Con34497').set_weights(w) 
in0Con34497 = tf.constant([[[[0.7193, 0.4109]], [[0.1406, 0.0265]]]])
in0Min18431 = tf.constant([[[[0.5262], [0.1697]], [[0.733], [0.3911]]]])
in1Min18431 = tf.constant([[[[0.3245], [0.2999]], [[0.6693], [0.9489]]]])
in0Con69092 = tf.constant([[[[0.9685], [0.5494], [0.6127]], [[0.7274], [0.5019], [0.9167]], [[0.9528], [0.8431], [0.4184]], [[0.8483], [0.8624], [0.3552]], [[0.7878], [0.2883], [0.4069]], [[0.2486], [0.031], [0.7501]]]])
print (np.array2string(model.predict([in0Con34497,in0Min18431,in1Min18431,in0Con69092],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sof91391.png')

LCon34497 = conv2D_transpose_layer([[[[0.7193, 0.4109]], [[0.1406, 0.0265]]]], 1, 1,[[[[0.8897, 0.568], [0.9209, 0.2182]]]],[0, 0], 3, 1, false, Con34497), 
LZer13165 = zero_padding2D_layer(Con34497, 0, 0, 2, 0, Zer13165), 
LMin18431 = minimum_layer([[[[[0.5262], [0.1697]], [[0.733], [0.3911]]]], [[[[0.3245], [0.2999]], [[0.6693], [0.9489]]]]], Min18431), 
LZer95447 = zero_padding2D_layer(Min18431, 4, 0, 1, 0, Zer95447), 
LCon69092 = concatenate_layer([Zer95447,[[[[0.9685], [0.5494], [0.6127]], [[0.7274], [0.5019], [0.9167]], [[0.9528], [0.8431], [0.4184]], [[0.8483], [0.8624], [0.3552]], [[0.7878], [0.2883], [0.4069]], [[0.2486], [0.031], [0.7501]]]]], 3, Con69092), 
LMax72676 = maximum_layer([Zer13165,Con69092], Max72676), 
LSof91391 = softmax_layer(Max72676, 1, Sof91391), 
exec_layers([LCon34497,LZer13165,LMin18431,LZer95447,LCon69092,LMax72676,LSof91391],["Con34497","Zer13165","Min18431","Zer95447","Con69092","Max72676","Sof91391"],Sof91391,"Sof91391")

Actual (Unparsed): [[[[0.1666667, 0.2008671], [0.1363102, 0.1658873], [0.2917468, 0.1896153]], [[0.1666667, 0.1578340], [0.1363102, 0.1581918], [0.1218187, 0.2235501]], [[0.1666667, 0.1977381], [0.1363102, 0.2225181], [0.1218187, 0.1358207]], [[0.1666667, 0.1781175], [0.1363102, 0.2268544], [0.1401450, 0.1275025]], [[0.1666667, 0.1676609], [0.1885632, 0.1277670], [0.1443490, 0.1342677]], [[0.1666667, 0.0977823], [0.2661961, 0.0987813], [0.1801219, 0.1892437]]]]

Expected (Unparsed): [[[[0.16666666666666666,0.20086712814480165],[0.13631019093172503,0.16588727652222535],[0.29174676594112103,0.18961531735631895]],[[0.16666666666666666,0.15783396648342268],[0.13631019093172503,0.15819184425104213],[0.12181868808632972,0.22355011660864546]],[[0.16666666666666666,0.19773814105333462],[0.13631019093172503,0.22251811201275357],[0.12181868808632972,0.13582069874359956]],[[0.16666666666666666,0.17811753394693117],[0.13631019093172503,0.22685442236767334],[0.14014499932134494,0.12750245563585438]],[[0.16666666666666666,0.16766092485717063],[0.18856317644644577,0.1277670265704672],[0.14434897078262093,0.13426770752278752]],[[0.16666666666666666,0.09778230551433913],[0.2661960598266541,0.09878131827583826],[0.1801218877822537,0.18924370413279407]]]]

Actual:   [[[[0.1667, 0.2009], [0.1364, 0.1659], [0.2918, 0.1897]], [[0.1667, 0.1579], [0.1364, 0.1582], [0.1219, 0.2236]], [[0.1667, 0.1978], [0.1364, 0.2226], [0.1219, 0.1359]], [[0.1667, 0.1782], [0.1364, 0.2269], [0.1402, 0.1276]], [[0.1667, 0.1677], [0.1886, 0.1278], [0.1444, 0.1343]], [[0.1667, 0.0978], [0.2662, 0.0988], [0.1802, 0.1893]]]]

Expected: [[[[0.1667, 0.2009], [0.1364, 0.1659], [0.2918, 0.1897]], [[0.1667, 0.1579], [0.1364, 0.1582], [0.1219, 0.2236]], [[0.1667, 0.1978], [0.1364, 0.2226], [0.1219, 0.1359]], [[0.1667, 0.1782], [0.1364, 0.2269], [0.1402, 0.1276]], [[0.1667, 0.1677], [0.1886, 0.1278], [0.1444, 0.1343]], [[0.1667, 0.0978], [0.2662, 0.0988], [0.1802, 0.1893]]]]