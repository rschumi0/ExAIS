import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Up_4390 = tf.keras.layers.Input(shape=([2, 3, 4]))
in0Den47029 = tf.keras.layers.Input(shape=([2, 4]))
in0GRU46267 = tf.keras.layers.Input(shape=([3, 1]))
in0Con64717 = tf.keras.layers.Input(shape=([3]))
in0Con23310 = tf.keras.layers.Input(shape=([44]))
in0Con66007 = tf.keras.layers.Input(shape=([48, 1, 1, 1]))
in0Max46450 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in1Max46450 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))

Up_4390 = keras.layers.UpSampling2D(size=(1, 2), name = 'Up_4390', )(in0Up_4390)
Res4273 = keras.layers.Reshape((2, 6, 4, 1), name = 'Res4273', )(Up_4390)
PRe34612 = keras.layers.PReLU(name = 'PRe34612', )(Res4273)
Res17153 = keras.layers.Reshape((2, 6, 4), name = 'Res17153', )(PRe34612)
Res74952 = keras.layers.Reshape((2, 24), name = 'Res74952', )(Res17153)
Fla42420 = keras.layers.Flatten(name = 'Fla42420', )(Res74952)
Den47029 = keras.layers.Dense(2,name = 'Den47029', )(in0Den47029)
Fla32294 = keras.layers.Flatten(name = 'Fla32294', )(Den47029)
GRU46267 = keras.layers.GRU(1,reset_after=True, recurrent_activation='sigmoid', name = 'GRU46267', )(in0GRU46267)
Con64717 = keras.layers.Concatenate(axis=1, name = 'Con64717', )([GRU46267,in0Con64717])
Min89948 = keras.layers.Minimum(name = 'Min89948', )([Fla32294,Con64717])
Mas98448 = keras.layers.Masking(mask_value=1, name = 'Mas98448', )(Min89948)
Con23310 = keras.layers.Concatenate(axis=1, name = 'Con23310', )([Mas98448,in0Con23310])
Sub31434 = keras.layers.Subtract(name = 'Sub31434', )([Fla42420,Con23310])
Res87499 = keras.layers.Reshape((48, 1), name = 'Res87499', )(Sub31434)
Res36315 = keras.layers.Reshape((48, 1, 1), name = 'Res36315', )(Res87499)
Res98311 = keras.layers.Reshape((48, 1, 1, 1), name = 'Res98311', )(Res36315)
Con66007 = keras.layers.Concatenate(axis=4, name = 'Con66007', )([Res98311,in0Con66007])
Max46450 = keras.layers.Maximum(name = 'Max46450', )([in0Max46450,in1Max46450])
Zer82629 = keras.layers.ZeroPadding3D(padding=((47, 0), (0, 0), (0, 0)), name = 'Zer82629', )(Max46450)
Max86784 = keras.layers.Maximum(name = 'Max86784', )([Con66007,Zer82629])
model = tf.keras.models.Model(inputs=[in0Up_4390,in0Den47029,in0GRU46267,in0Con64717,in0Con23310,in0Con66007,in0Max46450,in1Max46450], outputs=Max86784)
w = model.get_layer('PRe34612').get_weights() 
w[0] = np.array([[[[0.3222], [0.4872], [0.4854], [0.4617]], [[0.715], [0.7411], [0.9652], [0.4915]], [[0.284], [0.6311], [0.0745], [0.6504]], [[0.0564], [0.834], [0.0555], [0.5396]], [[0.749], [0.9759], [0.3207], [0.5063]], [[0.6523], [0.958], [0.36], [0.5609]]], [[[0.2405], [0.8284], [0.7054], [0.0219]], [[0.6506], [0.4584], [0.1552], [0.1892]], [[0.0457], [0.9366], [0.9634], [0.2694]], [[0.2717], [0.034], [0.2456], [0.981]], [[0.1534], [0.3127], [0.4194], [0.7507]], [[0.2315], [0.4518], [0.1025], [0.1827]]]])
model.get_layer('PRe34612').set_weights(w) 
w = model.get_layer('Den47029').get_weights() 
w[0] = np.array([[0.6839, 0.4287], [0.8194, 0.5882], [0.414, 0.0602], [0.5539, 0.8342]])
w[1] = np.array([0.9755, 0.3138])
model.get_layer('Den47029').set_weights(w) 
w = model.get_layer('GRU46267').get_weights() 
w[0] = np.array([[7, 4, 5]])
w[1] = np.array([[8, 9, 9]])
w[2] = np.array([[5, 6, 4], [3, 1, 3]])
model.get_layer('GRU46267').set_weights(w) 
in0Up_4390 = tf.constant([[[[1.1767, 1.9525, 1.261, 1.3863], [1.7546, 1.1417, 1.0684, 1.8168], [1.417, 1.3765, 1.2841, 1.8462]], [[1.6679, 1.315, 1.5605, 1.3333], [1.3764, 1.4958, 1.9258, 1.415], [1.6756, 1.5244, 1.3155, 1.6156]]]])
in0Den47029 = tf.constant([[[0.3567, 0.7319, 0.6467, 0.8303], [0.2565, 0.4039, 0.3503, 0.266]]])
in0GRU46267 = tf.constant([[[1], [9], [8]]])
in0Con64717 = tf.constant([[0.7598, 0.0904, 0.0469]])
in0Con23310 = tf.constant([[0.9919, 0.6076, 0.5441, 0.0868, 0.9984, 0.581, 0.5682, 0.5129, 0.8857, 0.1854, 0.4625, 0.9143, 0.7174, 0.4478, 0.2817, 0.5097, 0.8344, 0.3462, 0.6856, 0.5828, 0.0967, 0.3611, 0.5311, 0.7998, 0.7034, 0.0645, 0.228, 0.3207, 0.5495, 0.2439, 0.6069, 0.5629, 0.7002, 0.8762, 0.3751, 0.1153, 0.8398, 0.9896, 0.7168, 0.3571, 0.4907, 0.0819, 0.2307, 0.7912]])
in0Con66007 = tf.constant([[[[[0.8539]]], [[[0.1208]]], [[[0.4634]]], [[[0.2137]]], [[[0.3736]]], [[[0.7922]]], [[[0.7342]]], [[[0.9031]]], [[[0.6959]]], [[[0.3854]]], [[[0.165]]], [[[0.7391]]], [[[0.4132]]], [[[0.544]]], [[[0.0124]]], [[[0.0416]]], [[[0.347]]], [[[0.2489]]], [[[0.0512]]], [[[0.6187]]], [[[0.1016]]], [[[0.3013]]], [[[0.0536]]], [[[0.7598]]], [[[0.5521]]], [[[0.133]]], [[[0.8952]]], [[[0.8678]]], [[[0.1126]]], [[[0.8243]]], [[[0.906]]], [[[0.1251]]], [[[0.436]]], [[[0.3041]]], [[[0.5326]]], [[[0.9449]]], [[[0.5339]]], [[[0.584]]], [[[0.8556]]], [[[0.6021]]], [[[0.1723]]], [[[0.533]]], [[[0.0141]]], [[[0.361]]], [[[0.8005]]], [[[0.1412]]], [[[0.1289]]], [[[0.6224]]]]])
in0Max46450 = tf.constant([[[[[0.8494, 0.9334]]]]])
in1Max46450 = tf.constant([[[[[0.7968, 0.8019]]]]])
print (np.array2string(model.predict([in0Up_4390,in0Den47029,in0GRU46267,in0Con64717,in0Con23310,in0Con66007,in0Max46450,in1Max46450],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max86784.png')

LUp_4390 = up_sampling2D_layer([[[[1.1767, 1.9525, 1.261, 1.3863], [1.7546, 1.1417, 1.0684, 1.8168], [1.417, 1.3765, 1.2841, 1.8462]], [[1.6679, 1.315, 1.5605, 1.3333], [1.3764, 1.4958, 1.9258, 1.415], [1.6756, 1.5244, 1.3155, 1.6156]]]], 1, 2, Up_4390), 
LRes4273 = reshape_layer(Up_4390, [2, 6, 4, 1], Res4273), 
LPRe34612 = prelu_layer(Res4273, [[[[0.3222], [0.4872], [0.4854], [0.4617]], [[0.715], [0.7411], [0.9652], [0.4915]], [[0.284], [0.6311], [0.0745], [0.6504]], [[0.0564], [0.834], [0.0555], [0.5396]], [[0.749], [0.9759], [0.3207], [0.5063]], [[0.6523], [0.958], [0.36], [0.5609]]], [[[0.2405], [0.8284], [0.7054], [0.0219]], [[0.6506], [0.4584], [0.1552], [0.1892]], [[0.0457], [0.9366], [0.9634], [0.2694]], [[0.2717], [0.034], [0.2456], [0.981]], [[0.1534], [0.3127], [0.4194], [0.7507]], [[0.2315], [0.4518], [0.1025], [0.1827]]]], PRe34612), 
LRes17153 = reshape_layer(PRe34612, [2, 6, 4], Res17153), 
LRes74952 = reshape_layer(Res17153, [2, 24], Res74952), 
LFla42420 = flatten_layer(Res74952, Fla42420), 
LDen47029 = dense_layer([[[0.3567, 0.7319, 0.6467, 0.8303], [0.2565, 0.4039, 0.3503, 0.266]]], [[0.6839, 0.4287], [0.8194, 0.5882], [0.414, 0.0602], [0.5539, 0.8342]],[0.9755, 0.3138], Den47029), 
LFla32294 = flatten_layer(Den47029, Fla32294), 
LGRU46267 = gru_layer([[[1], [9], [8]]],[[7, 4, 5]],[[8, 9, 9]],[[5, 6, 4], [3, 1, 3]], true, GRU46267), 
LCon64717 = concatenate_layer([GRU46267,[[0.7598, 0.0904, 0.0469]]], 1, Con64717), 
LMin89948 = minimum_layer([Fla32294,Con64717], Min89948), 
LMas98448 = masking_layer(Min89948, 1, Mas98448), 
LCon23310 = concatenate_layer([Mas98448,[[0.9919, 0.6076, 0.5441, 0.0868, 0.9984, 0.581, 0.5682, 0.5129, 0.8857, 0.1854, 0.4625, 0.9143, 0.7174, 0.4478, 0.2817, 0.5097, 0.8344, 0.3462, 0.6856, 0.5828, 0.0967, 0.3611, 0.5311, 0.7998, 0.7034, 0.0645, 0.228, 0.3207, 0.5495, 0.2439, 0.6069, 0.5629, 0.7002, 0.8762, 0.3751, 0.1153, 0.8398, 0.9896, 0.7168, 0.3571, 0.4907, 0.0819, 0.2307, 0.7912]]], 1, Con23310), 
LSub31434 = subtract_layer(Fla42420,Con23310, Sub31434), 
LRes87499 = reshape_layer(Sub31434, [48, 1], Res87499), 
LRes36315 = reshape_layer(Res87499, [48, 1, 1], Res36315), 
LRes98311 = reshape_layer(Res36315, [48, 1, 1, 1], Res98311), 
LCon66007 = concatenate_layer([Res98311,[[[[[0.8539]]], [[[0.1208]]], [[[0.4634]]], [[[0.2137]]], [[[0.3736]]], [[[0.7922]]], [[[0.7342]]], [[[0.9031]]], [[[0.6959]]], [[[0.3854]]], [[[0.165]]], [[[0.7391]]], [[[0.4132]]], [[[0.544]]], [[[0.0124]]], [[[0.0416]]], [[[0.347]]], [[[0.2489]]], [[[0.0512]]], [[[0.6187]]], [[[0.1016]]], [[[0.3013]]], [[[0.0536]]], [[[0.7598]]], [[[0.5521]]], [[[0.133]]], [[[0.8952]]], [[[0.8678]]], [[[0.1126]]], [[[0.8243]]], [[[0.906]]], [[[0.1251]]], [[[0.436]]], [[[0.3041]]], [[[0.5326]]], [[[0.9449]]], [[[0.5339]]], [[[0.584]]], [[[0.8556]]], [[[0.6021]]], [[[0.1723]]], [[[0.533]]], [[[0.0141]]], [[[0.361]]], [[[0.8005]]], [[[0.1412]]], [[[0.1289]]], [[[0.6224]]]]]], 4, Con66007), 
LMax46450 = maximum_layer([[[[[[0.8494, 0.9334]]]]], [[[[[0.7968, 0.8019]]]]]], Max46450), 
LZer82629 = zero_padding3D_layer(Max46450, 47, 0, 0, 0, 0, 0, Zer82629), 
LMax86784 = maximum_layer([Con66007,Zer82629], Max86784), 
exec_layers([LUp_4390,LRes4273,LPRe34612,LRes17153,LRes74952,LFla42420,LDen47029,LFla32294,LGRU46267,LCon64717,LMin89948,LMas98448,LCon23310,LSub31434,LRes87499,LRes36315,LRes98311,LCon66007,LMax46450,LZer82629,LMax86784],["Up_4390","Res4273","PRe34612","Res17153","Res74952","Fla42420","Den47029","Fla32294","GRU46267","Con64717","Min89948","Mas98448","Con23310","Sub31434","Res87499","Res36315","Res98311","Con66007","Max46450","Zer82629","Max86784"],Max86784,"Max86784")

Actual (Unparsed): [[[[[1.1766997, 0.8539000]]], [[[1.1927000, 0.1208000]]], [[[1.1706000, 0.4634000]]], [[[1.3394000, 0.2137000]]], [[[0.1848000, 0.3736000]]], [[[1.3449000, 0.7922000]]], [[[0.7169001, 0.7342000]]], [[[1.2995000, 0.9031000]]], [[[0.7562001, 0.6959000]]], [[[0.5607001, 0.3854000]]], [[[0.5002000, 0.1650000]]], [[[1.3039000, 0.7391000]]], [[[0.8689001, 0.4132000]]], [[[0.9563000, 0.5440000]]], [[[0.6059000, 0.0124000]]], [[[0.9025000, 0.0416000]]], [[[0.6996000, 0.3470000]]], [[[0.9287000, 0.2489000]]], [[[1.0024001, 0.0512000]]], [[[1.3365000, 0.6187000]]], [[[0.5826001, 0.1016000]]], [[[1.0303000, 0.3013000]]], [[[0.5985001, 0.0536000]]], [[[1.2634000, 0.7598000]]], [[[1.5712000, 0.5521000]]], [[[0.9539001, 0.1330000]]], [[[1.0294001, 0.8952000]]], [[[0.5335000, 0.8678000]]], [[[0.9645000, 0.1126000]]], [[[1.2505001, 0.8243000]]], [[[1.3325000, 0.9060000]]], [[[1.0126000, 0.1251000]]], [[[0.8269000, 0.4360000]]], [[[1.2519000, 0.3041000]]], [[[1.3189000, 0.5326000]]], [[[0.8521000, 0.9449000]]], [[[0.6762000, 0.5339000]]], [[[0.6196000, 0.5840000]]], [[[1.5507000, 0.8556000]]], [[[1.2997000, 0.6021000]]], [[[0.8358001, 0.1723000]]], [[[0.5348000, 0.5330000]]], [[[0.5987000, 0.0141000]]], [[[1.2585000, 0.3610000]]], [[[1.1849000, 0.8005000]]], [[[1.4425000, 0.1412000]]], [[[1.0848000, 0.1289000]]], [[[0.8494000, 0.9334000]]]]]

Expected (Unparsed): [[[[[1.1766996940977732,0.8539]]],[[[1.1926999999999999,0.1208]]],[[[1.1705999999999999,0.4634]]],[[[1.3394000000000001,0.2137]]],[[[0.18480000000000008,0.3736]]],[[[1.3449,0.7922]]],[[[0.7168999999999999,0.7342]]],[[[1.2995,0.9031]]],[[[0.7562,0.6959]]],[[[0.5607,0.3854]]],[[[0.5002,0.165]]],[[[1.3039,0.7391]]],[[[0.8688999999999999,0.4132]]],[[[0.9562999999999999,0.544]]],[[[0.6059,0.0124]]],[[[0.9025,0.0416]]],[[[0.6996,0.347]]],[[[0.9287000000000001,0.2489]]],[[[1.0024,0.0512]]],[[[1.3365,0.6187]]],[[[0.5826,0.1016]]],[[[1.0303,0.3013]]],[[[0.5985,0.0536]]],[[[1.2634,0.7598]]],[[[1.5712,0.5521]]],[[[0.9539,0.133]]],[[[1.0293999999999999,0.8952]]],[[[0.5335,0.8678]]],[[[0.9644999999999999,0.1126]]],[[[1.2505,0.8243]]],[[[1.3325,0.906]]],[[[1.0126,0.1251]]],[[[0.8269000000000001,0.436]]],[[[1.2519,0.3041]]],[[[1.3189,0.5326]]],[[[0.8521000000000001,0.9449]]],[[[0.6762,0.5339]]],[[[0.6196,0.584]]],[[[1.5507,0.8556]]],[[[1.2997,0.6021]]],[[[0.8358,0.1723]]],[[[0.5347999999999999,0.533]]],[[[0.5986999999999999,0.0141]]],[[[1.2585,0.361]]],[[[1.1848999999999998,0.8005]]],[[[1.4425,0.1412]]],[[[1.0848,0.1289]]],[[[0.8494,0.9334]]]]]

Actual:   [[[[[1.1767, 0.8539]]], [[[1.1927, 0.1208]]], [[[1.1706, 0.4634]]], [[[1.3394, 0.2137]]], [[[0.1848, 0.3736]]], [[[1.3449, 0.7922]]], [[[0.717, 0.7342]]], [[[1.2995, 0.9031]]], [[[0.7563, 0.6959]]], [[[0.5608, 0.3854]]], [[[0.5002, 0.165]]], [[[1.3039, 0.7391]]], [[[0.869, 0.4132]]], [[[0.9563, 0.544]]], [[[0.6059, 0.0124]]], [[[0.9025, 0.0416]]], [[[0.6996, 0.347]]], [[[0.9287, 0.2489]]], [[[1.0025, 0.0512]]], [[[1.3365, 0.6187]]], [[[0.5827, 0.1016]]], [[[1.0303, 0.3013]]], [[[0.5986, 0.0536]]], [[[1.2634, 0.7598]]], [[[1.5712, 0.5521]]], [[[0.954, 0.133]]], [[[1.0295, 0.8952]]], [[[0.5335, 0.8678]]], [[[0.9645, 0.1126]]], [[[1.2506, 0.8243]]], [[[1.3325, 0.906]]], [[[1.0126, 0.1251]]], [[[0.8269, 0.436]]], [[[1.2519, 0.3041]]], [[[1.3189, 0.5326]]], [[[0.8521, 0.9449]]], [[[0.6762, 0.5339]]], [[[0.6196, 0.584]]], [[[1.5507, 0.8556]]], [[[1.2997, 0.6021]]], [[[0.8359, 0.1723]]], [[[0.5348, 0.533]]], [[[0.5987, 0.0141]]], [[[1.2585, 0.361]]], [[[1.1849, 0.8005]]], [[[1.4425, 0.1412]]], [[[1.0848, 0.1289]]], [[[0.8494, 0.9334]]]]]

Expected: [[[[[1.1767, 0.8539]]], [[[1.1927, 0.1208]]], [[[1.1706, 0.4634]]], [[[1.3395, 0.2137]]], [[[0.1849, 0.3736]]], [[[1.3449, 0.7922]]], [[[0.7169, 0.7342]]], [[[1.2995, 0.9031]]], [[[0.7562, 0.6959]]], [[[0.5607, 0.3854]]], [[[0.5002, 0.165]]], [[[1.3039, 0.7391]]], [[[0.8689, 0.4132]]], [[[0.9563, 0.544]]], [[[0.6059, 0.0124]]], [[[0.9025, 0.0416]]], [[[0.6996, 0.347]]], [[[0.9288, 0.2489]]], [[[1.0024, 0.0512]]], [[[1.3365, 0.6187]]], [[[0.5826, 0.1016]]], [[[1.0303, 0.3013]]], [[[0.5985, 0.0536]]], [[[1.2634, 0.7598]]], [[[1.5712, 0.5521]]], [[[0.9539, 0.133]]], [[[1.0294, 0.8952]]], [[[0.5335, 0.8678]]], [[[0.9645, 0.1126]]], [[[1.2505, 0.8243]]], [[[1.3325, 0.906]]], [[[1.0126, 0.1251]]], [[[0.827, 0.436]]], [[[1.2519, 0.3041]]], [[[1.3189, 0.5326]]], [[[0.8522, 0.9449]]], [[[0.6762, 0.5339]]], [[[0.6196, 0.584]]], [[[1.5507, 0.8556]]], [[[1.2997, 0.6021]]], [[[0.8358, 0.1723]]], [[[0.5348, 0.533]]], [[[0.5987, 0.0141]]], [[[1.2585, 0.361]]], [[[1.1849, 0.8005]]], [[[1.4425, 0.1412]]], [[[1.0848, 0.1289]]], [[[0.8494, 0.9334]]]]]