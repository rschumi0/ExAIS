import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0LST6512 = tf.keras.layers.Input(shape=([3, 3]))
in0Con7332 = tf.keras.layers.Input(shape=([3, 2, 2, 1]))
in0Con98842 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))

LST6512 = keras.layers.LSTM(2,recurrent_activation='sigmoid', name = 'LST6512', )(in0LST6512)
Res570 = keras.layers.Reshape((2, 1), name = 'Res570', )(LST6512)
Res96730 = keras.layers.Reshape((2, 1, 1), name = 'Res96730', )(Res570)
Res49824 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res49824', )(Res96730)
Zer22928 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (1, 0)), name = 'Zer22928', )(Res49824)
Con7332 = keras.layers.Concatenate(axis=4, name = 'Con7332', )([Zer22928,in0Con7332])
Con98842 = keras.layers.Conv3DTranspose(2, (2, 1, 1),strides=(1, 1, 1), padding='valid', name = 'Con98842', )(in0Con98842)
Max56585 = keras.layers.Maximum(name = 'Max56585', )([Con7332,Con98842])
model = tf.keras.models.Model(inputs=[in0LST6512,in0Con7332,in0Con98842], outputs=Max56585)
w = model.get_layer('LST6512').get_weights() 
w[0] = np.array([[3, 7, 3, 9, 9, 10, 10, 1], [10, 1, 3, 4, 10, 6, 7, 3], [4, 3, 6, 6, 1, 1, 2, 2]])
w[1] = np.array([[2, 1, 4, 8, 5, 1, 8, 6], [9, 7, 3, 7, 1, 3, 5, 5]])
w[2] = np.array([4, 8, 2, 3, 6, 3, 1, 8])
model.get_layer('LST6512').set_weights(w) 
w = model.get_layer('Con98842').get_weights() 
w[0] = np.array([[[[[0.5126, 0.0036], [0.1414, 0.4344]]]], [[[[0.6648, 0.9794], [0.8873, 0.4042]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con98842').set_weights(w) 
in0LST6512 = tf.constant([[[6, 1, 7], [1, 7, 4], [3, 1, 9]]])
in0Con7332 = tf.constant([[[[[0.297], [0.7588]], [[0.5643], [0.3227]]], [[[0.9444], [0.4922]], [[0.7813], [0.1982]]], [[[0.8991], [0.5665]], [[0.1615], [0.7888]]]]])
in0Con98842 = tf.constant([[[[[0.8284, 0.304], [0.7936, 0.4989]], [[0.0396, 0.3716], [0.6651, 0.7567]]], [[[0.5643, 0.6519], [0.0351, 0.1054]], [[0.9701, 0.2383], [0.5945, 0.9757]]]]])
print (np.array2string(model.predict([in0LST6512,in0Con7332,in0Con98842],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max56585.png')

LLST6512 = lstm_layer([[[6, 1, 7], [1, 7, 4], [3, 1, 9]]],[[3, 7, 3, 9, 9, 10, 10, 1], [10, 1, 3, 4, 10, 6, 7, 3], [4, 3, 6, 6, 1, 1, 2, 2]],[[2, 1, 4, 8, 5, 1, 8, 6], [9, 7, 3, 7, 1, 3, 5, 5]],[4, 8, 2, 3, 6, 3, 1, 8], LST6512), 
LRes570 = reshape_layer(LST6512, [2, 1], Res570), 
LRes96730 = reshape_layer(Res570, [2, 1, 1], Res96730), 
LRes49824 = reshape_layer(Res96730, [2, 1, 1, 1], Res49824), 
LZer22928 = zero_padding3D_layer(Res49824, 1, 0, 1, 0, 1, 0, Zer22928), 
LCon7332 = concatenate_layer([Zer22928,[[[[[0.297], [0.7588]], [[0.5643], [0.3227]]], [[[0.9444], [0.4922]], [[0.7813], [0.1982]]], [[[0.8991], [0.5665]], [[0.1615], [0.7888]]]]]], 4, Con7332), 
LCon98842 = conv3D_transpose_layer([[[[[0.8284, 0.304], [0.7936, 0.4989]], [[0.0396, 0.3716], [0.6651, 0.7567]]], [[[0.5643, 0.6519], [0.0351, 0.1054]], [[0.9701, 0.2383], [0.5945, 0.9757]]]]], 2, 1, 1,[[[[[0.5126, 0.0036], [0.1414, 0.4344]]]], [[[[0.6648, 0.9794], [0.8873, 0.4042]]]]],[0, 0], 1, 1, 1, false, Con98842), 
LMax56585 = maximum_layer([Con7332,Con98842], Max56585), 
exec_layers([LLST6512,LRes570,LRes96730,LRes49824,LZer22928,LCon7332,LCon98842,LMax56585],["LST6512","Res570","Res96730","Res49824","Zer22928","Con7332","Con98842","Max56585"],Max56585,"Max56585")

Actual (Unparsed): [[[[[0.4257322, 0.2970000], [0.4085954, 0.7588000]], [[0.0216367, 0.5643000], [0.3436544, 0.4227556]]], [[[1.1400649, 1.2208935], [1.0345797, 0.9565656]], [[0.8884023, 0.7813000], [1.4915236, 1.4039077]]], [[[1.0136175, 0.8991000], [0.1265632, 0.5665000]], [[0.8783135, 0.9570906], [1.3508242, 0.9218778]]]]]

Expected (Unparsed): [[[[[0.42573224,0.297],[0.40859539999999994,0.7588]],[[0.021636719999999998,0.5643],[0.34365438,0.42275562]]],[[[1.1400649399999998,1.2208935],[1.0345796399999998,0.9565655599999999]],[[0.8884022599999999,0.7813],[1.49152368,1.4039077500000001]]],[[[1.0136175,0.8991],[0.12656324,0.5665]],[[0.8783135,0.95709059],[1.35082418,0.9218777899999999]]]]]

Actual:   [[[[[0.4258, 0.297], [0.4086, 0.7588]], [[0.0217, 0.5643], [0.3437, 0.4228]]], [[[1.1401, 1.2209], [1.0346, 0.9566]], [[0.8885, 0.7813], [1.4916, 1.404]]], [[[1.0137, 0.8991], [0.1266, 0.5665]], [[0.8784, 0.9571], [1.3509, 0.9219]]]]]

Expected: [[[[[0.4258, 0.297], [0.4086, 0.7588]], [[0.0217, 0.5643], [0.3437, 0.4228]]], [[[1.1401, 1.2209], [1.0346, 0.9566]], [[0.8885, 0.7813], [1.4916, 1.404]]], [[[1.0137, 0.8991], [0.1266, 0.5665]], [[0.8784, 0.9571], [1.3509, 0.9219]]]]]