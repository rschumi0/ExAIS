import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add48981 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Add48981 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con38886 = tf.keras.layers.Input(shape=([45]))
in0Sub72858 = tf.keras.layers.Input(shape=([2, 3, 3, 3]))
in1Sub72858 = tf.keras.layers.Input(shape=([2, 3, 3, 3]))
in0Max69081 = tf.keras.layers.Input(shape=([2, 2]))
in1Max69081 = tf.keras.layers.Input(shape=([2, 2]))
in0Con16305 = tf.keras.layers.Input(shape=([53]))
in0Max91073 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Max91073 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con54695 = tf.keras.layers.Input(shape=([2]))
in0Mas55684 = tf.keras.layers.Input(shape=([4]))
in0Con30238 = tf.keras.layers.Input(shape=([50]))

Add48981 = keras.layers.Add(name = 'Add48981', )([in0Add48981,in1Add48981])
Zer59025 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer59025', )(Add48981)
Res6688 = keras.layers.Reshape((3, 3), name = 'Res6688', )(Zer59025)
Fla40984 = keras.layers.Flatten(name = 'Fla40984', )(Res6688)
Con38886 = keras.layers.Concatenate(axis=1, name = 'Con38886', )([Fla40984,in0Con38886])
Sub72858 = keras.layers.Subtract(name = 'Sub72858', )([in0Sub72858,in1Sub72858])
Res18304 = keras.layers.Reshape((2, 3, 9), name = 'Res18304', )(Sub72858)
Res61436 = keras.layers.Reshape((2, 27), name = 'Res61436', )(Res18304)
Fla64542 = keras.layers.Flatten(name = 'Fla64542', )(Res61436)
Max69081 = keras.layers.Maximum(name = 'Max69081', )([in0Max69081,in1Max69081])
Glo70485 = keras.layers.GlobalMaxPool1D(name = 'Glo70485', )(Max69081)
Res88080 = keras.layers.Reshape((2, 1), name = 'Res88080', )(Glo70485)
Res59964 = keras.layers.Reshape((2, 1, 1), name = 'Res59964', )(Res88080)
Res44938 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res44938', )(Res59964)
Glo18181 = keras.layers.GlobalMaxPool3D(name = 'Glo18181', )(Res44938)
Con16305 = keras.layers.Concatenate(axis=1, name = 'Con16305', )([Glo18181,in0Con16305])
Sub47614 = keras.layers.Subtract(name = 'Sub47614', )([Fla64542,Con16305])
Sub84286 = keras.layers.Subtract(name = 'Sub84286', )([Con38886,Sub47614])
Max91073 = keras.layers.Maximum(name = 'Max91073', )([in0Max91073,in1Max91073])
Res31163 = keras.layers.Reshape((2, 1), name = 'Res31163', )(Max91073)
Fla45338 = keras.layers.Flatten(name = 'Fla45338', )(Res31163)
Con54695 = keras.layers.Concatenate(axis=1, name = 'Con54695', )([Fla45338,in0Con54695])
Mas55684 = keras.layers.Masking(mask_value=1, name = 'Mas55684', )(in0Mas55684)
Max45765 = keras.layers.Maximum(name = 'Max45765', )([Con54695,Mas55684])
Con30238 = keras.layers.Concatenate(axis=1, name = 'Con30238', )([Max45765,in0Con30238])
Mul61279 = keras.layers.Multiply(name = 'Mul61279', )([Sub84286,Con30238])
model = tf.keras.models.Model(inputs=[in0Add48981,in1Add48981,in0Con38886,in0Sub72858,in1Sub72858,in0Max69081,in1Max69081,in0Con16305,in0Max91073,in1Max91073,in0Con54695,in0Mas55684,in0Con30238], outputs=Mul61279)
in0Add48981 = tf.constant([[[[0.5948]]]])
in1Add48981 = tf.constant([[[[0.6703]]]])
in0Con38886 = tf.constant([[0.5103, 0.7276, 0.5537, 0.5218, 0.848, 0.8601, 0.6049, 0.0211, 0.0853, 0.7846, 0.2754, 0.1944, 0.1123, 0.1933, 0.259, 0.2914, 0.0911, 0.4842, 0.7856, 0.5103, 0.6071, 0.1205, 0.6171, 0.3753, 0.7786, 0.5088, 0.5264, 0.6814, 0.2965, 0.9427, 0.7622, 0.0475, 0.8747, 0.9017, 0.5367, 0.5001, 0.3952, 0.2695, 0.8827, 0.9267, 0.1085, 0.8429, 0.3258, 0.683, 0.6107]])
in0Sub72858 = tf.constant([[[[[0.1158, 0.0801, 0.2197], [0.1864, 0.9771, 0.8694], [0.6118, 0.2263, 0.0787]], [[0.0901, 0.4304, 0.5407], [0.9331, 0.9283, 0.9475], [0.9809, 0.818, 0.8902]], [[0.6587, 0.4841, 0.8032], [0.0263, 0.4401, 0.1123], [0.3127, 0.0359, 0.3748]]], [[[0.8178, 0.5879, 0.4544], [0.0796, 0.4542, 0.2019], [0.1681, 0.477, 0.0456]], [[0.4653, 0.7035, 0.4788], [0.4814, 0.1664, 0.0933], [0.9731, 0.6135, 0.5896]], [[0.6331, 0.8406, 0.1983], [0.1706, 0.5148, 0.465], [0.2487, 0.4612, 0.1438]]]]])
in1Sub72858 = tf.constant([[[[[0.3474, 0.1378, 0.3028], [0.9328, 0.9871, 0.2328], [0.235, 0.4984, 0.1487]], [[0.9273, 0.2042, 0.4845], [0.9994, 0.6872, 0.5782], [0.6849, 0.3722, 0.1288]], [[0.3216, 0.7425, 0.5855], [0.2075, 0.9416, 0.4684], [0.8345, 0.3109, 0.4754]]], [[[0.7415, 0.1575, 0.424], [0.3575, 0.0229, 0.3773], [0.5579, 0.4786, 0.7537]], [[0.2174, 0.3247, 0.1279], [0.291, 0.0042, 0.8755], [0.797, 0.5802, 0.976]], [[0.4199, 0.0154, 0.4638], [0.2449, 0.1978, 0.4871], [0.3807, 0.881, 0.0814]]]]])
in0Max69081 = tf.constant([[[0.801, 0.2264], [0.4221, 0.9548]]])
in1Max69081 = tf.constant([[[0.9018, 0.3086], [0.3537, 0.6387]]])
in0Con16305 = tf.constant([[0.8943, 0.901, 0.8405, 0.1946, 0.8058, 0.1961, 0.1898, 0.058, 0.3567, 0.8875, 0.8159, 0.8792, 0.4948, 0.6083, 0.9205, 0.2491, 0.6758, 0.2737, 0.2227, 0.6848, 0.2386, 0.1521, 0.9258, 0.6695, 0.3847, 0.8083, 0.4424, 0.0642, 0.2464, 0.6293, 0.2335, 0.5751, 0.6254, 0.5015, 0.5473, 0.268, 0.9869, 0.2201, 0.6699, 0.0885, 0.2078, 0.3794, 0.5474, 0.9672, 0.3929, 0.8203, 0.2771, 0.3703, 0.7986, 0.1899, 0.022, 0.0871, 0.5319]])
in0Max91073 = tf.constant([[[[0.3216]], [[0.6634]]]])
in1Max91073 = tf.constant([[[[0.7457]], [[0.405]]]])
in0Con54695 = tf.constant([[0.063, 0.9608]])
in0Mas55684 = tf.constant([[1.9007, 1.473, 1.2865, 1.0638]])
in0Con30238 = tf.constant([[0.7033, 0.8829, 0.5366, 0.0376, 0.423, 0.017, 0.9647, 0.8335, 0.1759, 0.8618, 0.8217, 0.7167, 0.1611, 0.5873, 0.9233, 0.2628, 0.5336, 0.6567, 0.4522, 0.4821, 0.6691, 0.6136, 0.3827, 0.8002, 0.133, 0.5626, 0.9103, 0.0542, 0.2559, 0.2195, 0.1443, 0.005, 0.499, 0.5402, 0.8678, 0.8909, 0.857, 0.1018, 0.0003, 0.1046, 0.3904, 0.6089, 0.5078, 0.1608, 0.6055, 0.1198, 0.8969, 0.7398, 0.8074, 0.853]])
print (np.array2string(model.predict([in0Add48981,in1Add48981,in0Con38886,in0Sub72858,in1Sub72858,in0Max69081,in1Max69081,in0Con16305,in0Max91073,in1Max91073,in0Con54695,in0Mas55684,in0Con30238],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul61279.png')

LAdd48981 = add_layer([[[[[0.5948]]]], [[[[0.6703]]]]], Add48981), 
LZer59025 = zero_padding2D_layer(Add48981, 1, 1, 1, 1, Zer59025), 
LRes6688 = reshape_layer(Zer59025, [3, 3], Res6688), 
LFla40984 = flatten_layer(Res6688, Fla40984), 
LCon38886 = concatenate_layer([Fla40984,[[0.5103, 0.7276, 0.5537, 0.5218, 0.848, 0.8601, 0.6049, 0.0211, 0.0853, 0.7846, 0.2754, 0.1944, 0.1123, 0.1933, 0.259, 0.2914, 0.0911, 0.4842, 0.7856, 0.5103, 0.6071, 0.1205, 0.6171, 0.3753, 0.7786, 0.5088, 0.5264, 0.6814, 0.2965, 0.9427, 0.7622, 0.0475, 0.8747, 0.9017, 0.5367, 0.5001, 0.3952, 0.2695, 0.8827, 0.9267, 0.1085, 0.8429, 0.3258, 0.683, 0.6107]]], 1, Con38886), 
LSub72858 = subtract_layer([[[[[0.1158, 0.0801, 0.2197], [0.1864, 0.9771, 0.8694], [0.6118, 0.2263, 0.0787]], [[0.0901, 0.4304, 0.5407], [0.9331, 0.9283, 0.9475], [0.9809, 0.818, 0.8902]], [[0.6587, 0.4841, 0.8032], [0.0263, 0.4401, 0.1123], [0.3127, 0.0359, 0.3748]]], [[[0.8178, 0.5879, 0.4544], [0.0796, 0.4542, 0.2019], [0.1681, 0.477, 0.0456]], [[0.4653, 0.7035, 0.4788], [0.4814, 0.1664, 0.0933], [0.9731, 0.6135, 0.5896]], [[0.6331, 0.8406, 0.1983], [0.1706, 0.5148, 0.465], [0.2487, 0.4612, 0.1438]]]]], [[[[[0.3474, 0.1378, 0.3028], [0.9328, 0.9871, 0.2328], [0.235, 0.4984, 0.1487]], [[0.9273, 0.2042, 0.4845], [0.9994, 0.6872, 0.5782], [0.6849, 0.3722, 0.1288]], [[0.3216, 0.7425, 0.5855], [0.2075, 0.9416, 0.4684], [0.8345, 0.3109, 0.4754]]], [[[0.7415, 0.1575, 0.424], [0.3575, 0.0229, 0.3773], [0.5579, 0.4786, 0.7537]], [[0.2174, 0.3247, 0.1279], [0.291, 0.0042, 0.8755], [0.797, 0.5802, 0.976]], [[0.4199, 0.0154, 0.4638], [0.2449, 0.1978, 0.4871], [0.3807, 0.881, 0.0814]]]]], Sub72858), 
LRes18304 = reshape_layer(Sub72858, [2, 3, 9], Res18304), 
LRes61436 = reshape_layer(Res18304, [2, 27], Res61436), 
LFla64542 = flatten_layer(Res61436, Fla64542), 
LMax69081 = maximum_layer([[[[0.801, 0.2264], [0.4221, 0.9548]]], [[[0.9018, 0.3086], [0.3537, 0.6387]]]], Max69081), 
LGlo70485 = global_max_pool1D_layer(Max69081, Glo70485), 
LRes88080 = reshape_layer(Glo70485, [2, 1], Res88080), 
LRes59964 = reshape_layer(Res88080, [2, 1, 1], Res59964), 
LRes44938 = reshape_layer(Res59964, [2, 1, 1, 1], Res44938), 
LGlo18181 = global_max_pool3D_layer(Res44938, Glo18181), 
LCon16305 = concatenate_layer([Glo18181,[[0.8943, 0.901, 0.8405, 0.1946, 0.8058, 0.1961, 0.1898, 0.058, 0.3567, 0.8875, 0.8159, 0.8792, 0.4948, 0.6083, 0.9205, 0.2491, 0.6758, 0.2737, 0.2227, 0.6848, 0.2386, 0.1521, 0.9258, 0.6695, 0.3847, 0.8083, 0.4424, 0.0642, 0.2464, 0.6293, 0.2335, 0.5751, 0.6254, 0.5015, 0.5473, 0.268, 0.9869, 0.2201, 0.6699, 0.0885, 0.2078, 0.3794, 0.5474, 0.9672, 0.3929, 0.8203, 0.2771, 0.3703, 0.7986, 0.1899, 0.022, 0.0871, 0.5319]]], 1, Con16305), 
LSub47614 = subtract_layer(Fla64542,Con16305, Sub47614), 
LSub84286 = subtract_layer(Con38886,Sub47614, Sub84286), 
LMax91073 = maximum_layer([[[[[0.3216]], [[0.6634]]]], [[[[0.7457]], [[0.405]]]]], Max91073), 
LRes31163 = reshape_layer(Max91073, [2, 1], Res31163), 
LFla45338 = flatten_layer(Res31163, Fla45338), 
LCon54695 = concatenate_layer([Fla45338,[[0.063, 0.9608]]], 1, Con54695), 
LMas55684 = masking_layer([[1.9007, 1.473, 1.2865, 1.0638]], 1, Mas55684), 
LMax45765 = maximum_layer([Con54695,Mas55684], Max45765), 
LCon30238 = concatenate_layer([Max45765,[[0.7033, 0.8829, 0.5366, 0.0376, 0.423, 0.017, 0.9647, 0.8335, 0.1759, 0.8618, 0.8217, 0.7167, 0.1611, 0.5873, 0.9233, 0.2628, 0.5336, 0.6567, 0.4522, 0.4821, 0.6691, 0.6136, 0.3827, 0.8002, 0.133, 0.5626, 0.9103, 0.0542, 0.2559, 0.2195, 0.1443, 0.005, 0.499, 0.5402, 0.8678, 0.8909, 0.857, 0.1018, 0.0003, 0.1046, 0.3904, 0.6089, 0.5078, 0.1608, 0.6055, 0.1198, 0.8969, 0.7398, 0.8074, 0.853]]], 1, Con30238), 
LMul61279 = multiply_layer([Sub84286,Con30238], Mul61279), 
exec_layers([LAdd48981,LZer59025,LRes6688,LFla40984,LCon38886,LSub72858,LRes18304,LRes61436,LFla64542,LMax69081,LGlo70485,LRes88080,LRes59964,LRes44938,LGlo18181,LCon16305,LSub47614,LSub84286,LMax91073,LRes31163,LFla45338,LCon54695,LMas55684,LMax45765,LCon30238,LMul61279],["Add48981","Zer59025","Res6688","Fla40984","Con38886","Sub72858","Res18304","Res61436","Fla64542","Max69081","Glo70485","Res88080","Res59964","Res44938","Glo18181","Con16305","Sub47614","Sub84286","Max91073","Res31163","Fla45338","Con54695","Mas55684","Max45765","Con30238","Mul61279"],Mul61279,"Mul61279")

Actual (Unparsed): [[2.2549905, 1.4022960, 1.2660447, 1.6881442, 1.0336400, 0.1493867, -0.0969636, 0.0173674, 0.0541440, 0.0289714, 1.3398718, 1.0947189, 0.2580981, 0.9494451, 0.9031304, 0.8811110, -0.0282892, -0.0001762, 0.6658840, 0.1988082, 0.3529764, 0.3494301, 0.3829682, 0.7428679, 0.9920745, 0.4606909, 0.5331394, 0.9215904, 0.0191653, 0.4630761, 0.9355153, 0.0227261, 0.2880922, 0.3937391, 0.1460172, 0.0089090, 0.3500485, 0.4886649, 0.7045668, 1.1062305, -0.0224534, 0.1898265, 0.0003315, 0.1099137, 0.7236845, 0.3500566, 0.1343639, 0.2291882, 0.8303221, 0.0706940, 0.9461398, 0.3549560, 0.9607253, 0.9214106]]

Expected (Unparsed): [[2.25499048,1.402296,1.26604465,1.68814422,1.03364001,0.14938668000000002,-0.09696362000000001,0.01736744,0.054144,0.028971400000000005,1.33987183,1.0947189000000002,0.25809806999999996,0.9494450600000001,0.9031304699999999,0.88111098,-0.028289159999999994,-0.00017619000000000505,0.66588396,0.1988082,0.35297639999999997,0.34943007,0.38296818000000005,0.7428678899999999,0.99207457,0.46069087999999997,0.53313937,0.92159034,0.019165299999999993,0.46307605999999996,0.9355153100000001,0.02272606,0.28809222,0.39373909999999995,0.14601717,0.008909,0.3500485,0.48866492,0.7045668199999999,1.1062305300000002,-0.022453399999999988,0.18982646,0.0003315,0.10991368,0.72368448,0.35005661,0.13436388000000002,0.22918824,0.83032215,0.07069398,0.94613981,0.35495604,0.9607252600000001,0.9214106]]

Actual:   [[2.255, 1.4023, 1.2661, 1.6882, 1.0337, 0.1494, -0.0969, 0.0174, 0.0542, 0.029, 1.3399, 1.0948, 0.2581, 0.9495, 0.9032, 0.8812, -0.0282, -0.0001, 0.6659, 0.1989, 0.353, 0.3495, 0.383, 0.7429, 0.9921, 0.4607, 0.5332, 0.9216, 0.0192, 0.4631, 0.9356, 0.0228, 0.2881, 0.3938, 0.1461, 0.009, 0.3501, 0.4887, 0.7046, 1.1063, -0.0224, 0.1899, 0.0004, 0.11, 0.7237, 0.3501, 0.1344, 0.2292, 0.8304, 0.0707, 0.9462, 0.355, 0.9608, 0.9215]]

Expected: [[2.255, 1.4023, 1.2661, 1.6882, 1.0337, 0.1494, -0.0969, 0.0174, 0.0542, 0.029, 1.3399, 1.0948, 0.2581, 0.9495, 0.9032, 0.8812, -0.0282, -0.0001, 0.6659, 0.1989, 0.353, 0.3495, 0.383, 0.7429, 0.9921, 0.4607, 0.5332, 0.9216, 0.0192, 0.4631, 0.9356, 0.0228, 0.2881, 0.3938, 0.1461, 0.009, 0.3501, 0.4887, 0.7046, 1.1063, -0.0224, 0.1899, 0.0004, 0.11, 0.7237, 0.3501, 0.1344, 0.2292, 0.8304, 0.0707, 0.9462, 0.355, 0.9608, 0.9215]]