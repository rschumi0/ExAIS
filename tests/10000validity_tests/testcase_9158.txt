import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub317 = tf.keras.layers.Input(shape=([3, 3, 3, 2]))
in1Sub317 = tf.keras.layers.Input(shape=([3, 3, 3, 2]))
in0Ave14560 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Ave14560 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con61299 = tf.keras.layers.Input(shape=([3, 3, 5]))

Sub317 = keras.layers.Subtract(name = 'Sub317', )([in0Sub317,in1Sub317])
Res65649 = keras.layers.Reshape((3, 3, 6), name = 'Res65649', )(Sub317)
Ave14560 = keras.layers.Average(name = 'Ave14560', )([in0Ave14560,in1Ave14560])
Zer21128 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer21128', )(Ave14560)
Con61299 = keras.layers.Concatenate(axis=3, name = 'Con61299', )([Zer21128,in0Con61299])
Max89228 = keras.layers.Maximum(name = 'Max89228', )([Res65649,Con61299])
Up_13705 = keras.layers.UpSampling2D(size=(1, 1), name = 'Up_13705', )(Max89228)
model = tf.keras.models.Model(inputs=[in0Sub317,in1Sub317,in0Ave14560,in1Ave14560,in0Con61299], outputs=Up_13705)
in0Sub317 = tf.constant([[[[[0.4806, 0.3794], [0.2221, 0.0777], [0.9974, 0.6757]], [[0.44, 0.3269], [0.6575, 0.4274], [0.5179, 0.7457]], [[0.5893, 0.9712], [0.1821, 0.9037], [0.9967, 0.7162]]], [[[0.789, 0.8188], [0.0582, 0.5752], [0.7372, 0.7267]], [[0.0931, 0.8704], [0.7486, 0.7587], [0.8162, 0.8338]], [[0.3583, 0.0891], [0.6672, 0.6473], [0.5047, 0.9564]]], [[[0.3992, 0.08], [0.202, 0.5884], [0.3358, 0.1735]], [[0.893, 0.4692], [0.967, 0.0949], [0.2303, 0.5744]], [[0.8425, 0.2348], [0.7146, 0.1712], [0.0449, 0.8612]]]]])
in1Sub317 = tf.constant([[[[[0.8317, 0.5286], [0.8741, 0.157], [0.0698, 0.4186]], [[0.7613, 0.2672], [0.4782, 0.6001], [0.8448, 0.061]], [[0.2291, 0.5736], [0.0848, 0.6726], [0.9842, 0.7688]]], [[[0.2749, 0.5291], [0.7347, 0.9875], [0.8141, 0.495]], [[0.1839, 0.3592], [0.6437, 0.9655], [0.6705, 0.2891]], [[0.3264, 0.2296], [0.094, 0.8781], [0.8456, 0.188]]], [[[0.2959, 0.0766], [0.3365, 0.559], [0.8769, 0.3976]], [[0.6286, 0.0357], [0.4813, 0.3602], [0.1709, 0.4668]], [[0.1729, 0.9572], [0.643, 0.0267], [0.6394, 0.3539]]]]])
in0Ave14560 = tf.constant([[[[0.3112], [0.5114]], [[0.6153], [0.7066]]]])
in1Ave14560 = tf.constant([[[[0.9801], [0.3524]], [[0.0919], [0.4637]]]])
in0Con61299 = tf.constant([[[[0.8658, 0.7597, 0.5038, 0.6739, 0.8545], [0.9117, 0.512, 0.2104, 0.1359, 0.5033], [0.9071, 0.5625, 0.2334, 0.2249, 0.3013]], [[0.1377, 0.4178, 0.2358, 0.8605, 0.2008], [0.1029, 0.8335, 0.6408, 0.9567, 0.193], [0.3041, 0.1526, 0.9993, 0.8323, 0.1064]], [[0.1829, 0.284, 0.2967, 0.4963, 0.5848], [0.7515, 0.0912, 0.9352, 0.9571, 0.4808], [0.6656, 0.1413, 0.8772, 0.7824, 0.5489]]]])
print (np.array2string(model.predict([in0Sub317,in1Sub317,in0Ave14560,in1Ave14560,in0Con61299],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Up_13705.png')

LSub317 = subtract_layer([[[[[0.4806, 0.3794], [0.2221, 0.0777], [0.9974, 0.6757]], [[0.44, 0.3269], [0.6575, 0.4274], [0.5179, 0.7457]], [[0.5893, 0.9712], [0.1821, 0.9037], [0.9967, 0.7162]]], [[[0.789, 0.8188], [0.0582, 0.5752], [0.7372, 0.7267]], [[0.0931, 0.8704], [0.7486, 0.7587], [0.8162, 0.8338]], [[0.3583, 0.0891], [0.6672, 0.6473], [0.5047, 0.9564]]], [[[0.3992, 0.08], [0.202, 0.5884], [0.3358, 0.1735]], [[0.893, 0.4692], [0.967, 0.0949], [0.2303, 0.5744]], [[0.8425, 0.2348], [0.7146, 0.1712], [0.0449, 0.8612]]]]], [[[[[0.8317, 0.5286], [0.8741, 0.157], [0.0698, 0.4186]], [[0.7613, 0.2672], [0.4782, 0.6001], [0.8448, 0.061]], [[0.2291, 0.5736], [0.0848, 0.6726], [0.9842, 0.7688]]], [[[0.2749, 0.5291], [0.7347, 0.9875], [0.8141, 0.495]], [[0.1839, 0.3592], [0.6437, 0.9655], [0.6705, 0.2891]], [[0.3264, 0.2296], [0.094, 0.8781], [0.8456, 0.188]]], [[[0.2959, 0.0766], [0.3365, 0.559], [0.8769, 0.3976]], [[0.6286, 0.0357], [0.4813, 0.3602], [0.1709, 0.4668]], [[0.1729, 0.9572], [0.643, 0.0267], [0.6394, 0.3539]]]]], Sub317), 
LRes65649 = reshape_layer(Sub317, [3, 3, 6], Res65649), 
LAve14560 = average_layer([[[[[0.3112], [0.5114]], [[0.6153], [0.7066]]]], [[[[0.9801], [0.3524]], [[0.0919], [0.4637]]]]], Ave14560), 
LZer21128 = zero_padding2D_layer(Ave14560, 1, 0, 1, 0, Zer21128), 
LCon61299 = concatenate_layer([Zer21128,[[[[0.8658, 0.7597, 0.5038, 0.6739, 0.8545], [0.9117, 0.512, 0.2104, 0.1359, 0.5033], [0.9071, 0.5625, 0.2334, 0.2249, 0.3013]], [[0.1377, 0.4178, 0.2358, 0.8605, 0.2008], [0.1029, 0.8335, 0.6408, 0.9567, 0.193], [0.3041, 0.1526, 0.9993, 0.8323, 0.1064]], [[0.1829, 0.284, 0.2967, 0.4963, 0.5848], [0.7515, 0.0912, 0.9352, 0.9571, 0.4808], [0.6656, 0.1413, 0.8772, 0.7824, 0.5489]]]]], 3, Con61299), 
LMax89228 = maximum_layer([Res65649,Con61299], Max89228), 
LUp_13705 = up_sampling2D_layer(Max89228, 1, 1, Up_13705), 
exec_layers([LSub317,LRes65649,LAve14560,LZer21128,LCon61299,LMax89228,LUp_13705],["Sub317","Res65649","Ave14560","Zer21128","Con61299","Max89228","Up_13705"],Up_13705,"Up_13705")

Actual (Unparsed): [[[[0.0000000, 0.8658000, 0.7597000, 0.5038000, 0.9276000, 0.8545000], [0.0000000, 0.9117000, 0.5120000, 0.2104000, 0.1359000, 0.6847000], [0.3602000, 0.9071000, 0.5625000, 0.2334000, 0.2249000, 0.3013000]], [[0.5141000, 0.2897000, 0.4178000, 0.2358000, 0.8605000, 0.2317000], [0.6456500, 0.5112000, 0.8335000, 0.6408000, 0.9567000, 0.5447000], [0.4319000, 0.3041000, 0.5732000, 0.9993000, 0.8323000, 0.7684000]], [[0.1033000, 0.1829000, 0.2840000, 0.2967000, 0.4963000, 0.5848000], [0.3536000, 0.7515000, 0.4857000, 0.9352000, 0.9571000, 0.4808000], [0.6696000, 0.6656000, 0.1413000, 0.8772000, 0.7824000, 0.5489000]]]]

Expected (Unparsed): [[[[0,0.8658,0.7597,0.5038,0.9276,0.8545],[0,0.9117,0.512,0.2104,0.1359,0.6847000000000001],[0.3602000000000001,0.9071,0.5625,0.2334,0.2249,0.3013]],[[0.5141,0.28969999999999996,0.4178,0.2358,0.8605,0.23170000000000002],[0.64565,0.5111999999999999,0.8335,0.6408,0.9567,0.5447],[0.43189999999999995,0.3041,0.5732,0.9993,0.8323,0.7684]],[[0.1033,0.1829,0.284,0.2967,0.4963,0.5848],[0.35359999999999997,0.7515,0.48569999999999997,0.9352,0.9571,0.4808],[0.6696,0.6656,0.1413,0.8772,0.7824,0.5489]]]]

Actual:   [[[[0, 0.8658, 0.7597, 0.5038, 0.9276, 0.8545], [0, 0.9117, 0.512, 0.2104, 0.1359, 0.6847], [0.3602, 0.9071, 0.5625, 0.2334, 0.2249, 0.3013]], [[0.5141, 0.2897, 0.4178, 0.2358, 0.8605, 0.2317], [0.6457, 0.5112, 0.8335, 0.6408, 0.9567, 0.5447], [0.4319, 0.3041, 0.5732, 0.9993, 0.8323, 0.7684]], [[0.1033, 0.1829, 0.284, 0.2967, 0.4963, 0.5848], [0.3536, 0.7515, 0.4857, 0.9352, 0.9571, 0.4808], [0.6696, 0.6656, 0.1413, 0.8772, 0.7824, 0.5489]]]]

Expected: [[[[0, 0.8658, 0.7597, 0.5038, 0.9276, 0.8545], [0, 0.9117, 0.512, 0.2104, 0.1359, 0.6848], [0.3603, 0.9071, 0.5625, 0.2334, 0.2249, 0.3013]], [[0.5141, 0.2897, 0.4178, 0.2358, 0.8605, 0.2318], [0.6457, 0.5112, 0.8335, 0.6408, 0.9567, 0.5447], [0.4319, 0.3041, 0.5732, 0.9993, 0.8323, 0.7684]], [[0.1033, 0.1829, 0.284, 0.2967, 0.4963, 0.5848], [0.3536, 0.7515, 0.4857, 0.9352, 0.9571, 0.4808], [0.6696, 0.6656, 0.1413, 0.8772, 0.7824, 0.5489]]]]