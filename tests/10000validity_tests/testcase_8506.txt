import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Fla76223 = tf.keras.layers.Input(shape=([4, 4]))
in0Ave53102 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in1Ave53102 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in0Con16641 = tf.keras.layers.Input(shape=([3, 4, 3, 1]))
in0Sep24128 = tf.keras.layers.Input(shape=([2, 2]))
in0Con54925 = tf.keras.layers.Input(shape=([3, 4, 3, 1]))
in0Up_85299 = tf.keras.layers.Input(shape=([3, 2, 3, 3]))

Fla76223 = keras.layers.Flatten(name = 'Fla76223', )(in0Fla76223)
Res48477 = keras.layers.Reshape((16, 1), name = 'Res48477', )(Fla76223)
Res54158 = keras.layers.Reshape((16, 1, 1), name = 'Res54158', )(Res48477)
Res1150 = keras.layers.Reshape((16, 1, 1, 1), name = 'Res1150', )(Res54158)
Glo64705 = keras.layers.GlobalMaxPool3D(name = 'Glo64705', )(Res1150)
Res9408 = keras.layers.Reshape((1, 1), name = 'Res9408', )(Glo64705)
Res66855 = keras.layers.Reshape((1, 1, 1), name = 'Res66855', )(Res9408)
Res90171 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res90171', )(Res66855)
Zer53286 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (1, 0)), name = 'Zer53286', )(Res90171)
Ave53102 = keras.layers.Average(name = 'Ave53102', )([in0Ave53102,in1Ave53102])
Min97587 = keras.layers.Minimum(name = 'Min97587', )([Zer53286,Ave53102])
Zer51594 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (1, 0)), name = 'Zer51594', )(Min97587)
Con16641 = keras.layers.Concatenate(axis=4, name = 'Con16641', )([Zer51594,in0Con16641])
Sep24128 = keras.layers.SeparableConv1D(2, (1),strides=(2), padding='same', name = 'Sep24128', )(in0Sep24128)
Res31547 = keras.layers.Reshape((1, 2, 1), name = 'Res31547', )(Sep24128)
Res48300 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res48300', )(Res31547)
Zer93033 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (2, 0)), name = 'Zer93033', )(Res48300)
Con54925 = keras.layers.Concatenate(axis=4, name = 'Con54925', )([Zer93033,in0Con54925])
Up_85299 = keras.layers.UpSampling3D(size=(1, 2, 1), name = 'Up_85299', )(in0Up_85299)
Den58342 = keras.layers.Dense(2,name = 'Den58342', )(Up_85299)
Sub2331 = keras.layers.Subtract(name = 'Sub2331', )([Con54925,Den58342])
Max67636 = keras.layers.Maximum(name = 'Max67636', )([Con16641,Sub2331])
model = tf.keras.models.Model(inputs=[in0Fla76223,in0Ave53102,in1Ave53102,in0Con16641,in0Sep24128,in0Con54925,in0Up_85299], outputs=Max67636)
w = model.get_layer('Sep24128').get_weights() 
w[0] = np.array([[[0.7003], [0.337]]])
w[1] = np.array([[[0.8537, 0.8171], [0.6657, 0.9692]]])
w[2] = np.array([0, 0])
model.get_layer('Sep24128').set_weights(w) 
w = model.get_layer('Den58342').get_weights() 
w[0] = np.array([[0.6629, 0.9007], [0.7151, 0.6671], [0.2526, 0.3451]])
w[1] = np.array([0.8315, 0.2883])
model.get_layer('Den58342').set_weights(w) 
in0Fla76223 = tf.constant([[[1.6693, 1.7972, 1.0931, 1.6641], [1.4612, 1.3351, 1.9741, 1.4446], [1.262, 1.1886, 1.5717, 1.8836], [1.6941, 1.9657, 1.615, 1.0623]]])
in0Ave53102 = tf.constant([[[[[0.3694], [0.9912]], [[0.8061], [0.1325]]]]])
in1Ave53102 = tf.constant([[[[[0.3463], [0.3423]], [[0.7704], [0.2873]]]]])
in0Con16641 = tf.constant([[[[[0.8093], [0.1012], [0.149]], [[0.4653], [0.2892], [0.4803]], [[0.8259], [0.3474], [0.3689]], [[0.5523], [0.2527], [0.4377]]], [[[0.3169], [0.2706], [0.9284]], [[0.8329], [0.8069], [0.7488]], [[0.5267], [0.0958], [0.0689]], [[0.7599], [0.4268], [0.7659]]], [[[0.9342], [0.7873], [0.7884]], [[0.8924], [0.7525], [0.5742]], [[0.4881], [0.3154], [0.6218]], [[0.5276], [0.8995], [0.159]]]]])
in0Sep24128 = tf.constant([[[0.1871, 0.9503], [0.6922, 0.844]]])
in0Con54925 = tf.constant([[[[[0.965], [0.6251], [0.0168]], [[0.3771], [0.7252], [0.1716]], [[0.5109], [0.2223], [0.3182]], [[0.6479], [0.4061], [0.8665]]], [[[0.8634], [0.1236], [0.1849]], [[0.7767], [0.079], [0.6686]], [[0.0461], [0.0231], [0.553]], [[0.8102], [0.3187], [0.6969]]], [[[0.1177], [0.1987], [0.9728]], [[0.8686], [0.8703], [0.6436]], [[0.4629], [0.3591], [0.2438]], [[0.9361], [0.5818], [0.5404]]]]])
in0Up_85299 = tf.constant([[[[[1.5721, 1.7584, 1.9666], [1.3107, 1.5932, 1.1684], [1.8243, 1.1267, 1.1794]], [[1.6489, 1.162, 1.4914], [1.5839, 1.4362, 1.7479], [1.3224, 1.5014, 1.7106]]], [[[1.5591, 1.9256, 1.1806], [1.4997, 1.259, 1.3961], [1.8426, 1.8283, 1.7227]], [[1.1226, 1.8265, 1.313], [1.0801, 1.02, 1.1438], [1.4807, 1.9606, 1.2758]]], [[[1.5429, 1.5803, 1.4972], [1.4662, 1.7598, 1.5542], [1.1739, 1.867, 1.3643]], [[1.1342, 1.7875, 1.6696], [1.4946, 1.7379, 1.6331], [1.5923, 1.8229, 1.9543]]]]])
print (np.array2string(model.predict([in0Fla76223,in0Ave53102,in1Ave53102,in0Con16641,in0Sep24128,in0Con54925,in0Up_85299],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max67636.png')

LFla76223 = flatten_layer([[[1.6693, 1.7972, 1.0931, 1.6641], [1.4612, 1.3351, 1.9741, 1.4446], [1.262, 1.1886, 1.5717, 1.8836], [1.6941, 1.9657, 1.615, 1.0623]]], Fla76223), 
LRes48477 = reshape_layer(Fla76223, [16, 1], Res48477), 
LRes54158 = reshape_layer(Res48477, [16, 1, 1], Res54158), 
LRes1150 = reshape_layer(Res54158, [16, 1, 1, 1], Res1150), 
LGlo64705 = global_max_pool3D_layer(Res1150, Glo64705), 
LRes9408 = reshape_layer(Glo64705, [1, 1], Res9408), 
LRes66855 = reshape_layer(Res9408, [1, 1, 1], Res66855), 
LRes90171 = reshape_layer(Res66855, [1, 1, 1, 1], Res90171), 
LZer53286 = zero_padding3D_layer(Res90171, 0, 0, 1, 0, 1, 0, Zer53286), 
LAve53102 = average_layer([[[[[[0.3694], [0.9912]], [[0.8061], [0.1325]]]]], [[[[[0.3463], [0.3423]], [[0.7704], [0.2873]]]]]], Ave53102), 
LMin97587 = minimum_layer([Zer53286,Ave53102], Min97587), 
LZer51594 = zero_padding3D_layer(Min97587, 2, 0, 2, 0, 1, 0, Zer51594), 
LCon16641 = concatenate_layer([Zer51594,[[[[[0.8093], [0.1012], [0.149]], [[0.4653], [0.2892], [0.4803]], [[0.8259], [0.3474], [0.3689]], [[0.5523], [0.2527], [0.4377]]], [[[0.3169], [0.2706], [0.9284]], [[0.8329], [0.8069], [0.7488]], [[0.5267], [0.0958], [0.0689]], [[0.7599], [0.4268], [0.7659]]], [[[0.9342], [0.7873], [0.7884]], [[0.8924], [0.7525], [0.5742]], [[0.4881], [0.3154], [0.6218]], [[0.5276], [0.8995], [0.159]]]]]], 4, Con16641), 
LSep24128 = separable_conv1D_layer([[[0.1871, 0.9503], [0.6922, 0.844]]], 1,[[[[0.7003], [0.337]]],[[[0.8537, 0.8171], [0.6657, 0.9692]]]],[0, 0], 2, true, Sep24128), 
LRes31547 = reshape_layer(Sep24128, [1, 2, 1], Res31547), 
LRes48300 = reshape_layer(Res31547, [1, 2, 1, 1], Res48300), 
LZer93033 = zero_padding3D_layer(Res48300, 2, 0, 2, 0, 2, 0, Zer93033), 
LCon54925 = concatenate_layer([Zer93033,[[[[[0.965], [0.6251], [0.0168]], [[0.3771], [0.7252], [0.1716]], [[0.5109], [0.2223], [0.3182]], [[0.6479], [0.4061], [0.8665]]], [[[0.8634], [0.1236], [0.1849]], [[0.7767], [0.079], [0.6686]], [[0.0461], [0.0231], [0.553]], [[0.8102], [0.3187], [0.6969]]], [[[0.1177], [0.1987], [0.9728]], [[0.8686], [0.8703], [0.6436]], [[0.4629], [0.3591], [0.2438]], [[0.9361], [0.5818], [0.5404]]]]]], 4, Con54925), 
LUp_85299 = up_sampling3D_layer([[[[[1.5721, 1.7584, 1.9666], [1.3107, 1.5932, 1.1684], [1.8243, 1.1267, 1.1794]], [[1.6489, 1.162, 1.4914], [1.5839, 1.4362, 1.7479], [1.3224, 1.5014, 1.7106]]], [[[1.5591, 1.9256, 1.1806], [1.4997, 1.259, 1.3961], [1.8426, 1.8283, 1.7227]], [[1.1226, 1.8265, 1.313], [1.0801, 1.02, 1.1438], [1.4807, 1.9606, 1.2758]]], [[[1.5429, 1.5803, 1.4972], [1.4662, 1.7598, 1.5542], [1.1739, 1.867, 1.3643]], [[1.1342, 1.7875, 1.6696], [1.4946, 1.7379, 1.6331], [1.5923, 1.8229, 1.9543]]]]], 1, 2, 1, Up_85299), 
LDen58342 = dense_layer(Up_85299, [[0.6629, 0.9007], [0.7151, 0.6671], [0.2526, 0.3451]],[0.8315, 0.2883], Den58342), 
LSub2331 = subtract_layer(Con54925,Den58342, Sub2331), 
LMax67636 = maximum_layer([Con16641,Sub2331], Max67636), 
exec_layers([LFla76223,LRes48477,LRes54158,LRes1150,LGlo64705,LRes9408,LRes66855,LRes90171,LZer53286,LAve53102,LMin97587,LZer51594,LCon16641,LSep24128,LRes31547,LRes48300,LZer93033,LCon54925,LUp_85299,LDen58342,LSub2331,LMax67636],["Fla76223","Res48477","Res54158","Res1150","Glo64705","Res9408","Res66855","Res90171","Zer53286","Ave53102","Min97587","Zer51594","Con16641","Sep24128","Res31547","Res48300","Zer93033","Con54925","Up_85299","Den58342","Sub2331","Max67636"],Max67636,"Max67636")

Actual (Unparsed): [[[[[0.0000000, 0.8093000], [0.0000000, 0.1012000], [0.0000000, 0.1490000]], [[0.0000000, 0.4653000], [0.0000000, 0.2892000], [0.0000000, 0.4803000]], [[0.0000000, 0.8259000], [0.0000000, 0.3474000], [0.0000000, 0.3689000]], [[0.0000000, 0.5523000], [0.0000000, 0.2527000], [0.0000000, 0.4377000]]], [[[0.0000000, 0.3169000], [0.0000000, 0.2706000], [0.0000000, 0.9284000]], [[0.0000000, 0.8329000], [0.0000000, 0.8069000], [0.0000000, 0.7488000]], [[0.0000000, 0.5267000], [0.0000000, 0.0958000], [0.0000000, 0.0689000]], [[0.0000000, 0.7599000], [0.0000000, 0.4268000], [0.0000000, 0.7659000]]], [[[0.0000000, 0.9342000], [0.0000000, 0.7873000], [0.0000000, 0.7884000]], [[0.0000000, 0.8924000], [0.0000000, 0.7525000], [0.0000000, 0.5742000]], [[0.0000000, 0.4881000], [0.0000000, 0.3154000], [0.0000000, 0.6218000]], [[0.0000000, 0.5276000], [0.0000000, 0.8995000], [0.2099000, 0.1590000]]]]]

Expected (Unparsed): [[[[[0,0.8093],[0,0.1012],[0,0.149]],[[0,0.4653],[0,0.2892],[0,0.4803]],[[0,0.8259],[0,0.3474],[0,0.3689]],[[0,0.5523],[0,0.2527],[0,0.4377]]],[[[0,0.3169],[0,0.2706],[0,0.9284]],[[0,0.8329],[0,0.8069],[0,0.7488]],[[0,0.5267],[0,0.0958],[0,0.0689]],[[0,0.7599],[0,0.4268],[0,0.7659]]],[[[0,0.9342],[0,0.7873],[0,0.7884]],[[0,0.8924],[0,0.7525],[0,0.5742]],[[0,0.4881],[0,0.3154],[0,0.6218]],[[0,0.5276],[0,0.8995],[0.2099,0.159]]]]]

Actual:   [[[[[0, 0.8093], [0, 0.1012], [0, 0.149]], [[0, 0.4653], [0, 0.2892], [0, 0.4803]], [[0, 0.8259], [0, 0.3474], [0, 0.3689]], [[0, 0.5523], [0, 0.2527], [0, 0.4377]]], [[[0, 0.3169], [0, 0.2706], [0, 0.9284]], [[0, 0.8329], [0, 0.8069], [0, 0.7488]], [[0, 0.5267], [0, 0.0958], [0, 0.0689]], [[0, 0.7599], [0, 0.4268], [0, 0.7659]]], [[[0, 0.9342], [0, 0.7873], [0, 0.7884]], [[0, 0.8924], [0, 0.7525], [0, 0.5742]], [[0, 0.4881], [0, 0.3154], [0, 0.6218]], [[0, 0.5276], [0, 0.8995], [0.2099, 0.159]]]]]

Expected: [[[[[0, 0.8093], [0, 0.1012], [0, 0.149]], [[0, 0.4653], [0, 0.2892], [0, 0.4803]], [[0, 0.8259], [0, 0.3474], [0, 0.3689]], [[0, 0.5523], [0, 0.2527], [0, 0.4377]]], [[[0, 0.3169], [0, 0.2706], [0, 0.9284]], [[0, 0.8329], [0, 0.8069], [0, 0.7488]], [[0, 0.5267], [0, 0.0958], [0, 0.0689]], [[0, 0.7599], [0, 0.4268], [0, 0.7659]]], [[[0, 0.9342], [0, 0.7873], [0, 0.7884]], [[0, 0.8924], [0, 0.7525], [0, 0.5742]], [[0, 0.4881], [0, 0.3154], [0, 0.6218]], [[0, 0.5276], [0, 0.8995], [0.2099, 0.159]]]]]