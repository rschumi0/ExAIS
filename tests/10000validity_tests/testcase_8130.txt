import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave77916 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in1Ave77916 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in0Max29187 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in1Max29187 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))

Ave77916 = keras.layers.Average(name = 'Ave77916', )([in0Ave77916,in1Ave77916])
Fla56352 = keras.layers.Flatten(name = 'Fla56352', )(Ave77916)
Den1757 = keras.layers.Dense(2,name = 'Den1757', )(Fla56352)
Res80387 = keras.layers.Reshape((2, 1), name = 'Res80387', )(Den1757)
Res142 = keras.layers.Reshape((2, 1, 1), name = 'Res142', )(Res80387)
Res39587 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res39587', )(Res142)
Zer30373 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (3, 0)), name = 'Zer30373', )(Res39587)
Max29187 = keras.layers.Maximum(name = 'Max29187', )([in0Max29187,in1Max29187])
Res24255 = keras.layers.Reshape((1, 2, 2), name = 'Res24255', )(Max29187)
Ave58801 = keras.layers.AveragePooling2D(pool_size=(1, 2), strides=(4, 1), padding='same', name = 'Ave58801', )(Res24255)
Res66348 = keras.layers.Reshape((1, 2, 2, 1), name = 'Res66348', )(Ave58801)
Up_29691 = keras.layers.UpSampling3D(size=(2, 1, 2), name = 'Up_29691', )(Res66348)
Max88806 = keras.layers.Maximum(name = 'Max88806', )([Zer30373,Up_29691])
model = tf.keras.models.Model(inputs=[in0Ave77916,in1Ave77916,in0Max29187,in1Max29187], outputs=Max88806)
w = model.get_layer('Den1757').get_weights() 
w[0] = np.array([[0.8169, 0.6542], [0.0122, 0.1922], [0.1628, 0.9248], [0.6211, 0.8766]])
w[1] = np.array([0.3822, 0.2045])
model.get_layer('Den1757').set_weights(w) 
in0Ave77916 = tf.constant([[[[[0.6311], [0.0846]]], [[[0.6813], [0.7624]]]]])
in1Ave77916 = tf.constant([[[[[0.9536], [0.4157]]], [[[0.2098], [0.4336]]]]])
in0Max29187 = tf.constant([[[[[0.5862, 0.8746]], [[0.0285, 0.5335]]]]])
in1Max29187 = tf.constant([[[[[0.343, 0.6801]], [[0.7099, 0.6471]]]]])
print (np.array2string(model.predict([in0Ave77916,in1Ave77916,in0Max29187,in1Max29187],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max88806.png')

LAve77916 = average_layer([[[[[[0.6311], [0.0846]]], [[[0.6813], [0.7624]]]]], [[[[[0.9536], [0.4157]]], [[[0.2098], [0.4336]]]]]], Ave77916), 
LFla56352 = flatten_layer(Ave77916, Fla56352), 
LDen1757 = dense_layer(Fla56352, [[0.8169, 0.6542], [0.0122, 0.1922], [0.1628, 0.9248], [0.6211, 0.8766]],[0.3822, 0.2045], Den1757), 
LRes80387 = reshape_layer(Den1757, [2, 1], Res80387), 
LRes142 = reshape_layer(Res80387, [2, 1, 1], Res142), 
LRes39587 = reshape_layer(Res142, [2, 1, 1, 1], Res39587), 
LZer30373 = zero_padding3D_layer(Res39587, 0, 0, 1, 0, 3, 0, Zer30373), 
LMax29187 = maximum_layer([[[[[[0.5862, 0.8746]], [[0.0285, 0.5335]]]]], [[[[[0.343, 0.6801]], [[0.7099, 0.6471]]]]]], Max29187), 
LRes24255 = reshape_layer(Max29187, [1, 2, 2], Res24255), 
LAve58801 = average_pooling2D_layer(Res24255, 1, 2, 4, 1, true, Ave58801), 
LRes66348 = reshape_layer(Ave58801, [1, 2, 2, 1], Res66348), 
LUp_29691 = up_sampling3D_layer(Res66348, 2, 1, 2, Up_29691), 
LMax88806 = maximum_layer([Zer30373,Up_29691], Max88806), 
exec_layers([LAve77916,LFla56352,LDen1757,LRes80387,LRes142,LRes39587,LZer30373,LMax29187,LRes24255,LAve58801,LRes66348,LUp_29691,LMax88806],["Ave77916","Fla56352","Den1757","Res80387","Res142","Res39587","Zer30373","Max29187","Res24255","Ave58801","Res66348","Up_29691","Max88806"],Max88806,"Max88806")

Actual (Unparsed): [[[[[0.6480500], [0.6480500], [0.7608500], [0.7608500]], [[0.7099000], [0.7099000], [0.6471000], [1.4764759]]], [[[0.6480500], [0.6480500], [0.7608500], [0.7608500]], [[0.7099000], [0.7099000], [0.6471000], [1.7071856]]]]]

Expected (Unparsed): [[[[[0.64805],[0.64805],[0.76085],[0.76085]],[[0.7099],[0.7099],[0.6471],[1.476475885]]],[[[0.64805],[0.64805],[0.76085],[0.76085]],[[0.7099],[0.7099],[0.6471],[1.70718564]]]]]

Actual:   [[[[[0.6481], [0.6481], [0.7609], [0.7609]], [[0.7099], [0.7099], [0.6471], [1.4765]]], [[[0.6481], [0.6481], [0.7609], [0.7609]], [[0.7099], [0.7099], [0.6471], [1.7072]]]]]

Expected: [[[[[0.6481], [0.6481], [0.7609], [0.7609]], [[0.7099], [0.7099], [0.6471], [1.4765]]], [[[0.6481], [0.6481], [0.7609], [0.7609]], [[0.7099], [0.7099], [0.6471], [1.7072]]]]]