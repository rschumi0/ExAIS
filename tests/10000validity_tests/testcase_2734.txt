import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot49230 = tf.keras.layers.Input(shape=([2, 2]))
in1Dot49230 = tf.keras.layers.Input(shape=([2, 2]))
in0Con17820 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))
in0Max10469 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in1Max10469 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in0Con73427 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))
in0Sub88902 = tf.keras.layers.Input(shape=([3, 3, 2, 3]))
in1Sub88902 = tf.keras.layers.Input(shape=([3, 3, 2, 3]))

Dot49230 = keras.layers.Dot(axes=(1, 1), name = 'Dot49230', )([in0Dot49230,in1Dot49230])
Res49253 = keras.layers.Reshape((2, 2, 1), name = 'Res49253', )(Dot49230)
Res74114 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res74114', )(Res49253)
Zer22498 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (1, 0)), name = 'Zer22498', )(Res74114)
Con17820 = keras.layers.Concatenate(axis=4, name = 'Con17820', )([Zer22498,in0Con17820])
Max10469 = keras.layers.Maximum(name = 'Max10469', )([in0Max10469,in1Max10469])
Zer35429 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (0, 0)), name = 'Zer35429', )(Max10469)
Con73427 = keras.layers.Concatenate(axis=4, name = 'Con73427', )([Zer35429,in0Con73427])
Sub88902 = keras.layers.Subtract(name = 'Sub88902', )([in0Sub88902,in1Sub88902])
Add50327 = keras.layers.Add(name = 'Add50327', )([Con73427,Sub88902])
Add24386 = keras.layers.Add(name = 'Add24386', )([Con17820,Add50327])
Con58610 = keras.layers.Conv3DTranspose(2, (1, 3, 2),strides=(1, 1, 2), padding='same', name = 'Con58610', )(Add24386)
model = tf.keras.models.Model(inputs=[in0Dot49230,in1Dot49230,in0Con17820,in0Max10469,in1Max10469,in0Con73427,in0Sub88902,in1Sub88902], outputs=Con58610)
w = model.get_layer('Con58610').get_weights() 
w[0] = np.array([[[[[0.6833, 0.3957, 0.8505], [0.4098, 0.3509, 0.0987]], [[0.1022, 0.5732, 0.1524], [0.3722, 0.358, 0.765]]], [[[0.5462, 0.3281, 0.2829], [0.7994, 0.0146, 0.8954]], [[0.6316, 0.9451, 0.0006], [0.622, 0.7374, 0.5087]]], [[[0.0693, 0.7743, 0.59], [0.4309, 0.7101, 0.7987]], [[0.7034, 0.2943, 0.1444], [0.0712, 0.8063, 0.513]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con58610').set_weights(w) 
in0Dot49230 = tf.constant([[[0.0511, 0.0862], [0.258, 0.2306]]])
in1Dot49230 = tf.constant([[[0.5366, 0.5687], [0.4324, 0.8214]]])
in0Con17820 = tf.constant([[[[[0.0644, 0.3589], [0.998, 0.3465]], [[0.2269, 0.9242], [0.9152, 0.8098]], [[0.9554, 0.1381], [0.5725, 0.6984]]], [[[0.9104, 0.5627], [0.67, 0.0179]], [[0.6776, 0.1359], [0.6435, 0.1985]], [[0.0011, 0.6774], [0.7844, 0.8521]]], [[[0.952, 0.1014], [0.3858, 0.7602]], [[0.1984, 0.3936], [0.7385, 0.7642]], [[0.3043, 0.3976], [0.5821, 0.865]]]]])
in0Max10469 = tf.constant([[[[[0.2701], [0.3009]]]]])
in1Max10469 = tf.constant([[[[[0.1676], [0.9706]]]]])
in0Con73427 = tf.constant([[[[[0.1748, 0.6577], [0.8344, 0.2722]], [[0.3489, 0.92], [0.676, 0.5464]], [[0.3761, 0.8958], [0.5529, 0.9923]]], [[[0.1966, 0.9797], [0.6058, 0.1142]], [[0.3567, 0.7125], [0.9026, 0.9439]], [[0.5577, 0.367], [0.3802, 0.3058]]], [[[0.3345, 0.3985], [0.3965, 0.7381]], [[0.7693, 0.8403], [0.6865, 0.5568]], [[0.9883, 0.9222], [0.6213, 0.6377]]]]])
in0Sub88902 = tf.constant([[[[[0.994, 0.3902, 0.6913], [0.8737, 0.6841, 0.637]], [[0.8133, 0.6275, 0.4421], [0.9456, 0.5161, 0.619]], [[0.4337, 0.9692, 0.4145], [0.8945, 0.564, 0.2463]]], [[[0.2613, 0.722, 0.6524], [0.661, 0.5698, 0.0889]], [[0.8394, 0.7928, 0.7248], [0.0596, 0.8389, 0.6048]], [[0.6658, 0.7616, 0.4369], [0.9698, 0.3347, 0.2621]]], [[[0.3275, 0.7268, 0.6056], [0.7532, 0.9779, 0.3223]], [[0.3388, 0.273, 0.7181], [0.6012, 0.5337, 0.6529]], [[0.6614, 0.981, 0.2969], [0.5091, 0.3805, 0.0683]]]]])
in1Sub88902 = tf.constant([[[[[0.4836, 0.8675, 0.4874], [0.759, 0.4269, 0.4527]], [[0.3942, 0.0002, 0.1227], [0.7576, 0.5682, 0.6861]], [[0.6058, 0.7589, 0.5398], [0.6103, 0.0218, 0.5487]]], [[[0.7646, 0.0034, 0.0758], [0.2086, 0.2029, 0.9488]], [[0.1233, 0.9724, 0.1357], [0.8849, 0.1565, 0.0909]], [[0.305, 0.4816, 0.3352], [0.8469, 0.9421, 0.4078]]], [[[0.5143, 0.8454, 0.6241], [0.894, 0.4258, 0.0524]], [[0.1875, 0.5402, 0.7894], [0.0471, 0.1186, 0.5168]], [[0.6457, 0.6086, 0.9403], [0.1652, 0.6315, 0.0666]]]]])
print (np.array2string(model.predict([in0Dot49230,in1Dot49230,in0Con17820,in0Max10469,in1Max10469,in0Con73427,in0Sub88902,in1Sub88902],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con58610.png')

LDot49230 = dot_layer([[[0.0511, 0.0862], [0.258, 0.2306]]], [[[0.5366, 0.5687], [0.4324, 0.8214]]], 1, 1, Dot49230), 
LRes49253 = reshape_layer(Dot49230, [2, 2, 1], Res49253), 
LRes74114 = reshape_layer(Res49253, [2, 2, 1, 1], Res74114), 
LZer22498 = zero_padding3D_layer(Res74114, 1, 0, 1, 0, 1, 0, Zer22498), 
LCon17820 = concatenate_layer([Zer22498,[[[[[0.0644, 0.3589], [0.998, 0.3465]], [[0.2269, 0.9242], [0.9152, 0.8098]], [[0.9554, 0.1381], [0.5725, 0.6984]]], [[[0.9104, 0.5627], [0.67, 0.0179]], [[0.6776, 0.1359], [0.6435, 0.1985]], [[0.0011, 0.6774], [0.7844, 0.8521]]], [[[0.952, 0.1014], [0.3858, 0.7602]], [[0.1984, 0.3936], [0.7385, 0.7642]], [[0.3043, 0.3976], [0.5821, 0.865]]]]]], 4, Con17820), 
LMax10469 = maximum_layer([[[[[[0.2701], [0.3009]]]]], [[[[[0.1676], [0.9706]]]]]], Max10469), 
LZer35429 = zero_padding3D_layer(Max10469, 2, 0, 2, 0, 0, 0, Zer35429), 
LCon73427 = concatenate_layer([Zer35429,[[[[[0.1748, 0.6577], [0.8344, 0.2722]], [[0.3489, 0.92], [0.676, 0.5464]], [[0.3761, 0.8958], [0.5529, 0.9923]]], [[[0.1966, 0.9797], [0.6058, 0.1142]], [[0.3567, 0.7125], [0.9026, 0.9439]], [[0.5577, 0.367], [0.3802, 0.3058]]], [[[0.3345, 0.3985], [0.3965, 0.7381]], [[0.7693, 0.8403], [0.6865, 0.5568]], [[0.9883, 0.9222], [0.6213, 0.6377]]]]]], 4, Con73427), 
LSub88902 = subtract_layer([[[[[0.994, 0.3902, 0.6913], [0.8737, 0.6841, 0.637]], [[0.8133, 0.6275, 0.4421], [0.9456, 0.5161, 0.619]], [[0.4337, 0.9692, 0.4145], [0.8945, 0.564, 0.2463]]], [[[0.2613, 0.722, 0.6524], [0.661, 0.5698, 0.0889]], [[0.8394, 0.7928, 0.7248], [0.0596, 0.8389, 0.6048]], [[0.6658, 0.7616, 0.4369], [0.9698, 0.3347, 0.2621]]], [[[0.3275, 0.7268, 0.6056], [0.7532, 0.9779, 0.3223]], [[0.3388, 0.273, 0.7181], [0.6012, 0.5337, 0.6529]], [[0.6614, 0.981, 0.2969], [0.5091, 0.3805, 0.0683]]]]], [[[[[0.4836, 0.8675, 0.4874], [0.759, 0.4269, 0.4527]], [[0.3942, 0.0002, 0.1227], [0.7576, 0.5682, 0.6861]], [[0.6058, 0.7589, 0.5398], [0.6103, 0.0218, 0.5487]]], [[[0.7646, 0.0034, 0.0758], [0.2086, 0.2029, 0.9488]], [[0.1233, 0.9724, 0.1357], [0.8849, 0.1565, 0.0909]], [[0.305, 0.4816, 0.3352], [0.8469, 0.9421, 0.4078]]], [[[0.5143, 0.8454, 0.6241], [0.894, 0.4258, 0.0524]], [[0.1875, 0.5402, 0.7894], [0.0471, 0.1186, 0.5168]], [[0.6457, 0.6086, 0.9403], [0.1652, 0.6315, 0.0666]]]]], Sub88902), 
LAdd50327 = add_layer([Con73427,Sub88902], Add50327), 
LAdd24386 = add_layer([Con17820,Add50327], Add24386), 
LCon58610 = conv3D_transpose_layer(Add24386, 1, 3, 2,[[[[[0.6833, 0.3957, 0.8505], [0.4098, 0.3509, 0.0987]], [[0.1022, 0.5732, 0.1524], [0.3722, 0.358, 0.765]]], [[[0.5462, 0.3281, 0.2829], [0.7994, 0.0146, 0.8954]], [[0.6316, 0.9451, 0.0006], [0.622, 0.7374, 0.5087]]], [[[0.0693, 0.7743, 0.59], [0.4309, 0.7101, 0.7987]], [[0.7034, 0.2943, 0.1444], [0.0712, 0.8063, 0.513]]]]],[0, 0], 1, 1, 2, true, Con58610), 
exec_layers([LDot49230,LRes49253,LRes74114,LZer22498,LCon17820,LMax10469,LZer35429,LCon73427,LSub88902,LAdd50327,LAdd24386,LCon58610],["Dot49230","Res49253","Res74114","Zer22498","Con17820","Max10469","Zer35429","Con73427","Sub88902","Add50327","Add24386","Con58610"],Con58610,"Con58610")

Actual (Unparsed): [[[[[3.1485188, 2.3048355], [1.1602542, 3.0046150], [2.8092775, 1.5855523], [3.1456918, 3.6278335]], [[3.0720955, 3.8757210], [2.8728761, 3.9019342], [5.1068591, 4.3402748], [3.5822106, 5.7774132]], [[2.9060345, 3.4614728], [2.3102931, 3.6019082], [3.0604422, 3.6981486], [2.5277248, 4.0283591]]], [[[2.9736517, 2.2569216], [2.1909361, 3.7832827], [2.4017139, 0.3981632], [3.2974693, 2.9319119]], [[5.2603288, 5.1993091], [2.4425043, 5.6414662], [3.0287623, 2.1916134], [2.8810746, 4.1515702]], [[2.3560559, 3.3905091], [1.9841368, 2.9035382], [3.3231034, 3.8149552], [1.1693042, 3.7497753]]], [[[1.7867084, 0.7213258], [1.5802580, 2.1863900], [3.3068819, 2.5665670], [2.5216272, 3.8298943]], [[3.2461654, 3.0736265], [2.1268034, 3.5972986], [6.1825117, 5.3094088], [3.6650143, 6.5763744]], [[2.1325603, 2.3496150], [2.2349697, 2.9216229], [3.9192843, 5.3744619], [3.1262240, 4.7145243]]]]]

Expected (Unparsed): [[[[[3.1485188200000005,2.30483549],[1.1602542100000002,3.00461503],[2.80927742,1.5855522999999998],[3.1456918400000005,3.62783344]],[[3.0720954899999997,3.875721],[2.87287604,3.90193419],[5.10685902,4.3402747],[3.5822106099999997,5.777413170000001]],[[2.90603446,3.4614728],[2.31029309,3.6019081900000005],[3.0604422,3.698148539999999],[2.5277248300000004,4.0283590799999995]]],[[[2.9736516699999997,2.2569216],[2.1909361400000003,3.7832826600000002],[2.401713905018,0.39816316270799984],[3.2974692908120002,2.931911915012]],[[5.260328880000001,5.19930918],[2.4425042500000003,5.64146621],[3.0287623244929995,2.1916134196699995],[2.8810745638300004,4.151570218914]],[[2.35605587,3.3905091499999997],[1.9841367700000003,2.9035382199999997],[3.3231034593519997,3.8149552262519992],[1.169304168096,3.749775308492]]],[[[1.7867083300000002,0.7213257900000001],[1.58025795,2.1863899],[3.306881923788,2.566567054328],[2.521627221992,3.829894299192]],[[3.24616522,3.07362643],[2.12680332,3.5972984900000005],[6.182511707605999,5.309408840628],[3.6650143418919994,6.576374415436001]],[[2.13256026,2.3496149199999996],[2.23496963,2.92162279],[3.9192842979840004,5.374461836456],[3.126224097872,4.714524371992001]]]]]

Actual:   [[[[[3.1486, 2.3049], [1.1603, 3.0047], [2.8093, 1.5856], [3.1457, 3.6279]], [[3.0721, 3.8758], [2.8729, 3.902], [5.1069, 4.3403], [3.5823, 5.7775]], [[2.9061, 3.4615], [2.3103, 3.602], [3.0605, 3.6982], [2.5278, 4.0284]]], [[[2.9737, 2.257], [2.191, 3.7833], [2.4018, 0.3982], [3.2975, 2.932]], [[5.2604, 5.1994], [2.4426, 5.6415], [3.0288, 2.1917], [2.8811, 4.1516]], [[2.3561, 3.3906], [1.9842, 2.9036], [3.3232, 3.815], [1.1694, 3.7498]]], [[[1.7868, 0.7214], [1.5803, 2.1864], [3.3069, 2.5666], [2.5217, 3.8299]], [[3.2462, 3.0737], [2.1269, 3.5973], [6.1826, 5.3095], [3.6651, 6.5764]], [[2.1326, 2.3497], [2.235, 2.9217], [3.9193, 5.3745], [3.1263, 4.7146]]]]]

Expected: [[[[[3.1486, 2.3049], [1.1603, 3.0047], [2.8093, 1.5856], [3.1457, 3.6279]], [[3.0721, 3.8758], [2.8729, 3.902], [5.1069, 4.3403], [3.5823, 5.7775]], [[2.9061, 3.4615], [2.3103, 3.602], [3.0605, 3.6982], [2.5278, 4.0284]]], [[[2.9737, 2.257], [2.191, 3.7833], [2.4018, 0.3982], [3.2975, 2.932]], [[5.2604, 5.1994], [2.4426, 5.6415], [3.0288, 2.1917], [2.8811, 4.1516]], [[2.3561, 3.3906], [1.9842, 2.9036], [3.3232, 3.815], [1.1694, 3.7498]]], [[[1.7868, 0.7214], [1.5803, 2.1864], [3.3069, 2.5666], [2.5217, 3.8299]], [[3.2462, 3.0737], [2.1269, 3.5973], [6.1826, 5.3095], [3.6651, 6.5764]], [[2.1326, 2.3497], [2.235, 2.9217], [3.9193, 5.3745], [3.1263, 4.7146]]]]]