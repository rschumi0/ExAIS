import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dep95330 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con99190 = tf.keras.layers.Input(shape=([16, 1]))
in0Fla76764 = tf.keras.layers.Input(shape=([2, 4]))
in0Con99627 = tf.keras.layers.Input(shape=([16, 1]))
in0Cro16539 = tf.keras.layers.Input(shape=([4, 4]))
in0Con76680 = tf.keras.layers.Input(shape=([2, 2]))
in0Thr32070 = tf.keras.layers.Input(shape=([2, 1, 2]))

Dep95330 = keras.layers.DepthwiseConv2D((1, 1),strides=(1, 1), padding='valid', name = 'Dep95330', )(in0Dep95330)
Up_57082 = keras.layers.UpSampling2D(size=(2, 1), name = 'Up_57082', )(Dep95330)
Res61724 = keras.layers.Reshape((4, 1), name = 'Res61724', )(Up_57082)
Zer32166 = keras.layers.ZeroPadding1D(padding=((12, 0)), name = 'Zer32166', )(Res61724)
Con99190 = keras.layers.Concatenate(axis=2, name = 'Con99190', )([Zer32166,in0Con99190])
Fla76764 = keras.layers.Flatten(name = 'Fla76764', )(in0Fla76764)
Res94975 = keras.layers.Reshape((8, 1), name = 'Res94975', )(Fla76764)
Up_77386 = keras.layers.UpSampling1D(size=(2), name = 'Up_77386', )(Res94975)
Con99627 = keras.layers.Concatenate(axis=2, name = 'Con99627', )([Up_77386,in0Con99627])
Cro16539 = keras.layers.Cropping1D(cropping=((2, 0)), name = 'Cro16539', )(in0Cro16539)
Con76680 = keras.layers.Concatenate(axis=2, name = 'Con76680', )([Cro16539,in0Con76680])
Thr32070 = keras.layers.ThresholdedReLU(theta=3.957339206441243, name = 'Thr32070', input_shape=(2, 1, 2))(in0Thr32070)
Res96660 = keras.layers.Reshape((2, 2), name = 'Res96660', )(Thr32070)
Dot16254 = keras.layers.Dot(axes=(1, 1), name = 'Dot16254', )([Con76680,Res96660])
Zer93594 = keras.layers.ZeroPadding1D(padding=((10, 0)), name = 'Zer93594', )(Dot16254)
Ave55338 = keras.layers.Average(name = 'Ave55338', )([Con99627,Zer93594])
Min4760 = keras.layers.Minimum(name = 'Min4760', )([Con99190,Ave55338])
model = tf.keras.models.Model(inputs=[in0Dep95330,in0Con99190,in0Fla76764,in0Con99627,in0Cro16539,in0Con76680,in0Thr32070], outputs=Min4760)
w = model.get_layer('Dep95330').get_weights() 
w[0] = np.array([[[[0.2652]]]])
w[1] = np.array([0])
model.get_layer('Dep95330').set_weights(w) 
in0Dep95330 = tf.constant([[[[0.6115]], [[0.559]]]])
in0Con99190 = tf.constant([[[0.6954], [0.257], [0.3903], [0.2232], [0.2297], [0.6928], [0.8494], [0.578], [0.5758], [0.9946], [0.9356], [0.705], [0.1659], [0.2527], [0.1035], [0.5765]]])
in0Fla76764 = tf.constant([[[1.9369, 1.0336, 1.1402, 1.0599], [1.7234, 1.3926, 1.2226, 1.3684]]])
in0Con99627 = tf.constant([[[0.9712], [0.0881], [0.9011], [0.5414], [0.9449], [0.5845], [0.2391], [0.6686], [0.0622], [0.0608], [0.5693], [0.1623], [0.2883], [0.6588], [0.8821], [0.3964]]])
in0Cro16539 = tf.constant([[[1.3289, 1.9516, 1.3035, 1.531], [1.9935, 1.0344, 1.0347, 1.4479], [1.9341, 1.3099, 1.879, 1.5537], [1.5867, 1.723, 1.9261, 1.099]]])
in0Con76680 = tf.constant([[[0.5585, 0.979], [0.9441, 0.4892]]])
in0Thr32070 = tf.constant([[[[0.581, 0.3361]], [[0.7225, 0.4744]]]])
print (np.array2string(model.predict([in0Dep95330,in0Con99190,in0Fla76764,in0Con99627,in0Cro16539,in0Con76680,in0Thr32070],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min4760.png')

LDep95330 = depthwise_conv2D_layer([[[[0.6115]], [[0.559]]]], 1, 1,[[[[0.2652]]]],[0], 1, 1, false, Dep95330), 
LUp_57082 = up_sampling2D_layer(Dep95330, 2, 1, Up_57082), 
LRes61724 = reshape_layer(Up_57082, [4, 1], Res61724), 
LZer32166 = zero_padding1D_layer(Res61724, 12, 0, Zer32166), 
LCon99190 = concatenate_layer([Zer32166,[[[0.6954], [0.257], [0.3903], [0.2232], [0.2297], [0.6928], [0.8494], [0.578], [0.5758], [0.9946], [0.9356], [0.705], [0.1659], [0.2527], [0.1035], [0.5765]]]], 2, Con99190), 
LFla76764 = flatten_layer([[[1.9369, 1.0336, 1.1402, 1.0599], [1.7234, 1.3926, 1.2226, 1.3684]]], Fla76764), 
LRes94975 = reshape_layer(Fla76764, [8, 1], Res94975), 
LUp_77386 = up_sampling1D_layer(Res94975, 2, Up_77386), 
LCon99627 = concatenate_layer([Up_77386,[[[0.9712], [0.0881], [0.9011], [0.5414], [0.9449], [0.5845], [0.2391], [0.6686], [0.0622], [0.0608], [0.5693], [0.1623], [0.2883], [0.6588], [0.8821], [0.3964]]]], 2, Con99627), 
LCro16539 = cropping1D_layer([[[1.3289, 1.9516, 1.3035, 1.531], [1.9935, 1.0344, 1.0347, 1.4479], [1.9341, 1.3099, 1.879, 1.5537], [1.5867, 1.723, 1.9261, 1.099]]], 2, 0, Cro16539), 
LCon76680 = concatenate_layer([Cro16539,[[[0.5585, 0.979], [0.9441, 0.4892]]]], 2, Con76680), 
LThr32070 = thresholded_relu_layer([[[[0.581, 0.3361]], [[0.7225, 0.4744]]]], 3.957339206441243, Thr32070), 
LRes96660 = reshape_layer(Thr32070, [2, 2], Res96660), 
LDot16254 = dot_layer(Con76680,Res96660, 1, 1, Dot16254), 
LZer93594 = zero_padding1D_layer(Dot16254, 10, 0, Zer93594), 
LAve55338 = average_layer([Con99627,Zer93594], Ave55338), 
LMin4760 = minimum_layer([Con99190,Ave55338], Min4760), 
exec_layers([LDep95330,LUp_57082,LRes61724,LZer32166,LCon99190,LFla76764,LRes94975,LUp_77386,LCon99627,LCro16539,LCon76680,LThr32070,LRes96660,LDot16254,LZer93594,LAve55338,LMin4760],["Dep95330","Up_57082","Res61724","Zer32166","Con99190","Fla76764","Res94975","Up_77386","Con99627","Cro16539","Con76680","Thr32070","Res96660","Dot16254","Zer93594","Ave55338","Min4760"],Min4760,"Min4760")

Actual (Unparsed): [[[0.0000000, 0.4856000], [0.0000000, 0.0440500], [0.0000000, 0.3903000], [0.0000000, 0.2232000], [0.0000000, 0.2297000], [0.0000000, 0.2922500], [0.0000000, 0.1195500], [0.0000000, 0.3343000], [0.0000000, 0.0311000], [0.0000000, 0.0304000], [0.0000000, 0.2846500], [0.0000000, 0.0811500], [0.1621698, 0.1441500], [0.1621698, 0.2527000], [0.1482468, 0.1035000], [0.1482468, 0.1982000]]]

Expected (Unparsed): [[[0,0.4856],[0,0.04405],[0,0.3903],[0,0.2232],[0,0.2297],[0,0.29225],[0,0.11955],[0,0.3343],[0,0.0311],[0,0.0304],[0,0.28465],[0,0.08115],[0.1621698,0.14415],[0.1621698,0.2527],[0.1482468,0.1035],[0.1482468,0.1982]]]

Actual:   [[[0, 0.4856], [0, 0.0441], [0, 0.3903], [0, 0.2232], [0, 0.2297], [0, 0.2923], [0, 0.1196], [0, 0.3343], [0, 0.0311], [0, 0.0304], [0, 0.2847], [0, 0.0812], [0.1622, 0.1442], [0.1622, 0.2527], [0.1483, 0.1035], [0.1483, 0.1982]]]

Expected: [[[0, 0.4856], [0, 0.0441], [0, 0.3903], [0, 0.2232], [0, 0.2297], [0, 0.2923], [0, 0.1196], [0, 0.3343], [0, 0.0311], [0, 0.0304], [0, 0.2847], [0, 0.0812], [0.1622, 0.1442], [0.1622, 0.2527], [0.1483, 0.1035], [0.1483, 0.1982]]]