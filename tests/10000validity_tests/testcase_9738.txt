import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub96707 = tf.keras.layers.Input(shape=([2, 3, 3]))
in1Sub96707 = tf.keras.layers.Input(shape=([2, 3, 3]))
in0Con79940 = tf.keras.layers.Input(shape=([2, 3, 5, 1]))
in0Zer55528 = tf.keras.layers.Input(shape=([2, 4, 4]))
in0GRU20474 = tf.keras.layers.Input(shape=([1, 3]))
in0Con51497 = tf.keras.layers.Input(shape=([58]))

Sub96707 = keras.layers.Subtract(name = 'Sub96707', )([in0Sub96707,in1Sub96707])
Res96223 = keras.layers.Reshape((2, 3, 3, 1), name = 'Res96223', )(Sub96707)
Zer5325 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer5325', )(Res96223)
Con79940 = keras.layers.Concatenate(axis=4, name = 'Con79940', )([Zer5325,in0Con79940])
Zer55528 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer55528', )(in0Zer55528)
Res78948 = keras.layers.Reshape((4, 6, 4, 1), name = 'Res78948', )(Zer55528)
Con99292 = keras.layers.Conv3D(2, (4, 2, 2),strides=(2, 6, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con99292', )(Res78948)
Zer47373 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (1, 0)), name = 'Zer47373', )(Con99292)
Ave67538 = keras.layers.Average(name = 'Ave67538', )([Con79940,Zer47373])
Res23821 = keras.layers.Reshape((2, 3, 10), name = 'Res23821', )(Ave67538)
Res95081 = keras.layers.Reshape((2, 30), name = 'Res95081', )(Res23821)
Fla92462 = keras.layers.Flatten(name = 'Fla92462', )(Res95081)
GRU20474 = keras.layers.GRU(2,reset_after=True, recurrent_activation='sigmoid', name = 'GRU20474', )(in0GRU20474)
Con51497 = keras.layers.Concatenate(axis=1, name = 'Con51497', )([GRU20474,in0Con51497])
Min64104 = keras.layers.Minimum(name = 'Min64104', )([Fla92462,Con51497])
model = tf.keras.models.Model(inputs=[in0Sub96707,in1Sub96707,in0Con79940,in0Zer55528,in0GRU20474,in0Con51497], outputs=Min64104)
w = model.get_layer('Con99292').get_weights() 
w[0] = np.array([[[[[0.2546, 0.8178]], [[0.9589, 0.0471]]], [[[0.8047, 0.6004]], [[0.7217, 0.3277]]]], [[[[0.5616, 0.4012]], [[0.3097, 0.7442]]], [[[0.0052, 0.4411]], [[0.6909, 0.8803]]]], [[[[0.9032, 0.2294]], [[0.7284, 0.2831]]], [[[0.3562, 0.5562]], [[0.4642, 0.1759]]]], [[[[0.0225, 0.9824]], [[0.0844, 0.7606]]], [[[0.4884, 0.5651]], [[0.7706, 0.1732]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con99292').set_weights(w) 
w = model.get_layer('GRU20474').get_weights() 
w[0] = np.array([[6, 3, 10, 9, 1, 7], [7, 1, 3, 6, 8, 6], [2, 2, 2, 2, 3, 9]])
w[1] = np.array([[8, 8, 3, 2, 10, 6], [2, 9, 6, 1, 6, 8]])
w[2] = np.array([[10, 10, 9, 3, 8, 5], [4, 5, 8, 10, 2, 6]])
model.get_layer('GRU20474').set_weights(w) 
in0Sub96707 = tf.constant([[[[0.2569, 0.2175, 0.1355], [0.3744, 0.9017, 0.2077], [0.8493, 0.9679, 0.0068]], [[0.8493, 0.4628, 0.342], [0.0715, 0.3248, 0.3943], [0.5861, 0.3269, 0.0221]]]])
in1Sub96707 = tf.constant([[[[0.9055, 0.2967, 0.8927], [0.2649, 0.1054, 0.6579], [0.0903, 0.0553, 0.7636]], [[0.883, 0.453, 0.3923], [0.4013, 0.2962, 0.0568], [0.9426, 0.2905, 0.7462]]]])
in0Con79940 = tf.constant([[[[[0.6856], [0.9837], [0.9429], [0.2474], [0.9694]], [[0.6028], [0.1609], [0.2984], [0.99], [0.9899]], [[0.7386], [0.2898], [0.6437], [0.5524], [0.175]]], [[[0.2376], [0.1463], [0.5113], [0.536], [0.2014]], [[0.6183], [0.0026], [0.3025], [0.3253], [0.3334]], [[0.3601], [0.2676], [0.475], [0.3415], [0.7049]]]]])
in0Zer55528 = tf.constant([[[[1.2857, 1.7163, 1.0593, 1.624], [1.04, 1.9247, 1.5739, 1.4863], [1.6972, 1.3849, 1.6494, 1.1722], [1.8454, 1.6746, 1.9258, 1.3486]], [[1.9208, 1.7392, 1.9396, 1.6166], [1.4029, 1.8047, 1.0192, 1.6688], [1.1477, 1.2622, 1.1366, 1.5001], [1.7713, 1.6521, 1.2612, 1.3443]]]])
in0GRU20474 = tf.constant([[[5, 3, 10]]])
in0Con51497 = tf.constant([[0.2878, 0.4491, 0.5661, 0.7548, 0.851, 0.636, 0.2943, 0.704, 0.4533, 0.2374, 0.7845, 0.1372, 0.7249, 0.29, 0.0368, 0.2061, 0.1789, 0.4164, 0.0569, 0.0755, 0.3575, 0.3436, 0.7109, 0.9917, 0.4562, 0.8733, 0.7462, 0.3087, 0.9694, 0.4008, 0.953, 0.9854, 0.5185, 0.4792, 0.6971, 0.7378, 0.1723, 0.1211, 0.3463, 0.9849, 0.2527, 0.4928, 0.4339, 0.9613, 0.8263, 0.414, 0.7554, 0.8879, 0.8314, 0.6013, 0.9773, 0.8882, 0.0578, 0.9137, 0.7528, 0.4179, 0.0086, 0.9474]])
print (np.array2string(model.predict([in0Sub96707,in1Sub96707,in0Con79940,in0Zer55528,in0GRU20474,in0Con51497],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min64104.png')

LSub96707 = subtract_layer([[[[0.2569, 0.2175, 0.1355], [0.3744, 0.9017, 0.2077], [0.8493, 0.9679, 0.0068]], [[0.8493, 0.4628, 0.342], [0.0715, 0.3248, 0.3943], [0.5861, 0.3269, 0.0221]]]], [[[[0.9055, 0.2967, 0.8927], [0.2649, 0.1054, 0.6579], [0.0903, 0.0553, 0.7636]], [[0.883, 0.453, 0.3923], [0.4013, 0.2962, 0.0568], [0.9426, 0.2905, 0.7462]]]], Sub96707), 
LRes96223 = reshape_layer(Sub96707, [2, 3, 3, 1], Res96223), 
LZer5325 = zero_padding3D_layer(Res96223, 0, 0, 0, 0, 2, 0, Zer5325), 
LCon79940 = concatenate_layer([Zer5325,[[[[[0.6856], [0.9837], [0.9429], [0.2474], [0.9694]], [[0.6028], [0.1609], [0.2984], [0.99], [0.9899]], [[0.7386], [0.2898], [0.6437], [0.5524], [0.175]]], [[[0.2376], [0.1463], [0.5113], [0.536], [0.2014]], [[0.6183], [0.0026], [0.3025], [0.3253], [0.3334]], [[0.3601], [0.2676], [0.475], [0.3415], [0.7049]]]]]], 4, Con79940), 
LZer55528 = zero_padding2D_layer([[[[1.2857, 1.7163, 1.0593, 1.624], [1.04, 1.9247, 1.5739, 1.4863], [1.6972, 1.3849, 1.6494, 1.1722], [1.8454, 1.6746, 1.9258, 1.3486]], [[1.9208, 1.7392, 1.9396, 1.6166], [1.4029, 1.8047, 1.0192, 1.6688], [1.1477, 1.2622, 1.1366, 1.5001], [1.7713, 1.6521, 1.2612, 1.3443]]]], 1, 1, 1, 1, Zer55528), 
LRes78948 = reshape_layer(Zer55528, [4, 6, 4, 1], Res78948), 
LCon99292 = conv3D_layer(Res78948, 4, 2, 2,[[[[[0.2546, 0.8178]], [[0.9589, 0.0471]]], [[[0.8047, 0.6004]], [[0.7217, 0.3277]]]], [[[[0.5616, 0.4012]], [[0.3097, 0.7442]]], [[[0.0052, 0.4411]], [[0.6909, 0.8803]]]], [[[[0.9032, 0.2294]], [[0.7284, 0.2831]]], [[[0.3562, 0.5562]], [[0.4642, 0.1759]]]], [[[[0.0225, 0.9824]], [[0.0844, 0.7606]]], [[[0.4884, 0.5651]], [[0.7706, 0.1732]]]]],[0, 0], 2, 6, 1, true, 1, 1, 1, Con99292), 
LZer47373 = zero_padding3D_layer(Con99292, 0, 0, 2, 0, 1, 0, Zer47373), 
LAve67538 = average_layer([Con79940,Zer47373], Ave67538), 
LRes23821 = reshape_layer(Ave67538, [2, 3, 10], Res23821), 
LRes95081 = reshape_layer(Res23821, [2, 30], Res95081), 
LFla92462 = flatten_layer(Res95081, Fla92462), 
LGRU20474 = gru_layer([[[5, 3, 10]]],[[6, 3, 10, 9, 1, 7], [7, 1, 3, 6, 8, 6], [2, 2, 2, 2, 3, 9]],[[8, 8, 3, 2, 10, 6], [2, 9, 6, 1, 6, 8]],[[10, 10, 9, 3, 8, 5], [4, 5, 8, 10, 2, 6]], true, GRU20474), 
LCon51497 = concatenate_layer([GRU20474,[[0.2878, 0.4491, 0.5661, 0.7548, 0.851, 0.636, 0.2943, 0.704, 0.4533, 0.2374, 0.7845, 0.1372, 0.7249, 0.29, 0.0368, 0.2061, 0.1789, 0.4164, 0.0569, 0.0755, 0.3575, 0.3436, 0.7109, 0.9917, 0.4562, 0.8733, 0.7462, 0.3087, 0.9694, 0.4008, 0.953, 0.9854, 0.5185, 0.4792, 0.6971, 0.7378, 0.1723, 0.1211, 0.3463, 0.9849, 0.2527, 0.4928, 0.4339, 0.9613, 0.8263, 0.414, 0.7554, 0.8879, 0.8314, 0.6013, 0.9773, 0.8882, 0.0578, 0.9137, 0.7528, 0.4179, 0.0086, 0.9474]]], 1, Con51497), 
LMin64104 = minimum_layer([Fla92462,Con51497], Min64104), 
exec_layers([LSub96707,LRes96223,LZer5325,LCon79940,LZer55528,LRes78948,LCon99292,LZer47373,LAve67538,LRes23821,LRes95081,LFla92462,LGRU20474,LCon51497,LMin64104],["Sub96707","Res96223","Zer5325","Con79940","Zer55528","Res78948","Con99292","Zer47373","Ave67538","Res23821","Res95081","Fla92462","GRU20474","Con51497","Min64104"],Min64104,"Min64104")

Actual (Unparsed): [[0.0000000, 0.0000000, 0.0000000, 0.4491000, -0.3243000, 0.4714500, -0.0396000, 0.1237000, -0.3786000, 0.4847000, 0.0000000, 0.2374000, 0.0000000, 0.0804500, 0.0547500, 0.1492000, 0.0368000, 0.2061000, -0.2251000, 0.4164000, 0.0000000, 0.0755000, 0.3575000, 0.3436000, 0.7109000, 0.9917000, 0.4562000, 0.8733000, 0.3056081, 0.3087000, 0.0000000, 0.1188000, 0.0000000, 0.0731500, -0.0168500, 0.2556500, 0.0049000, 0.2680000, -0.0251500, 0.1007000, 0.0000000, 0.3091500, 0.0000000, 0.0013000, -0.1649000, 0.1512500, 0.0143000, 0.1626500, 0.1687500, 0.1667000, 0.0000000, 0.1800500, 0.9773000, 0.8882000, 0.0578000, 0.9137000, 0.7528000, 0.4179000, 0.0086000, 0.9474000]]

Expected (Unparsed): [[0,0.0,0,0.4491,-0.3243,0.47145,-0.03960000000000001,0.1237,-0.37860000000000005,0.4847,0,0.2374,0,0.08045,0.05474999999999999,0.1492,0.0368,0.2061,-0.22510000000000002,0.4164,0,0.0755,0.3575,0.3436,0.7109,0.9917,0.4562,0.8733,0.30560812000000015,0.3087,0,0.1188,0,0.07315,-0.016849999999999976,0.25565,0.004899999999999988,0.268,-0.025149999999999978,0.1007,0,0.30915,0,0.0013,-0.1649,0.15125,0.01429999999999998,0.16265,0.16874999999999998,0.1667,0,0.18005,0.9773,0.8882,0.0578,0.9137,0.7528,0.4179,0.0086,0.9474]]

Actual:   [[0, 0, 0, 0.4491, -0.3243, 0.4715, -0.0396, 0.1237, -0.3786, 0.4847, 0, 0.2374, 0, 0.0805, 0.0548, 0.1492, 0.0368, 0.2061, -0.2251, 0.4164, 0, 0.0755, 0.3575, 0.3436, 0.7109, 0.9917, 0.4562, 0.8733, 0.3057, 0.3087, 0, 0.1188, 0, 0.0732, -0.0168, 0.2557, 0.0049, 0.268, -0.0251, 0.1007, 0, 0.3092, 0, 0.0013, -0.1649, 0.1513, 0.0143, 0.1627, 0.1688, 0.1667, 0, 0.1801, 0.9773, 0.8882, 0.0578, 0.9137, 0.7528, 0.4179, 0.0086, 0.9474]]

Expected: [[0, 0, 0, 0.4491, -0.3243, 0.4715, -0.0396, 0.1237, -0.3786, 0.4847, 0, 0.2374, 0, 0.0805, 0.0548, 0.1492, 0.0368, 0.2061, -0.2251, 0.4164, 0, 0.0755, 0.3575, 0.3436, 0.7109, 0.9917, 0.4562, 0.8733, 0.3057, 0.3087, 0, 0.1188, 0, 0.0732, -0.0168, 0.2557, 0.0049, 0.268, -0.0251, 0.1007, 0, 0.3092, 0, 0.0013, -0.1649, 0.1513, 0.0143, 0.1627, 0.1688, 0.1667, 0, 0.1801, 0.9773, 0.8882, 0.0578, 0.9137, 0.7528, 0.4179, 0.0086, 0.9474]]