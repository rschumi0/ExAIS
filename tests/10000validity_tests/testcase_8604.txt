import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add69304 = tf.keras.layers.Input(shape=([1, 1]))
in1Add69304 = tf.keras.layers.Input(shape=([1, 1]))
in0Con64959 = tf.keras.layers.Input(shape=([1, 3]))
in0Bat22244 = tf.keras.layers.Input(shape=([2, 3]))

Add69304 = keras.layers.Add(name = 'Add69304', )([in0Add69304,in1Add69304])
Con64959 = keras.layers.Concatenate(axis=2, name = 'Con64959', )([Add69304,in0Con64959])
Bat22244 = keras.layers.BatchNormalization(axis=1, epsilon=0.5793509307759686,  name = 'Bat22244', )(in0Bat22244)
Con79123 = keras.layers.Conv1D(4, (2),strides=(1), padding='valid', dilation_rate=(1), name = 'Con79123', )(Bat22244)
Mul76618 = keras.layers.Multiply(name = 'Mul76618', )([Con64959,Con79123])
Lea5808 = keras.layers.LeakyReLU(alpha=6.836751008048129, name = 'Lea5808', )(Mul76618)
Res43848 = keras.layers.Reshape((1, 4, 1), name = 'Res43848', )(Lea5808)
Res42006 = keras.layers.Reshape((1, 4, 1, 1), name = 'Res42006', )(Res43848)
Up_39375 = keras.layers.UpSampling3D(size=(1, 1, 2), name = 'Up_39375', )(Res42006)
model = tf.keras.models.Model(inputs=[in0Add69304,in1Add69304,in0Con64959,in0Bat22244], outputs=Up_39375)
w = model.get_layer('Bat22244').get_weights() 
w[0] = np.array([0.1473, 0.4869])
w[1] = np.array([0.7549, 0.2827])
w[2] = np.array([0.1017, 0.8396])
w[3] = np.array([0.9865, 0.3876])
model.get_layer('Bat22244').set_weights(w) 
w = model.get_layer('Con79123').get_weights() 
w[0] = np.array([[[0.4953, 0.5557, 0.6484, 0.1453], [0.593, 0.9782, 0.3382, 0.0023], [0.3825, 0.7918, 0.0477, 0.0129]], [[0.0622, 0.5885, 0.7869, 0.2535], [0.2219, 0.5478, 0.1573, 0.9188], [0.4856, 0.9641, 0.5508, 0.3273]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con79123').set_weights(w) 
in0Add69304 = tf.constant([[[0.236]]])
in1Add69304 = tf.constant([[[0.1358]]])
in0Con64959 = tf.constant([[[0.2504, 0.4247, 0.532]]])
in0Bat22244 = tf.constant([[[1.9335, 1.7742, 1.7959], [1.0071, 1.0523, 1.2213]]])
print (np.array2string(model.predict([in0Add69304,in1Add69304,in0Con64959,in0Bat22244],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Up_39375.png')

LAdd69304 = add_layer([[[[0.236]]], [[[0.1358]]]], Add69304), 
LCon64959 = concatenate_layer([Add69304,[[[0.2504, 0.4247, 0.532]]]], 2, Con64959), 
LBat22244 = batch_normalization_layer([[[1.9335, 1.7742, 1.7959], [1.0071, 1.0523, 1.2213]]], 1, 0.5793509307759686, [0.1473, 0.4869], [0.7549, 0.2827], [0.1017, 0.8396], [0.9865, 0.3876], Bat22244), 
LCon79123 = conv1D_layer(Bat22244, 2,[[[0.4953, 0.5557, 0.6484, 0.1453], [0.593, 0.9782, 0.3382, 0.0023], [0.3825, 0.7918, 0.0477, 0.0129]], [[0.0622, 0.5885, 0.7869, 0.2535], [0.2219, 0.5478, 0.1573, 0.9188], [0.4856, 0.9641, 0.5508, 0.3273]]],[0, 0, 0, 0], 1, false, 1, Con79123), 
LMul76618 = multiply_layer([Con64959,Con79123], Mul76618), 
LLea5808 = leaky_relu_layer(Mul76618, 6.836751008048129, Lea5808), 
LRes43848 = reshape_layer(Lea5808, [1, 4, 1], Res43848), 
LRes42006 = reshape_layer(Res43848, [1, 4, 1, 1], Res42006), 
LUp_39375 = up_sampling3D_layer(Res42006, 1, 1, 2, Up_39375), 
exec_layers([LAdd69304,LCon64959,LBat22244,LCon79123,LMul76618,LLea5808,LRes43848,LRes42006,LUp_39375],["Add69304","Con64959","Bat22244","Con79123","Mul76618","Lea5808","Res43848","Res42006","Up_39375"],Up_39375,"Up_39375")

Actual (Unparsed): [[[[[0.6499208], [0.6499208]], [[0.7783656], [0.7783656]], [[0.6817583], [0.6817583]], [[0.4038441], [0.4038441]]]]]

Expected (Unparsed): [[[[[0.6499207647953906],[0.6499207647953906]],[[0.7783656051984721],[0.7783656051984721]],[[0.6817583399375441],[0.6817583399375441]],[[0.4038441121109351],[0.4038441121109351]]]]]

Actual:   [[[[[0.65], [0.65]], [[0.7784], [0.7784]], [[0.6818], [0.6818]], [[0.4039], [0.4039]]]]]

Expected: [[[[[0.65], [0.65]], [[0.7784], [0.7784]], [[0.6818], [0.6818]], [[0.4039], [0.4039]]]]]