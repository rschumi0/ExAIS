import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo82349 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in0Con98641 = tf.keras.layers.Input(shape=([3, 3, 3]))
in0Glo29723 = tf.keras.layers.Input(shape=([2, 1]))

Glo82349 = keras.layers.GlobalMaxPool3D(name = 'Glo82349', )(in0Glo82349)
Res12030 = keras.layers.Reshape((1, 1), name = 'Res12030', )(Glo82349)
Res36204 = keras.layers.Reshape((1, 1, 1), name = 'Res36204', )(Res12030)
Zer90285 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer90285', )(Res36204)
Con98641 = keras.layers.Concatenate(axis=3, name = 'Con98641', )([Zer90285,in0Con98641])
Glo29723 = keras.layers.GlobalAveragePooling1D(name = 'Glo29723', )(in0Glo29723)
Res92780 = keras.layers.Reshape((1, 1), name = 'Res92780', )(Glo29723)
Res67637 = keras.layers.Reshape((1, 1, 1), name = 'Res67637', )(Res92780)
Loc63147 = keras.layers.LocallyConnected2D(4, (1, 1),strides=(1, 1), name = 'Loc63147', )(Res67637)
Zer84332 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer84332', )(Loc63147)
Add50963 = keras.layers.Add(name = 'Add50963', )([Con98641,Zer84332])
model = tf.keras.models.Model(inputs=[in0Glo82349,in0Con98641,in0Glo29723], outputs=Add50963)
w = model.get_layer('Loc63147').get_weights() 
w[0] = np.array([[[0.2048, 0.0172, 0.3523, 0.9472]]])
w[1] = np.array([[[0, 0, 0, 0]]])
model.get_layer('Loc63147').set_weights(w) 
in0Glo82349 = tf.constant([[[[[1.4402]]], [[[1.4013]]]]])
in0Con98641 = tf.constant([[[[0.2842, 0.7388, 0.5964], [0.0279, 0.5305, 0.379], [0.6892, 0.6402, 0.4077]], [[0.2634, 0.5796, 0.553], [0.5547, 0.1187, 0.0622], [0.9742, 0.8178, 0.1326]], [[0.3964, 0.9331, 0.717], [0.3311, 0.559, 0.579], [0.4413, 0.9254, 0.8099]]]])
in0Glo29723 = tf.constant([[[1.8042], [1.1855]]])
print (np.array2string(model.predict([in0Glo82349,in0Con98641,in0Glo29723],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add50963.png')

LGlo82349 = global_max_pool3D_layer([[[[[1.4402]]], [[[1.4013]]]]], Glo82349), 
LRes12030 = reshape_layer(Glo82349, [1, 1], Res12030), 
LRes36204 = reshape_layer(Res12030, [1, 1, 1], Res36204), 
LZer90285 = zero_padding2D_layer(Res36204, 2, 0, 2, 0, Zer90285), 
LCon98641 = concatenate_layer([Zer90285,[[[[0.2842, 0.7388, 0.5964], [0.0279, 0.5305, 0.379], [0.6892, 0.6402, 0.4077]], [[0.2634, 0.5796, 0.553], [0.5547, 0.1187, 0.0622], [0.9742, 0.8178, 0.1326]], [[0.3964, 0.9331, 0.717], [0.3311, 0.559, 0.579], [0.4413, 0.9254, 0.8099]]]]], 3, Con98641), 
LGlo29723 = global_average_pooling1D_layer([[[1.8042], [1.1855]]], Glo29723), 
LRes92780 = reshape_layer(Glo29723, [1, 1], Res92780), 
LRes67637 = reshape_layer(Res92780, [1, 1, 1], Res67637), 
LLoc63147 = locally_connected2D_layer(Res67637, 1, 1,[[[0.2048, 0.0172, 0.3523, 0.9472]]],[[[0, 0, 0, 0]]], 1, 1, Loc63147), 
LZer84332 = zero_padding2D_layer(Loc63147, 1, 1, 1, 1, Zer84332), 
LAdd50963 = add_layer([Con98641,Zer84332], Add50963), 
exec_layers([LGlo82349,LRes12030,LRes36204,LZer90285,LCon98641,LGlo29723,LRes92780,LRes67637,LLoc63147,LZer84332,LAdd50963],["Glo82349","Res12030","Res36204","Zer90285","Con98641","Glo29723","Res92780","Res67637","Loc63147","Zer84332","Add50963"],Add50963,"Add50963")

Actual (Unparsed): [[[[0.0000000, 0.2842000, 0.7388000, 0.5964000], [0.0000000, 0.0279000, 0.5305000, 0.3790000], [0.0000000, 0.6892000, 0.6402000, 0.4077000]], [[0.0000000, 0.2634000, 0.5796000, 0.5530000], [0.3061453, 0.5804114, 0.6453357, 1.4781220], [0.0000000, 0.9742000, 0.8178000, 0.1326000]], [[0.0000000, 0.3964000, 0.9331000, 0.7170000], [0.0000000, 0.3311000, 0.5590000, 0.5790000], [1.4402000, 0.4413000, 0.9254000, 0.8099000]]]]

Expected (Unparsed): [[[[0,0.2842,0.7388,0.5964],[0,0.0279,0.5305,0.379],[0,0.6892,0.6402,0.4077]],[[0,0.2634,0.5796,0.553],[0.30614528,0.58041142,0.645335655,1.4781219200000002],[0,0.9742,0.8178,0.1326]],[[0,0.3964,0.9331,0.717],[0,0.3311,0.559,0.579],[1.4402,0.4413,0.9254,0.8099]]]]

Actual:   [[[[0, 0.2842, 0.7388, 0.5964], [0, 0.0279, 0.5305, 0.379], [0, 0.6892, 0.6402, 0.4077]], [[0, 0.2634, 0.5796, 0.553], [0.3062, 0.5805, 0.6454, 1.4782], [0, 0.9742, 0.8178, 0.1326]], [[0, 0.3964, 0.9331, 0.717], [0, 0.3311, 0.559, 0.579], [1.4402, 0.4413, 0.9254, 0.8099]]]]

Expected: [[[[0, 0.2842, 0.7388, 0.5964], [0, 0.0279, 0.5305, 0.379], [0, 0.6892, 0.6402, 0.4077]], [[0, 0.2634, 0.5796, 0.553], [0.3062, 0.5805, 0.6454, 1.4782], [0, 0.9742, 0.8178, 0.1326]], [[0, 0.3964, 0.9331, 0.717], [0, 0.3311, 0.559, 0.579], [1.4402, 0.4413, 0.9254, 0.8099]]]]