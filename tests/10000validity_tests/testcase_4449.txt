import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add76046 = tf.keras.layers.Input(shape=([1, 1]))
in1Add76046 = tf.keras.layers.Input(shape=([1, 1]))
in0Con6382 = tf.keras.layers.Input(shape=([4, 3, 1]))
in0Mul27570 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Mul27570 = tf.keras.layers.Input(shape=([2, 1, 2]))

Add76046 = keras.layers.Add(name = 'Add76046', )([in0Add76046,in1Add76046])
Res41653 = keras.layers.Reshape((1, 1, 1), name = 'Res41653', )(Add76046)
Glo47887 = keras.layers.GlobalAveragePooling2D(name = 'Glo47887', )(Res41653)
Res4334 = keras.layers.Reshape((1, 1), name = 'Res4334', )(Glo47887)
Res84337 = keras.layers.Reshape((1, 1, 1), name = 'Res84337', )(Res4334)
Zer73431 = keras.layers.ZeroPadding2D(padding=((3, 0), (2, 0)), name = 'Zer73431', )(Res84337)
Con6382 = keras.layers.Concatenate(axis=3, name = 'Con6382', )([Zer73431,in0Con6382])
Mul27570 = keras.layers.Multiply(name = 'Mul27570', )([in0Mul27570,in1Mul27570])
Bat66644 = keras.layers.BatchNormalization(axis=1, epsilon=0.9401485733957015,  name = 'Bat66644', )(Mul27570)
Zer14387 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer14387', )(Bat66644)
Min29619 = keras.layers.Minimum(name = 'Min29619', )([Con6382,Zer14387])
model = tf.keras.models.Model(inputs=[in0Add76046,in1Add76046,in0Con6382,in0Mul27570,in1Mul27570], outputs=Min29619)
w = model.get_layer('Bat66644').get_weights() 
w[0] = np.array([0.8554, 0.2565])
w[1] = np.array([0.3279, 0.5001])
w[2] = np.array([0.1837, 0.5401])
w[3] = np.array([0.9638, 0.5455])
model.get_layer('Bat66644').set_weights(w) 
in0Add76046 = tf.constant([[[0.5201]]])
in1Add76046 = tf.constant([[[0.4935]]])
in0Con6382 = tf.constant([[[[0.6642], [0.3398], [0.5551]], [[0.8689], [0.4806], [0.3513]], [[0.2501], [0.6063], [0.0953]], [[0.6248], [0.1286], [0.6809]]]])
in0Mul27570 = tf.constant([[[[0.3772, 0.4827]], [[0.6111, 0.0808]]]])
in1Mul27570 = tf.constant([[[[0.3253, 0.3154]], [[0.2193, 0.98]]]])
print (np.array2string(model.predict([in0Add76046,in1Add76046,in0Con6382,in0Mul27570,in1Mul27570],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min29619.png')

LAdd76046 = add_layer([[[[0.5201]]], [[[0.4935]]]], Add76046), 
LRes41653 = reshape_layer(Add76046, [1, 1, 1], Res41653), 
LGlo47887 = global_average_pooling2D_layer(Res41653, Glo47887), 
LRes4334 = reshape_layer(Glo47887, [1, 1], Res4334), 
LRes84337 = reshape_layer(Res4334, [1, 1, 1], Res84337), 
LZer73431 = zero_padding2D_layer(Res84337, 3, 0, 2, 0, Zer73431), 
LCon6382 = concatenate_layer([Zer73431,[[[[0.6642], [0.3398], [0.5551]], [[0.8689], [0.4806], [0.3513]], [[0.2501], [0.6063], [0.0953]], [[0.6248], [0.1286], [0.6809]]]]], 3, Con6382), 
LMul27570 = multiply_layer([[[[[0.3772, 0.4827]], [[0.6111, 0.0808]]]], [[[[0.3253, 0.3154]], [[0.2193, 0.98]]]]], Mul27570), 
LBat66644 = batch_normalization_layer(Mul27570, 1, 0.9401485733957015, [0.8554, 0.2565], [0.3279, 0.5001], [0.1837, 0.5401], [0.9638, 0.5455], Bat66644), 
LZer14387 = zero_padding2D_layer(Bat66644, 1, 1, 1, 1, Zer14387), 
LMin29619 = minimum_layer([Con6382,Zer14387], Min29619), 
exec_layers([LAdd76046,LRes41653,LGlo47887,LRes4334,LRes84337,LZer73431,LCon6382,LMul27570,LBat66644,LZer14387,LMin29619],["Add76046","Res41653","Glo47887","Res4334","Res84337","Zer73431","Con6382","Mul27570","Bat66644","Zer14387","Min29619"],Min29619,"Min29619")

Actual (Unparsed): [[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.3083993], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.4031046], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]]]

Expected (Unparsed): [[[[0,0],[0,0],[0,0]],[[0,0],[0,0.3083992670985454],[0,0]],[[0,0],[0,0.40310460665306447],[0,0]],[[0,0],[0,0],[0,0]]]]

Actual:   [[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0.3084], [0, 0]], [[0, 0], [0, 0.4032], [0, 0]], [[0, 0], [0, 0], [0, 0]]]]

Expected: [[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0.3084], [0, 0]], [[0, 0], [0, 0.4032], [0, 0]], [[0, 0], [0, 0], [0, 0]]]]