import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min25859 = tf.keras.layers.Input(shape=([1, 1, 2]))
in1Min25859 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con24226 = tf.keras.layers.Input(shape=([3, 2, 1]))
in0Sub46041 = tf.keras.layers.Input(shape=([3, 2, 3]))
in1Sub46041 = tf.keras.layers.Input(shape=([3, 2, 3]))
in0Max52436 = tf.keras.layers.Input(shape=([1, 2]))
in1Max52436 = tf.keras.layers.Input(shape=([1, 2]))
in0Con98709 = tf.keras.layers.Input(shape=([3, 22]))

Min25859 = keras.layers.Minimum(name = 'Min25859', )([in0Min25859,in1Min25859])
Zer22792 = keras.layers.ZeroPadding2D(padding=((2, 0), (1, 0)), name = 'Zer22792', )(Min25859)
Con24226 = keras.layers.Concatenate(axis=3, name = 'Con24226', )([Zer22792,in0Con24226])
Sub46041 = keras.layers.Subtract(name = 'Sub46041', )([in0Sub46041,in1Sub46041])
Ave94768 = keras.layers.Average(name = 'Ave94768', )([Con24226,Sub46041])
Res19765 = keras.layers.Reshape((3, 2, 3, 1), name = 'Res19765', )(Ave94768)
Con67846 = keras.layers.Conv3DTranspose(4, (1, 2, 3),strides=(1, 1, 1), padding='same', name = 'Con67846', )(Res19765)
Res54797 = keras.layers.Reshape((3, 2, 12), name = 'Res54797', )(Con67846)
Res87226 = keras.layers.Reshape((3, 24), name = 'Res87226', )(Res54797)
Max52436 = keras.layers.Maximum(name = 'Max52436', )([in0Max52436,in1Max52436])
Zer21617 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer21617', )(Max52436)
Con98709 = keras.layers.Concatenate(axis=2, name = 'Con98709', )([Zer21617,in0Con98709])
Ave25190 = keras.layers.Average(name = 'Ave25190', )([Res87226,Con98709])
model = tf.keras.models.Model(inputs=[in0Min25859,in1Min25859,in0Con24226,in0Sub46041,in1Sub46041,in0Max52436,in1Max52436,in0Con98709], outputs=Ave25190)
w = model.get_layer('Con67846').get_weights() 
w[0] = np.array([[[[[0.9924], [0.5643], [0.9779], [0.1347]], [[0.7681], [0.3739], [0.1339], [0.9598]], [[0.5324], [0.5503], [0.7161], [0.5342]]], [[[0.8629], [0.3168], [0.9813], [0.5533]], [[0.2311], [0.1598], [0.298], [0.5768]], [[0.1488], [0.1942], [0.2623], [0.609]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con67846').set_weights(w) 
in0Min25859 = tf.constant([[[[0.7501, 0.2976]]]])
in1Min25859 = tf.constant([[[[0.3327, 0.3456]]]])
in0Con24226 = tf.constant([[[[0.6229], [0.1053]], [[0.2241], [0.1463]], [[0.7014], [0.2253]]]])
in0Sub46041 = tf.constant([[[[0.449, 0.0751, 0.6375], [0.7077, 0.9355, 0.1071]], [[0.153, 0.5305, 0.4183], [0.5855, 0.4135, 0.3053]], [[0.0249, 0.6717, 0.5978], [0.3154, 0.6632, 0.0197]]]])
in1Sub46041 = tf.constant([[[[0.4435, 0.7276, 0.998], [0.0422, 0.8552, 0.4248]], [[0.0286, 0.0192, 0.5425], [0.9818, 0.8962, 0.5123]], [[0.1776, 0.1958, 0.9739], [0.4526, 0.5071, 0.6249]]]])
in0Max52436 = tf.constant([[[0.9931, 0.696]]])
in1Max52436 = tf.constant([[[0.566, 0.6549]]])
in0Con98709 = tf.constant([[[0.2451, 0.4758, 0.5164, 0.8672, 0.1774, 0.8934, 0.5702, 0.6729, 0.9582, 0.524, 0.876, 0.9069, 0.2646, 0.9038, 0.4112, 0.4007, 0.4187, 0.6479, 0.68, 0.8251, 0.9251, 0.9833], [0.589, 0.2244, 0.9677, 0.9762, 0.2841, 0.5799, 0.9983, 0.3001, 0.5065, 0.055, 0.5576, 0.2231, 0.9876, 0.4791, 0.6439, 0.732, 0.025, 0.4498, 0.2633, 0.3573, 0.6606, 0.1525], [0.2838, 0.313, 0.8178, 0.6299, 0.3472, 0.0258, 0.3426, 0.7673, 0.3899, 0.99, 0.143, 0.7035, 0.2743, 0.157, 0.5234, 0.7257, 0.1362, 0.7423, 0.3701, 0.9598, 0.3196, 0.4204]]])
print (np.array2string(model.predict([in0Min25859,in1Min25859,in0Con24226,in0Sub46041,in1Sub46041,in0Max52436,in1Max52436,in0Con98709],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave25190.png')

LMin25859 = minimum_layer([[[[[0.7501, 0.2976]]]], [[[[0.3327, 0.3456]]]]], Min25859), 
LZer22792 = zero_padding2D_layer(Min25859, 2, 0, 1, 0, Zer22792), 
LCon24226 = concatenate_layer([Zer22792,[[[[0.6229], [0.1053]], [[0.2241], [0.1463]], [[0.7014], [0.2253]]]]], 3, Con24226), 
LSub46041 = subtract_layer([[[[0.449, 0.0751, 0.6375], [0.7077, 0.9355, 0.1071]], [[0.153, 0.5305, 0.4183], [0.5855, 0.4135, 0.3053]], [[0.0249, 0.6717, 0.5978], [0.3154, 0.6632, 0.0197]]]], [[[[0.4435, 0.7276, 0.998], [0.0422, 0.8552, 0.4248]], [[0.0286, 0.0192, 0.5425], [0.9818, 0.8962, 0.5123]], [[0.1776, 0.1958, 0.9739], [0.4526, 0.5071, 0.6249]]]], Sub46041), 
LAve94768 = average_layer([Con24226,Sub46041], Ave94768), 
LRes19765 = reshape_layer(Ave94768, [3, 2, 3, 1], Res19765), 
LCon67846 = conv3D_transpose_layer(Res19765, 1, 2, 3,[[[[[0.9924], [0.5643], [0.9779], [0.1347]], [[0.7681], [0.3739], [0.1339], [0.9598]], [[0.5324], [0.5503], [0.7161], [0.5342]]], [[[0.8629], [0.3168], [0.9813], [0.5533]], [[0.2311], [0.1598], [0.298], [0.5768]], [[0.1488], [0.1942], [0.2623], [0.609]]]]],[0, 0, 0, 0], 1, 1, 1, true, Con67846), 
LRes54797 = reshape_layer(Con67846, [3, 2, 12], Res54797), 
LRes87226 = reshape_layer(Res54797, [3, 24], Res87226), 
LMax52436 = maximum_layer([[[[0.9931, 0.696]]], [[[0.566, 0.6549]]]], Max52436), 
LZer21617 = zero_padding1D_layer(Max52436, 2, 0, Zer21617), 
LCon98709 = concatenate_layer([Zer21617,[[[0.2451, 0.4758, 0.5164, 0.8672, 0.1774, 0.8934, 0.5702, 0.6729, 0.9582, 0.524, 0.876, 0.9069, 0.2646, 0.9038, 0.4112, 0.4007, 0.4187, 0.6479, 0.68, 0.8251, 0.9251, 0.9833], [0.589, 0.2244, 0.9677, 0.9762, 0.2841, 0.5799, 0.9983, 0.3001, 0.5065, 0.055, 0.5576, 0.2231, 0.9876, 0.4791, 0.6439, 0.732, 0.025, 0.4498, 0.2633, 0.3573, 0.6606, 0.1525], [0.2838, 0.313, 0.8178, 0.6299, 0.3472, 0.0258, 0.3426, 0.7673, 0.3899, 0.99, 0.143, 0.7035, 0.2743, 0.157, 0.5234, 0.7257, 0.1362, 0.7423, 0.3701, 0.9598, 0.3196, 0.4204]]]], 2, Con98709), 
LAve25190 = average_layer([Res87226,Con98709], Ave25190), 
exec_layers([LMin25859,LZer22792,LCon24226,LSub46041,LAve94768,LRes19765,LCon67846,LRes54797,LRes87226,LMax52436,LZer21617,LCon98709,LAve25190],["Min25859","Zer22792","Con24226","Sub46041","Ave94768","Res19765","Con67846","Res54797","Res87226","Max52436","Zer21617","Con98709","Ave25190"],Ave25190,"Ave25190")

Actual (Unparsed): [[[-0.1608291, -0.0915373, -0.0367858, 0.2172468, 0.1987372, 0.4103823, 0.1319924, 0.2997035, 0.2486396, 0.2712102, 0.3710700, 0.2378215, 0.4452723, 0.4755277, 0.0145442, 0.5248269, 0.2760139, 0.2644296, 0.2953754, 0.3679863, 0.3007890, 0.3825472, 0.4465767, 0.3899036], [0.1507414, 0.0837599, 0.4236643, 0.1592678, 0.6233752, 0.5671015, 0.2058595, 0.4326142, 0.5863873, 0.2297302, 0.3481296, 0.1197551, 0.2004300, 0.0518737, 0.4972283, 0.2168669, 0.2171713, 0.2921735, -0.0186883, 0.1605942, 0.0805388, 0.1353832, 0.2828237, 0.0894715], [0.5852986, 0.4008639, 0.2531340, 0.1358856, 0.5606672, 0.3843187, 0.2417214, 0.1176536, 0.2971080, 0.4795294, 0.2910374, 0.6366122, 0.3154452, 0.4656210, 0.3599867, 0.1844981, 0.3725796, 0.4159235, 0.1306564, 0.5837045, 0.2089849, 0.5429073, 0.2837485, 0.2989987]]]

Expected (Unparsed): [[[-0.1608291125,-0.09153732500000002,-0.03678582500000001,0.2172467875,0.19873717749999997,0.41038230499999995,0.13199244,0.29970346999999997,0.24863961,0.2712101525,0.3710700275,0.237821505,0.4452722675,0.47552766,0.014544142499999996,0.524826865,0.27601387,0.264429605,0.2953753825,0.367986295,0.30078898000000004,0.38254718749999994,0.44657673000000003,0.38990364],[0.15074144,0.08375993749999999,0.4236643575,0.1592678075,0.6233752125,0.56710149,0.20585953,0.4326141875,0.5863873275,0.22973024999999997,0.34812963499999994,0.11975511999999999,0.20043002499999998,0.051873695,0.4972282475,0.21686694500000003,0.21717129750000003,0.29217352750000003,-0.018688274999999987,0.160594225,0.080538795,0.135383235,0.2828237475,0.089471455],[0.5852985725,0.40086395999999996,0.25313401999999996,0.1358855675,0.5606672575,0.3843187475,0.24172135250000001,0.11765359749999998,0.2971080225,0.47952936,0.291037415,0.63661218,0.3154451425,0.46562100500000003,0.35998668749999996,0.1844981,0.3725796275,0.4159235075,0.13065641250000004,0.583704535,0.20898486,0.542907305,0.2837484825,0.29899866500000005]]]

Actual:   [[[-0.1608, -0.0915, -0.0367, 0.2173, 0.1988, 0.4104, 0.132, 0.2998, 0.2487, 0.2713, 0.3711, 0.2379, 0.4453, 0.4756, 0.0146, 0.5249, 0.2761, 0.2645, 0.2954, 0.368, 0.3008, 0.3826, 0.4466, 0.39], [0.1508, 0.0838, 0.4237, 0.1593, 0.6234, 0.5672, 0.2059, 0.4327, 0.5864, 0.2298, 0.3482, 0.1198, 0.2005, 0.0519, 0.4973, 0.2169, 0.2172, 0.2922, -0.0186, 0.1606, 0.0806, 0.1354, 0.2829, 0.0895], [0.5853, 0.4009, 0.2532, 0.1359, 0.5607, 0.3844, 0.2418, 0.1177, 0.2972, 0.4796, 0.2911, 0.6367, 0.3155, 0.4657, 0.36, 0.1845, 0.3726, 0.416, 0.1307, 0.5838, 0.209, 0.543, 0.2838, 0.299]]]

Expected: [[[-0.1608, -0.0915, -0.0367, 0.2173, 0.1988, 0.4104, 0.132, 0.2998, 0.2487, 0.2713, 0.3711, 0.2379, 0.4453, 0.4756, 0.0146, 0.5249, 0.2761, 0.2645, 0.2954, 0.368, 0.3008, 0.3826, 0.4466, 0.39], [0.1508, 0.0838, 0.4237, 0.1593, 0.6234, 0.5672, 0.2059, 0.4327, 0.5864, 0.2298, 0.3482, 0.1198, 0.2005, 0.0519, 0.4973, 0.2169, 0.2172, 0.2922, -0.0186, 0.1606, 0.0806, 0.1354, 0.2829, 0.0895], [0.5853, 0.4009, 0.2532, 0.1359, 0.5607, 0.3844, 0.2418, 0.1177, 0.2972, 0.4796, 0.2911, 0.6367, 0.3155, 0.4657, 0.36, 0.1845, 0.3726, 0.416, 0.1307, 0.5838, 0.209, 0.543, 0.2838, 0.299]]]