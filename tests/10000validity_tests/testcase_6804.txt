import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo85489 = tf.keras.layers.Input(shape=([1, 1]))
in0Con47294 = tf.keras.layers.Input(shape=([4, 1]))
in0Mul98641 = tf.keras.layers.Input(shape=([2, 2]))
in1Mul98641 = tf.keras.layers.Input(shape=([2, 2]))
in0Min97852 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in1Min97852 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Con94687 = tf.keras.layers.Input(shape=([4, 1]))

Glo85489 = keras.layers.GlobalMaxPool1D(name = 'Glo85489', )(in0Glo85489)
Res77855 = keras.layers.Reshape((1, 1), name = 'Res77855', )(Glo85489)
Zer74871 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer74871', )(Res77855)
Con47294 = keras.layers.Concatenate(axis=2, name = 'Con47294', )([Zer74871,in0Con47294])
Mul98641 = keras.layers.Multiply(name = 'Mul98641', )([in0Mul98641,in1Mul98641])
Up_1416 = keras.layers.UpSampling1D(size=(2), name = 'Up_1416', )(Mul98641)
Mul82361 = keras.layers.Multiply(name = 'Mul82361', )([Con47294,Up_1416])
Min97852 = keras.layers.Minimum(name = 'Min97852', )([in0Min97852,in1Min97852])
Con94710 = keras.layers.Conv3D(2, (2, 1, 1),strides=(1, 1, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con94710', )(Min97852)
Res22998 = keras.layers.Reshape((2, 2, 2), name = 'Res22998', )(Con94710)
Res30198 = keras.layers.Reshape((2, 4), name = 'Res30198', )(Res22998)
Glo31221 = keras.layers.GlobalMaxPool1D(name = 'Glo31221', )(Res30198)
Res50601 = keras.layers.Reshape((4, 1), name = 'Res50601', )(Glo31221)
Ave80431 = keras.layers.AveragePooling1D(pool_size=(2), strides=(1), padding='valid', name = 'Ave80431', )(Res50601)
Zer78487 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer78487', )(Ave80431)
Con94687 = keras.layers.Concatenate(axis=2, name = 'Con94687', )([Zer78487,in0Con94687])
Mul88094 = keras.layers.Multiply(name = 'Mul88094', )([Mul82361,Con94687])
model = tf.keras.models.Model(inputs=[in0Glo85489,in0Con47294,in0Mul98641,in1Mul98641,in0Min97852,in1Min97852,in0Con94687], outputs=Mul88094)
w = model.get_layer('Con94710').get_weights() 
w[0] = np.array([[[[[0.6553, 0.6324], [0.6996, 0.8624]]]], [[[[0.4271, 0.8276], [0.347, 0.0315]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con94710').set_weights(w) 
in0Glo85489 = tf.constant([[[1.9238]]])
in0Con47294 = tf.constant([[[0.6747], [0.9489], [0.0418], [0.8587]]])
in0Mul98641 = tf.constant([[[0.6181, 0.4269], [0.9833, 0.8509]]])
in1Mul98641 = tf.constant([[[0.7263, 0.9759], [0.8907, 0.2683]]])
in0Min97852 = tf.constant([[[[[0.5385, 0.7451]], [[0.4982, 0.6819]]], [[[0.9125, 0.8537]], [[0.0675, 0.8343]]]]])
in1Min97852 = tf.constant([[[[[0.2365, 0.3557]], [[0.3085, 0.6395]]], [[[0.6422, 0.2056]], [[0.3475, 0.884]]]]])
in0Con94687 = tf.constant([[[0.2741], [0.933], [0.4769], [0.0897]]])
print (np.array2string(model.predict([in0Glo85489,in0Con47294,in0Mul98641,in1Mul98641,in0Min97852,in1Min97852,in0Con94687],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul88094.png')

LGlo85489 = global_max_pool1D_layer([[[1.9238]]], Glo85489), 
LRes77855 = reshape_layer(Glo85489, [1, 1], Res77855), 
LZer74871 = zero_padding1D_layer(Res77855, 3, 0, Zer74871), 
LCon47294 = concatenate_layer([Zer74871,[[[0.6747], [0.9489], [0.0418], [0.8587]]]], 2, Con47294), 
LMul98641 = multiply_layer([[[[0.6181, 0.4269], [0.9833, 0.8509]]], [[[0.7263, 0.9759], [0.8907, 0.2683]]]], Mul98641), 
LUp_1416 = up_sampling1D_layer(Mul98641, 2, Up_1416), 
LMul82361 = multiply_layer([Con47294,Up_1416], Mul82361), 
LMin97852 = minimum_layer([[[[[[0.5385, 0.7451]], [[0.4982, 0.6819]]], [[[0.9125, 0.8537]], [[0.0675, 0.8343]]]]], [[[[[0.2365, 0.3557]], [[0.3085, 0.6395]]], [[[0.6422, 0.2056]], [[0.3475, 0.884]]]]]], Min97852), 
LCon94710 = conv3D_layer(Min97852, 2, 1, 1,[[[[[0.6553, 0.6324], [0.6996, 0.8624]]]], [[[[0.4271, 0.8276], [0.347, 0.0315]]]]],[0, 0], 1, 1, 1, true, 1, 1, 1, Con94710), 
LRes22998 = reshape_layer(Con94710, [2, 2, 2], Res22998), 
LRes30198 = reshape_layer(Res22998, [2, 4], Res30198), 
LGlo31221 = global_max_pool1D_layer(Res30198, Glo31221), 
LRes50601 = reshape_layer(Glo31221, [4, 1], Res50601), 
LAve80431 = average_pooling1D_layer(Res50601, 2, 1, false, Ave80431), 
LZer78487 = zero_padding1D_layer(Ave80431, 1, 0, Zer78487), 
LCon94687 = concatenate_layer([Zer78487,[[[0.2741], [0.933], [0.4769], [0.0897]]]], 2, Con94687), 
LMul88094 = multiply_layer([Mul82361,Con94687], Mul88094), 
exec_layers([LGlo85489,LRes77855,LZer74871,LCon47294,LMul98641,LUp_1416,LMul82361,LMin97852,LCon94710,LRes22998,LRes30198,LGlo31221,LRes50601,LAve80431,LZer78487,LCon94687,LMul88094],["Glo85489","Res77855","Zer74871","Con47294","Mul98641","Up_1416","Mul82361","Min97852","Con94710","Res22998","Res30198","Glo31221","Res50601","Ave80431","Zer78487","Con94687","Mul88094"],Mul88094,"Mul88094")

Actual (Unparsed): [[[0.0000000, 0.0770462], [0.0000000, 0.3688362], [0.0000000, 0.0045510], [1.5135817, 0.0175846]]]

Expected (Unparsed): [[[0.0,0.07704619907401171],[0.0,0.368836220560527],[0.0,0.0045509577174974],[1.5135817484455538,0.0175846246373733]]]

Actual:   [[[0, 0.0771], [0, 0.3689], [0, 0.0046], [1.5136, 0.0176]]]

Expected: [[[0, 0.0771], [0, 0.3689], [0, 0.0046], [1.5136, 0.0176]]]