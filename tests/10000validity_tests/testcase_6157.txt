import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sim5038 = tf.keras.layers.Input(shape=([1, 2]))
in0Con99132 = tf.keras.layers.Input(shape=([2, 1, 4, 2]))
in0Con89446 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))
in0Sub63176 = tf.keras.layers.Input(shape=([2, 3]))
in1Sub63176 = tf.keras.layers.Input(shape=([2, 3]))
in0Con61868 = tf.keras.layers.Input(shape=([2, 9]))

Sim5038 = keras.layers.SimpleRNN(2,name = 'Sim5038', )(in0Sim5038)
Res93220 = keras.layers.Reshape((2, 1), name = 'Res93220', )(Sim5038)
Res45305 = keras.layers.Reshape((2, 1, 1), name = 'Res45305', )(Res93220)
Con80191 = keras.layers.Conv2D(4, (1, 1),strides=(1, 1), padding='valid', dilation_rate=(1, 1), name = 'Con80191', )(Res45305)
Res789 = keras.layers.Reshape((2, 1, 4, 1), name = 'Res789', )(Con80191)
Con99132 = keras.layers.Concatenate(axis=4, name = 'Con99132', )([Res789,in0Con99132])
Con89446 = keras.layers.Conv3D(3, (1, 1, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con89446', )(in0Con89446)
Zer14404 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (3, 0)), name = 'Zer14404', )(Con89446)
Sub38140 = keras.layers.Subtract(name = 'Sub38140', )([Con99132,Zer14404])
Res25894 = keras.layers.Reshape((2, 1, 12), name = 'Res25894', )(Sub38140)
Res54401 = keras.layers.Reshape((2, 12), name = 'Res54401', )(Res25894)
Sub63176 = keras.layers.Subtract(name = 'Sub63176', )([in0Sub63176,in1Sub63176])
Lay84424 = keras.layers.LayerNormalization(axis=1, epsilon=2.9882916634030163, name = 'Lay84424', )(Sub63176)
Sof55204 = keras.layers.Softmax(axis=1, name = 'Sof55204', )(Lay84424)
Con61868 = keras.layers.Concatenate(axis=2, name = 'Con61868', )([Sof55204,in0Con61868])
Ave15249 = keras.layers.Average(name = 'Ave15249', )([Res54401,Con61868])
model = tf.keras.models.Model(inputs=[in0Sim5038,in0Con99132,in0Con89446,in0Sub63176,in1Sub63176,in0Con61868], outputs=Ave15249)
w = model.get_layer('Sim5038').get_weights() 
w[0] = np.array([[10, 7], [5, 2]])
w[1] = np.array([[2, 4], [3, 5]])
w[2] = np.array([7, 7])
model.get_layer('Sim5038').set_weights(w) 
w = model.get_layer('Con80191').get_weights() 
w[0] = np.array([[[[0.6676, 0.3046, 0.7001, 0.286]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con80191').set_weights(w) 
w = model.get_layer('Con89446').get_weights() 
w[0] = np.array([[[[[0.303, 0.3023, 0.1012]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con89446').set_weights(w) 
in0Sim5038 = tf.constant([[[10, 6]]])
in0Con99132 = tf.constant([[[[[0.961, 0.575], [0.2383, 0.6352], [0.7114, 0.6989], [0.9554, 0.5111]]], [[[0.9401, 0.4436], [0.1435, 0.9516], [0.3141, 0.63], [0.6175, 0.6398]]]]])
in0Con89446 = tf.constant([[[[[0.1143]]]]])
in0Sub63176 = tf.constant([[[0.2071, 0.6399, 0.4868], [0.5843, 0.0455, 0.9945]]])
in1Sub63176 = tf.constant([[[0.4666, 0.3723, 0.9175], [0.0347, 0.1813, 0.8514]]])
in0Con61868 = tf.constant([[[0.328, 0.0459, 0.3574, 0.9507, 0.7627, 0.8804, 0.9854, 0.5063, 0.2565], [0.7141, 0.6797, 0.1711, 0.5634, 0.2977, 0.3212, 0.8719, 0.8171, 0.3264]]])
print (np.array2string(model.predict([in0Sim5038,in0Con99132,in0Con89446,in0Sub63176,in1Sub63176,in0Con61868],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave15249.png')

LSim5038 = simple_rnn_layer([[[10, 6]]],[[10, 7], [5, 2]],[[2, 4], [3, 5]],[7, 7], Sim5038), 
LRes93220 = reshape_layer(Sim5038, [2, 1], Res93220), 
LRes45305 = reshape_layer(Res93220, [2, 1, 1], Res45305), 
LCon80191 = conv2D_layer(Res45305, 1, 1,[[[[0.6676, 0.3046, 0.7001, 0.286]]]],[0, 0, 0, 0], 1, 1, false, 1, 1, Con80191), 
LRes789 = reshape_layer(Con80191, [2, 1, 4, 1], Res789), 
LCon99132 = concatenate_layer([Res789,[[[[[0.961, 0.575], [0.2383, 0.6352], [0.7114, 0.6989], [0.9554, 0.5111]]], [[[0.9401, 0.4436], [0.1435, 0.9516], [0.3141, 0.63], [0.6175, 0.6398]]]]]], 4, Con99132), 
LCon89446 = conv3D_layer([[[[[0.1143]]]]], 1, 1, 1,[[[[[0.303, 0.3023, 0.1012]]]]],[0, 0, 0], 1, 1, 1, false, 1, 1, 1, Con89446), 
LZer14404 = zero_padding3D_layer(Con89446, 1, 0, 0, 0, 3, 0, Zer14404), 
LSub38140 = subtract_layer(Con99132,Zer14404, Sub38140), 
LRes25894 = reshape_layer(Sub38140, [2, 1, 12], Res25894), 
LRes54401 = reshape_layer(Res25894, [2, 12], Res54401), 
LSub63176 = subtract_layer([[[0.2071, 0.6399, 0.4868], [0.5843, 0.0455, 0.9945]]], [[[0.4666, 0.3723, 0.9175], [0.0347, 0.1813, 0.8514]]], Sub63176), 
LLay84424 = layer_normalization_layer(Sub63176, 1, 2.9882916634030163, Lay84424), 
LSof55204 = softmax_layer(Lay84424, 1, Sof55204), 
LCon61868 = concatenate_layer([Sof55204,[[[0.328, 0.0459, 0.3574, 0.9507, 0.7627, 0.8804, 0.9854, 0.5063, 0.2565], [0.7141, 0.6797, 0.1711, 0.5634, 0.2977, 0.3212, 0.8719, 0.8171, 0.3264]]]], 2, Con61868), 
LAve15249 = average_layer([Res54401,Con61868], Ave15249), 
exec_layers([LSim5038,LRes93220,LRes45305,LCon80191,LRes789,LCon99132,LCon89446,LZer14404,LSub38140,LRes25894,LRes54401,LSub63176,LLay84424,LSof55204,LCon61868,LAve15249],["Sim5038","Res93220","Res45305","Con80191","Res789","Con99132","Con89446","Zer14404","Sub38140","Res25894","Res54401","Sub63176","Lay84424","Sof55204","Con61868","Ave15249"],Ave15249,"Ave15249")

Actual (Unparsed): [[[0.5277990, 0.7593443, 0.4969303, 0.3163000, 0.1421000, 0.4963000, 0.8254000, 0.7370500, 0.7896500, 0.6357000, 0.7308500, 0.3838000], [0.6398010, 0.6912057, 0.5123697, 0.5093500, 0.4116000, 0.5613500, 0.6317500, 0.3059000, 0.4756000, 0.5616336, 0.7000236, 0.4773164]]]

Expected (Unparsed): [[[0.5277990440018151,0.7593442860427357,0.4969302641796258,0.3163,0.1421,0.49629999999999996,0.8253999999999999,0.73705,0.78965,0.6357,0.73085,0.38380000000000003],[0.6398009559981848,0.6912057139572643,0.512369735820374,0.50935,0.41159999999999997,0.56135,0.63175,0.3059,0.4756,0.56163355,0.700023555,0.47731642]]]

Actual:   [[[0.5278, 0.7594, 0.497, 0.3163, 0.1421, 0.4963, 0.8254, 0.7371, 0.7897, 0.6357, 0.7309, 0.3838], [0.6399, 0.6913, 0.5124, 0.5094, 0.4116, 0.5614, 0.6318, 0.3059, 0.4756, 0.5617, 0.7001, 0.4774]]]

Expected: [[[0.5278, 0.7594, 0.497, 0.3163, 0.1421, 0.4963, 0.8254, 0.7371, 0.7897, 0.6357, 0.7309, 0.3839], [0.6399, 0.6913, 0.5124, 0.5094, 0.4116, 0.5614, 0.6318, 0.3059, 0.4756, 0.5617, 0.7001, 0.4774]]]