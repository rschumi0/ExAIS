import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot99334 = tf.keras.layers.Input(shape=([3, 3]))
in1Dot99334 = tf.keras.layers.Input(shape=([3, 3]))
in0Con72906 = tf.keras.layers.Input(shape=([4, 3, 3]))
in0Den98425 = tf.keras.layers.Input(shape=([4, 3, 4]))
in0Up_29886 = tf.keras.layers.Input(shape=([4, 4]))
in0Con5446 = tf.keras.layers.Input(shape=([8, 8]))
in0Cro5701 = tf.keras.layers.Input(shape=([3, 1, 1, 1]))

Dot99334 = keras.layers.Dot(axes=(2, 2), name = 'Dot99334', )([in0Dot99334,in1Dot99334])
Res89429 = keras.layers.Reshape((3, 3, 1), name = 'Res89429', )(Dot99334)
Zer16081 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer16081', )(Res89429)
Con72906 = keras.layers.Concatenate(axis=3, name = 'Con72906', )([Zer16081,in0Con72906])
Den98425 = keras.layers.Dense(4,name = 'Den98425', )(in0Den98425)
Min64552 = keras.layers.Minimum(name = 'Min64552', )([Con72906,Den98425])
Res66776 = keras.layers.Reshape((4, 12), name = 'Res66776', )(Min64552)
Zer23823 = keras.layers.ZeroPadding1D(padding=((4, 0)), name = 'Zer23823', )(Res66776)
Up_29886 = keras.layers.UpSampling1D(size=(2), name = 'Up_29886', )(in0Up_29886)
Con5446 = keras.layers.Concatenate(axis=2, name = 'Con5446', )([Up_29886,in0Con5446])
Add96687 = keras.layers.Add(name = 'Add96687', )([Zer23823,Con5446])
Res87036 = keras.layers.Reshape((8, 12, 1), name = 'Res87036', )(Add96687)
Res28836 = keras.layers.Reshape((8, 12, 1, 1), name = 'Res28836', )(Res87036)
Cro5701 = keras.layers.Cropping3D(cropping=((1, 1), (0, 0), (0, 0)), name = 'Cro5701', )(in0Cro5701)
Zer79788 = keras.layers.ZeroPadding3D(padding=((7, 0), (11, 0), (0, 0)), name = 'Zer79788', )(Cro5701)
Max11956 = keras.layers.Maximum(name = 'Max11956', )([Res28836,Zer79788])
model = tf.keras.models.Model(inputs=[in0Dot99334,in1Dot99334,in0Con72906,in0Den98425,in0Up_29886,in0Con5446,in0Cro5701], outputs=Max11956)
w = model.get_layer('Den98425').get_weights() 
w[0] = np.array([[0.3144, 0.3186, 0.1518, 0.1083], [0.712, 0.5622, 0.6616, 0.0203], [0.9841, 0.4809, 0.8119, 0.5929], [0.3642, 0.5119, 0.2942, 0.7269]])
w[1] = np.array([0.9519, 0.8875, 0.745, 0.8298])
model.get_layer('Den98425').set_weights(w) 
in0Dot99334 = tf.constant([[[0.1469, 0.603, 0.855], [0.5882, 0.6284, 0.2761], [0.8336, 0.8465, 0.2838]]])
in1Dot99334 = tf.constant([[[0.6268, 0.4301, 0.2898], [0.8592, 0.1193, 0.2555], [0.8416, 0.8492, 0.6601]]])
in0Con72906 = tf.constant([[[[0.1958, 0.2153, 0.3346], [0.5114, 0.1799, 0.4267], [0.6875, 0.0022, 0.0912]], [[0.7396, 0.2097, 0.846], [0.1317, 0.9377, 0.5646], [0.2749, 0.112, 0.4294]], [[0.5874, 0.0206, 0.8264], [0.4805, 0.1168, 0.1785], [0.501, 0.1253, 0.6484]], [[0.6123, 0.4498, 0.7813], [0.8118, 0.2815, 0.5618], [0.876, 0.805, 0.421]]]])
in0Den98425 = tf.constant([[[[0.4735, 0.2316, 0.6175, 0.4247], [0.0065, 0.2488, 0.9738, 0.3822], [0.2059, 0.2497, 0.8345, 0.6814]], [[0.5937, 0.3397, 0.1276, 0.4464], [0.0842, 0.9145, 0.4165, 0.9461], [0.1705, 0.0592, 0.81, 0.5464]], [[0.9232, 0.6344, 0.6046, 0.3325], [0.2892, 0.7522, 0.7597, 0.7983], [0.1007, 0.7401, 0.7472, 0.5371]], [[0.4111, 0.6231, 0.5338, 0.4427], [0.2566, 0.6173, 0.4591, 0.5303], [0.7107, 0.1195, 0.5514, 0.1201]]]])
in0Up_29886 = tf.constant([[[1.1476, 1.2024, 1.388, 1.7932], [1.9567, 1.6822, 1.9521, 1.2247], [1.5646, 1.4088, 1.0631, 1.7262], [1.5076, 1.5517, 1.8651, 1.0892]]])
in0Con5446 = tf.constant([[[0.7942, 0.4418, 0.946, 0.195, 0.2522, 0.3078, 0.4661, 0.8345], [0.2636, 0.9512, 0.8069, 0.382, 0.9489, 0.9072, 0.463, 0.0646], [0.3386, 0.4146, 0.0076, 0.5056, 0.4876, 0.8631, 0.5927, 0.1011], [0.2304, 0.3092, 0.1576, 0.6612, 0.5913, 0.1795, 0.5889, 0.5226], [0.8254, 0.7834, 0.1741, 0.611, 0.5615, 0.5358, 0.8296, 0.4761], [0.5399, 0.8573, 0.7437, 0.1535, 0.9958, 0.5625, 0.2758, 0.8168], [0.8241, 0.1725, 0.1773, 0.5748, 0.2819, 0.9966, 0.4611, 0.4427], [0.1313, 0.0148, 0.5346, 0.4682, 0.8091, 0.5643, 0.5344, 0.2319]]])
in0Cro5701 = tf.constant([[[[[1.4766]]], [[[1.2994]]], [[[1.547]]]]])
print (np.array2string(model.predict([in0Dot99334,in1Dot99334,in0Con72906,in0Den98425,in0Up_29886,in0Con5446,in0Cro5701],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max11956.png')

LDot99334 = dot_layer([[[0.1469, 0.603, 0.855], [0.5882, 0.6284, 0.2761], [0.8336, 0.8465, 0.2838]]], [[[0.6268, 0.4301, 0.2898], [0.8592, 0.1193, 0.2555], [0.8416, 0.8492, 0.6601]]], 2, 2, Dot99334), 
LRes89429 = reshape_layer(Dot99334, [3, 3, 1], Res89429), 
LZer16081 = zero_padding2D_layer(Res89429, 1, 0, 0, 0, Zer16081), 
LCon72906 = concatenate_layer([Zer16081,[[[[0.1958, 0.2153, 0.3346], [0.5114, 0.1799, 0.4267], [0.6875, 0.0022, 0.0912]], [[0.7396, 0.2097, 0.846], [0.1317, 0.9377, 0.5646], [0.2749, 0.112, 0.4294]], [[0.5874, 0.0206, 0.8264], [0.4805, 0.1168, 0.1785], [0.501, 0.1253, 0.6484]], [[0.6123, 0.4498, 0.7813], [0.8118, 0.2815, 0.5618], [0.876, 0.805, 0.421]]]]], 3, Con72906), 
LDen98425 = dense_layer([[[[0.4735, 0.2316, 0.6175, 0.4247], [0.0065, 0.2488, 0.9738, 0.3822], [0.2059, 0.2497, 0.8345, 0.6814]], [[0.5937, 0.3397, 0.1276, 0.4464], [0.0842, 0.9145, 0.4165, 0.9461], [0.1705, 0.0592, 0.81, 0.5464]], [[0.9232, 0.6344, 0.6046, 0.3325], [0.2892, 0.7522, 0.7597, 0.7983], [0.1007, 0.7401, 0.7472, 0.5371]], [[0.4111, 0.6231, 0.5338, 0.4427], [0.2566, 0.6173, 0.4591, 0.5303], [0.7107, 0.1195, 0.5514, 0.1201]]]], [[0.3144, 0.3186, 0.1518, 0.1083], [0.712, 0.5622, 0.6616, 0.0203], [0.9841, 0.4809, 0.8119, 0.5929], [0.3642, 0.5119, 0.2942, 0.7269]],[0.9519, 0.8875, 0.745, 0.8298], Den98425), 
LMin64552 = minimum_layer([Con72906,Den98425], Min64552), 
LRes66776 = reshape_layer(Min64552, [4, 12], Res66776), 
LZer23823 = zero_padding1D_layer(Res66776, 4, 0, Zer23823), 
LUp_29886 = up_sampling1D_layer([[[1.1476, 1.2024, 1.388, 1.7932], [1.9567, 1.6822, 1.9521, 1.2247], [1.5646, 1.4088, 1.0631, 1.7262], [1.5076, 1.5517, 1.8651, 1.0892]]], 2, Up_29886), 
LCon5446 = concatenate_layer([Up_29886,[[[0.7942, 0.4418, 0.946, 0.195, 0.2522, 0.3078, 0.4661, 0.8345], [0.2636, 0.9512, 0.8069, 0.382, 0.9489, 0.9072, 0.463, 0.0646], [0.3386, 0.4146, 0.0076, 0.5056, 0.4876, 0.8631, 0.5927, 0.1011], [0.2304, 0.3092, 0.1576, 0.6612, 0.5913, 0.1795, 0.5889, 0.5226], [0.8254, 0.7834, 0.1741, 0.611, 0.5615, 0.5358, 0.8296, 0.4761], [0.5399, 0.8573, 0.7437, 0.1535, 0.9958, 0.5625, 0.2758, 0.8168], [0.8241, 0.1725, 0.1773, 0.5748, 0.2819, 0.9966, 0.4611, 0.4427], [0.1313, 0.0148, 0.5346, 0.4682, 0.8091, 0.5643, 0.5344, 0.2319]]]], 2, Con5446), 
LAdd96687 = add_layer([Zer23823,Con5446], Add96687), 
LRes87036 = reshape_layer(Add96687, [8, 12, 1], Res87036), 
LRes28836 = reshape_layer(Res87036, [8, 12, 1, 1], Res28836), 
LCro5701 = cropping3D_layer([[[[[1.4766]]], [[[1.2994]]], [[[1.547]]]]], 1, 1, 0, 0, 0, 0, Cro5701), 
LZer79788 = zero_padding3D_layer(Cro5701, 7, 0, 11, 0, 0, 0, Zer79788), 
LMax11956 = maximum_layer([Res28836,Zer79788], Max11956), 
exec_layers([LDot99334,LRes89429,LZer16081,LCon72906,LDen98425,LMin64552,LRes66776,LZer23823,LUp_29886,LCon5446,LAdd96687,LRes87036,LRes28836,LCro5701,LZer79788,LMax11956],["Dot99334","Res89429","Zer16081","Con72906","Den98425","Min64552","Res66776","Zer23823","Up_29886","Con5446","Add96687","Res87036","Res28836","Cro5701","Zer79788","Max11956"],Max11956,"Max11956")

Actual (Unparsed): [[[[[1.1476001]], [[1.2024000]], [[1.3880000]], [[1.7932000]], [[0.7942000]], [[0.4418000]], [[0.9460000]], [[0.1950000]], [[0.2522000]], [[0.3078000]], [[0.4661000]], [[0.8345000]]], [[[1.1476001]], [[1.2024000]], [[1.3880000]], [[1.7932000]], [[0.2636000]], [[0.9512000]], [[0.8069000]], [[0.3820000]], [[0.9489000]], [[0.9072000]], [[0.4630000]], [[0.0646000]]], [[[1.9567000]], [[1.6822000]], [[1.9521000]], [[1.2247000]], [[0.3386000]], [[0.4146000]], [[0.0076000]], [[0.5056000]], [[0.4876000]], [[0.8631000]], [[0.5927000]], [[0.1011000]]], [[[1.9567000]], [[1.6822000]], [[1.9521000]], [[1.2247000]], [[0.2304000]], [[0.3092000]], [[0.1576000]], [[0.6612000]], [[0.5913000]], [[0.1795000]], [[0.5889000]], [[0.5226000]]], [[[1.5646000]], [[1.6046000]], [[1.2784000]], [[2.0608000]], [[0.8254000]], [[1.2948000]], [[0.3540000]], [[1.0377000]], [[0.5615000]], [[1.2233000]], [[0.8318000]], [[0.5673000]]], [[[2.1638062]], [[2.1484000]], [[1.2728000]], [[2.5722000]], [[0.9565069]], [[0.9890000]], [[1.6814000]], [[0.7181000]], [[2.1958841]], [[0.8374000]], [[0.3878000]], [[1.2462000]]], [[[2.2265723]], [[2.1391000]], [[1.8857000]], [[1.9156000]], [[1.4749931]], [[0.6530000]], [[0.2941000]], [[0.7533000]], [[1.4928200]], [[1.4976000]], [[0.5864000]], [[1.0911000]]], [[[2.4764253]], [[2.1640000]], [[2.3149000]], [[1.8705000]], [[1.0210275]], [[0.8266000]], [[0.8161000]], [[1.0300000]], [[2.4168419]], [[1.4403000]], [[1.3394000]], [[1.2994000]]]]]

Expected (Unparsed): [[[[[1.1476]],[[1.2024]],[[1.388]],[[1.7932]],[[0.7942]],[[0.4418]],[[0.946]],[[0.195]],[[0.2522]],[[0.3078]],[[0.4661]],[[0.8345]]],[[[1.1476]],[[1.2024]],[[1.388]],[[1.7932]],[[0.2636]],[[0.9512]],[[0.8069]],[[0.382]],[[0.9489]],[[0.9072]],[[0.463]],[[0.0646]]],[[[1.9567]],[[1.6822]],[[1.9521]],[[1.2247]],[[0.3386]],[[0.4146]],[[0.0076]],[[0.5056]],[[0.4876]],[[0.8631]],[[0.5927]],[[0.1011]]],[[[1.9567]],[[1.6822]],[[1.9521]],[[1.2247]],[[0.2304]],[[0.3092]],[[0.1576]],[[0.6612]],[[0.5913]],[[0.1795]],[[0.5889]],[[0.5226]]],[[[1.5646]],[[1.6046]],[[1.2784]],[[2.0608]],[[0.8254]],[[1.2948]],[[0.354]],[[1.0377]],[[0.5615]],[[1.2233]],[[0.8318]],[[0.5673]]],[[[2.16380622]],[[2.1484]],[[1.2728]],[[2.5722]],[[0.9565068800000001]],[[0.989]],[[1.6814]],[[0.7181]],[[2.19588414]],[[0.8373999999999999]],[[0.3878]],[[1.2462]]],[[[2.22657238]],[[2.1391]],[[1.8857]],[[1.9156]],[[1.47499311]],[[0.653]],[[0.29410000000000003]],[[0.7533]],[[1.4928200100000002]],[[1.4976]],[[0.5864]],[[1.0911]]],[[[2.4764253700000003]],[[2.164]],[[2.3148999999999997]],[[1.8704999999999998]],[[1.02102747]],[[0.8266]],[[0.8160999999999999]],[[1.03]],[[2.4168419400000003]],[[1.4403000000000001]],[[1.3394]],[[1.2994]]]]]

Actual:   [[[[[1.1477]], [[1.2024]], [[1.388]], [[1.7932]], [[0.7942]], [[0.4418]], [[0.946]], [[0.195]], [[0.2522]], [[0.3078]], [[0.4661]], [[0.8345]]], [[[1.1477]], [[1.2024]], [[1.388]], [[1.7932]], [[0.2636]], [[0.9512]], [[0.8069]], [[0.382]], [[0.9489]], [[0.9072]], [[0.463]], [[0.0646]]], [[[1.9567]], [[1.6822]], [[1.9521]], [[1.2247]], [[0.3386]], [[0.4146]], [[0.0076]], [[0.5056]], [[0.4876]], [[0.8631]], [[0.5927]], [[0.1011]]], [[[1.9567]], [[1.6822]], [[1.9521]], [[1.2247]], [[0.2304]], [[0.3092]], [[0.1576]], [[0.6612]], [[0.5913]], [[0.1795]], [[0.5889]], [[0.5226]]], [[[1.5646]], [[1.6046]], [[1.2784]], [[2.0608]], [[0.8254]], [[1.2948]], [[0.354]], [[1.0377]], [[0.5615]], [[1.2233]], [[0.8318]], [[0.5673]]], [[[2.1639]], [[2.1484]], [[1.2728]], [[2.5722]], [[0.9566]], [[0.989]], [[1.6814]], [[0.7181]], [[2.1959]], [[0.8374]], [[0.3878]], [[1.2462]]], [[[2.2266]], [[2.1391]], [[1.8857]], [[1.9156]], [[1.475]], [[0.653]], [[0.2941]], [[0.7533]], [[1.4929]], [[1.4976]], [[0.5864]], [[1.0911]]], [[[2.4765]], [[2.164]], [[2.3149]], [[1.8705]], [[1.0211]], [[0.8266]], [[0.8161]], [[1.03]], [[2.4169]], [[1.4403]], [[1.3394]], [[1.2994]]]]]

Expected: [[[[[1.1476]], [[1.2024]], [[1.388]], [[1.7932]], [[0.7942]], [[0.4418]], [[0.946]], [[0.195]], [[0.2522]], [[0.3078]], [[0.4661]], [[0.8345]]], [[[1.1476]], [[1.2024]], [[1.388]], [[1.7932]], [[0.2636]], [[0.9512]], [[0.8069]], [[0.382]], [[0.9489]], [[0.9072]], [[0.463]], [[0.0646]]], [[[1.9567]], [[1.6822]], [[1.9521]], [[1.2247]], [[0.3386]], [[0.4146]], [[0.0076]], [[0.5056]], [[0.4876]], [[0.8631]], [[0.5927]], [[0.1011]]], [[[1.9567]], [[1.6822]], [[1.9521]], [[1.2247]], [[0.2304]], [[0.3092]], [[0.1576]], [[0.6612]], [[0.5913]], [[0.1795]], [[0.5889]], [[0.5226]]], [[[1.5646]], [[1.6046]], [[1.2784]], [[2.0608]], [[0.8254]], [[1.2948]], [[0.354]], [[1.0377]], [[0.5615]], [[1.2233]], [[0.8318]], [[0.5673]]], [[[2.1639]], [[2.1484]], [[1.2728]], [[2.5722]], [[0.9566]], [[0.989]], [[1.6814]], [[0.7181]], [[2.1959]], [[0.8374]], [[0.3878]], [[1.2462]]], [[[2.2266]], [[2.1391]], [[1.8857]], [[1.9156]], [[1.475]], [[0.653]], [[0.2942]], [[0.7533]], [[1.4929]], [[1.4976]], [[0.5864]], [[1.0911]]], [[[2.4765]], [[2.164]], [[2.3149]], [[1.8705]], [[1.0211]], [[0.8266]], [[0.8161]], [[1.03]], [[2.4169]], [[1.4404]], [[1.3394]], [[1.2994]]]]]