import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub34041 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in1Sub34041 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in0Mul39154 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in1Mul39154 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Con44594 = tf.keras.layers.Input(shape=([3, 3, 3, 2]))

Sub34041 = keras.layers.Subtract(name = 'Sub34041', )([in0Sub34041,in1Sub34041])
Mul39154 = keras.layers.Multiply(name = 'Mul39154', )([in0Mul39154,in1Mul39154])
Zer49574 = keras.layers.ZeroPadding3D(padding=((2, 0), (1, 0), (2, 0)), name = 'Zer49574', )(Mul39154)
Con44594 = keras.layers.Concatenate(axis=4, name = 'Con44594', )([Zer49574,in0Con44594])
Mul99311 = keras.layers.Multiply(name = 'Mul99311', )([Sub34041,Con44594])
model = tf.keras.models.Model(inputs=[in0Sub34041,in1Sub34041,in0Mul39154,in1Mul39154,in0Con44594], outputs=Mul99311)
in0Sub34041 = tf.constant([[[[[0.2928, 0.7357, 0.0353], [0.5451, 0.0382, 0.83], [0.8497, 0.0388, 0.3084]], [[0.4725, 0.6857, 0.7602], [0.2111, 0.9159, 0.9514], [0.1516, 0.4473, 0.6976]], [[0.2846, 0.3428, 0.5705], [0.642, 0.4831, 0.9407], [0.0213, 0.8391, 0.3204]]], [[[0.0626, 0.4405, 0.12], [0.059, 0.6311, 0.6718], [0.9024, 0.5802, 0.6287]], [[0.4221, 0.5281, 0.3145], [0.093, 0.7655, 0.382], [0.5719, 0.1207, 0.545]], [[0.1446, 0.4497, 0.0459], [0.2607, 0.5065, 0.2255], [0.2594, 0.211, 0.5517]]], [[[0.0303, 0.844, 0.4993], [0.8046, 0.6426, 0.3145], [0.0124, 0.624, 0.4409]], [[0.2711, 0.6329, 0.2322], [0.9141, 0.7041, 0.7548], [0.1649, 0.6348, 0.0179]], [[0.6393, 0.3462, 0.2762], [0.583, 0.269, 0.3037], [0.075, 0.7703, 0.1368]]]]])
in1Sub34041 = tf.constant([[[[[0.2664, 0.1228, 0.9734], [0.8419, 0.0177, 0.0114], [0.0823, 0.4531, 0.41]], [[0.6451, 0.2374, 0.3503], [0.3911, 0.4878, 0.4607], [0.6559, 0.2415, 0.1177]], [[0.9421, 0.4278, 0.4755], [0.7239, 0.3362, 0.5026], [0.5218, 0.1004, 0.4191]]], [[[0.2482, 0.8641, 0.7665], [0.848, 0.5151, 0.7984], [0.0747, 0.5674, 0.7572]], [[0.3432, 0.5548, 0.6164], [0.6383, 0.1222, 0.2865], [0.7024, 0.4333, 0.2354]], [[0.7941, 0.9303, 0.1879], [0.2313, 0.8119, 0.5005], [0.912, 0.2957, 0.2823]]], [[[0.0242, 0.0448, 0.6891], [0.1179, 0.3408, 0.0533], [0.2754, 0.5838, 0.372]], [[0.3045, 0.7146, 0.6363], [0.5939, 0.2854, 0.5166], [0.1957, 0.1714, 0.8361]], [[0.6941, 0.1201, 0.6593], [0.3074, 0.1906, 0.6004], [0.4471, 0.4605, 0.612]]]]])
in0Mul39154 = tf.constant([[[[[0.8033]], [[0.8022]]]]])
in1Mul39154 = tf.constant([[[[[0.4812]], [[0.043]]]]])
in0Con44594 = tf.constant([[[[[0.252, 0.3262], [0.3678, 0.0898], [0.9783, 0.1389]], [[0.3176, 0.5528], [0.7965, 0.1081], [0.4277, 0.3769]], [[0.3519, 0.2474], [0.9284, 0.2828], [0.6877, 0.5574]]], [[[0.4792, 0.9801], [0.0635, 0.1855], [0.4482, 0.1039]], [[0.5378, 0.5388], [0.3133, 0.886], [0.2784, 0.4169]], [[0.3566, 0.8708], [0.7118, 0.0059], [0.0521, 0.9656]]], [[[0.1725, 0.0117], [0.6737, 0.2547], [0.6742, 0.3014]], [[0.6863, 0.2987], [0.7843, 0.1671], [0.4282, 0.092]], [[0.3597, 0.7318], [0.4381, 0.4573], [0.0728, 0.0752]]]]])
print (np.array2string(model.predict([in0Sub34041,in1Sub34041,in0Mul39154,in1Mul39154,in0Con44594],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul99311.png')

LSub34041 = subtract_layer([[[[[0.2928, 0.7357, 0.0353], [0.5451, 0.0382, 0.83], [0.8497, 0.0388, 0.3084]], [[0.4725, 0.6857, 0.7602], [0.2111, 0.9159, 0.9514], [0.1516, 0.4473, 0.6976]], [[0.2846, 0.3428, 0.5705], [0.642, 0.4831, 0.9407], [0.0213, 0.8391, 0.3204]]], [[[0.0626, 0.4405, 0.12], [0.059, 0.6311, 0.6718], [0.9024, 0.5802, 0.6287]], [[0.4221, 0.5281, 0.3145], [0.093, 0.7655, 0.382], [0.5719, 0.1207, 0.545]], [[0.1446, 0.4497, 0.0459], [0.2607, 0.5065, 0.2255], [0.2594, 0.211, 0.5517]]], [[[0.0303, 0.844, 0.4993], [0.8046, 0.6426, 0.3145], [0.0124, 0.624, 0.4409]], [[0.2711, 0.6329, 0.2322], [0.9141, 0.7041, 0.7548], [0.1649, 0.6348, 0.0179]], [[0.6393, 0.3462, 0.2762], [0.583, 0.269, 0.3037], [0.075, 0.7703, 0.1368]]]]], [[[[[0.2664, 0.1228, 0.9734], [0.8419, 0.0177, 0.0114], [0.0823, 0.4531, 0.41]], [[0.6451, 0.2374, 0.3503], [0.3911, 0.4878, 0.4607], [0.6559, 0.2415, 0.1177]], [[0.9421, 0.4278, 0.4755], [0.7239, 0.3362, 0.5026], [0.5218, 0.1004, 0.4191]]], [[[0.2482, 0.8641, 0.7665], [0.848, 0.5151, 0.7984], [0.0747, 0.5674, 0.7572]], [[0.3432, 0.5548, 0.6164], [0.6383, 0.1222, 0.2865], [0.7024, 0.4333, 0.2354]], [[0.7941, 0.9303, 0.1879], [0.2313, 0.8119, 0.5005], [0.912, 0.2957, 0.2823]]], [[[0.0242, 0.0448, 0.6891], [0.1179, 0.3408, 0.0533], [0.2754, 0.5838, 0.372]], [[0.3045, 0.7146, 0.6363], [0.5939, 0.2854, 0.5166], [0.1957, 0.1714, 0.8361]], [[0.6941, 0.1201, 0.6593], [0.3074, 0.1906, 0.6004], [0.4471, 0.4605, 0.612]]]]], Sub34041), 
LMul39154 = multiply_layer([[[[[[0.8033]], [[0.8022]]]]], [[[[[0.4812]], [[0.043]]]]]], Mul39154), 
LZer49574 = zero_padding3D_layer(Mul39154, 2, 0, 1, 0, 2, 0, Zer49574), 
LCon44594 = concatenate_layer([Zer49574,[[[[[0.252, 0.3262], [0.3678, 0.0898], [0.9783, 0.1389]], [[0.3176, 0.5528], [0.7965, 0.1081], [0.4277, 0.3769]], [[0.3519, 0.2474], [0.9284, 0.2828], [0.6877, 0.5574]]], [[[0.4792, 0.9801], [0.0635, 0.1855], [0.4482, 0.1039]], [[0.5378, 0.5388], [0.3133, 0.886], [0.2784, 0.4169]], [[0.3566, 0.8708], [0.7118, 0.0059], [0.0521, 0.9656]]], [[[0.1725, 0.0117], [0.6737, 0.2547], [0.6742, 0.3014]], [[0.6863, 0.2987], [0.7843, 0.1671], [0.4282, 0.092]], [[0.3597, 0.7318], [0.4381, 0.4573], [0.0728, 0.0752]]]]]], 4, Con44594), 
LMul99311 = multiply_layer([Sub34041,Con44594], Mul99311), 
exec_layers([LSub34041,LMul39154,LZer49574,LCon44594,LMul99311],["Sub34041","Mul39154","Zer49574","Con44594","Mul99311"],Mul99311,"Mul99311")

Actual (Unparsed): [[[[[0.0000000, 0.1544508, -0.3060082], [-0.0000000, 0.0075399, 0.0735103], [0.0000000, -0.4053097, -0.0141122]], [[-0.0000000, 0.1423801, 0.2265927], [-0.0000000, 0.3409817, 0.0530447], [-0.0000000, 0.0880207, 0.2185643]], [[-0.0000000, -0.0299115, 0.0235030], [-0.0000000, 0.1363820, 0.1238947], [-0.0000000, 0.5080040, -0.0550154]]], [[[-0.0000000, -0.2029891, -0.6336346], [-0.0000000, 0.0073660, -0.0234843], [0.0000000, 0.0057370, -0.0133511]], [[0.0000000, -0.0143592, -0.1626637], [-0.0000000, 0.2015459, 0.0846130], [-0.0000000, -0.0870278, 0.1290722]], [[-0.0000000, -0.1713820, -0.1236536], [0.0000000, -0.2173837, -0.0016225], [-0.0000000, -0.0044129, 0.2601326]]], [[[0.0000000, 0.1378620, -0.0022207], [0.0000000, 0.2033227, 0.0665276], [-0.0000000, 0.0271028, 0.0207665]], [[-0.0000000, -0.0560707, -0.1207047], [0.0000000, 0.3283864, 0.0398032], [-0.0119057, 0.1984279, -0.0752744]], [[-0.0000000, 0.0813282, -0.2803526], [0.0000000, 0.0343470, -0.1356809], [-0.0128354, 0.0225534, -0.0357350]]]]]

Expected (Unparsed): [[[[[0.0,0.1544508,-0.30600822],[-0.0,0.0075398999999999996,0.07351028],[0.0,-0.40530969,-0.014112239999999995]],[[-0.0,0.14238008,0.22659271999999997],[-0.0,0.34098165,0.05304467],[-0.0,0.08802066,0.21856430999999998]],[[-0.0,-0.029911500000000008,0.023503000000000007],[-0.0,0.13638195999999997,0.12389467999999998],[-0.0,0.50800399,-0.055015379999999975]]],[[[-0.0,-0.20298912,-0.63363465],[-0.0,0.007365999999999999,-0.023484300000000007],[0.0,0.005736960000000015,-0.013351149999999996]],[[0.0,-0.01435925999999997,-0.16266371999999996],[-0.0,0.20154589,0.08461300000000002],[-0.0,-0.08702784,0.12907224]],[[-0.0,-0.17138196,-0.12365360000000002],[0.0,-0.21738372,-0.0016224999999999994],[-0.0,-0.004412870000000001,0.26013263999999997]]],[[[0.0,0.13786199999999998,-0.00222066],[0.0,0.20332265999999996,0.06652764],[-0.0,0.02710284000000001,0.020766460000000004]],[[-0.0,-0.056070709999999996,-0.12070467000000001],[0.0,0.32838640999999996,0.039803220000000014],[-0.01190567716800001,0.19842788000000003,-0.07527439999999999]],[[-0.0,0.08132817000000002,-0.28035258],[0.0,0.03434704000000001,-0.13568091000000002],[-0.01283544066,0.022553439999999998,-0.035735039999999996]]]]]

Actual:   [[[[[0, 0.1545, -0.306], [-0, 0.0076, 0.0736], [0, -0.4053, -0.0141]], [[-0, 0.1424, 0.2266], [-0, 0.341, 0.0531], [-0, 0.0881, 0.2186]], [[-0, -0.0299, 0.0236], [-0, 0.1364, 0.1239], [-0, 0.5081, -0.055]]], [[[-0, -0.2029, -0.6336], [-0, 0.0074, -0.0234], [0, 0.0058, -0.0133]], [[0, -0.0143, -0.1626], [-0, 0.2016, 0.0847], [-0, -0.087, 0.1291]], [[-0, -0.1713, -0.1236], [0, -0.2173, -0.0016], [-0, -0.0044, 0.2602]]], [[[0, 0.1379, -0.0022], [0, 0.2034, 0.0666], [-0, 0.0272, 0.0208]], [[-0, -0.056, -0.1207], [0, 0.3284, 0.0399], [-0.0119, 0.1985, -0.0752]], [[-0, 0.0814, -0.2803], [0, 0.0344, -0.1356], [-0.0128, 0.0226, -0.0357]]]]]

Expected: [[[[[0, 0.1545, -0.306], [-0, 0.0076, 0.0736], [0, -0.4053, -0.0141]], [[-0, 0.1424, 0.2266], [-0, 0.341, 0.0531], [-0, 0.0881, 0.2186]], [[-0, -0.0299, 0.0236], [-0, 0.1364, 0.1239], [-0, 0.5081, -0.055]]], [[[-0, -0.2029, -0.6336], [-0, 0.0074, -0.0234], [0, 0.0058, -0.0133]], [[0, -0.0143, -0.1626], [-0, 0.2016, 0.0847], [-0, -0.087, 0.1291]], [[-0, -0.1713, -0.1236], [0, -0.2173, -0.0016], [-0, -0.0044, 0.2602]]], [[[0, 0.1379, -0.0022], [0, 0.2034, 0.0666], [-0, 0.0272, 0.0208]], [[-0, -0.056, -0.1207], [0, 0.3284, 0.0399], [-0.0119, 0.1985, -0.0752]], [[-0, 0.0814, -0.2803], [0, 0.0344, -0.1356], [-0.0128, 0.0226, -0.0357]]]]]