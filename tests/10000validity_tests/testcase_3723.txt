import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul62463 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in1Mul62463 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in0Up_38678 = tf.keras.layers.Input(shape=([4, 1]))
in0Con87838 = tf.keras.layers.Input(shape=([3, 3, 2]))
in0Dot45798 = tf.keras.layers.Input(shape=([3, 3]))
in1Dot45798 = tf.keras.layers.Input(shape=([3, 3]))
in0Con2099 = tf.keras.layers.Input(shape=([3, 3, 3]))
in0Den74301 = tf.keras.layers.Input(shape=([2, 2, 4]))

Mul62463 = keras.layers.Multiply(name = 'Mul62463', )([in0Mul62463,in1Mul62463])
Res14672 = keras.layers.Reshape((2, 1, 2), name = 'Res14672', )(Mul62463)
Up_38678 = keras.layers.UpSampling1D(size=(1), name = 'Up_38678', )(in0Up_38678)
Res88697 = keras.layers.Reshape((2, 1, 2), name = 'Res88697', )(Up_38678)
Max40738 = keras.layers.Maximum(name = 'Max40738', )([Res14672,Res88697])
Zer51360 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer51360', )(Max40738)
Con87838 = keras.layers.Concatenate(axis=3, name = 'Con87838', )([Zer51360,in0Con87838])
Dot45798 = keras.layers.Dot(axes=(2, 1), name = 'Dot45798', )([in0Dot45798,in1Dot45798])
Res91449 = keras.layers.Reshape((3, 3, 1), name = 'Res91449', )(Dot45798)
Con2099 = keras.layers.Concatenate(axis=3, name = 'Con2099', )([Res91449,in0Con2099])
Den74301 = keras.layers.Dense(4,name = 'Den74301', )(in0Den74301)
Zer93012 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer93012', )(Den74301)
Min59526 = keras.layers.Minimum(name = 'Min59526', )([Con2099,Zer93012])
Ave97474 = keras.layers.Average(name = 'Ave97474', )([Con87838,Min59526])
model = tf.keras.models.Model(inputs=[in0Mul62463,in1Mul62463,in0Up_38678,in0Con87838,in0Dot45798,in1Dot45798,in0Con2099,in0Den74301], outputs=Ave97474)
w = model.get_layer('Den74301').get_weights() 
w[0] = np.array([[0.4061, 0.2184, 0.4687, 0.7777], [0.183, 0.7267, 0.6591, 0.265], [0.2941, 0.8523, 0.4031, 0.1037], [0.2363, 0.1696, 0.6144, 0.1108]])
w[1] = np.array([0.4187, 0.2746, 0.3596, 0.5521])
model.get_layer('Den74301').set_weights(w) 
in0Mul62463 = tf.constant([[[[[0.5035, 0.1673]]], [[[0.7753, 0.4202]]]]])
in1Mul62463 = tf.constant([[[[[0.6375, 0.2711]]], [[[0.2269, 0.4219]]]]])
in0Up_38678 = tf.constant([[[1.6021], [1.3365], [1.6681], [1.5846]]])
in0Con87838 = tf.constant([[[[0.0811, 0.453], [0.3228, 0.7473], [0.0751, 0.4138]], [[0.74, 0.9064], [0.9978, 0.8611], [0.9819, 0.4973]], [[0.1886, 0.3253], [0.0949, 0.307], [0.7406, 0.1705]]]])
in0Dot45798 = tf.constant([[[0.6081, 0.7665, 0.6129], [0.7919, 0.3992, 0.2476], [0.4938, 0.3395, 0.2747]]])
in1Dot45798 = tf.constant([[[0.8037, 0.829, 0.9727], [0.3363, 0.2571, 0.712], [0.9271, 0.9724, 0.6612]]])
in0Con2099 = tf.constant([[[[0.1637, 0.6219, 0.0549], [0.1267, 0.9422, 0.1739], [0.237, 0.4025, 0.3798]], [[0.6137, 0.787, 0.7385], [0.1995, 0.3481, 0.5066], [0.4082, 0.9368, 0.1887]], [[0.6862, 0.5274, 0.6835], [0.0949, 0.9215, 0.1487], [0.9818, 0.117, 0.4728]]]])
in0Den74301 = tf.constant([[[[0.273, 0.6941, 0.9363, 0.9674], [0.3745, 0.8197, 0.5042, 0.9141]], [[0.6912, 0.1635, 0.1012, 0.8851], [0.5002, 0.6943, 0.4773, 0.2763]]]])
print (np.array2string(model.predict([in0Mul62463,in1Mul62463,in0Up_38678,in0Con87838,in0Dot45798,in1Dot45798,in0Con2099,in0Den74301],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave97474.png')

LMul62463 = multiply_layer([[[[[[0.5035, 0.1673]]], [[[0.7753, 0.4202]]]]], [[[[[0.6375, 0.2711]]], [[[0.2269, 0.4219]]]]]], Mul62463), 
LRes14672 = reshape_layer(Mul62463, [2, 1, 2], Res14672), 
LUp_38678 = up_sampling1D_layer([[[1.6021], [1.3365], [1.6681], [1.5846]]], 1, Up_38678), 
LRes88697 = reshape_layer(Up_38678, [2, 1, 2], Res88697), 
LMax40738 = maximum_layer([Res14672,Res88697], Max40738), 
LZer51360 = zero_padding2D_layer(Max40738, 1, 0, 2, 0, Zer51360), 
LCon87838 = concatenate_layer([Zer51360,[[[[0.0811, 0.453], [0.3228, 0.7473], [0.0751, 0.4138]], [[0.74, 0.9064], [0.9978, 0.8611], [0.9819, 0.4973]], [[0.1886, 0.3253], [0.0949, 0.307], [0.7406, 0.1705]]]]], 3, Con87838), 
LDot45798 = dot_layer([[[0.6081, 0.7665, 0.6129], [0.7919, 0.3992, 0.2476], [0.4938, 0.3395, 0.2747]]], [[[0.8037, 0.829, 0.9727], [0.3363, 0.2571, 0.712], [0.9271, 0.9724, 0.6612]]], 2, 1, Dot45798), 
LRes91449 = reshape_layer(Dot45798, [3, 3, 1], Res91449), 
LCon2099 = concatenate_layer([Res91449,[[[[0.1637, 0.6219, 0.0549], [0.1267, 0.9422, 0.1739], [0.237, 0.4025, 0.3798]], [[0.6137, 0.787, 0.7385], [0.1995, 0.3481, 0.5066], [0.4082, 0.9368, 0.1887]], [[0.6862, 0.5274, 0.6835], [0.0949, 0.9215, 0.1487], [0.9818, 0.117, 0.4728]]]]], 3, Con2099), 
LDen74301 = dense_layer([[[[0.273, 0.6941, 0.9363, 0.9674], [0.3745, 0.8197, 0.5042, 0.9141]], [[0.6912, 0.1635, 0.1012, 0.8851], [0.5002, 0.6943, 0.4773, 0.2763]]]], [[0.4061, 0.2184, 0.4687, 0.7777], [0.183, 0.7267, 0.6591, 0.265], [0.2941, 0.8523, 0.4031, 0.1037], [0.2363, 0.1696, 0.6144, 0.1108]],[0.4187, 0.2746, 0.3596, 0.5521], Den74301), 
LZer93012 = zero_padding2D_layer(Den74301, 1, 0, 1, 0, Zer93012), 
LMin59526 = minimum_layer([Con2099,Zer93012], Min59526), 
LAve97474 = average_layer([Con87838,Min59526], Ave97474), 
exec_layers([LMul62463,LRes14672,LUp_38678,LRes88697,LMax40738,LZer51360,LCon87838,LDot45798,LRes91449,LCon2099,LDen74301,LZer93012,LMin59526,LAve97474],["Mul62463","Res14672","Up_38678","Res88697","Max40738","Zer51360","Con87838","Dot45798","Res91449","Con2099","Den74301","Zer93012","Min59526","Ave97474"],Ave97474,"Ave97474")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0405500, 0.2265000], [0.0000000, 0.0000000, 0.1614000, 0.3736500], [0.0000000, 0.0000000, 0.0375500, 0.2069000]], [[0.0000000, 0.0000000, 0.3700000, 0.4532000], [0.4999428, 0.0997500, 0.6729500, 0.6838500], [1.3435883, 0.8723500, 0.9593500, 0.3430000]], [[0.0000000, 0.0000000, 0.0943000, 0.1626500], [0.3818820, 0.0474500, 0.5082000, 0.2278500], [1.2858875, 1.2832000, 0.4288000, 0.3216500]]]]

Expected (Unparsed): [[[[0,0,0.04055,0.2265],[0,0,0.1614,0.37365],[0,0,0.03755,0.2069]],[[0,0,0.37,0.4532],[0.49994283,0.09975,0.67295,0.6838500000000001],[1.3435883,0.87235,0.9593499999999999,0.343]],[[0,0,0.0943,0.16265],[0.381881965,0.04745,0.5082,0.22785],[1.28588745,1.2832,0.4288,0.32165]]]]

Actual:   [[[[0, 0, 0.0406, 0.2265], [0, 0, 0.1614, 0.3737], [0, 0, 0.0376, 0.2069]], [[0, 0, 0.37, 0.4532], [0.5, 0.0998, 0.673, 0.6839], [1.3436, 0.8724, 0.9594, 0.343]], [[0, 0, 0.0943, 0.1627], [0.3819, 0.0475, 0.5082, 0.2279], [1.2859, 1.2832, 0.4288, 0.3217]]]]

Expected: [[[[0, 0, 0.0406, 0.2265], [0, 0, 0.1614, 0.3737], [0, 0, 0.0376, 0.2069]], [[0, 0, 0.37, 0.4532], [0.5, 0.0998, 0.673, 0.6839], [1.3436, 0.8724, 0.9594, 0.343]], [[0, 0, 0.0943, 0.1627], [0.3819, 0.0475, 0.5082, 0.2279], [1.2859, 1.2832, 0.4288, 0.3217]]]]