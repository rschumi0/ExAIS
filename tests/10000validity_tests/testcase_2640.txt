import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub87001 = tf.keras.layers.Input(shape=([3, 2, 3]))
in1Sub87001 = tf.keras.layers.Input(shape=([3, 2, 3]))
in0Max91556 = tf.keras.layers.Input(shape=([1, 2]))
in1Max91556 = tf.keras.layers.Input(shape=([1, 2]))
in0Con22293 = tf.keras.layers.Input(shape=([17]))

Sub87001 = keras.layers.Subtract(name = 'Sub87001', )([in0Sub87001,in1Sub87001])
Res59760 = keras.layers.Reshape((3, 6), name = 'Res59760', )(Sub87001)
Fla96086 = keras.layers.Flatten(name = 'Fla96086', )(Res59760)
Max91556 = keras.layers.Maximum(name = 'Max91556', )([in0Max91556,in1Max91556])
Res72141 = keras.layers.Reshape((1, 2, 1), name = 'Res72141', )(Max91556)
Res97200 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res97200', )(Res72141)
Glo50602 = keras.layers.GlobalAveragePooling3D(name = 'Glo50602', )(Res97200)
Con22293 = keras.layers.Concatenate(axis=1, name = 'Con22293', )([Glo50602,in0Con22293])
Mul10016 = keras.layers.Multiply(name = 'Mul10016', )([Fla96086,Con22293])
model = tf.keras.models.Model(inputs=[in0Sub87001,in1Sub87001,in0Max91556,in1Max91556,in0Con22293], outputs=Mul10016)
in0Sub87001 = tf.constant([[[[0.0682, 0.5156, 0.2328], [0.8986, 0.8757, 0.5022]], [[0.2829, 0.4337, 0.6387], [0.9136, 0.858, 0.3411]], [[0.9207, 0.3929, 0.1959], [0.4879, 0.9523, 0.0182]]]])
in1Sub87001 = tf.constant([[[[0.9472, 0.5985, 0.6125], [0.6576, 0.6758, 0.397]], [[0.9273, 0.0816, 0.4346], [0.8557, 0.5809, 0.5701]], [[0.4382, 0.1661, 0.8401], [0.9199, 0.0941, 0.6665]]]])
in0Max91556 = tf.constant([[[0.1159, 0.0841]]])
in1Max91556 = tf.constant([[[0.2999, 0.2434]]])
in0Con22293 = tf.constant([[0.2394, 0.152, 0.7202, 0.7097, 0.7179, 0.4692, 0.6054, 0.7882, 0.9691, 0.2173, 0.1782, 0.5818, 0.6351, 0.5913, 0.2546, 0.1981, 0.66]])
print (np.array2string(model.predict([in0Sub87001,in1Sub87001,in0Max91556,in1Max91556,in0Con22293],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul10016.png')

LSub87001 = subtract_layer([[[[0.0682, 0.5156, 0.2328], [0.8986, 0.8757, 0.5022]], [[0.2829, 0.4337, 0.6387], [0.9136, 0.858, 0.3411]], [[0.9207, 0.3929, 0.1959], [0.4879, 0.9523, 0.0182]]]], [[[[0.9472, 0.5985, 0.6125], [0.6576, 0.6758, 0.397]], [[0.9273, 0.0816, 0.4346], [0.8557, 0.5809, 0.5701]], [[0.4382, 0.1661, 0.8401], [0.9199, 0.0941, 0.6665]]]], Sub87001), 
LRes59760 = reshape_layer(Sub87001, [3, 6], Res59760), 
LFla96086 = flatten_layer(Res59760, Fla96086), 
LMax91556 = maximum_layer([[[[0.1159, 0.0841]]], [[[0.2999, 0.2434]]]], Max91556), 
LRes72141 = reshape_layer(Max91556, [1, 2, 1], Res72141), 
LRes97200 = reshape_layer(Res72141, [1, 2, 1, 1], Res97200), 
LGlo50602 = global_average_pooling3D_layer(Res97200, Glo50602), 
LCon22293 = concatenate_layer([Glo50602,[[0.2394, 0.152, 0.7202, 0.7097, 0.7179, 0.4692, 0.6054, 0.7882, 0.9691, 0.2173, 0.1782, 0.5818, 0.6351, 0.5913, 0.2546, 0.1981, 0.66]]], 1, Con22293), 
LMul10016 = multiply_layer([Fla96086,Con22293], Mul10016), 
exec_layers([LSub87001,LRes59760,LFla96086,LMax91556,LRes72141,LRes97200,LGlo50602,LCon22293,LMul10016],["Sub87001","Res59760","Fla96086","Max91556","Res72141","Res97200","Glo50602","Con22293","Mul10016"],Mul10016,"Mul10016")

Actual (Unparsed): [[-0.2387803, -0.0198463, -0.0577144, 0.1735682, 0.1418690, 0.0755231, -0.3023525, 0.2131613, 0.1608716, 0.0561109, 0.0602138, -0.0408078, 0.2807185, 0.1440407, -0.3809155, -0.1099872, 0.1700094, -0.4278780]]

Expected (Unparsed): [[-0.23878035,-0.019846260000000022,-0.057714400000000006,0.17356819999999998,0.14186903000000006,0.07552307999999996,-0.30235248000000003,0.21316134,0.16087162000000005,0.05611088999999995,0.06021383,-0.040807800000000005,0.2807185,0.14404068000000003,-0.38091546000000004,-0.10998720000000001,0.17000942000000002,-0.42787800000000004]]

Actual:   [[-0.2387, -0.0198, -0.0577, 0.1736, 0.1419, 0.0756, -0.3023, 0.2132, 0.1609, 0.0562, 0.0603, -0.0408, 0.2808, 0.1441, -0.3809, -0.1099, 0.1701, -0.4278]]

Expected: [[-0.2387, -0.0198, -0.0577, 0.1736, 0.1419, 0.0756, -0.3023, 0.2132, 0.1609, 0.0562, 0.0603, -0.0408, 0.2808, 0.1441, -0.3809, -0.1099, 0.1701, -0.4278]]