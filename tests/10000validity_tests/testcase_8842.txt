import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot19762 = tf.keras.layers.Input(shape=([2, 2]))
in1Dot19762 = tf.keras.layers.Input(shape=([2, 2]))
in0Con85529 = tf.keras.layers.Input(shape=([3, 3, 3, 1]))
in0Sub17259 = tf.keras.layers.Input(shape=([3, 3, 3, 2]))
in1Sub17259 = tf.keras.layers.Input(shape=([3, 3, 3, 2]))

Dot19762 = keras.layers.Dot(axes=(1, 1), name = 'Dot19762', )([in0Dot19762,in1Dot19762])
Res3315 = keras.layers.Reshape((2, 2, 1), name = 'Res3315', )(Dot19762)
Res41512 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res41512', )(Res3315)
Zer8719 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (2, 0)), name = 'Zer8719', )(Res41512)
Con85529 = keras.layers.Concatenate(axis=4, name = 'Con85529', )([Zer8719,in0Con85529])
Sub17259 = keras.layers.Subtract(name = 'Sub17259', )([in0Sub17259,in1Sub17259])
Mul42692 = keras.layers.Multiply(name = 'Mul42692', )([Con85529,Sub17259])
model = tf.keras.models.Model(inputs=[in0Dot19762,in1Dot19762,in0Con85529,in0Sub17259,in1Sub17259], outputs=Mul42692)
in0Dot19762 = tf.constant([[[0.8492, 0.2802], [0.0784, 0.1147]]])
in1Dot19762 = tf.constant([[[0.4202, 0.4068], [0.8153, 0.0624]]])
in0Con85529 = tf.constant([[[[[0.903], [0.1119], [0.4999]], [[0.9612], [0.2163], [0.6948]], [[0.4339], [0.7639], [0.439]]], [[[0.9688], [0.9755], [0.6963]], [[0.665], [0.462], [0.418]], [[0.5845], [0.5448], [0.2755]]], [[[0.067], [0.9873], [0.2266]], [[0.6093], [0.6578], [0.5442]], [[0.4092], [0.9571], [0.5265]]]]])
in0Sub17259 = tf.constant([[[[[0.9072, 0.2079], [0.8214, 0.9654], [0.1124, 0.9038]], [[0.0739, 0.4972], [0.1719, 0.9046], [0.7924, 0.9934]], [[0.2221, 0.6697], [0.7378, 0.2753], [0.5791, 0.5198]]], [[[0.1261, 0.18], [0.8036, 0.6046], [0.563, 0.9917]], [[0.5426, 0.9733], [0.9438, 0.3543], [0.8347, 0.9683]], [[0.5725, 0.6597], [0.6492, 0.9684], [0.8491, 0.3536]]], [[[0.7833, 0.8447], [0.7535, 0.0758], [0.8892, 0.3609]], [[0.0061, 0.0634], [0.3222, 0.1491], [0.2292, 0.7842]], [[0.7063, 0.8219], [0.6486, 0.3383], [0.5993, 0.2455]]]]])
in1Sub17259 = tf.constant([[[[[0.8792, 0.7694], [0.4042, 0.9888], [0.1177, 0.0606]], [[0.7256, 0.4909], [0.6314, 0.2553], [0.6931, 0.5437]], [[0.7754, 0.8381], [0.3899, 0.2716], [0.8968, 0.2409]]], [[[0.4123, 0.9124], [0.392, 0.0963], [0.7603, 0.3488]], [[0.871, 0.6503], [0.7139, 0.5234], [0.8543, 0.5693]], [[0.0836, 0.5802], [0.6745, 0.2267], [0.2423, 0.8202]]], [[[0.2937, 0.441], [0.6417, 0.3326], [0.5542, 0.5486]], [[0.0957, 0.4672], [0.9802, 0.6442], [0.9762, 0.1542]], [[0.6204, 0.7981], [0.6031, 0.4412], [0.5813, 0.0674]]]]])
print (np.array2string(model.predict([in0Dot19762,in1Dot19762,in0Con85529,in0Sub17259,in1Sub17259],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul42692.png')

LDot19762 = dot_layer([[[0.8492, 0.2802], [0.0784, 0.1147]]], [[[0.4202, 0.4068], [0.8153, 0.0624]]], 1, 1, Dot19762), 
LRes3315 = reshape_layer(Dot19762, [2, 2, 1], Res3315), 
LRes41512 = reshape_layer(Res3315, [2, 2, 1, 1], Res41512), 
LZer8719 = zero_padding3D_layer(Res41512, 1, 0, 1, 0, 2, 0, Zer8719), 
LCon85529 = concatenate_layer([Zer8719,[[[[[0.903], [0.1119], [0.4999]], [[0.9612], [0.2163], [0.6948]], [[0.4339], [0.7639], [0.439]]], [[[0.9688], [0.9755], [0.6963]], [[0.665], [0.462], [0.418]], [[0.5845], [0.5448], [0.2755]]], [[[0.067], [0.9873], [0.2266]], [[0.6093], [0.6578], [0.5442]], [[0.4092], [0.9571], [0.5265]]]]]], 4, Con85529), 
LSub17259 = subtract_layer([[[[[0.9072, 0.2079], [0.8214, 0.9654], [0.1124, 0.9038]], [[0.0739, 0.4972], [0.1719, 0.9046], [0.7924, 0.9934]], [[0.2221, 0.6697], [0.7378, 0.2753], [0.5791, 0.5198]]], [[[0.1261, 0.18], [0.8036, 0.6046], [0.563, 0.9917]], [[0.5426, 0.9733], [0.9438, 0.3543], [0.8347, 0.9683]], [[0.5725, 0.6597], [0.6492, 0.9684], [0.8491, 0.3536]]], [[[0.7833, 0.8447], [0.7535, 0.0758], [0.8892, 0.3609]], [[0.0061, 0.0634], [0.3222, 0.1491], [0.2292, 0.7842]], [[0.7063, 0.8219], [0.6486, 0.3383], [0.5993, 0.2455]]]]], [[[[[0.8792, 0.7694], [0.4042, 0.9888], [0.1177, 0.0606]], [[0.7256, 0.4909], [0.6314, 0.2553], [0.6931, 0.5437]], [[0.7754, 0.8381], [0.3899, 0.2716], [0.8968, 0.2409]]], [[[0.4123, 0.9124], [0.392, 0.0963], [0.7603, 0.3488]], [[0.871, 0.6503], [0.7139, 0.5234], [0.8543, 0.5693]], [[0.0836, 0.5802], [0.6745, 0.2267], [0.2423, 0.8202]]], [[[0.2937, 0.441], [0.6417, 0.3326], [0.5542, 0.5486]], [[0.0957, 0.4672], [0.9802, 0.6442], [0.9762, 0.1542]], [[0.6204, 0.7981], [0.6031, 0.4412], [0.5813, 0.0674]]]]], Sub17259), 
LMul42692 = multiply_layer([Con85529,Sub17259], Mul42692), 
exec_layers([LDot19762,LRes3315,LRes41512,LZer8719,LCon85529,LSub17259,LMul42692],["Dot19762","Res3315","Res41512","Zer8719","Con85529","Sub17259","Mul42692"],Mul42692,"Mul42692")

Actual (Unparsed): [[[[[0.0000000, -0.5070345], [0.0000000, -0.0026185], [-0.0000000, 0.4215157]], [[-0.0000000, 0.0060556], [-0.0000000, 0.1404436], [0.0000000, 0.3124516]], [[-0.0000000, -0.0730688], [0.0000000, 0.0028264], [-0.0000000, 0.1224371]]], [[[-0.0000000, -0.7095491], [0.0000000, 0.4958467], [-0.0000000, 0.4476513]], [[-0.0000000, 0.2147950], [0.0000000, -0.0781242], [-0.0082468, 0.1667820]], [[0.0000000, 0.0464677], [-0.0000000, 0.4040782], [0.2125904, -0.1285483]]], [[[0.0000000, 0.0270479], [0.0000000, -0.2535386], [0.0000000, -0.0425328]], [[-0.0000000, -0.2460354], [-0.0000000, -0.3256768], [-0.1578074, 0.3428460]], [[0.0000000, 0.0097390], [0.0000000, -0.0984856], [0.0021806, 0.0937696]]]]]

Expected (Unparsed): [[[[[0.0,-0.5070345],[0.0,-0.0026184599999999974],[-0.0,0.42151568000000006]],[[-0.0,0.006055559999999974],[-0.0,0.14044358999999998],[0.0,0.31245155999999996]],[[-0.0,-0.07306876],[0.0,0.0028264299999999857],[-0.0,0.12243710000000002]]],[[[-0.0,-0.7095491199999999],[0.0,0.49584665],[-0.0,0.44765127000000005]],[[-0.0,0.21479500000000004],[0.0,-0.07812419999999999],[-0.008246765855999979,0.166782]],[[0.0,0.04646774999999995],[-0.0,0.40407815999999996],[0.21259038969599997,-0.1285483]]],[[[0.0,0.027047900000000003],[0.0,-0.25353864000000004],[0.0,-0.04253281999999999]],[[-0.0,-0.24603533999999996],[-0.0,-0.32567678],[-0.15780744765,0.34284600000000004]],[[0.0,0.009738959999999972],[0.0,-0.09848558999999998],[0.002180567520000002,0.09376964999999998]]]]]

Actual:   [[[[[0, -0.507], [0, -0.0026], [-0, 0.4216]], [[-0, 0.0061], [-0, 0.1405], [0, 0.3125]], [[-0, -0.073], [0, 0.0029], [-0, 0.1225]]], [[[-0, -0.7095], [0, 0.4959], [-0, 0.4477]], [[-0, 0.2148], [0, -0.0781], [-0.0082, 0.1668]], [[0, 0.0465], [-0, 0.4041], [0.2126, -0.1285]]], [[[0, 0.0271], [0, -0.2535], [0, -0.0425]], [[-0, -0.246], [-0, -0.3256], [-0.1578, 0.3429]], [[0, 0.0098], [0, -0.0984], [0.0022, 0.0938]]]]]

Expected: [[[[[0, -0.507], [0, -0.0026], [-0, 0.4216]], [[-0, 0.0061], [-0, 0.1405], [0, 0.3125]], [[-0, -0.073], [0, 0.0029], [-0, 0.1225]]], [[[-0, -0.7095], [0, 0.4959], [-0, 0.4477]], [[-0, 0.2148], [0, -0.0781], [-0.0082, 0.1668]], [[0, 0.0465], [-0, 0.4041], [0.2126, -0.1285]]], [[[0, 0.0271], [0, -0.2535], [0, -0.0425]], [[-0, -0.246], [-0, -0.3256], [-0.1578, 0.3429]], [[0, 0.0098], [0, -0.0984], [0.0022, 0.0938]]]]]