import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Bat20190 = tf.keras.layers.Input(shape=([3]))
in0Con19436 = tf.keras.layers.Input(shape=([3, 3, 2]))
in0Sub37949 = tf.keras.layers.Input(shape=([3, 3, 3]))
in1Sub37949 = tf.keras.layers.Input(shape=([3, 3, 3]))
in0Dep7247 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Con83571 = tf.keras.layers.Input(shape=([3, 3, 1]))

Bat20190 = keras.layers.BatchNormalization(axis=1, epsilon=0.986938162119257,  name = 'Bat20190', )(in0Bat20190)
Den90078 = keras.layers.Dense(1,name = 'Den90078', )(Bat20190)
Res34225 = keras.layers.Reshape((1, 1), name = 'Res34225', )(Den90078)
Res21540 = keras.layers.Reshape((1, 1, 1), name = 'Res21540', )(Res34225)
Sep74191 = keras.layers.SeparableConv2D(3, (1, 1),strides=(1, 1), padding='same', name = 'Sep74191', )(Res21540)
Res25264 = keras.layers.Reshape((1, 3), name = 'Res25264', )(Sep74191)
Ave10784 = keras.layers.AveragePooling1D(pool_size=(1), strides=(1), padding='same', name = 'Ave10784', )(Res25264)
Res56257 = keras.layers.Reshape((1, 3, 1), name = 'Res56257', )(Ave10784)
Zer72918 = keras.layers.ZeroPadding2D(padding=((2, 0), (0, 0)), name = 'Zer72918', )(Res56257)
Con19436 = keras.layers.Concatenate(axis=3, name = 'Con19436', )([Zer72918,in0Con19436])
Sub37949 = keras.layers.Subtract(name = 'Sub37949', )([in0Sub37949,in1Sub37949])
Mul40377 = keras.layers.Multiply(name = 'Mul40377', )([Con19436,Sub37949])
Dep7247 = keras.layers.DepthwiseConv2D((1, 1),strides=(1, 1), padding='same', name = 'Dep7247', )(in0Dep7247)
Zer81157 = keras.layers.ZeroPadding2D(padding=((2, 0), (1, 0)), name = 'Zer81157', )(Dep7247)
Con83571 = keras.layers.Concatenate(axis=3, name = 'Con83571', )([Zer81157,in0Con83571])
Max74357 = keras.layers.Maximum(name = 'Max74357', )([Mul40377,Con83571])
model = tf.keras.models.Model(inputs=[in0Bat20190,in0Con19436,in0Sub37949,in1Sub37949,in0Dep7247,in0Con83571], outputs=Max74357)
w = model.get_layer('Bat20190').get_weights() 
w[0] = np.array([0.8253, 0.9239, 0.809])
w[1] = np.array([0.208, 0.421, 0.3941])
w[2] = np.array([0.8457, 0.2833, 0.6043])
w[3] = np.array([0.2228, 0.9251, 0.2842])
model.get_layer('Bat20190').set_weights(w) 
w = model.get_layer('Den90078').get_weights() 
w[0] = np.array([[0.3466], [0.6], [0.8418]])
w[1] = np.array([0.1753])
model.get_layer('Den90078').set_weights(w) 
w = model.get_layer('Sep74191').get_weights() 
w[0] = np.array([[[[0.6489]]]])
w[1] = np.array([[[[0.5922, 0.4042, 0.0084]]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep74191').set_weights(w) 
w = model.get_layer('Dep7247').get_weights() 
w[0] = np.array([[[[0.3643], [0.6903]]]])
w[1] = np.array([0, 0])
model.get_layer('Dep7247').set_weights(w) 
in0Bat20190 = tf.constant([[1.5583, 1.368, 1.9847]])
in0Con19436 = tf.constant([[[[0.071, 0.9469], [0.9591, 0.9592], [0.6492, 0.3359]], [[0.8473, 0.606], [0.5489, 0.9694], [0.7094, 0.2729]], [[0.4687, 0.3166], [0.8026, 0.3521], [0.9175, 0.0434]]]])
in0Sub37949 = tf.constant([[[[0.9887, 0.0536, 0.5994], [0.0497, 0.6581, 0.9781], [0.0904, 0.8907, 0.4447]], [[0.5463, 0.8334, 0.3484], [0.5585, 0.3354, 0.1851], [0.8179, 0.4374, 0.6664]], [[0.5801, 0.1017, 0.7672], [0.522, 0.1555, 0.5345], [0.7661, 0.1234, 0.1397]]]])
in1Sub37949 = tf.constant([[[[0.1892, 0.6695, 0.4821], [0.1563, 0.9261, 0.0302], [0.2087, 0.9086, 0.286]], [[0.6646, 0.6138, 0.0665], [0.7414, 0.8125, 0.6682], [0.5607, 0.6192, 0.3603]], [[0.7008, 0.9035, 0.0881], [0.7756, 0.8115, 0.6022], [0.9617, 0.7436, 0.8476]]]])
in0Dep7247 = tf.constant([[[[0.2083, 0.7138], [0.3616, 0.4535]]]])
in0Con83571 = tf.constant([[[[0.79], [0.1881], [0.918]], [[0.1089], [0.4397], [0.323]], [[0.9077], [0.6779], [0.061]]]])
print (np.array2string(model.predict([in0Bat20190,in0Con19436,in0Sub37949,in1Sub37949,in0Dep7247,in0Con83571],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max74357.png')

LBat20190 = batch_normalization_layer([[1.5583, 1.368, 1.9847]], 1, 0.986938162119257, [0.8253, 0.9239, 0.809], [0.208, 0.421, 0.3941], [0.8457, 0.2833, 0.6043], [0.2228, 0.9251, 0.2842], Bat20190), 
LDen90078 = dense_layer(Bat20190, [[0.3466], [0.6], [0.8418]],[0.1753], Den90078), 
LRes34225 = reshape_layer(Den90078, [1, 1], Res34225), 
LRes21540 = reshape_layer(Res34225, [1, 1, 1], Res21540), 
LSep74191 = separable_conv2D_layer(Res21540, 1, 1,[[[[[0.6489]]]],[[[[0.5922, 0.4042, 0.0084]]]]],[0, 0, 0], 1, 1, true, Sep74191), 
LRes25264 = reshape_layer(Sep74191, [1, 3], Res25264), 
LAve10784 = average_pooling1D_layer(Res25264, 1, 1, true, Ave10784), 
LRes56257 = reshape_layer(Ave10784, [1, 3, 1], Res56257), 
LZer72918 = zero_padding2D_layer(Res56257, 2, 0, 0, 0, Zer72918), 
LCon19436 = concatenate_layer([Zer72918,[[[[0.071, 0.9469], [0.9591, 0.9592], [0.6492, 0.3359]], [[0.8473, 0.606], [0.5489, 0.9694], [0.7094, 0.2729]], [[0.4687, 0.3166], [0.8026, 0.3521], [0.9175, 0.0434]]]]], 3, Con19436), 
LSub37949 = subtract_layer([[[[0.9887, 0.0536, 0.5994], [0.0497, 0.6581, 0.9781], [0.0904, 0.8907, 0.4447]], [[0.5463, 0.8334, 0.3484], [0.5585, 0.3354, 0.1851], [0.8179, 0.4374, 0.6664]], [[0.5801, 0.1017, 0.7672], [0.522, 0.1555, 0.5345], [0.7661, 0.1234, 0.1397]]]], [[[[0.1892, 0.6695, 0.4821], [0.1563, 0.9261, 0.0302], [0.2087, 0.9086, 0.286]], [[0.6646, 0.6138, 0.0665], [0.7414, 0.8125, 0.6682], [0.5607, 0.6192, 0.3603]], [[0.7008, 0.9035, 0.0881], [0.7756, 0.8115, 0.6022], [0.9617, 0.7436, 0.8476]]]], Sub37949), 
LMul40377 = multiply_layer([Con19436,Sub37949], Mul40377), 
LDep7247 = depthwise_conv2D_layer([[[[0.2083, 0.7138], [0.3616, 0.4535]]]], 1, 1,[[[[0.3643], [0.6903]]]],[0, 0], 1, 1, true, Dep7247), 
LZer81157 = zero_padding2D_layer(Dep7247, 2, 0, 1, 0, Zer81157), 
LCon83571 = concatenate_layer([Zer81157,[[[[0.79], [0.1881], [0.918]], [[0.1089], [0.4397], [0.323]], [[0.9077], [0.6779], [0.061]]]]], 3, Con83571), 
LMax74357 = maximum_layer([Mul40377,Con83571], Max74357), 
exec_layers([LBat20190,LDen90078,LRes34225,LRes21540,LSep74191,LRes25264,LAve10784,LRes56257,LZer72918,LCon19436,LSub37949,LMul40377,LDep7247,LZer81157,LCon83571,LMax74357],["Bat20190","Den90078","Res34225","Res21540","Sep74191","Res25264","Ave10784","Res56257","Zer72918","Con19436","Sub37949","Mul40377","Dep7247","Zer81157","Con83571","Max74357"],Max74357,"Max74357")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.7900000], [0.0000000, 0.0000000, 0.9092257], [0.0000000, 0.0000000, 0.9180000]], [[0.0000000, 0.1860671, 0.1708314], [0.0000000, 0.0000000, 0.4397000], [0.0000000, 0.0000000, 0.3230000]], [[0.0000000, 0.0000000, 0.9077000], [0.0758837, 0.4927361, 0.6779000], [0.1317309, 0.3130511, 0.0610000]]]]

Expected (Unparsed): [[[[0.0,0,0.79],[-0.0,0,0.90922568],[-0.0,0,0.918]],[[-0.0,0.18606708000000002,0.1708314],[-0.0,0,0.4397],[0.0,0,0.323]],[[0,0,0.9077],[0.07588369,0.49273614,0.6779],[0.13173088,0.31305105,0.061]]]]

Actual:   [[[[0, 0, 0.79], [0, 0, 0.9093], [0, 0, 0.918]], [[0, 0.1861, 0.1709], [0, 0, 0.4397], [0, 0, 0.323]], [[0, 0, 0.9077], [0.0759, 0.4928, 0.6779], [0.1318, 0.3131, 0.061]]]]

Expected: [[[[0, 0, 0.79], [-0, 0, 0.9093], [-0, 0, 0.918]], [[-0, 0.1861, 0.1709], [-0, 0, 0.4397], [0, 0, 0.323]], [[0, 0, 0.9077], [0.0759, 0.4928, 0.6779], [0.1318, 0.3131, 0.061]]]]