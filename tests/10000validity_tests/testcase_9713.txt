import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave67976 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con39256 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Max4789 = tf.keras.layers.Input(shape=([1, 2]))
in0Con89986 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con1958 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con12131 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Sep1345 = tf.keras.layers.Input(shape=([2, 1, 2]))

Ave67976 = keras.layers.AveragePooling2D(pool_size=(1, 1), name = 'Ave67976', )(in0Ave67976)
Con39256 = keras.layers.Concatenate(axis=3, name = 'Con39256', )([Ave67976,in0Con39256])
Max4789 = keras.layers.MaxPool1D(pool_size=(1), name = 'Max4789', )(in0Max4789)
Res99384 = keras.layers.Reshape((1, 2, 1), name = 'Res99384', )(Max4789)
Zer23486 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer23486', )(Res99384)
Con89986 = keras.layers.Concatenate(axis=3, name = 'Con89986', )([Zer23486,in0Con89986])
Con1958 = keras.layers.Conv2D(3, (1, 1),strides=(1, 1), padding='valid', dilation_rate=(1, 1), name = 'Con1958', )(in0Con1958)
Min71518 = keras.layers.Minimum(name = 'Min71518', )([Con89986,Con1958])
Lay55147 = keras.layers.LayerNormalization(axis=1, epsilon=1.7458484196073458, name = 'Lay55147', )(Min71518)
Con12131 = keras.layers.Concatenate(axis=3, name = 'Con12131', )([Lay55147,in0Con12131])
Sep1345 = keras.layers.SeparableConv2D(4, (2, 1),strides=(2, 2), padding='valid', name = 'Sep1345', )(in0Sep1345)
Zer7382 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer7382', )(Sep1345)
Sub23710 = keras.layers.Subtract(name = 'Sub23710', )([Con12131,Zer7382])
Mul36746 = keras.layers.Multiply(name = 'Mul36746', )([Con39256,Sub23710])
model = tf.keras.models.Model(inputs=[in0Ave67976,in0Con39256,in0Max4789,in0Con89986,in0Con1958,in0Con12131,in0Sep1345], outputs=Mul36746)
w = model.get_layer('Con1958').get_weights() 
w[0] = np.array([[[[0.8436, 0.9053, 0.0304], [0.0673, 0.7278, 0.0791]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con1958').set_weights(w) 
w = model.get_layer('Sep1345').get_weights() 
w[0] = np.array([[[[0.9681], [0.3606]]], [[[0.107], [0.6932]]]])
w[1] = np.array([[[[0.2816, 0.7772, 0.9863, 0.3378], [0.6821, 0.9937, 0.6715, 0.959]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep1345').set_weights(w) 
in0Ave67976 = tf.constant([[[[1.9658, 1.903], [1.4732, 1.7065]], [[1.0218, 1.3793], [1.3312, 1.3762]]]])
in0Con39256 = tf.constant([[[[0.1408, 0.7935], [0.2896, 0.9212]], [[0.4522, 0.2517], [0.3133, 0.3531]]]])
in0Max4789 = tf.constant([[[1.8759, 1.2458]]])
in0Con89986 = tf.constant([[[[0.1337, 0.9424], [0.3675, 0.8793]], [[0.1255, 0.1797], [0.0892, 0.1296]]]])
in0Con1958 = tf.constant([[[[0.5516, 0.9708], [0.6826, 0.6858]], [[0.238, 0.0114], [0.9119, 0.824]]]])
in0Con12131 = tf.constant([[[[0.1768], [0.3637]], [[0.7264], [0.8053]]]])
in0Sep1345 = tf.constant([[[[0.4349, 0.4291]], [[0.1187, 0.4177]]]])
print (np.array2string(model.predict([in0Ave67976,in0Con39256,in0Max4789,in0Con89986,in0Con1958,in0Con12131,in0Sep1345],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul36746.png')

LAve67976 = average_pooling2D_layer([[[[1.9658, 1.903], [1.4732, 1.7065]], [[1.0218, 1.3793], [1.3312, 1.3762]]]], 1, 1, Ave67976), 
LCon39256 = concatenate_layer([Ave67976,[[[[0.1408, 0.7935], [0.2896, 0.9212]], [[0.4522, 0.2517], [0.3133, 0.3531]]]]], 3, Con39256), 
LMax4789 = max_pool1D_layer([[[1.8759, 1.2458]]], 1, Max4789), 
LRes99384 = reshape_layer(Max4789, [1, 2, 1], Res99384), 
LZer23486 = zero_padding2D_layer(Res99384, 1, 0, 0, 0, Zer23486), 
LCon89986 = concatenate_layer([Zer23486,[[[[0.1337, 0.9424], [0.3675, 0.8793]], [[0.1255, 0.1797], [0.0892, 0.1296]]]]], 3, Con89986), 
LCon1958 = conv2D_layer([[[[0.5516, 0.9708], [0.6826, 0.6858]], [[0.238, 0.0114], [0.9119, 0.824]]]], 1, 1,[[[[0.8436, 0.9053, 0.0304], [0.0673, 0.7278, 0.0791]]]],[0, 0, 0], 1, 1, false, 1, 1, Con1958), 
LMin71518 = minimum_layer([Con89986,Con1958], Min71518), 
LLay55147 = layer_normalization_layer(Min71518, 1, 1.7458484196073458, Lay55147), 
LCon12131 = concatenate_layer([Lay55147,[[[[0.1768], [0.3637]], [[0.7264], [0.8053]]]]], 3, Con12131), 
LSep1345 = separable_conv2D_layer([[[[0.4349, 0.4291]], [[0.1187, 0.4177]]]], 2, 1,[[[[[0.9681], [0.3606]]], [[[0.107], [0.6932]]]],[[[[0.2816, 0.7772, 0.9863, 0.3378], [0.6821, 0.9937, 0.6715, 0.959]]]]],[0, 0, 0, 0], 2, 2, false, Sep1345), 
LZer7382 = zero_padding2D_layer(Sep1345, 1, 0, 1, 0, Zer7382), 
LSub23710 = subtract_layer(Con12131,Zer7382, Sub23710), 
LMul36746 = multiply_layer([Con39256,Sub23710], Mul36746), 
exec_layers([LAve67976,LCon39256,LMax4789,LRes99384,LZer23486,LCon89986,LCon1958,LMin71518,LLay55147,LCon12131,LSep1345,LZer7382,LSub23710,LMul36746],["Ave67976","Con39256","Max4789","Res99384","Zer23486","Con89986","Con1958","Min71518","Lay55147","Con12131","Sep1345","Zer7382","Sub23710","Mul36746"],Mul36746,"Mul36746")

Actual (Unparsed): [[[[-0.1494915, 0.0059050, 0.0045490, 0.1402908], [-0.4388941, 0.1787274, -0.0019618, 0.3350404]], [[0.0777040, -0.0042799, -0.0146097, 0.1828349], [-0.1694142, -1.2156119, -0.2253715, 0.0821732]]]]

Expected (Unparsed): [[[[-0.14949152539877936,0.005904964447266788,0.004548961363465667,0.1402908],[-0.438894142604371,0.17872741466974,-0.0019618469800515943,0.33504044000000005]],[[0.0777039580081762,-0.004279935608047833,-0.014609661424425954,0.18283488],[-0.16941420803504942,-1.215611940121206,-0.22537150601099623,0.08217319443361382]]]]

Actual:   [[[[-0.1494, 0.006, 0.0046, 0.1403], [-0.4388, 0.1788, -0.0019, 0.3351]], [[0.0778, -0.0042, -0.0146, 0.1829], [-0.1694, -1.2156, -0.2253, 0.0822]]]]

Expected: [[[[-0.1494, 0.006, 0.0046, 0.1403], [-0.4388, 0.1788, -0.0019, 0.3351]], [[0.0778, -0.0042, -0.0146, 0.1829], [-0.1694, -1.2156, -0.2253, 0.0822]]]]