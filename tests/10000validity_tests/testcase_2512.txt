import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add85088 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in1Add85088 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Den20265 = tf.keras.layers.Input(shape=([4, 4, 2]))
in0Con98431 = tf.keras.layers.Input(shape=([4, 4, 1]))
in0Sub77920 = tf.keras.layers.Input(shape=([3, 3, 3]))
in1Sub77920 = tf.keras.layers.Input(shape=([3, 3, 3]))

Add85088 = keras.layers.Add(name = 'Add85088', )([in0Add85088,in1Add85088])
Sof2554 = keras.layers.Softmax(axis=1, name = 'Sof2554', )(Add85088)
Sof71928 = keras.layers.Softmax(axis=1, name = 'Sof71928', )(Sof2554)
Res54330 = keras.layers.Reshape((2, 2, 2), name = 'Res54330', )(Sof71928)
Zer75190 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer75190', )(Res54330)
Den20265 = keras.layers.Dense(2,name = 'Den20265', )(in0Den20265)
Add28395 = keras.layers.Add(name = 'Add28395', )([Zer75190,Den20265])
Con98431 = keras.layers.Concatenate(axis=3, name = 'Con98431', )([Add28395,in0Con98431])
Sub77920 = keras.layers.Subtract(name = 'Sub77920', )([in0Sub77920,in1Sub77920])
Zer34975 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer34975', )(Sub77920)
Add47526 = keras.layers.Add(name = 'Add47526', )([Con98431,Zer34975])
Res17008 = keras.layers.Reshape((4, 12), name = 'Res17008', )(Add47526)
Zer52472 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer52472', )(Res17008)
Bat28287 = keras.layers.BatchNormalization(axis=1, epsilon=0.5250567672700577,  name = 'Bat28287', )(Zer52472)
model = tf.keras.models.Model(inputs=[in0Add85088,in1Add85088,in0Den20265,in0Con98431,in0Sub77920,in1Sub77920], outputs=Bat28287)
w = model.get_layer('Den20265').get_weights() 
w[0] = np.array([[0.0861, 0.7675], [0.0581, 0.9461]])
w[1] = np.array([0.5163, 0.7826])
model.get_layer('Den20265').set_weights(w) 
w = model.get_layer('Bat28287').get_weights() 
w[0] = np.array([0.2257, 0.6765, 0.7221, 0.6998, 0.461, 0.0248])
w[1] = np.array([0.0149, 0.5674, 0.0037, 0.3985, 0.5985, 0.6308])
w[2] = np.array([0.3149, 0.6045, 0.6868, 0.4617, 0.2877, 0.1559])
w[3] = np.array([0.4744, 0.6946, 0.2089, 0.076, 0.869, 0.6363])
model.get_layer('Bat28287').set_weights(w) 
in0Add85088 = tf.constant([[[[[0.6145], [0.3868]], [[0.1748], [0.9079]]], [[[0.895], [0.4501]], [[0.4833], [0.1904]]]]])
in1Add85088 = tf.constant([[[[[0.1944], [0.4667]], [[0.507], [0.0255]]], [[[0.2153], [0.6016]], [[0.5381], [0.4811]]]]])
in0Den20265 = tf.constant([[[[0.7178, 0.0323], [0.4108, 0.4323], [0.4591, 0.4659], [0.7193, 0.8189]], [[0.9205, 0.3712], [0.7625, 0.7642], [0.9689, 0.7735], [0.9257, 0.5635]], [[0.0807, 0.6923], [0.0134, 0.2324], [0.1296, 0.6892], [0.2551, 0.6482]], [[0.0315, 0.5372], [0.3189, 0.3137], [0.7258, 0.7236], [0.6907, 0.4255]]]])
in0Con98431 = tf.constant([[[[0.1361], [0.1187], [0.2236], [0.3877]], [[0.5405], [0.887], [0.656], [0.6684]], [[0.3773], [0.0415], [0.2452], [0.2049]], [[0.0375], [0.7847], [0.3657], [0.9187]]]])
in0Sub77920 = tf.constant([[[[0.0785, 0.3533, 0.2009], [0.2404, 0.2901, 0.0352], [0.315, 0.6965, 0.3081]], [[0.4986, 0.0445, 0.8712], [0.5572, 0.0177, 0.977], [0.1323, 0.027, 0.1974]], [[0.9801, 0.7773, 0.385], [0.3166, 0.5888, 0.5438], [0.3192, 0.2163, 0.9509]]]])
in1Sub77920 = tf.constant([[[[0.6224, 0.7578, 0.6697], [0.4771, 0.7063, 0.9606], [0.2807, 0.0169, 0.1717]], [[0.7337, 0.2163, 0.4656], [0.6978, 0.1779, 0.5004], [0.1974, 0.5102, 0.4503]], [[0.1697, 0.6138, 0.9555], [0.9915, 0.3249, 0.4001], [0.3032, 0.5512, 0.9972]]]])
print (np.array2string(model.predict([in0Add85088,in1Add85088,in0Den20265,in0Con98431,in0Sub77920,in1Sub77920],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Bat28287.png')

LAdd85088 = add_layer([[[[[[0.6145], [0.3868]], [[0.1748], [0.9079]]], [[[0.895], [0.4501]], [[0.4833], [0.1904]]]]], [[[[[0.1944], [0.4667]], [[0.507], [0.0255]]], [[[0.2153], [0.6016]], [[0.5381], [0.4811]]]]]], Add85088), 
LSof2554 = softmax_layer(Add85088, 1, Sof2554), 
LSof71928 = softmax_layer(Sof2554, 1, Sof71928), 
LRes54330 = reshape_layer(Sof71928, [2, 2, 2], Res54330), 
LZer75190 = zero_padding2D_layer(Res54330, 2, 0, 2, 0, Zer75190), 
LDen20265 = dense_layer([[[[0.7178, 0.0323], [0.4108, 0.4323], [0.4591, 0.4659], [0.7193, 0.8189]], [[0.9205, 0.3712], [0.7625, 0.7642], [0.9689, 0.7735], [0.9257, 0.5635]], [[0.0807, 0.6923], [0.0134, 0.2324], [0.1296, 0.6892], [0.2551, 0.6482]], [[0.0315, 0.5372], [0.3189, 0.3137], [0.7258, 0.7236], [0.6907, 0.4255]]]], [[0.0861, 0.7675], [0.0581, 0.9461]],[0.5163, 0.7826], Den20265), 
LAdd28395 = add_layer([Zer75190,Den20265], Add28395), 
LCon98431 = concatenate_layer([Add28395,[[[[0.1361], [0.1187], [0.2236], [0.3877]], [[0.5405], [0.887], [0.656], [0.6684]], [[0.3773], [0.0415], [0.2452], [0.2049]], [[0.0375], [0.7847], [0.3657], [0.9187]]]]], 3, Con98431), 
LSub77920 = subtract_layer([[[[0.0785, 0.3533, 0.2009], [0.2404, 0.2901, 0.0352], [0.315, 0.6965, 0.3081]], [[0.4986, 0.0445, 0.8712], [0.5572, 0.0177, 0.977], [0.1323, 0.027, 0.1974]], [[0.9801, 0.7773, 0.385], [0.3166, 0.5888, 0.5438], [0.3192, 0.2163, 0.9509]]]], [[[[0.6224, 0.7578, 0.6697], [0.4771, 0.7063, 0.9606], [0.2807, 0.0169, 0.1717]], [[0.7337, 0.2163, 0.4656], [0.6978, 0.1779, 0.5004], [0.1974, 0.5102, 0.4503]], [[0.1697, 0.6138, 0.9555], [0.9915, 0.3249, 0.4001], [0.3032, 0.5512, 0.9972]]]], Sub77920), 
LZer34975 = zero_padding2D_layer(Sub77920, 1, 0, 1, 0, Zer34975), 
LAdd47526 = add_layer([Con98431,Zer34975], Add47526), 
LRes17008 = reshape_layer(Add47526, [4, 12], Res17008), 
LZer52472 = zero_padding1D_layer(Res17008, 2, 0, Zer52472), 
LBat28287 = batch_normalization_layer(Zer52472, 1, 0.5250567672700577, [0.2257, 0.6765, 0.7221, 0.6998, 0.461, 0.0248], [0.0149, 0.5674, 0.0037, 0.3985, 0.5985, 0.6308], [0.3149, 0.6045, 0.6868, 0.4617, 0.2877, 0.1559], [0.4744, 0.6946, 0.2089, 0.076, 0.869, 0.6363], Bat28287), 
exec_layers([LAdd85088,LSof2554,LSof71928,LRes54330,LZer75190,LDen20265,LAdd28395,LCon98431,LSub77920,LZer34975,LAdd47526,LRes17008,LZer52472,LBat28287],["Add85088","Sof2554","Sof71928","Res54330","Zer75190","Den20265","Add28395","Con98431","Sub77920","Zer34975","Add47526","Res17008","Zer52472","Bat28287"],Bat28287,"Bat28287")

Actual (Unparsed): [[[-0.0561922, -0.0561922, -0.0561922, -0.0561922, -0.0561922, -0.0561922, -0.0561922, -0.0561922, -0.0561922, -0.0561922, -0.0561922, -0.0561922], [0.1971072, 0.1971072, 0.1971072, 0.1971072, 0.1971072, 0.1971072, 0.1971072, 0.1971072, 0.1971072, 0.1971072, 0.1971072, 0.1971072], [-0.0863364, 0.5745530, -0.4604701, -0.0890274, 0.6949300, -0.4751361, -0.0838768, 0.7529696, -0.3867187, -0.0477070, 1.2027913, -0.2484033], [0.5387904, 1.6428625, 0.4696283, 0.0561737, 1.5039027, 0.3592350, 0.3499943, 1.6442734, -0.2614226, 0.5802401, 2.4241239, 0.7081969], [0.7061736, 1.0716509, 0.6334839, 0.6016846, 0.8145173, 0.6607371, 0.8335008, 1.2081990, 0.7679925, 0.8644625, 1.1268734, 0.4674274], [0.6398745, 0.6574746, 0.6280753, 0.6587946, 0.6614472, 0.6321416, 0.6383334, 0.6919432, 0.6389350, 0.6538712, 0.6697370, 0.6472886]]]

Expected (Unparsed): [[[-0.056192242439612725,-0.056192242439612725,-0.056192242439612725,-0.056192242439612725,-0.056192242439612725,-0.056192242439612725,-0.056192242439612725,-0.056192242439612725,-0.056192242439612725,-0.056192242439612725,-0.056192242439612725,-0.056192242439612725],[0.19710717992351096,0.19710717992351096,0.19710717992351096,0.19710717992351096,0.19710717992351096,0.19710717992351096,0.19710717992351096,0.19710717992351096,0.19710717992351096,0.19710717992351096,0.19710717992351096,0.19710717992351096],[-0.08633635211042966,0.5745529951248003,-0.46047012182004654,-0.08902739250980296,0.694929999615511,-0.47513611077895124,-0.0838767730459992,0.7529695636142987,-0.38671874056118677,-0.0477069716368741,1.2027912909949647,-0.24840329296599947],[0.5387904289429866,1.6428625380848296,0.4696282968962929,0.05617365145961922,1.5039026686419181,0.3592350137691785,0.3499943287245815,1.6442733967383556,-0.2614225616862906,0.5802401280341247,2.4241238633806375,0.7081969373745949],[0.7061735748860702,1.071650854619499,0.6334839388774954,0.6016845457878778,0.8145172874245178,0.6607370519762585,0.8335008110798429,1.2081989797623578,0.7679924985125084,0.8644625398773393,1.1268734420291193,0.46742736293331244],[0.6398744744099012,0.657474586209996,0.6280752883054811,0.65879464666139,0.6614471916971986,0.6321416443563384,0.6383333525799995,0.6919431659273564,0.6389350133784837,0.6538711893584858,0.6697369600324199,0.6472886480500241]]]

Actual:   [[[-0.0561, -0.0561, -0.0561, -0.0561, -0.0561, -0.0561, -0.0561, -0.0561, -0.0561, -0.0561, -0.0561, -0.0561], [0.1972, 0.1972, 0.1972, 0.1972, 0.1972, 0.1972, 0.1972, 0.1972, 0.1972, 0.1972, 0.1972, 0.1972], [-0.0863, 0.5746, -0.4604, -0.089, 0.695, -0.4751, -0.0838, 0.753, -0.3867, -0.0477, 1.2028, -0.2484], [0.5388, 1.6429, 0.4697, 0.0562, 1.504, 0.3593, 0.35, 1.6443, -0.2614, 0.5803, 2.4242, 0.7082], [0.7062, 1.0717, 0.6335, 0.6017, 0.8146, 0.6608, 0.8336, 1.2082, 0.768, 0.8645, 1.1269, 0.4675], [0.6399, 0.6575, 0.6281, 0.6588, 0.6615, 0.6322, 0.6384, 0.692, 0.639, 0.6539, 0.6698, 0.6473]]]

Expected: [[[-0.0561, -0.0561, -0.0561, -0.0561, -0.0561, -0.0561, -0.0561, -0.0561, -0.0561, -0.0561, -0.0561, -0.0561], [0.1972, 0.1972, 0.1972, 0.1972, 0.1972, 0.1972, 0.1972, 0.1972, 0.1972, 0.1972, 0.1972, 0.1972], [-0.0863, 0.5746, -0.4604, -0.089, 0.695, -0.4751, -0.0838, 0.753, -0.3867, -0.0477, 1.2028, -0.2484], [0.5388, 1.6429, 0.4697, 0.0562, 1.504, 0.3593, 0.35, 1.6443, -0.2614, 0.5803, 2.4242, 0.7082], [0.7062, 1.0717, 0.6335, 0.6017, 0.8146, 0.6608, 0.8336, 1.2082, 0.768, 0.8645, 1.1269, 0.4675], [0.6399, 0.6575, 0.6281, 0.6588, 0.6615, 0.6322, 0.6384, 0.692, 0.639, 0.6539, 0.6698, 0.6473]]]