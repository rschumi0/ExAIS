import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot49403 = tf.keras.layers.Input(shape=([3, 3]))
in1Dot49403 = tf.keras.layers.Input(shape=([3, 3]))

Dot49403 = keras.layers.Dot(axes=(2, 1), name = 'Dot49403', )([in0Dot49403,in1Dot49403])
ReL36354 = keras.layers.ReLU(max_value=2.7049536858084364, negative_slope=8.415014253535531, threshold=4.950638643490729, name = 'ReL36354', )(Dot49403)
Sof84221 = keras.layers.Softmax(axis=1, name = 'Sof84221', )(ReL36354)
model = tf.keras.models.Model(inputs=[in0Dot49403,in1Dot49403], outputs=Sof84221)
in0Dot49403 = tf.constant([[[0.286, 0.1357, 0.2602], [0.2509, 0.7461, 0.9503], [0.6997, 0.2811, 0.6565]]])
in1Dot49403 = tf.constant([[[0.0721, 0.7357, 0.4279], [0.0323, 0.4534, 0.1137], [0.9887, 0.0272, 0.2478]]])
print (np.array2string(model.predict([in0Dot49403,in1Dot49403],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sof84221.png')

LDot49403 = dot_layer([[[0.286, 0.1357, 0.2602], [0.2509, 0.7461, 0.9503], [0.6997, 0.2811, 0.6565]]], [[[0.0721, 0.7357, 0.4279], [0.0323, 0.4534, 0.1137], [0.9887, 0.0272, 0.2478]]], 2, 1, Dot49403), 
LReL36354 = relu_layer(Dot49403, 2.7049536858084364, 8.415014253535531, 4.950638643490729, ReL36354), 
LSof84221 = softmax_layer(ReL36354, 1, Sof84221), 
exec_layers([LDot49403,LReL36354,LSof84221],["Dot49403","ReL36354","Sof84221"],Sof84221,"Sof84221")

Actual (Unparsed): [[[0.0025177, 0.0282715, 0.0517821], [0.9064636, 0.2735296, 0.3450552], [0.0910187, 0.6981989, 0.6031627]]]

Expected (Unparsed): [[[0.0025177285223040463,0.028271523280985394,0.05178210706544529],[0.9064635894971574,0.27352956833392617,0.3450552248671763],[0.09101868198053849,0.6981989083850884,0.6031626680673784]]]

Actual:   [[[0.0026, 0.0283, 0.0518], [0.9065, 0.2736, 0.3451], [0.0911, 0.6982, 0.6032]]]

Expected: [[[0.0026, 0.0283, 0.0518], [0.9065, 0.2736, 0.3451], [0.0911, 0.6982, 0.6032]]]