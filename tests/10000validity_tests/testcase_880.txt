import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave99875 = tf.keras.layers.Input(shape=([2, 1]))
in0Con60548 = tf.keras.layers.Input(shape=([3, 3, 2, 1]))
in0Cro55151 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))

Ave99875 = keras.layers.AveragePooling1D(pool_size=(1), strides=(1), padding='same', name = 'Ave99875', )(in0Ave99875)
Cro2701 = keras.layers.Cropping1D(cropping=((1, 0)), name = 'Cro2701', )(Ave99875)
Per90035 = keras.layers.Permute((2,1), name = 'Per90035',)(Cro2701)
Res49524 = keras.layers.Reshape((1, 1, 1), name = 'Res49524', )(Per90035)
Res15163 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res15163', )(Res49524)
Zer44057 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (1, 0)), name = 'Zer44057', )(Res15163)
Con60548 = keras.layers.Concatenate(axis=4, name = 'Con60548', )([Zer44057,in0Con60548])
Cro55151 = keras.layers.Cropping3D(cropping=((0, 0), (0, 0), (0, 0)), name = 'Cro55151', )(in0Cro55151)
Min93767 = keras.layers.Minimum(name = 'Min93767', )([Con60548,Cro55151])
model = tf.keras.models.Model(inputs=[in0Ave99875,in0Con60548,in0Cro55151], outputs=Min93767)
in0Ave99875 = tf.constant([[[1.2574], [1.1057]]])
in0Con60548 = tf.constant([[[[[0.0191], [0.4704]], [[0.1122], [0.3012]], [[0.8099], [0.8598]]], [[[0.4332], [0.8983]], [[0.0047], [0.2473]], [[0.834], [0.6092]]], [[[0.338], [0.8384]], [[0.4284], [0.5148]], [[0.471], [0.4695]]]]])
in0Cro55151 = tf.constant([[[[[1.1968, 1.6811], [1.7545, 1.7033]], [[1.2861, 1.5251], [1.4825, 1.9653]], [[1.7556, 1.2008], [1.1751, 1.0778]]], [[[1.1928, 1.2099], [1.121, 1.9966]], [[1.1388, 1.6412], [1.3664, 1.2237]], [[1.6241, 1.8522], [1.0402, 1.2634]]], [[[1.8408, 1.956], [1.8611, 1.9421]], [[1.5157, 1.5104], [1.8416, 1.4582]], [[1.5173, 1.1275], [1.4356, 1.2406]]]]])
print (np.array2string(model.predict([in0Ave99875,in0Con60548,in0Cro55151],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min93767.png')

LAve99875 = average_pooling1D_layer([[[1.2574], [1.1057]]], 1, 1, true, Ave99875), 
LCro2701 = cropping1D_layer(Ave99875, 1, 0, Cro2701), 
LPer90035 = permute_layer(Cro2701, 2,1, Per90035), 
LRes49524 = reshape_layer(Per90035, [1, 1, 1], Res49524), 
LRes15163 = reshape_layer(Res49524, [1, 1, 1, 1], Res15163), 
LZer44057 = zero_padding3D_layer(Res15163, 2, 0, 2, 0, 1, 0, Zer44057), 
LCon60548 = concatenate_layer([Zer44057,[[[[[0.0191], [0.4704]], [[0.1122], [0.3012]], [[0.8099], [0.8598]]], [[[0.4332], [0.8983]], [[0.0047], [0.2473]], [[0.834], [0.6092]]], [[[0.338], [0.8384]], [[0.4284], [0.5148]], [[0.471], [0.4695]]]]]], 4, Con60548), 
LCro55151 = cropping3D_layer([[[[[1.1968, 1.6811], [1.7545, 1.7033]], [[1.2861, 1.5251], [1.4825, 1.9653]], [[1.7556, 1.2008], [1.1751, 1.0778]]], [[[1.1928, 1.2099], [1.121, 1.9966]], [[1.1388, 1.6412], [1.3664, 1.2237]], [[1.6241, 1.8522], [1.0402, 1.2634]]], [[[1.8408, 1.956], [1.8611, 1.9421]], [[1.5157, 1.5104], [1.8416, 1.4582]], [[1.5173, 1.1275], [1.4356, 1.2406]]]]], 0, 0, 0, 0, 0, 0, Cro55151), 
LMin93767 = minimum_layer([Con60548,Cro55151], Min93767), 
exec_layers([LAve99875,LCro2701,LPer90035,LRes49524,LRes15163,LZer44057,LCon60548,LCro55151,LMin93767],["Ave99875","Cro2701","Per90035","Res49524","Res15163","Zer44057","Con60548","Cro55151","Min93767"],Min93767,"Min93767")

Actual (Unparsed): [[[[[0.0000000, 0.0191000], [0.0000000, 0.4704000]], [[0.0000000, 0.1122000], [0.0000000, 0.3012000]], [[0.0000000, 0.8099000], [0.0000000, 0.8598000]]], [[[0.0000000, 0.4332000], [0.0000000, 0.8983000]], [[0.0000000, 0.0047000], [0.0000000, 0.2473000]], [[0.0000000, 0.8340000], [0.0000000, 0.6092000]]], [[[0.0000000, 0.3380000], [0.0000000, 0.8384000]], [[0.0000000, 0.4284000], [0.0000000, 0.5148000]], [[0.0000000, 0.4710000], [1.1057000, 0.4695000]]]]]

Expected (Unparsed): [[[[[0,0.0191],[0,0.4704]],[[0,0.1122],[0,0.3012]],[[0,0.8099],[0,0.8598]]],[[[0,0.4332],[0,0.8983]],[[0,0.0047],[0,0.2473]],[[0,0.834],[0,0.6092]]],[[[0,0.338],[0,0.8384]],[[0,0.4284],[0,0.5148]],[[0,0.471],[1.1057,0.4695]]]]]

Actual:   [[[[[0, 0.0191], [0, 0.4704]], [[0, 0.1122], [0, 0.3012]], [[0, 0.8099], [0, 0.8598]]], [[[0, 0.4332], [0, 0.8983]], [[0, 0.0047], [0, 0.2473]], [[0, 0.834], [0, 0.6092]]], [[[0, 0.338], [0, 0.8384]], [[0, 0.4284], [0, 0.5148]], [[0, 0.471], [1.1057, 0.4695]]]]]

Expected: [[[[[0, 0.0191], [0, 0.4704]], [[0, 0.1122], [0, 0.3012]], [[0, 0.8099], [0, 0.8598]]], [[[0, 0.4332], [0, 0.8983]], [[0, 0.0047], [0, 0.2473]], [[0, 0.834], [0, 0.6092]]], [[[0, 0.338], [0, 0.8384]], [[0, 0.4284], [0, 0.5148]], [[0, 0.471], [1.1057, 0.4695]]]]]