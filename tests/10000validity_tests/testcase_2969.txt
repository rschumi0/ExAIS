import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min65745 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in1Min65745 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in0Con33466 = tf.keras.layers.Input(shape=([79]))
in0Sub77325 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in1Sub77325 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in0Sub51750 = tf.keras.layers.Input(shape=([2, 2]))
in1Sub51750 = tf.keras.layers.Input(shape=([2, 2]))
in0Con36758 = tf.keras.layers.Input(shape=([3, 25]))
in0Dot76169 = tf.keras.layers.Input(shape=([3]))
in1Dot76169 = tf.keras.layers.Input(shape=([3]))
in0Con55191 = tf.keras.layers.Input(shape=([80]))

Min65745 = keras.layers.Minimum(name = 'Min65745', )([in0Min65745,in1Min65745])
Res22230 = keras.layers.Reshape((1, 1, 2), name = 'Res22230', )(Min65745)
Res98640 = keras.layers.Reshape((1, 2), name = 'Res98640', )(Res22230)
Fla70350 = keras.layers.Flatten(name = 'Fla70350', )(Res98640)
Con33466 = keras.layers.Concatenate(axis=1, name = 'Con33466', )([Fla70350,in0Con33466])
Sub77325 = keras.layers.Subtract(name = 'Sub77325', )([in0Sub77325,in1Sub77325])
Res46812 = keras.layers.Reshape((3, 3, 9), name = 'Res46812', )(Sub77325)
Res62771 = keras.layers.Reshape((3, 27), name = 'Res62771', )(Res46812)
Sub51750 = keras.layers.Subtract(name = 'Sub51750', )([in0Sub51750,in1Sub51750])
Zer41368 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer41368', )(Sub51750)
Con36758 = keras.layers.Concatenate(axis=2, name = 'Con36758', )([Zer41368,in0Con36758])
Max32053 = keras.layers.Maximum(name = 'Max32053', )([Res62771,Con36758])
Fla73860 = keras.layers.Flatten(name = 'Fla73860', )(Max32053)
Dot76169 = keras.layers.Dot(axes=(1, 1), name = 'Dot76169', )([in0Dot76169,in1Dot76169])
Con55191 = keras.layers.Concatenate(axis=1, name = 'Con55191', )([Dot76169,in0Con55191])
Add15461 = keras.layers.Add(name = 'Add15461', )([Fla73860,Con55191])
Ave30164 = keras.layers.Average(name = 'Ave30164', )([Con33466,Add15461])
model = tf.keras.models.Model(inputs=[in0Min65745,in1Min65745,in0Con33466,in0Sub77325,in1Sub77325,in0Sub51750,in1Sub51750,in0Con36758,in0Dot76169,in1Dot76169,in0Con55191], outputs=Ave30164)
in0Min65745 = tf.constant([[[[[0.66, 0.7536]]]]])
in1Min65745 = tf.constant([[[[[0.7483, 0.5592]]]]])
in0Con33466 = tf.constant([[0.7439, 0.6034, 0.0604, 0.8175, 0.97, 0.7354, 0.0968, 0.7575, 0.2356, 0.1522, 0.5143, 0.4, 0.568, 0.2866, 0.8444, 0.014, 0.964, 0.4586, 0.0504, 0.2517, 0.4111, 0.7635, 0.783, 0.2345, 0.2551, 0.0507, 0.7389, 0.5532, 0.5829, 0.2975, 0.3144, 0.5408, 0.0665, 0.0834, 0.5989, 0.7858, 0.8841, 0.9307, 0.5037, 0.6136, 0.9225, 0.9937, 0.4844, 0.186, 0.45, 0.9489, 0.8842, 0.9403, 0.8497, 0.9696, 0.3964, 0.3236, 0.7982, 0.3505, 0.5253, 0.1648, 0.4889, 0.6895, 0.2117, 0.5708, 0.1102, 0.5327, 0.98, 0.9324, 0.8085, 0.038, 0.0643, 0.4845, 0.7965, 0.5272, 0.9735, 0.8755, 0.0957, 0.7574, 0.8694, 0.3697, 0.6452, 0.3683, 0.9462]])
in0Sub77325 = tf.constant([[[[[0.2856, 0.0464, 0.8608], [0.8495, 0.5669, 0.7563], [0.0061, 0.7285, 0.3535]], [[0.9193, 0.2898, 0.2568], [0.082, 0.1203, 0.4827], [0.1671, 0.2683, 0.032]], [[0.9886, 0.61, 0.9642], [0.0349, 0.3676, 0.5115], [0.7588, 0.4637, 0.1092]]], [[[0.2792, 0.8295, 0.4234], [0.7901, 0.141, 0.7514], [0.0481, 0.9706, 0.9631]], [[0.2597, 0.5396, 0.1833], [0.0049, 0.9255, 0.3149], [0.1529, 0.6946, 0.7528]], [[0.1148, 0.9452, 0.1816], [0.0363, 0.9848, 0.0928], [0.111, 0.4257, 0.6227]]], [[[0.8676, 0.7989, 0.0378], [0.7085, 0.7775, 0.7433], [0.6286, 0.479, 0.057]], [[0.1938, 0.2914, 0.9928], [0.3847, 0.3293, 0.8827], [0.2409, 0.3187, 0.4409]], [[0.3963, 0.5033, 0.967], [0.4026, 0.7989, 0.1241], [0.2281, 0.6292, 0.4258]]]]])
in1Sub77325 = tf.constant([[[[[0.1865, 0.5281, 0.6631], [0.8904, 0.4024, 0.3606], [0.5145, 0.6055, 0.9021]], [[0.0876, 0.8821, 0.4377], [0.5081, 0.4041, 0.4278], [0.7175, 0.5071, 0.5835]], [[0.3455, 0.8164, 0.8978], [0.1256, 0.5678, 0.7668], [0.5828, 0.7092, 0.0905]]], [[[0.9481, 0.0008, 0.4152], [0.0565, 0.6945, 0.2466], [0.0321, 0.4382, 0.7849]], [[0.8172, 0.8795, 0.3874], [0.1735, 0.7392, 0.9935], [0.5761, 0.9869, 0.9803]], [[0.7085, 0.1447, 0.7706], [0.7305, 0.6346, 0.196], [0.2035, 0.3517, 0.7867]]], [[[0.1218, 0.0119, 0.5323], [0.1486, 0.4388, 0.6186], [0.4645, 0.2725, 0.2193]], [[0.1349, 0.6627, 0.606], [0.6528, 0.6693, 0.3805], [0.1181, 0.7509, 0.5643]], [[0.4515, 0.4493, 0.7161], [0.0989, 0.779, 0.2524], [0.0352, 0.3949, 0.6286]]]]])
in0Sub51750 = tf.constant([[[0.6075, 0.9309], [0.7541, 0.3429]]])
in1Sub51750 = tf.constant([[[0.3997, 0.4043], [0.4175, 0.0865]]])
in0Con36758 = tf.constant([[[0.6349, 0.7862, 0.0325, 0.1102, 0.948, 0.0727, 0.9711, 0.8949, 0.1129, 0.5252, 0.904, 0.0986, 0.522, 0.7297, 0.9237, 0.7374, 0.8379, 0.7756, 0.6978, 0.3607, 0.8775, 0.9464, 0.5807, 0.1119, 0.2858], [0.0198, 0.0722, 0.0732, 0.464, 0.4879, 0.5893, 0.2116, 0.6329, 0.4987, 0.3867, 0.3122, 0.4905, 0.2155, 0.9964, 0.2562, 0.6529, 0.5914, 0.7329, 0.8836, 0.954, 0.2647, 0.6594, 0.4651, 0.7261, 0.3969], [0.9015, 0.4997, 0.3825, 0.7926, 0.3522, 0.1543, 0.9778, 0.5684, 0.6179, 0.1668, 0.9381, 0.9735, 0.5254, 0.4425, 0.8182, 0.6993, 0.6276, 0.8957, 0.7724, 0.1651, 0.9262, 0.3069, 0.4013, 0.815, 0.465]]])
in0Dot76169 = tf.constant([[0.3248, 0.7402, 0.7863]])
in1Dot76169 = tf.constant([[0.7584, 0.757, 0.0054]])
in0Con55191 = tf.constant([[0.4849, 0.5477, 0.4233, 0.172, 0.9905, 0.1131, 0.2244, 0.4829, 0.0542, 0.91, 0.9856, 0.5735, 0.3553, 0.6937, 0.9241, 0.0638, 0.7978, 0.5144, 0.2518, 0.1886, 0.1718, 0.0303, 0.4045, 0.6805, 0.1687, 0.8018, 0.8678, 0.8447, 0.6439, 0.1022, 0.0521, 0.1111, 0.4294, 0.6336, 0.278, 0.5277, 0.0545, 0.2871, 0.6942, 0.2403, 0.4503, 0.7505, 0.8703, 0.9936, 0.0858, 0.3322, 0.8812, 0.0845, 0.0103, 0.846, 0.9317, 0.9998, 0.9634, 0.7774, 0.9575, 0.179, 0.0538, 0.2431, 0.1832, 0.9563, 0.5041, 0.444, 0.3163, 0.7565, 0.6139, 0.4113, 0.9153, 0.0484, 0.4023, 0.853, 0.4815, 0.3887, 0.3562, 0.814, 0.991, 0.1309, 0.3343, 0.6858, 0.9131, 0.0205]])
print (np.array2string(model.predict([in0Min65745,in1Min65745,in0Con33466,in0Sub77325,in1Sub77325,in0Sub51750,in1Sub51750,in0Con36758,in0Dot76169,in1Dot76169,in0Con55191],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave30164.png')

LMin65745 = minimum_layer([[[[[[0.66, 0.7536]]]]], [[[[[0.7483, 0.5592]]]]]], Min65745), 
LRes22230 = reshape_layer(Min65745, [1, 1, 2], Res22230), 
LRes98640 = reshape_layer(Res22230, [1, 2], Res98640), 
LFla70350 = flatten_layer(Res98640, Fla70350), 
LCon33466 = concatenate_layer([Fla70350,[[0.7439, 0.6034, 0.0604, 0.8175, 0.97, 0.7354, 0.0968, 0.7575, 0.2356, 0.1522, 0.5143, 0.4, 0.568, 0.2866, 0.8444, 0.014, 0.964, 0.4586, 0.0504, 0.2517, 0.4111, 0.7635, 0.783, 0.2345, 0.2551, 0.0507, 0.7389, 0.5532, 0.5829, 0.2975, 0.3144, 0.5408, 0.0665, 0.0834, 0.5989, 0.7858, 0.8841, 0.9307, 0.5037, 0.6136, 0.9225, 0.9937, 0.4844, 0.186, 0.45, 0.9489, 0.8842, 0.9403, 0.8497, 0.9696, 0.3964, 0.3236, 0.7982, 0.3505, 0.5253, 0.1648, 0.4889, 0.6895, 0.2117, 0.5708, 0.1102, 0.5327, 0.98, 0.9324, 0.8085, 0.038, 0.0643, 0.4845, 0.7965, 0.5272, 0.9735, 0.8755, 0.0957, 0.7574, 0.8694, 0.3697, 0.6452, 0.3683, 0.9462]]], 1, Con33466), 
LSub77325 = subtract_layer([[[[[0.2856, 0.0464, 0.8608], [0.8495, 0.5669, 0.7563], [0.0061, 0.7285, 0.3535]], [[0.9193, 0.2898, 0.2568], [0.082, 0.1203, 0.4827], [0.1671, 0.2683, 0.032]], [[0.9886, 0.61, 0.9642], [0.0349, 0.3676, 0.5115], [0.7588, 0.4637, 0.1092]]], [[[0.2792, 0.8295, 0.4234], [0.7901, 0.141, 0.7514], [0.0481, 0.9706, 0.9631]], [[0.2597, 0.5396, 0.1833], [0.0049, 0.9255, 0.3149], [0.1529, 0.6946, 0.7528]], [[0.1148, 0.9452, 0.1816], [0.0363, 0.9848, 0.0928], [0.111, 0.4257, 0.6227]]], [[[0.8676, 0.7989, 0.0378], [0.7085, 0.7775, 0.7433], [0.6286, 0.479, 0.057]], [[0.1938, 0.2914, 0.9928], [0.3847, 0.3293, 0.8827], [0.2409, 0.3187, 0.4409]], [[0.3963, 0.5033, 0.967], [0.4026, 0.7989, 0.1241], [0.2281, 0.6292, 0.4258]]]]], [[[[[0.1865, 0.5281, 0.6631], [0.8904, 0.4024, 0.3606], [0.5145, 0.6055, 0.9021]], [[0.0876, 0.8821, 0.4377], [0.5081, 0.4041, 0.4278], [0.7175, 0.5071, 0.5835]], [[0.3455, 0.8164, 0.8978], [0.1256, 0.5678, 0.7668], [0.5828, 0.7092, 0.0905]]], [[[0.9481, 0.0008, 0.4152], [0.0565, 0.6945, 0.2466], [0.0321, 0.4382, 0.7849]], [[0.8172, 0.8795, 0.3874], [0.1735, 0.7392, 0.9935], [0.5761, 0.9869, 0.9803]], [[0.7085, 0.1447, 0.7706], [0.7305, 0.6346, 0.196], [0.2035, 0.3517, 0.7867]]], [[[0.1218, 0.0119, 0.5323], [0.1486, 0.4388, 0.6186], [0.4645, 0.2725, 0.2193]], [[0.1349, 0.6627, 0.606], [0.6528, 0.6693, 0.3805], [0.1181, 0.7509, 0.5643]], [[0.4515, 0.4493, 0.7161], [0.0989, 0.779, 0.2524], [0.0352, 0.3949, 0.6286]]]]], Sub77325), 
LRes46812 = reshape_layer(Sub77325, [3, 3, 9], Res46812), 
LRes62771 = reshape_layer(Res46812, [3, 27], Res62771), 
LSub51750 = subtract_layer([[[0.6075, 0.9309], [0.7541, 0.3429]]], [[[0.3997, 0.4043], [0.4175, 0.0865]]], Sub51750), 
LZer41368 = zero_padding1D_layer(Sub51750, 1, 0, Zer41368), 
LCon36758 = concatenate_layer([Zer41368,[[[0.6349, 0.7862, 0.0325, 0.1102, 0.948, 0.0727, 0.9711, 0.8949, 0.1129, 0.5252, 0.904, 0.0986, 0.522, 0.7297, 0.9237, 0.7374, 0.8379, 0.7756, 0.6978, 0.3607, 0.8775, 0.9464, 0.5807, 0.1119, 0.2858], [0.0198, 0.0722, 0.0732, 0.464, 0.4879, 0.5893, 0.2116, 0.6329, 0.4987, 0.3867, 0.3122, 0.4905, 0.2155, 0.9964, 0.2562, 0.6529, 0.5914, 0.7329, 0.8836, 0.954, 0.2647, 0.6594, 0.4651, 0.7261, 0.3969], [0.9015, 0.4997, 0.3825, 0.7926, 0.3522, 0.1543, 0.9778, 0.5684, 0.6179, 0.1668, 0.9381, 0.9735, 0.5254, 0.4425, 0.8182, 0.6993, 0.6276, 0.8957, 0.7724, 0.1651, 0.9262, 0.3069, 0.4013, 0.815, 0.465]]]], 2, Con36758), 
LMax32053 = maximum_layer([Res62771,Con36758], Max32053), 
LFla73860 = flatten_layer(Max32053, Fla73860), 
LDot76169 = dot_layer([[0.3248, 0.7402, 0.7863]], [[0.7584, 0.757, 0.0054]], 1, 1, Dot76169), 
LCon55191 = concatenate_layer([Dot76169,[[0.4849, 0.5477, 0.4233, 0.172, 0.9905, 0.1131, 0.2244, 0.4829, 0.0542, 0.91, 0.9856, 0.5735, 0.3553, 0.6937, 0.9241, 0.0638, 0.7978, 0.5144, 0.2518, 0.1886, 0.1718, 0.0303, 0.4045, 0.6805, 0.1687, 0.8018, 0.8678, 0.8447, 0.6439, 0.1022, 0.0521, 0.1111, 0.4294, 0.6336, 0.278, 0.5277, 0.0545, 0.2871, 0.6942, 0.2403, 0.4503, 0.7505, 0.8703, 0.9936, 0.0858, 0.3322, 0.8812, 0.0845, 0.0103, 0.846, 0.9317, 0.9998, 0.9634, 0.7774, 0.9575, 0.179, 0.0538, 0.2431, 0.1832, 0.9563, 0.5041, 0.444, 0.3163, 0.7565, 0.6139, 0.4113, 0.9153, 0.0484, 0.4023, 0.853, 0.4815, 0.3887, 0.3562, 0.814, 0.991, 0.1309, 0.3343, 0.6858, 0.9131, 0.0205]]], 1, Con55191), 
LAdd15461 = add_layer([Fla73860,Con55191], Add15461), 
LAve30164 = average_layer([Con33466,Add15461], Ave30164), 
exec_layers([LMin65745,LRes22230,LRes98640,LFla70350,LCon33466,LSub77325,LRes46812,LRes62771,LSub51750,LZer41368,LCon36758,LMax32053,LFla73860,LDot76169,LCon55191,LAdd15461,LAve30164],["Min65745","Res22230","Res98640","Fla70350","Con33466","Sub77325","Res46812","Res62771","Sub51750","Zer41368","Con36758","Max32053","Fla73860","Dot76169","Con55191","Add15461","Ave30164"],Ave30164,"Ave30164")

Actual (Unparsed): [[0.7850029, 0.5220500, 0.9632500, 0.9064500, 0.1984500, 1.1018500, 1.0155500, 0.5414000, 0.7754000, 0.8533000, 0.6292500, 0.8315000, 0.9959000, 0.4269500, 0.8918500, 0.9702000, 0.9159500, 0.7746000, 1.1581500, 0.7430000, 0.4684000, 0.3921000, 0.6594500, 1.0572000, 1.0221000, 0.2575500, 0.6713500, 0.5631500, 1.2061500, 0.6084500, 0.7093500, 0.2114000, 0.4651500, 0.7290500, 0.6447000, 0.2865000, 0.8797500, 0.6695000, 0.7789500, 0.9685500, 0.6172500, 0.6397000, 1.3347000, 1.0601000, 1.0654500, 0.4316000, 0.7913500, 1.3568500, 0.9613500, 0.6504000, 1.1775500, 1.1832000, 1.0611500, 0.8419500, 1.1607000, 1.0475000, 0.8029000, 0.3892500, 0.5572500, 0.8326500, 0.7601000, 0.6407000, 0.7660000, 0.7087000, 1.1772000, 0.9665500, 1.0789500, 0.9634000, 0.3190500, 0.6646500, 1.2338500, 0.8540000, 0.9949000, 1.0637000, 0.8410500, 1.0260500, 0.9632500, 0.5054500, 0.8661500, 1.0482000, 0.7158500]]

Expected (Unparsed): [[0.78500287,0.52205,0.9632499999999999,0.90645,0.19845,1.10185,1.01555,0.5414,0.7754,0.8533,0.62925,0.8315000000000001,0.9959,0.42695,0.89185,0.9702,0.91595,0.7746000000000001,1.15815,0.7430000000000001,0.4684,0.3921,0.65945,1.0572,1.0221,0.25754999999999995,0.6713499999999999,0.56315,1.20615,0.60845,0.7093499999999999,0.21139999999999998,0.46514999999999995,0.72905,0.6447,0.28650000000000003,0.87975,0.6695,0.77895,0.96855,0.6172500000000001,0.6396999999999999,1.3347,1.0601,1.06545,0.4316,0.79135,1.3568500000000001,0.9613499999999999,0.6504,1.1775499999999999,1.1832,1.06115,0.84195,1.1607,1.0474999999999999,0.8029,0.38925,0.55725,0.83265,0.7601,0.6406999999999999,0.766,0.7087,1.1772,0.96655,1.07895,0.9634,0.31905,0.66465,1.23385,0.8540000000000001,0.9949,1.0636999999999999,0.8410499999999999,1.02605,0.9632499999999999,0.50545,0.86615,1.0482,0.7158500000000001]]

Actual:   [[0.7851, 0.5221, 0.9633, 0.9065, 0.1985, 1.1019, 1.0156, 0.5414, 0.7754, 0.8533, 0.6293, 0.8315, 0.9959, 0.427, 0.8919, 0.9702, 0.916, 0.7746, 1.1582, 0.743, 0.4684, 0.3921, 0.6595, 1.0572, 1.0221, 0.2576, 0.6714, 0.5632, 1.2062, 0.6085, 0.7094, 0.2114, 0.4652, 0.7291, 0.6447, 0.2865, 0.8798, 0.6695, 0.779, 0.9686, 0.6173, 0.6397, 1.3347, 1.0601, 1.0655, 0.4316, 0.7914, 1.3569, 0.9614, 0.6504, 1.1776, 1.1832, 1.0612, 0.842, 1.1607, 1.0475, 0.8029, 0.3893, 0.5573, 0.8327, 0.7601, 0.6407, 0.766, 0.7087, 1.1772, 0.9666, 1.079, 0.9634, 0.3191, 0.6647, 1.2339, 0.854, 0.9949, 1.0637, 0.8411, 1.0261, 0.9633, 0.5055, 0.8662, 1.0482, 0.7159]]

Expected: [[0.7851, 0.5221, 0.9633, 0.9065, 0.1985, 1.1019, 1.0156, 0.5414, 0.7754, 0.8533, 0.6293, 0.8316, 0.9959, 0.427, 0.8919, 0.9702, 0.916, 0.7747, 1.1582, 0.7431, 0.4684, 0.3921, 0.6595, 1.0572, 1.0221, 0.2576, 0.6714, 0.5632, 1.2062, 0.6085, 0.7094, 0.2114, 0.4652, 0.7291, 0.6447, 0.2866, 0.8798, 0.6695, 0.779, 0.9686, 0.6173, 0.6397, 1.3347, 1.0601, 1.0655, 0.4316, 0.7914, 1.3569, 0.9614, 0.6504, 1.1776, 1.1832, 1.0612, 0.842, 1.1607, 1.0475, 0.8029, 0.3893, 0.5573, 0.8327, 0.7601, 0.6407, 0.766, 0.7087, 1.1772, 0.9666, 1.079, 0.9634, 0.3191, 0.6647, 1.2339, 0.8541, 0.9949, 1.0637, 0.8411, 1.0261, 0.9633, 0.5055, 0.8662, 1.0482, 0.7159]]