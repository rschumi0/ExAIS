import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave94149 = tf.keras.layers.Input(shape=([1, 2]))
in1Ave94149 = tf.keras.layers.Input(shape=([1, 2]))
in0Max52565 = tf.keras.layers.Input(shape=([1, 2]))
in1Max52565 = tf.keras.layers.Input(shape=([1, 2]))

Ave94149 = keras.layers.Average(name = 'Ave94149', )([in0Ave94149,in1Ave94149])
Max52565 = keras.layers.Maximum(name = 'Max52565', )([in0Max52565,in1Max52565])
Ave64603 = keras.layers.Average(name = 'Ave64603', )([Ave94149,Max52565])
Den58785 = keras.layers.Dense(3,name = 'Den58785', )(Ave64603)
model = tf.keras.models.Model(inputs=[in0Ave94149,in1Ave94149,in0Max52565,in1Max52565], outputs=Den58785)
w = model.get_layer('Den58785').get_weights() 
w[0] = np.array([[0.8137, 0.9285, 0.3198], [0.1334, 0.7087, 0.0778]])
w[1] = np.array([0.7989, 0.8915, 0.7996])
model.get_layer('Den58785').set_weights(w) 
in0Ave94149 = tf.constant([[[0.4628, 0.0581]]])
in1Ave94149 = tf.constant([[[0.0661, 0.9493]]])
in0Max52565 = tf.constant([[[0.943, 0.6528]]])
in1Max52565 = tf.constant([[[0.4656, 0.3777]]])
print (np.array2string(model.predict([in0Ave94149,in1Ave94149,in0Max52565,in1Max52565],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Den58785.png')

LAve94149 = average_layer([[[[0.4628, 0.0581]]], [[[0.0661, 0.9493]]]], Ave94149), 
LMax52565 = maximum_layer([[[[0.943, 0.6528]]], [[[0.4656, 0.3777]]]], Max52565), 
LAve64603 = average_layer([Ave94149,Max52565], Ave64603), 
LDen58785 = dense_layer(Ave64603, [[0.8137, 0.9285, 0.3198], [0.1334, 0.7087, 0.0778]],[0.7989, 0.8915, 0.7996], Den58785), 
exec_layers([LAve94149,LMax52565,LAve64603,LDen58785],["Ave94149","Max52565","Ave64603","Den58785"],Den58785,"Den58785")

Actual (Unparsed): [[[1.3672896, 1.8618645, 1.0376591]]]

Expected (Unparsed): [[[1.3672895825,1.8618644375,1.037659105]]]

Actual:   [[[1.3673, 1.8619, 1.0377]]]

Expected: [[[1.3673, 1.8619, 1.0377]]]