import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Per14290 = tf.keras.layers.Input(shape=([4, 3]))
in0Con8434 = tf.keras.layers.Input(shape=([4, 6, 3]))
in0Lay62624 = tf.keras.layers.Input(shape=([4, 2, 4]))

Per14290 = keras.layers.Permute((2,1), name = 'Per14290',)(in0Per14290)
Res36895 = keras.layers.Reshape((3, 4, 1), name = 'Res36895', )(Per14290)
Zer89936 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer89936', )(Res36895)
Con8434 = keras.layers.Concatenate(axis=3, name = 'Con8434', )([Zer89936,in0Con8434])
Lay62624 = keras.layers.LayerNormalization(axis=1, epsilon=1.5758044049242121, name = 'Lay62624', )(in0Lay62624)
Zer4517 = keras.layers.ZeroPadding2D(padding=((0, 0), (4, 0)), name = 'Zer4517', )(Lay62624)
Mul40589 = keras.layers.Multiply(name = 'Mul40589', )([Con8434,Zer4517])
Zer93391 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer93391', )(Mul40589)
Res21353 = keras.layers.Reshape((6, 32), name = 'Res21353', )(Zer93391)
LST75494 = keras.layers.LSTM(3,recurrent_activation='sigmoid', name = 'LST75494', )(Res21353)
model = tf.keras.models.Model(inputs=[in0Per14290,in0Con8434,in0Lay62624], outputs=LST75494)
w = model.get_layer('LST75494').get_weights() 
w[0] = np.array([[5, 2, 1, 1, 5, 3, 4, 5, 1, 5, 5, 4], [5, 2, 10, 8, 10, 2, 1, 6, 10, 2, 6, 1], [9, 8, 1, 3, 9, 9, 5, 2, 2, 1, 4, 9], [1, 5, 3, 2, 7, 10, 8, 2, 4, 4, 1, 10], [1, 1, 10, 6, 1, 9, 6, 10, 10, 10, 3, 8], [4, 3, 10, 1, 8, 2, 10, 8, 10, 3, 10, 6], [7, 5, 2, 2, 5, 6, 3, 7, 5, 9, 9, 9], [3, 2, 6, 5, 9, 3, 9, 1, 6, 10, 2, 3], [5, 1, 8, 2, 3, 3, 8, 3, 8, 8, 2, 5], [10, 9, 6, 2, 4, 6, 7, 6, 9, 6, 9, 6], [6, 7, 6, 2, 9, 9, 10, 7, 7, 2, 3, 10], [3, 2, 9, 7, 9, 9, 7, 4, 7, 2, 2, 4], [3, 10, 4, 10, 5, 5, 3, 7, 7, 2, 4, 7], [5, 7, 10, 4, 2, 1, 5, 5, 2, 7, 10, 1], [3, 2, 4, 5, 9, 9, 7, 6, 6, 7, 3, 7], [7, 10, 1, 7, 7, 10, 9, 7, 1, 5, 3, 8], [5, 8, 5, 6, 7, 3, 2, 7, 10, 2, 5, 8], [4, 7, 8, 9, 5, 1, 5, 1, 2, 5, 5, 9], [10, 6, 7, 7, 3, 10, 8, 5, 1, 5, 9, 7], [3, 9, 3, 8, 8, 7, 7, 9, 8, 2, 5, 6], [5, 4, 3, 5, 5, 7, 9, 1, 10, 4, 2, 7], [9, 7, 9, 5, 8, 8, 9, 8, 6, 6, 9, 4], [5, 1, 5, 9, 6, 7, 4, 5, 8, 10, 3, 8], [7, 6, 4, 9, 4, 7, 9, 9, 1, 7, 8, 9], [10, 1, 7, 8, 3, 5, 5, 1, 4, 10, 6, 9], [1, 6, 1, 6, 4, 5, 2, 3, 8, 9, 10, 2], [10, 9, 2, 8, 9, 7, 8, 2, 3, 8, 1, 2], [10, 6, 7, 2, 4, 10, 9, 8, 3, 10, 10, 7], [5, 5, 8, 8, 5, 3, 2, 6, 10, 10, 6, 1], [7, 10, 4, 4, 9, 5, 2, 6, 8, 7, 5, 10], [8, 6, 2, 2, 5, 10, 6, 4, 8, 6, 3, 1], [9, 3, 9, 9, 5, 9, 10, 2, 3, 3, 8, 7]])
w[1] = np.array([[9, 6, 10, 1, 3, 9, 5, 5, 10, 10, 6, 3], [8, 7, 7, 5, 9, 2, 1, 7, 6, 6, 5, 6], [5, 2, 7, 8, 4, 10, 5, 8, 1, 5, 10, 10]])
w[2] = np.array([9, 3, 5, 3, 10, 7, 6, 5, 1, 2, 9, 10])
model.get_layer('LST75494').set_weights(w) 
in0Per14290 = tf.constant([[[1.8075, 1.4037, 1.8542], [1.9348, 1.2068, 1.846], [1.1909, 1.2442, 1.1902], [1.0776, 1.7599, 1.5271]]])
in0Con8434 = tf.constant([[[[0.6505, 0.8671, 0.2314], [0.2127, 0.8127, 0.4413], [0.652, 0.7217, 0.0172], [0.2093, 0.9873, 0.9086], [0.6732, 0.722, 0.5066], [0.2236, 0.4944, 0.4817]], [[0.8306, 0.7426, 0.5342], [0.181, 0.7831, 0.4431], [0.8917, 0.8348, 0.9179], [0.7507, 0.2681, 0.0554], [0.4006, 0.4094, 0.4367], [0.0181, 0.7025, 0.5391]], [[0.6071, 0.2451, 0.8657], [0.3404, 0.6075, 0.1928], [0.937, 0.2808, 0.789], [0.7734, 0.5387, 0.7559], [0.5624, 0.3606, 0.4378], [0.1564, 0.5209, 0.536]], [[0.4138, 0.9903, 0.1698], [0.8172, 0.6789, 0.2134], [0.3902, 0.8745, 0.6051], [0.202, 0.8946, 0.2922], [0.5308, 0.8634, 0.1007], [0.7594, 0.9797, 0.2283]]]])
in0Lay62624 = tf.constant([[[[1.7021, 1.863, 1.2419, 1.2913], [1.8016, 1.5296, 1.7999, 1.7776]], [[1.4526, 1.3896, 1.7057, 1.389], [1.27, 1.2826, 1.7656, 1.6946]], [[1.3355, 1.7094, 1.7965, 1.5446], [1.6059, 1.1045, 1.2103, 1.9267]], [[1.8887, 1.1572, 1.1013, 1.0722], [1.8336, 1.7315, 1.0994, 1.9752]]]])
print (np.array2string(model.predict([in0Per14290,in0Con8434,in0Lay62624],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='LST75494.png')

LPer14290 = permute_layer([[[1.8075, 1.4037, 1.8542], [1.9348, 1.2068, 1.846], [1.1909, 1.2442, 1.1902], [1.0776, 1.7599, 1.5271]]], 2,1, Per14290), 
LRes36895 = reshape_layer(Per14290, [3, 4, 1], Res36895), 
LZer89936 = zero_padding2D_layer(Res36895, 1, 0, 2, 0, Zer89936), 
LCon8434 = concatenate_layer([Zer89936,[[[[0.6505, 0.8671, 0.2314], [0.2127, 0.8127, 0.4413], [0.652, 0.7217, 0.0172], [0.2093, 0.9873, 0.9086], [0.6732, 0.722, 0.5066], [0.2236, 0.4944, 0.4817]], [[0.8306, 0.7426, 0.5342], [0.181, 0.7831, 0.4431], [0.8917, 0.8348, 0.9179], [0.7507, 0.2681, 0.0554], [0.4006, 0.4094, 0.4367], [0.0181, 0.7025, 0.5391]], [[0.6071, 0.2451, 0.8657], [0.3404, 0.6075, 0.1928], [0.937, 0.2808, 0.789], [0.7734, 0.5387, 0.7559], [0.5624, 0.3606, 0.4378], [0.1564, 0.5209, 0.536]], [[0.4138, 0.9903, 0.1698], [0.8172, 0.6789, 0.2134], [0.3902, 0.8745, 0.6051], [0.202, 0.8946, 0.2922], [0.5308, 0.8634, 0.1007], [0.7594, 0.9797, 0.2283]]]]], 3, Con8434), 
LLay62624 = layer_normalization_layer([[[[1.7021, 1.863, 1.2419, 1.2913], [1.8016, 1.5296, 1.7999, 1.7776]], [[1.4526, 1.3896, 1.7057, 1.389], [1.27, 1.2826, 1.7656, 1.6946]], [[1.3355, 1.7094, 1.7965, 1.5446], [1.6059, 1.1045, 1.2103, 1.9267]], [[1.8887, 1.1572, 1.1013, 1.0722], [1.8336, 1.7315, 1.0994, 1.9752]]]], 1, 1.5758044049242121, Lay62624), 
LZer4517 = zero_padding2D_layer(Lay62624, 0, 0, 4, 0, Zer4517), 
LMul40589 = multiply_layer([Con8434,Zer4517], Mul40589), 
LZer93391 = zero_padding2D_layer(Mul40589, 1, 1, 1, 1, Zer93391), 
LRes21353 = reshape_layer(Zer93391, [6, 32], Res21353), 
LLST75494 = lstm_layer(Res21353,[[5, 2, 1, 1, 5, 3, 4, 5, 1, 5, 5, 4], [5, 2, 10, 8, 10, 2, 1, 6, 10, 2, 6, 1], [9, 8, 1, 3, 9, 9, 5, 2, 2, 1, 4, 9], [1, 5, 3, 2, 7, 10, 8, 2, 4, 4, 1, 10], [1, 1, 10, 6, 1, 9, 6, 10, 10, 10, 3, 8], [4, 3, 10, 1, 8, 2, 10, 8, 10, 3, 10, 6], [7, 5, 2, 2, 5, 6, 3, 7, 5, 9, 9, 9], [3, 2, 6, 5, 9, 3, 9, 1, 6, 10, 2, 3], [5, 1, 8, 2, 3, 3, 8, 3, 8, 8, 2, 5], [10, 9, 6, 2, 4, 6, 7, 6, 9, 6, 9, 6], [6, 7, 6, 2, 9, 9, 10, 7, 7, 2, 3, 10], [3, 2, 9, 7, 9, 9, 7, 4, 7, 2, 2, 4], [3, 10, 4, 10, 5, 5, 3, 7, 7, 2, 4, 7], [5, 7, 10, 4, 2, 1, 5, 5, 2, 7, 10, 1], [3, 2, 4, 5, 9, 9, 7, 6, 6, 7, 3, 7], [7, 10, 1, 7, 7, 10, 9, 7, 1, 5, 3, 8], [5, 8, 5, 6, 7, 3, 2, 7, 10, 2, 5, 8], [4, 7, 8, 9, 5, 1, 5, 1, 2, 5, 5, 9], [10, 6, 7, 7, 3, 10, 8, 5, 1, 5, 9, 7], [3, 9, 3, 8, 8, 7, 7, 9, 8, 2, 5, 6], [5, 4, 3, 5, 5, 7, 9, 1, 10, 4, 2, 7], [9, 7, 9, 5, 8, 8, 9, 8, 6, 6, 9, 4], [5, 1, 5, 9, 6, 7, 4, 5, 8, 10, 3, 8], [7, 6, 4, 9, 4, 7, 9, 9, 1, 7, 8, 9], [10, 1, 7, 8, 3, 5, 5, 1, 4, 10, 6, 9], [1, 6, 1, 6, 4, 5, 2, 3, 8, 9, 10, 2], [10, 9, 2, 8, 9, 7, 8, 2, 3, 8, 1, 2], [10, 6, 7, 2, 4, 10, 9, 8, 3, 10, 10, 7], [5, 5, 8, 8, 5, 3, 2, 6, 10, 10, 6, 1], [7, 10, 4, 4, 9, 5, 2, 6, 8, 7, 5, 10], [8, 6, 2, 2, 5, 10, 6, 4, 8, 6, 3, 1], [9, 3, 9, 9, 5, 9, 10, 2, 3, 3, 8, 7]],[[9, 6, 10, 1, 3, 9, 5, 5, 10, 10, 6, 3], [8, 7, 7, 5, 9, 2, 1, 7, 6, 6, 5, 6], [5, 2, 7, 8, 4, 10, 5, 8, 1, 5, 10, 10]],[9, 3, 5, 3, 10, 7, 6, 5, 1, 2, 9, 10], LST75494), 
exec_layers([LPer14290,LRes36895,LZer89936,LCon8434,LLay62624,LZer4517,LMul40589,LZer93391,LRes21353,LLST75494],["Per14290","Res36895","Zer89936","Con8434","Lay62624","Zer4517","Mul40589","Zer93391","Res21353","LST75494"],LST75494,"LST75494")

Actual (Unparsed): [[0.9999877, 0.9999865, 0.9999800]]

Expected (Unparsed): [[0.9999877081335597,0.999986486673839,0.9999800015671445]]

Actual:   [[1, 1, 1]]

Expected: [[1, 1, 1]]