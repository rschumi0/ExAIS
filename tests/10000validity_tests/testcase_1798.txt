import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add65294 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Add65294 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))

Add65294 = keras.layers.Add(name = 'Add65294', )([in0Add65294,in1Add65294])
Zer73484 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer73484', )(Add65294)
Mas67532 = keras.layers.Masking(mask_value=2, name = 'Mas67532', )(Zer73484)
model = tf.keras.models.Model(inputs=[in0Add65294,in1Add65294], outputs=Mas67532)
in0Add65294 = tf.constant([[[[[0.217, 0.3308], [0.5395, 0.8545]], [[0.155, 0.9845], [0.9973, 0.166]]], [[[0.5303, 0.3511], [0.3295, 0.993]], [[0.0668, 0.2433], [0.9946, 0.3647]]]]])
in1Add65294 = tf.constant([[[[[0.5394, 0.526], [0.2454, 0.6812]], [[0.9016, 0.532], [0.2193, 0.7711]]], [[[0.263, 0.06], [0.9895, 0.9343]], [[0.6206, 0.9855], [0.1918, 0.9535]]]]])
print (np.array2string(model.predict([in0Add65294,in1Add65294],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mas67532.png')

LAdd65294 = add_layer([[[[[[0.217, 0.3308], [0.5395, 0.8545]], [[0.155, 0.9845], [0.9973, 0.166]]], [[[0.5303, 0.3511], [0.3295, 0.993]], [[0.0668, 0.2433], [0.9946, 0.3647]]]]], [[[[[0.5394, 0.526], [0.2454, 0.6812]], [[0.9016, 0.532], [0.2193, 0.7711]]], [[[0.263, 0.06], [0.9895, 0.9343]], [[0.6206, 0.9855], [0.1918, 0.9535]]]]]], Add65294), 
LZer73484 = zero_padding3D_layer(Add65294, 1, 1, 1, 1, 1, 1, Zer73484), 
LMas67532 = masking_layer(Zer73484, 2, Mas67532), 
exec_layers([LAdd65294,LZer73484,LMas67532],["Add65294","Zer73484","Mas67532"],Mas67532,"Mas67532")

Actual (Unparsed): [[[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.7564000, 0.8568000], [0.7849000, 1.5357000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [1.0566000, 1.5165000], [1.2166000, 0.9371000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.7933000, 0.4111000], [1.3190000, 1.9273000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.6874000, 1.2288000], [1.1864000, 1.3182000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]]]]

Expected (Unparsed): [[[[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]]],[[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0.7564,0.8568],[0.7848999999999999,1.5357],[0,0]],[[0,0],[1.0566,1.5165000000000002],[1.2166,0.9371],[0,0]],[[0,0],[0,0],[0,0],[0,0]]],[[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0.7933,0.4111],[1.319,1.9273],[0,0]],[[0,0],[0.6874,1.2288000000000001],[1.1864000000000001,1.3182],[0,0]],[[0,0],[0,0],[0,0],[0,0]]],[[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]]]]]

Actual:   [[[[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0.7564, 0.8568], [0.7849, 1.5357], [0, 0]], [[0, 0], [1.0566, 1.5165], [1.2166, 0.9371], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0.7933, 0.4111], [1.319, 1.9273], [0, 0]], [[0, 0], [0.6874, 1.2288], [1.1864, 1.3182], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]]]]

Expected: [[[[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0.7564, 0.8568], [0.7849, 1.5357], [0, 0]], [[0, 0], [1.0566, 1.5166], [1.2166, 0.9371], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0.7933, 0.4111], [1.319, 1.9273], [0, 0]], [[0, 0], [0.6874, 1.2289], [1.1865, 1.3182], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]]]]