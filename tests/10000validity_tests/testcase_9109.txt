import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max20875 = tf.keras.layers.Input(shape=([2, 2]))
in1Max20875 = tf.keras.layers.Input(shape=([2, 2]))
in0Up_24938 = tf.keras.layers.Input(shape=([3, 3]))
in0Con29518 = tf.keras.layers.Input(shape=([6, 13]))

Max20875 = keras.layers.Maximum(name = 'Max20875', )([in0Max20875,in1Max20875])
Loc35408 = keras.layers.LocallyConnected1D(4, (2),strides=(1), name = 'Loc35408', )(Max20875)
Res96112 = keras.layers.Reshape((1, 4, 1), name = 'Res96112', )(Loc35408)
Sep727 = keras.layers.SeparableConv2D(4, (1, 1),strides=(1, 1), padding='same', name = 'Sep727', )(Res96112)
Res6124 = keras.layers.Reshape((1, 16), name = 'Res6124', )(Sep727)
Zer51328 = keras.layers.ZeroPadding1D(padding=((5, 0)), name = 'Zer51328', )(Res6124)
Up_24938 = keras.layers.UpSampling1D(size=(2), name = 'Up_24938', )(in0Up_24938)
Con29518 = keras.layers.Concatenate(axis=2, name = 'Con29518', )([Up_24938,in0Con29518])
Max23231 = keras.layers.Maximum(name = 'Max23231', )([Zer51328,Con29518])
model = tf.keras.models.Model(inputs=[in0Max20875,in1Max20875,in0Up_24938,in0Con29518], outputs=Max23231)
w = model.get_layer('Loc35408').get_weights() 
w[0] = np.array([[[0.2468, 0.1841, 0.8967, 0.9621], [0.3131, 0.4469, 0.6749, 0.4947], [0.1637, 0.0677, 0.6736, 0.7922], [0.0551, 0.6271, 0.7846, 0.3502]]])
w[1] = np.array([[0, 0, 0, 0]])
model.get_layer('Loc35408').set_weights(w) 
w = model.get_layer('Sep727').get_weights() 
w[0] = np.array([[[[0.1483]]]])
w[1] = np.array([[[[0.7542, 0.7151, 0.3147, 0.4347]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep727').set_weights(w) 
in0Max20875 = tf.constant([[[0.4962, 0.6996], [0.5857, 0.7963]]])
in1Max20875 = tf.constant([[[0.2073, 0.0767], [0.3563, 0.8906]]])
in0Up_24938 = tf.constant([[[1.5836, 1.6, 1.7078], [1.7761, 1.6793, 1.4597], [1.7125, 1.3923, 1.1397]]])
in0Con29518 = tf.constant([[[0.142, 0.0401, 0.8614, 0.9888, 0.0545, 0.86, 0.242, 0.953, 0.5095, 0.0578, 0.3009, 0.485, 0.1067], [0.7672, 0.244, 0.6722, 0.624, 0.8014, 0.5971, 0.2619, 0.4613, 0.8293, 0.8137, 0.9035, 0.5837, 0.9288], [0.754, 0.9608, 0.5879, 0.6459, 0.7216, 0.0912, 0.0585, 0.3017, 0.7447, 0.9798, 0.083, 0.3099, 0.4411], [0.7183, 0.6495, 0.6929, 0.1148, 0.3188, 0.664, 0.8217, 0.6988, 0.7681, 0.4926, 0.6384, 0.7814, 0.8428], [0.2614, 0.2694, 0.2289, 0.6295, 0.6248, 0.9891, 0.857, 0.326, 0.353, 0.9498, 0.1879, 0.4327, 0.8843], [0.9594, 0.5825, 0.8887, 0.934, 0.8585, 0.9379, 0.0538, 0.363, 0.7256, 0.6996, 0.6923, 0.7688, 0.2217]]])
print (np.array2string(model.predict([in0Max20875,in1Max20875,in0Up_24938,in0Con29518],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max23231.png')

LMax20875 = maximum_layer([[[[0.4962, 0.6996], [0.5857, 0.7963]]], [[[0.2073, 0.0767], [0.3563, 0.8906]]]], Max20875), 
LLoc35408 = locally_connected1D_layer(Max20875, 2,[[[0.2468, 0.1841, 0.8967, 0.9621], [0.3131, 0.4469, 0.6749, 0.4947], [0.1637, 0.0677, 0.6736, 0.7922], [0.0551, 0.6271, 0.7846, 0.3502]]],[[0, 0, 0, 0]], 1, Loc35408), 
LRes96112 = reshape_layer(Loc35408, [1, 4, 1], Res96112), 
LSep727 = separable_conv2D_layer(Res96112, 1, 1,[[[[[0.1483]]]],[[[[0.7542, 0.7151, 0.3147, 0.4347]]]]],[0, 0, 0, 0], 1, 1, true, Sep727), 
LRes6124 = reshape_layer(Sep727, [1, 16], Res6124), 
LZer51328 = zero_padding1D_layer(Res6124, 5, 0, Zer51328), 
LUp_24938 = up_sampling1D_layer([[[1.5836, 1.6, 1.7078], [1.7761, 1.6793, 1.4597], [1.7125, 1.3923, 1.1397]]], 2, Up_24938), 
LCon29518 = concatenate_layer([Up_24938,[[[0.142, 0.0401, 0.8614, 0.9888, 0.0545, 0.86, 0.242, 0.953, 0.5095, 0.0578, 0.3009, 0.485, 0.1067], [0.7672, 0.244, 0.6722, 0.624, 0.8014, 0.5971, 0.2619, 0.4613, 0.8293, 0.8137, 0.9035, 0.5837, 0.9288], [0.754, 0.9608, 0.5879, 0.6459, 0.7216, 0.0912, 0.0585, 0.3017, 0.7447, 0.9798, 0.083, 0.3099, 0.4411], [0.7183, 0.6495, 0.6929, 0.1148, 0.3188, 0.664, 0.8217, 0.6988, 0.7681, 0.4926, 0.6384, 0.7814, 0.8428], [0.2614, 0.2694, 0.2289, 0.6295, 0.6248, 0.9891, 0.857, 0.326, 0.353, 0.9498, 0.1879, 0.4327, 0.8843], [0.9594, 0.5825, 0.8887, 0.934, 0.8585, 0.9379, 0.0538, 0.363, 0.7256, 0.6996, 0.6923, 0.7688, 0.2217]]]], 2, Con29518), 
LMax23231 = maximum_layer([Zer51328,Con29518], Max23231), 
exec_layers([LMax20875,LLoc35408,LRes96112,LSep727,LRes6124,LZer51328,LUp_24938,LCon29518,LMax23231],["Max20875","Loc35408","Res96112","Sep727","Res6124","Zer51328","Up_24938","Con29518","Max23231"],Max23231,"Max23231")

Actual (Unparsed): [[[1.5836000, 1.6000000, 1.7078000, 0.1420000, 0.0401000, 0.8614000, 0.9888000, 0.0545000, 0.8600000, 0.2420000, 0.9530000, 0.5095000, 0.0578000, 0.3009000, 0.4850000, 0.1067000], [1.5836000, 1.6000000, 1.7078000, 0.7672000, 0.2440000, 0.6722000, 0.6240000, 0.8014000, 0.5971000, 0.2619000, 0.4613000, 0.8293000, 0.8137000, 0.9035000, 0.5837000, 0.9288000], [1.7761000, 1.6793000, 1.4597000, 0.7540000, 0.9608000, 0.5879000, 0.6459000, 0.7216000, 0.0912000, 0.0585000, 0.3017000, 0.7447000, 0.9798000, 0.0830000, 0.3099000, 0.4411000], [1.7761000, 1.6793000, 1.4597000, 0.7183000, 0.6495000, 0.6929000, 0.1148000, 0.3188000, 0.6640000, 0.8217000, 0.6988000, 0.7681000, 0.4926000, 0.6384000, 0.7814000, 0.8428000], [1.7125000, 1.3923000, 1.1397001, 0.2614000, 0.2694000, 0.2289000, 0.6295000, 0.6248000, 0.9891000, 0.8570000, 0.3260000, 0.3530000, 0.9498000, 0.1879000, 0.4327000, 0.8843000], [1.7125000, 1.3923000, 1.1397001, 0.9594000, 0.5825000, 0.8887000, 0.9340000, 0.8585000, 0.9379000, 0.2132010, 0.3630000, 0.7256000, 0.6996000, 0.6923000, 0.7688000, 0.2217000]]]

Expected (Unparsed): [[[1.5836,1.6,1.7078,0.142,0.0401,0.8614,0.9888,0.0545,0.86,0.242,0.953,0.5095,0.0578,0.3009,0.485,0.1067],[1.5836,1.6,1.7078,0.7672,0.244,0.6722,0.624,0.8014,0.5971,0.2619,0.4613,0.8293,0.8137,0.9035,0.5837,0.9288],[1.7761,1.6793,1.4597,0.754,0.9608,0.5879,0.6459,0.7216,0.0912,0.0585,0.3017,0.7447,0.9798,0.083,0.3099,0.4411],[1.7761,1.6793,1.4597,0.7183,0.6495,0.6929,0.1148,0.3188,0.664,0.8217,0.6988,0.7681,0.4926,0.6384,0.7814,0.8428],[1.7125,1.3923,1.1397,0.2614,0.2694,0.2289,0.6295,0.6248,0.9891,0.857,0.326,0.353,0.9498,0.1879,0.4327,0.8843],[1.7125,1.3923,1.1397,0.9594,0.5825,0.8887,0.934,0.8585,0.9379,0.21320102793844375,0.363,0.7256,0.6996,0.6923,0.7688,0.2217]]]

Actual:   [[[1.5836, 1.6, 1.7078, 0.142, 0.0401, 0.8614, 0.9888, 0.0545, 0.86, 0.242, 0.953, 0.5095, 0.0578, 0.3009, 0.485, 0.1067], [1.5836, 1.6, 1.7078, 0.7672, 0.244, 0.6722, 0.624, 0.8014, 0.5971, 0.2619, 0.4613, 0.8293, 0.8137, 0.9035, 0.5837, 0.9288], [1.7761, 1.6793, 1.4597, 0.754, 0.9608, 0.5879, 0.6459, 0.7216, 0.0912, 0.0585, 0.3017, 0.7447, 0.9798, 0.083, 0.3099, 0.4411], [1.7761, 1.6793, 1.4597, 0.7183, 0.6495, 0.6929, 0.1148, 0.3188, 0.664, 0.8217, 0.6988, 0.7681, 0.4926, 0.6384, 0.7814, 0.8428], [1.7125, 1.3923, 1.1398, 0.2614, 0.2694, 0.2289, 0.6295, 0.6248, 0.9891, 0.857, 0.326, 0.353, 0.9498, 0.1879, 0.4327, 0.8843], [1.7125, 1.3923, 1.1398, 0.9594, 0.5825, 0.8887, 0.934, 0.8585, 0.9379, 0.2133, 0.363, 0.7256, 0.6996, 0.6923, 0.7688, 0.2217]]]

Expected: [[[1.5836, 1.6, 1.7078, 0.142, 0.0401, 0.8614, 0.9888, 0.0545, 0.86, 0.242, 0.953, 0.5095, 0.0578, 0.3009, 0.485, 0.1067], [1.5836, 1.6, 1.7078, 0.7672, 0.244, 0.6722, 0.624, 0.8014, 0.5971, 0.2619, 0.4613, 0.8293, 0.8137, 0.9035, 0.5837, 0.9288], [1.7761, 1.6793, 1.4597, 0.754, 0.9608, 0.5879, 0.6459, 0.7216, 0.0912, 0.0585, 0.3017, 0.7447, 0.9798, 0.083, 0.3099, 0.4411], [1.7761, 1.6793, 1.4597, 0.7183, 0.6495, 0.6929, 0.1148, 0.3188, 0.664, 0.8217, 0.6988, 0.7681, 0.4926, 0.6384, 0.7814, 0.8428], [1.7125, 1.3923, 1.1397, 0.2614, 0.2694, 0.2289, 0.6295, 0.6248, 0.9891, 0.857, 0.326, 0.353, 0.9498, 0.1879, 0.4327, 0.8843], [1.7125, 1.3923, 1.1397, 0.9594, 0.5825, 0.8887, 0.934, 0.8585, 0.9379, 0.2133, 0.363, 0.7256, 0.6996, 0.6923, 0.7688, 0.2217]]]