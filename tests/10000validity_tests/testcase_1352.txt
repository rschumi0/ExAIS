import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul45901 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Mul45901 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con26938 = tf.keras.layers.Input(shape=([2, 2, 3]))
in0Dep17575 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Ave26810 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in1Ave26810 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Min45522 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Min45522 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con54744 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con39352 = tf.keras.layers.Input(shape=([2, 2, 2]))

Mul45901 = keras.layers.Multiply(name = 'Mul45901', )([in0Mul45901,in1Mul45901])
Zer80733 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer80733', )(Mul45901)
Con26938 = keras.layers.Concatenate(axis=3, name = 'Con26938', )([Zer80733,in0Con26938])
Dep17575 = keras.layers.DepthwiseConv2D((1, 2),strides=(1, 1), padding='same', name = 'Dep17575', )(in0Dep17575)
Sep82914 = keras.layers.SeparableConv2D(4, (1, 1),strides=(1, 1), padding='valid', name = 'Sep82914', )(Dep17575)
Zer93823 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer93823', )(Sep82914)
Ave26810 = keras.layers.Average(name = 'Ave26810', )([in0Ave26810,in1Ave26810])
Res62192 = keras.layers.Reshape((2, 2, 2), name = 'Res62192', )(Ave26810)
Min45522 = keras.layers.Minimum(name = 'Min45522', )([in0Min45522,in1Min45522])
Zer24857 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer24857', )(Min45522)
Con54744 = keras.layers.Concatenate(axis=3, name = 'Con54744', )([Zer24857,in0Con54744])
Ave81491 = keras.layers.Average(name = 'Ave81491', )([Res62192,Con54744])
Con39352 = keras.layers.Concatenate(axis=3, name = 'Con39352', )([Ave81491,in0Con39352])
Sub89372 = keras.layers.Subtract(name = 'Sub89372', )([Zer93823,Con39352])
Min8980 = keras.layers.Minimum(name = 'Min8980', )([Con26938,Sub89372])
model = tf.keras.models.Model(inputs=[in0Mul45901,in1Mul45901,in0Con26938,in0Dep17575,in0Ave26810,in1Ave26810,in0Min45522,in1Min45522,in0Con54744,in0Con39352], outputs=Min8980)
w = model.get_layer('Dep17575').get_weights() 
w[0] = np.array([[[[0.6413]], [[0.362]]]])
w[1] = np.array([0])
model.get_layer('Dep17575').set_weights(w) 
w = model.get_layer('Sep82914').get_weights() 
w[0] = np.array([[[[0.0616]]]])
w[1] = np.array([[[[0.3763, 0.8793, 0.617, 0.173]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep82914').set_weights(w) 
in0Mul45901 = tf.constant([[[[0.6809]]]])
in1Mul45901 = tf.constant([[[[0.5786]]]])
in0Con26938 = tf.constant([[[[0.5789, 0.8343, 0.5153], [0.0374, 0.9503, 0.5249]], [[0.8747, 0.6658, 0.0686], [0.9337, 0.0051, 0.1342]]]])
in0Dep17575 = tf.constant([[[[0.6735], [0.2]]]])
in0Ave26810 = tf.constant([[[[[0.4294], [0.7613]], [[0.0289], [0.144]]], [[[0.4776], [0.2858]], [[0.1448], [0.9066]]]]])
in1Ave26810 = tf.constant([[[[[0.5634], [0.559]], [[0.9679], [0.126]]], [[[0.0273], [0.9734]], [[0.4089], [0.7173]]]]])
in0Min45522 = tf.constant([[[[0.8443]]]])
in1Min45522 = tf.constant([[[[0.758]]]])
in0Con54744 = tf.constant([[[[0.8802], [0.7023]], [[0.4893], [0.5897]]]])
in0Con39352 = tf.constant([[[[0.9347, 0.2937], [0.7121, 0.5454]], [[0.3564, 0.6273], [0.6391, 0.8429]]]])
print (np.array2string(model.predict([in0Mul45901,in1Mul45901,in0Con26938,in0Dep17575,in0Ave26810,in1Ave26810,in0Min45522,in1Min45522,in0Con54744,in0Con39352],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min8980.png')

LMul45901 = multiply_layer([[[[[0.6809]]]], [[[[0.5786]]]]], Mul45901), 
LZer80733 = zero_padding2D_layer(Mul45901, 1, 0, 1, 0, Zer80733), 
LCon26938 = concatenate_layer([Zer80733,[[[[0.5789, 0.8343, 0.5153], [0.0374, 0.9503, 0.5249]], [[0.8747, 0.6658, 0.0686], [0.9337, 0.0051, 0.1342]]]]], 3, Con26938), 
LDep17575 = depthwise_conv2D_layer([[[[0.6735], [0.2]]]], 1, 2,[[[[0.6413]], [[0.362]]]],[0], 1, 1, true, Dep17575), 
LSep82914 = separable_conv2D_layer(Dep17575, 1, 1,[[[[[0.0616]]]],[[[[0.3763, 0.8793, 0.617, 0.173]]]]],[0, 0, 0, 0], 1, 1, false, Sep82914), 
LZer93823 = zero_padding2D_layer(Sep82914, 1, 0, 0, 0, Zer93823), 
LAve26810 = average_layer([[[[[[0.4294], [0.7613]], [[0.0289], [0.144]]], [[[0.4776], [0.2858]], [[0.1448], [0.9066]]]]], [[[[[0.5634], [0.559]], [[0.9679], [0.126]]], [[[0.0273], [0.9734]], [[0.4089], [0.7173]]]]]], Ave26810), 
LRes62192 = reshape_layer(Ave26810, [2, 2, 2], Res62192), 
LMin45522 = minimum_layer([[[[[0.8443]]]], [[[[0.758]]]]], Min45522), 
LZer24857 = zero_padding2D_layer(Min45522, 1, 0, 1, 0, Zer24857), 
LCon54744 = concatenate_layer([Zer24857,[[[[0.8802], [0.7023]], [[0.4893], [0.5897]]]]], 3, Con54744), 
LAve81491 = average_layer([Res62192,Con54744], Ave81491), 
LCon39352 = concatenate_layer([Ave81491,[[[[0.9347, 0.2937], [0.7121, 0.5454]], [[0.3564, 0.6273], [0.6391, 0.8429]]]]], 3, Con39352), 
LSub89372 = subtract_layer(Zer93823,Con39352, Sub89372), 
LMin8980 = minimum_layer([Con26938,Sub89372], Min8980), 
exec_layers([LMul45901,LZer80733,LCon26938,LDep17575,LSep82914,LZer93823,LAve26810,LRes62192,LMin45522,LZer24857,LCon54744,LAve81491,LCon39352,LSub89372,LMin8980],["Mul45901","Zer80733","Con26938","Dep17575","Sep82914","Zer93823","Ave26810","Res62192","Min45522","Zer24857","Con54744","Ave81491","Con39352","Sub89372","Min8980"],Min8980,"Min8980")

Actual (Unparsed): [[[[-0.2482000, -0.7701750, -0.9347000, -0.2937000], [-0.2492000, -0.4186500, -0.7121000, -0.5454000]], [[-0.1145349, -0.5321338, -0.3372324, -0.6219256], [-0.5144519, -0.6938778, -0.6342252, -0.8415331]]]]

Expected (Unparsed): [[[[-0.2482,-0.770175,-0.9347,-0.2937],[-0.2492,-0.41865,-0.7121,-0.5454]],[[-0.114534925205756,-0.532133808752116,-0.33723237802804,-0.62192561004676],[-0.5144519229392001,-0.6938778124912001,-0.634225196528,-0.841533158832]]]]

Actual:   [[[[-0.2482, -0.7701, -0.9347, -0.2937], [-0.2492, -0.4186, -0.7121, -0.5454]], [[-0.1145, -0.5321, -0.3372, -0.6219], [-0.5144, -0.6938, -0.6342, -0.8415]]]]

Expected: [[[[-0.2482, -0.7701, -0.9347, -0.2937], [-0.2492, -0.4186, -0.7121, -0.5454]], [[-0.1145, -0.5321, -0.3372, -0.6219], [-0.5144, -0.6938, -0.6342, -0.8415]]]]