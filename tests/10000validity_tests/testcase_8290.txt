import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave75427 = tf.keras.layers.Input(shape=([1, 1]))
in1Ave75427 = tf.keras.layers.Input(shape=([1, 1]))
in0Max27484 = tf.keras.layers.Input(shape=([2, 1]))
in1Max27484 = tf.keras.layers.Input(shape=([2, 1]))
in0Con10503 = tf.keras.layers.Input(shape=([2, 19]))

Ave75427 = keras.layers.Average(name = 'Ave75427', )([in0Ave75427,in1Ave75427])
Res31639 = keras.layers.Reshape((1, 1, 1), name = 'Res31639', )(Ave75427)
Res49446 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res49446', )(Res31639)
Con52971 = keras.layers.Conv3DTranspose(2, (1, 1, 1),strides=(1, 10, 1), padding='valid', name = 'Con52971', )(Res49446)
Res13375 = keras.layers.Reshape((1, 10, 2), name = 'Res13375', )(Con52971)
Res98126 = keras.layers.Reshape((1, 20), name = 'Res98126', )(Res13375)
Zer99133 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer99133', )(Res98126)
Max27484 = keras.layers.Maximum(name = 'Max27484', )([in0Max27484,in1Max27484])
Con10503 = keras.layers.Concatenate(axis=2, name = 'Con10503', )([Max27484,in0Con10503])
Ave60848 = keras.layers.Average(name = 'Ave60848', )([Zer99133,Con10503])
model = tf.keras.models.Model(inputs=[in0Ave75427,in1Ave75427,in0Max27484,in1Max27484,in0Con10503], outputs=Ave60848)
w = model.get_layer('Con52971').get_weights() 
w[0] = np.array([[[[[0.4224], [0.3657]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con52971').set_weights(w) 
in0Ave75427 = tf.constant([[[0.6875]]])
in1Ave75427 = tf.constant([[[0.8391]]])
in0Max27484 = tf.constant([[[0.5119], [0.2628]]])
in1Max27484 = tf.constant([[[0.4832], [0.4556]]])
in0Con10503 = tf.constant([[[0.8895, 0.0454, 0.8469, 0.0849, 0.3171, 0.5173, 0.6855, 0.5502, 0.3447, 0.2681, 0.9547, 0.1095, 0.9445, 0.7346, 0.851, 0.8483, 0.0996, 0.7654, 0.8409], [0.4343, 0.7081, 0.7106, 0.8087, 0.1645, 0.8051, 0.9636, 0.6885, 0.0753, 0.3606, 0.4308, 0.6756, 0.8711, 0.3746, 0.8187, 0.7833, 0.1685, 0.1192, 0.9425]]])
print (np.array2string(model.predict([in0Ave75427,in1Ave75427,in0Max27484,in1Max27484,in0Con10503],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave60848.png')

LAve75427 = average_layer([[[[0.6875]]], [[[0.8391]]]], Ave75427), 
LRes31639 = reshape_layer(Ave75427, [1, 1, 1], Res31639), 
LRes49446 = reshape_layer(Res31639, [1, 1, 1, 1], Res49446), 
LCon52971 = conv3D_transpose_layer(Res49446, 1, 1, 1,[[[[[0.4224], [0.3657]]]]],[0, 0], 1, 10, 1, false, Con52971), 
LRes13375 = reshape_layer(Con52971, [1, 10, 2], Res13375), 
LRes98126 = reshape_layer(Res13375, [1, 20], Res98126), 
LZer99133 = zero_padding1D_layer(Res98126, 1, 0, Zer99133), 
LMax27484 = maximum_layer([[[[0.5119], [0.2628]]], [[[0.4832], [0.4556]]]], Max27484), 
LCon10503 = concatenate_layer([Max27484,[[[0.8895, 0.0454, 0.8469, 0.0849, 0.3171, 0.5173, 0.6855, 0.5502, 0.3447, 0.2681, 0.9547, 0.1095, 0.9445, 0.7346, 0.851, 0.8483, 0.0996, 0.7654, 0.8409], [0.4343, 0.7081, 0.7106, 0.8087, 0.1645, 0.8051, 0.9636, 0.6885, 0.0753, 0.3606, 0.4308, 0.6756, 0.8711, 0.3746, 0.8187, 0.7833, 0.1685, 0.1192, 0.9425]]]], 2, Con10503), 
LAve60848 = average_layer([Zer99133,Con10503], Ave60848), 
exec_layers([LAve75427,LRes31639,LRes49446,LCon52971,LRes13375,LRes98126,LZer99133,LMax27484,LCon10503,LAve60848],["Ave75427","Res31639","Res49446","Con52971","Res13375","Res98126","Zer99133","Max27484","Con10503","Ave60848"],Ave60848,"Ave60848")

Actual (Unparsed): [[[0.2559500, 0.4447500, 0.0227000, 0.4234500, 0.0424500, 0.1585500, 0.2586500, 0.3427500, 0.2751000, 0.1723500, 0.1340500, 0.4773500, 0.0547500, 0.4722500, 0.3673000, 0.4255000, 0.4241500, 0.0498000, 0.3827000, 0.4204500], [0.3890090, 0.3567194, 0.3540500, 0.3553000, 0.4043500, 0.0822500, 0.4025500, 0.4818000, 0.3442500, 0.0376500, 0.1803000, 0.2154000, 0.3378000, 0.4355500, 0.1873000, 0.4093500, 0.3916500, 0.0842500, 0.0596000, 0.4712500]]]

Expected (Unparsed): [[[0.25595,0.44475,0.0227,0.42345,0.04245,0.15855,0.25865,0.34275,0.2751,0.17235,0.13405,0.47735,0.05475,0.47225,0.3673,0.4255,0.42415,0.0498,0.3827,0.42045],[0.38900895999999996,0.356719405,0.35405,0.3553,0.40435,0.08225,0.40255,0.4818,0.34425,0.03765,0.1803,0.2154,0.3378,0.43555,0.1873,0.40935,0.39165,0.08425,0.0596,0.47125]]]

Actual:   [[[0.256, 0.4448, 0.0227, 0.4235, 0.0425, 0.1586, 0.2587, 0.3428, 0.2751, 0.1724, 0.1341, 0.4774, 0.0548, 0.4723, 0.3673, 0.4255, 0.4242, 0.0498, 0.3827, 0.4205], [0.3891, 0.3568, 0.3541, 0.3553, 0.4044, 0.0823, 0.4026, 0.4818, 0.3443, 0.0377, 0.1803, 0.2154, 0.3378, 0.4356, 0.1873, 0.4094, 0.3917, 0.0843, 0.0596, 0.4713]]]

Expected: [[[0.256, 0.4448, 0.0227, 0.4235, 0.0425, 0.1586, 0.2587, 0.3428, 0.2751, 0.1724, 0.1341, 0.4774, 0.0548, 0.4723, 0.3673, 0.4255, 0.4242, 0.0498, 0.3827, 0.4205], [0.3891, 0.3568, 0.3541, 0.3553, 0.4044, 0.0823, 0.4026, 0.4818, 0.3443, 0.0377, 0.1803, 0.2154, 0.3378, 0.4356, 0.1873, 0.4094, 0.3917, 0.0843, 0.0596, 0.4713]]]