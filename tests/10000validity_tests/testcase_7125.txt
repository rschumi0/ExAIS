import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Per11008 = tf.keras.layers.Input(shape=([1, 1]))
in0Con80705 = tf.keras.layers.Input(shape=([2, 3, 1]))
in0Sub52572 = tf.keras.layers.Input(shape=([2, 3]))
in1Sub52572 = tf.keras.layers.Input(shape=([2, 3]))
in0Con2840 = tf.keras.layers.Input(shape=([2, 3, 1]))
in0Ave70272 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Ave70272 = tf.keras.layers.Input(shape=([2, 2, 2]))

Per11008 = keras.layers.Permute((2,1), name = 'Per11008',)(in0Per11008)
Res94541 = keras.layers.Reshape((1, 1, 1), name = 'Res94541', )(Per11008)
Zer84729 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer84729', )(Res94541)
Con80705 = keras.layers.Concatenate(axis=3, name = 'Con80705', )([Zer84729,in0Con80705])
Sub52572 = keras.layers.Subtract(name = 'Sub52572', )([in0Sub52572,in1Sub52572])
Res21319 = keras.layers.Reshape((2, 3, 1), name = 'Res21319', )(Sub52572)
Con2840 = keras.layers.Concatenate(axis=3, name = 'Con2840', )([Res21319,in0Con2840])
Ave70272 = keras.layers.Average(name = 'Ave70272', )([in0Ave70272,in1Ave70272])
Zer6706 = keras.layers.ZeroPadding2D(padding=((0, 0), (1, 0)), name = 'Zer6706', )(Ave70272)
Mul20273 = keras.layers.Multiply(name = 'Mul20273', )([Con2840,Zer6706])
Ave46865 = keras.layers.Average(name = 'Ave46865', )([Con80705,Mul20273])
Res20134 = keras.layers.Reshape((2, 3, 2, 1), name = 'Res20134', )(Ave46865)
Con61737 = keras.layers.Conv3DTranspose(3, (1, 1, 2),strides=(1, 1, 1), padding='valid', name = 'Con61737', )(Res20134)
Res96787 = keras.layers.Reshape((2, 3, 9), name = 'Res96787', )(Con61737)
Res60848 = keras.layers.Reshape((2, 27), name = 'Res60848', )(Res96787)
Cro28739 = keras.layers.Cropping1D(cropping=((0, 0)), name = 'Cro28739', )(Res60848)
model = tf.keras.models.Model(inputs=[in0Per11008,in0Con80705,in0Sub52572,in1Sub52572,in0Con2840,in0Ave70272,in1Ave70272], outputs=Cro28739)
w = model.get_layer('Con61737').get_weights() 
w[0] = np.array([[[[[0.1826], [0.9117], [0.8561]], [[0.1204], [0.3193], [0.9641]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con61737').set_weights(w) 
in0Per11008 = tf.constant([[[1.102]]])
in0Con80705 = tf.constant([[[[0.1071], [0.8293], [0.2162]], [[0.3227], [0.6151], [0.1279]]]])
in0Sub52572 = tf.constant([[[0.2461, 0.4595, 0.5672], [0.9238, 0.9069, 0.3895]]])
in1Sub52572 = tf.constant([[[0.203, 0.9311, 0.2502], [0.6537, 0.6359, 0.6697]]])
in0Con2840 = tf.constant([[[[0.6186], [0.79], [0.21]], [[0.977], [0.2793], [0.9012]]]])
in0Ave70272 = tf.constant([[[[0.7131, 0.5714], [0.6075, 0.1645]], [[0.6903, 0.6721], [0.1869, 0.1309]]]])
in1Ave70272 = tf.constant([[[[0.0686, 0.1788], [0.0111, 0.9138]], [[0.7255, 0.4185], [0.0755, 0.9689]]]])
print (np.array2string(model.predict([in0Per11008,in0Con80705,in0Sub52572,in1Sub52572,in0Con2840,in0Ave70272,in1Ave70272],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Cro28739.png')

LPer11008 = permute_layer([[[1.102]]], 2,1, Per11008), 
LRes94541 = reshape_layer(Per11008, [1, 1, 1], Res94541), 
LZer84729 = zero_padding2D_layer(Res94541, 1, 0, 2, 0, Zer84729), 
LCon80705 = concatenate_layer([Zer84729,[[[[0.1071], [0.8293], [0.2162]], [[0.3227], [0.6151], [0.1279]]]]], 3, Con80705), 
LSub52572 = subtract_layer([[[0.2461, 0.4595, 0.5672], [0.9238, 0.9069, 0.3895]]], [[[0.203, 0.9311, 0.2502], [0.6537, 0.6359, 0.6697]]], Sub52572), 
LRes21319 = reshape_layer(Sub52572, [2, 3, 1], Res21319), 
LCon2840 = concatenate_layer([Res21319,[[[[0.6186], [0.79], [0.21]], [[0.977], [0.2793], [0.9012]]]]], 3, Con2840), 
LAve70272 = average_layer([[[[[0.7131, 0.5714], [0.6075, 0.1645]], [[0.6903, 0.6721], [0.1869, 0.1309]]]], [[[[0.0686, 0.1788], [0.0111, 0.9138]], [[0.7255, 0.4185], [0.0755, 0.9689]]]]], Ave70272), 
LZer6706 = zero_padding2D_layer(Ave70272, 0, 0, 1, 0, Zer6706), 
LMul20273 = multiply_layer([Con2840,Zer6706], Mul20273), 
LAve46865 = average_layer([Con80705,Mul20273], Ave46865), 
LRes20134 = reshape_layer(Ave46865, [2, 3, 2, 1], Res20134), 
LCon61737 = conv3D_transpose_layer(Res20134, 1, 1, 2,[[[[[0.1826], [0.9117], [0.8561]], [[0.1204], [0.3193], [0.9641]]]]],[0, 0, 0], 1, 1, 1, false, Con61737), 
LRes96787 = reshape_layer(Con61737, [2, 3, 9], Res96787), 
LRes60848 = reshape_layer(Res96787, [2, 27], Res60848), 
LCro28739 = cropping1D_layer(Res60848, 0, 0, Cro28739), 
exec_layers([LPer11008,LRes94541,LZer84729,LCon80705,LSub52572,LRes21319,LCon2840,LAve70272,LZer6706,LMul20273,LAve46865,LRes20134,LCon61737,LRes96787,LRes60848,LCro28739],["Per11008","Res94541","Zer84729","Con80705","Sub52572","Res21319","Con2840","Ave70272","Zer6706","Mul20273","Ave46865","Res20134","Con61737","Res96787","Res60848","Cro28739"],Cro28739,"Cro28739")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0097782, 0.0488215, 0.0458442, 0.0064474, 0.0170985, 0.0516276, -0.0168289, -0.0840245, -0.0789003, 0.0916736, 0.4836905, 0.3929717, 0.0677629, 0.1797067, 0.5426095, 0.0089518, 0.0446952, 0.0419695, 0.0359787, 0.1658202, 0.1882730, 0.0198312, 0.0525921, 0.1587976], [0.0000000, 0.0000000, 0.0000000, 0.0294625, 0.1471028, 0.1381317, 0.0194265, 0.0515191, 0.1555575, 0.0175151, 0.0874507, 0.0821175, 0.0816127, 0.3804477, 0.4209635, 0.0461976, 0.1225158, 0.3699263, 0.0972562, 0.4855886, 0.4559750, 0.1210501, 0.4542740, 0.7803741, 0.0375329, 0.0995370, 0.3005437]]]

Expected (Unparsed): [[[0.0,0.0,0.0,0.00977823,0.048821535,0.045844155,0.00644742,0.017098514999999998,0.051627555,-0.016828859718,-0.084024487431,-0.078900256323,0.091673571128,0.48369051575099997,0.392971694687,0.0677628658,0.17970666984999997,0.5426094594499999,0.008951791530000003,0.04469522638500001,0.04196948920500001,0.035978678570000006,0.16582016994,0.18827295968000002,0.0198311743,0.052592142475,0.158797634075],[0.0,0.0,0.0,0.02946251,0.14710279499999998,0.13813173499999998,0.01942654,0.051519054999999994,0.155557535,0.017515074170000002,0.087450674265,0.082117497245,0.081612651257,0.38044773358149997,0.4209634560795,0.046197617857999994,0.12251577559849998,0.36992627389449995,0.09725620748800001,0.485588632896,0.455975023168,0.12105011319600001,0.45427395318200003,0.780374144342,0.037532886776,0.099536966342,0.300543655654]]]

Actual:   [[[0, 0, 0, 0.0098, 0.0489, 0.0459, 0.0065, 0.0171, 0.0517, -0.0168, -0.084, -0.0789, 0.0917, 0.4837, 0.393, 0.0678, 0.1798, 0.5427, 0.009, 0.0447, 0.042, 0.036, 0.1659, 0.1883, 0.0199, 0.0526, 0.1588], [0, 0, 0, 0.0295, 0.1472, 0.1382, 0.0195, 0.0516, 0.1556, 0.0176, 0.0875, 0.0822, 0.0817, 0.3805, 0.421, 0.0462, 0.1226, 0.37, 0.0973, 0.4856, 0.456, 0.1211, 0.4543, 0.7804, 0.0376, 0.0996, 0.3006]]]

Expected: [[[0, 0, 0, 0.0098, 0.0489, 0.0459, 0.0065, 0.0171, 0.0517, -0.0168, -0.084, -0.0789, 0.0917, 0.4837, 0.393, 0.0678, 0.1798, 0.5427, 0.009, 0.0447, 0.042, 0.036, 0.1659, 0.1883, 0.0199, 0.0526, 0.1588], [0, 0, 0, 0.0295, 0.1472, 0.1382, 0.0195, 0.0516, 0.1556, 0.0176, 0.0875, 0.0822, 0.0817, 0.3805, 0.421, 0.0462, 0.1226, 0.37, 0.0973, 0.4856, 0.456, 0.1211, 0.4543, 0.7804, 0.0376, 0.0996, 0.3006]]]