import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mas68486 = tf.keras.layers.Input(shape=([4, 4]))
in0Max6296 = tf.keras.layers.Input(shape=([1, 1]))
in0Con91317 = tf.keras.layers.Input(shape=([6, 17]))
in0Con4 = tf.keras.layers.Input(shape=([6, 18, 1]))
in0Con8609 = tf.keras.layers.Input(shape=([2, 2, 2]))

Mas68486 = keras.layers.Masking(mask_value=1, name = 'Mas68486', )(in0Mas68486)
Res4693 = keras.layers.Reshape((4, 4, 1), name = 'Res4693', )(Mas68486)
Res86682 = keras.layers.Reshape((4, 4, 1, 1), name = 'Res86682', )(Res4693)
Zer61836 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer61836', )(Res86682)
Res90323 = keras.layers.Reshape((6, 6, 3), name = 'Res90323', )(Zer61836)
Res88499 = keras.layers.Reshape((6, 18), name = 'Res88499', )(Res90323)
Max6296 = keras.layers.MaxPool1D(pool_size=(1), name = 'Max6296', )(in0Max6296)
Zer24978 = keras.layers.ZeroPadding1D(padding=((5, 0)), name = 'Zer24978', )(Max6296)
Con91317 = keras.layers.Concatenate(axis=2, name = 'Con91317', )([Zer24978,in0Con91317])
Add83835 = keras.layers.Add(name = 'Add83835', )([Res88499,Con91317])
Res55885 = keras.layers.Reshape((6, 18, 1), name = 'Res55885', )(Add83835)
Con4 = keras.layers.Concatenate(axis=3, name = 'Con4', )([Res55885,in0Con4])
Con8609 = keras.layers.Conv2DTranspose(2, (2, 1),strides=(1, 1), padding='same', name = 'Con8609', )(in0Con8609)
Zer56705 = keras.layers.ZeroPadding2D(padding=((4, 0), (16, 0)), name = 'Zer56705', )(Con8609)
Mul91357 = keras.layers.Multiply(name = 'Mul91357', )([Con4,Zer56705])
Bat23358 = keras.layers.BatchNormalization(axis=3, epsilon=0.9593242473818977,  name = 'Bat23358', )(Mul91357)
model = tf.keras.models.Model(inputs=[in0Mas68486,in0Max6296,in0Con91317,in0Con4,in0Con8609], outputs=Bat23358)
w = model.get_layer('Con8609').get_weights() 
w[0] = np.array([[[[0.3693, 0.8251], [0.4694, 0.9795]]], [[[0.9864, 0.5404], [0.1485, 0.1555]]]])
w[1] = np.array([0, 0])
model.get_layer('Con8609').set_weights(w) 
w = model.get_layer('Bat23358').get_weights() 
w[0] = np.array([0.8462, 0.8108])
w[1] = np.array([0.7948, 0.5269])
w[2] = np.array([0.1901, 0.8155])
w[3] = np.array([0.5912, 0.2058])
model.get_layer('Bat23358').set_weights(w) 
in0Mas68486 = tf.constant([[[1.4991, 1.246, 1.8473, 1.7353], [1.8901, 1.5591, 1.3028, 1.3722], [1.7721, 1.5598, 1.6386, 1.2521], [1.1169, 1.8682, 1.834, 1.737]]])
in0Max6296 = tf.constant([[[1.6284]]])
in0Con91317 = tf.constant([[[0.4639, 0.8213, 0.9204, 0.2589, 0.2924, 0.5235, 0.8664, 0.3061, 0.2675, 0.9509, 0.4853, 0.8503, 0.868, 0.5386, 0.968, 0.4184, 0.9099], [0.7914, 0.2222, 0.6385, 0.5645, 0.1866, 0.0897, 0.4031, 0.9601, 0.1151, 0.7784, 0.8143, 0.9619, 0.4644, 0.7912, 0.8007, 0.4509, 0.9345], [0.6842, 0.231, 0.0508, 0.8076, 0.4477, 0.938, 0.7888, 0.6954, 0.1648, 0.3176, 0.6188, 0.7292, 0.8757, 0.0661, 0.0831, 0.7721, 0.2496], [0.1821, 0.6448, 0.4891, 0.7521, 0.5744, 0.3831, 0.5349, 0.4823, 0.4871, 0.813, 0.6896, 0.7524, 0.4861, 0.5606, 0.5091, 0.7814, 0.9297], [0.511, 0.9401, 0.5842, 0.693, 0.8261, 0.3954, 0.2525, 0.4077, 0.9249, 0.9875, 0.3406, 0.6361, 0.1186, 0.9703, 0.0023, 0.2045, 0.0943], [0.9555, 0.8504, 0.3898, 0.855, 0.1376, 0.2565, 0.7736, 0.0411, 0.5868, 0.9503, 0.3559, 0.7787, 0.6492, 0.3302, 0.9569, 0.3355, 0.635]]])
in0Con4 = tf.constant([[[[0.1175], [0.5619], [0.7819], [0.3176], [0.5165], [0.506], [0.7023], [0.8133], [0.8861], [0.9827], [0.0209], [0.9703], [0.7126], [0.8326], [0.4712], [0.55], [0.6477], [0.4412]], [[0.9967], [0.6501], [0.8035], [0.5708], [0.5241], [0.9786], [0.5994], [0.0186], [0.8446], [0.3081], [0.7813], [0.9859], [0.8367], [0.1019], [0.222], [0.8263], [0.8999], [0.3525]], [[0.6373], [0.4056], [0.1339], [0.0007], [0.4092], [0.6491], [0.4917], [0.9149], [0.2926], [0.9788], [0.8654], [0.3015], [0.9026], [0.2501], [0.8203], [0.5904], [0.5247], [0.487]], [[0.484], [0.2927], [0.9767], [0.1826], [0.9185], [0.064], [0.9571], [0.1836], [0.1546], [0.2244], [0.5627], [0.2111], [0.9533], [0.2803], [0.429], [0.8809], [0.2736], [0.5772]], [[0.2549], [0.6838], [0.3705], [0.0694], [0.3101], [0.7598], [0.4279], [0.3348], [0.8888], [0.4594], [0.6366], [0.388], [0.578], [0.6234], [0.6705], [0.5455], [0.6338], [0.231]], [[0.582], [0.5856], [0.7245], [0.568], [0.2445], [0.7088], [0.7922], [0.3495], [0.599], [0.3564], [0.8066], [0.2936], [0.1313], [0.7701], [0.7442], [0.4895], [0.1987], [0.2874]]]])
in0Con8609 = tf.constant([[[[0.4871, 0.7225], [0.1627, 0.3782]], [[0.6593, 0.4195], [0.0256, 0.815]]]])
print (np.array2string(model.predict([in0Mas68486,in0Max6296,in0Con91317,in0Con4,in0Con8609],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Bat23358.png')

LMas68486 = masking_layer([[[1.4991, 1.246, 1.8473, 1.7353], [1.8901, 1.5591, 1.3028, 1.3722], [1.7721, 1.5598, 1.6386, 1.2521], [1.1169, 1.8682, 1.834, 1.737]]], 1, Mas68486), 
LRes4693 = reshape_layer(Mas68486, [4, 4, 1], Res4693), 
LRes86682 = reshape_layer(Res4693, [4, 4, 1, 1], Res86682), 
LZer61836 = zero_padding3D_layer(Res86682, 1, 1, 1, 1, 1, 1, Zer61836), 
LRes90323 = reshape_layer(Zer61836, [6, 6, 3], Res90323), 
LRes88499 = reshape_layer(Res90323, [6, 18], Res88499), 
LMax6296 = max_pool1D_layer([[[1.6284]]], 1, Max6296), 
LZer24978 = zero_padding1D_layer(Max6296, 5, 0, Zer24978), 
LCon91317 = concatenate_layer([Zer24978,[[[0.4639, 0.8213, 0.9204, 0.2589, 0.2924, 0.5235, 0.8664, 0.3061, 0.2675, 0.9509, 0.4853, 0.8503, 0.868, 0.5386, 0.968, 0.4184, 0.9099], [0.7914, 0.2222, 0.6385, 0.5645, 0.1866, 0.0897, 0.4031, 0.9601, 0.1151, 0.7784, 0.8143, 0.9619, 0.4644, 0.7912, 0.8007, 0.4509, 0.9345], [0.6842, 0.231, 0.0508, 0.8076, 0.4477, 0.938, 0.7888, 0.6954, 0.1648, 0.3176, 0.6188, 0.7292, 0.8757, 0.0661, 0.0831, 0.7721, 0.2496], [0.1821, 0.6448, 0.4891, 0.7521, 0.5744, 0.3831, 0.5349, 0.4823, 0.4871, 0.813, 0.6896, 0.7524, 0.4861, 0.5606, 0.5091, 0.7814, 0.9297], [0.511, 0.9401, 0.5842, 0.693, 0.8261, 0.3954, 0.2525, 0.4077, 0.9249, 0.9875, 0.3406, 0.6361, 0.1186, 0.9703, 0.0023, 0.2045, 0.0943], [0.9555, 0.8504, 0.3898, 0.855, 0.1376, 0.2565, 0.7736, 0.0411, 0.5868, 0.9503, 0.3559, 0.7787, 0.6492, 0.3302, 0.9569, 0.3355, 0.635]]]], 2, Con91317), 
LAdd83835 = add_layer([Res88499,Con91317], Add83835), 
LRes55885 = reshape_layer(Add83835, [6, 18, 1], Res55885), 
LCon4 = concatenate_layer([Res55885,[[[[0.1175], [0.5619], [0.7819], [0.3176], [0.5165], [0.506], [0.7023], [0.8133], [0.8861], [0.9827], [0.0209], [0.9703], [0.7126], [0.8326], [0.4712], [0.55], [0.6477], [0.4412]], [[0.9967], [0.6501], [0.8035], [0.5708], [0.5241], [0.9786], [0.5994], [0.0186], [0.8446], [0.3081], [0.7813], [0.9859], [0.8367], [0.1019], [0.222], [0.8263], [0.8999], [0.3525]], [[0.6373], [0.4056], [0.1339], [0.0007], [0.4092], [0.6491], [0.4917], [0.9149], [0.2926], [0.9788], [0.8654], [0.3015], [0.9026], [0.2501], [0.8203], [0.5904], [0.5247], [0.487]], [[0.484], [0.2927], [0.9767], [0.1826], [0.9185], [0.064], [0.9571], [0.1836], [0.1546], [0.2244], [0.5627], [0.2111], [0.9533], [0.2803], [0.429], [0.8809], [0.2736], [0.5772]], [[0.2549], [0.6838], [0.3705], [0.0694], [0.3101], [0.7598], [0.4279], [0.3348], [0.8888], [0.4594], [0.6366], [0.388], [0.578], [0.6234], [0.6705], [0.5455], [0.6338], [0.231]], [[0.582], [0.5856], [0.7245], [0.568], [0.2445], [0.7088], [0.7922], [0.3495], [0.599], [0.3564], [0.8066], [0.2936], [0.1313], [0.7701], [0.7442], [0.4895], [0.1987], [0.2874]]]]], 3, Con4), 
LCon8609 = conv2D_transpose_layer([[[[0.4871, 0.7225], [0.1627, 0.3782]], [[0.6593, 0.4195], [0.0256, 0.815]]]], 2, 1,[[[[0.3693, 0.8251], [0.4694, 0.9795]]], [[[0.9864, 0.5404], [0.1485, 0.1555]]]],[0, 0], 1, 1, true, Con8609), 
LZer56705 = zero_padding2D_layer(Con8609, 4, 0, 16, 0, Zer56705), 
LMul91357 = multiply_layer([Con4,Zer56705], Mul91357), 
LBat23358 = batch_normalization_layer(Mul91357, 3, 0.9593242473818977, [0.8462, 0.8108], [0.7948, 0.5269], [0.1901, 0.8155], [0.5912, 0.2058], Bat23358), 
exec_layers([LMas68486,LRes4693,LRes86682,LZer61836,LRes90323,LRes88499,LMax6296,LZer24978,LCon91317,LAdd83835,LRes55885,LCon4,LCon8609,LZer56705,LMul91357,LBat23358],["Mas68486","Res4693","Res86682","Zer61836","Res90323","Res88499","Max6296","Zer24978","Con91317","Add83835","Res55885","Con4","Con8609","Zer56705","Mul91357","Bat23358"],Bat23358,"Bat23358")

Actual (Unparsed): [[[[0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642]], [[0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642]], [[0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642]], [[0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642]], [[0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.7734590, 0.3601054], [0.6894617, -0.0081340]], [[0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.6656139, -0.0856642], [0.9986066, 0.0494193], [1.1173259, 0.1071780]]]]

Expected (Unparsed): [[[[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692]],[[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692]],[[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692]],[[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692]],[[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.7734589758125576,0.3601054006922107],[0.6894617370244261,-0.008134028877761823]],[[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.6656138794019317,-0.0856641624388692],[0.9986066293173459,0.049419326148472],[1.1173259490129865,0.10717804159227956]]]]

Actual:   [[[[0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856]], [[0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856]], [[0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856]], [[0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856]], [[0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.7735, 0.3602], [0.6895, -0.0081]], [[0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.9987, 0.0495], [1.1174, 0.1072]]]]

Expected: [[[[0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856]], [[0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856]], [[0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856]], [[0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856]], [[0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.7735, 0.3602], [0.6895, -0.0081]], [[0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.6657, -0.0856], [0.9987, 0.0495], [1.1174, 0.1072]]]]