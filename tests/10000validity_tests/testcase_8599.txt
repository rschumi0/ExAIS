import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max55115 = tf.keras.layers.Input(shape=([2, 1]))
in1Max55115 = tf.keras.layers.Input(shape=([2, 1]))
in0Con94597 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Mul76217 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Mul76217 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))

Max55115 = keras.layers.Maximum(name = 'Max55115', )([in0Max55115,in1Max55115])
Res63943 = keras.layers.Reshape((2, 1, 1), name = 'Res63943', )(Max55115)
Res39333 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res39333', )(Res63943)
Zer49362 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (1, 0)), name = 'Zer49362', )(Res39333)
Con94597 = keras.layers.Concatenate(axis=4, name = 'Con94597', )([Zer49362,in0Con94597])
Mul76217 = keras.layers.Multiply(name = 'Mul76217', )([in0Mul76217,in1Mul76217])
Sub91982 = keras.layers.Subtract(name = 'Sub91982', )([Con94597,Mul76217])
Res40354 = keras.layers.Reshape((2, 2, 4), name = 'Res40354', )(Sub91982)
Res39392 = keras.layers.Reshape((2, 8), name = 'Res39392', )(Res40354)
Res7569 = keras.layers.Reshape((2, 8, 1), name = 'Res7569', )(Res39392)
Res62249 = keras.layers.Reshape((2, 8, 1, 1), name = 'Res62249', )(Res7569)
Con48645 = keras.layers.Conv3DTranspose(3, (1, 8, 1),strides=(1, 1, 1), padding='same', name = 'Con48645', )(Res62249)
model = tf.keras.models.Model(inputs=[in0Max55115,in1Max55115,in0Con94597,in0Mul76217,in1Mul76217], outputs=Con48645)
w = model.get_layer('Con48645').get_weights() 
w[0] = np.array([[[[[0.3922], [0.4148], [0.3728]]], [[[0.8901], [0.2757], [0.9361]]], [[[0.3895], [0.4759], [0.3351]]], [[[0.4022], [0.0166], [0.8476]]], [[[0.1243], [0.7366], [0.3005]]], [[[0.2765], [0.7136], [0.9442]]], [[[0.043], [0.0236], [0.5456]]], [[[0.4725], [0.0057], [0.3779]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con48645').set_weights(w) 
in0Max55115 = tf.constant([[[0.1231], [0.9479]]])
in1Max55115 = tf.constant([[[0.7431], [0.2701]]])
in0Con94597 = tf.constant([[[[[0.146], [0.1187]], [[0.1537], [0.9655]]], [[[0.9927], [0.6252]], [[0.8835], [0.7293]]]]])
in0Mul76217 = tf.constant([[[[[0.5342, 0.3691], [0.3547, 0.4415]], [[0.7496, 0.0039], [0.7149, 0.1968]]], [[[0.7716, 0.3377], [0.1979, 0.3151]], [[0.8779, 0.4053], [0.321, 0.8335]]]]])
in1Mul76217 = tf.constant([[[[[0.0099, 0.3035], [0.2395, 0.7379]], [[0.0517, 0.2918], [0.1931, 0.063]]], [[[0.2824, 0.7931], [0.5433, 0.7458]], [[0.6343, 0.1217], [0.787, 0.1145]]]]])
print (np.array2string(model.predict([in0Max55115,in1Max55115,in0Con94597,in0Mul76217,in1Mul76217],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con48645.png')

LMax55115 = maximum_layer([[[[0.1231], [0.9479]]], [[[0.7431], [0.2701]]]], Max55115), 
LRes63943 = reshape_layer(Max55115, [2, 1, 1], Res63943), 
LRes39333 = reshape_layer(Res63943, [2, 1, 1, 1], Res39333), 
LZer49362 = zero_padding3D_layer(Res39333, 0, 0, 1, 0, 1, 0, Zer49362), 
LCon94597 = concatenate_layer([Zer49362,[[[[[0.146], [0.1187]], [[0.1537], [0.9655]]], [[[0.9927], [0.6252]], [[0.8835], [0.7293]]]]]], 4, Con94597), 
LMul76217 = multiply_layer([[[[[[0.5342, 0.3691], [0.3547, 0.4415]], [[0.7496, 0.0039], [0.7149, 0.1968]]], [[[0.7716, 0.3377], [0.1979, 0.3151]], [[0.8779, 0.4053], [0.321, 0.8335]]]]], [[[[[0.0099, 0.3035], [0.2395, 0.7379]], [[0.0517, 0.2918], [0.1931, 0.063]]], [[[0.2824, 0.7931], [0.5433, 0.7458]], [[0.6343, 0.1217], [0.787, 0.1145]]]]]], Mul76217), 
LSub91982 = subtract_layer(Con94597,Mul76217, Sub91982), 
LRes40354 = reshape_layer(Sub91982, [2, 2, 4], Res40354), 
LRes39392 = reshape_layer(Res40354, [2, 8], Res39392), 
LRes7569 = reshape_layer(Res39392, [2, 8, 1], Res7569), 
LRes62249 = reshape_layer(Res7569, [2, 8, 1, 1], Res62249), 
LCon48645 = conv3D_transpose_layer(Res62249, 1, 8, 1,[[[[[0.3922], [0.4148], [0.3728]]], [[[0.8901], [0.2757], [0.9361]]], [[[0.3895], [0.4759], [0.3351]]], [[[0.4022], [0.0166], [0.8476]]], [[[0.1243], [0.7366], [0.3005]]], [[[0.2765], [0.7136], [0.9442]]], [[[0.043], [0.0236], [0.5456]]], [[[0.4725], [0.0057], [0.3779]]]]],[0, 0, 0], 1, 1, 1, true, Con48645), 
exec_layers([LMax55115,LRes63943,LRes39333,LZer49362,LCon94597,LMul76217,LSub91982,LRes40354,LRes39392,LRes7569,LRes62249,LCon48645],["Max55115","Res63943","Res39333","Zer49362","Con94597","Mul76217","Sub91982","Res40354","Res39392","Res7569","Res62249","Con48645"],Con48645,"Con48645")

Actual (Unparsed): [[[[[-0.1457251, -0.0932365, -0.1498193]], [[-0.2196035, -0.1169276, -0.2095542]], [[-0.0867252, -0.0261084, -0.1155835]], [[0.2733218, 0.2327038, 0.1835360]], [[0.9059328, 0.4217342, 0.8140827]], [[1.0957104, 0.3751153, 0.9835811]], [[0.5737894, 0.5429756, 0.6963929]], [[0.4012158, 0.5682766, 1.0343153]]], [[[0.2520307, 0.4735598, 0.1030294]], [[0.3514974, -0.3230450, 0.6705616]], [[-0.0299004, 0.7548483, -0.1585840]], [[1.1329214, 0.6927790, 1.7174267]], [[0.9153937, 1.0689132, 1.0235738]], [[1.5470675, 0.3893468, 1.9497503]], [[0.4422231, 0.5388771, 0.6988720]], [[0.7324361, 1.1070099, 1.3774584]]]]]

Expected (Unparsed): [[[[[-0.145725044786,-0.093236449228,-0.149819312288]],[[-0.21960352582800002,-0.116927578754,-0.209554167546]],[[-0.086725141506,-0.026108391222999988,-0.115583489944]],[[0.27332178431,0.23270383583799997,0.183536010411]],[[0.905932810827,0.421734256251,0.8140826938900001]],[[1.095710459935,0.37511535850999994,0.983581106754]],[[0.573789453341,0.542975625837,0.696392900367]],[[0.40121583288799995,0.568276641137,1.034315341074]]],[[[0.25203069610400003,0.47355985454000005,0.10302944572800002]],[[0.35149740941700003,-0.323044996161,0.670561706457]],[[-0.02990034138399994,0.754848321173,-0.15858392089799994]],[[1.132921468832,0.692779067974,1.717426811691]],[[0.915393734362,1.068913245839,1.023573869785]],[[1.5470675630769999,0.389346840358,1.9497503769630002]],[[0.442223079012,0.53887708423,0.698872060795]],[[0.732436138725,1.107009935716,1.377458448444]]]]]

Actual:   [[[[[-0.1457, -0.0932, -0.1498]], [[-0.2196, -0.1169, -0.2095]], [[-0.0867, -0.0261, -0.1155]], [[0.2734, 0.2328, 0.1836]], [[0.906, 0.4218, 0.8141]], [[1.0958, 0.3752, 0.9836]], [[0.5738, 0.543, 0.6964]], [[0.4013, 0.5683, 1.0344]]], [[[0.2521, 0.4736, 0.1031]], [[0.3515, -0.323, 0.6706]], [[-0.0299, 0.7549, -0.1585]], [[1.133, 0.6928, 1.7175]], [[0.9154, 1.069, 1.0236]], [[1.5471, 0.3894, 1.9498]], [[0.4423, 0.5389, 0.6989]], [[0.7325, 1.1071, 1.3775]]]]]

Expected: [[[[[-0.1457, -0.0932, -0.1498]], [[-0.2196, -0.1169, -0.2095]], [[-0.0867, -0.0261, -0.1155]], [[0.2734, 0.2328, 0.1836]], [[0.906, 0.4218, 0.8141]], [[1.0958, 0.3752, 0.9836]], [[0.5738, 0.543, 0.6964]], [[0.4013, 0.5683, 1.0344]]], [[[0.2521, 0.4736, 0.1031]], [[0.3515, -0.323, 0.6706]], [[-0.0299, 0.7549, -0.1585]], [[1.133, 0.6928, 1.7175]], [[0.9154, 1.069, 1.0236]], [[1.5471, 0.3894, 1.9498]], [[0.4423, 0.5389, 0.6989]], [[0.7325, 1.1071, 1.3775]]]]]