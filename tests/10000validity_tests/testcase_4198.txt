import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub38188 = tf.keras.layers.Input(shape=([2, 3, 2]))
in1Sub38188 = tf.keras.layers.Input(shape=([2, 3, 2]))
in0Con79738 = tf.keras.layers.Input(shape=([2, 3, 2, 3]))
in0Con67394 = tf.keras.layers.Input(shape=([2, 2, 1, 1]))

Sub38188 = keras.layers.Subtract(name = 'Sub38188', )([in0Sub38188,in1Sub38188])
Res60846 = keras.layers.Reshape((2, 3, 2, 1), name = 'Res60846', )(Sub38188)
Con79738 = keras.layers.Concatenate(axis=4, name = 'Con79738', )([Res60846,in0Con79738])
Con67394 = keras.layers.Conv3D(4, (1, 1, 1),strides=(1, 1, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con67394', )(in0Con67394)
Zer88308 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (1, 0)), name = 'Zer88308', )(Con67394)
Max62105 = keras.layers.Maximum(name = 'Max62105', )([Con79738,Zer88308])
Res93372 = keras.layers.Reshape((2, 3, 8), name = 'Res93372', )(Max62105)
Res41279 = keras.layers.Reshape((2, 24), name = 'Res41279', )(Res93372)
Up_96555 = keras.layers.UpSampling1D(size=(2), name = 'Up_96555', )(Res41279)
model = tf.keras.models.Model(inputs=[in0Sub38188,in1Sub38188,in0Con79738,in0Con67394], outputs=Up_96555)
w = model.get_layer('Con67394').get_weights() 
w[0] = np.array([[[[[0.0422, 0.8256, 0.31, 0.017]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con67394').set_weights(w) 
in0Sub38188 = tf.constant([[[[0.4722, 0.0564], [0.8033, 0.2745], [0.3397, 0.6491]], [[0.4902, 0.1184], [0.2545, 0.4958], [0.8221, 0.6787]]]])
in1Sub38188 = tf.constant([[[[0.1136, 0.2805], [0.6871, 0.2747], [0.3091, 0.6158]], [[0.9475, 0.0835], [0.0474, 0.9919], [0.882, 0.3382]]]])
in0Con79738 = tf.constant([[[[[0.2718, 0.5247, 0.6766], [0.833, 0.8786, 0.1569]], [[0.3721, 0.3498, 0.0751], [0.4087, 0.8155, 0.2586]], [[0.5002, 0.4636, 0.9343], [0.8102, 0.9483, 0.9524]]], [[[0.441, 0.4166, 0.2085], [0.1149, 0.2783, 0.8859]], [[0.739, 0.3863, 0.3137], [0.2024, 0.7669, 0.2788]], [[0.5287, 0.5184, 0.0328], [0.6573, 0.3378, 0.6459]]]]])
in0Con67394 = tf.constant([[[[[0.9978]], [[0.3066]]], [[[0.3816]], [[0.3659]]]]])
print (np.array2string(model.predict([in0Sub38188,in1Sub38188,in0Con79738,in0Con67394],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Up_96555.png')

LSub38188 = subtract_layer([[[[0.4722, 0.0564], [0.8033, 0.2745], [0.3397, 0.6491]], [[0.4902, 0.1184], [0.2545, 0.4958], [0.8221, 0.6787]]]], [[[[0.1136, 0.2805], [0.6871, 0.2747], [0.3091, 0.6158]], [[0.9475, 0.0835], [0.0474, 0.9919], [0.882, 0.3382]]]], Sub38188), 
LRes60846 = reshape_layer(Sub38188, [2, 3, 2, 1], Res60846), 
LCon79738 = concatenate_layer([Res60846,[[[[[0.2718, 0.5247, 0.6766], [0.833, 0.8786, 0.1569]], [[0.3721, 0.3498, 0.0751], [0.4087, 0.8155, 0.2586]], [[0.5002, 0.4636, 0.9343], [0.8102, 0.9483, 0.9524]]], [[[0.441, 0.4166, 0.2085], [0.1149, 0.2783, 0.8859]], [[0.739, 0.3863, 0.3137], [0.2024, 0.7669, 0.2788]], [[0.5287, 0.5184, 0.0328], [0.6573, 0.3378, 0.6459]]]]]], 4, Con79738), 
LCon67394 = conv3D_layer([[[[[0.9978]], [[0.3066]]], [[[0.3816]], [[0.3659]]]]], 1, 1, 1,[[[[[0.0422, 0.8256, 0.31, 0.017]]]]],[0, 0, 0, 0], 1, 1, 1, true, 1, 1, 1, Con67394), 
LZer88308 = zero_padding3D_layer(Con67394, 0, 0, 1, 0, 1, 0, Zer88308), 
LMax62105 = maximum_layer([Con79738,Zer88308], Max62105), 
LRes93372 = reshape_layer(Max62105, [2, 3, 8], Res93372), 
LRes41279 = reshape_layer(Res93372, [2, 24], Res41279), 
LUp_96555 = up_sampling1D_layer(Res41279, 2, Up_96555), 
exec_layers([LSub38188,LRes60846,LCon79738,LCon67394,LZer88308,LMax62105,LRes93372,LRes41279,LUp_96555],["Sub38188","Res60846","Con79738","Con67394","Zer88308","Max62105","Res93372","Res41279","Up_96555"],Up_96555,"Up_96555")

Actual (Unparsed): [[[0.3586000, 0.2718000, 0.5247000, 0.6766000, 0.0000000, 0.8330000, 0.8786000, 0.1569000, 0.1162000, 0.3721000, 0.3498000, 0.0751000, 0.0421072, 0.8237837, 0.8155000, 0.2586000, 0.0306000, 0.5002000, 0.4636000, 0.9343000, 0.0333000, 0.8102000, 0.9483000, 0.9524000], [0.3586000, 0.2718000, 0.5247000, 0.6766000, 0.0000000, 0.8330000, 0.8786000, 0.1569000, 0.1162000, 0.3721000, 0.3498000, 0.0751000, 0.0421072, 0.8237837, 0.8155000, 0.2586000, 0.0306000, 0.5002000, 0.4636000, 0.9343000, 0.0333000, 0.8102000, 0.9483000, 0.9524000], [0.0000000, 0.4410000, 0.4166000, 0.2085000, 0.0349000, 0.1149000, 0.2783000, 0.8859000, 0.2071000, 0.7390000, 0.3863000, 0.3137000, 0.0161035, 0.3150490, 0.7669000, 0.2788000, 0.0000000, 0.5287000, 0.5184000, 0.0328000, 0.3405000, 0.6573000, 0.3378000, 0.6459000], [0.0000000, 0.4410000, 0.4166000, 0.2085000, 0.0349000, 0.1149000, 0.2783000, 0.8859000, 0.2071000, 0.7390000, 0.3863000, 0.3137000, 0.0161035, 0.3150490, 0.7669000, 0.2788000, 0.0000000, 0.5287000, 0.5184000, 0.0328000, 0.3405000, 0.6573000, 0.3378000, 0.6459000]]]

Expected (Unparsed): [[[0.35860000000000003,0.2718,0.5247,0.6766,0,0.833,0.8786,0.1569,0.11619999999999997,0.3721,0.3498,0.0751,0.042107160000000005,0.82378368,0.8155,0.2586,0.030600000000000016,0.5002,0.4636,0.9343,0.033299999999999996,0.8102,0.9483,0.9524],[0.35860000000000003,0.2718,0.5247,0.6766,0,0.833,0.8786,0.1569,0.11619999999999997,0.3721,0.3498,0.0751,0.042107160000000005,0.82378368,0.8155,0.2586,0.030600000000000016,0.5002,0.4636,0.9343,0.033299999999999996,0.8102,0.9483,0.9524],[0,0.441,0.4166,0.2085,0.0349,0.1149,0.2783,0.8859,0.2071,0.739,0.3863,0.3137,0.01610352,0.31504896,0.7669,0.2788,0,0.5287,0.5184,0.0328,0.34049999999999997,0.6573,0.3378,0.6459],[0,0.441,0.4166,0.2085,0.0349,0.1149,0.2783,0.8859,0.2071,0.739,0.3863,0.3137,0.01610352,0.31504896,0.7669,0.2788,0,0.5287,0.5184,0.0328,0.34049999999999997,0.6573,0.3378,0.6459]]]

Actual:   [[[0.3586, 0.2718, 0.5247, 0.6766, 0, 0.833, 0.8786, 0.1569, 0.1162, 0.3721, 0.3498, 0.0751, 0.0422, 0.8238, 0.8155, 0.2586, 0.0306, 0.5002, 0.4636, 0.9343, 0.0333, 0.8102, 0.9483, 0.9524], [0.3586, 0.2718, 0.5247, 0.6766, 0, 0.833, 0.8786, 0.1569, 0.1162, 0.3721, 0.3498, 0.0751, 0.0422, 0.8238, 0.8155, 0.2586, 0.0306, 0.5002, 0.4636, 0.9343, 0.0333, 0.8102, 0.9483, 0.9524], [0, 0.441, 0.4166, 0.2085, 0.0349, 0.1149, 0.2783, 0.8859, 0.2071, 0.739, 0.3863, 0.3137, 0.0162, 0.3151, 0.7669, 0.2788, 0, 0.5287, 0.5184, 0.0328, 0.3405, 0.6573, 0.3378, 0.6459], [0, 0.441, 0.4166, 0.2085, 0.0349, 0.1149, 0.2783, 0.8859, 0.2071, 0.739, 0.3863, 0.3137, 0.0162, 0.3151, 0.7669, 0.2788, 0, 0.5287, 0.5184, 0.0328, 0.3405, 0.6573, 0.3378, 0.6459]]]

Expected: [[[0.3587, 0.2718, 0.5247, 0.6766, 0, 0.833, 0.8786, 0.1569, 0.1162, 0.3721, 0.3498, 0.0751, 0.0422, 0.8238, 0.8155, 0.2586, 0.0307, 0.5002, 0.4636, 0.9343, 0.0333, 0.8102, 0.9483, 0.9524], [0.3587, 0.2718, 0.5247, 0.6766, 0, 0.833, 0.8786, 0.1569, 0.1162, 0.3721, 0.3498, 0.0751, 0.0422, 0.8238, 0.8155, 0.2586, 0.0307, 0.5002, 0.4636, 0.9343, 0.0333, 0.8102, 0.9483, 0.9524], [0, 0.441, 0.4166, 0.2085, 0.0349, 0.1149, 0.2783, 0.8859, 0.2071, 0.739, 0.3863, 0.3137, 0.0162, 0.3151, 0.7669, 0.2788, 0, 0.5287, 0.5184, 0.0328, 0.3405, 0.6573, 0.3378, 0.6459], [0, 0.441, 0.4166, 0.2085, 0.0349, 0.1149, 0.2783, 0.8859, 0.2071, 0.739, 0.3863, 0.3137, 0.0162, 0.3151, 0.7669, 0.2788, 0, 0.5287, 0.5184, 0.0328, 0.3405, 0.6573, 0.3378, 0.6459]]]