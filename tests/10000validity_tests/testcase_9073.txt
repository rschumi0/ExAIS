import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave95459 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in1Ave95459 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in0Con92076 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))
in0Sep66489 = tf.keras.layers.Input(shape=([1, 1]))
in0Add23219 = tf.keras.layers.Input(shape=([1, 2]))
in1Add23219 = tf.keras.layers.Input(shape=([1, 2]))
in0Con476 = tf.keras.layers.Input(shape=([1, 1]))
in0Con77079 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))
in0Sub57126 = tf.keras.layers.Input(shape=([3, 3, 2, 3]))
in1Sub57126 = tf.keras.layers.Input(shape=([3, 3, 2, 3]))

Ave95459 = keras.layers.Average(name = 'Ave95459', )([in0Ave95459,in1Ave95459])
Zer103 = keras.layers.ZeroPadding3D(padding=((1, 0), (2, 0), (0, 0)), name = 'Zer103', )(Ave95459)
Con92076 = keras.layers.Concatenate(axis=4, name = 'Con92076', )([Zer103,in0Con92076])
Sep66489 = keras.layers.SeparableConv1D(3, (1),strides=(1), padding='valid', name = 'Sep66489', )(in0Sep66489)
Add23219 = keras.layers.Add(name = 'Add23219', )([in0Add23219,in1Add23219])
PRe48373 = keras.layers.PReLU(name = 'PRe48373', )(Add23219)
Con476 = keras.layers.Concatenate(axis=2, name = 'Con476', )([PRe48373,in0Con476])
Min89501 = keras.layers.Minimum(name = 'Min89501', )([Sep66489,Con476])
Res55109 = keras.layers.Reshape((1, 3, 1), name = 'Res55109', )(Min89501)
Res23714 = keras.layers.Reshape((1, 3, 1, 1), name = 'Res23714', )(Res55109)
Zer10072 = keras.layers.ZeroPadding3D(padding=((2, 0), (0, 0), (1, 0)), name = 'Zer10072', )(Res23714)
Con77079 = keras.layers.Concatenate(axis=4, name = 'Con77079', )([Zer10072,in0Con77079])
Sub57126 = keras.layers.Subtract(name = 'Sub57126', )([in0Sub57126,in1Sub57126])
Min3524 = keras.layers.Minimum(name = 'Min3524', )([Con77079,Sub57126])
Mul45299 = keras.layers.Multiply(name = 'Mul45299', )([Con92076,Min3524])
model = tf.keras.models.Model(inputs=[in0Ave95459,in1Ave95459,in0Con92076,in0Sep66489,in0Add23219,in1Add23219,in0Con476,in0Con77079,in0Sub57126,in1Sub57126], outputs=Mul45299)
w = model.get_layer('Sep66489').get_weights() 
w[0] = np.array([[[0.0373]]])
w[1] = np.array([[[0.7545, 0.3182, 0.4588]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep66489').set_weights(w) 
w = model.get_layer('PRe48373').get_weights() 
w[0] = np.array([[0.0614, 0.1729]])
model.get_layer('PRe48373').set_weights(w) 
in0Ave95459 = tf.constant([[[[[0.3648], [0.6466]]], [[[0.1885], [0.5702]]]]])
in1Ave95459 = tf.constant([[[[[0.937], [0.4725]]], [[[0.8512], [0.9563]]]]])
in0Con92076 = tf.constant([[[[[0.2072, 0.5389], [0.903, 0.2324]], [[0.0765, 0.3344], [0.7017, 0.8495]], [[0.1142, 0.2347], [0.0743, 0.372]]], [[[0.2268, 0.5364], [0.6982, 0.2465]], [[0.0324, 0.0185], [0.9211, 0.6325]], [[0.0832, 0.1135], [0.0121, 0.4208]]], [[[0.267, 0.9243], [0.1532, 0.3451]], [[0.409, 0.568], [0.3033, 0.8644]], [[0.0145, 0.7281], [0.5084, 0.0322]]]]])
in0Sep66489 = tf.constant([[[0.5204]]])
in0Add23219 = tf.constant([[[0.5024, 0.048]]])
in1Add23219 = tf.constant([[[0.0837, 0.0956]]])
in0Con476 = tf.constant([[[0.8045]]])
in0Con77079 = tf.constant([[[[[0.0723, 0.4461], [0.491, 0.5144]], [[0.9665, 0.2134], [0.8246, 0.9993]], [[0.366, 0.5828], [0.5758, 0.736]]], [[[0.3558, 0.629], [0.8887, 0.0905]], [[0.6113, 0.2678], [0.5172, 0.0587]], [[0.1606, 0.0285], [0.8767, 0.1927]]], [[[0.8138, 0.3247], [0.3757, 0.3697]], [[0.447, 0.0655], [0.221, 0.1626]], [[0.8155, 0.3188], [0.9541, 0.144]]]]])
in0Sub57126 = tf.constant([[[[[0.7749, 0.6817, 0.3436], [0.4859, 0.5512, 0.8518]], [[0.665, 0.4743, 0.1214], [0.9405, 0.9142, 0.4402]], [[0.767, 0.3944, 0.5482], [0.8167, 0.3951, 0.5312]]], [[[0.2133, 0.0492, 0.3432], [0.8465, 0.3502, 0.8905]], [[0.8588, 0.7135, 0.7629], [0.8078, 0.7998, 0.077]], [[0.5413, 0.9952, 0.1725], [0.7246, 0.6903, 0.9878]]], [[[0.2255, 0.9878, 0.3088], [0.1546, 0.9543, 0.2723]], [[0.1882, 0.4117, 0.0326], [0.6443, 0.2558, 0.341]], [[0.3868, 0.8132, 0.3739], [0.5272, 0.8539, 0.2395]]]]])
in1Sub57126 = tf.constant([[[[[0.6253, 0.3303, 0.6246], [0.7726, 0.3641, 0.504]], [[0.4615, 0.1738, 0.9919], [0.0337, 0.0056, 0.1191]], [[0.6313, 0.3258, 0.8344], [0.7888, 0.6122, 0.4055]]], [[[0.3208, 0.9528, 0.9589], [0.0999, 0.756, 0.5369]], [[0.8756, 0.273, 0.6459], [0.0165, 0.5599, 0.0578]], [[0.5687, 0.6254, 0.5462], [0.6878, 0.489, 0.2922]]], [[[0.1778, 0.9681, 0.9654], [0.417, 0.7382, 0.6448]], [[0.2582, 0.091, 0.2341], [0.9363, 0.947, 0.1243]], [[0.815, 0.2671, 0.3029], [0.2977, 0.3398, 0.8123]]]]])
print (np.array2string(model.predict([in0Ave95459,in1Ave95459,in0Con92076,in0Sep66489,in0Add23219,in1Add23219,in0Con476,in0Con77079,in0Sub57126,in1Sub57126],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul45299.png')

LAve95459 = average_layer([[[[[[0.3648], [0.6466]]], [[[0.1885], [0.5702]]]]], [[[[[0.937], [0.4725]]], [[[0.8512], [0.9563]]]]]], Ave95459), 
LZer103 = zero_padding3D_layer(Ave95459, 1, 0, 2, 0, 0, 0, Zer103), 
LCon92076 = concatenate_layer([Zer103,[[[[[0.2072, 0.5389], [0.903, 0.2324]], [[0.0765, 0.3344], [0.7017, 0.8495]], [[0.1142, 0.2347], [0.0743, 0.372]]], [[[0.2268, 0.5364], [0.6982, 0.2465]], [[0.0324, 0.0185], [0.9211, 0.6325]], [[0.0832, 0.1135], [0.0121, 0.4208]]], [[[0.267, 0.9243], [0.1532, 0.3451]], [[0.409, 0.568], [0.3033, 0.8644]], [[0.0145, 0.7281], [0.5084, 0.0322]]]]]], 4, Con92076), 
LSep66489 = separable_conv1D_layer([[[0.5204]]], 1,[[[[0.0373]]],[[[0.7545, 0.3182, 0.4588]]]],[0, 0, 0], 1, false, Sep66489), 
LAdd23219 = add_layer([[[[0.5024, 0.048]]], [[[0.0837, 0.0956]]]], Add23219), 
LPRe48373 = prelu_layer(Add23219, [[0.0614, 0.1729]], PRe48373), 
LCon476 = concatenate_layer([PRe48373,[[[0.8045]]]], 2, Con476), 
LMin89501 = minimum_layer([Sep66489,Con476], Min89501), 
LRes55109 = reshape_layer(Min89501, [1, 3, 1], Res55109), 
LRes23714 = reshape_layer(Res55109, [1, 3, 1, 1], Res23714), 
LZer10072 = zero_padding3D_layer(Res23714, 2, 0, 0, 0, 1, 0, Zer10072), 
LCon77079 = concatenate_layer([Zer10072,[[[[[0.0723, 0.4461], [0.491, 0.5144]], [[0.9665, 0.2134], [0.8246, 0.9993]], [[0.366, 0.5828], [0.5758, 0.736]]], [[[0.3558, 0.629], [0.8887, 0.0905]], [[0.6113, 0.2678], [0.5172, 0.0587]], [[0.1606, 0.0285], [0.8767, 0.1927]]], [[[0.8138, 0.3247], [0.3757, 0.3697]], [[0.447, 0.0655], [0.221, 0.1626]], [[0.8155, 0.3188], [0.9541, 0.144]]]]]], 4, Con77079), 
LSub57126 = subtract_layer([[[[[0.7749, 0.6817, 0.3436], [0.4859, 0.5512, 0.8518]], [[0.665, 0.4743, 0.1214], [0.9405, 0.9142, 0.4402]], [[0.767, 0.3944, 0.5482], [0.8167, 0.3951, 0.5312]]], [[[0.2133, 0.0492, 0.3432], [0.8465, 0.3502, 0.8905]], [[0.8588, 0.7135, 0.7629], [0.8078, 0.7998, 0.077]], [[0.5413, 0.9952, 0.1725], [0.7246, 0.6903, 0.9878]]], [[[0.2255, 0.9878, 0.3088], [0.1546, 0.9543, 0.2723]], [[0.1882, 0.4117, 0.0326], [0.6443, 0.2558, 0.341]], [[0.3868, 0.8132, 0.3739], [0.5272, 0.8539, 0.2395]]]]], [[[[[0.6253, 0.3303, 0.6246], [0.7726, 0.3641, 0.504]], [[0.4615, 0.1738, 0.9919], [0.0337, 0.0056, 0.1191]], [[0.6313, 0.3258, 0.8344], [0.7888, 0.6122, 0.4055]]], [[[0.3208, 0.9528, 0.9589], [0.0999, 0.756, 0.5369]], [[0.8756, 0.273, 0.6459], [0.0165, 0.5599, 0.0578]], [[0.5687, 0.6254, 0.5462], [0.6878, 0.489, 0.2922]]], [[[0.1778, 0.9681, 0.9654], [0.417, 0.7382, 0.6448]], [[0.2582, 0.091, 0.2341], [0.9363, 0.947, 0.1243]], [[0.815, 0.2671, 0.3029], [0.2977, 0.3398, 0.8123]]]]], Sub57126), 
LMin3524 = minimum_layer([Con77079,Sub57126], Min3524), 
LMul45299 = multiply_layer([Con92076,Min3524], Mul45299), 
exec_layers([LAve95459,LZer103,LCon92076,LSep66489,LAdd23219,LPRe48373,LCon476,LMin89501,LRes55109,LRes23714,LZer10072,LCon77079,LSub57126,LMin3524,LMul45299],["Ave95459","Zer103","Con92076","Sep66489","Add23219","PRe48373","Con476","Min89501","Res55109","Res23714","Zer10072","Con77079","Sub57126","Min3524","Mul45299"],Mul45299,"Mul45299")

Actual (Unparsed): [[[[[0.0000000, 0.0149806, -0.1514309], [-0.0000000, 0.1689513, 0.0808287]], [[0.0000000, 0.0229882, -0.2910952], [0.0000000, 0.5786218, 0.2727745]], [[0.0000000, 0.0078341, -0.0671711], [0.0000000, -0.0161305, 0.0467604]]], [[[-0.0000000, -0.2049365, -0.3302615], [0.0000000, -0.2833295, 0.0223082]], [[-0.0000000, 0.0142722, 0.0021645], [0.0000000, 0.2209719, 0.0121440]], [[-0.0178347, 0.0133619, -0.0424149], [0.0000000, 0.0024357, 0.0810882]]], [[[0.0000000, 0.0052599, -0.6068954], [-0.0000000, 0.0331065, -0.1285497]], [[-0.0000000, 0.1311663, -0.1144520], [-0.0000000, -0.2096410, 0.1405514]], [[-0.2225998, 0.0079184, 0.0516951], [0.0067973, 0.2613685, -0.0184442]]]]]

Expected (Unparsed): [[[[[0,0.01498056,-0.15143090000000003],[-0.0,0.16895130000000005,0.08082871999999999]],[[0,0.02298825,-0.2910952],[0,0.57862182,0.27277445]],[[0,0.007834119999999998,-0.06717114],[0,-0.016130529999999997,0.046760399999999994]]],[[[-0.0,-0.20493648,-0.33026147999999994],[0,-0.28332956000000004,0.022308249999999998]],[[-0.0,0.014272199999999999,0.0021644999999999998],[0,0.22097189,0.012144]],[[-0.01783465999999999,0.01336192,-0.04241495000000001],[0.0,0.0024357300000000005,0.08108816]]],[[[0,0.0052599000000000135,-0.6068953800000001],[-0.0,0.033106520000000014,-0.12854975000000002]],[[-0.0,0.13116629999999999,-0.114452],[-0.0,-0.20964096,0.14055144]],[[-0.22259976999999995,0.00791845,0.0516951],[0.006797298495771998,0.26136844,-0.018444159999999998]]]]]

Actual:   [[[[[0, 0.015, -0.1514], [-0, 0.169, 0.0809]], [[0, 0.023, -0.291], [0, 0.5787, 0.2728]], [[0, 0.0079, -0.0671], [0, -0.0161, 0.0468]]], [[[-0, -0.2049, -0.3302], [0, -0.2833, 0.0224]], [[-0, 0.0143, 0.0022], [0, 0.221, 0.0122]], [[-0.0178, 0.0134, -0.0424], [0, 0.0025, 0.0811]]], [[[0, 0.0053, -0.6068], [-0, 0.0332, -0.1285]], [[-0, 0.1312, -0.1144], [-0, -0.2096, 0.1406]], [[-0.2225, 0.008, 0.0517], [0.0068, 0.2614, -0.0184]]]]]

Expected: [[[[[0, 0.015, -0.1514], [-0, 0.169, 0.0809]], [[0, 0.023, -0.291], [0, 0.5787, 0.2728]], [[0, 0.0079, -0.0671], [0, -0.0161, 0.0468]]], [[[-0, -0.2049, -0.3302], [0, -0.2833, 0.0224]], [[-0, 0.0143, 0.0022], [0, 0.221, 0.0122]], [[-0.0178, 0.0134, -0.0424], [0, 0.0025, 0.0811]]], [[[0, 0.0053, -0.6068], [-0, 0.0332, -0.1285]], [[-0, 0.1312, -0.1144], [-0, -0.2096, 0.1406]], [[-0.2225, 0.008, 0.0517], [0.0068, 0.2614, -0.0184]]]]]