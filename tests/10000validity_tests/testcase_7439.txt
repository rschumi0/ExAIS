import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub11759 = tf.keras.layers.Input(shape=([3, 3, 2, 3]))
in1Sub11759 = tf.keras.layers.Input(shape=([3, 3, 2, 3]))
in0Glo91094 = tf.keras.layers.Input(shape=([1, 1]))
in0Con40987 = tf.keras.layers.Input(shape=([3, 17]))

Sub11759 = keras.layers.Subtract(name = 'Sub11759', )([in0Sub11759,in1Sub11759])
Res58459 = keras.layers.Reshape((3, 3, 6), name = 'Res58459', )(Sub11759)
Res15234 = keras.layers.Reshape((3, 18), name = 'Res15234', )(Res58459)
Glo91094 = keras.layers.GlobalMaxPool1D(name = 'Glo91094', )(in0Glo91094)
Res68526 = keras.layers.Reshape((1, 1), name = 'Res68526', )(Glo91094)
Cro13960 = keras.layers.Cropping1D(cropping=((0, 0)), name = 'Cro13960', )(Res68526)
Zer91724 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer91724', )(Cro13960)
Con40987 = keras.layers.Concatenate(axis=2, name = 'Con40987', )([Zer91724,in0Con40987])
Mul70133 = keras.layers.Multiply(name = 'Mul70133', )([Res15234,Con40987])
model = tf.keras.models.Model(inputs=[in0Sub11759,in1Sub11759,in0Glo91094,in0Con40987], outputs=Mul70133)
in0Sub11759 = tf.constant([[[[[0.6526, 0.1493, 0.613], [0.1335, 0.5008, 0.7202]], [[0.7751, 0.4915, 0.8087], [0.3313, 0.4121, 0.9487]], [[0.5301, 0.4308, 0.7901], [0.053, 0.3963, 0.5536]]], [[[0.7433, 0.4215, 0.6537], [0.8058, 0.2606, 0.2479]], [[0.7621, 0.0674, 0.8971], [0.3745, 0.4524, 0.9962]], [[0.1406, 0.2202, 0.104], [0.9967, 0.256, 0.8843]]], [[[0.8811, 0.5431, 0.9342], [0.4297, 0.444, 0.639]], [[0.28, 0.6905, 0.3378], [0.7361, 0.2869, 0.9461]], [[0.3548, 0.1364, 0.9677], [0.457, 0.2633, 0.7588]]]]])
in1Sub11759 = tf.constant([[[[[0.7365, 0.1669, 0.3028], [0.1626, 0.4709, 0.8427]], [[0.7554, 0.8909, 0.9224], [0.5429, 0.7201, 0.5201]], [[0.7874, 0.5888, 0.9408], [0.286, 0.8055, 0.1411]]], [[[0.1708, 0.7911, 0.7074], [0.0796, 0.0881, 0.0952]], [[0.6988, 0.13, 0.223], [0.4384, 0.441, 0.0834]], [[0.7046, 0.9554, 0.1594], [0.5161, 0.8903, 0.999]]], [[[0.6006, 0.631, 0.1015], [0.1127, 0.0431, 0.7158]], [[0.7567, 0.2664, 0.4652], [0.2394, 0.1684, 0.6994]], [[0.2728, 0.7947, 0.1472], [0.6053, 0.702, 0.9359]]]]])
in0Glo91094 = tf.constant([[[1.3444]]])
in0Con40987 = tf.constant([[[0.6778, 0.1554, 0.8727, 0.0669, 0.6876, 0.389, 0.6829, 0.3198, 0.4715, 0.837, 0.8606, 0.2278, 0.5943, 0.5055, 0.0792, 0.0708, 0.714], [0.466, 0.1532, 0.587, 0.9405, 0.0756, 0.9497, 0.3333, 0.314, 0.1277, 0.4042, 0.7894, 0.6869, 0.6285, 0.2613, 0.2747, 0.691, 0.9259], [0.6326, 0.9758, 0.2724, 0.6011, 0.8459, 0.7699, 0.483, 0.8736, 0.3439, 0.0761, 0.8355, 0.2688, 0.5847, 0.6631, 0.5445, 0.9482, 0.9934]]])
print (np.array2string(model.predict([in0Sub11759,in1Sub11759,in0Glo91094,in0Con40987],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul70133.png')

LSub11759 = subtract_layer([[[[[0.6526, 0.1493, 0.613], [0.1335, 0.5008, 0.7202]], [[0.7751, 0.4915, 0.8087], [0.3313, 0.4121, 0.9487]], [[0.5301, 0.4308, 0.7901], [0.053, 0.3963, 0.5536]]], [[[0.7433, 0.4215, 0.6537], [0.8058, 0.2606, 0.2479]], [[0.7621, 0.0674, 0.8971], [0.3745, 0.4524, 0.9962]], [[0.1406, 0.2202, 0.104], [0.9967, 0.256, 0.8843]]], [[[0.8811, 0.5431, 0.9342], [0.4297, 0.444, 0.639]], [[0.28, 0.6905, 0.3378], [0.7361, 0.2869, 0.9461]], [[0.3548, 0.1364, 0.9677], [0.457, 0.2633, 0.7588]]]]], [[[[[0.7365, 0.1669, 0.3028], [0.1626, 0.4709, 0.8427]], [[0.7554, 0.8909, 0.9224], [0.5429, 0.7201, 0.5201]], [[0.7874, 0.5888, 0.9408], [0.286, 0.8055, 0.1411]]], [[[0.1708, 0.7911, 0.7074], [0.0796, 0.0881, 0.0952]], [[0.6988, 0.13, 0.223], [0.4384, 0.441, 0.0834]], [[0.7046, 0.9554, 0.1594], [0.5161, 0.8903, 0.999]]], [[[0.6006, 0.631, 0.1015], [0.1127, 0.0431, 0.7158]], [[0.7567, 0.2664, 0.4652], [0.2394, 0.1684, 0.6994]], [[0.2728, 0.7947, 0.1472], [0.6053, 0.702, 0.9359]]]]], Sub11759), 
LRes58459 = reshape_layer(Sub11759, [3, 3, 6], Res58459), 
LRes15234 = reshape_layer(Res58459, [3, 18], Res15234), 
LGlo91094 = global_max_pool1D_layer([[[1.3444]]], Glo91094), 
LRes68526 = reshape_layer(Glo91094, [1, 1], Res68526), 
LCro13960 = cropping1D_layer(Res68526, 0, 0, Cro13960), 
LZer91724 = zero_padding1D_layer(Cro13960, 2, 0, Zer91724), 
LCon40987 = concatenate_layer([Zer91724,[[[0.6778, 0.1554, 0.8727, 0.0669, 0.6876, 0.389, 0.6829, 0.3198, 0.4715, 0.837, 0.8606, 0.2278, 0.5943, 0.5055, 0.0792, 0.0708, 0.714], [0.466, 0.1532, 0.587, 0.9405, 0.0756, 0.9497, 0.3333, 0.314, 0.1277, 0.4042, 0.7894, 0.6869, 0.6285, 0.2613, 0.2747, 0.691, 0.9259], [0.6326, 0.9758, 0.2724, 0.6011, 0.8459, 0.7699, 0.483, 0.8736, 0.3439, 0.0761, 0.8355, 0.2688, 0.5847, 0.6631, 0.5445, 0.9482, 0.9934]]]], 2, Con40987), 
LMul70133 = multiply_layer([Res15234,Con40987], Mul70133), 
exec_layers([LSub11759,LRes58459,LRes15234,LGlo91094,LRes68526,LCro13960,LZer91724,LCon40987,LMul70133],["Sub11759","Res58459","Res15234","Glo91094","Res68526","Cro13960","Zer91724","Con40987","Mul70133"],Mul70133,"Mul70133")

Actual (Unparsed): [[[-0.0000000, -0.0119293, 0.0482051, -0.0253956, 0.0020003, -0.0842310, 0.0076633, -0.2727503, -0.0363613, -0.0997694, -0.2577960, 0.3688532, -0.0586129, -0.0938994, -0.0761789, -0.0184536, -0.0289714, 0.2945250], [0.0000000, -0.1722336, -0.0082268, 0.4262794, 0.1622363, 0.0115441, 0.0601160, -0.0208646, 0.2116674, -0.0081600, 0.0046079, 0.7205643, -0.3874116, -0.4620732, -0.0144760, 0.1320208, -0.4383013, -0.1062007], [0.3771042, -0.0556055, 0.8125486, 0.0863508, 0.2409810, -0.0649651, -0.3670113, 0.2048403, -0.1112967, 0.1708151, 0.0090179, 0.2061178, 0.0220416, -0.3849080, 0.5440736, -0.0807494, -0.4159754, -0.1759311]]]

Expected (Unparsed): [[[-0.0,-0.011929280000000002,0.04820508,-0.02539556999999999,0.0020003100000000025,-0.08423100000000004,0.00766330000000002,-0.27275026,-0.036361260000000006,-0.09976940000000002,-0.2577959999999999,0.36885316,-0.058612939999999995,-0.0938994,-0.07617884999999996,-0.0184536,-0.02897136,0.294525],[0.0,-0.17223360000000001,-0.008226840000000013,0.4262794,0.16223625,0.01154412,0.06011601000000002,-0.02086458,0.2116674,-0.008160030000000002,0.004607880000000009,0.7205643199999999,-0.3874116,-0.4620732,-0.014476019999999996,0.13202082,-0.43830129999999995,-0.10620073000000002],[0.3771042,-0.05560553999999999,0.81254866,0.0863508,0.24098099,-0.06496511999999999,-0.36701133,0.20484029999999998,-0.11129664000000002,0.17081512999999998,0.009017849999999999,0.20611785000000002,0.022041600000000005,-0.38490801,0.54407355,-0.08074934999999996,-0.41597533999999997,-0.1759311399999999]]]

Actual:   [[[-0, -0.0119, 0.0483, -0.0253, 0.0021, -0.0842, 0.0077, -0.2727, -0.0363, -0.0997, -0.2577, 0.3689, -0.0586, -0.0938, -0.0761, -0.0184, -0.0289, 0.2946], [0, -0.1722, -0.0082, 0.4263, 0.1623, 0.0116, 0.0602, -0.0208, 0.2117, -0.0081, 0.0047, 0.7206, -0.3874, -0.462, -0.0144, 0.1321, -0.4383, -0.1062], [0.3772, -0.0556, 0.8126, 0.0864, 0.241, -0.0649, -0.367, 0.2049, -0.1112, 0.1709, 0.0091, 0.2062, 0.0221, -0.3849, 0.5441, -0.0807, -0.4159, -0.1759]]]

Expected: [[[-0, -0.0119, 0.0483, -0.0253, 0.0021, -0.0842, 0.0077, -0.2727, -0.0363, -0.0997, -0.2577, 0.3689, -0.0586, -0.0938, -0.0761, -0.0184, -0.0289, 0.2946], [0, -0.1722, -0.0082, 0.4263, 0.1623, 0.0116, 0.0602, -0.0208, 0.2117, -0.0081, 0.0047, 0.7206, -0.3874, -0.462, -0.0144, 0.1321, -0.4383, -0.1062], [0.3772, -0.0556, 0.8126, 0.0864, 0.241, -0.0649, -0.367, 0.2049, -0.1112, 0.1709, 0.0091, 0.2062, 0.0221, -0.3849, 0.5441, -0.0807, -0.4159, -0.1759]]]