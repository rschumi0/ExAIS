import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max9471 = tf.keras.layers.Input(shape=([2, 1]))
in1Max9471 = tf.keras.layers.Input(shape=([2, 1]))
in0Mas85224 = tf.keras.layers.Input(shape=([4, 4, 3]))
in0Con28873 = tf.keras.layers.Input(shape=([2, 12, 1, 1]))
in0Max84857 = tf.keras.layers.Input(shape=([1, 1]))

Max9471 = keras.layers.Maximum(name = 'Max9471', )([in0Max9471,in1Max9471])
Sof44832 = keras.layers.Softmax(axis=1, name = 'Sof44832', )(Max9471)
Mas85224 = keras.layers.Masking(mask_value=2, name = 'Mas85224', )(in0Mas85224)
Res16729 = keras.layers.Reshape((4, 12), name = 'Res16729', )(Mas85224)
Cro73823 = keras.layers.Cropping1D(cropping=((1, 2)), name = 'Cro73823', )(Res16729)
Dot55743 = keras.layers.Dot(axes=(2, 1), name = 'Dot55743', )([Sof44832,Cro73823])
Res60476 = keras.layers.Reshape((2, 12, 1), name = 'Res60476', )(Dot55743)
Res69965 = keras.layers.Reshape((2, 12, 1, 1), name = 'Res69965', )(Res60476)
Con28873 = keras.layers.Concatenate(axis=4, name = 'Con28873', )([Res69965,in0Con28873])
Max84857 = keras.layers.MaxPool1D(pool_size=(1), strides=(9), padding='same', name = 'Max84857', )(in0Max84857)
Res45814 = keras.layers.Reshape((1, 1, 1), name = 'Res45814', )(Max84857)
Res68730 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res68730', )(Res45814)
Con55885 = keras.layers.Conv3DTranspose(2, (1, 1, 1),strides=(1, 1, 1), padding='same', name = 'Con55885', )(Res68730)
Zer6895 = keras.layers.ZeroPadding3D(padding=((1, 0), (11, 0), (0, 0)), name = 'Zer6895', )(Con55885)
Sub86135 = keras.layers.Subtract(name = 'Sub86135', )([Con28873,Zer6895])
model = tf.keras.models.Model(inputs=[in0Max9471,in1Max9471,in0Mas85224,in0Con28873,in0Max84857], outputs=Sub86135)
w = model.get_layer('Con55885').get_weights() 
w[0] = np.array([[[[[0.4628], [0.0372]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con55885').set_weights(w) 
in0Max9471 = tf.constant([[[0.8809], [0.203]]])
in1Max9471 = tf.constant([[[0.0993], [0.9478]]])
in0Mas85224 = tf.constant([[[[1.2356, 1.2794, 1.3926], [1.3829, 1.2489, 1.1557], [1.1128, 1.1837, 1.8341], [1.7336, 1.0888, 1.7871]], [[1.6724, 1.8495, 1.0752], [1.1652, 1.648, 1.2947], [1.5356, 1.7183, 1.5277], [1.1238, 1.403, 1.4201]], [[1.9004, 1.8541, 1.3896], [1.1566, 1.7285, 1.6236], [1.8268, 1.8644, 1.5999], [1.4959, 1.3348, 1.9065]], [[1.9165, 1.8811, 1.8452], [1.0979, 1.8056, 1.4757], [1.6287, 1.9369, 1.4998], [1.2128, 1.0166, 1.8881]]]])
in0Con28873 = tf.constant([[[[[0.8352]], [[0.9339]], [[0.9186]], [[0.8562]], [[0.2172]], [[0.5906]], [[0.954]], [[0.7361]], [[0.2864]], [[0.6052]], [[0.6948]], [[0.6254]]], [[[0.04]], [[0.4147]], [[0.9736]], [[0.2279]], [[0.5612]], [[0.7952]], [[0.2147]], [[0.9499]], [[0.2003]], [[0.5692]], [[0.943]], [[0.0307]]]]])
in0Max84857 = tf.constant([[[1.2948]]])
print (np.array2string(model.predict([in0Max9471,in1Max9471,in0Mas85224,in0Con28873,in0Max84857],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub86135.png')

LMax9471 = maximum_layer([[[[0.8809], [0.203]]], [[[0.0993], [0.9478]]]], Max9471), 
LSof44832 = softmax_layer(Max9471, 1, Sof44832), 
LMas85224 = masking_layer([[[[1.2356, 1.2794, 1.3926], [1.3829, 1.2489, 1.1557], [1.1128, 1.1837, 1.8341], [1.7336, 1.0888, 1.7871]], [[1.6724, 1.8495, 1.0752], [1.1652, 1.648, 1.2947], [1.5356, 1.7183, 1.5277], [1.1238, 1.403, 1.4201]], [[1.9004, 1.8541, 1.3896], [1.1566, 1.7285, 1.6236], [1.8268, 1.8644, 1.5999], [1.4959, 1.3348, 1.9065]], [[1.9165, 1.8811, 1.8452], [1.0979, 1.8056, 1.4757], [1.6287, 1.9369, 1.4998], [1.2128, 1.0166, 1.8881]]]], 2, Mas85224), 
LRes16729 = reshape_layer(Mas85224, [4, 12], Res16729), 
LCro73823 = cropping1D_layer(Res16729, 1, 2, Cro73823), 
LDot55743 = dot_layer(Sof44832,Cro73823, 2, 1, Dot55743), 
LRes60476 = reshape_layer(Dot55743, [2, 12, 1], Res60476), 
LRes69965 = reshape_layer(Res60476, [2, 12, 1, 1], Res69965), 
LCon28873 = concatenate_layer([Res69965,[[[[[0.8352]], [[0.9339]], [[0.9186]], [[0.8562]], [[0.2172]], [[0.5906]], [[0.954]], [[0.7361]], [[0.2864]], [[0.6052]], [[0.6948]], [[0.6254]]], [[[0.04]], [[0.4147]], [[0.9736]], [[0.2279]], [[0.5612]], [[0.7952]], [[0.2147]], [[0.9499]], [[0.2003]], [[0.5692]], [[0.943]], [[0.0307]]]]]], 4, Con28873), 
LMax84857 = max_pool1D_layer([[[1.2948]]], 1, 9, true, Max84857), 
LRes45814 = reshape_layer(Max84857, [1, 1, 1], Res45814), 
LRes68730 = reshape_layer(Res45814, [1, 1, 1, 1], Res68730), 
LCon55885 = conv3D_transpose_layer(Res68730, 1, 1, 1,[[[[[0.4628], [0.0372]]]]],[0, 0], 1, 1, 1, true, Con55885), 
LZer6895 = zero_padding3D_layer(Con55885, 1, 0, 11, 0, 0, 0, Zer6895), 
LSub86135 = subtract_layer(Con28873,Zer6895, Sub86135), 
exec_layers([LMax9471,LSof44832,LMas85224,LRes16729,LCro73823,LDot55743,LRes60476,LRes69965,LCon28873,LMax84857,LRes45814,LRes68730,LCon55885,LZer6895,LSub86135],["Max9471","Sof44832","Mas85224","Res16729","Cro73823","Dot55743","Res60476","Res69965","Con28873","Max84857","Res45814","Res68730","Con55885","Zer6895","Sub86135"],Sub86135,"Sub86135")

Actual (Unparsed): [[[[[0.8082396, 0.8352000]], [[0.8938286, 0.9339000]], [[0.5196240, 0.9186000]], [[0.5631193, 0.8562000]], [[0.7964475, 0.2172000]], [[0.6257042, 0.5906000]], [[0.7421267, 0.9540000]], [[0.8304222, 0.7361000]], [[0.7383087, 0.2864000]], [[0.5431115, 0.6052000]], [[0.6780436, 0.6948000]], [[0.6863077, 0.6254000]]], [[[0.8641604, 0.0400000]], [[0.9556713, 0.4147000]], [[0.5555760, 0.9736000]], [[0.6020807, 0.2279000]], [[0.8515525, 0.5612000]], [[0.6689958, 0.7952000]], [[0.7934733, 0.2147000]], [[0.8878778, 0.9499000]], [[0.7893912, 0.2003000]], [[0.5806886, 0.5692000]], [[0.7249564, 0.9430000]], [[0.1345588, -0.0174666]]]]]

Expected (Unparsed): [[[[[0.8082395375659691,0.8352]],[[0.8938286443005619,0.9339]],[[0.5196239839697021,0.9186]],[[0.5631192951278804,0.8562]],[[0.7964474754297518,0.2172]],[[0.6257042150721479,0.5906]],[[0.7421266646055382,0.954]],[[0.8304221462566399,0.7361]],[[0.7383087428483204,0.2864]],[[0.5431114519951183,0.6052]],[[0.678043572832489,0.6948]],[[0.6863076819525428,0.6254]]],[[[0.8641604624340308,0.04]],[[0.9556713556994378,0.4147]],[[0.5555760160302977,0.9736]],[[0.6020807048721195,0.2279]],[[0.8515525245702479,0.5612]],[[0.6689957849278519,0.7952]],[[0.7934733353944616,0.2147]],[[0.8878778537433598,0.9499]],[[0.7893912571516796,0.2003]],[[0.5806885480048815,0.5692]],[[0.7249564271675109,0.943]],[[0.13455887804745692,-0.017466559999999996]]]]]

Actual:   [[[[[0.8083, 0.8352]], [[0.8939, 0.9339]], [[0.5197, 0.9186]], [[0.5632, 0.8562]], [[0.7965, 0.2172]], [[0.6258, 0.5906]], [[0.7422, 0.954]], [[0.8305, 0.7361]], [[0.7384, 0.2864]], [[0.5432, 0.6052]], [[0.6781, 0.6948]], [[0.6864, 0.6254]]], [[[0.8642, 0.04]], [[0.9557, 0.4147]], [[0.5556, 0.9736]], [[0.6021, 0.2279]], [[0.8516, 0.5612]], [[0.669, 0.7952]], [[0.7935, 0.2147]], [[0.8879, 0.9499]], [[0.7894, 0.2003]], [[0.5807, 0.5692]], [[0.725, 0.943]], [[0.1346, -0.0174]]]]]

Expected: [[[[[0.8083, 0.8352]], [[0.8939, 0.9339]], [[0.5197, 0.9186]], [[0.5632, 0.8562]], [[0.7965, 0.2172]], [[0.6258, 0.5906]], [[0.7422, 0.954]], [[0.8305, 0.7361]], [[0.7384, 0.2864]], [[0.5432, 0.6052]], [[0.6781, 0.6948]], [[0.6864, 0.6254]]], [[[0.8642, 0.04]], [[0.9557, 0.4147]], [[0.5556, 0.9736]], [[0.6021, 0.2279]], [[0.8516, 0.5612]], [[0.669, 0.7952]], [[0.7935, 0.2147]], [[0.8879, 0.9499]], [[0.7894, 0.2003]], [[0.5807, 0.5692]], [[0.725, 0.943]], [[0.1346, -0.0174]]]]]