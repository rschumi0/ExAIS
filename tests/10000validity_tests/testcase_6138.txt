import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min51459 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in1Min51459 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in0Sub91629 = tf.keras.layers.Input(shape=([3, 2]))
in1Sub91629 = tf.keras.layers.Input(shape=([3, 2]))
in0Con80069 = tf.keras.layers.Input(shape=([3, 2]))

Min51459 = keras.layers.Minimum(name = 'Min51459', )([in0Min51459,in1Min51459])
Res5871 = keras.layers.Reshape((1, 2, 2), name = 'Res5871', )(Min51459)
Res44207 = keras.layers.Reshape((1, 4), name = 'Res44207', )(Res5871)
Zer89518 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer89518', )(Res44207)
Sub91629 = keras.layers.Subtract(name = 'Sub91629', )([in0Sub91629,in1Sub91629])
Con80069 = keras.layers.Concatenate(axis=2, name = 'Con80069', )([Sub91629,in0Con80069])
Max49336 = keras.layers.Maximum(name = 'Max49336', )([Zer89518,Con80069])
Res50136 = keras.layers.Reshape((3, 4, 1), name = 'Res50136', )(Max49336)
Up_70935 = keras.layers.UpSampling2D(size=(2, 2), name = 'Up_70935', )(Res50136)
model = tf.keras.models.Model(inputs=[in0Min51459,in1Min51459,in0Sub91629,in1Sub91629,in0Con80069], outputs=Up_70935)
in0Min51459 = tf.constant([[[[[0.4267, 0.2175]], [[0.1532, 0.578]]]]])
in1Min51459 = tf.constant([[[[[0.2961, 0.7]], [[0.3115, 0.8106]]]]])
in0Sub91629 = tf.constant([[[0.1141, 0.6827], [0.0422, 0.7886], [0.988, 0.4331]]])
in1Sub91629 = tf.constant([[[0.5042, 0.0788], [0.0443, 0.7211], [0.7387, 0.2602]]])
in0Con80069 = tf.constant([[[0.6859, 0.0724], [0.705, 0.25], [0.3989, 0.8577]]])
print (np.array2string(model.predict([in0Min51459,in1Min51459,in0Sub91629,in1Sub91629,in0Con80069],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Up_70935.png')

LMin51459 = minimum_layer([[[[[[0.4267, 0.2175]], [[0.1532, 0.578]]]]], [[[[[0.2961, 0.7]], [[0.3115, 0.8106]]]]]], Min51459), 
LRes5871 = reshape_layer(Min51459, [1, 2, 2], Res5871), 
LRes44207 = reshape_layer(Res5871, [1, 4], Res44207), 
LZer89518 = zero_padding1D_layer(Res44207, 2, 0, Zer89518), 
LSub91629 = subtract_layer([[[0.1141, 0.6827], [0.0422, 0.7886], [0.988, 0.4331]]], [[[0.5042, 0.0788], [0.0443, 0.7211], [0.7387, 0.2602]]], Sub91629), 
LCon80069 = concatenate_layer([Sub91629,[[[0.6859, 0.0724], [0.705, 0.25], [0.3989, 0.8577]]]], 2, Con80069), 
LMax49336 = maximum_layer([Zer89518,Con80069], Max49336), 
LRes50136 = reshape_layer(Max49336, [3, 4, 1], Res50136), 
LUp_70935 = up_sampling2D_layer(Res50136, 2, 2, Up_70935), 
exec_layers([LMin51459,LRes5871,LRes44207,LZer89518,LSub91629,LCon80069,LMax49336,LRes50136,LUp_70935],["Min51459","Res5871","Res44207","Zer89518","Sub91629","Con80069","Max49336","Res50136","Up_70935"],Up_70935,"Up_70935")

Actual (Unparsed): [[[[0.0000000], [0.0000000], [0.6039000], [0.6039000], [0.6859000], [0.6859000], [0.0724000], [0.0724000]], [[0.0000000], [0.0000000], [0.6039000], [0.6039000], [0.6859000], [0.6859000], [0.0724000], [0.0724000]], [[0.0000000], [0.0000000], [0.0675001], [0.0675001], [0.7050000], [0.7050000], [0.2500000], [0.2500000]], [[0.0000000], [0.0000000], [0.0675001], [0.0675001], [0.7050000], [0.7050000], [0.2500000], [0.2500000]], [[0.2961000], [0.2961000], [0.2175000], [0.2175000], [0.3989000], [0.3989000], [0.8577000], [0.8577000]], [[0.2961000], [0.2961000], [0.2175000], [0.2175000], [0.3989000], [0.3989000], [0.8577000], [0.8577000]]]]

Expected (Unparsed): [[[[0],[0],[0.6039],[0.6039],[0.6859],[0.6859],[0.0724],[0.0724]],[[0],[0],[0.6039],[0.6039],[0.6859],[0.6859],[0.0724],[0.0724]],[[0],[0],[0.0675],[0.0675],[0.705],[0.705],[0.25],[0.25]],[[0],[0],[0.0675],[0.0675],[0.705],[0.705],[0.25],[0.25]],[[0.2961],[0.2961],[0.2175],[0.2175],[0.3989],[0.3989],[0.8577],[0.8577]],[[0.2961],[0.2961],[0.2175],[0.2175],[0.3989],[0.3989],[0.8577],[0.8577]]]]

Actual:   [[[[0], [0], [0.6039], [0.6039], [0.6859], [0.6859], [0.0724], [0.0724]], [[0], [0], [0.6039], [0.6039], [0.6859], [0.6859], [0.0724], [0.0724]], [[0], [0], [0.0676], [0.0676], [0.705], [0.705], [0.25], [0.25]], [[0], [0], [0.0676], [0.0676], [0.705], [0.705], [0.25], [0.25]], [[0.2961], [0.2961], [0.2175], [0.2175], [0.3989], [0.3989], [0.8577], [0.8577]], [[0.2961], [0.2961], [0.2175], [0.2175], [0.3989], [0.3989], [0.8577], [0.8577]]]]

Expected: [[[[0], [0], [0.6039], [0.6039], [0.6859], [0.6859], [0.0724], [0.0724]], [[0], [0], [0.6039], [0.6039], [0.6859], [0.6859], [0.0724], [0.0724]], [[0], [0], [0.0675], [0.0675], [0.705], [0.705], [0.25], [0.25]], [[0], [0], [0.0675], [0.0675], [0.705], [0.705], [0.25], [0.25]], [[0.2961], [0.2961], [0.2175], [0.2175], [0.3989], [0.3989], [0.8577], [0.8577]], [[0.2961], [0.2961], [0.2175], [0.2175], [0.3989], [0.3989], [0.8577], [0.8577]]]]