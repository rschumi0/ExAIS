import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub43656 = tf.keras.layers.Input(shape=([2, 3, 3, 3]))
in1Sub43656 = tf.keras.layers.Input(shape=([2, 3, 3, 3]))
in0Lay71912 = tf.keras.layers.Input(shape=([4]))
in0Max62632 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Max62632 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con94055 = tf.keras.layers.Input(shape=([4, 1, 1]))
in0Mul11967 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Mul11967 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Con85632 = tf.keras.layers.Input(shape=([4, 5, 7]))

Sub43656 = keras.layers.Subtract(name = 'Sub43656', )([in0Sub43656,in1Sub43656])
Res61120 = keras.layers.Reshape((2, 3, 9), name = 'Res61120', )(Sub43656)
Zer3985 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer3985', )(Res61120)
Lay71912 = keras.layers.LayerNormalization(axis=1, epsilon=1.318637446421279, name = 'Lay71912', )(in0Lay71912)
Res37178 = keras.layers.Reshape((4, 1), name = 'Res37178', )(Lay71912)
Res2171 = keras.layers.Reshape((4, 1, 1), name = 'Res2171', )(Res37178)
Max62632 = keras.layers.Maximum(name = 'Max62632', )([in0Max62632,in1Max62632])
Den11523 = keras.layers.Dense(1,name = 'Den11523', )(Max62632)
Zer61813 = keras.layers.ZeroPadding2D(padding=((3, 0), (0, 0)), name = 'Zer61813', )(Den11523)
Add75058 = keras.layers.Add(name = 'Add75058', )([Res2171,Zer61813])
Con94055 = keras.layers.Concatenate(axis=3, name = 'Con94055', )([Add75058,in0Con94055])
Mul11967 = keras.layers.Multiply(name = 'Mul11967', )([in0Mul11967,in1Mul11967])
Up_48061 = keras.layers.UpSampling2D(size=(2, 1), name = 'Up_48061', )(Mul11967)
Mul630 = keras.layers.Multiply(name = 'Mul630', )([Con94055,Up_48061])
Zer35365 = keras.layers.ZeroPadding2D(padding=((0, 0), (4, 0)), name = 'Zer35365', )(Mul630)
Con85632 = keras.layers.Concatenate(axis=3, name = 'Con85632', )([Zer35365,in0Con85632])
Min34767 = keras.layers.Minimum(name = 'Min34767', )([Zer3985,Con85632])
model = tf.keras.models.Model(inputs=[in0Sub43656,in1Sub43656,in0Lay71912,in0Max62632,in1Max62632,in0Con94055,in0Mul11967,in1Mul11967,in0Con85632], outputs=Min34767)
w = model.get_layer('Den11523').get_weights() 
w[0] = np.array([[0.2091]])
w[1] = np.array([0.1964])
model.get_layer('Den11523').set_weights(w) 
in0Sub43656 = tf.constant([[[[[0.8972, 0.731, 0.5204], [0.629, 0.6266, 0.0318], [0.8452, 0.5408, 0.829]], [[0.2697, 0.503, 0.0934], [0.5659, 0.9738, 0.5192], [0.1442, 0.7029, 0.6003]], [[0.778, 0.0243, 0.8117], [0.6912, 0.8712, 0.2564], [0.714, 0.4888, 0.471]]], [[[0.8321, 0.9479, 0.2009], [0.433, 0.136, 0.3843], [0.5544, 0.6016, 0.0026]], [[0.0649, 0.8872, 0.4672], [0.4523, 0.091, 0.7881], [0.4109, 0.3713, 0.0533]], [[0.2145, 0.2565, 0.7682], [0.0586, 0.091, 0.2506], [0.2724, 0.8858, 0.627]]]]])
in1Sub43656 = tf.constant([[[[[0.3879, 0.2206, 0.179], [0.9757, 0.2119, 0.0212], [0.878, 0.4018, 0.8316]], [[0.4814, 0.2717, 0.8272], [0.9177, 0.4363, 0.1647], [0.4773, 0.8665, 0.3297]], [[0.6484, 0.366, 0.1557], [0.3585, 0.8806, 0.525], [0.1517, 0.4197, 0.095]]], [[[0.2085, 0.2771, 0.3736], [0.7845, 0.7855, 0.4964], [0.0728, 0.634, 0.6704]], [[0.5372, 0.1968, 0.3129], [0.4365, 0.1277, 0.18], [0.6803, 0.2053, 0.8031]], [[0.4239, 0.3048, 0.5144], [0.5076, 0.5427, 0.4554], [0.1257, 0.3054, 0.6088]]]]])
in0Lay71912 = tf.constant([[1.8821, 1.6575, 1.9998, 1.237]])
in0Max62632 = tf.constant([[[[0.7703]]]])
in1Max62632 = tf.constant([[[[0.4983]]]])
in0Con94055 = tf.constant([[[[0.8726]], [[0.209]], [[0.8479]], [[0.6144]]]])
in0Mul11967 = tf.constant([[[[0.3578, 0.872]], [[0.2277, 0.1903]]]])
in1Mul11967 = tf.constant([[[[0.9374, 0.8319]], [[0.5439, 0.3607]]]])
in0Con85632 = tf.constant([[[[0.2216, 0.7283, 0.448, 0.0216, 0.9234, 0.9978, 0.7164], [0.1539, 0.6934, 0.4507, 0.6644, 0.1825, 0.7713, 0.916], [0.2851, 0.7913, 0.9779, 0.0896, 0.0973, 0.3782, 0.1546], [0.5688, 0.995, 0.5736, 0.1777, 0.7763, 0.5947, 0.4873], [0.5155, 0.8168, 0.1671, 0.7397, 0.3534, 0.4687, 0.0694]], [[0.8906, 0.163, 0.716, 0.704, 0.9642, 0.2133, 0.4475], [0.4214, 0.3882, 0.9302, 0.2122, 0.4577, 0.8131, 0.2006], [0.2097, 0.9523, 0.96, 0.6842, 0.0143, 0.3247, 0.8559], [0.9504, 0.8858, 0.8076, 0.5592, 0.7864, 0.9015, 0.731], [0.7518, 0.3399, 0.5621, 0.2308, 0.3816, 0.8504, 0.9668]], [[0.4152, 0.874, 0.6035, 0.1343, 0.6658, 0.3005, 0.3954], [0.5516, 0.6707, 0.2915, 0.237, 0.5746, 0.9921, 0.4109], [0.2438, 0.876, 0.4577, 0.1728, 0.6617, 0.7375, 0.4279], [0.872, 0.758, 0.6168, 0.0439, 0.9277, 0.8726, 0.0869], [0.8861, 0.4907, 0.2676, 0.9389, 0.0851, 0.6559, 0.5421]], [[0.9699, 0.8194, 0.7377, 0.2812, 0.7328, 0.3051, 0.7155], [0.3031, 0.3192, 0.8383, 0.1371, 0.3328, 0.0632, 0.1861], [0.481, 0.1833, 0.9112, 0.6378, 0.2202, 0.56, 0.0817], [0.328, 0.6048, 0.4131, 0.559, 0.0182, 0.4871, 0.3608], [0.9074, 0.3893, 0.3499, 0.0811, 0.8701, 0.0344, 0.0648]]]])
print (np.array2string(model.predict([in0Sub43656,in1Sub43656,in0Lay71912,in0Max62632,in1Max62632,in0Con94055,in0Mul11967,in1Mul11967,in0Con85632],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min34767.png')

LSub43656 = subtract_layer([[[[[0.8972, 0.731, 0.5204], [0.629, 0.6266, 0.0318], [0.8452, 0.5408, 0.829]], [[0.2697, 0.503, 0.0934], [0.5659, 0.9738, 0.5192], [0.1442, 0.7029, 0.6003]], [[0.778, 0.0243, 0.8117], [0.6912, 0.8712, 0.2564], [0.714, 0.4888, 0.471]]], [[[0.8321, 0.9479, 0.2009], [0.433, 0.136, 0.3843], [0.5544, 0.6016, 0.0026]], [[0.0649, 0.8872, 0.4672], [0.4523, 0.091, 0.7881], [0.4109, 0.3713, 0.0533]], [[0.2145, 0.2565, 0.7682], [0.0586, 0.091, 0.2506], [0.2724, 0.8858, 0.627]]]]], [[[[[0.3879, 0.2206, 0.179], [0.9757, 0.2119, 0.0212], [0.878, 0.4018, 0.8316]], [[0.4814, 0.2717, 0.8272], [0.9177, 0.4363, 0.1647], [0.4773, 0.8665, 0.3297]], [[0.6484, 0.366, 0.1557], [0.3585, 0.8806, 0.525], [0.1517, 0.4197, 0.095]]], [[[0.2085, 0.2771, 0.3736], [0.7845, 0.7855, 0.4964], [0.0728, 0.634, 0.6704]], [[0.5372, 0.1968, 0.3129], [0.4365, 0.1277, 0.18], [0.6803, 0.2053, 0.8031]], [[0.4239, 0.3048, 0.5144], [0.5076, 0.5427, 0.4554], [0.1257, 0.3054, 0.6088]]]]], Sub43656), 
LRes61120 = reshape_layer(Sub43656, [2, 3, 9], Res61120), 
LZer3985 = zero_padding2D_layer(Res61120, 2, 0, 2, 0, Zer3985), 
LLay71912 = layer_normalization_layer([[1.8821, 1.6575, 1.9998, 1.237]], 1, 1.318637446421279, Lay71912), 
LRes37178 = reshape_layer(Lay71912, [4, 1], Res37178), 
LRes2171 = reshape_layer(Res37178, [4, 1, 1], Res2171), 
LMax62632 = maximum_layer([[[[[0.7703]]]], [[[[0.4983]]]]], Max62632), 
LDen11523 = dense_layer(Max62632, [[0.2091]],[0.1964], Den11523), 
LZer61813 = zero_padding2D_layer(Den11523, 3, 0, 0, 0, Zer61813), 
LAdd75058 = add_layer([Res2171,Zer61813], Add75058), 
LCon94055 = concatenate_layer([Add75058,[[[[0.8726]], [[0.209]], [[0.8479]], [[0.6144]]]]], 3, Con94055), 
LMul11967 = multiply_layer([[[[[0.3578, 0.872]], [[0.2277, 0.1903]]]], [[[[0.9374, 0.8319]], [[0.5439, 0.3607]]]]], Mul11967), 
LUp_48061 = up_sampling2D_layer(Mul11967, 2, 1, Up_48061), 
LMul630 = multiply_layer([Con94055,Up_48061], Mul630), 
LZer35365 = zero_padding2D_layer(Mul630, 0, 0, 4, 0, Zer35365), 
LCon85632 = concatenate_layer([Zer35365,[[[[0.2216, 0.7283, 0.448, 0.0216, 0.9234, 0.9978, 0.7164], [0.1539, 0.6934, 0.4507, 0.6644, 0.1825, 0.7713, 0.916], [0.2851, 0.7913, 0.9779, 0.0896, 0.0973, 0.3782, 0.1546], [0.5688, 0.995, 0.5736, 0.1777, 0.7763, 0.5947, 0.4873], [0.5155, 0.8168, 0.1671, 0.7397, 0.3534, 0.4687, 0.0694]], [[0.8906, 0.163, 0.716, 0.704, 0.9642, 0.2133, 0.4475], [0.4214, 0.3882, 0.9302, 0.2122, 0.4577, 0.8131, 0.2006], [0.2097, 0.9523, 0.96, 0.6842, 0.0143, 0.3247, 0.8559], [0.9504, 0.8858, 0.8076, 0.5592, 0.7864, 0.9015, 0.731], [0.7518, 0.3399, 0.5621, 0.2308, 0.3816, 0.8504, 0.9668]], [[0.4152, 0.874, 0.6035, 0.1343, 0.6658, 0.3005, 0.3954], [0.5516, 0.6707, 0.2915, 0.237, 0.5746, 0.9921, 0.4109], [0.2438, 0.876, 0.4577, 0.1728, 0.6617, 0.7375, 0.4279], [0.872, 0.758, 0.6168, 0.0439, 0.9277, 0.8726, 0.0869], [0.8861, 0.4907, 0.2676, 0.9389, 0.0851, 0.6559, 0.5421]], [[0.9699, 0.8194, 0.7377, 0.2812, 0.7328, 0.3051, 0.7155], [0.3031, 0.3192, 0.8383, 0.1371, 0.3328, 0.0632, 0.1861], [0.481, 0.1833, 0.9112, 0.6378, 0.2202, 0.56, 0.0817], [0.328, 0.6048, 0.4131, 0.559, 0.0182, 0.4871, 0.3608], [0.9074, 0.3893, 0.3499, 0.0811, 0.8701, 0.0344, 0.0648]]]]], 3, Con85632), 
LMin34767 = minimum_layer([Zer3985,Con85632], Min34767), 
exec_layers([LSub43656,LRes61120,LZer3985,LLay71912,LRes37178,LRes2171,LMax62632,LDen11523,LZer61813,LAdd75058,LCon94055,LMul11967,LUp_48061,LMul630,LZer35365,LCon85632,LMin34767],["Sub43656","Res61120","Zer3985","Lay71912","Res37178","Res2171","Max62632","Den11523","Zer61813","Add75058","Con94055","Mul11967","Up_48061","Mul630","Zer35365","Con85632","Min34767"],Min34767,"Min34767")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0103623, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.2438000, -0.3467000, 0.4147000, 0.0106000, -0.0328000, 0.1390000, -0.0026000], [-0.2117000, 0.0000000, -0.7338000, -0.3518000, 0.5375000, 0.0439000, -0.3331000, -0.1636000, 0.0869000], [0.0319585, -0.3417000, 0.6560000, 0.3327000, -0.0094000, -0.2686000, 0.0851000, 0.0691000, 0.3760000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, -0.1727000, -0.3515000, -0.6495000, -0.1121000, 0.2202000, -0.0324000, -0.6678000], [-0.4723000, 0.0000000, 0.1543000, 0.0158000, -0.0367000, 0.5590000, -0.2694000, 0.1660000, -0.7498000], [-0.2094000, -0.0483000, 0.2538000, -0.4490000, -0.4517000, -0.2048000, 0.1467000, 0.0344000, 0.0182000]]]]

Expected (Unparsed): [[[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[-0.010362263208645972,0,0,0,0,0,0,0,0]],[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0.2438,-0.3467,0.41470000000000007,0.010600000000000002,-0.03280000000000005,0.13899999999999996,-0.0026000000000000467],[-0.2117,0,-0.7338,-0.3518,0.5375,0.0439,-0.3331,-0.16360000000000008,0.0869],[0.03195845508879913,-0.3417,0.6559999999999999,0.33270000000000005,-0.009400000000000075,-0.2686,0.0851,0.0691,0.376]],[[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,-0.1727,-0.3515,-0.6495,-0.11210000000000003,0.2202,-0.032399999999999984,-0.6678],[-0.4723,0,0.1543,0.01579999999999998,-0.03670000000000001,0.559,-0.26940000000000003,0.166,-0.7498],[-0.2094,-0.04830000000000001,0.2538,-0.44900000000000007,-0.4517,-0.20480000000000004,0.14669999999999997,0.0344,0.018199999999999994]]]]

Actual:   [[[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.0103, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0.2438, -0.3467, 0.4147, 0.0106, -0.0328, 0.139, -0.0026], [-0.2117, 0, -0.7338, -0.3518, 0.5375, 0.0439, -0.3331, -0.1636, 0.0869], [0.032, -0.3417, 0.656, 0.3327, -0.0094, -0.2686, 0.0851, 0.0691, 0.376]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -0.1727, -0.3515, -0.6495, -0.1121, 0.2202, -0.0324, -0.6678], [-0.4723, 0, 0.1543, 0.0158, -0.0367, 0.559, -0.2694, 0.166, -0.7498], [-0.2094, -0.0483, 0.2538, -0.449, -0.4517, -0.2048, 0.1467, 0.0344, 0.0182]]]]

Expected: [[[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [-0.0103, 0, 0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0.2438, -0.3467, 0.4148, 0.0107, -0.0328, 0.139, -0.0026], [-0.2117, 0, -0.7338, -0.3518, 0.5375, 0.0439, -0.3331, -0.1636, 0.0869], [0.032, -0.3417, 0.656, 0.3328, -0.0094, -0.2686, 0.0851, 0.0691, 0.376]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -0.1727, -0.3515, -0.6495, -0.1121, 0.2202, -0.0323, -0.6678], [-0.4723, 0, 0.1543, 0.0158, -0.0367, 0.559, -0.2694, 0.166, -0.7498], [-0.2094, -0.0483, 0.2538, -0.449, -0.4517, -0.2048, 0.1467, 0.0344, 0.0182]]]]