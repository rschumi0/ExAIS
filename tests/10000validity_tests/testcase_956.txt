import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min18552 = tf.keras.layers.Input(shape=([1, 1]))
in1Min18552 = tf.keras.layers.Input(shape=([1, 1]))
in0Dep37485 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con88782 = tf.keras.layers.Input(shape=([53]))
in0Up_40416 = tf.keras.layers.Input(shape=([1, 3, 3, 3]))

Min18552 = keras.layers.Minimum(name = 'Min18552', )([in0Min18552,in1Min18552])
Dep37485 = keras.layers.DepthwiseConv2D((2, 1),strides=(1, 1), padding='valid', name = 'Dep37485', )(in0Dep37485)
Sof80539 = keras.layers.Softmax(axis=1, name = 'Sof80539', )(Dep37485)
Res17860 = keras.layers.Reshape((1, 1), name = 'Res17860', )(Sof80539)
Dot30993 = keras.layers.Dot(axes=(1, 2), name = 'Dot30993', )([Min18552,Res17860])
Fla67238 = keras.layers.Flatten(name = 'Fla67238', )(Dot30993)
Con88782 = keras.layers.Concatenate(axis=1, name = 'Con88782', )([Fla67238,in0Con88782])
Up_40416 = keras.layers.UpSampling3D(size=(2, 1, 1), name = 'Up_40416', )(in0Up_40416)
Fla76332 = keras.layers.Flatten(name = 'Fla76332', )(Up_40416)
Min23469 = keras.layers.Minimum(name = 'Min23469', )([Con88782,Fla76332])
model = tf.keras.models.Model(inputs=[in0Min18552,in1Min18552,in0Dep37485,in0Con88782,in0Up_40416], outputs=Min23469)
w = model.get_layer('Dep37485').get_weights() 
w[0] = np.array([[[[0.6009]]], [[[0.4022]]]])
w[1] = np.array([0])
model.get_layer('Dep37485').set_weights(w) 
in0Min18552 = tf.constant([[[0.892]]])
in1Min18552 = tf.constant([[[0.2722]]])
in0Dep37485 = tf.constant([[[[0.6054]], [[0.8037]]]])
in0Con88782 = tf.constant([[0.639, 0.3367, 0.2456, 0.9466, 0.8771, 0.8353, 0.4794, 0.4097, 0.1005, 0.6628, 0.5404, 0.9348, 0.1482, 0.0303, 0.4473, 0.0687, 0.5451, 0.0095, 0.6613, 0.8111, 0.1406, 0.0416, 0.7845, 0.7276, 0.5625, 0.7258, 0.8246, 0.7351, 0.1273, 0.6765, 0.0686, 0.8964, 0.9693, 0.9725, 0.4996, 0.6852, 0.063, 0.4742, 0.8616, 0.8268, 0.4978, 0.0802, 0.9332, 0.0037, 0.8364, 0.8108, 0.3065, 0.4257, 0.6372, 0.464, 0.9825, 0.5079, 0.2549]])
in0Up_40416 = tf.constant([[[[[1.9834, 1.8591, 1.1284], [1.5049, 1.7032, 1.1019], [1.7809, 1.6726, 1.8068]], [[1.8397, 1.2046, 1.8461], [1.4208, 1.442, 1.64], [1.4416, 1.1589, 1.7415]], [[1.1325, 1.382, 1.3992], [1.4608, 1.6519, 1.1013], [1.8179, 1.2853, 1.0805]]]]])
print (np.array2string(model.predict([in0Min18552,in1Min18552,in0Dep37485,in0Con88782,in0Up_40416],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min23469.png')

LMin18552 = minimum_layer([[[[0.892]]], [[[0.2722]]]], Min18552), 
LDep37485 = depthwise_conv2D_layer([[[[0.6054]], [[0.8037]]]], 2, 1,[[[[0.6009]]], [[[0.4022]]]],[0], 1, 1, false, Dep37485), 
LSof80539 = softmax_layer(Dep37485, 1, Sof80539), 
LRes17860 = reshape_layer(Sof80539, [1, 1], Res17860), 
LDot30993 = dot_layer(Min18552,Res17860, 1, 2, Dot30993), 
LFla67238 = flatten_layer(Dot30993, Fla67238), 
LCon88782 = concatenate_layer([Fla67238,[[0.639, 0.3367, 0.2456, 0.9466, 0.8771, 0.8353, 0.4794, 0.4097, 0.1005, 0.6628, 0.5404, 0.9348, 0.1482, 0.0303, 0.4473, 0.0687, 0.5451, 0.0095, 0.6613, 0.8111, 0.1406, 0.0416, 0.7845, 0.7276, 0.5625, 0.7258, 0.8246, 0.7351, 0.1273, 0.6765, 0.0686, 0.8964, 0.9693, 0.9725, 0.4996, 0.6852, 0.063, 0.4742, 0.8616, 0.8268, 0.4978, 0.0802, 0.9332, 0.0037, 0.8364, 0.8108, 0.3065, 0.4257, 0.6372, 0.464, 0.9825, 0.5079, 0.2549]]], 1, Con88782), 
LUp_40416 = up_sampling3D_layer([[[[[1.9834, 1.8591, 1.1284], [1.5049, 1.7032, 1.1019], [1.7809, 1.6726, 1.8068]], [[1.8397, 1.2046, 1.8461], [1.4208, 1.442, 1.64], [1.4416, 1.1589, 1.7415]], [[1.1325, 1.382, 1.3992], [1.4608, 1.6519, 1.1013], [1.8179, 1.2853, 1.0805]]]]], 2, 1, 1, Up_40416), 
LFla76332 = flatten_layer(Up_40416, Fla76332), 
LMin23469 = minimum_layer([Con88782,Fla76332], Min23469), 
exec_layers([LMin18552,LDep37485,LSof80539,LRes17860,LDot30993,LFla67238,LCon88782,LUp_40416,LFla76332,LMin23469],["Min18552","Dep37485","Sof80539","Res17860","Dot30993","Fla67238","Con88782","Up_40416","Fla76332","Min23469"],Min23469,"Min23469")

Actual (Unparsed): [[0.2722000, 0.6390000, 0.3367000, 0.2456000, 0.9466000, 0.8771000, 0.8353000, 0.4794000, 0.4097000, 0.1005000, 0.6628000, 0.5404000, 0.9348000, 0.1482000, 0.0303000, 0.4473000, 0.0687000, 0.5451000, 0.0095000, 0.6613000, 0.8111000, 0.1406000, 0.0416000, 0.7845000, 0.7276000, 0.5625000, 0.7258000, 0.8246000, 0.7351000, 0.1273000, 0.6765000, 0.0686000, 0.8964000, 0.9693000, 0.9725000, 0.4996000, 0.6852000, 0.0630000, 0.4742000, 0.8616000, 0.8268000, 0.4978000, 0.0802000, 0.9332000, 0.0037000, 0.8364000, 0.8108000, 0.3065000, 0.4257000, 0.6372000, 0.4640000, 0.9825000, 0.5079000, 0.2549000]]

Expected (Unparsed): [[0.2722,0.639,0.3367,0.2456,0.9466,0.8771,0.8353,0.4794,0.4097,0.1005,0.6628,0.5404,0.9348,0.1482,0.0303,0.4473,0.0687,0.5451,0.0095,0.6613,0.8111,0.1406,0.0416,0.7845,0.7276,0.5625,0.7258,0.8246,0.7351,0.1273,0.6765,0.0686,0.8964,0.9693,0.9725,0.4996,0.6852,0.063,0.4742,0.8616,0.8268,0.4978,0.0802,0.9332,0.0037,0.8364,0.8108,0.3065,0.4257,0.6372,0.464,0.9825,0.5079,0.2549]]

Actual:   [[0.2722, 0.639, 0.3367, 0.2456, 0.9466, 0.8771, 0.8353, 0.4794, 0.4097, 0.1005, 0.6628, 0.5404, 0.9348, 0.1482, 0.0303, 0.4473, 0.0687, 0.5451, 0.0095, 0.6613, 0.8111, 0.1406, 0.0416, 0.7845, 0.7276, 0.5625, 0.7258, 0.8246, 0.7351, 0.1273, 0.6765, 0.0686, 0.8964, 0.9693, 0.9725, 0.4996, 0.6852, 0.063, 0.4742, 0.8616, 0.8268, 0.4978, 0.0802, 0.9332, 0.0037, 0.8364, 0.8108, 0.3065, 0.4257, 0.6372, 0.464, 0.9825, 0.5079, 0.2549]]

Expected: [[0.2722, 0.639, 0.3367, 0.2456, 0.9466, 0.8771, 0.8353, 0.4794, 0.4097, 0.1005, 0.6628, 0.5404, 0.9348, 0.1482, 0.0303, 0.4473, 0.0687, 0.5451, 0.0095, 0.6613, 0.8111, 0.1406, 0.0416, 0.7845, 0.7276, 0.5625, 0.7258, 0.8246, 0.7351, 0.1273, 0.6765, 0.0686, 0.8964, 0.9693, 0.9725, 0.4996, 0.6852, 0.063, 0.4742, 0.8616, 0.8268, 0.4978, 0.0802, 0.9332, 0.0037, 0.8364, 0.8108, 0.3065, 0.4257, 0.6372, 0.464, 0.9825, 0.5079, 0.2549]]