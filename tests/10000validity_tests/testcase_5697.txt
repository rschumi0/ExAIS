import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot5336 = tf.keras.layers.Input(shape=([3, 3]))
in1Dot5336 = tf.keras.layers.Input(shape=([3, 3]))

Dot5336 = keras.layers.Dot(axes=(2, 2), name = 'Dot5336', )([in0Dot5336,in1Dot5336])
Res48322 = keras.layers.Reshape((3, 3, 1), name = 'Res48322', )(Dot5336)
Con23613 = keras.layers.Conv2D(3, (3, 2),strides=(1, 1), padding='same', dilation_rate=(1, 1), name = 'Con23613', )(Res48322)
model = tf.keras.models.Model(inputs=[in0Dot5336,in1Dot5336], outputs=Con23613)
w = model.get_layer('Con23613').get_weights() 
w[0] = np.array([[[[0.2064, 0.0265, 0.3085]], [[0.5054, 0.6063, 0.2093]]], [[[0.7154, 0.9385, 0.7464]], [[0.1909, 0.9106, 0.1218]]], [[[0.9747, 0.9844, 0.2911]], [[0.6746, 0.48, 0.7848]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con23613').set_weights(w) 
in0Dot5336 = tf.constant([[[0.693, 0.0665, 0.2125], [0.1947, 0.4663, 0.9], [0.7839, 0.2298, 0.2834]]])
in1Dot5336 = tf.constant([[[0.4462, 0.6, 0.4317], [0.5097, 0.3625, 0.3358], [0.0264, 0.7053, 0.5543]]])
print (np.array2string(model.predict([in0Dot5336,in1Dot5336],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con23613.png')

LDot5336 = dot_layer([[[0.693, 0.0665, 0.2125], [0.1947, 0.4663, 0.9], [0.7839, 0.2298, 0.2834]]], [[[0.4462, 0.6, 0.4317], [0.5097, 0.3625, 0.3358], [0.0264, 0.7053, 0.5543]]], 2, 2, Dot5336), 
LRes48322 = reshape_layer(Dot5336, [3, 3, 1], Res48322), 
LCon23613 = conv2D_layer(Res48322, 3, 2,[[[[0.2064, 0.0265, 0.3085]], [[0.5054, 0.6063, 0.2093]]], [[[0.7154, 0.9385, 0.7464]], [[0.1909, 0.9106, 0.1218]]], [[[0.9747, 0.9844, 0.2911]], [[0.6746, 0.48, 0.7848]]]],[0, 0, 0], 1, 1, true, 1, 1, Con23613), 
exec_layers([LDot5336,LRes48322,LCon23613],["Dot5336","Res48322","Con23613"],Con23613,"Con23613")

Actual (Unparsed): [[[[1.5219734, 1.8395543, 1.0512593], [1.4738494, 1.5490997, 1.1769104], [0.9427278, 0.9916311, 0.3790358]], [[1.9514250, 2.3898870, 1.4942719], [1.5448880, 2.1488113, 1.1389658], [0.9648820, 1.1210775, 0.7770552]], [[0.9909354, 1.4647338, 0.8780857], [1.0170895, 1.3720517, 0.8231519], [0.4150457, 0.3410317, 0.5106197]]]]

Expected (Unparsed): [[[[1.521973346177,1.8395543097509996,1.0512592864559998],[1.47384943031,1.549099651161,1.17691040779],[0.9427277863690001,0.9916310994680001,0.379035755877]],[[1.951424929634,2.389886954698,1.494271901334],[1.5448879611859998,2.148811298637,1.138965841518],[0.9648819741420002,1.1210774644830002,0.77705518608]],[[0.990935422261,1.4647337531420002,0.8780857182859999],[1.017089506652,1.3720517393080003,0.8231518628169999],[0.41504573081600005,0.34103166047500005,0.5106196570229999]]]]

Actual:   [[[[1.522, 1.8396, 1.0513], [1.4739, 1.5491, 1.177], [0.9428, 0.9917, 0.3791]], [[1.9515, 2.3899, 1.4943], [1.5449, 2.1489, 1.139], [0.9649, 1.1211, 0.7771]], [[0.991, 1.4648, 0.8781], [1.0171, 1.3721, 0.8232], [0.4151, 0.3411, 0.5107]]]]

Expected: [[[[1.522, 1.8396, 1.0513], [1.4739, 1.5491, 1.177], [0.9428, 0.9917, 0.3791]], [[1.9515, 2.3899, 1.4943], [1.5449, 2.1489, 1.139], [0.9649, 1.1211, 0.7771]], [[0.991, 1.4648, 0.8781], [1.0171, 1.3721, 0.8232], [0.4151, 0.3411, 0.5107]]]]