import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul25306 = tf.keras.layers.Input(shape=([1, 2]))
in1Mul25306 = tf.keras.layers.Input(shape=([1, 2]))
in0Con68329 = tf.keras.layers.Input(shape=([2, 6, 2]))
in0Mul56977 = tf.keras.layers.Input(shape=([1, 1, 2]))
in1Mul56977 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con61825 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Sub88280 = tf.keras.layers.Input(shape=([2, 2, 3]))
in1Sub88280 = tf.keras.layers.Input(shape=([2, 2, 3]))
in0Sub67609 = tf.keras.layers.Input(shape=([2, 3, 2]))
in1Sub67609 = tf.keras.layers.Input(shape=([2, 3, 2]))
in0Glo74715 = tf.keras.layers.Input(shape=([1, 1]))
in0Con30784 = tf.keras.layers.Input(shape=([1]))
in0Con62919 = tf.keras.layers.Input(shape=([34]))

Mul25306 = keras.layers.Multiply(name = 'Mul25306', )([in0Mul25306,in1Mul25306])
Res61662 = keras.layers.Reshape((1, 2, 1), name = 'Res61662', )(Mul25306)
Res1820 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res1820', )(Res61662)
Up_61023 = keras.layers.UpSampling3D(size=(1, 2, 1), name = 'Up_61023', )(Res1820)
Res71851 = keras.layers.Reshape((1, 4, 1), name = 'Res71851', )(Up_61023)
Zer89943 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer89943', )(Res71851)
Con68329 = keras.layers.Concatenate(axis=3, name = 'Con68329', )([Zer89943,in0Con68329])
Mul56977 = keras.layers.Multiply(name = 'Mul56977', )([in0Mul56977,in1Mul56977])
Zer78411 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer78411', )(Mul56977)
Con61825 = keras.layers.Concatenate(axis=3, name = 'Con61825', )([Zer78411,in0Con61825])
Sub88280 = keras.layers.Subtract(name = 'Sub88280', )([in0Sub88280,in1Sub88280])
Max59002 = keras.layers.Maximum(name = 'Max59002', )([Con61825,Sub88280])
Den18695 = keras.layers.Dense(3,name = 'Den18695', )(Max59002)
Zer55889 = keras.layers.ZeroPadding2D(padding=((0, 0), (4, 0)), name = 'Zer55889', )(Den18695)
Min29443 = keras.layers.Minimum(name = 'Min29443', )([Con68329,Zer55889])
Res23959 = keras.layers.Reshape((2, 18), name = 'Res23959', )(Min29443)
Fla41754 = keras.layers.Flatten(name = 'Fla41754', )(Res23959)
Sub67609 = keras.layers.Subtract(name = 'Sub67609', )([in0Sub67609,in1Sub67609])
Sep50557 = keras.layers.SeparableConv2D(2, (1, 3),strides=(2, 2), padding='valid', name = 'Sep50557', )(Sub67609)
Res32958 = keras.layers.Reshape((1, 2), name = 'Res32958', )(Sep50557)
Fla33308 = keras.layers.Flatten(name = 'Fla33308', )(Res32958)
Glo74715 = keras.layers.GlobalMaxPool1D(name = 'Glo74715', )(in0Glo74715)
Con30784 = keras.layers.Concatenate(axis=1, name = 'Con30784', )([Glo74715,in0Con30784])
Sub7512 = keras.layers.Subtract(name = 'Sub7512', )([Fla33308,Con30784])
Con62919 = keras.layers.Concatenate(axis=1, name = 'Con62919', )([Sub7512,in0Con62919])
Add59318 = keras.layers.Add(name = 'Add59318', )([Fla41754,Con62919])
model = tf.keras.models.Model(inputs=[in0Mul25306,in1Mul25306,in0Con68329,in0Mul56977,in1Mul56977,in0Con61825,in0Sub88280,in1Sub88280,in0Sub67609,in1Sub67609,in0Glo74715,in0Con30784,in0Con62919], outputs=Add59318)
w = model.get_layer('Den18695').get_weights() 
w[0] = np.array([[0.3167, 0.7201, 0.0369], [0.9813, 0.653, 0.6962], [0.6557, 0.9845, 0.4587]])
w[1] = np.array([0.2629, 0.0718, 0.3534])
model.get_layer('Den18695').set_weights(w) 
w = model.get_layer('Sep50557').get_weights() 
w[0] = np.array([[[[0.6406], [0.7091]], [[0.661], [0.1786]], [[0.8601], [0.0254]]]])
w[1] = np.array([[[[0.3291, 0.8175], [0.6917, 0.5163]]]])
w[2] = np.array([0, 0])
model.get_layer('Sep50557').set_weights(w) 
in0Mul25306 = tf.constant([[[0.1616, 0.5159]]])
in1Mul25306 = tf.constant([[[0.0555, 0.7022]]])
in0Con68329 = tf.constant([[[[0.3426, 0.6056], [0.7674, 0.947], [0.0939, 0.6957], [0.9833, 0.3916], [0.7097, 0.6562], [0.3717, 0.0837]], [[0.0054, 0.6033], [0.4491, 0.4174], [0.9593, 0.2235], [0.6756, 0.3604], [0.3322, 0.4419], [0.2714, 0.1569]]]])
in0Mul56977 = tf.constant([[[[0.7218, 0.8512]]]])
in1Mul56977 = tf.constant([[[[0.0699, 0.6273]]]])
in0Con61825 = tf.constant([[[[0.8968], [0.0074]], [[0.9348], [0.3353]]]])
in0Sub88280 = tf.constant([[[[0.9352, 0.8296, 0.7326], [0.2247, 0.2505, 0.0297]], [[0.3464, 0.4649, 0.986], [0.9269, 0.4853, 0.0551]]]])
in1Sub88280 = tf.constant([[[[0.9214, 0.1279, 0.307], [0.2138, 0.2518, 0.4553]], [[0.8314, 0.9346, 0.2614], [0.1906, 0.6234, 0.5516]]]])
in0Sub67609 = tf.constant([[[[0.3634, 0.7397], [0.9943, 0.3905], [0.4749, 0.2195]], [[0.0511, 0.0406], [0.0465, 0.9811], [0.6646, 0.3122]]]])
in1Sub67609 = tf.constant([[[[0.4532, 0.8828], [0.7017, 0.2628], [0.8639, 0.2054]], [[0.6743, 0.7634], [0.1575, 0.4621], [0.2919, 0.9584]]]])
in0Glo74715 = tf.constant([[[1.9281]]])
in0Con30784 = tf.constant([[0.4359]])
in0Con62919 = tf.constant([[0.6368, 0.9382, 0.0188, 0.5832, 0.8675, 0.8487, 0.2756, 0.0301, 0.626, 0.3901, 0.2995, 0.5675, 0.6068, 0.2881, 0.6227, 0.5631, 0.9506, 0.0281, 0.274, 0.5511, 0.2648, 0.9804, 0.6925, 0.0652, 0.6035, 0.4494, 0.161, 0.8967, 0.1342, 0.8716, 0.3301, 0.4869, 0.222, 0.9924]])
print (np.array2string(model.predict([in0Mul25306,in1Mul25306,in0Con68329,in0Mul56977,in1Mul56977,in0Con61825,in0Sub88280,in1Sub88280,in0Sub67609,in1Sub67609,in0Glo74715,in0Con30784,in0Con62919],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add59318.png')

LMul25306 = multiply_layer([[[[0.1616, 0.5159]]], [[[0.0555, 0.7022]]]], Mul25306), 
LRes61662 = reshape_layer(Mul25306, [1, 2, 1], Res61662), 
LRes1820 = reshape_layer(Res61662, [1, 2, 1, 1], Res1820), 
LUp_61023 = up_sampling3D_layer(Res1820, 1, 2, 1, Up_61023), 
LRes71851 = reshape_layer(Up_61023, [1, 4, 1], Res71851), 
LZer89943 = zero_padding2D_layer(Res71851, 1, 0, 2, 0, Zer89943), 
LCon68329 = concatenate_layer([Zer89943,[[[[0.3426, 0.6056], [0.7674, 0.947], [0.0939, 0.6957], [0.9833, 0.3916], [0.7097, 0.6562], [0.3717, 0.0837]], [[0.0054, 0.6033], [0.4491, 0.4174], [0.9593, 0.2235], [0.6756, 0.3604], [0.3322, 0.4419], [0.2714, 0.1569]]]]], 3, Con68329), 
LMul56977 = multiply_layer([[[[[0.7218, 0.8512]]]], [[[[0.0699, 0.6273]]]]], Mul56977), 
LZer78411 = zero_padding2D_layer(Mul56977, 1, 0, 1, 0, Zer78411), 
LCon61825 = concatenate_layer([Zer78411,[[[[0.8968], [0.0074]], [[0.9348], [0.3353]]]]], 3, Con61825), 
LSub88280 = subtract_layer([[[[0.9352, 0.8296, 0.7326], [0.2247, 0.2505, 0.0297]], [[0.3464, 0.4649, 0.986], [0.9269, 0.4853, 0.0551]]]], [[[[0.9214, 0.1279, 0.307], [0.2138, 0.2518, 0.4553]], [[0.8314, 0.9346, 0.2614], [0.1906, 0.6234, 0.5516]]]], Sub88280), 
LMax59002 = maximum_layer([Con61825,Sub88280], Max59002), 
LDen18695 = dense_layer(Max59002, [[0.3167, 0.7201, 0.0369], [0.9813, 0.653, 0.6962], [0.6557, 0.9845, 0.4587]],[0.2629, 0.0718, 0.3534], Den18695), 
LZer55889 = zero_padding2D_layer(Den18695, 0, 0, 4, 0, Zer55889), 
LMin29443 = minimum_layer([Con68329,Zer55889], Min29443), 
LRes23959 = reshape_layer(Min29443, [2, 18], Res23959), 
LFla41754 = flatten_layer(Res23959, Fla41754), 
LSub67609 = subtract_layer([[[[0.3634, 0.7397], [0.9943, 0.3905], [0.4749, 0.2195]], [[0.0511, 0.0406], [0.0465, 0.9811], [0.6646, 0.3122]]]], [[[[0.4532, 0.8828], [0.7017, 0.2628], [0.8639, 0.2054]], [[0.6743, 0.7634], [0.1575, 0.4621], [0.2919, 0.9584]]]], Sub67609), 
LSep50557 = separable_conv2D_layer(Sub67609, 1, 3,[[[[[0.6406], [0.7091]], [[0.661], [0.1786]], [[0.8601], [0.0254]]]],[[[[0.3291, 0.8175], [0.6917, 0.5163]]]]],[0, 0], 2, 2, false, Sep50557), 
LRes32958 = reshape_layer(Sep50557, [1, 2], Res32958), 
LFla33308 = flatten_layer(Res32958, Fla33308), 
LGlo74715 = global_max_pool1D_layer([[[1.9281]]], Glo74715), 
LCon30784 = concatenate_layer([Glo74715,[[0.4359]]], 1, Con30784), 
LSub7512 = subtract_layer(Fla33308,Con30784, Sub7512), 
LCon62919 = concatenate_layer([Sub7512,[[0.6368, 0.9382, 0.0188, 0.5832, 0.8675, 0.8487, 0.2756, 0.0301, 0.626, 0.3901, 0.2995, 0.5675, 0.6068, 0.2881, 0.6227, 0.5631, 0.9506, 0.0281, 0.274, 0.5511, 0.2648, 0.9804, 0.6925, 0.0652, 0.6035, 0.4494, 0.161, 0.8967, 0.1342, 0.8716, 0.3301, 0.4869, 0.222, 0.9924]]], 1, Con62919), 
LAdd59318 = add_layer([Fla41754,Con62919], Add59318), 
exec_layers([LMul25306,LRes61662,LRes1820,LUp_61023,LRes71851,LZer89943,LCon68329,LMul56977,LZer78411,LCon61825,LSub88280,LMax59002,LDen18695,LZer55889,LMin29443,LRes23959,LFla41754,LSub67609,LSep50557,LRes32958,LFla33308,LGlo74715,LCon30784,LSub7512,LCon62919,LAdd59318],["Mul25306","Res61662","Res1820","Up_61023","Res71851","Zer89943","Con68329","Mul56977","Zer78411","Con61825","Sub88280","Max59002","Den18695","Zer55889","Min29443","Res23959","Fla41754","Sub67609","Sep50557","Res32958","Fla33308","Glo74715","Con30784","Sub7512","Con62919","Add59318"],Add59318,"Add59318")

Actual (Unparsed): [[-2.0476557, -0.6387639, 0.6368000, 0.9382000, 0.0188000, 0.5832000, 0.8675000, 0.8487000, 0.2756000, 0.0301000, 0.6260000, 0.3901000, 0.2995000, 1.2772000, 1.2630000, 0.2881000, 0.7096344, 0.6468000, 0.9506000, 0.0281000, 0.2740000, 0.5511000, 0.2648000, 0.9804000, 0.6925000, 0.0652000, 0.6035000, 0.4494000, 0.1610000, 0.8967000, 0.4964650, 1.2038000, 0.7720000, 0.8491650, 0.4934000, 1.1493000]]

Expected (Unparsed): [[-2.047655760983,-0.6387639538050001,0.6368,0.9382,0.0188,0.5832,0.8675,0.8487,0.2756,0.0301,0.626,0.3901,0.2995,1.2772000000000001,1.263,0.2881,0.7096343900000001,0.6468,0.9506,0.0281,0.274,0.5511,0.2648,0.9804,0.6925,0.0652,0.6035,0.4494,0.161,0.8967,0.49646498000000006,1.2038,0.772,0.8491649800000001,0.49339999999999995,1.1493]]

Actual:   [[-2.0476, -0.6387, 0.6368, 0.9382, 0.0188, 0.5832, 0.8675, 0.8487, 0.2756, 0.0301, 0.626, 0.3901, 0.2995, 1.2772, 1.263, 0.2881, 0.7097, 0.6468, 0.9506, 0.0281, 0.274, 0.5511, 0.2648, 0.9804, 0.6925, 0.0652, 0.6035, 0.4494, 0.161, 0.8967, 0.4965, 1.2038, 0.772, 0.8492, 0.4934, 1.1493]]

Expected: [[-2.0476, -0.6387, 0.6368, 0.9382, 0.0188, 0.5832, 0.8675, 0.8487, 0.2756, 0.0301, 0.626, 0.3901, 0.2995, 1.2773, 1.263, 0.2881, 0.7097, 0.6468, 0.9506, 0.0281, 0.274, 0.5511, 0.2648, 0.9804, 0.6925, 0.0652, 0.6035, 0.4494, 0.161, 0.8967, 0.4965, 1.2038, 0.772, 0.8492, 0.4934, 1.1493]]