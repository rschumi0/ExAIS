import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Lea49620 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))

Lea49620 = keras.layers.LeakyReLU(alpha=3.168144904963459, name = 'Lea49620', input_shape=(1, 1, 1, 2))(in0Lea49620)
Lay65613 = keras.layers.LayerNormalization(axis=2, epsilon=2.869018485589976, name = 'Lay65613', )(Lea49620)
Res43110 = keras.layers.Reshape((1, 1, 2), name = 'Res43110', )(Lay65613)
Ave42306 = keras.layers.AveragePooling2D(pool_size=(1, 1), name = 'Ave42306', )(Res43110)
Res14684 = keras.layers.Reshape((1, 2), name = 'Res14684', )(Ave42306)
Sep8213 = keras.layers.SeparableConv1D(3, (1),strides=(1), padding='valid', name = 'Sep8213', )(Res14684)
model = tf.keras.models.Model(inputs=[in0Lea49620], outputs=Sep8213)
w = model.get_layer('Sep8213').get_weights() 
w[0] = np.array([[[0.8752], [0.834]]])
w[1] = np.array([[[0.7111, 0.0128, 0.2091], [0.4805, 0.9106, 0.3428]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep8213').set_weights(w) 
in0Lea49620 = tf.constant([[[[[0.669, 0.0445]]]]])
print (np.array2string(model.predict([in0Lea49620],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sep8213.png')

LLea49620 = leaky_relu_layer([[[[[0.669, 0.0445]]]]], 3.168144904963459, Lea49620), 
LLay65613 = layer_normalization_layer(Lea49620, 2, 2.869018485589976, Lay65613), 
LRes43110 = reshape_layer(Lay65613, [1, 1, 2], Res43110), 
LAve42306 = average_pooling2D_layer(Res43110, 1, 1, Ave42306), 
LRes14684 = reshape_layer(Ave42306, [1, 2], Res14684), 
LSep8213 = separable_conv1D_layer(Res14684, 1,[[[[0.8752], [0.834]]],[[[0.7111, 0.0128, 0.2091], [0.4805, 0.9106, 0.3428]]]],[0, 0, 0], 1, false, Sep8213), 
exec_layers([LLea49620,LLay65613,LRes43110,LAve42306,LRes14684,LSep8213],["Lea49620","Lay65613","Res43110","Ave42306","Res14684","Sep8213"],Sep8213,"Sep8213")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0.0,0.0,0.0]]]

Actual:   [[[0, 0, 0]]]

Expected: [[[0, 0, 0]]]