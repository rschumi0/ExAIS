import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min7503 = tf.keras.layers.Input(shape=([1, 2]))
in1Min7503 = tf.keras.layers.Input(shape=([1, 2]))

Min7503 = keras.layers.Minimum(name = 'Min7503', )([in0Min7503,in1Min7503])
Bat69048 = keras.layers.BatchNormalization(axis=2, epsilon=0.5207930313924849,  name = 'Bat69048', )(Min7503)
Fla21386 = keras.layers.Flatten(name = 'Fla21386', )(Bat69048)
Res77335 = keras.layers.Reshape((2, 1), name = 'Res77335', )(Fla21386)
Ave26171 = keras.layers.AveragePooling1D(pool_size=(1), strides=(1), padding='valid', name = 'Ave26171', )(Res77335)
model = tf.keras.models.Model(inputs=[in0Min7503,in1Min7503], outputs=Ave26171)
w = model.get_layer('Bat69048').get_weights() 
w[0] = np.array([0.1, 0.4488])
w[1] = np.array([0.2257, 0.5565])
w[2] = np.array([0.7514, 0.975])
w[3] = np.array([0.7735, 0.215])
model.get_layer('Bat69048').set_weights(w) 
in0Min7503 = tf.constant([[[0.3098, 0.3144]]])
in1Min7503 = tf.constant([[[0.6153, 0.1326]]])
print (np.array2string(model.predict([in0Min7503,in1Min7503],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave26171.png')

LMin7503 = minimum_layer([[[[0.3098, 0.3144]]], [[[0.6153, 0.1326]]]], Min7503), 
LBat69048 = batch_normalization_layer(Min7503, 2, 0.5207930313924849, [0.1, 0.4488], [0.2257, 0.5565], [0.7514, 0.975], [0.7735, 0.215], Bat69048), 
LFla21386 = flatten_layer(Bat69048, Fla21386), 
LRes77335 = reshape_layer(Fla21386, [2, 1], Res77335), 
LAve26171 = average_pooling1D_layer(Res77335, 1, 1, false, Ave26171), 
exec_layers([LMin7503,LBat69048,LFla21386,LRes77335,LAve26171],["Min7503","Bat69048","Fla21386","Res77335","Ave26171"],Ave26171,"Ave26171")

Actual (Unparsed): [[[0.1868838], [0.1157489]]]

Expected (Unparsed): [[[0.18688382311436583],[0.1157489341147172]]]

Actual:   [[[0.1869], [0.1158]]]

Expected: [[[0.1869], [0.1158]]]