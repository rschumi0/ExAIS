import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot47549 = tf.keras.layers.Input(shape=([3]))
in1Dot47549 = tf.keras.layers.Input(shape=([3]))
in0Min46864 = tf.keras.layers.Input(shape=([2, 1]))
in1Min46864 = tf.keras.layers.Input(shape=([2, 1]))
in0Con9789 = tf.keras.layers.Input(shape=([6, 2, 3]))
in0Max21489 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Max21489 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Mul62693 = tf.keras.layers.Input(shape=([1, 2]))
in1Mul62693 = tf.keras.layers.Input(shape=([1, 2]))
in0Cro61025 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con7673 = tf.keras.layers.Input(shape=([6, 2, 3]))

Dot47549 = keras.layers.Dot(axes=(1, 1), name = 'Dot47549', )([in0Dot47549,in1Dot47549])
Res55895 = keras.layers.Reshape((1, 1), name = 'Res55895', )(Dot47549)
Zer78440 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer78440', )(Res55895)
Min46864 = keras.layers.Minimum(name = 'Min46864', )([in0Min46864,in1Min46864])
Mul93424 = keras.layers.Multiply(name = 'Mul93424', )([Zer78440,Min46864])
Res88404 = keras.layers.Reshape((2, 1, 1), name = 'Res88404', )(Mul93424)
Zer66188 = keras.layers.ZeroPadding2D(padding=((4, 0), (1, 0)), name = 'Zer66188', )(Res88404)
Con9789 = keras.layers.Concatenate(axis=3, name = 'Con9789', )([Zer66188,in0Con9789])
Max21489 = keras.layers.Maximum(name = 'Max21489', )([in0Max21489,in1Max21489])
Res72420 = keras.layers.Reshape((2, 2), name = 'Res72420', )(Max21489)
Ave63905 = keras.layers.AveragePooling1D(pool_size=(2), strides=(2), padding='same', name = 'Ave63905', )(Res72420)
Res99737 = keras.layers.Reshape((1, 2, 1), name = 'Res99737', )(Ave63905)
Con9749 = keras.layers.Conv2DTranspose(4, (1, 2),strides=(6, 1), padding='same', name = 'Con9749', )(Res99737)
Min5308 = keras.layers.Minimum(name = 'Min5308', )([Con9789,Con9749])
Mul62693 = keras.layers.Multiply(name = 'Mul62693', )([in0Mul62693,in1Mul62693])
Glo77575 = keras.layers.GlobalMaxPool1D(name = 'Glo77575', )(Mul62693)
Res9601 = keras.layers.Reshape((2, 1), name = 'Res9601', )(Glo77575)
Res48317 = keras.layers.Reshape((2, 1, 1), name = 'Res48317', )(Res9601)
Cro61025 = keras.layers.Cropping2D(cropping=((0, 0), (0, 0)), name = 'Cro61025', )(in0Cro61025)
Lea69853 = keras.layers.LeakyReLU(alpha=0.1798167299875193, name = 'Lea69853', )(Cro61025)
Zer98801 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer98801', )(Lea69853)
Ave3460 = keras.layers.Average(name = 'Ave3460', )([Res48317,Zer98801])
Zer60682 = keras.layers.ZeroPadding2D(padding=((4, 0), (1, 0)), name = 'Zer60682', )(Ave3460)
Con7673 = keras.layers.Concatenate(axis=3, name = 'Con7673', )([Zer60682,in0Con7673])
Add57710 = keras.layers.Add(name = 'Add57710', )([Min5308,Con7673])
model = tf.keras.models.Model(inputs=[in0Dot47549,in1Dot47549,in0Min46864,in1Min46864,in0Con9789,in0Max21489,in1Max21489,in0Mul62693,in1Mul62693,in0Cro61025,in0Con7673], outputs=Add57710)
w = model.get_layer('Con9749').get_weights() 
w[0] = np.array([[[[0.8497], [0.3338], [0.3977], [0.5117]], [[0.0815], [0.4844], [0.4388], [0.4752]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con9749').set_weights(w) 
in0Dot47549 = tf.constant([[0.4859, 0.6371, 0.6505]])
in1Dot47549 = tf.constant([[0.1718, 0.2849, 0.7442]])
in0Min46864 = tf.constant([[[0.4391], [0.0925]]])
in1Min46864 = tf.constant([[[0.8934], [0.2338]]])
in0Con9789 = tf.constant([[[[0.3221, 0.2272, 0.5602], [0.5812, 0.0531, 0.0333]], [[0.7191, 0.7412, 0.1654], [0.6406, 0.6796, 0.4699]], [[0.7837, 0.1878, 0.5608], [0.4237, 0.9078, 0.2964]], [[0.834, 0.5495, 0.8219], [0.0554, 0.4058, 0.9234]], [[0.4477, 0.5863, 0.9374], [0.6956, 0.4903, 0.5736]], [[0.4361, 0.516, 0.4817], [0.8228, 0.3047, 0.0033]]]])
in0Max21489 = tf.constant([[[[0.2142], [0.782]], [[0.6299], [0.2623]]]])
in1Max21489 = tf.constant([[[[0.5377], [0.6783]], [[0.1357], [0.9188]]]])
in0Mul62693 = tf.constant([[[0.1808, 0.8636]]])
in1Mul62693 = tf.constant([[[0.9103, 0.7269]]])
in0Cro61025 = tf.constant([[[[1.8003]]]])
in0Con7673 = tf.constant([[[[0.7151, 0.1582, 0.4644], [0.6142, 0.5101, 0.8501]], [[0.7586, 0.0033, 0.146], [0.3243, 0.7685, 0.4386]], [[0.2136, 0.3162, 0.4709], [0.9748, 0.4005, 0.2918]], [[0.1479, 0.8257, 0.7251], [0.0146, 0.2081, 0.3084]], [[0.2785, 0.7493, 0.6804], [0.8107, 0.2358, 0.26]], [[0.4197, 0.7741, 0.844], [0.6229, 0.9056, 0.058]]]])
print (np.array2string(model.predict([in0Dot47549,in1Dot47549,in0Min46864,in1Min46864,in0Con9789,in0Max21489,in1Max21489,in0Mul62693,in1Mul62693,in0Cro61025,in0Con7673],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add57710.png')

LDot47549 = dot_layer([[0.4859, 0.6371, 0.6505]], [[0.1718, 0.2849, 0.7442]], 1, 1, Dot47549), 
LRes55895 = reshape_layer(Dot47549, [1, 1], Res55895), 
LZer78440 = zero_padding1D_layer(Res55895, 1, 0, Zer78440), 
LMin46864 = minimum_layer([[[[0.4391], [0.0925]]], [[[0.8934], [0.2338]]]], Min46864), 
LMul93424 = multiply_layer([Zer78440,Min46864], Mul93424), 
LRes88404 = reshape_layer(Mul93424, [2, 1, 1], Res88404), 
LZer66188 = zero_padding2D_layer(Res88404, 4, 0, 1, 0, Zer66188), 
LCon9789 = concatenate_layer([Zer66188,[[[[0.3221, 0.2272, 0.5602], [0.5812, 0.0531, 0.0333]], [[0.7191, 0.7412, 0.1654], [0.6406, 0.6796, 0.4699]], [[0.7837, 0.1878, 0.5608], [0.4237, 0.9078, 0.2964]], [[0.834, 0.5495, 0.8219], [0.0554, 0.4058, 0.9234]], [[0.4477, 0.5863, 0.9374], [0.6956, 0.4903, 0.5736]], [[0.4361, 0.516, 0.4817], [0.8228, 0.3047, 0.0033]]]]], 3, Con9789), 
LMax21489 = maximum_layer([[[[[0.2142], [0.782]], [[0.6299], [0.2623]]]], [[[[0.5377], [0.6783]], [[0.1357], [0.9188]]]]], Max21489), 
LRes72420 = reshape_layer(Max21489, [2, 2], Res72420), 
LAve63905 = average_pooling1D_layer(Res72420, 2, 2, true, Ave63905), 
LRes99737 = reshape_layer(Ave63905, [1, 2, 1], Res99737), 
LCon9749 = conv2D_transpose_layer(Res99737, 1, 2,[[[[0.8497], [0.3338], [0.3977], [0.5117]], [[0.0815], [0.4844], [0.4388], [0.4752]]]],[0, 0, 0, 0], 6, 1, true, Con9749), 
LMin5308 = minimum_layer([Con9789,Con9749], Min5308), 
LMul62693 = multiply_layer([[[[0.1808, 0.8636]]], [[[0.9103, 0.7269]]]], Mul62693), 
LGlo77575 = global_max_pool1D_layer(Mul62693, Glo77575), 
LRes9601 = reshape_layer(Glo77575, [2, 1], Res9601), 
LRes48317 = reshape_layer(Res9601, [2, 1, 1], Res48317), 
LCro61025 = cropping2D_layer([[[[1.8003]]]], 0, 0, 0, 0, Cro61025), 
LLea69853 = leaky_relu_layer(Cro61025, 0.1798167299875193, Lea69853), 
LZer98801 = zero_padding2D_layer(Lea69853, 1, 0, 0, 0, Zer98801), 
LAve3460 = average_layer([Res48317,Zer98801], Ave3460), 
LZer60682 = zero_padding2D_layer(Ave3460, 4, 0, 1, 0, Zer60682), 
LCon7673 = concatenate_layer([Zer60682,[[[[0.7151, 0.1582, 0.4644], [0.6142, 0.5101, 0.8501]], [[0.7586, 0.0033, 0.146], [0.3243, 0.7685, 0.4386]], [[0.2136, 0.3162, 0.4709], [0.9748, 0.4005, 0.2918]], [[0.1479, 0.8257, 0.7251], [0.0146, 0.2081, 0.3084]], [[0.2785, 0.7493, 0.6804], [0.8107, 0.2358, 0.26]], [[0.4197, 0.7741, 0.844], [0.6229, 0.9056, 0.058]]]]], 3, Con7673), 
LAdd57710 = add_layer([Min5308,Con7673], Add57710), 
exec_layers([LDot47549,LRes55895,LZer78440,LMin46864,LMul93424,LRes88404,LZer66188,LCon9789,LMax21489,LRes72420,LAve63905,LRes99737,LCon9749,LMin5308,LMul62693,LGlo77575,LRes9601,LRes48317,LCro61025,LLea69853,LZer98801,LAve3460,LZer60682,LCon7673,LAdd57710],["Dot47549","Res55895","Zer78440","Min46864","Mul93424","Res88404","Zer66188","Con9789","Max21489","Res72420","Ave63905","Res99737","Con9749","Min5308","Mul62693","Glo77575","Res9601","Res48317","Cro61025","Lea69853","Zer98801","Ave3460","Zer60682","Con7673","Add57710"],Add57710,"Add57710")

Actual (Unparsed): [[[[0.0000000, 0.9099724, 0.3854000, 0.7631304], [0.0000000, 1.1808562, 0.5632000, 0.8834000]], [[0.0000000, 0.7586000, 0.0033000, 0.1460000], [0.0000000, 0.3243000, 0.7685000, 0.4386000]], [[0.0000000, 0.2136000, 0.3162000, 0.4709000], [0.0000000, 0.9748000, 0.4005000, 0.2918000]], [[0.0000000, 0.1479000, 0.8257000, 0.7251000], [0.0000000, 0.0146000, 0.2081000, 0.3084000]], [[0.0000000, 0.2785000, 0.7493000, 0.6804000], [0.0822911, 0.8107000, 0.2358000, 0.2600000]], [[0.0000000, 0.4197000, 0.7741000, 0.8440000], [1.2140254, 0.6229000, 0.9056000, 0.0580000]]]]

Expected (Unparsed): [[[[0,0.90997244,0.3854,0.76313046],[0,1.1808562399999998,0.5632,0.8834]],[[0,0.7586,0.0033,0.146],[0,0.3243,0.7685,0.4386]],[[0,0.2136,0.3162,0.4709],[0,0.9748,0.4005,0.2918]],[[0,0.1479,0.8257,0.7251],[0,0.0146,0.2081,0.3084]],[[0,0.2785,0.7493,0.6804],[0.08229112,0.8107,0.2358,0.26]],[[0,0.4197,0.7741,0.844],[1.21402542,0.6229,0.9056,0.058]]]]

Actual:   [[[[0, 0.91, 0.3854, 0.7632], [0, 1.1809, 0.5632, 0.8834]], [[0, 0.7586, 0.0033, 0.146], [0, 0.3243, 0.7685, 0.4386]], [[0, 0.2136, 0.3162, 0.4709], [0, 0.9748, 0.4005, 0.2918]], [[0, 0.1479, 0.8257, 0.7251], [0, 0.0146, 0.2081, 0.3084]], [[0, 0.2785, 0.7493, 0.6804], [0.0823, 0.8107, 0.2358, 0.26]], [[0, 0.4197, 0.7741, 0.844], [1.2141, 0.6229, 0.9056, 0.058]]]]

Expected: [[[[0, 0.91, 0.3854, 0.7632], [0, 1.1809, 0.5632, 0.8834]], [[0, 0.7586, 0.0033, 0.146], [0, 0.3243, 0.7685, 0.4386]], [[0, 0.2136, 0.3162, 0.4709], [0, 0.9748, 0.4005, 0.2918]], [[0, 0.1479, 0.8257, 0.7251], [0, 0.0146, 0.2081, 0.3084]], [[0, 0.2785, 0.7493, 0.6804], [0.0823, 0.8107, 0.2358, 0.26]], [[0, 0.4197, 0.7741, 0.844], [1.2141, 0.6229, 0.9056, 0.058]]]]