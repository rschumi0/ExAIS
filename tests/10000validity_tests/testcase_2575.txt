import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro44293 = tf.keras.layers.Input(shape=([3, 3, 1]))
in0Con32497 = tf.keras.layers.Input(shape=([2, 1]))
in0Mul30589 = tf.keras.layers.Input(shape=([2, 2]))
in1Mul30589 = tf.keras.layers.Input(shape=([2, 2]))
in0Lea18165 = tf.keras.layers.Input(shape=([2, 2, 1]))

Cro44293 = keras.layers.Cropping2D(cropping=((1, 0), (2, 0)), name = 'Cro44293', )(in0Cro44293)
Res48650 = keras.layers.Reshape((2, 1), name = 'Res48650', )(Cro44293)
Con32497 = keras.layers.Concatenate(axis=2, name = 'Con32497', )([Res48650,in0Con32497])
Mul30589 = keras.layers.Multiply(name = 'Mul30589', )([in0Mul30589,in1Mul30589])
Lay7512 = keras.layers.LayerNormalization(axis=2, epsilon=1.2523605501591355, name = 'Lay7512', )(Mul30589)
Add29918 = keras.layers.Add(name = 'Add29918', )([Con32497,Lay7512])
Sim60154 = keras.layers.SimpleRNN(2,name = 'Sim60154', )(Add29918)
Res77635 = keras.layers.Reshape((2, 1), name = 'Res77635', )(Sim60154)
Res24392 = keras.layers.Reshape((2, 1, 1), name = 'Res24392', )(Res77635)
Zer69125 = keras.layers.ZeroPadding2D(padding=((0, 0), (3, 0)), name = 'Zer69125', )(Res24392)
Lea18165 = keras.layers.LeakyReLU(alpha=8.502803341479016, name = 'Lea18165', input_shape=(2, 2, 1))(in0Lea18165)
Up_56012 = keras.layers.UpSampling2D(size=(1, 2), name = 'Up_56012', )(Lea18165)
Add17015 = keras.layers.Add(name = 'Add17015', )([Zer69125,Up_56012])
model = tf.keras.models.Model(inputs=[in0Cro44293,in0Con32497,in0Mul30589,in1Mul30589,in0Lea18165], outputs=Add17015)
w = model.get_layer('Sim60154').get_weights() 
w[0] = np.array([[9, 1], [5, 10]])
w[1] = np.array([[7, 4], [10, 5]])
w[2] = np.array([3, 10])
model.get_layer('Sim60154').set_weights(w) 
in0Cro44293 = tf.constant([[[[1.145], [1.579], [1.1202]], [[1.0019], [1.7186], [1.0171]], [[1.1728], [1.3843], [1.5041]]]])
in0Con32497 = tf.constant([[[0.5782], [0.0385]]])
in0Mul30589 = tf.constant([[[0.3239, 0.3601], [0.1321, 0.6615]]])
in1Mul30589 = tf.constant([[[0.7156, 0.745], [0.8255, 0.1876]]])
in0Lea18165 = tf.constant([[[[0.1317], [0.21]], [[0.2665], [0.0625]]]])
print (np.array2string(model.predict([in0Cro44293,in0Con32497,in0Mul30589,in1Mul30589,in0Lea18165],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add17015.png')

LCro44293 = cropping2D_layer([[[[1.145], [1.579], [1.1202]], [[1.0019], [1.7186], [1.0171]], [[1.1728], [1.3843], [1.5041]]]], 1, 0, 2, 0, Cro44293), 
LRes48650 = reshape_layer(Cro44293, [2, 1], Res48650), 
LCon32497 = concatenate_layer([Res48650,[[[0.5782], [0.0385]]]], 2, Con32497), 
LMul30589 = multiply_layer([[[[0.3239, 0.3601], [0.1321, 0.6615]]], [[[0.7156, 0.745], [0.8255, 0.1876]]]], Mul30589), 
LLay7512 = layer_normalization_layer(Mul30589, 2, 1.2523605501591355, Lay7512), 
LAdd29918 = add_layer([Con32497,Lay7512], Add29918), 
LSim60154 = simple_rnn_layer(Add29918,[[9, 1], [5, 10]],[[7, 4], [10, 5]],[3, 10], Sim60154), 
LRes77635 = reshape_layer(Sim60154, [2, 1], Res77635), 
LRes24392 = reshape_layer(Res77635, [2, 1, 1], Res24392), 
LZer69125 = zero_padding2D_layer(Res24392, 0, 0, 3, 0, Zer69125), 
LLea18165 = leaky_relu_layer([[[[0.1317], [0.21]], [[0.2665], [0.0625]]]], 8.502803341479016, Lea18165), 
LUp_56012 = up_sampling2D_layer(Lea18165, 1, 2, Up_56012), 
LAdd17015 = add_layer([Zer69125,Up_56012], Add17015), 
exec_layers([LCro44293,LRes48650,LCon32497,LMul30589,LLay7512,LAdd29918,LSim60154,LRes77635,LRes24392,LZer69125,LLea18165,LUp_56012,LAdd17015],["Cro44293","Res48650","Con32497","Mul30589","Lay7512","Add29918","Sim60154","Res77635","Res24392","Zer69125","Lea18165","Up_56012","Add17015"],Add17015,"Add17015")

Actual (Unparsed): [[[[0.1317000], [0.1317000], [0.2100000], [1.2100000]], [[0.2665000], [0.2665000], [0.0625000], [1.0625000]]]]

Expected (Unparsed): [[[[0.1317],[0.1317],[0.21],[1.21]],[[0.2665],[0.2665],[0.0625],[1.0625]]]]

Actual:   [[[[0.1317], [0.1317], [0.21], [1.21]], [[0.2665], [0.2665], [0.0625], [1.0625]]]]

Expected: [[[[0.1317], [0.1317], [0.21], [1.21]], [[0.2665], [0.2665], [0.0625], [1.0625]]]]