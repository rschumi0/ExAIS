import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo52253 = tf.keras.layers.Input(shape=([2, 2, 1, 1]))
in0Den55420 = tf.keras.layers.Input(shape=([5, 5, 2]))
in0Sub24698 = tf.keras.layers.Input(shape=([3, 3]))
in1Sub24698 = tf.keras.layers.Input(shape=([3, 3]))
in0Con49709 = tf.keras.layers.Input(shape=([5, 2]))

Glo52253 = keras.layers.GlobalMaxPool3D(name = 'Glo52253', )(in0Glo52253)
Res67765 = keras.layers.Reshape((1, 1), name = 'Res67765', )(Glo52253)
Res26037 = keras.layers.Reshape((1, 1, 1), name = 'Res26037', )(Res67765)
Zer65699 = keras.layers.ZeroPadding2D(padding=((4, 0), (4, 0)), name = 'Zer65699', )(Res26037)
Den55420 = keras.layers.Dense(1,name = 'Den55420', )(in0Den55420)
Mul86079 = keras.layers.Multiply(name = 'Mul86079', )([Zer65699,Den55420])
ReL95743 = keras.layers.ReLU(max_value=7.636300570201787, negative_slope=1.2218348832380053, threshold=5.95983451139217, name = 'ReL95743', )(Mul86079)
Res66983 = keras.layers.Reshape((5, 5), name = 'Res66983', )(ReL95743)
Sub24698 = keras.layers.Subtract(name = 'Sub24698', )([in0Sub24698,in1Sub24698])
Zer74810 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer74810', )(Sub24698)
Con49709 = keras.layers.Concatenate(axis=2, name = 'Con49709', )([Zer74810,in0Con49709])
Mul9683 = keras.layers.Multiply(name = 'Mul9683', )([Res66983,Con49709])
Cro96134 = keras.layers.Cropping1D(cropping=((0, 0)), name = 'Cro96134', )(Mul9683)
model = tf.keras.models.Model(inputs=[in0Glo52253,in0Den55420,in0Sub24698,in1Sub24698,in0Con49709], outputs=Cro96134)
w = model.get_layer('Den55420').get_weights() 
w[0] = np.array([[0.6838], [0.2971]])
w[1] = np.array([0.8345])
model.get_layer('Den55420').set_weights(w) 
in0Glo52253 = tf.constant([[[[[1.1765]], [[1.1652]]], [[[1.5282]], [[1.3559]]]]])
in0Den55420 = tf.constant([[[[0.9052, 0.4771], [0.7802, 0.4576], [0.2901, 0.0671], [0.5985, 0.8054], [0.2266, 0.7602]], [[0.2047, 0.0102], [0.5996, 0.2171], [0.194, 0.3405], [0.7179, 0.2843], [0.1737, 0.4078]], [[0.0162, 0.4725], [0.5042, 0.8259], [0.6545, 0.6083], [0.31, 0.9939], [0.7675, 0.0206]], [[0.7609, 0.3022], [0.8937, 0.8472], [0.5996, 0.6106], [0.5503, 0.1768], [0.0329, 0.8064]], [[0.0085, 0.7778], [0.394, 0.613], [0.0729, 0.1078], [0.4399, 0.5931], [0.0713, 0.1454]]]])
in0Sub24698 = tf.constant([[[0.7454, 0.464, 0.3195], [0.3431, 0.4277, 0.4282], [0.0443, 0.6582, 0.3459]]])
in1Sub24698 = tf.constant([[[0.2101, 0.1173, 0.1882], [0.0009, 0.8848, 0.9818], [0.41, 0.5896, 0.3898]]])
in0Con49709 = tf.constant([[[0.986, 0.2788], [0.1611, 0.6817], [0.0054, 0.1218], [0.2003, 0.868], [0.2359, 0.9187]]])
print (np.array2string(model.predict([in0Glo52253,in0Den55420,in0Sub24698,in1Sub24698,in0Con49709],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Cro96134.png')

LGlo52253 = global_max_pool3D_layer([[[[[1.1765]], [[1.1652]]], [[[1.5282]], [[1.3559]]]]], Glo52253), 
LRes67765 = reshape_layer(Glo52253, [1, 1], Res67765), 
LRes26037 = reshape_layer(Res67765, [1, 1, 1], Res26037), 
LZer65699 = zero_padding2D_layer(Res26037, 4, 0, 4, 0, Zer65699), 
LDen55420 = dense_layer([[[[0.9052, 0.4771], [0.7802, 0.4576], [0.2901, 0.0671], [0.5985, 0.8054], [0.2266, 0.7602]], [[0.2047, 0.0102], [0.5996, 0.2171], [0.194, 0.3405], [0.7179, 0.2843], [0.1737, 0.4078]], [[0.0162, 0.4725], [0.5042, 0.8259], [0.6545, 0.6083], [0.31, 0.9939], [0.7675, 0.0206]], [[0.7609, 0.3022], [0.8937, 0.8472], [0.5996, 0.6106], [0.5503, 0.1768], [0.0329, 0.8064]], [[0.0085, 0.7778], [0.394, 0.613], [0.0729, 0.1078], [0.4399, 0.5931], [0.0713, 0.1454]]]], [[0.6838], [0.2971]],[0.8345], Den55420), 
LMul86079 = multiply_layer([Zer65699,Den55420], Mul86079), 
LReL95743 = relu_layer(Mul86079, 7.636300570201787, 1.2218348832380053, 5.95983451139217, ReL95743), 
LRes66983 = reshape_layer(ReL95743, [5, 5], Res66983), 
LSub24698 = subtract_layer([[[0.7454, 0.464, 0.3195], [0.3431, 0.4277, 0.4282], [0.0443, 0.6582, 0.3459]]], [[[0.2101, 0.1173, 0.1882], [0.0009, 0.8848, 0.9818], [0.41, 0.5896, 0.3898]]], Sub24698), 
LZer74810 = zero_padding1D_layer(Sub24698, 2, 0, Zer74810), 
LCon49709 = concatenate_layer([Zer74810,[[[0.986, 0.2788], [0.1611, 0.6817], [0.0054, 0.1218], [0.2003, 0.868], [0.2359, 0.9187]]]], 2, Con49709), 
LMul9683 = multiply_layer([Res66983,Con49709], Mul9683), 
LCro96134 = cropping1D_layer(Mul9683, 0, 0, Cro96134), 
exec_layers([LGlo52253,LRes67765,LRes26037,LZer65699,LDen55420,LMul86079,LReL95743,LRes66983,LSub24698,LZer74810,LCon49709,LMul9683,LCro96134],["Glo52253","Res67765","Res26037","Zer65699","Den55420","Mul86079","ReL95743","Res66983","Sub24698","Zer74810","Con49709","Mul9683","Cro96134"],Cro96134,"Cro96134")

Actual (Unparsed): [[[-0.0000000, -0.0000000, -0.0000000, -7.1799866, -2.0302032], [-0.0000000, -0.0000000, -0.0000000, -1.1731195, -4.9640941], [-3.8980192, -2.5246463, -0.9561179, -0.0393224, -0.8869395], [-2.4918778, 3.3285719, 4.0312786, -1.4585713, -6.3207182], [2.6630031, -0.4995406, 0.3196770, -1.7178082, -5.1006706]]]

Expected (Unparsed): [[[-0.0,-0.0,-0.0,-7.17998663248386,-2.0302031167712986],[-0.0,-0.0,-0.0,-1.173119519769929,-4.964094206251772],[-3.8980191119357097,-2.524646415296303,-0.9561178953804573,-0.03932244200346131,-0.8869395251891828],[-2.4918777136267516,3.3285718962559563,4.031278498725218,-1.4585713209802407,-6.320718455371187],[2.6630031556788514,-0.49954065211804544,0.3196768896207317,-1.7178081608549114,-5.100670783134127]]]

Actual:   [[[-0, -0, -0, -7.1799, -2.0302], [-0, -0, -0, -1.1731, -4.964], [-3.898, -2.5246, -0.9561, -0.0393, -0.8869], [-2.4918, 3.3286, 4.0313, -1.4585, -6.3207], [2.6631, -0.4995, 0.3197, -1.7178, -5.1006]]]

Expected: [[[-0, -0, -0, -7.1799, -2.0302], [-0, -0, -0, -1.1731, -4.964], [-3.898, -2.5246, -0.9561, -0.0393, -0.8869], [-2.4918, 3.3286, 4.0313, -1.4585, -6.3207], [2.6631, -0.4995, 0.3197, -1.7178, -5.1006]]]