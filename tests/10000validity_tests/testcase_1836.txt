import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max29080 = tf.keras.layers.Input(shape=([2, 1]))

Max29080 = keras.layers.MaxPool1D(pool_size=(1), name = 'Max29080', )(in0Max29080)
Res65881 = keras.layers.Reshape((2, 1, 1), name = 'Res65881', )(Max29080)
Max9681 = keras.layers.MaxPool2D(pool_size=(1, 1), name = 'Max9681', )(Res65881)
Res99461 = keras.layers.Reshape((2, 1), name = 'Res99461', )(Max9681)
Loc66902 = keras.layers.LocallyConnected1D(4, (1),strides=(1), name = 'Loc66902', )(Res99461)
model = tf.keras.models.Model(inputs=[in0Max29080], outputs=Loc66902)
w = model.get_layer('Loc66902').get_weights() 
w[0] = np.array([[[0.7955, 0.2421, 0.3001, 0.8837]], [[0.9595, 0.6281, 0.3367, 0.8186]]])
w[1] = np.array([[0, 0, 0, 0], [0, 0, 0, 0]])
model.get_layer('Loc66902').set_weights(w) 
in0Max29080 = tf.constant([[[1.4228], [1.8924]]])
print (np.array2string(model.predict([in0Max29080],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Loc66902.png')

LMax29080 = max_pool1D_layer([[[1.4228], [1.8924]]], 1, Max29080), 
LRes65881 = reshape_layer(Max29080, [2, 1, 1], Res65881), 
LMax9681 = max_pool2D_layer(Res65881, 1, 1, Max9681), 
LRes99461 = reshape_layer(Max9681, [2, 1], Res99461), 
LLoc66902 = locally_connected1D_layer(Res99461, 1,[[[0.7955, 0.2421, 0.3001, 0.8837]], [[0.9595, 0.6281, 0.3367, 0.8186]]],[[0, 0, 0, 0], [0, 0, 0, 0]], 1, Loc66902), 
exec_layers([LMax29080,LRes65881,LMax9681,LRes99461,LLoc66902],["Max29080","Res65881","Max9681","Res99461","Loc66902"],Loc66902,"Loc66902")

Actual (Unparsed): [[[1.1318374, 0.3444599, 0.4269823, 1.2573283], [1.8157578, 1.1886165, 0.6371711, 1.5491187]]]

Expected (Unparsed): [[[1.1318374,0.34445988000000005,0.42698228,1.25732836],[1.8157578,1.18861644,0.63717108,1.54911864]]]

Actual:   [[[1.1319, 0.3445, 0.427, 1.2574], [1.8158, 1.1887, 0.6372, 1.5492]]]

Expected: [[[1.1319, 0.3445, 0.427, 1.2574], [1.8158, 1.1887, 0.6372, 1.5492]]]