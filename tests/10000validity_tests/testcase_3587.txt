import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min71759 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Min71759 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con50715 = tf.keras.layers.Input(shape=([3, 5, 3, 2]))
in0Mas4742 = tf.keras.layers.Input(shape=([3, 2, 1]))
in0Con78700 = tf.keras.layers.Input(shape=([2, 3, 2, 2]))
in0Sub67512 = tf.keras.layers.Input(shape=([2, 3, 2, 3]))
in1Sub67512 = tf.keras.layers.Input(shape=([2, 3, 2, 3]))

Min71759 = keras.layers.Minimum(name = 'Min71759', )([in0Min71759,in1Min71759])
Res78427 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res78427', )(Min71759)
Cro56098 = keras.layers.Cropping3D(cropping=((0, 0), (0, 0), (0, 0)), name = 'Cro56098', )(Res78427)
Res18301 = keras.layers.Reshape((1, 1, 1), name = 'Res18301', )(Cro56098)
Res63984 = keras.layers.Reshape((1, 1), name = 'Res63984', )(Res18301)
LST11744 = keras.layers.LSTM(3,recurrent_activation='sigmoid', name = 'LST11744', )(Res63984)
Res12037 = keras.layers.Reshape((3, 1), name = 'Res12037', )(LST11744)
Res85 = keras.layers.Reshape((3, 1, 1), name = 'Res85', )(Res12037)
Res27077 = keras.layers.Reshape((3, 1, 1, 1), name = 'Res27077', )(Res85)
Zer9593 = keras.layers.ZeroPadding3D(padding=((0, 0), (4, 0), (2, 0)), name = 'Zer9593', )(Res27077)
Con50715 = keras.layers.Concatenate(axis=4, name = 'Con50715', )([Zer9593,in0Con50715])
Mas4742 = keras.layers.Masking(mask_value=2, name = 'Mas4742', )(in0Mas4742)
Res91136 = keras.layers.Reshape((3, 2, 1, 1), name = 'Res91136', )(Mas4742)
Glo44741 = keras.layers.GlobalMaxPool3D(name = 'Glo44741', )(Res91136)
Res81809 = keras.layers.Reshape((1, 1), name = 'Res81809', )(Glo44741)
Res33327 = keras.layers.Reshape((1, 1, 1), name = 'Res33327', )(Res81809)
Res86652 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res86652', )(Res33327)
Zer40959 = keras.layers.ZeroPadding3D(padding=((1, 0), (2, 0), (1, 0)), name = 'Zer40959', )(Res86652)
Con78700 = keras.layers.Concatenate(axis=4, name = 'Con78700', )([Zer40959,in0Con78700])
Sub67512 = keras.layers.Subtract(name = 'Sub67512', )([in0Sub67512,in1Sub67512])
Thr6699 = keras.layers.ThresholdedReLU(theta=2.1856208589234214, name = 'Thr6699', )(Sub67512)
Add91834 = keras.layers.Add(name = 'Add91834', )([Con78700,Thr6699])
Zer95704 = keras.layers.ZeroPadding3D(padding=((1, 0), (2, 0), (1, 0)), name = 'Zer95704', )(Add91834)
Mul62040 = keras.layers.Multiply(name = 'Mul62040', )([Con50715,Zer95704])
model = tf.keras.models.Model(inputs=[in0Min71759,in1Min71759,in0Con50715,in0Mas4742,in0Con78700,in0Sub67512,in1Sub67512], outputs=Mul62040)
w = model.get_layer('LST11744').get_weights() 
w[0] = np.array([[2, 8, 7, 1, 1, 2, 4, 10, 5, 2, 2, 4]])
w[1] = np.array([[7, 2, 4, 10, 5, 4, 3, 6, 1, 1, 5, 7], [6, 9, 3, 3, 3, 7, 3, 5, 4, 4, 7, 7], [7, 10, 10, 5, 9, 10, 5, 3, 7, 10, 3, 5]])
w[2] = np.array([3, 6, 6, 8, 1, 8, 4, 4, 10, 5, 4, 3])
model.get_layer('LST11744').set_weights(w) 
in0Min71759 = tf.constant([[[[0.1727]]]])
in1Min71759 = tf.constant([[[[0.2736]]]])
in0Con50715 = tf.constant([[[[[0.911, 0.5047], [0.075, 0.5631], [0.577, 0.0142]], [[0.8407, 0.7696], [0.9923, 0.2024], [0.8664, 0.5662]], [[0.324, 0.7267], [0.0196, 0.8289], [0.1107, 0.4323]], [[0.0941, 0.1653], [0.7013, 0.8042], [0.8528, 0.7112]], [[0.0678, 0.022], [0.4857, 0.7317], [0.0763, 0.6755]]], [[[0.5135, 0.2356], [0.1346, 0.7518], [0.0085, 0.002]], [[0.2402, 0.5939], [0.6332, 0.6516], [0.8485, 0.1482]], [[0.4022, 0.6476], [0.6501, 0.9676], [0.2636, 0.4073]], [[0.3029, 0.1181], [0.5634, 0.0228], [0.3995, 0.3472]], [[0.2091, 0.4419], [0.4643, 0.6182], [0.8809, 0.3472]]], [[[0.5781, 0.3862], [0.9513, 0.3823], [0.3013, 0.7987]], [[0.869, 0.824], [0.9302, 0.3412], [0.6401, 0.2731]], [[0.7627, 0.3138], [0.6956, 0.4501], [0.9716, 0.9282]], [[0.8721, 0.7169], [0.8868, 0.7404], [0.4547, 0.5207]], [[0.9766, 0.6012], [0.2299, 0.5569], [0.5799, 0.2956]]]]])
in0Mas4742 = tf.constant([[[[1.9205], [1.4905]], [[1.943], [1.5167]], [[1.5097], [1.2959]]]])
in0Con78700 = tf.constant([[[[[0.7741, 0.4283], [0.4, 0.8725]], [[0.4833, 0.0802], [0.4032, 0.5079]], [[0.9552, 0.9724], [0.3525, 0.6866]]], [[[0.9883, 0.7067], [0.9998, 0.1416]], [[0.1207, 0.9631], [0.3702, 0.9536]], [[0.8796, 0.8315], [0.486, 0.4176]]]]])
in0Sub67512 = tf.constant([[[[[0.0802, 0.5911, 0.2517], [0.3341, 0.0516, 0.148]], [[0.6155, 0.8035, 0.4799], [0.2539, 0.4464, 0.7252]], [[0.0489, 0.0469, 0.6602], [0.292, 0.8022, 0.8042]]], [[[0.135, 0.6557, 0.2739], [0.4891, 0.1536, 0.9071]], [[0.2933, 0.1012, 0.4266], [0.1543, 0.4976, 0.4475]], [[0.6766, 0.2825, 0.5544], [0.2706, 0.0026, 0.1939]]]]])
in1Sub67512 = tf.constant([[[[[0.8466, 0.0232, 0.7581], [0.0665, 0.9063, 0.963]], [[0.4742, 0.447, 0.1952], [0.656, 0.4407, 0.7979]], [[0.9266, 0.4233, 0.9141], [0.4556, 0.4974, 0.7426]]], [[[0.5683, 0.8245, 0.7576], [0.1272, 0.7215, 0.0327]], [[0.7826, 0.5413, 0.0814], [0.2035, 0.0327, 0.9867]], [[0.232, 0.9606, 0.7868], [0.4925, 0.8562, 0.7772]]]]])
print (np.array2string(model.predict([in0Min71759,in1Min71759,in0Con50715,in0Mas4742,in0Con78700,in0Sub67512,in1Sub67512],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul62040.png')

LMin71759 = minimum_layer([[[[[0.1727]]]], [[[[0.2736]]]]], Min71759), 
LRes78427 = reshape_layer(Min71759, [1, 1, 1, 1], Res78427), 
LCro56098 = cropping3D_layer(Res78427, 0, 0, 0, 0, 0, 0, Cro56098), 
LRes18301 = reshape_layer(Cro56098, [1, 1, 1], Res18301), 
LRes63984 = reshape_layer(Res18301, [1, 1], Res63984), 
LLST11744 = lstm_layer(Res63984,[[2, 8, 7, 1, 1, 2, 4, 10, 5, 2, 2, 4]],[[7, 2, 4, 10, 5, 4, 3, 6, 1, 1, 5, 7], [6, 9, 3, 3, 3, 7, 3, 5, 4, 4, 7, 7], [7, 10, 10, 5, 9, 10, 5, 3, 7, 10, 3, 5]],[3, 6, 6, 8, 1, 8, 4, 4, 10, 5, 4, 3], LST11744), 
LRes12037 = reshape_layer(LST11744, [3, 1], Res12037), 
LRes85 = reshape_layer(Res12037, [3, 1, 1], Res85), 
LRes27077 = reshape_layer(Res85, [3, 1, 1, 1], Res27077), 
LZer9593 = zero_padding3D_layer(Res27077, 0, 0, 4, 0, 2, 0, Zer9593), 
LCon50715 = concatenate_layer([Zer9593,[[[[[0.911, 0.5047], [0.075, 0.5631], [0.577, 0.0142]], [[0.8407, 0.7696], [0.9923, 0.2024], [0.8664, 0.5662]], [[0.324, 0.7267], [0.0196, 0.8289], [0.1107, 0.4323]], [[0.0941, 0.1653], [0.7013, 0.8042], [0.8528, 0.7112]], [[0.0678, 0.022], [0.4857, 0.7317], [0.0763, 0.6755]]], [[[0.5135, 0.2356], [0.1346, 0.7518], [0.0085, 0.002]], [[0.2402, 0.5939], [0.6332, 0.6516], [0.8485, 0.1482]], [[0.4022, 0.6476], [0.6501, 0.9676], [0.2636, 0.4073]], [[0.3029, 0.1181], [0.5634, 0.0228], [0.3995, 0.3472]], [[0.2091, 0.4419], [0.4643, 0.6182], [0.8809, 0.3472]]], [[[0.5781, 0.3862], [0.9513, 0.3823], [0.3013, 0.7987]], [[0.869, 0.824], [0.9302, 0.3412], [0.6401, 0.2731]], [[0.7627, 0.3138], [0.6956, 0.4501], [0.9716, 0.9282]], [[0.8721, 0.7169], [0.8868, 0.7404], [0.4547, 0.5207]], [[0.9766, 0.6012], [0.2299, 0.5569], [0.5799, 0.2956]]]]]], 4, Con50715), 
LMas4742 = masking_layer([[[[1.9205], [1.4905]], [[1.943], [1.5167]], [[1.5097], [1.2959]]]], 2, Mas4742), 
LRes91136 = reshape_layer(Mas4742, [3, 2, 1, 1], Res91136), 
LGlo44741 = global_max_pool3D_layer(Res91136, Glo44741), 
LRes81809 = reshape_layer(Glo44741, [1, 1], Res81809), 
LRes33327 = reshape_layer(Res81809, [1, 1, 1], Res33327), 
LRes86652 = reshape_layer(Res33327, [1, 1, 1, 1], Res86652), 
LZer40959 = zero_padding3D_layer(Res86652, 1, 0, 2, 0, 1, 0, Zer40959), 
LCon78700 = concatenate_layer([Zer40959,[[[[[0.7741, 0.4283], [0.4, 0.8725]], [[0.4833, 0.0802], [0.4032, 0.5079]], [[0.9552, 0.9724], [0.3525, 0.6866]]], [[[0.9883, 0.7067], [0.9998, 0.1416]], [[0.1207, 0.9631], [0.3702, 0.9536]], [[0.8796, 0.8315], [0.486, 0.4176]]]]]], 4, Con78700), 
LSub67512 = subtract_layer([[[[[0.0802, 0.5911, 0.2517], [0.3341, 0.0516, 0.148]], [[0.6155, 0.8035, 0.4799], [0.2539, 0.4464, 0.7252]], [[0.0489, 0.0469, 0.6602], [0.292, 0.8022, 0.8042]]], [[[0.135, 0.6557, 0.2739], [0.4891, 0.1536, 0.9071]], [[0.2933, 0.1012, 0.4266], [0.1543, 0.4976, 0.4475]], [[0.6766, 0.2825, 0.5544], [0.2706, 0.0026, 0.1939]]]]], [[[[[0.8466, 0.0232, 0.7581], [0.0665, 0.9063, 0.963]], [[0.4742, 0.447, 0.1952], [0.656, 0.4407, 0.7979]], [[0.9266, 0.4233, 0.9141], [0.4556, 0.4974, 0.7426]]], [[[0.5683, 0.8245, 0.7576], [0.1272, 0.7215, 0.0327]], [[0.7826, 0.5413, 0.0814], [0.2035, 0.0327, 0.9867]], [[0.232, 0.9606, 0.7868], [0.4925, 0.8562, 0.7772]]]]], Sub67512), 
LThr6699 = thresholded_relu_layer(Sub67512, 2.1856208589234214, Thr6699), 
LAdd91834 = add_layer([Con78700,Thr6699], Add91834), 
LZer95704 = zero_padding3D_layer(Add91834, 1, 0, 2, 0, 1, 0, Zer95704), 
LMul62040 = multiply_layer([Con50715,Zer95704], Mul62040), 
exec_layers([LMin71759,LRes78427,LCro56098,LRes18301,LRes63984,LLST11744,LRes12037,LRes85,LRes27077,LZer9593,LCon50715,LMas4742,LRes91136,LGlo44741,LRes81809,LRes33327,LRes86652,LZer40959,LCon78700,LSub67512,LThr6699,LAdd91834,LZer95704,LMul62040],["Min71759","Res78427","Cro56098","Res18301","Res63984","LST11744","Res12037","Res85","Res27077","Zer9593","Con50715","Mas4742","Res91136","Glo44741","Res81809","Res33327","Res86652","Zer40959","Con78700","Sub67512","Thr6699","Add91834","Zer95704","Mul62040"],Mul62040,"Mul62040")

Actual (Unparsed): [[[[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.5032424, 0.4144231], [0.0000000, 0.1054400, 0.3553692]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.2722912, 0.0018286], [0.0000000, 0.1610784, 0.1763429]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.4434994, 0.6011377], [0.0000000, 0.3105173, 0.2383875]]], [[[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.6874615, 0.3180857], [0.0000000, 0.9714057, 0.1314331]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.1070368, 0.7130793], [0.0000000, 0.1683299, 0.4965395]], [[0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.2022200, 0.4630624], [1.4431638, 0.2818314, 0.1234426]]]]]

Expected (Unparsed): [[[[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0.0,0.0,0.0]]],[[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.50324241,0.41442308],[0,0.10544,0.35536925]],[[0,0.0,0.0],[0,0.27229122,0.00182856],[0,0.1610784,0.17634288]],[[0,0.0,0.0],[0,0.44349936,0.60113768],[0.0,0.31051724999999997,0.23838752]]],[[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.0,0.0],[0,0.0,0.0]],[[0,0.0,0.0],[0,0.68746148,0.31808567],[0,0.97140568,0.13143312000000001]],[[0,0.0,0.0],[0,0.10703676000000001,0.7130792399999999],[0,0.16832993999999998,0.49653952000000007]],[[0,0.0,0.0],[0,0.20222004000000002,0.46306234999999996],[1.4431638561195264,0.28183139999999995,0.12344255999999999]]]]]

Actual:   [[[[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0.5033, 0.4145], [0, 0.1055, 0.3554]], [[0, 0, 0], [0, 0.2723, 0.0019], [0, 0.1611, 0.1764]], [[0, 0, 0], [0, 0.4435, 0.6012], [0, 0.3106, 0.2384]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0.6875, 0.3181], [0, 0.9715, 0.1315]], [[0, 0, 0], [0, 0.1071, 0.7131], [0, 0.1684, 0.4966]], [[0, 0, 0], [0, 0.2023, 0.4631], [1.4432, 0.2819, 0.1235]]]]]

Expected: [[[[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0.5033, 0.4145], [0, 0.1055, 0.3554]], [[0, 0, 0], [0, 0.2723, 0.0019], [0, 0.1611, 0.1764]], [[0, 0, 0], [0, 0.4435, 0.6012], [0, 0.3106, 0.2384]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0.6875, 0.3181], [0, 0.9715, 0.1315]], [[0, 0, 0], [0, 0.1071, 0.7131], [0, 0.1684, 0.4966]], [[0, 0, 0], [0, 0.2023, 0.4631], [1.4432, 0.2819, 0.1235]]]]]