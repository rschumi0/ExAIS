import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Bat16138 = tf.keras.layers.Input(shape=([2, 3, 3]))

Bat16138 = keras.layers.BatchNormalization(axis=3, epsilon=0.9939204928246687,  name = 'Bat16138', )(in0Bat16138)
Lea83352 = keras.layers.LeakyReLU(alpha=0.8100436316407796, name = 'Lea83352', )(Bat16138)
model = tf.keras.models.Model(inputs=[in0Bat16138], outputs=Lea83352)
w = model.get_layer('Bat16138').get_weights() 
w[0] = np.array([0.7185, 0.8245, 0.6153])
w[1] = np.array([0.1365, 0.4468, 0.7737])
w[2] = np.array([0.3533, 0.2719, 0.8716])
w[3] = np.array([0.4545, 0.0869, 0.7764])
model.get_layer('Bat16138').set_weights(w) 
in0Bat16138 = tf.constant([[[[1.8782, 1.8305, 1.561], [1.7851, 1.5143, 1.2934], [1.4868, 1.7784, 1.2775]], [[1.4918, 1.579, 1.7669], [1.7103, 1.2789, 1.0495], [1.9044, 1.1775, 1.5463]]]])
print (np.array2string(model.predict([in0Bat16138],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Lea83352.png')

LBat16138 = batch_normalization_layer([[[[1.8782, 1.8305, 1.561], [1.7851, 1.5143, 1.2934], [1.4868, 1.7784, 1.2775]], [[1.4918, 1.579, 1.7669], [1.7103, 1.2789, 1.0495], [1.9044, 1.1775, 1.5463]]]], 3, 0.9939204928246687, [0.7185, 0.8245, 0.6153], [0.1365, 0.4468, 0.7737], [0.3533, 0.2719, 0.8716], [0.4545, 0.0869, 0.7764], Bat16138), 
LLea83352 = leaky_relu_layer(Bat16138, 0.8100436316407796, Lea83352), 
exec_layers([LBat16138,LLea83352],["Bat16138","Lea83352"],Lea83352,"Lea83352")

Actual (Unparsed): [[[[1.0468760, 1.6828856, 1.0925102], [0.9912946, 1.4321155, 0.9687597], [0.8132074, 1.6415664, 0.9614068]], [[0.8161925, 1.4834274, 1.1877278], [0.9466385, 1.2454258, 0.8559691], [1.0625176, 1.1650081, 1.0857123]]]]

Expected (Unparsed): [[[[1.046876013628307,1.6828855987708509,1.0925102279494858],[0.9912946595271885,1.432115506167654,0.9687596956035585],[0.8132074637338094,1.6415664279149795,0.9614068052287444]],[[0.8161924988627631,1.4834274131614138,1.1877278460736507],[0.946638533998041,1.245425816734407,0.8559691319295236],[1.0625175977040247,1.1650080830533058,1.0857122726972994]]]]

Actual:   [[[[1.0469, 1.6829, 1.0926], [0.9913, 1.4322, 0.9688], [0.8133, 1.6416, 0.9615]], [[0.8162, 1.4835, 1.1878], [0.9467, 1.2455, 0.856], [1.0626, 1.1651, 1.0858]]]]

Expected: [[[[1.0469, 1.6829, 1.0926], [0.9913, 1.4322, 0.9688], [0.8133, 1.6416, 0.9615]], [[0.8162, 1.4835, 1.1878], [0.9467, 1.2455, 0.856], [1.0626, 1.1651, 1.0858]]]]