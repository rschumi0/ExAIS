import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con96711 = tf.keras.layers.Input(shape=([1, 2, 2]))

Con96711 = keras.layers.Conv2D(4, (1, 1),strides=(1, 1), padding='valid', dilation_rate=(1, 1), name = 'Con96711', )(in0Con96711)
Res80947 = keras.layers.Reshape((1, 2, 4, 1), name = 'Res80947', )(Con96711)
Up_74255 = keras.layers.UpSampling3D(size=(2, 2, 2), name = 'Up_74255', )(Res80947)
Cro97074 = keras.layers.Cropping3D(cropping=((0, 0), (2, 0), (3, 0)), name = 'Cro97074', )(Up_74255)
model = tf.keras.models.Model(inputs=[in0Con96711], outputs=Cro97074)
w = model.get_layer('Con96711').get_weights() 
w[0] = np.array([[[[0.1323, 0.925, 0.1276, 0.8086], [0.6081, 0.7915, 0.1468, 0.7039]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con96711').set_weights(w) 
in0Con96711 = tf.constant([[[[0.4028, 0.3151], [0.7219, 0.9055]]]])
print (np.array2string(model.predict([in0Con96711],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Cro97074.png')

LCon96711 = conv2D_layer([[[[0.4028, 0.3151], [0.7219, 0.9055]]]], 1, 1,[[[[0.1323, 0.925, 0.1276, 0.8086], [0.6081, 0.7915, 0.1468, 0.7039]]]],[0, 0, 0, 0], 1, 1, false, 1, 1, Con96711), 
LRes80947 = reshape_layer(Con96711, [1, 2, 4, 1], Res80947), 
LUp_74255 = up_sampling3D_layer(Res80947, 2, 2, 2, Up_74255), 
LCro97074 = cropping3D_layer(Up_74255, 0, 0, 2, 0, 3, 0, Cro97074), 
exec_layers([LCon96711,LRes80947,LUp_74255,LCro97074],["Con96711","Res80947","Up_74255","Cro97074"],Cro97074,"Cro97074")

Actual (Unparsed): [[[[[1.3844607], [0.2250418], [0.2250418], [1.2211098], [1.2211098]], [[1.3844607], [0.2250418], [0.2250418], [1.2211098], [1.2211098]]], [[[1.3844607], [0.2250418], [0.2250418], [1.2211098], [1.2211098]], [[1.3844607], [0.2250418], [0.2250418], [1.2211098], [1.2211098]]]]]

Expected (Unparsed): [[[[[1.3844607500000001],[0.22504184],[0.22504184],[1.2211097899999999],[1.2211097899999999]],[[1.3844607500000001],[0.22504184],[0.22504184],[1.2211097899999999],[1.2211097899999999]]],[[[1.3844607500000001],[0.22504184],[0.22504184],[1.2211097899999999],[1.2211097899999999]],[[1.3844607500000001],[0.22504184],[0.22504184],[1.2211097899999999],[1.2211097899999999]]]]]

Actual:   [[[[[1.3845], [0.2251], [0.2251], [1.2212], [1.2212]], [[1.3845], [0.2251], [0.2251], [1.2212], [1.2212]]], [[[1.3845], [0.2251], [0.2251], [1.2212], [1.2212]], [[1.3845], [0.2251], [0.2251], [1.2212], [1.2212]]]]]

Expected: [[[[[1.3845], [0.2251], [0.2251], [1.2212], [1.2212]], [[1.3845], [0.2251], [0.2251], [1.2212], [1.2212]]], [[[1.3845], [0.2251], [0.2251], [1.2212], [1.2212]], [[1.3845], [0.2251], [0.2251], [1.2212], [1.2212]]]]]