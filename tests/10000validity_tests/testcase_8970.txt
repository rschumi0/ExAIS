import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Den93558 = tf.keras.layers.Input(shape=([3, 5, 4]))
in0Max67060 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Max67060 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con28828 = tf.keras.layers.Input(shape=([39]))

Den93558 = keras.layers.Dense(4,name = 'Den93558', )(in0Den93558)
Res61011 = keras.layers.Reshape((3, 20), name = 'Res61011', )(Den93558)
Max24579 = keras.layers.MaxPool1D(pool_size=(3), name = 'Max24579', )(Res61011)
Up_97655 = keras.layers.UpSampling1D(size=(2), name = 'Up_97655', )(Max24579)
Fla74817 = keras.layers.Flatten(name = 'Fla74817', )(Up_97655)
Max67060 = keras.layers.Maximum(name = 'Max67060', )([in0Max67060,in1Max67060])
Res80211 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res80211', )(Max67060)
Glo92701 = keras.layers.GlobalAveragePooling3D(name = 'Glo92701', )(Res80211)
Con28828 = keras.layers.Concatenate(axis=1, name = 'Con28828', )([Glo92701,in0Con28828])
Mul81558 = keras.layers.Multiply(name = 'Mul81558', )([Fla74817,Con28828])
model = tf.keras.models.Model(inputs=[in0Den93558,in0Max67060,in1Max67060,in0Con28828], outputs=Mul81558)
w = model.get_layer('Den93558').get_weights() 
w[0] = np.array([[0.2101, 0.2058, 0.3373, 0.6019], [0.4972, 0.2731, 0.5124, 0.9304], [0.3124, 0.4138, 0.2107, 0.8307], [0.8125, 0.6433, 0.9249, 0.0009]])
w[1] = np.array([0.6644, 0.4342, 0.0572, 0.5707])
model.get_layer('Den93558').set_weights(w) 
in0Den93558 = tf.constant([[[[0.8672, 0.3051, 0.5391, 0.3904], [0.6745, 0.2977, 0.989, 0.844], [0.3421, 0.5892, 0.8849, 0.7298], [0.3215, 0.5643, 0.7152, 0.3038], [0.4236, 0.248, 0.9794, 0.9261]], [[0.4393, 0.9198, 0.2441, 0.0273], [0.504, 0.8064, 0.8538, 0.5499], [0.3021, 0.405, 0.4885, 0.7671], [0.3115, 0.666, 0.3181, 0.6354], [0.5514, 0.3465, 0.7182, 0.998]], [[0.7163, 0.3343, 0.3876, 0.0264], [0.1543, 0.64, 0.2317, 0.2559], [0.8776, 0.0546, 0.5638, 0.4565], [0.6827, 0.1777, 0.0166, 0.362], [0.5021, 0.6381, 0.051, 0.976]]]])
in0Max67060 = tf.constant([[[[0.3059], [0.8464]], [[0.1064], [0.769]]]])
in1Max67060 = tf.constant([[[[0.2335], [0.5474]], [[0.2421], [0.5893]]]])
in0Con28828 = tf.constant([[0.1967, 0.1608, 0.7332, 0.9037, 0.9328, 0.3532, 0.2984, 0.1918, 0.2019, 0.2632, 0.5953, 0.7794, 0.4196, 0.5691, 0.8437, 0.2379, 0.5706, 0.9938, 0.8035, 0.5767, 0.7803, 0.3044, 0.0669, 0.6605, 0.524, 0.2101, 0.3208, 0.4281, 0.82, 0.3956, 0.1712, 0.2923, 0.0692, 0.3392, 0.2056, 0.9007, 0.2965, 0.0136, 0.3256]])
print (np.array2string(model.predict([in0Den93558,in0Max67060,in1Max67060,in0Con28828],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul81558.png')

LDen93558 = dense_layer([[[[0.8672, 0.3051, 0.5391, 0.3904], [0.6745, 0.2977, 0.989, 0.844], [0.3421, 0.5892, 0.8849, 0.7298], [0.3215, 0.5643, 0.7152, 0.3038], [0.4236, 0.248, 0.9794, 0.9261]], [[0.4393, 0.9198, 0.2441, 0.0273], [0.504, 0.8064, 0.8538, 0.5499], [0.3021, 0.405, 0.4885, 0.7671], [0.3115, 0.666, 0.3181, 0.6354], [0.5514, 0.3465, 0.7182, 0.998]], [[0.7163, 0.3343, 0.3876, 0.0264], [0.1543, 0.64, 0.2317, 0.2559], [0.8776, 0.0546, 0.5638, 0.4565], [0.6827, 0.1777, 0.0166, 0.362], [0.5021, 0.6381, 0.051, 0.976]]]], [[0.2101, 0.2058, 0.3373, 0.6019], [0.4972, 0.2731, 0.5124, 0.9304], [0.3124, 0.4138, 0.2107, 0.8307], [0.8125, 0.6433, 0.9249, 0.0009]],[0.6644, 0.4342, 0.0572, 0.5707], Den93558), 
LRes61011 = reshape_layer(Den93558, [3, 20], Res61011), 
LMax24579 = max_pool1D_layer(Res61011, 3, Max24579), 
LUp_97655 = up_sampling1D_layer(Max24579, 2, Up_97655), 
LFla74817 = flatten_layer(Up_97655, Fla74817), 
LMax67060 = maximum_layer([[[[[0.3059], [0.8464]], [[0.1064], [0.769]]]], [[[[0.2335], [0.5474]], [[0.2421], [0.5893]]]]], Max67060), 
LRes80211 = reshape_layer(Max67060, [2, 2, 1, 1], Res80211), 
LGlo92701 = global_average_pooling3D_layer(Res80211, Glo92701), 
LCon28828 = concatenate_layer([Glo92701,[[0.1967, 0.1608, 0.7332, 0.9037, 0.9328, 0.3532, 0.2984, 0.1918, 0.2019, 0.2632, 0.5953, 0.7794, 0.4196, 0.5691, 0.8437, 0.2379, 0.5706, 0.9938, 0.8035, 0.5767, 0.7803, 0.3044, 0.0669, 0.6605, 0.524, 0.2101, 0.3208, 0.4281, 0.82, 0.3956, 0.1712, 0.2923, 0.0692, 0.3392, 0.2056, 0.9007, 0.2965, 0.0136, 0.3256]]], 1, Con28828), 
LMul81558 = multiply_layer([Fla74817,Con28828], Mul81558), 
exec_layers([LDen93558,LRes61011,LMax24579,LUp_97655,LFla74817,LMax67060,LRes80211,LGlo92701,LCon28828,LMul81558],["Den93558","Res61011","Max24579","Up_97655","Fla74817","Max67060","Res80211","Glo92701","Con28828","Mul81558"],Mul81558,"Mul81558")

Actual (Unparsed): [[0.8025723, 0.2301816, 0.1576980, 1.3884572, 1.7611689, 1.4985501, 0.5037509, 0.6964891, 0.3641574, 0.3030856, 0.3516186, 1.2266424, 1.3067563, 0.5121528, 0.6591501, 1.5892149, 0.4728904, 0.9073347, 1.4858391, 1.5032079, 0.8557704, 0.9131199, 0.2985279, 0.1266882, 1.2872104, 0.8418098, 0.2996547, 0.7487725, 0.8128038, 1.2309566, 0.5284966, 0.3527653, 0.4900755, 0.0844637, 0.3928724, 0.3872734, 1.7903841, 0.4714770, 0.0203335, 0.6091406]]

Expected (Unparsed): [[0.8025723340880002,0.23018157964900002,0.157698028104,1.3884571959959997,1.761168958213,1.498550074736,0.503750874836,0.6964890930319999,0.364157370178,0.303085548654,0.35161858155199993,1.226642390876,1.306756295226,0.51215280844,0.6591501043680001,1.589214944031,0.472890392598,0.9073347570179999,1.485839085688,1.5032079758849999,0.8557704817760001,0.9131199115409999,0.298527859172,0.12668819750699997,1.287210464645,0.8418098618800001,0.29965475312300005,0.7487724565839999,0.812803806951,1.2309566612,0.528496621816,0.35276529030399995,0.490075526167,0.08446371388,0.39287245721600006,0.38727342952800003,1.790384096734,0.47147696364499997,0.020333479135999998,0.609140655816]]

Actual:   [[0.8026, 0.2302, 0.1577, 1.3885, 1.7612, 1.4986, 0.5038, 0.6965, 0.3642, 0.3031, 0.3517, 1.2267, 1.3068, 0.5122, 0.6592, 1.5893, 0.4729, 0.9074, 1.4859, 1.5033, 0.8558, 0.9132, 0.2986, 0.1267, 1.2873, 0.8419, 0.2997, 0.7488, 0.8129, 1.231, 0.5285, 0.3528, 0.4901, 0.0845, 0.3929, 0.3873, 1.7904, 0.4715, 0.0204, 0.6092]]

Expected: [[0.8026, 0.2302, 0.1577, 1.3885, 1.7612, 1.4986, 0.5038, 0.6965, 0.3642, 0.3031, 0.3517, 1.2267, 1.3068, 0.5122, 0.6592, 1.5893, 0.4729, 0.9074, 1.4859, 1.5033, 0.8558, 0.9132, 0.2986, 0.1267, 1.2873, 0.8419, 0.2997, 0.7488, 0.8129, 1.231, 0.5285, 0.3528, 0.4901, 0.0845, 0.3929, 0.3873, 1.7904, 0.4715, 0.0204, 0.6092]]