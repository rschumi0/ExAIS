import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sim38985 = tf.keras.layers.Input(shape=([1, 2]))

Sim38985 = keras.layers.SimpleRNN(3,name = 'Sim38985', )(in0Sim38985)
Res63183 = keras.layers.Reshape((3, 1), name = 'Res63183', )(Sim38985)
Loc83863 = keras.layers.LocallyConnected1D(3, (1),strides=(1), name = 'Loc83863', )(Res63183)
Res51027 = keras.layers.Reshape((3, 3, 1), name = 'Res51027', )(Loc83863)
Res85458 = keras.layers.Reshape((3, 3, 1, 1), name = 'Res85458', )(Res51027)
Con70759 = keras.layers.Conv3D(4, (3, 1, 1),strides=(1, 1, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con70759', )(Res85458)
Lea9507 = keras.layers.LeakyReLU(alpha=9.651481553999282, name = 'Lea9507', )(Con70759)
model = tf.keras.models.Model(inputs=[in0Sim38985], outputs=Lea9507)
w = model.get_layer('Sim38985').get_weights() 
w[0] = np.array([[8, 10, 10], [1, 7, 1]])
w[1] = np.array([[8, 6, 4], [7, 3, 2], [3, 8, 8]])
w[2] = np.array([8, 2, 4])
model.get_layer('Sim38985').set_weights(w) 
w = model.get_layer('Loc83863').get_weights() 
w[0] = np.array([[[0.0593, 0.2974, 0.0074]], [[0.4086, 0.5768, 0.5556]], [[0.1849, 0.1253, 0.7838]]])
w[1] = np.array([[0, 0, 0], [0, 0, 0], [0, 0, 0]])
model.get_layer('Loc83863').set_weights(w) 
w = model.get_layer('Con70759').get_weights() 
w[0] = np.array([[[[[0.1044, 0.5177, 0.8571, 0.8154]]]], [[[[0.6463, 0.8438, 0.3087, 0.9699]]]], [[[[0.1046, 0.5947, 0.7203, 0.3415]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con70759').set_weights(w) 
in0Sim38985 = tf.constant([[[7, 4]]])
print (np.array2string(model.predict([in0Sim38985],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Lea9507.png')

LSim38985 = simple_rnn_layer([[[7, 4]]],[[8, 10, 10], [1, 7, 1]],[[8, 6, 4], [7, 3, 2], [3, 8, 8]],[8, 2, 4], Sim38985), 
LRes63183 = reshape_layer(Sim38985, [3, 1], Res63183), 
LLoc83863 = locally_connected1D_layer(Res63183, 1,[[[0.0593, 0.2974, 0.0074]], [[0.4086, 0.5768, 0.5556]], [[0.1849, 0.1253, 0.7838]]],[[0, 0, 0], [0, 0, 0], [0, 0, 0]], 1, Loc83863), 
LRes51027 = reshape_layer(Loc83863, [3, 3, 1], Res51027), 
LRes85458 = reshape_layer(Res51027, [3, 3, 1, 1], Res85458), 
LCon70759 = conv3D_layer(Res85458, 3, 1, 1,[[[[[0.1044, 0.5177, 0.8571, 0.8154]]]], [[[[0.6463, 0.8438, 0.3087, 0.9699]]]], [[[[0.1046, 0.5947, 0.7203, 0.3415]]]]],[0, 0, 0, 0], 1, 1, 1, true, 1, 1, 1, Con70759), 
LLea9507 = leaky_relu_layer(Con70759, 9.651481553999282, Lea9507), 
exec_layers([LSim38985,LRes63183,LLoc83863,LRes51027,LRes85458,LCon70759,LLea9507],["Sim38985","Res63183","Loc83863","Res51027","Res85458","Con70759","Lea9507"],Lea9507,"Lea9507")

Actual (Unparsed): [[[[[0.0810652, 0.2930318, 0.3126205, 0.1970520]], [[0.2525429, 0.5939691, 0.5072764, 0.4854255]], [[0.0628984, 0.3366594, 0.4024831, 0.1969147]]], [[[0.2896096, 0.4854363, 0.3101443, 0.5077977]], [[0.4169408, 0.7151837, 0.5232133, 0.8447282]], [[0.4418423, 0.9387721, 0.7424274, 0.8125781]]], [[[0.1621587, 0.3675508, 0.4072897, 0.5125070]], [[0.1411993, 0.4043375, 0.5330554, 0.5918512]], [[0.5645746, 0.9490046, 0.7181638, 1.2132439]]]]]

Expected (Unparsed): [[[[[0.08106515,0.29303176000000003,0.31262049000000003,0.19705197000000002]],[[0.2525429,0.5939690799999999,0.50727642,0.48542546000000003]],[[0.06289837999999999,0.33665944000000003,0.40248306,0.19691466]]],[[[0.28960964,0.48543632,0.31014432000000003,0.5077977100000001]],[[0.41694077999999996,0.71518373,0.5232132899999999,0.8447282299999999]],[[0.44184231999999996,0.9387721200000001,0.7424274000000001,0.8125781000000001]]],[[[0.16215871,0.36755084000000005,0.40728969000000004,0.51250695]],[[0.14119931,0.4043375,0.53305539,0.59185119]],[[0.56457458,0.94900456,0.71816382,1.21324386]]]]]

Actual:   [[[[[0.0811, 0.2931, 0.3127, 0.1971]], [[0.2526, 0.594, 0.5073, 0.4855]], [[0.0629, 0.3367, 0.4025, 0.197]]], [[[0.2897, 0.4855, 0.3102, 0.5078]], [[0.417, 0.7152, 0.5233, 0.8448]], [[0.4419, 0.9388, 0.7425, 0.8126]]], [[[0.1622, 0.3676, 0.4073, 0.5126]], [[0.1412, 0.4044, 0.5331, 0.5919]], [[0.5646, 0.9491, 0.7182, 1.2133]]]]]

Expected: [[[[[0.0811, 0.2931, 0.3127, 0.1971]], [[0.2526, 0.594, 0.5073, 0.4855]], [[0.0629, 0.3367, 0.4025, 0.197]]], [[[0.2897, 0.4855, 0.3102, 0.5078]], [[0.417, 0.7152, 0.5233, 0.8448]], [[0.4419, 0.9388, 0.7425, 0.8126]]], [[[0.1622, 0.3676, 0.4073, 0.5126]], [[0.1412, 0.4044, 0.5331, 0.5919]], [[0.5646, 0.9491, 0.7182, 1.2133]]]]]