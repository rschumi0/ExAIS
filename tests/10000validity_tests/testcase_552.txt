import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot59322 = tf.keras.layers.Input(shape=([2]))
in1Dot59322 = tf.keras.layers.Input(shape=([2]))
in0Con36667 = tf.keras.layers.Input(shape=([1, 2, 15]))
in0Mul59555 = tf.keras.layers.Input(shape=([2, 2]))
in1Mul59555 = tf.keras.layers.Input(shape=([2, 2]))
in0Con71553 = tf.keras.layers.Input(shape=([1, 2, 15]))
in0Con78563 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))

Dot59322 = keras.layers.Dot(axes=(1, 1), name = 'Dot59322', )([in0Dot59322,in1Dot59322])
Res97792 = keras.layers.Reshape((1, 1), name = 'Res97792', )(Dot59322)
Res68679 = keras.layers.Reshape((1, 1, 1), name = 'Res68679', )(Res97792)
Zer70857 = keras.layers.ZeroPadding2D(padding=((0, 0), (1, 0)), name = 'Zer70857', )(Res68679)
Con36667 = keras.layers.Concatenate(axis=3, name = 'Con36667', )([Zer70857,in0Con36667])
Mul59555 = keras.layers.Multiply(name = 'Mul59555', )([in0Mul59555,in1Mul59555])
Res73663 = keras.layers.Reshape((2, 2, 1), name = 'Res73663', )(Mul59555)
Res22316 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res22316', )(Res73663)
Cro9032 = keras.layers.Cropping3D(cropping=((0, 1), (0, 0), (0, 0)), name = 'Cro9032', )(Res22316)
Res88673 = keras.layers.Reshape((1, 2, 1), name = 'Res88673', )(Cro9032)
Con71553 = keras.layers.Concatenate(axis=3, name = 'Con71553', )([Res88673,in0Con71553])
Con78563 = keras.layers.Conv3DTranspose(4, (2, 1, 1),strides=(1, 10, 2), padding='same', name = 'Con78563', )(in0Con78563)
Res13130 = keras.layers.Reshape((2, 10, 16), name = 'Res13130', )(Con78563)
Max8915 = keras.layers.MaxPool2D(pool_size=(2, 7), name = 'Max8915', )(Res13130)
Cro93750 = keras.layers.Cropping2D(cropping=((0, 0), (0, 0)), name = 'Cro93750', )(Max8915)
Zer50083 = keras.layers.ZeroPadding2D(padding=((0, 0), (1, 0)), name = 'Zer50083', )(Cro93750)
Min79886 = keras.layers.Minimum(name = 'Min79886', )([Con71553,Zer50083])
Max81315 = keras.layers.Maximum(name = 'Max81315', )([Con36667,Min79886])
model = tf.keras.models.Model(inputs=[in0Dot59322,in1Dot59322,in0Con36667,in0Mul59555,in1Mul59555,in0Con71553,in0Con78563], outputs=Max81315)
w = model.get_layer('Con78563').get_weights() 
w[0] = np.array([[[[[0.9932, 0.0892], [0.4792, 0.6627], [0.4028, 0.0517], [0.4101, 0.7698]]]], [[[[0.0267, 0.9842], [0.0413, 0.592], [0.5218, 0.2598], [0.5921, 0.0475]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con78563').set_weights(w) 
in0Dot59322 = tf.constant([[0.5584, 0.3601]])
in1Dot59322 = tf.constant([[0.2108, 0.3854]])
in0Con36667 = tf.constant([[[[0.6662, 0.4004, 0.5587, 0.1723, 0.844, 0.281, 0.7401, 0.115, 0.2855, 0.0291, 0.7719, 0.8635, 0.6965, 0.0062, 0.29], [0.7803, 0.1953, 0.7931, 0.2008, 0.0992, 0.3747, 0.2133, 0.4494, 0.0095, 0.7088, 0.7409, 0.9078, 0.9541, 0.2755, 0.1056]]]])
in0Mul59555 = tf.constant([[[0.5597, 0.9509], [0.0049, 0.2749]]])
in1Mul59555 = tf.constant([[[0.455, 0.0088], [0.8909, 0.5615]]])
in0Con71553 = tf.constant([[[[0.9118, 0.2437, 0.7608, 0.654, 0.3575, 0.4946, 0.6223, 0.8268, 0.1292, 0.0464, 0.9703, 0.646, 0.8874, 0.9247, 0.5124], [0.4016, 0.2724, 0.1267, 0.2307, 0.5456, 0.8068, 0.1376, 0.9942, 0.0231, 0.7225, 0.8531, 0.3481, 0.0175, 0.6646, 0.9352]]]])
in0Con78563 = tf.constant([[[[[0.4246, 0.3921], [0.6159, 0.3635]]], [[[0.0339, 0.4229], [0.4616, 0.7488]]]]])
print (np.array2string(model.predict([in0Dot59322,in1Dot59322,in0Con36667,in0Mul59555,in1Mul59555,in0Con71553,in0Con78563],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max81315.png')

LDot59322 = dot_layer([[0.5584, 0.3601]], [[0.2108, 0.3854]], 1, 1, Dot59322), 
LRes97792 = reshape_layer(Dot59322, [1, 1], Res97792), 
LRes68679 = reshape_layer(Res97792, [1, 1, 1], Res68679), 
LZer70857 = zero_padding2D_layer(Res68679, 0, 0, 1, 0, Zer70857), 
LCon36667 = concatenate_layer([Zer70857,[[[[0.6662, 0.4004, 0.5587, 0.1723, 0.844, 0.281, 0.7401, 0.115, 0.2855, 0.0291, 0.7719, 0.8635, 0.6965, 0.0062, 0.29], [0.7803, 0.1953, 0.7931, 0.2008, 0.0992, 0.3747, 0.2133, 0.4494, 0.0095, 0.7088, 0.7409, 0.9078, 0.9541, 0.2755, 0.1056]]]]], 3, Con36667), 
LMul59555 = multiply_layer([[[[0.5597, 0.9509], [0.0049, 0.2749]]], [[[0.455, 0.0088], [0.8909, 0.5615]]]], Mul59555), 
LRes73663 = reshape_layer(Mul59555, [2, 2, 1], Res73663), 
LRes22316 = reshape_layer(Res73663, [2, 2, 1, 1], Res22316), 
LCro9032 = cropping3D_layer(Res22316, 0, 1, 0, 0, 0, 0, Cro9032), 
LRes88673 = reshape_layer(Cro9032, [1, 2, 1], Res88673), 
LCon71553 = concatenate_layer([Res88673,[[[[0.9118, 0.2437, 0.7608, 0.654, 0.3575, 0.4946, 0.6223, 0.8268, 0.1292, 0.0464, 0.9703, 0.646, 0.8874, 0.9247, 0.5124], [0.4016, 0.2724, 0.1267, 0.2307, 0.5456, 0.8068, 0.1376, 0.9942, 0.0231, 0.7225, 0.8531, 0.3481, 0.0175, 0.6646, 0.9352]]]]], 3, Con71553), 
LCon78563 = conv3D_transpose_layer([[[[[0.4246, 0.3921], [0.6159, 0.3635]]], [[[0.0339, 0.4229], [0.4616, 0.7488]]]]], 2, 1, 1,[[[[[0.9932, 0.0892], [0.4792, 0.6627], [0.4028, 0.0517], [0.4101, 0.7698]]]], [[[[0.0267, 0.9842], [0.0413, 0.592], [0.5218, 0.2598], [0.5921, 0.0475]]]]],[0, 0, 0, 0], 1, 10, 2, true, Con78563), 
LRes13130 = reshape_layer(Con78563, [2, 10, 16], Res13130), 
LMax8915 = max_pool2D_layer(Res13130, 2, 7, Max8915), 
LCro93750 = cropping2D_layer(Max8915, 0, 0, 0, 0, Cro93750), 
LZer50083 = zero_padding2D_layer(Cro93750, 0, 0, 1, 0, Zer50083), 
LMin79886 = minimum_layer([Con71553,Zer50083], Min79886), 
LMax81315 = maximum_layer([Con36667,Min79886], Max81315), 
exec_layers([LDot59322,LRes97792,LRes68679,LZer70857,LCon36667,LMul59555,LRes73663,LRes22316,LCro9032,LRes88673,LCon71553,LCon78563,LRes13130,LMax8915,LCro93750,LZer50083,LMin79886,LMax81315],["Dot59322","Res97792","Res68679","Zer70857","Con36667","Mul59555","Res73663","Res22316","Cro9032","Res88673","Con71553","Con78563","Res13130","Max8915","Cro93750","Zer50083","Min79886","Max81315"],Max81315,"Max81315")

Actual (Unparsed): [[[[0.0000000, 0.6662000, 0.4004000, 0.5587000, 0.1723000, 0.8440000, 0.2810000, 0.7401000, 0.1150000, 0.2855000, 0.0291000, 0.7719000, 0.8635000, 0.6965000, 0.0062000, 0.2900000], [0.2564933, 0.7803000, 0.2724000, 0.7931000, 0.2008000, 0.0992000, 0.3747000, 0.2133000, 0.8994553, 0.0231000, 0.7088000, 0.8531000, 0.9078000, 0.9541000, 0.2755000, 0.1056000]]]]

Expected (Unparsed): [[[[0,0.6662,0.4004,0.5587,0.1723,0.844,0.281,0.7401,0.115,0.2855,0.0291,0.7719,0.8635,0.6965,0.0062,0.29],[0.25649326,0.7803,0.2724,0.7931,0.2008,0.0992,0.3747,0.2133,0.89945531,0.0231,0.7088,0.8531,0.9078,0.9541,0.2755,0.1056]]]]

Actual:   [[[[0, 0.6662, 0.4004, 0.5587, 0.1723, 0.844, 0.281, 0.7401, 0.115, 0.2855, 0.0291, 0.7719, 0.8635, 0.6965, 0.0062, 0.29], [0.2565, 0.7803, 0.2724, 0.7931, 0.2008, 0.0992, 0.3747, 0.2133, 0.8995, 0.0231, 0.7088, 0.8531, 0.9078, 0.9541, 0.2755, 0.1056]]]]

Expected: [[[[0, 0.6662, 0.4004, 0.5587, 0.1723, 0.844, 0.281, 0.7401, 0.115, 0.2855, 0.0291, 0.7719, 0.8635, 0.6965, 0.0062, 0.29], [0.2565, 0.7803, 0.2724, 0.7931, 0.2008, 0.0992, 0.3747, 0.2133, 0.8995, 0.0231, 0.7088, 0.8531, 0.9078, 0.9541, 0.2755, 0.1056]]]]