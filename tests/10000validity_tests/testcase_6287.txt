import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Per57403 = tf.keras.layers.Input(shape=([2, 1]))
in0Con50362 = tf.keras.layers.Input(shape=([2, 3, 2, 2]))
in0Con50071 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in0Glo50144 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con82659 = tf.keras.layers.Input(shape=([35]))

Per57403 = keras.layers.Permute((2,1), name = 'Per57403',)(in0Per57403)
Res23681 = keras.layers.Reshape((1, 2, 1), name = 'Res23681', )(Per57403)
Res21740 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res21740', )(Res23681)
Zer43918 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (1, 0)), name = 'Zer43918', )(Res21740)
Con50362 = keras.layers.Concatenate(axis=4, name = 'Con50362', )([Zer43918,in0Con50362])
Con50071 = keras.layers.Conv3DTranspose(3, (1, 1, 2),strides=(1, 1, 1), padding='same', name = 'Con50071', )(in0Con50071)
Zer20136 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (0, 0)), name = 'Zer20136', )(Con50071)
Max50350 = keras.layers.Maximum(name = 'Max50350', )([Con50362,Zer20136])
Res11076 = keras.layers.Reshape((2, 3, 6), name = 'Res11076', )(Max50350)
Res99355 = keras.layers.Reshape((2, 18), name = 'Res99355', )(Res11076)
Up_26619 = keras.layers.UpSampling1D(size=(1), name = 'Up_26619', )(Res99355)
Fla76926 = keras.layers.Flatten(name = 'Fla76926', )(Up_26619)
Glo50144 = keras.layers.GlobalMaxPool2D(name = 'Glo50144', )(in0Glo50144)
Con82659 = keras.layers.Concatenate(axis=1, name = 'Con82659', )([Glo50144,in0Con82659])
Sub16937 = keras.layers.Subtract(name = 'Sub16937', )([Fla76926,Con82659])
model = tf.keras.models.Model(inputs=[in0Per57403,in0Con50362,in0Con50071,in0Glo50144,in0Con82659], outputs=Sub16937)
w = model.get_layer('Con50071').get_weights() 
w[0] = np.array([[[[[0.5682], [0.462], [0.1809]], [[0.1116], [0.4177], [0.4145]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con50071').set_weights(w) 
in0Per57403 = tf.constant([[[1.6612], [1.398]]])
in0Con50362 = tf.constant([[[[[0.0619, 0.9784], [0.5782, 0.5683]], [[0.5248, 0.4165], [0.873, 0.5092]], [[0.7393, 0.071], [0.271, 0.4651]]], [[[0.1466, 0.247], [0.2967, 0.9306]], [[0.3202, 0.9818], [0.3041, 0.6013]], [[0.2798, 0.0373], [0.0725, 0.9003]]]]])
in0Con50071 = tf.constant([[[[[0.7283], [0.6898]]], [[[0.2252], [0.5349]]]]])
in0Glo50144 = tf.constant([[[[1.5824]], [[1.5041]]]])
in0Con82659 = tf.constant([[0.0105, 0.162, 0.7347, 0.6886, 0.6921, 0.0747, 0.7085, 0.7479, 0.0233, 0.0644, 0.5764, 0.1048, 0.2757, 0.3677, 0.1366, 0.0605, 0.0239, 0.3497, 0.5945, 0.2331, 0.6184, 0.4215, 0.6129, 0.9523, 0.1191, 0.0158, 0.7169, 0.3789, 0.279, 0.685, 0.9987, 0.0363, 0.4484, 0.5186, 0.6148]])
print (np.array2string(model.predict([in0Per57403,in0Con50362,in0Con50071,in0Glo50144,in0Con82659],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub16937.png')

LPer57403 = permute_layer([[[1.6612], [1.398]]], 2,1, Per57403), 
LRes23681 = reshape_layer(Per57403, [1, 2, 1], Res23681), 
LRes21740 = reshape_layer(Res23681, [1, 2, 1, 1], Res21740), 
LZer43918 = zero_padding3D_layer(Res21740, 1, 0, 1, 0, 1, 0, Zer43918), 
LCon50362 = concatenate_layer([Zer43918,[[[[[0.0619, 0.9784], [0.5782, 0.5683]], [[0.5248, 0.4165], [0.873, 0.5092]], [[0.7393, 0.071], [0.271, 0.4651]]], [[[0.1466, 0.247], [0.2967, 0.9306]], [[0.3202, 0.9818], [0.3041, 0.6013]], [[0.2798, 0.0373], [0.0725, 0.9003]]]]]], 4, Con50362), 
LCon50071 = conv3D_transpose_layer([[[[[0.7283], [0.6898]]], [[[0.2252], [0.5349]]]]], 1, 1, 2,[[[[[0.5682], [0.462], [0.1809]], [[0.1116], [0.4177], [0.4145]]]]],[0, 0, 0], 1, 1, 1, true, Con50071), 
LZer20136 = zero_padding3D_layer(Con50071, 0, 0, 2, 0, 0, 0, Zer20136), 
LMax50350 = maximum_layer([Con50362,Zer20136], Max50350), 
LRes11076 = reshape_layer(Max50350, [2, 3, 6], Res11076), 
LRes99355 = reshape_layer(Res11076, [2, 18], Res99355), 
LUp_26619 = up_sampling1D_layer(Res99355, 1, Up_26619), 
LFla76926 = flatten_layer(Up_26619, Fla76926), 
LGlo50144 = global_max_pool2D_layer([[[[1.5824]], [[1.5041]]]], Glo50144), 
LCon82659 = concatenate_layer([Glo50144,[[0.0105, 0.162, 0.7347, 0.6886, 0.6921, 0.0747, 0.7085, 0.7479, 0.0233, 0.0644, 0.5764, 0.1048, 0.2757, 0.3677, 0.1366, 0.0605, 0.0239, 0.3497, 0.5945, 0.2331, 0.6184, 0.4215, 0.6129, 0.9523, 0.1191, 0.0158, 0.7169, 0.3789, 0.279, 0.685, 0.9987, 0.0363, 0.4484, 0.5186, 0.6148]]], 1, Con82659), 
LSub16937 = subtract_layer(Fla76926,Con82659, Sub16937), 
exec_layers([LPer57403,LRes23681,LRes21740,LZer43918,LCon50362,LCon50071,LZer20136,LMax50350,LRes11076,LRes99355,LUp_26619,LFla76926,LGlo50144,LCon82659,LSub16937],["Per57403","Res23681","Res21740","Zer43918","Con50362","Con50071","Zer20136","Max50350","Res11076","Res99355","Up_26619","Fla76926","Glo50144","Con82659","Sub16937"],Sub16937,"Sub16937")

Actual (Unparsed): [[-1.5824000, 0.0514000, 0.8164000, -0.7347000, -0.1104000, -0.1238000, -0.0747000, -0.1837000, -0.3314000, -0.0233000, 0.8086000, -0.0672000, 0.3090200, 0.4636000, -0.2359505, 0.3366226, 0.5623985, 0.4412000, -0.3497000, -0.4479000, 0.0139000, -0.6184000, -0.1248000, 0.3177000, -0.9523000, 0.2011000, 0.9660000, 0.9443001, -0.0748000, 0.3223000, -0.5570414, -0.7189000, 0.0044387, 0.9496000, -0.1774101, 0.2855000]]

Expected (Unparsed): [[-1.5824,0.051399999999999994,0.8164,-0.7347,-0.11039999999999994,-0.12380000000000002,-0.0747,-0.18369999999999997,-0.33140000000000003,-0.0233,0.8086,-0.06720000000000004,0.30902006,0.46359999999999996,-0.23595053000000002,0.33662264,0.56239851,0.44120000000000004,-0.3497,-0.4479,0.013899999999999996,-0.6184,-0.12479999999999997,0.3177,-0.9523,0.2011,0.966,0.9443,-0.07480000000000003,0.3222999999999999,-0.55704136,-0.7189000000000001,0.004438680000000007,0.9495999999999999,-0.17741015999999993,0.2855]]

Actual:   [[-1.5824, 0.0514, 0.8164, -0.7347, -0.1104, -0.1238, -0.0747, -0.1837, -0.3314, -0.0233, 0.8086, -0.0672, 0.3091, 0.4636, -0.2359, 0.3367, 0.5624, 0.4412, -0.3497, -0.4479, 0.0139, -0.6184, -0.1248, 0.3177, -0.9523, 0.2011, 0.966, 0.9444, -0.0748, 0.3223, -0.557, -0.7189, 0.0045, 0.9496, -0.1774, 0.2855]]

Expected: [[-1.5824, 0.0514, 0.8164, -0.7347, -0.1103, -0.1238, -0.0747, -0.1836, -0.3314, -0.0233, 0.8086, -0.0672, 0.3091, 0.4636, -0.2359, 0.3367, 0.5624, 0.4413, -0.3497, -0.4479, 0.0139, -0.6184, -0.1247, 0.3177, -0.9523, 0.2011, 0.966, 0.9443, -0.0748, 0.3223, -0.557, -0.7189, 0.0045, 0.9496, -0.1774, 0.2855]]