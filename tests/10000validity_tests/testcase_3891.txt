import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Lea69848 = tf.keras.layers.Input(shape=([2, 2, 2]))

Lea69848 = keras.layers.LeakyReLU(alpha=4.799030541239133, name = 'Lea69848', input_shape=(2, 2, 2))(in0Lea69848)
Con932 = keras.layers.Conv2D(4, (1, 1),strides=(1, 1), padding='valid', dilation_rate=(1, 1), name = 'Con932', )(Lea69848)
model = tf.keras.models.Model(inputs=[in0Lea69848], outputs=Con932)
w = model.get_layer('Con932').get_weights() 
w[0] = np.array([[[[0.3725, 0.1057, 0.4317, 0.5318], [0.1811, 0.432, 0.6918, 0.7583]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con932').set_weights(w) 
in0Lea69848 = tf.constant([[[[0.7553, 0.9375], [0.5639, 0.8428]], [[0.2939, 0.3623], [0.916, 0.1668]]]])
print (np.array2string(model.predict([in0Lea69848],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con932.png')

LLea69848 = leaky_relu_layer([[[[0.7553, 0.9375], [0.5639, 0.8428]], [[0.2939, 0.3623], [0.916, 0.1668]]]], 4.799030541239133, Lea69848), 
LCon932 = conv2D_layer(Lea69848, 1, 1,[[[[0.3725, 0.1057, 0.4317, 0.5318], [0.1811, 0.432, 0.6918, 0.7583]]]],[0, 0, 0, 0], 1, 1, false, 1, 1, Con932), 
exec_layers([LLea69848,LCon932],["Lea69848","Con932"],Con932,"Con932")

Actual (Unparsed): [[[[0.4511305, 0.4848352, 0.9746255, 1.1125748], [0.3626838, 0.4236938, 0.8264847, 0.9389773]], [[0.1750903, 0.1875788, 0.3775158, 0.4310281], [0.3714175, 0.1688788, 0.5108294, 0.6136133]]]]

Expected (Unparsed): [[[[0.4511305,0.48483520999999996,0.9746255099999999,1.11257479],[0.36268383,0.42369383,0.8264846699999999,0.9389772599999999]],[[0.17509028,0.18757883,0.37751577,0.43102810999999996],[0.37141748,0.1688788,0.51082944,0.6136132400000001]]]]

Actual:   [[[[0.4512, 0.4849, 0.9747, 1.1126], [0.3627, 0.4237, 0.8265, 0.939]], [[0.1751, 0.1876, 0.3776, 0.4311], [0.3715, 0.1689, 0.5109, 0.6137]]]]

Expected: [[[[0.4512, 0.4849, 0.9747, 1.1126], [0.3627, 0.4237, 0.8265, 0.939]], [[0.1751, 0.1876, 0.3776, 0.4311], [0.3715, 0.1689, 0.5109, 0.6137]]]]