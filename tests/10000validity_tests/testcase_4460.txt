import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Lea17537 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Sof85349 = tf.keras.layers.Input(shape=([1, 1]))
in0Con47495 = tf.keras.layers.Input(shape=([2, 1]))
in0Con83769 = tf.keras.layers.Input(shape=([3, 4, 3]))
in0Mul89759 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Mul89759 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con11389 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Min57083 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in1Min57083 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))

Lea17537 = keras.layers.LeakyReLU(alpha=0.7107984406738307, name = 'Lea17537', input_shape=(2, 2, 1, 2))(in0Lea17537)
Res73080 = keras.layers.Reshape((2, 2, 2), name = 'Res73080', )(Lea17537)
Max83644 = keras.layers.MaxPool2D(pool_size=(2, 1), strides=(1, 1), padding='same', name = 'Max83644', )(Res73080)
Res6809 = keras.layers.Reshape((2, 4), name = 'Res6809', )(Max83644)
Sep97644 = keras.layers.SeparableConv1D(2, (1),strides=(1), padding='valid', name = 'Sep97644', )(Res6809)
Sof85349 = keras.layers.Softmax(axis=1, name = 'Sof85349', input_shape=(1, 1))(in0Sof85349)
Zer12659 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer12659', )(Sof85349)
Con47495 = keras.layers.Concatenate(axis=2, name = 'Con47495', )([Zer12659,in0Con47495])
Add79366 = keras.layers.Add(name = 'Add79366', )([Sep97644,Con47495])
Res89667 = keras.layers.Reshape((2, 2, 1), name = 'Res89667', )(Add79366)
Zer10326 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer10326', )(Res89667)
Con83769 = keras.layers.Concatenate(axis=3, name = 'Con83769', )([Zer10326,in0Con83769])
Mul89759 = keras.layers.Multiply(name = 'Mul89759', )([in0Mul89759,in1Mul89759])
Res21039 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res21039', )(Mul89759)
Zer59027 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (0, 0)), name = 'Zer59027', )(Res21039)
Con11389 = keras.layers.Concatenate(axis=4, name = 'Con11389', )([Zer59027,in0Con11389])
Min57083 = keras.layers.Minimum(name = 'Min57083', )([in0Min57083,in1Min57083])
Add54536 = keras.layers.Add(name = 'Add54536', )([Con11389,Min57083])
Res29147 = keras.layers.Reshape((1, 2, 2), name = 'Res29147', )(Add54536)
Sep30647 = keras.layers.SeparableConv2D(4, (1, 1),strides=(1, 1), padding='same', name = 'Sep30647', )(Res29147)
Zer32909 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer32909', )(Sep30647)
Max33977 = keras.layers.Maximum(name = 'Max33977', )([Con83769,Zer32909])
model = tf.keras.models.Model(inputs=[in0Lea17537,in0Sof85349,in0Con47495,in0Con83769,in0Mul89759,in1Mul89759,in0Con11389,in0Min57083,in1Min57083], outputs=Max33977)
w = model.get_layer('Sep97644').get_weights() 
w[0] = np.array([[[0.8646], [0.0667], [0.9562], [0.1768]]])
w[1] = np.array([[[0.9344, 0.523], [0.7129, 0.6858], [0.4135, 0.4364], [0.5863, 0.794]]])
w[2] = np.array([0, 0])
model.get_layer('Sep97644').set_weights(w) 
w = model.get_layer('Sep30647').get_weights() 
w[0] = np.array([[[[0.9271], [0.389]]]])
w[1] = np.array([[[[0.2881, 0.2445, 0.4114, 0.8388], [0.9637, 0.0105, 0.3874, 0.17]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep30647').set_weights(w) 
in0Lea17537 = tf.constant([[[[[0.0493, 0.342]], [[0.6125, 0.1615]]], [[[0.8411, 0.1029]], [[0.0577, 0.828]]]]])
in0Sof85349 = tf.constant([[[0.2974]]])
in0Con47495 = tf.constant([[[0.8279], [0.3462]]])
in0Con83769 = tf.constant([[[[0.2346, 0.3011, 0.7674], [0.4436, 0.0961, 0.0769], [0.101, 0.6855, 0.2657], [0.5667, 0.7372, 0.1955]], [[0.0887, 0.2865, 0.1512], [0.804, 0.0934, 0.7305], [0.8133, 0.7761, 0.4783], [0.7897, 0.7042, 0.5419]], [[0.7605, 0.9615, 0.3369], [0.2333, 0.7072, 0.3524], [0.6196, 0.4762, 0.356], [0.4434, 0.2155, 0.126]]]])
in0Mul89759 = tf.constant([[[[0.179]]]])
in1Mul89759 = tf.constant([[[[0.2604]]]])
in0Con11389 = tf.constant([[[[[0.2011]], [[0.547]]]]])
in0Min57083 = tf.constant([[[[[0.8498, 0.7947]], [[0.8653, 0.9425]]]]])
in1Min57083 = tf.constant([[[[[0.2798, 0.8229]], [[0.9385, 0.8007]]]]])
print (np.array2string(model.predict([in0Lea17537,in0Sof85349,in0Con47495,in0Con83769,in0Mul89759,in1Mul89759,in0Con11389,in0Min57083,in1Min57083],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max33977.png')

LLea17537 = leaky_relu_layer([[[[[0.0493, 0.342]], [[0.6125, 0.1615]]], [[[0.8411, 0.1029]], [[0.0577, 0.828]]]]], 0.7107984406738307, Lea17537), 
LRes73080 = reshape_layer(Lea17537, [2, 2, 2], Res73080), 
LMax83644 = max_pool2D_layer(Res73080, 2, 1, 1, 1, true, Max83644), 
LRes6809 = reshape_layer(Max83644, [2, 4], Res6809), 
LSep97644 = separable_conv1D_layer(Res6809, 1,[[[[0.8646], [0.0667], [0.9562], [0.1768]]],[[[0.9344, 0.523], [0.7129, 0.6858], [0.4135, 0.4364], [0.5863, 0.794]]]],[0, 0], 1, false, Sep97644), 
LSof85349 = softmax_layer([[[0.2974]]], 1, Sof85349), 
LZer12659 = zero_padding1D_layer(Sof85349, 1, 0, Zer12659), 
LCon47495 = concatenate_layer([Zer12659,[[[0.8279], [0.3462]]]], 2, Con47495), 
LAdd79366 = add_layer([Sep97644,Con47495], Add79366), 
LRes89667 = reshape_layer(Add79366, [2, 2, 1], Res89667), 
LZer10326 = zero_padding2D_layer(Res89667, 1, 0, 2, 0, Zer10326), 
LCon83769 = concatenate_layer([Zer10326,[[[[0.2346, 0.3011, 0.7674], [0.4436, 0.0961, 0.0769], [0.101, 0.6855, 0.2657], [0.5667, 0.7372, 0.1955]], [[0.0887, 0.2865, 0.1512], [0.804, 0.0934, 0.7305], [0.8133, 0.7761, 0.4783], [0.7897, 0.7042, 0.5419]], [[0.7605, 0.9615, 0.3369], [0.2333, 0.7072, 0.3524], [0.6196, 0.4762, 0.356], [0.4434, 0.2155, 0.126]]]]], 3, Con83769), 
LMul89759 = multiply_layer([[[[[0.179]]]], [[[[0.2604]]]]], Mul89759), 
LRes21039 = reshape_layer(Mul89759, [1, 1, 1, 1], Res21039), 
LZer59027 = zero_padding3D_layer(Res21039, 0, 0, 1, 0, 0, 0, Zer59027), 
LCon11389 = concatenate_layer([Zer59027,[[[[[0.2011]], [[0.547]]]]]], 4, Con11389), 
LMin57083 = minimum_layer([[[[[[0.8498, 0.7947]], [[0.8653, 0.9425]]]]], [[[[[0.2798, 0.8229]], [[0.9385, 0.8007]]]]]], Min57083), 
LAdd54536 = add_layer([Con11389,Min57083], Add54536), 
LRes29147 = reshape_layer(Add54536, [1, 2, 2], Res29147), 
LSep30647 = separable_conv2D_layer(Res29147, 1, 1,[[[[[0.9271], [0.389]]]],[[[[0.2881, 0.2445, 0.4114, 0.8388], [0.9637, 0.0105, 0.3874, 0.17]]]]],[0, 0, 0, 0], 1, 1, true, Sep30647), 
LZer32909 = zero_padding2D_layer(Sep30647, 1, 1, 1, 1, Zer32909), 
LMax33977 = maximum_layer([Con83769,Zer32909], Max33977), 
exec_layers([LLea17537,LRes73080,LMax83644,LRes6809,LSep97644,LSof85349,LZer12659,LCon47495,LAdd79366,LRes89667,LZer10326,LCon83769,LMul89759,LRes21039,LZer59027,LCon11389,LMin57083,LAdd54536,LRes29147,LSep30647,LZer32909,LMax33977],["Lea17537","Res73080","Max83644","Res6809","Sep97644","Sof85349","Zer12659","Con47495","Add79366","Res89667","Zer10326","Con83769","Mul89759","Res21039","Zer59027","Con11389","Min57083","Add54536","Res29147","Sep30647","Zer32909","Max33977"],Max33977,"Max33977")

Actual (Unparsed): [[[[0.0000000, 0.2346000, 0.3011000, 0.7674000], [0.0000000, 0.4436000, 0.0961000, 0.0769000], [0.0000000, 0.1010000, 0.6855000, 0.2657000], [0.0000000, 0.5667000, 0.7372000, 0.1955000]], [[0.0000000, 0.0887000, 0.2865000, 0.1512000], [0.4480387, 0.8040000, 0.2567839, 0.7305000], [1.0237763, 0.8133000, 0.7761000, 0.7982728], [1.5956990, 0.7897000, 0.7042000, 0.5419000]], [[0.0000000, 0.7605000, 0.9615000, 0.3369000], [0.0000000, 0.2333000, 0.7072000, 0.3524000], [1.7930453, 0.6196000, 0.4762000, 0.3560000], [0.8715518, 0.4434000, 0.2155000, 0.1260000]]]]

Expected (Unparsed): [[[[0,0.2346,0.3011,0.7674],[0,0.4436,0.0961,0.0769],[0,0.101,0.6855,0.2657],[0,0.5667,0.7372,0.1955]],[[0,0.0887,0.2865,0.1512],[0.448038690238,0.804,0.25678388729199997,0.7305],[1.023776269394,0.8133,0.7761,0.7982728063691681],[1.5956989911,0.7897,0.7042,0.5419]],[[0,0.7605,0.9615,0.3369],[0,0.2333,0.7072,0.3524],[1.793045310821,0.6196,0.4762,0.356],[0.87155177801,0.4434,0.2155,0.126]]]]

Actual:   [[[[0, 0.2346, 0.3011, 0.7674], [0, 0.4436, 0.0961, 0.0769], [0, 0.101, 0.6855, 0.2657], [0, 0.5667, 0.7372, 0.1955]], [[0, 0.0887, 0.2865, 0.1512], [0.4481, 0.804, 0.2568, 0.7305], [1.0238, 0.8133, 0.7761, 0.7983], [1.5957, 0.7897, 0.7042, 0.5419]], [[0, 0.7605, 0.9615, 0.3369], [0, 0.2333, 0.7072, 0.3524], [1.7931, 0.6196, 0.4762, 0.356], [0.8716, 0.4434, 0.2155, 0.126]]]]

Expected: [[[[0, 0.2346, 0.3011, 0.7674], [0, 0.4436, 0.0961, 0.0769], [0, 0.101, 0.6855, 0.2657], [0, 0.5667, 0.7372, 0.1955]], [[0, 0.0887, 0.2865, 0.1512], [0.4481, 0.804, 0.2568, 0.7305], [1.0238, 0.8133, 0.7761, 0.7983], [1.5957, 0.7897, 0.7042, 0.5419]], [[0, 0.7605, 0.9615, 0.3369], [0, 0.2333, 0.7072, 0.3524], [1.7931, 0.6196, 0.4762, 0.356], [0.8716, 0.4434, 0.2155, 0.126]]]]