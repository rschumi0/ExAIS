import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub8963 = tf.keras.layers.Input(shape=([3, 3, 3]))
in1Sub8963 = tf.keras.layers.Input(shape=([3, 3, 3]))
in0Max81126 = tf.keras.layers.Input(shape=([2, 1]))
in1Max81126 = tf.keras.layers.Input(shape=([2, 1]))
in0Con45571 = tf.keras.layers.Input(shape=([3, 7]))

Sub8963 = keras.layers.Subtract(name = 'Sub8963', )([in0Sub8963,in1Sub8963])
Res5575 = keras.layers.Reshape((3, 9), name = 'Res5575', )(Sub8963)
Max81126 = keras.layers.Maximum(name = 'Max81126', )([in0Max81126,in1Max81126])
Per14676 = keras.layers.Permute((2,1), name = 'Per14676',)(Max81126)
Zer25701 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer25701', )(Per14676)
Con45571 = keras.layers.Concatenate(axis=2, name = 'Con45571', )([Zer25701,in0Con45571])
Min70967 = keras.layers.Minimum(name = 'Min70967', )([Res5575,Con45571])
Res13475 = keras.layers.Reshape((3, 9, 1), name = 'Res13475', )(Min70967)
Sep22118 = keras.layers.SeparableConv2D(2, (1, 4),strides=(1, 1), padding='same', name = 'Sep22118', )(Res13475)
model = tf.keras.models.Model(inputs=[in0Sub8963,in1Sub8963,in0Max81126,in1Max81126,in0Con45571], outputs=Sep22118)
w = model.get_layer('Sep22118').get_weights() 
w[0] = np.array([[[[0.9548]], [[0.7642]], [[0.1637]], [[0.4873]]]])
w[1] = np.array([[[[0.1058, 0.7505]]]])
w[2] = np.array([0, 0])
model.get_layer('Sep22118').set_weights(w) 
in0Sub8963 = tf.constant([[[[0.7595, 0.8203, 0.2493], [0.3754, 0.2722, 0.8753], [0.4732, 0.2995, 0.6739]], [[0.8982, 0.2575, 0.3239], [0.4924, 0.3371, 0.2272], [0.3988, 0.3951, 0.4627]], [[0.9266, 0.7017, 0.4473], [0.3391, 0.0692, 0.0022], [0.5335, 0.3184, 0.3651]]]])
in1Sub8963 = tf.constant([[[[0.7848, 0.844, 0.1606], [0.805, 0.8672, 0.2569], [0.6956, 0.7844, 0.7677]], [[0.7786, 0.406, 0.8611], [0.7437, 0.9455, 0.4324], [0.2588, 0.2467, 0.2333]], [[0.2834, 0.4518, 0.523], [0.0752, 0.9633, 0.2964], [0.2261, 0.0455, 0.3245]]]])
in0Max81126 = tf.constant([[[0.2088], [0.1998]]])
in1Max81126 = tf.constant([[[0.1301], [0.1976]]])
in0Con45571 = tf.constant([[[0.4438, 0.5707, 0.0273, 0.8141, 0.0337, 0.0951, 0.8928], [0.8955, 0.4795, 0.4239, 0.9564, 0.666, 0.0371, 0.3272], [0.5343, 0.9828, 0.2351, 0.4829, 0.9677, 0.4467, 0.024]]])
print (np.array2string(model.predict([in0Sub8963,in1Sub8963,in0Max81126,in1Max81126,in0Con45571],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sep22118.png')

LSub8963 = subtract_layer([[[[0.7595, 0.8203, 0.2493], [0.3754, 0.2722, 0.8753], [0.4732, 0.2995, 0.6739]], [[0.8982, 0.2575, 0.3239], [0.4924, 0.3371, 0.2272], [0.3988, 0.3951, 0.4627]], [[0.9266, 0.7017, 0.4473], [0.3391, 0.0692, 0.0022], [0.5335, 0.3184, 0.3651]]]], [[[[0.7848, 0.844, 0.1606], [0.805, 0.8672, 0.2569], [0.6956, 0.7844, 0.7677]], [[0.7786, 0.406, 0.8611], [0.7437, 0.9455, 0.4324], [0.2588, 0.2467, 0.2333]], [[0.2834, 0.4518, 0.523], [0.0752, 0.9633, 0.2964], [0.2261, 0.0455, 0.3245]]]], Sub8963), 
LRes5575 = reshape_layer(Sub8963, [3, 9], Res5575), 
LMax81126 = maximum_layer([[[[0.2088], [0.1998]]], [[[0.1301], [0.1976]]]], Max81126), 
LPer14676 = permute_layer(Max81126, 2,1, Per14676), 
LZer25701 = zero_padding1D_layer(Per14676, 2, 0, Zer25701), 
LCon45571 = concatenate_layer([Zer25701,[[[0.4438, 0.5707, 0.0273, 0.8141, 0.0337, 0.0951, 0.8928], [0.8955, 0.4795, 0.4239, 0.9564, 0.666, 0.0371, 0.3272], [0.5343, 0.9828, 0.2351, 0.4829, 0.9677, 0.4467, 0.024]]]], 2, Con45571), 
LMin70967 = minimum_layer([Res5575,Con45571], Min70967), 
LRes13475 = reshape_layer(Min70967, [3, 9, 1], Res13475), 
LSep22118 = separable_conv2D_layer(Res13475, 1, 4,[[[[[0.9548]], [[0.7642]], [[0.1637]], [[0.4873]]]],[[[[0.1058, 0.7505]]]]],[0, 0], 1, 1, true, Sep22118), 
exec_layers([LSub8963,LRes5575,LMax81126,LPer14676,LZer25701,LCon45571,LMin70967,LRes13475,LSep22118],["Sub8963","Res5575","Max81126","Per14676","Zer25701","Con45571","Min70967","Res13475","Sep22118"],Sep22118,"Sep22118")

Actual (Unparsed): [[[[0.0021170, 0.0150172], [-0.0250843, -0.1779374], [-0.0333390, -0.2364925], [-0.0041965, -0.0297684], [-0.0922602, -0.6544544], [-0.0389580, -0.2763517], [0.0312537, 0.2217002], [-0.0632962, -0.4489965], [-0.0565675, -0.4012657]], [[-0.0302680, -0.2147083], [-0.0342667, -0.2430733], [-0.0941543, -0.6678904], [-0.0957015, -0.6788656], [-0.0709124, -0.5030225], [-0.0737127, -0.5228864], [0.0030600, 0.0217067], [0.0211152, 0.1497822], [0.0222953, 0.1581533]], [[0.0164396, 0.1166154], [0.0495415, 0.3514260], [-0.0274631, -0.1948113], [-0.0169633, -0.1203305], [-0.0348785, -0.2474128], [-0.0947131, -0.6718542], [0.0010984, 0.0077916], [0.0535332, 0.3797414], [0.0295082, 0.2093187]]]]

Expected (Unparsed): [[[[0.0021170114479999932,0.015017174779999951],[-0.025084319846000007,-0.17793744843500003],[-0.033338980792,-0.23649248661999994],[-0.004196529492000001,-0.02976838737000001],[-0.092260194216,-0.6544544022600001],[-0.03895803254600001,-0.27635163918500005],[0.031253676546,0.22170022918499993],[-0.06329624232799999,-0.4489965015799999],[-0.056567501984,-0.40126569223999997]],[[-0.030268005658,-0.21470830100499996],[-0.03426669761400001,-0.243073313415],[-0.094154294586,-0.6678903410849999],[-0.095701502148,-0.67886557053],[-0.070912424608,-0.50302244488],[-0.07371269351400002,-0.5228863561649999],[0.0030600459940000047,0.02170665896500005],[0.02111520428,0.14978223829999998],[0.022295293248000003,0.15815328527999997]],[[0.016439585938,0.11661539930499998],[0.049541461524000005,0.35142596289],[-0.02746307732000001,-0.19481133770000003],[-0.016963317098000006,-0.12033052440500003],[-0.034878453315999994,-0.24741284701000005],[-0.09471308786600001,-0.6718541818850001],[0.001098399729999999,0.0077915784249999905],[0.053533160100000005,0.3797413672500001],[0.029508225176000005,0.20931874286]]]]

Actual:   [[[[0.0022, 0.0151], [-0.025, -0.1779], [-0.0333, -0.2364], [-0.0041, -0.0297], [-0.0922, -0.6544], [-0.0389, -0.2763], [0.0313, 0.2218], [-0.0632, -0.4489], [-0.0565, -0.4012]], [[-0.0302, -0.2147], [-0.0342, -0.243], [-0.0941, -0.6678], [-0.0957, -0.6788], [-0.0709, -0.503], [-0.0737, -0.5228], [0.0031, 0.0218], [0.0212, 0.1498], [0.0223, 0.1582]], [[0.0165, 0.1167], [0.0496, 0.3515], [-0.0274, -0.1948], [-0.0169, -0.1203], [-0.0348, -0.2474], [-0.0947, -0.6718], [0.0011, 0.0078], [0.0536, 0.3798], [0.0296, 0.2094]]]]

Expected: [[[[0.0022, 0.0151], [-0.025, -0.1779], [-0.0333, -0.2364], [-0.0041, -0.0297], [-0.0922, -0.6544], [-0.0389, -0.2763], [0.0313, 0.2218], [-0.0632, -0.4489], [-0.0565, -0.4012]], [[-0.0302, -0.2147], [-0.0342, -0.243], [-0.0941, -0.6678], [-0.0957, -0.6788], [-0.0709, -0.503], [-0.0737, -0.5228], [0.0031, 0.0218], [0.0212, 0.1498], [0.0223, 0.1582]], [[0.0165, 0.1167], [0.0496, 0.3515], [-0.0274, -0.1948], [-0.0169, -0.1203], [-0.0348, -0.2474], [-0.0947, -0.6718], [0.0011, 0.0078], [0.0536, 0.3798], [0.0296, 0.2094]]]]