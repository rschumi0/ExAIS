import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add85619 = tf.keras.layers.Input(shape=([2, 1]))
in1Add85619 = tf.keras.layers.Input(shape=([2, 1]))
in0Con59368 = tf.keras.layers.Input(shape=([2, 2, 6, 1]))
in0Min35069 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Min35069 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))

Add85619 = keras.layers.Add(name = 'Add85619', )([in0Add85619,in1Add85619])
Res37156 = keras.layers.Reshape((2, 1, 1), name = 'Res37156', )(Add85619)
Sep59057 = keras.layers.SeparableConv2D(4, (1, 1),strides=(2, 2), padding='same', name = 'Sep59057', )(Res37156)
Res90974 = keras.layers.Reshape((1, 1, 4, 1), name = 'Res90974', )(Sep59057)
Zer63722 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (2, 0)), name = 'Zer63722', )(Res90974)
Con59368 = keras.layers.Concatenate(axis=4, name = 'Con59368', )([Zer63722,in0Con59368])
Min35069 = keras.layers.Minimum(name = 'Min35069', )([in0Min35069,in1Min35069])
Zer12417 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (4, 0)), name = 'Zer12417', )(Min35069)
Min69508 = keras.layers.Minimum(name = 'Min69508', )([Con59368,Zer12417])
Con1745 = keras.layers.Conv3D(4, (1, 1, 5),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con1745', )(Min69508)
model = tf.keras.models.Model(inputs=[in0Add85619,in1Add85619,in0Con59368,in0Min35069,in1Min35069], outputs=Con1745)
w = model.get_layer('Sep59057').get_weights() 
w[0] = np.array([[[[0.4519]]]])
w[1] = np.array([[[[0.6767, 0.5157, 0.9294, 0.0632]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep59057').set_weights(w) 
w = model.get_layer('Con1745').get_weights() 
w[0] = np.array([[[[[0.2, 0.4401, 0.2682, 0.6681], [0.4276, 0.6523, 0.7704, 0.3119]], [[0.3808, 0.3891, 0.8394, 0.5093], [0.371, 0.7835, 0.0243, 0.7453]], [[0.9502, 0.9366, 0.0164, 0.6289], [0.3232, 0.4949, 0.583, 0.9371]], [[0.2433, 0.763, 0.8616, 0.9163], [0.8135, 0.5843, 0.4036, 0.6854]], [[0.8697, 0.077, 0.3735, 0.8288], [0.6528, 0.1964, 0.6091, 0.0381]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con1745').set_weights(w) 
in0Add85619 = tf.constant([[[0.2471], [0.5074]]])
in1Add85619 = tf.constant([[[0.1429], [0.2586]]])
in0Con59368 = tf.constant([[[[[0.0608], [0.6193], [0.8818], [0.8955], [0.8348], [0.729]], [[0.389], [0.3821], [0.8591], [0.4112], [0.6361], [0.3024]]], [[[0.7838], [0.3858], [0.0394], [0.531], [0.2603], [0.2214]], [[0.5468], [0.7395], [0.8321], [0.6682], [0.6212], [0.3963]]]]])
in0Min35069 = tf.constant([[[[[0.7892, 0.805], [0.8967, 0.9933]], [[0.6087, 0.1146], [0.2331, 0.6001]]], [[[0.7833, 0.1189], [0.6472, 0.1292]], [[0.619, 0.7348], [0.2665, 0.5431]]]]])
in1Min35069 = tf.constant([[[[[0.0599, 0.4569], [0.9804, 0.633]], [[0.9964, 0.4676], [0.1279, 0.4991]]], [[[0.0064, 0.7143], [0.3225, 0.4023]], [[0.1889, 0.471], [0.8152, 0.9424]]]]])
print (np.array2string(model.predict([in0Add85619,in1Add85619,in0Con59368,in0Min35069,in1Min35069],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con1745.png')

LAdd85619 = add_layer([[[[0.2471], [0.5074]]], [[[0.1429], [0.2586]]]], Add85619), 
LRes37156 = reshape_layer(Add85619, [2, 1, 1], Res37156), 
LSep59057 = separable_conv2D_layer(Res37156, 1, 1,[[[[[0.4519]]]],[[[[0.6767, 0.5157, 0.9294, 0.0632]]]]],[0, 0, 0, 0], 2, 2, true, Sep59057), 
LRes90974 = reshape_layer(Sep59057, [1, 1, 4, 1], Res90974), 
LZer63722 = zero_padding3D_layer(Res90974, 1, 0, 1, 0, 2, 0, Zer63722), 
LCon59368 = concatenate_layer([Zer63722,[[[[[0.0608], [0.6193], [0.8818], [0.8955], [0.8348], [0.729]], [[0.389], [0.3821], [0.8591], [0.4112], [0.6361], [0.3024]]], [[[0.7838], [0.3858], [0.0394], [0.531], [0.2603], [0.2214]], [[0.5468], [0.7395], [0.8321], [0.6682], [0.6212], [0.3963]]]]]], 4, Con59368), 
LMin35069 = minimum_layer([[[[[[0.7892, 0.805], [0.8967, 0.9933]], [[0.6087, 0.1146], [0.2331, 0.6001]]], [[[0.7833, 0.1189], [0.6472, 0.1292]], [[0.619, 0.7348], [0.2665, 0.5431]]]]], [[[[[0.0599, 0.4569], [0.9804, 0.633]], [[0.9964, 0.4676], [0.1279, 0.4991]]], [[[0.0064, 0.7143], [0.3225, 0.4023]], [[0.1889, 0.471], [0.8152, 0.9424]]]]]], Min35069), 
LZer12417 = zero_padding3D_layer(Min35069, 0, 0, 0, 0, 4, 0, Zer12417), 
LMin69508 = minimum_layer([Con59368,Zer12417], Min69508), 
LCon1745 = conv3D_layer(Min69508, 1, 1, 5,[[[[[0.2, 0.4401, 0.2682, 0.6681], [0.4276, 0.6523, 0.7704, 0.3119]], [[0.3808, 0.3891, 0.8394, 0.5093], [0.371, 0.7835, 0.0243, 0.7453]], [[0.9502, 0.9366, 0.0164, 0.6289], [0.3232, 0.4949, 0.583, 0.9371]], [[0.2433, 0.763, 0.8616, 0.9163], [0.8135, 0.5843, 0.4036, 0.6854]], [[0.8697, 0.077, 0.3735, 0.8288], [0.6528, 0.1964, 0.6091, 0.0381]]]]],[0, 0, 0, 0], 1, 1, 1, false, 1, 1, 1, Con1745), 
exec_layers([LAdd85619,LRes37156,LSep59057,LRes90974,LZer63722,LCon59368,LMin35069,LZer12417,LMin69508,LCon1745],["Add85619","Res37156","Sep59057","Res90974","Zer63722","Con59368","Min35069","Zer12417","Min69508","Con1745"],Con1745,"Con1745")

Actual (Unparsed): [[[[[0.2982643, 0.0897352, 0.2782978, 0.0174079], [0.7849106, 0.3912879, 0.5699652, 0.3372766]], [[0.0748109, 0.0225074, 0.0698029, 0.0043663], [0.2906338, 0.1263521, 0.2304444, 0.0900683]]], [[[0.0776179, 0.0233520, 0.0724220, 0.0045301], [0.1810669, 0.0948481, 0.1266838, 0.0864166]], [[0.4499242, 0.1051169, 0.3480648, 0.1537012], [0.6914024, 0.4788744, 0.5767708, 0.4972424]]]]]

Expected (Unparsed): [[[[[0.29826432,0.08973516,0.27829779,0.01740789],[0.78491055,0.39128787,0.56996514,0.33727656]],[[0.07481088,0.022507439999999997,0.06980286,0.00436626],[0.29063382,0.12635214,0.2304444,0.09006828]]],[[[0.07761792,0.02335196,0.07242199,0.0045300900000000005],[0.18106691000000003,0.09484815,0.12668376,0.08641658]],[[0.44992425578238,0.10511687567579998,0.34806479694689996,0.15370120181952],[0.6914023807824599,0.4788744472626,0.57677082291384,0.49724242232058]]]]]

Actual:   [[[[[0.2983, 0.0898, 0.2783, 0.0175], [0.785, 0.3913, 0.57, 0.3373]], [[0.0749, 0.0226, 0.0699, 0.0044], [0.2907, 0.1264, 0.2305, 0.0901]]], [[[0.0777, 0.0234, 0.0725, 0.0046], [0.1811, 0.0949, 0.1267, 0.0865]], [[0.45, 0.1052, 0.3481, 0.1538], [0.6915, 0.4789, 0.5768, 0.4973]]]]]

Expected: [[[[[0.2983, 0.0898, 0.2783, 0.0175], [0.785, 0.3913, 0.57, 0.3373]], [[0.0749, 0.0226, 0.0699, 0.0044], [0.2907, 0.1264, 0.2305, 0.0901]]], [[[0.0777, 0.0234, 0.0725, 0.0046], [0.1811, 0.0949, 0.1267, 0.0865]], [[0.45, 0.1052, 0.3481, 0.1538], [0.6915, 0.4789, 0.5768, 0.4973]]]]]