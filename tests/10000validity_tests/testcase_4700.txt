import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul58638 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Mul58638 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Ave61642 = tf.keras.layers.Input(shape=([2, 1]))
in1Ave61642 = tf.keras.layers.Input(shape=([2, 1]))
in0Con98140 = tf.keras.layers.Input(shape=([2, 1]))
in0Con58283 = tf.keras.layers.Input(shape=([3, 7]))
in0Den16564 = tf.keras.layers.Input(shape=([3, 3, 2]))
in0Mul63736 = tf.keras.layers.Input(shape=([1, 1]))
in1Mul63736 = tf.keras.layers.Input(shape=([1, 1]))
in0Con7240 = tf.keras.layers.Input(shape=([3, 8]))
in0Con12404 = tf.keras.layers.Input(shape=([3, 6]))
in0Up_43591 = tf.keras.layers.Input(shape=([1, 3]))

Mul58638 = keras.layers.Multiply(name = 'Mul58638', )([in0Mul58638,in1Mul58638])
Res61079 = keras.layers.Reshape((2, 2), name = 'Res61079', )(Mul58638)
Ave61642 = keras.layers.Average(name = 'Ave61642', )([in0Ave61642,in1Ave61642])
Con98140 = keras.layers.Concatenate(axis=2, name = 'Con98140', )([Ave61642,in0Con98140])
Max65681 = keras.layers.Maximum(name = 'Max65681', )([Res61079,Con98140])
Zer22225 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer22225', )(Max65681)
Con58283 = keras.layers.Concatenate(axis=2, name = 'Con58283', )([Zer22225,in0Con58283])
Den16564 = keras.layers.Dense(3,name = 'Den16564', )(in0Den16564)
Res1062 = keras.layers.Reshape((3, 9), name = 'Res1062', )(Den16564)
Mul63736 = keras.layers.Multiply(name = 'Mul63736', )([in0Mul63736,in1Mul63736])
Zer35301 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer35301', )(Mul63736)
Con7240 = keras.layers.Concatenate(axis=2, name = 'Con7240', )([Zer35301,in0Con7240])
Max55856 = keras.layers.Maximum(name = 'Max55856', )([Res1062,Con7240])
Add92254 = keras.layers.Add(name = 'Add92254', )([Con58283,Max55856])
Con12404 = keras.layers.Concatenate(axis=2, name = 'Con12404', )([Add92254,in0Con12404])
Up_43591 = keras.layers.UpSampling1D(size=(2), name = 'Up_43591', )(in0Up_43591)
Zer21503 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer21503', )(Up_43591)
Dot50513 = keras.layers.Dot(axes=(1, 1), name = 'Dot50513', )([Con12404,Zer21503])
model = tf.keras.models.Model(inputs=[in0Mul58638,in1Mul58638,in0Ave61642,in1Ave61642,in0Con98140,in0Con58283,in0Den16564,in0Mul63736,in1Mul63736,in0Con7240,in0Con12404,in0Up_43591], outputs=Dot50513)
w = model.get_layer('Den16564').get_weights() 
w[0] = np.array([[0.3553, 0.6751, 0.1957], [0.8008, 0.7284, 0.8431]])
w[1] = np.array([0.7106, 0.1759, 0.4936])
model.get_layer('Den16564').set_weights(w) 
in0Mul58638 = tf.constant([[[[0.6166], [0.0068]], [[0.5179], [0.3202]]]])
in1Mul58638 = tf.constant([[[[0.3338], [0.8974]], [[0.6921], [0.2214]]]])
in0Ave61642 = tf.constant([[[0.719], [0.2623]]])
in1Ave61642 = tf.constant([[[0.1705], [0.306]]])
in0Con98140 = tf.constant([[[0.1516], [0.3091]]])
in0Con58283 = tf.constant([[[0.7547, 0.6681, 0.7482, 0.6788, 0.4938, 0.3105, 0.2908], [0.2122, 0.1955, 0.9106, 0.7211, 0.412, 0.4053, 0.1309], [0.5455, 0.8372, 0.8349, 0.7262, 0.3037, 0.4227, 0.3657]]])
in0Den16564 = tf.constant([[[[0.3351, 0.9868], [0.7696, 0.41], [0.5286, 0.0799]], [[0.1359, 0.3423], [0.2879, 0.2768], [0.9449, 0.2007]], [[0.6272, 0.8777], [0.0524, 0.087], [0.7269, 0.7779]]]])
in0Mul63736 = tf.constant([[[0.2892]]])
in1Mul63736 = tf.constant([[[0.6714]]])
in0Con7240 = tf.constant([[[0.0135, 0.9285, 0.2315, 0.0249, 0.4584, 0.2271, 0.3191, 0.5021], [0.1206, 0.4235, 0.6665, 0.2389, 0.9147, 0.2271, 0.9023, 0.2848], [0.8445, 0.0919, 0.7537, 0.1676, 0.9359, 0.0301, 0.5627, 0.2053]]])
in0Con12404 = tf.constant([[[0.6946, 0.0771, 0.8218, 0.3308, 0.086, 0.4139], [0.3211, 0.4411, 0.8016, 0.626, 0.4118, 0.0376], [0.9559, 0.3386, 0.0357, 0.3024, 0.6843, 0.4706]]])
in0Up_43591 = tf.constant([[[1.7059, 1.9226, 1.3115]]])
print (np.array2string(model.predict([in0Mul58638,in1Mul58638,in0Ave61642,in1Ave61642,in0Con98140,in0Con58283,in0Den16564,in0Mul63736,in1Mul63736,in0Con7240,in0Con12404,in0Up_43591],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Dot50513.png')

LMul58638 = multiply_layer([[[[[0.6166], [0.0068]], [[0.5179], [0.3202]]]], [[[[0.3338], [0.8974]], [[0.6921], [0.2214]]]]], Mul58638), 
LRes61079 = reshape_layer(Mul58638, [2, 2], Res61079), 
LAve61642 = average_layer([[[[0.719], [0.2623]]], [[[0.1705], [0.306]]]], Ave61642), 
LCon98140 = concatenate_layer([Ave61642,[[[0.1516], [0.3091]]]], 2, Con98140), 
LMax65681 = maximum_layer([Res61079,Con98140], Max65681), 
LZer22225 = zero_padding1D_layer(Max65681, 1, 0, Zer22225), 
LCon58283 = concatenate_layer([Zer22225,[[[0.7547, 0.6681, 0.7482, 0.6788, 0.4938, 0.3105, 0.2908], [0.2122, 0.1955, 0.9106, 0.7211, 0.412, 0.4053, 0.1309], [0.5455, 0.8372, 0.8349, 0.7262, 0.3037, 0.4227, 0.3657]]]], 2, Con58283), 
LDen16564 = dense_layer([[[[0.3351, 0.9868], [0.7696, 0.41], [0.5286, 0.0799]], [[0.1359, 0.3423], [0.2879, 0.2768], [0.9449, 0.2007]], [[0.6272, 0.8777], [0.0524, 0.087], [0.7269, 0.7779]]]], [[0.3553, 0.6751, 0.1957], [0.8008, 0.7284, 0.8431]],[0.7106, 0.1759, 0.4936], Den16564), 
LRes1062 = reshape_layer(Den16564, [3, 9], Res1062), 
LMul63736 = multiply_layer([[[[0.2892]]], [[[0.6714]]]], Mul63736), 
LZer35301 = zero_padding1D_layer(Mul63736, 2, 0, Zer35301), 
LCon7240 = concatenate_layer([Zer35301,[[[0.0135, 0.9285, 0.2315, 0.0249, 0.4584, 0.2271, 0.3191, 0.5021], [0.1206, 0.4235, 0.6665, 0.2389, 0.9147, 0.2271, 0.9023, 0.2848], [0.8445, 0.0919, 0.7537, 0.1676, 0.9359, 0.0301, 0.5627, 0.2053]]]], 2, Con7240), 
LMax55856 = maximum_layer([Res1062,Con7240], Max55856), 
LAdd92254 = add_layer([Con58283,Max55856], Add92254), 
LCon12404 = concatenate_layer([Add92254,[[[0.6946, 0.0771, 0.8218, 0.3308, 0.086, 0.4139], [0.3211, 0.4411, 0.8016, 0.626, 0.4118, 0.0376], [0.9559, 0.3386, 0.0357, 0.3024, 0.6843, 0.4706]]]], 2, Con12404), 
LUp_43591 = up_sampling1D_layer([[[1.7059, 1.9226, 1.3115]]], 2, Up_43591), 
LZer21503 = zero_padding1D_layer(Up_43591, 1, 0, Zer21503), 
LDot50513 = dot_layer(Con12404,Zer21503, 1, 1, Dot50513), 
exec_layers([LMul58638,LRes61079,LAve61642,LCon98140,LMax65681,LZer22225,LCon58283,LDen16564,LRes1062,LMul63736,LZer35301,LCon7240,LMax55856,LAdd92254,LCon12404,LUp_43591,LZer21503,LDot50513],["Mul58638","Res61079","Ave61642","Con98140","Max65681","Zer22225","Con58283","Den16564","Res1062","Mul63736","Zer35301","Con7240","Max55856","Add92254","Con12404","Up_43591","Zer21503","Dot50513"],Dot50513,"Dot50513")

Actual (Unparsed): [[[5.9237273, 6.6762170, 4.5541757], [3.7808147, 4.2610908, 2.9066994], [4.9860396, 5.6194150, 3.8332791], [4.8893474, 5.5104401, 3.7589420], [4.4217413, 4.9834340, 3.3994452], [5.6258873, 6.3405425, 4.3251956], [5.9954765, 6.7570805, 4.6093366], [5.1539406, 5.8086445, 3.9623618], [4.4968016, 5.0680292, 3.4571518], [2.1784343, 2.4551603, 1.6747855], [1.3300902, 1.4990513, 1.0225765], [1.4283500, 1.6097930, 1.0981189], [1.5837575, 1.7849418, 1.2175965], [1.8698369, 2.1073619, 1.4375351], [0.8669384, 0.9770654, 0.6665043]]]

Expected (Unparsed): [[[5.923727548718,6.676217002852001,4.55417590723],[3.7808148461789997,4.261090698906,2.906699496315],[4.986039780953,5.619415020142,3.8332793087050003],[4.889347594817,5.510440052638,3.758942124745001],[4.4217413328549995,4.98343389797,3.399445312175],[5.6258876099999995,6.3405425399999995,4.32519585],[5.995476679178,6.757080405292,4.60933681033],[5.153940856078,5.808644521892001,3.962362056830001],[4.496801734628,5.068029201592,3.45715192858],[2.1784342999999997,2.4551602,1.6747855],[1.33009023,1.4990512200000001,1.0225765500000001],[1.4283500699999998,1.6097929800000002,1.0981189500000001],[1.58375756,1.7849418400000001,1.2175966],[1.86983699,2.10736186,1.43753515],[0.86693838,0.97706532,0.6665043000000002]]]

Actual:   [[[5.9238, 6.6763, 4.5542], [3.7809, 4.2611, 2.9067], [4.9861, 5.6195, 3.8333], [4.8894, 5.5105, 3.759], [4.4218, 4.9835, 3.3995], [5.6259, 6.3406, 4.3252], [5.9955, 6.7571, 4.6094], [5.154, 5.8087, 3.9624], [4.4969, 5.0681, 3.4572], [2.1785, 2.4552, 1.6748], [1.3301, 1.4991, 1.0226], [1.4284, 1.6098, 1.0982], [1.5838, 1.785, 1.2176], [1.8699, 2.1074, 1.4376], [0.867, 0.9771, 0.6666]]]

Expected: [[[5.9238, 6.6763, 4.5542], [3.7809, 4.2611, 2.9067], [4.9861, 5.6195, 3.8333], [4.8894, 5.5105, 3.759], [4.4218, 4.9835, 3.3995], [5.6259, 6.3406, 4.3252], [5.9955, 6.7571, 4.6094], [5.154, 5.8087, 3.9624], [4.4969, 5.0681, 3.4572], [2.1785, 2.4552, 1.6748], [1.3301, 1.4991, 1.0226], [1.4284, 1.6098, 1.0982], [1.5838, 1.785, 1.2176], [1.8699, 2.1074, 1.4376], [0.867, 0.9771, 0.6666]]]