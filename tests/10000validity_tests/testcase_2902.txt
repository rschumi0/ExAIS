import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul13011 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in1Mul13011 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in0Con68602 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Add68026 = tf.keras.layers.Input(shape=([2, 2]))
in1Add68026 = tf.keras.layers.Input(shape=([2, 2]))

Mul13011 = keras.layers.Multiply(name = 'Mul13011', )([in0Mul13011,in1Mul13011])
Res28144 = keras.layers.Reshape((2, 1, 2), name = 'Res28144', )(Mul13011)
Ave83242 = keras.layers.AveragePooling2D(pool_size=(1, 1), strides=(1, 1), padding='valid', name = 'Ave83242', )(Res28144)
Zer7495 = keras.layers.ZeroPadding2D(padding=((0, 0), (1, 0)), name = 'Zer7495', )(Ave83242)
Con68602 = keras.layers.Concatenate(axis=3, name = 'Con68602', )([Zer7495,in0Con68602])
Add68026 = keras.layers.Add(name = 'Add68026', )([in0Add68026,in1Add68026])
Res50750 = keras.layers.Reshape((2, 2, 1), name = 'Res50750', )(Add68026)
Con38267 = keras.layers.Conv2D(3, (1, 1),strides=(1, 1), padding='valid', dilation_rate=(1, 1), name = 'Con38267', )(Res50750)
Ave79044 = keras.layers.Average(name = 'Ave79044', )([Con68602,Con38267])
Res61346 = keras.layers.Reshape((2, 2, 3, 1), name = 'Res61346', )(Ave79044)
Zer1234 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer1234', )(Res61346)
model = tf.keras.models.Model(inputs=[in0Mul13011,in1Mul13011,in0Con68602,in0Add68026,in1Add68026], outputs=Zer1234)
w = model.get_layer('Con38267').get_weights() 
w[0] = np.array([[[[0.1231, 0.1425, 0.2704]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con38267').set_weights(w) 
in0Mul13011 = tf.constant([[[[[0.8026], [0.1479]]], [[[0.2749], [0.9603]]]]])
in1Mul13011 = tf.constant([[[[[0.356], [0.4266]]], [[[0.6221], [0.6571]]]]])
in0Con68602 = tf.constant([[[[0.7338], [0.2354]], [[0.1467], [0.609]]]])
in0Add68026 = tf.constant([[[0.1679, 0.6613], [0.4453, 0.1709]]])
in1Add68026 = tf.constant([[[0.2482, 0.0723], [0.0449, 0.9467]]])
print (np.array2string(model.predict([in0Mul13011,in1Mul13011,in0Con68602,in0Add68026,in1Add68026],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Zer1234.png')

LMul13011 = multiply_layer([[[[[[0.8026], [0.1479]]], [[[0.2749], [0.9603]]]]], [[[[[0.356], [0.4266]]], [[[0.6221], [0.6571]]]]]], Mul13011), 
LRes28144 = reshape_layer(Mul13011, [2, 1, 2], Res28144), 
LAve83242 = average_pooling2D_layer(Res28144, 1, 1, 1, 1, false, Ave83242), 
LZer7495 = zero_padding2D_layer(Ave83242, 0, 0, 1, 0, Zer7495), 
LCon68602 = concatenate_layer([Zer7495,[[[[0.7338], [0.2354]], [[0.1467], [0.609]]]]], 3, Con68602), 
LAdd68026 = add_layer([[[[0.1679, 0.6613], [0.4453, 0.1709]]], [[[0.2482, 0.0723], [0.0449, 0.9467]]]], Add68026), 
LRes50750 = reshape_layer(Add68026, [2, 2, 1], Res50750), 
LCon38267 = conv2D_layer(Res50750, 1, 1,[[[[0.1231, 0.1425, 0.2704]]]],[0, 0, 0], 1, 1, false, 1, 1, Con38267), 
LAve79044 = average_layer([Con68602,Con38267], Ave79044), 
LRes61346 = reshape_layer(Ave79044, [2, 2, 3, 1], Res61346), 
LZer1234 = zero_padding3D_layer(Res61346, 1, 1, 1, 1, 1, 1, Zer1234), 
exec_layers([LMul13011,LRes28144,LAve83242,LZer7495,LCon68602,LAdd68026,LRes50750,LCon38267,LAve79044,LRes61346,LZer1234],["Mul13011","Res28144","Ave83242","Zer7495","Con68602","Add68026","Res50750","Con38267","Ave79044","Res61346","Zer1234"],Zer1234,"Zer1234")

Actual (Unparsed): [[[[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0256110], [0.0296471], [0.4231567], [0.0000000]], [[0.0000000], [0.1880159], [0.0838161], [0.2168827], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0301718], [0.0349268], [0.1396250], [0.0000000]], [[0.0000000], [0.1542959], [0.3951356], [0.4555995], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000], [0.0000000], [0.0000000]]]]]

Expected (Unparsed): [[[[[0],[0],[0],[0],[0]],[[0],[0],[0],[0],[0]],[[0],[0],[0],[0],[0]],[[0],[0],[0],[0],[0]]],[[[0],[0],[0],[0],[0]],[[0],[0.025610955],[0.029647125],[0.42315672],[0]],[[0],[0.18801588],[0.08381606999999999],[0.21688271999999997],[0]],[[0],[0],[0],[0],[0]]],[[[0],[0],[0],[0],[0]],[[0],[0.030171809999999997],[0.03492674999999999],[0.13962503999999998],[0]],[[0],[0.154295925],[0.395135565],[0.45559952],[0]],[[0],[0],[0],[0],[0]]],[[[0],[0],[0],[0],[0]],[[0],[0],[0],[0],[0]],[[0],[0],[0],[0],[0]],[[0],[0],[0],[0],[0]]]]]

Actual:   [[[[[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]]], [[[0], [0], [0], [0], [0]], [[0], [0.0257], [0.0297], [0.4232], [0]], [[0], [0.1881], [0.0839], [0.2169], [0]], [[0], [0], [0], [0], [0]]], [[[0], [0], [0], [0], [0]], [[0], [0.0302], [0.035], [0.1397], [0]], [[0], [0.1543], [0.3952], [0.4556], [0]], [[0], [0], [0], [0], [0]]], [[[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]]]]]

Expected: [[[[[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]]], [[[0], [0], [0], [0], [0]], [[0], [0.0257], [0.0297], [0.4232], [0]], [[0], [0.1881], [0.0839], [0.2169], [0]], [[0], [0], [0], [0], [0]]], [[[0], [0], [0], [0], [0]], [[0], [0.0302], [0.035], [0.1397], [0]], [[0], [0.1543], [0.3952], [0.4556], [0]], [[0], [0], [0], [0], [0]]], [[[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]], [[0], [0], [0], [0], [0]]]]]