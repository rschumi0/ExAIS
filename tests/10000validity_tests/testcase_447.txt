import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min83395 = tf.keras.layers.Input(shape=([1, 2, 1]))
in1Min83395 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con26169 = tf.keras.layers.Input(shape=([3, 2, 3, 1]))
in0Sub86836 = tf.keras.layers.Input(shape=([3, 2, 3, 2]))
in1Sub86836 = tf.keras.layers.Input(shape=([3, 2, 3, 2]))

Min83395 = keras.layers.Minimum(name = 'Min83395', )([in0Min83395,in1Min83395])
Dep73679 = keras.layers.DepthwiseConv2D((2, 1),strides=(1, 1), padding='same', name = 'Dep73679', )(Min83395)
Res31611 = keras.layers.Reshape((1, 2), name = 'Res31611', )(Dep73679)
Glo25756 = keras.layers.GlobalMaxPool1D(name = 'Glo25756', )(Res31611)
Res44898 = keras.layers.Reshape((2, 1), name = 'Res44898', )(Glo25756)
Res20805 = keras.layers.Reshape((2, 1, 1), name = 'Res20805', )(Res44898)
Res31631 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res31631', )(Res20805)
Zer65853 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (2, 0)), name = 'Zer65853', )(Res31631)
Con26169 = keras.layers.Concatenate(axis=4, name = 'Con26169', )([Zer65853,in0Con26169])
Sub86836 = keras.layers.Subtract(name = 'Sub86836', )([in0Sub86836,in1Sub86836])
Max16144 = keras.layers.Maximum(name = 'Max16144', )([Con26169,Sub86836])
model = tf.keras.models.Model(inputs=[in0Min83395,in1Min83395,in0Con26169,in0Sub86836,in1Sub86836], outputs=Max16144)
w = model.get_layer('Dep73679').get_weights() 
w[0] = np.array([[[[0.1171]]], [[[0.9613]]]])
w[1] = np.array([0])
model.get_layer('Dep73679').set_weights(w) 
in0Min83395 = tf.constant([[[[0.7499], [0.5153]]]])
in1Min83395 = tf.constant([[[[0.3423], [0.9855]]]])
in0Con26169 = tf.constant([[[[[0.9708], [0.5461], [0.5607]], [[0.7844], [0.2896], [0.7232]]], [[[0.0566], [0.6848], [0.7624]], [[0.4466], [0.6636], [0.093]]], [[[0.4374], [0.3448], [0.6207]], [[0.6212], [0.4567], [0.9912]]]]])
in0Sub86836 = tf.constant([[[[[0.7603, 0.9272], [0.7749, 0.9291], [0.5971, 0.4319]], [[0.4988, 0.7567], [0.6535, 0.333], [0.8783, 0.4874]]], [[[0.5948, 0.1144], [0.2334, 0.1024], [0.1443, 0.5961]], [[0.3443, 0.5806], [0.8087, 0.2261], [0.5583, 0.2604]]], [[[0.1864, 0.9649], [0.3148, 0.3296], [0.482, 0.3609]], [[0.2733, 0.4077], [0.8545, 0.835], [0.1286, 0.1172]]]]])
in1Sub86836 = tf.constant([[[[[0.2725, 0.9011], [0.6277, 0.2659], [0.6165, 0.0303]], [[0.2651, 0.7584], [0.8727, 0.1366], [0.6258, 0.6412]]], [[[0.3975, 0.2073], [0.3712, 0.7468], [0.394, 0.4317]], [[0.4164, 0.2466], [0.9412, 0.2923], [0.937, 0.052]]], [[[0.1427, 0.4729], [0.459, 0.4042], [0.2201, 0.1123]], [[0.4371, 0.1888], [0.6672, 0.8854], [0.4063, 0.4748]]]]])
print (np.array2string(model.predict([in0Min83395,in1Min83395,in0Con26169,in0Sub86836,in1Sub86836],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max16144.png')

LMin83395 = minimum_layer([[[[[0.7499], [0.5153]]]], [[[[0.3423], [0.9855]]]]], Min83395), 
LDep73679 = depthwise_conv2D_layer(Min83395, 2, 1,[[[[0.1171]]], [[[0.9613]]]],[0], 1, 1, true, Dep73679), 
LRes31611 = reshape_layer(Dep73679, [1, 2], Res31611), 
LGlo25756 = global_max_pool1D_layer(Res31611, Glo25756), 
LRes44898 = reshape_layer(Glo25756, [2, 1], Res44898), 
LRes20805 = reshape_layer(Res44898, [2, 1, 1], Res20805), 
LRes31631 = reshape_layer(Res20805, [2, 1, 1, 1], Res31631), 
LZer65853 = zero_padding3D_layer(Res31631, 1, 0, 1, 0, 2, 0, Zer65853), 
LCon26169 = concatenate_layer([Zer65853,[[[[[0.9708], [0.5461], [0.5607]], [[0.7844], [0.2896], [0.7232]]], [[[0.0566], [0.6848], [0.7624]], [[0.4466], [0.6636], [0.093]]], [[[0.4374], [0.3448], [0.6207]], [[0.6212], [0.4567], [0.9912]]]]]], 4, Con26169), 
LSub86836 = subtract_layer([[[[[0.7603, 0.9272], [0.7749, 0.9291], [0.5971, 0.4319]], [[0.4988, 0.7567], [0.6535, 0.333], [0.8783, 0.4874]]], [[[0.5948, 0.1144], [0.2334, 0.1024], [0.1443, 0.5961]], [[0.3443, 0.5806], [0.8087, 0.2261], [0.5583, 0.2604]]], [[[0.1864, 0.9649], [0.3148, 0.3296], [0.482, 0.3609]], [[0.2733, 0.4077], [0.8545, 0.835], [0.1286, 0.1172]]]]], [[[[[0.2725, 0.9011], [0.6277, 0.2659], [0.6165, 0.0303]], [[0.2651, 0.7584], [0.8727, 0.1366], [0.6258, 0.6412]]], [[[0.3975, 0.2073], [0.3712, 0.7468], [0.394, 0.4317]], [[0.4164, 0.2466], [0.9412, 0.2923], [0.937, 0.052]]], [[[0.1427, 0.4729], [0.459, 0.4042], [0.2201, 0.1123]], [[0.4371, 0.1888], [0.6672, 0.8854], [0.4063, 0.4748]]]]], Sub86836), 
LMax16144 = maximum_layer([Con26169,Sub86836], Max16144), 
exec_layers([LMin83395,LDep73679,LRes31611,LGlo25756,LRes44898,LRes20805,LRes31631,LZer65853,LCon26169,LSub86836,LMax16144],["Min83395","Dep73679","Res31611","Glo25756","Res44898","Res20805","Res31631","Zer65853","Con26169","Sub86836","Max16144"],Max16144,"Max16144")

Actual (Unparsed): [[[[[0.4878000, 0.9708000], [0.1472000, 0.6632000], [0.0000000, 0.5607000]], [[0.2337000, 0.7844000], [0.0000000, 0.2896000], [0.2525000, 0.7232000]]], [[[0.1973000, 0.0566000], [0.0000000, 0.6848000], [0.0000000, 0.7624000]], [[0.0000000, 0.4466000], [0.0000000, 0.6636000], [0.0400833, 0.2084000]]], [[[0.0437000, 0.4920000], [0.0000000, 0.3448000], [0.2619000, 0.6207000]], [[0.0000000, 0.6212000], [0.1873000, 0.4567000], [0.0603416, 0.9912000]]]]]

Expected (Unparsed): [[[[[0.48779999999999996,0.9708],[0.1472,0.6632],[0,0.5607]],[[0.23370000000000002,0.7844],[0,0.2896],[0.25249999999999995,0.7232]]],[[[0.19729999999999998,0.0566],[0,0.6848],[0,0.7624]],[[0,0.4466],[0,0.6636],[0.04008333,0.20840000000000003]]],[[[0.04370000000000002,0.492],[0,0.3448],[0.2619,0.6207]],[[0,0.6212],[0.18730000000000002,0.4567],[0.06034162999999999,0.9912]]]]]

Actual:   [[[[[0.4878, 0.9708], [0.1472, 0.6632], [0, 0.5607]], [[0.2337, 0.7844], [0, 0.2896], [0.2525, 0.7232]]], [[[0.1973, 0.0566], [0, 0.6848], [0, 0.7624]], [[0, 0.4466], [0, 0.6636], [0.0401, 0.2084]]], [[[0.0437, 0.492], [0, 0.3448], [0.2619, 0.6207]], [[0, 0.6212], [0.1873, 0.4567], [0.0604, 0.9912]]]]]

Expected: [[[[[0.4878, 0.9708], [0.1472, 0.6632], [0, 0.5607]], [[0.2338, 0.7844], [0, 0.2896], [0.2525, 0.7232]]], [[[0.1973, 0.0566], [0, 0.6848], [0, 0.7624]], [[0, 0.4466], [0, 0.6636], [0.0401, 0.2085]]], [[[0.0438, 0.492], [0, 0.3448], [0.2619, 0.6207]], [[0, 0.6212], [0.1874, 0.4567], [0.0604, 0.9912]]]]]