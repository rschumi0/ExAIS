import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mas74600 = tf.keras.layers.Input(shape=([4, 1]))
in0Con77563 = tf.keras.layers.Input(shape=([3, 4, 3]))
in0Mas64086 = tf.keras.layers.Input(shape=([3, 4, 4]))
in0Glo15403 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in0Con94455 = tf.keras.layers.Input(shape=([2, 1]))
in0Mul97322 = tf.keras.layers.Input(shape=([1, 2]))
in1Mul97322 = tf.keras.layers.Input(shape=([1, 2]))

Mas74600 = keras.layers.Masking(mask_value=1, name = 'Mas74600', )(in0Mas74600)
Cro35566 = keras.layers.Cropping1D(cropping=((0, 1)), name = 'Cro35566', )(Mas74600)
Res75779 = keras.layers.Reshape((3, 1, 1), name = 'Res75779', )(Cro35566)
Res18005 = keras.layers.Reshape((3, 1, 1, 1), name = 'Res18005', )(Res75779)
Glo49896 = keras.layers.GlobalMaxPool3D(name = 'Glo49896', )(Res18005)
Res53467 = keras.layers.Reshape((1, 1), name = 'Res53467', )(Glo49896)
Res51265 = keras.layers.Reshape((1, 1, 1), name = 'Res51265', )(Res53467)
Zer7975 = keras.layers.ZeroPadding2D(padding=((2, 0), (3, 0)), name = 'Zer7975', )(Res51265)
Con77563 = keras.layers.Concatenate(axis=3, name = 'Con77563', )([Zer7975,in0Con77563])
Mas64086 = keras.layers.Masking(mask_value=2, name = 'Mas64086', )(in0Mas64086)
Add81338 = keras.layers.Add(name = 'Add81338', )([Con77563,Mas64086])
Res63711 = keras.layers.Reshape((3, 4, 4, 1), name = 'Res63711', )(Add81338)
Glo15403 = keras.layers.GlobalAveragePooling3D(name = 'Glo15403', )(in0Glo15403)
Res59901 = keras.layers.Reshape((2, 1), name = 'Res59901', )(Glo15403)
Con94455 = keras.layers.Concatenate(axis=2, name = 'Con94455', )([Res59901,in0Con94455])
Mul97322 = keras.layers.Multiply(name = 'Mul97322', )([in0Mul97322,in1Mul97322])
Zer15448 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer15448', )(Mul97322)
Max6585 = keras.layers.Maximum(name = 'Max6585', )([Con94455,Zer15448])
Res12850 = keras.layers.Reshape((2, 2, 1), name = 'Res12850', )(Max6585)
Res42474 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res42474', )(Res12850)
Up_31687 = keras.layers.UpSampling3D(size=(1, 1, 1), name = 'Up_31687', )(Res42474)
Zer32692 = keras.layers.ZeroPadding3D(padding=((1, 0), (2, 0), (3, 0)), name = 'Zer32692', )(Up_31687)
Max67389 = keras.layers.Maximum(name = 'Max67389', )([Res63711,Zer32692])
model = tf.keras.models.Model(inputs=[in0Mas74600,in0Con77563,in0Mas64086,in0Glo15403,in0Con94455,in0Mul97322,in1Mul97322], outputs=Max67389)
in0Mas74600 = tf.constant([[[1.638], [1.811], [1.02], [1.9873]]])
in0Con77563 = tf.constant([[[[0.9445, 0.4974, 0.0674], [0.7155, 0.1295, 0.3744], [0.3763, 0.6591, 0.6461], [0.2296, 0.9121, 0.6926]], [[0.8844, 0.1167, 0.9527], [0.2496, 0.1512, 0.4072], [0.6129, 0.81, 0.2837], [0.4104, 0.5758, 0.0232]], [[0.4577, 0.1917, 0.9418], [0.6563, 0.4955, 0.2902], [0.9721, 0.7937, 0.8367], [0.4622, 0.8113, 0.7175]]]])
in0Mas64086 = tf.constant([[[[1.5125, 1.6561, 1.0462, 1.2794], [1.5438, 1.619, 1.2047, 1.8148], [1.8633, 1.9175, 1.5411, 1.4528], [1.9022, 1.7636, 1.0307, 1.2818]], [[1.098, 1.5344, 1.0812, 1.419], [1.7028, 1.9965, 1.3544, 1.0013], [1.5641, 1.2536, 1.892, 1.8442], [1.2749, 1.056, 1.2679, 1.5489]], [[1.2745, 1.9924, 1.3753, 1.5437], [1.3248, 1.8688, 1.4988, 1.6623], [1.281, 1.2753, 1.5256, 1.3797], [1.23, 1.9355, 1.5035, 1.7559]]]])
in0Glo15403 = tf.constant([[[[[1.8802, 1.942]]]]])
in0Con94455 = tf.constant([[[0.9673], [0.8366]]])
in0Mul97322 = tf.constant([[[0.2673, 0.4676]]])
in1Mul97322 = tf.constant([[[0.5507, 0.3904]]])
print (np.array2string(model.predict([in0Mas74600,in0Con77563,in0Mas64086,in0Glo15403,in0Con94455,in0Mul97322,in1Mul97322],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max67389.png')

LMas74600 = masking_layer([[[1.638], [1.811], [1.02], [1.9873]]], 1, Mas74600), 
LCro35566 = cropping1D_layer(Mas74600, 0, 1, Cro35566), 
LRes75779 = reshape_layer(Cro35566, [3, 1, 1], Res75779), 
LRes18005 = reshape_layer(Res75779, [3, 1, 1, 1], Res18005), 
LGlo49896 = global_max_pool3D_layer(Res18005, Glo49896), 
LRes53467 = reshape_layer(Glo49896, [1, 1], Res53467), 
LRes51265 = reshape_layer(Res53467, [1, 1, 1], Res51265), 
LZer7975 = zero_padding2D_layer(Res51265, 2, 0, 3, 0, Zer7975), 
LCon77563 = concatenate_layer([Zer7975,[[[[0.9445, 0.4974, 0.0674], [0.7155, 0.1295, 0.3744], [0.3763, 0.6591, 0.6461], [0.2296, 0.9121, 0.6926]], [[0.8844, 0.1167, 0.9527], [0.2496, 0.1512, 0.4072], [0.6129, 0.81, 0.2837], [0.4104, 0.5758, 0.0232]], [[0.4577, 0.1917, 0.9418], [0.6563, 0.4955, 0.2902], [0.9721, 0.7937, 0.8367], [0.4622, 0.8113, 0.7175]]]]], 3, Con77563), 
LMas64086 = masking_layer([[[[1.5125, 1.6561, 1.0462, 1.2794], [1.5438, 1.619, 1.2047, 1.8148], [1.8633, 1.9175, 1.5411, 1.4528], [1.9022, 1.7636, 1.0307, 1.2818]], [[1.098, 1.5344, 1.0812, 1.419], [1.7028, 1.9965, 1.3544, 1.0013], [1.5641, 1.2536, 1.892, 1.8442], [1.2749, 1.056, 1.2679, 1.5489]], [[1.2745, 1.9924, 1.3753, 1.5437], [1.3248, 1.8688, 1.4988, 1.6623], [1.281, 1.2753, 1.5256, 1.3797], [1.23, 1.9355, 1.5035, 1.7559]]]], 2, Mas64086), 
LAdd81338 = add_layer([Con77563,Mas64086], Add81338), 
LRes63711 = reshape_layer(Add81338, [3, 4, 4, 1], Res63711), 
LGlo15403 = global_average_pooling3D_layer([[[[[1.8802, 1.942]]]]], Glo15403), 
LRes59901 = reshape_layer(Glo15403, [2, 1], Res59901), 
LCon94455 = concatenate_layer([Res59901,[[[0.9673], [0.8366]]]], 2, Con94455), 
LMul97322 = multiply_layer([[[[0.2673, 0.4676]]], [[[0.5507, 0.3904]]]], Mul97322), 
LZer15448 = zero_padding1D_layer(Mul97322, 1, 0, Zer15448), 
LMax6585 = maximum_layer([Con94455,Zer15448], Max6585), 
LRes12850 = reshape_layer(Max6585, [2, 2, 1], Res12850), 
LRes42474 = reshape_layer(Res12850, [2, 2, 1, 1], Res42474), 
LUp_31687 = up_sampling3D_layer(Res42474, 1, 1, 1, Up_31687), 
LZer32692 = zero_padding3D_layer(Up_31687, 1, 0, 2, 0, 3, 0, Zer32692), 
LMax67389 = maximum_layer([Res63711,Zer32692], Max67389), 
exec_layers([LMas74600,LCro35566,LRes75779,LRes18005,LGlo49896,LRes53467,LRes51265,LZer7975,LCon77563,LMas64086,LAdd81338,LRes63711,LGlo15403,LRes59901,LCon94455,LMul97322,LZer15448,LMax6585,LRes12850,LRes42474,LUp_31687,LZer32692,LMax67389],["Mas74600","Cro35566","Res75779","Res18005","Glo49896","Res53467","Res51265","Zer7975","Con77563","Mas64086","Add81338","Res63711","Glo15403","Res59901","Con94455","Mul97322","Zer15448","Max6585","Res12850","Res42474","Up_31687","Zer32692","Max67389"],Max67389,"Max67389")

Actual (Unparsed): [[[[[1.5125000], [2.6006001], [1.5436000], [1.3468000]], [[1.5438000], [2.3345000], [1.3342000], [2.1892000]], [[1.8633000], [2.2938000], [2.2002000], [2.0989000]], [[1.9022000], [1.9932000], [1.9428000], [1.9744000]]], [[[1.0980000], [2.4188000], [1.1979000], [2.3717000]], [[1.7028000], [2.2461000], [1.5056000], [1.4085000]], [[1.5641000], [1.8665000], [2.7020000], [2.1279000]], [[1.2749000], [1.4664000], [1.8437000], [1.5721000]]], [[[1.2745000], [2.4501001], [1.5670000], [2.4855000]], [[1.3248000], [2.5251001], [1.9943000], [1.9525000]], [[1.2810000], [2.2474000], [2.3192999], [2.2164000]], [[3.0410000], [2.3977000], [2.3148000], [2.4734000]]]]]

Expected (Unparsed): [[[[[1.5125],[2.6006],[1.5436],[1.3468]],[[1.5438],[2.3345000000000002],[1.3342],[2.1892]],[[1.8633],[2.2938],[2.2001999999999997],[2.0989]],[[1.9022],[1.9932],[1.9428],[1.9744000000000002]]],[[[1.098],[2.4188],[1.1979],[2.3717]],[[1.7028],[2.2460999999999998],[1.5056],[1.4085]],[[1.5641],[1.8665],[2.702],[2.1279]],[[1.2749],[1.4664000000000001],[1.8437000000000001],[1.5720999999999998]]],[[[1.2745],[2.4501],[1.567],[2.4855]],[[1.3248],[2.5251],[1.9943],[1.9525000000000001]],[[1.281],[2.2474],[2.3193],[2.2164]],[[3.041],[2.3977],[2.3148],[2.4734]]]]]

Actual:   [[[[[1.5125], [2.6007], [1.5436], [1.3468]], [[1.5438], [2.3345], [1.3342], [2.1892]], [[1.8633], [2.2938], [2.2002], [2.0989]], [[1.9022], [1.9932], [1.9428], [1.9744]]], [[[1.098], [2.4188], [1.1979], [2.3717]], [[1.7028], [2.2461], [1.5056], [1.4085]], [[1.5641], [1.8665], [2.702], [2.1279]], [[1.2749], [1.4664], [1.8437], [1.5721]]], [[[1.2745], [2.4502], [1.567], [2.4855]], [[1.3248], [2.5252], [1.9943], [1.9525]], [[1.281], [2.2474], [2.3193], [2.2164]], [[3.041], [2.3977], [2.3148], [2.4734]]]]]

Expected: [[[[[1.5125], [2.6006], [1.5436], [1.3468]], [[1.5438], [2.3346], [1.3342], [2.1892]], [[1.8633], [2.2938], [2.2002], [2.0989]], [[1.9022], [1.9932], [1.9428], [1.9745]]], [[[1.098], [2.4188], [1.1979], [2.3717]], [[1.7028], [2.2461], [1.5056], [1.4085]], [[1.5641], [1.8665], [2.702], [2.1279]], [[1.2749], [1.4665], [1.8438], [1.5721]]], [[[1.2745], [2.4501], [1.567], [2.4855]], [[1.3248], [2.5251], [1.9943], [1.9526]], [[1.281], [2.2474], [2.3193], [2.2164]], [[3.041], [2.3977], [2.3148], [2.4734]]]]]