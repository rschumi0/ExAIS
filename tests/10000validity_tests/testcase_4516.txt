import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min97620 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in1Min97620 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in0Con29032 = tf.keras.layers.Input(shape=([86]))
in0Fla41667 = tf.keras.layers.Input(shape=([1, 3]))
in0Con75847 = tf.keras.layers.Input(shape=([87]))
in0Zer6587 = tf.keras.layers.Input(shape=([3, 4, 3]))
in0Max90231 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con95639 = tf.keras.layers.Input(shape=([86]))

Min97620 = keras.layers.Minimum(name = 'Min97620', )([in0Min97620,in1Min97620])
Res69486 = keras.layers.Reshape((1, 2, 2), name = 'Res69486', )(Min97620)
Res38778 = keras.layers.Reshape((1, 4), name = 'Res38778', )(Res69486)
Fla32532 = keras.layers.Flatten(name = 'Fla32532', )(Res38778)
Con29032 = keras.layers.Concatenate(axis=1, name = 'Con29032', )([Fla32532,in0Con29032])
Fla41667 = keras.layers.Flatten(name = 'Fla41667', )(in0Fla41667)
Con75847 = keras.layers.Concatenate(axis=1, name = 'Con75847', )([Fla41667,in0Con75847])
Zer6587 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer6587', )(in0Zer6587)
Res33548 = keras.layers.Reshape((5, 18), name = 'Res33548', )(Zer6587)
Fla2467 = keras.layers.Flatten(name = 'Fla2467', )(Res33548)
Max90231 = keras.layers.MaxPool2D(pool_size=(1, 1), name = 'Max90231', )(in0Max90231)
Res82667 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res82667', )(Max90231)
Con10822 = keras.layers.Conv3D(4, (1, 1, 1),strides=(1, 1, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con10822', )(Res82667)
Res74591 = keras.layers.Reshape((1, 1, 4), name = 'Res74591', )(Con10822)
Res95544 = keras.layers.Reshape((1, 4), name = 'Res95544', )(Res74591)
Glo65975 = keras.layers.GlobalAveragePooling1D(name = 'Glo65975', )(Res95544)
Con95639 = keras.layers.Concatenate(axis=1, name = 'Con95639', )([Glo65975,in0Con95639])
Max21909 = keras.layers.Maximum(name = 'Max21909', )([Fla2467,Con95639])
Add2679 = keras.layers.Add(name = 'Add2679', )([Con75847,Max21909])
Mul95612 = keras.layers.Multiply(name = 'Mul95612', )([Con29032,Add2679])
model = tf.keras.models.Model(inputs=[in0Min97620,in1Min97620,in0Con29032,in0Fla41667,in0Con75847,in0Zer6587,in0Max90231,in0Con95639], outputs=Mul95612)
w = model.get_layer('Con10822').get_weights() 
w[0] = np.array([[[[[0.2203, 0.6598, 0.8262, 0.4547]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con10822').set_weights(w) 
in0Min97620 = tf.constant([[[[[0.2688], [0.0332]], [[0.5151], [0.1626]]]]])
in1Min97620 = tf.constant([[[[[0.856], [0.2223]], [[0.9975], [0.3782]]]]])
in0Con29032 = tf.constant([[0.5083, 0.1512, 0.5415, 0.2548, 0.7297, 0.0394, 0.6601, 0.223, 0.9595, 0.5682, 0.4908, 0.4751, 0.5425, 0.8616, 0.1651, 0.7372, 0.8111, 0.4579, 0.7252, 0.2491, 0.6422, 0.7672, 0.9346, 0.5679, 0.4809, 0.7053, 0.8825, 0.9075, 0.8353, 0.9936, 0.1887, 0.2992, 0.615, 0.7744, 0.6285, 0.2806, 0.5839, 0.1286, 0.0343, 0.5258, 0.6305, 0.8035, 0.4039, 0.8129, 0.5186, 0.9573, 0.2477, 0.9938, 0.277, 0.011, 0.3382, 0.1768, 0.4086, 0.7623, 0.1959, 0.1638, 0.6572, 0.7574, 0.8348, 0.2934, 0.1557, 0.5481, 0.5247, 0.2307, 0.3984, 0.8629, 0.582, 0.9228, 0.6288, 0.9136, 0.4928, 0.8858, 0.9162, 0.0275, 0.9928, 0.2321, 0.4049, 0.5442, 0.0811, 0.3566, 0.9629, 0.4515, 0.3283, 0.003, 0.7341, 0.5468]])
in0Fla41667 = tf.constant([[[1.5926, 1.1152, 1.3533]]])
in0Con75847 = tf.constant([[0.0496, 0.1737, 0.2253, 0.3435, 0.5872, 0.2956, 0.8202, 0.882, 0.6796, 0.4214, 0.059, 0.8968, 0.053, 0.1419, 0.254, 0.3852, 0.7959, 0.1687, 0.4568, 0.6934, 0.865, 0.1002, 0.9741, 0.2968, 0.3025, 0.379, 0.3386, 0.8559, 0.2086, 0.1053, 0.4725, 0.3185, 0.376, 0.6202, 0.2204, 0.7865, 0.7609, 0.6734, 0.7786, 0.9741, 0.646, 0.5502, 0.8035, 0.3447, 0.4309, 0.7495, 0.1406, 0.4351, 0.4754, 0.6757, 0.1844, 0.4496, 0.3179, 0.3351, 0.8541, 0.9371, 0.891, 0.2146, 0.0476, 0.2539, 0.065, 0.3562, 0.2239, 0.5582, 0.966, 0.1454, 0.4564, 0.281, 0.0327, 0.4766, 0.898, 0.3773, 0.7049, 0.7747, 0.1031, 0.172, 0.97, 0.8148, 0.0635, 0.2835, 0.7308, 0.4045, 0.1333, 0.9369, 0.1065, 0.7711, 0.2395]])
in0Zer6587 = tf.constant([[[[1.5142, 1.3703, 1.1249], [1.3733, 1.4785, 1.2647], [1.6043, 1.7797, 1.3381], [1.3309, 1.3217, 1.695]], [[1.0515, 1.1213, 1.1311], [1.0457, 1.5807, 1.9702], [1.0609, 1.2312, 1.6404], [1.5698, 1.0878, 1.3171]], [[1.9724, 2, 1.3302], [1.6075, 1.5662, 1.1698], [1.2498, 1.6947, 1.6942], [1.5758, 1.7305, 1.9903]]]])
in0Max90231 = tf.constant([[[[1.9736]]]])
in0Con95639 = tf.constant([[0.7132, 0.1974, 0.1421, 0.4097, 0.3256, 0.3166, 0.5946, 0.5238, 0.7644, 0.2501, 0.6216, 0.0433, 0.2158, 0.5366, 0.1455, 0.7526, 0.7886, 0.2946, 0.7911, 0.0727, 0.721, 0.4467, 0.2225, 0.369, 0.0527, 0.1415, 0.2972, 0.1998, 0.7998, 0.1845, 0.2961, 0.7935, 0.0293, 0.2119, 0.3021, 0.541, 0.7429, 0.6791, 0.2617, 0.7056, 0.1462, 0.47, 0.3891, 0.8683, 0.7079, 0.0827, 0.3486, 0.8486, 0.3926, 0.897, 0.0876, 0.9749, 0.5896, 0.9873, 0.2816, 0.6092, 0.5531, 0.3081, 0.1001, 0.7783, 0.6214, 0.8531, 0.4064, 0.6096, 0.0865, 0.5605, 0.5633, 0.024, 0.3504, 0.3239, 0.732, 0.8017, 0.9218, 0.4572, 0.9251, 0.7034, 0.8832, 0.3547, 0.1003, 0.8, 0.6891, 0.8934, 0.2699, 0.55, 0.5442, 0.3284]])
print (np.array2string(model.predict([in0Min97620,in1Min97620,in0Con29032,in0Fla41667,in0Con75847,in0Zer6587,in0Max90231,in0Con95639],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul95612.png')

LMin97620 = minimum_layer([[[[[[0.2688], [0.0332]], [[0.5151], [0.1626]]]]], [[[[[0.856], [0.2223]], [[0.9975], [0.3782]]]]]], Min97620), 
LRes69486 = reshape_layer(Min97620, [1, 2, 2], Res69486), 
LRes38778 = reshape_layer(Res69486, [1, 4], Res38778), 
LFla32532 = flatten_layer(Res38778, Fla32532), 
LCon29032 = concatenate_layer([Fla32532,[[0.5083, 0.1512, 0.5415, 0.2548, 0.7297, 0.0394, 0.6601, 0.223, 0.9595, 0.5682, 0.4908, 0.4751, 0.5425, 0.8616, 0.1651, 0.7372, 0.8111, 0.4579, 0.7252, 0.2491, 0.6422, 0.7672, 0.9346, 0.5679, 0.4809, 0.7053, 0.8825, 0.9075, 0.8353, 0.9936, 0.1887, 0.2992, 0.615, 0.7744, 0.6285, 0.2806, 0.5839, 0.1286, 0.0343, 0.5258, 0.6305, 0.8035, 0.4039, 0.8129, 0.5186, 0.9573, 0.2477, 0.9938, 0.277, 0.011, 0.3382, 0.1768, 0.4086, 0.7623, 0.1959, 0.1638, 0.6572, 0.7574, 0.8348, 0.2934, 0.1557, 0.5481, 0.5247, 0.2307, 0.3984, 0.8629, 0.582, 0.9228, 0.6288, 0.9136, 0.4928, 0.8858, 0.9162, 0.0275, 0.9928, 0.2321, 0.4049, 0.5442, 0.0811, 0.3566, 0.9629, 0.4515, 0.3283, 0.003, 0.7341, 0.5468]]], 1, Con29032), 
LFla41667 = flatten_layer([[[1.5926, 1.1152, 1.3533]]], Fla41667), 
LCon75847 = concatenate_layer([Fla41667,[[0.0496, 0.1737, 0.2253, 0.3435, 0.5872, 0.2956, 0.8202, 0.882, 0.6796, 0.4214, 0.059, 0.8968, 0.053, 0.1419, 0.254, 0.3852, 0.7959, 0.1687, 0.4568, 0.6934, 0.865, 0.1002, 0.9741, 0.2968, 0.3025, 0.379, 0.3386, 0.8559, 0.2086, 0.1053, 0.4725, 0.3185, 0.376, 0.6202, 0.2204, 0.7865, 0.7609, 0.6734, 0.7786, 0.9741, 0.646, 0.5502, 0.8035, 0.3447, 0.4309, 0.7495, 0.1406, 0.4351, 0.4754, 0.6757, 0.1844, 0.4496, 0.3179, 0.3351, 0.8541, 0.9371, 0.891, 0.2146, 0.0476, 0.2539, 0.065, 0.3562, 0.2239, 0.5582, 0.966, 0.1454, 0.4564, 0.281, 0.0327, 0.4766, 0.898, 0.3773, 0.7049, 0.7747, 0.1031, 0.172, 0.97, 0.8148, 0.0635, 0.2835, 0.7308, 0.4045, 0.1333, 0.9369, 0.1065, 0.7711, 0.2395]]], 1, Con75847), 
LZer6587 = zero_padding2D_layer([[[[1.5142, 1.3703, 1.1249], [1.3733, 1.4785, 1.2647], [1.6043, 1.7797, 1.3381], [1.3309, 1.3217, 1.695]], [[1.0515, 1.1213, 1.1311], [1.0457, 1.5807, 1.9702], [1.0609, 1.2312, 1.6404], [1.5698, 1.0878, 1.3171]], [[1.9724, 2, 1.3302], [1.6075, 1.5662, 1.1698], [1.2498, 1.6947, 1.6942], [1.5758, 1.7305, 1.9903]]]], 1, 1, 1, 1, Zer6587), 
LRes33548 = reshape_layer(Zer6587, [5, 18], Res33548), 
LFla2467 = flatten_layer(Res33548, Fla2467), 
LMax90231 = max_pool2D_layer([[[[1.9736]]]], 1, 1, Max90231), 
LRes82667 = reshape_layer(Max90231, [1, 1, 1, 1], Res82667), 
LCon10822 = conv3D_layer(Res82667, 1, 1, 1,[[[[[0.2203, 0.6598, 0.8262, 0.4547]]]]],[0, 0, 0, 0], 1, 1, 1, true, 1, 1, 1, Con10822), 
LRes74591 = reshape_layer(Con10822, [1, 1, 4], Res74591), 
LRes95544 = reshape_layer(Res74591, [1, 4], Res95544), 
LGlo65975 = global_average_pooling1D_layer(Res95544, Glo65975), 
LCon95639 = concatenate_layer([Glo65975,[[0.7132, 0.1974, 0.1421, 0.4097, 0.3256, 0.3166, 0.5946, 0.5238, 0.7644, 0.2501, 0.6216, 0.0433, 0.2158, 0.5366, 0.1455, 0.7526, 0.7886, 0.2946, 0.7911, 0.0727, 0.721, 0.4467, 0.2225, 0.369, 0.0527, 0.1415, 0.2972, 0.1998, 0.7998, 0.1845, 0.2961, 0.7935, 0.0293, 0.2119, 0.3021, 0.541, 0.7429, 0.6791, 0.2617, 0.7056, 0.1462, 0.47, 0.3891, 0.8683, 0.7079, 0.0827, 0.3486, 0.8486, 0.3926, 0.897, 0.0876, 0.9749, 0.5896, 0.9873, 0.2816, 0.6092, 0.5531, 0.3081, 0.1001, 0.7783, 0.6214, 0.8531, 0.4064, 0.6096, 0.0865, 0.5605, 0.5633, 0.024, 0.3504, 0.3239, 0.732, 0.8017, 0.9218, 0.4572, 0.9251, 0.7034, 0.8832, 0.3547, 0.1003, 0.8, 0.6891, 0.8934, 0.2699, 0.55, 0.5442, 0.3284]]], 1, Con95639), 
LMax21909 = maximum_layer([Fla2467,Con95639], Max21909), 
LAdd2679 = add_layer([Con75847,Max21909], Add2679), 
LMul95612 = multiply_layer([Con29032,Add2679], Mul95612), 
exec_layers([LMin97620,LRes69486,LRes38778,LFla32532,LCon29032,LFla41667,LCon75847,LZer6587,LRes33548,LFla2467,LMax90231,LRes82667,LCon10822,LRes74591,LRes95544,LGlo65975,LCon95639,LMax21909,LAdd2679,LMul95612],["Min97620","Res69486","Res38778","Fla32532","Con29032","Fla41667","Con75847","Zer6587","Res33548","Fla2467","Max90231","Res82667","Con10822","Res74591","Res95544","Glo65975","Con95639","Max21909","Add2679","Mul95612"],Mul95612,"Mul95612")

Actual (Unparsed): [[0.5449608, 0.0802571, 1.5370009, 0.1539815, 0.4508113, 0.0639122, 0.2629524, 0.2540101, 0.4532897, 0.0447899, 0.9747037, 0.2683582, 1.1377751, 0.1756306, 0.7452307, 0.0457521, 0.1940523, 0.6811809, 0.0876186, 1.1415542, 0.7764661, 0.9025209, 1.4965953, 0.4956841, 0.9462817, 1.8816347, 1.4593779, 1.0828717, 1.0381188, 1.1825764, 1.9298509, 1.3887473, 1.5037907, 0.6527952, 0.1159750, 0.3499144, 0.3994425, 0.3347731, 0.6841851, 0.5085595, 1.0479253, 0.2455874, 0.0692791, 1.1707989, 1.5891122, 1.4980454, 0.6365060, 1.6837598, 1.2027889, 1.1759473, 0.4340200, 1.3157912, 0.2959191, 0.0118954, 0.1816810, 0.2285670, 0.3778324, 2.1546409, 0.5753779, 0.3638326, 1.1974841, 1.2222921, 1.1885048, 0.3857623, 0.3193251, 1.0513106, 1.1197097, 0.6220826, 0.8508629, 0.8774831, 0.4913826, 0.0523228, 0.5200176, 1.1163279, 0.5466630, 1.3345463, 1.5543333, 0.0154082, 1.0892009, 0.3883961, 0.6875202, 0.2275844, 0.0311262, 0.5458833, 1.0530275, 0.4635551, 0.3961924, 0.0019695, 0.9655617, 0.3105277]]

Expected (Unparsed): [[0.544960840704,0.080257058496,1.537000873632,0.153981536592,0.45081126999999993,0.06391224,0.26295240000000003,0.25401012000000006,0.45328964,0.04478992,0.97470366,0.2683582,1.1377751,0.17563062000000002,0.7452307200000001,0.04575213,0.19405225,0.68118096,0.08761856999999999,1.1415542,0.77646603,0.9025209,1.4965952399999998,0.49568408999999997,0.9462817,1.8816347199999999,1.4593778999999998,1.08287172,1.03811883,1.18257651,1.9298509999999998,1.38874725,1.5037905900000001,0.6527952,0.11597502000000001,0.3499144,0.3994425,0.33477312,0.6841851,0.5085594400000001,1.04792533,0.24558741999999997,0.06927913999999999,1.17079886,1.5891121999999998,1.4980453999999999,0.63650601,1.6837597699999998,1.20278898,1.1759473200000001,0.43401994,1.3157912,0.29591910000000005,0.011895399999999999,0.18168104000000002,0.22856704,0.37783242000000006,2.1546409499999997,0.57537789,0.36383256,1.19748412,1.22229212,1.18850476,0.38576232,0.31932513,1.05131061,1.1197098000000003,0.6220825499999999,0.8508628799999999,0.87748301,0.4913826,0.052322759999999996,0.5200176,1.1163278399999998,0.54666304,1.33454628,1.5543333,0.01540825,1.08920088,0.38839614,0.6875201999999999,0.22758444000000003,0.03112618,0.54588328,1.0530274400000001,0.46355504999999997,0.3961924399999999,0.0019695000000000003,0.9655617300000001,0.31052772]]

Actual:   [[0.545, 0.0803, 1.5371, 0.154, 0.4509, 0.064, 0.263, 0.2541, 0.4533, 0.0448, 0.9748, 0.2684, 1.1378, 0.1757, 0.7453, 0.0458, 0.1941, 0.6812, 0.0877, 1.1416, 0.7765, 0.9026, 1.4966, 0.4957, 0.9463, 1.8817, 1.4594, 1.0829, 1.0382, 1.1826, 1.9299, 1.3888, 1.5038, 0.6528, 0.116, 0.35, 0.3995, 0.3348, 0.6842, 0.5086, 1.048, 0.2456, 0.0693, 1.1708, 1.5892, 1.4981, 0.6366, 1.6838, 1.2028, 1.176, 0.4341, 1.3158, 0.296, 0.0119, 0.1817, 0.2286, 0.3779, 2.1547, 0.5754, 0.3639, 1.1975, 1.2223, 1.1886, 0.3858, 0.3194, 1.0514, 1.1198, 0.6221, 0.8509, 0.8775, 0.4914, 0.0524, 0.5201, 1.1164, 0.5467, 1.3346, 1.5544, 0.0155, 1.0893, 0.3884, 0.6876, 0.2276, 0.0312, 0.5459, 1.0531, 0.4636, 0.3962, 0.002, 0.9656, 0.3106]]

Expected: [[0.545, 0.0803, 1.5371, 0.154, 0.4509, 0.064, 0.263, 0.2541, 0.4533, 0.0448, 0.9748, 0.2684, 1.1378, 0.1757, 0.7453, 0.0458, 0.1941, 0.6812, 0.0877, 1.1416, 0.7765, 0.9026, 1.4966, 0.4957, 0.9463, 1.8817, 1.4594, 1.0829, 1.0382, 1.1826, 1.9299, 1.3888, 1.5038, 0.6528, 0.116, 0.35, 0.3995, 0.3348, 0.6842, 0.5086, 1.048, 0.2456, 0.0693, 1.1708, 1.5892, 1.4981, 0.6366, 1.6838, 1.2028, 1.176, 0.4341, 1.3158, 0.296, 0.0119, 0.1817, 0.2286, 0.3779, 2.1547, 0.5754, 0.3639, 1.1975, 1.2223, 1.1886, 0.3858, 0.3194, 1.0514, 1.1198, 0.6221, 0.8509, 0.8775, 0.4914, 0.0524, 0.5201, 1.1164, 0.5467, 1.3346, 1.5544, 0.0155, 1.0893, 0.3884, 0.6876, 0.2276, 0.0312, 0.5459, 1.0531, 0.4636, 0.3962, 0.002, 0.9656, 0.3106]]