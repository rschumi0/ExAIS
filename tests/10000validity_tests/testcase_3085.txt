import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave29845 = tf.keras.layers.Input(shape=([2, 1]))
in1Ave29845 = tf.keras.layers.Input(shape=([2, 1]))
in0Con38798 = tf.keras.layers.Input(shape=([6, 1, 3]))
in0PRe10551 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in0Con46546 = tf.keras.layers.Input(shape=([2]))
in0Bat58717 = tf.keras.layers.Input(shape=([4]))

Ave29845 = keras.layers.Average(name = 'Ave29845', )([in0Ave29845,in1Ave29845])
Res94775 = keras.layers.Reshape((2, 1, 1), name = 'Res94775', )(Ave29845)
Zer90720 = keras.layers.ZeroPadding2D(padding=((4, 0), (0, 0)), name = 'Zer90720', )(Res94775)
Con38798 = keras.layers.Concatenate(axis=3, name = 'Con38798', )([Zer90720,in0Con38798])
PRe10551 = keras.layers.PReLU(name = 'PRe10551', input_shape=(1, 1, 1, 2))(in0PRe10551)
Res87267 = keras.layers.Reshape((1, 1, 2), name = 'Res87267', )(PRe10551)
Res11503 = keras.layers.Reshape((1, 2), name = 'Res11503', )(Res87267)
Fla76963 = keras.layers.Flatten(name = 'Fla76963', )(Res11503)
Con46546 = keras.layers.Concatenate(axis=1, name = 'Con46546', )([Fla76963,in0Con46546])
Bat58717 = keras.layers.BatchNormalization(axis=1, epsilon=0.7594031686335905,  name = 'Bat58717', )(in0Bat58717)
Mul52775 = keras.layers.Multiply(name = 'Mul52775', )([Con46546,Bat58717])
Res9180 = keras.layers.Reshape((4, 1), name = 'Res9180', )(Mul52775)
Res13398 = keras.layers.Reshape((4, 1, 1), name = 'Res13398', )(Res9180)
Con35066 = keras.layers.Conv2DTranspose(4, (3, 1),strides=(1, 1), padding='valid', name = 'Con35066', )(Res13398)
Ave19325 = keras.layers.Average(name = 'Ave19325', )([Con38798,Con35066])
model = tf.keras.models.Model(inputs=[in0Ave29845,in1Ave29845,in0Con38798,in0PRe10551,in0Con46546,in0Bat58717], outputs=Ave19325)
w = model.get_layer('PRe10551').get_weights() 
w[0] = np.array([[[[0.3213, 0.5353]]]])
model.get_layer('PRe10551').set_weights(w) 
w = model.get_layer('Bat58717').get_weights() 
w[0] = np.array([0.712, 0.9293, 0.0753, 0.2439])
w[1] = np.array([0.2115, 0.0388, 0.8889, 0.9841])
w[2] = np.array([0.4138, 0.987, 0.6284, 0.2013])
w[3] = np.array([0.3669, 0.7986, 0.2913, 0.7576])
model.get_layer('Bat58717').set_weights(w) 
w = model.get_layer('Con35066').get_weights() 
w[0] = np.array([[[[0.7971], [0.8821], [0.186], [0.051]]], [[[0.4585], [0.4642], [0.4252], [0.3142]]], [[[0.846], [0.6641], [0.423], [0.6304]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con35066').set_weights(w) 
in0Ave29845 = tf.constant([[[0.8569], [0.6055]]])
in1Ave29845 = tf.constant([[[0.8635], [0.3668]]])
in0Con38798 = tf.constant([[[[0.6788, 0.1116, 0.6807]], [[0.8964, 0.4651, 0.0932]], [[0.2362, 0.3071, 0.8704]], [[0.6307, 0.3763, 0.1494]], [[0.0043, 0.067, 0.8275]], [[0.2927, 0.7737, 0.4125]]]])
in0PRe10551 = tf.constant([[[[[0.9035, 0.5977]]]]])
in0Con46546 = tf.constant([[0.8736, 0.6434]])
in0Bat58717 = tf.constant([[1.7922, 1.2701, 1.938, 1.2284]])
print (np.array2string(model.predict([in0Ave29845,in1Ave29845,in0Con38798,in0PRe10551,in0Con46546,in0Bat58717],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave19325.png')

LAve29845 = average_layer([[[[0.8569], [0.6055]]], [[[0.8635], [0.3668]]]], Ave29845), 
LRes94775 = reshape_layer(Ave29845, [2, 1, 1], Res94775), 
LZer90720 = zero_padding2D_layer(Res94775, 4, 0, 0, 0, Zer90720), 
LCon38798 = concatenate_layer([Zer90720,[[[[0.6788, 0.1116, 0.6807]], [[0.8964, 0.4651, 0.0932]], [[0.2362, 0.3071, 0.8704]], [[0.6307, 0.3763, 0.1494]], [[0.0043, 0.067, 0.8275]], [[0.2927, 0.7737, 0.4125]]]]], 3, Con38798), 
LPRe10551 = prelu_layer([[[[[0.9035, 0.5977]]]]], [[[[0.3213, 0.5353]]]], PRe10551), 
LRes87267 = reshape_layer(PRe10551, [1, 1, 2], Res87267), 
LRes11503 = reshape_layer(Res87267, [1, 2], Res11503), 
LFla76963 = flatten_layer(Res11503, Fla76963), 
LCon46546 = concatenate_layer([Fla76963,[[0.8736, 0.6434]]], 1, Con46546), 
LBat58717 = batch_normalization_layer([[1.7922, 1.2701, 1.938, 1.2284]], 1, 0.7594031686335905, [0.712, 0.9293, 0.0753, 0.2439], [0.2115, 0.0388, 0.8889, 0.9841], [0.4138, 0.987, 0.6284, 0.2013], [0.3669, 0.7986, 0.2913, 0.7576], Bat58717), 
LMul52775 = multiply_layer([Con46546,Bat58717], Mul52775), 
LRes9180 = reshape_layer(Mul52775, [4, 1], Res9180), 
LRes13398 = reshape_layer(Res9180, [4, 1, 1], Res13398), 
LCon35066 = conv2D_transpose_layer(Res13398, 3, 1,[[[[0.7971], [0.8821], [0.186], [0.051]]], [[[0.4585], [0.4642], [0.4252], [0.3142]]], [[[0.846], [0.6641], [0.423], [0.6304]]]],[0, 0, 0, 0], 1, 1, false, Con35066), 
LAve19325 = average_layer([Con38798,Con35066], Ave19325), 
exec_layers([LAve29845,LRes94775,LZer90720,LCon38798,LPRe10551,LRes87267,LRes11503,LFla76963,LCon46546,LBat58717,LMul52775,LRes9180,LRes13398,LCon35066,LAve19325],["Ave29845","Res94775","Zer90720","Con38798","PRe10551","Res87267","Res11503","Fla76963","Con46546","Bat58717","Mul52775","Res9180","Res13398","Con35066","Ave19325"],Ave19325,"Ave19325")

Actual (Unparsed): [[[[0.4091547, 0.7921855, 0.1512746, 0.3665285]], [[0.2948012, 0.7522666, 0.4646796, 0.2116839]], [[0.8114391, 0.8731692, 0.4824255, 0.8041663]], [[0.5648928, 0.9015999, 0.4737149, 0.2763990]], [[0.9692825, 0.4652396, 0.3779473, 0.8050364]], [[0.5662604, 0.4000467, 0.5484427, 0.4470728]]]]

Expected (Unparsed): [[[[0.4091546808135054,0.7921855274690668,0.1512745585639343,0.3665285079933368]],[[0.2948011505576189,0.7522666583815553,0.46467959375744045,0.21168394614866018]],[[0.8114391295235327,0.8731691941576091,0.48242550120400773,0.8041662787908845]],[[0.564892750564749,0.901599861712764,0.473714926036244,0.2763990249896274]],[[0.9692825182533195,0.4652396251754461,0.3779472526878618,0.805036366949148]],[[0.5662603562274913,0.4000466844807057,0.5484426781137457,0.4470727524418564]]]]

Actual:   [[[[0.4092, 0.7922, 0.1513, 0.3666]], [[0.2949, 0.7523, 0.4647, 0.2117]], [[0.8115, 0.8732, 0.4825, 0.8042]], [[0.5649, 0.9016, 0.4738, 0.2764]], [[0.9693, 0.4653, 0.378, 0.8051]], [[0.5663, 0.4001, 0.5485, 0.4471]]]]

Expected: [[[[0.4092, 0.7922, 0.1513, 0.3666]], [[0.2949, 0.7523, 0.4647, 0.2117]], [[0.8115, 0.8732, 0.4825, 0.8042]], [[0.5649, 0.9016, 0.4738, 0.2764]], [[0.9693, 0.4653, 0.378, 0.8051]], [[0.5663, 0.4001, 0.5485, 0.4471]]]]