import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul52205 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Mul52205 = tf.keras.layers.Input(shape=([2, 2, 2]))

Mul52205 = keras.layers.Multiply(name = 'Mul52205', )([in0Mul52205,in1Mul52205])
Con63987 = keras.layers.Conv2DTranspose(2, (1, 1),strides=(10, 1), padding='same', name = 'Con63987', )(Mul52205)
Res73945 = keras.layers.Reshape((20, 4), name = 'Res73945', )(Con63987)
Per97590 = keras.layers.Permute((1,2), name = 'Per97590',)(Res73945)
model = tf.keras.models.Model(inputs=[in0Mul52205,in1Mul52205], outputs=Per97590)
w = model.get_layer('Con63987').get_weights() 
w[0] = np.array([[[[0.6061, 0.1328], [0.5958, 0.2564]]]])
w[1] = np.array([0, 0])
model.get_layer('Con63987').set_weights(w) 
in0Mul52205 = tf.constant([[[[0.8602, 0.9911], [0.8233, 0.0116]], [[0.8045, 0.5029], [0.6547, 0.3106]]]])
in1Mul52205 = tf.constant([[[[0.2563, 0.5754], [0.5272, 0.3745]], [[0.7751, 0.78], [0.2856, 0.4599]]]])
print (np.array2string(model.predict([in0Mul52205,in1Mul52205],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Per97590.png')

LMul52205 = multiply_layer([[[[[0.8602, 0.9911], [0.8233, 0.0116]], [[0.8045, 0.5029], [0.6547, 0.3106]]]], [[[[0.2563, 0.5754], [0.5272, 0.3745]], [[0.7751, 0.78], [0.2856, 0.4599]]]]], Mul52205), 
LCon63987 = conv2D_transpose_layer(Mul52205, 1, 1,[[[[0.6061, 0.1328], [0.5958, 0.2564]]]],[0, 0], 10, 1, true, Con63987), 
LRes73945 = reshape_layer(Con63987, [20, 4], Res73945), 
LPer97590 = permute_layer(Res73945, 1,2, Per97590), 
exec_layers([LMul52205,LCon63987,LRes73945,LPer97590],["Mul52205","Con63987","Res73945","Per97590"],Per97590,"Per97590")

Actual (Unparsed): [[[0.2093595, 0.2775751, 0.2636508, 0.2597171], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.4300369, 0.4720977, 0.1322998, 0.1480295], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0.209359461718,0.277575105324,0.26365083269600004,0.259717125088],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0.430036928095,0.47209776141,0.132299792184,0.148029508872],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]]

Actual:   [[[0.2094, 0.2776, 0.2637, 0.2598], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0.4301, 0.4721, 0.1323, 0.1481], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]

Expected: [[[0.2094, 0.2776, 0.2637, 0.2598], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0.4301, 0.4721, 0.1323, 0.1481], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]