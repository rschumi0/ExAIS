import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min27889 = tf.keras.layers.Input(shape=([1, 2]))
in1Min27889 = tf.keras.layers.Input(shape=([1, 2]))
in0Con76738 = tf.keras.layers.Input(shape=([2]))
in0ELU91729 = tf.keras.layers.Input(shape=([1, 1]))
in0Con80659 = tf.keras.layers.Input(shape=([3]))
in0Ave21024 = tf.keras.layers.Input(shape=([2, 2]))
in1Ave21024 = tf.keras.layers.Input(shape=([2, 2]))
in0Glo31575 = tf.keras.layers.Input(shape=([1, 2]))
in0Con23050 = tf.keras.layers.Input(shape=([2]))

Min27889 = keras.layers.Minimum(name = 'Min27889', )([in0Min27889,in1Min27889])
Cro90504 = keras.layers.Cropping1D(cropping=((0, 0)), name = 'Cro90504', )(Min27889)
Fla66829 = keras.layers.Flatten(name = 'Fla66829', )(Cro90504)
Con76738 = keras.layers.Concatenate(axis=1, name = 'Con76738', )([Fla66829,in0Con76738])
ELU91729 = keras.layers.ELU(alpha=-3.566335080854417, name = 'ELU91729', input_shape=(1, 1))(in0ELU91729)
Fla4055 = keras.layers.Flatten(name = 'Fla4055', )(ELU91729)
Con80659 = keras.layers.Concatenate(axis=1, name = 'Con80659', )([Fla4055,in0Con80659])
Ave21024 = keras.layers.Average(name = 'Ave21024', )([in0Ave21024,in1Ave21024])
Fla16342 = keras.layers.Flatten(name = 'Fla16342', )(Ave21024)
Glo31575 = keras.layers.GlobalMaxPool1D(name = 'Glo31575', )(in0Glo31575)
Con23050 = keras.layers.Concatenate(axis=1, name = 'Con23050', )([Glo31575,in0Con23050])
Sub65746 = keras.layers.Subtract(name = 'Sub65746', )([Fla16342,Con23050])
Mul6936 = keras.layers.Multiply(name = 'Mul6936', )([Con80659,Sub65746])
Max75073 = keras.layers.Maximum(name = 'Max75073', )([Con76738,Mul6936])
model = tf.keras.models.Model(inputs=[in0Min27889,in1Min27889,in0Con76738,in0ELU91729,in0Con80659,in0Ave21024,in1Ave21024,in0Glo31575,in0Con23050], outputs=Max75073)
in0Min27889 = tf.constant([[[0.2792, 0.1707]]])
in1Min27889 = tf.constant([[[0.653, 0.8754]]])
in0Con76738 = tf.constant([[0.7064, 0.1068]])
in0ELU91729 = tf.constant([[[0.2504]]])
in0Con80659 = tf.constant([[0.9413, 0.7871, 0.4632]])
in0Ave21024 = tf.constant([[[0.7344, 0.8826], [0.3595, 0.1425]]])
in1Ave21024 = tf.constant([[[0.5945, 0.7317], [0.7635, 0.641]]])
in0Glo31575 = tf.constant([[[1.5268, 1.5662]]])
in0Con23050 = tf.constant([[0.9985, 0.4068]])
print (np.array2string(model.predict([in0Min27889,in1Min27889,in0Con76738,in0ELU91729,in0Con80659,in0Ave21024,in1Ave21024,in0Glo31575,in0Con23050],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max75073.png')

LMin27889 = minimum_layer([[[[0.2792, 0.1707]]], [[[0.653, 0.8754]]]], Min27889), 
LCro90504 = cropping1D_layer(Min27889, 0, 0, Cro90504), 
LFla66829 = flatten_layer(Cro90504, Fla66829), 
LCon76738 = concatenate_layer([Fla66829,[[0.7064, 0.1068]]], 1, Con76738), 
LELU91729 = elu_layer([[[0.2504]]], -3.566335080854417, ELU91729), 
LFla4055 = flatten_layer(ELU91729, Fla4055), 
LCon80659 = concatenate_layer([Fla4055,[[0.9413, 0.7871, 0.4632]]], 1, Con80659), 
LAve21024 = average_layer([[[[0.7344, 0.8826], [0.3595, 0.1425]]], [[[0.5945, 0.7317], [0.7635, 0.641]]]], Ave21024), 
LFla16342 = flatten_layer(Ave21024, Fla16342), 
LGlo31575 = global_max_pool1D_layer([[[1.5268, 1.5662]]], Glo31575), 
LCon23050 = concatenate_layer([Glo31575,[[0.9985, 0.4068]]], 1, Con23050), 
LSub65746 = subtract_layer(Fla16342,Con23050, Sub65746), 
LMul6936 = multiply_layer([Con80659,Sub65746], Mul6936), 
LMax75073 = maximum_layer([Con76738,Mul6936], Max75073), 
exec_layers([LMin27889,LCro90504,LFla66829,LCon76738,LELU91729,LFla4055,LCon80659,LAve21024,LFla16342,LGlo31575,LCon23050,LSub65746,LMul6936,LMax75073],["Min27889","Cro90504","Fla66829","Con76738","ELU91729","Fla4055","Con80659","Ave21024","Fla16342","Glo31575","Con23050","Sub65746","Mul6936","Max75073"],Max75073,"Max75073")

Actual (Unparsed): [[0.2792000, 0.1707000, 0.7064000, 0.1068000]]

Expected (Unparsed): [[0.2792,0.1707,0.7064,0.1068]]

Actual:   [[0.2792, 0.1707, 0.7064, 0.1068]]

Expected: [[0.2792, 0.1707, 0.7064, 0.1068]]