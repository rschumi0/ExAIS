import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sim63192 = tf.keras.layers.Input(shape=([3, 3]))
in0Con55684 = tf.keras.layers.Input(shape=([2, 3, 2, 2]))
in0Sub52346 = tf.keras.layers.Input(shape=([2, 3, 2, 3]))
in1Sub52346 = tf.keras.layers.Input(shape=([2, 3, 2, 3]))
in0Max75069 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in1Max75069 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in0Glo28687 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con69453 = tf.keras.layers.Input(shape=([3]))
in0Con62109 = tf.keras.layers.Input(shape=([32]))

Sim63192 = keras.layers.SimpleRNN(1,name = 'Sim63192', )(in0Sim63192)
Res18582 = keras.layers.Reshape((1, 1), name = 'Res18582', )(Sim63192)
Res66356 = keras.layers.Reshape((1, 1, 1), name = 'Res66356', )(Res18582)
Res13972 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res13972', )(Res66356)
Zer71118 = keras.layers.ZeroPadding3D(padding=((1, 0), (2, 0), (1, 0)), name = 'Zer71118', )(Res13972)
Con55684 = keras.layers.Concatenate(axis=4, name = 'Con55684', )([Zer71118,in0Con55684])
Sub52346 = keras.layers.Subtract(name = 'Sub52346', )([in0Sub52346,in1Sub52346])
Min31954 = keras.layers.Minimum(name = 'Min31954', )([Con55684,Sub52346])
Res7829 = keras.layers.Reshape((2, 3, 6), name = 'Res7829', )(Min31954)
Res86043 = keras.layers.Reshape((2, 18), name = 'Res86043', )(Res7829)
Fla62604 = keras.layers.Flatten(name = 'Fla62604', )(Res86043)
Max75069 = keras.layers.Maximum(name = 'Max75069', )([in0Max75069,in1Max75069])
Res81932 = keras.layers.Reshape((2, 1, 2), name = 'Res81932', )(Max75069)
Res22960 = keras.layers.Reshape((2, 2), name = 'Res22960', )(Res81932)
Fla68924 = keras.layers.Flatten(name = 'Fla68924', )(Res22960)
Glo28687 = keras.layers.GlobalAveragePooling2D(name = 'Glo28687', )(in0Glo28687)
Con69453 = keras.layers.Concatenate(axis=1, name = 'Con69453', )([Glo28687,in0Con69453])
Min9361 = keras.layers.Minimum(name = 'Min9361', )([Fla68924,Con69453])
Con62109 = keras.layers.Concatenate(axis=1, name = 'Con62109', )([Min9361,in0Con62109])
Sub31379 = keras.layers.Subtract(name = 'Sub31379', )([Fla62604,Con62109])
model = tf.keras.models.Model(inputs=[in0Sim63192,in0Con55684,in0Sub52346,in1Sub52346,in0Max75069,in1Max75069,in0Glo28687,in0Con69453,in0Con62109], outputs=Sub31379)
w = model.get_layer('Sim63192').get_weights() 
w[0] = np.array([[10], [4], [9]])
w[1] = np.array([[10]])
w[2] = np.array([7])
model.get_layer('Sim63192').set_weights(w) 
in0Sim63192 = tf.constant([[[9, 6, 5], [5, 5, 7], [6, 10, 7]]])
in0Con55684 = tf.constant([[[[[0.0714, 0.9486], [0.675, 0.0593]], [[0.2746, 0.0968], [0.8506, 0.8348]], [[0.9702, 0.8561], [0.5696, 0.234]]], [[[0.7759, 0.7658], [0.6941, 0.726]], [[0.7147, 0.0109], [0.1575, 0.0404]], [[0.7365, 0.5088], [0.4577, 0.5568]]]]])
in0Sub52346 = tf.constant([[[[[0.7928, 0.0224, 0.1101], [0.5301, 0.5834, 0.7503]], [[0.5727, 0.4666, 0.7413], [0.6351, 0.3809, 0.8237]], [[0.6423, 0.5966, 0.0626], [0.7882, 0.4952, 0.6501]]], [[[0.025, 0.3094, 0.9158], [0.1758, 0.3475, 0.4327]], [[0.3048, 0.5321, 0.6348], [0.3925, 0.0515, 0.4186]], [[0.801, 0.3851, 0.2593], [0.961, 0.9097, 0.2038]]]]])
in1Sub52346 = tf.constant([[[[[0.7732, 0.7009, 0.357], [0.3368, 0.7805, 0.5465]], [[0.7514, 0.7052, 0.1465], [0.2724, 0.8173, 0.9486]], [[0.9554, 0.334, 0.5308], [0.0533, 0.428, 0.6111]]], [[[0.4804, 0.1637, 0.5075], [0.185, 0.1386, 0.6153]], [[0.9216, 0.4121, 0.3301], [0.5873, 0.4574, 0.3632]], [[0.6842, 0.2811, 0.5189], [0.1661, 0.2735, 0.2052]]]]])
in0Max75069 = tf.constant([[[[[0.7746], [0.9081]]], [[[0.9559], [0.9671]]]]])
in1Max75069 = tf.constant([[[[[0.85], [0.5368]]], [[[0.1632], [0.9587]]]]])
in0Glo28687 = tf.constant([[[[1.5706], [1.6292]], [[1.0046], [1.4555]]]])
in0Con69453 = tf.constant([[0.6981, 0.4278, 0.0703]])
in0Con62109 = tf.constant([[0.5032, 0.0897, 0.0824, 0.0372, 0.1009, 0.7778, 0.2892, 0.2521, 0.6606, 0.6011, 0.9007, 0.4154, 0.1197, 0.6962, 0.6083, 0.9641, 0.3401, 0.4338, 0.7319, 0.4398, 0.3599, 0.54, 0.5975, 0.6111, 0.2678, 0.2532, 0.5758, 0.399, 0.6262, 0.9114, 0.4455, 0.4142]])
print (np.array2string(model.predict([in0Sim63192,in0Con55684,in0Sub52346,in1Sub52346,in0Max75069,in1Max75069,in0Glo28687,in0Con69453,in0Con62109],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub31379.png')

LSim63192 = simple_rnn_layer([[[9, 6, 5], [5, 5, 7], [6, 10, 7]]],[[10], [4], [9]],[[10]],[7], Sim63192), 
LRes18582 = reshape_layer(Sim63192, [1, 1], Res18582), 
LRes66356 = reshape_layer(Res18582, [1, 1, 1], Res66356), 
LRes13972 = reshape_layer(Res66356, [1, 1, 1, 1], Res13972), 
LZer71118 = zero_padding3D_layer(Res13972, 1, 0, 2, 0, 1, 0, Zer71118), 
LCon55684 = concatenate_layer([Zer71118,[[[[[0.0714, 0.9486], [0.675, 0.0593]], [[0.2746, 0.0968], [0.8506, 0.8348]], [[0.9702, 0.8561], [0.5696, 0.234]]], [[[0.7759, 0.7658], [0.6941, 0.726]], [[0.7147, 0.0109], [0.1575, 0.0404]], [[0.7365, 0.5088], [0.4577, 0.5568]]]]]], 4, Con55684), 
LSub52346 = subtract_layer([[[[[0.7928, 0.0224, 0.1101], [0.5301, 0.5834, 0.7503]], [[0.5727, 0.4666, 0.7413], [0.6351, 0.3809, 0.8237]], [[0.6423, 0.5966, 0.0626], [0.7882, 0.4952, 0.6501]]], [[[0.025, 0.3094, 0.9158], [0.1758, 0.3475, 0.4327]], [[0.3048, 0.5321, 0.6348], [0.3925, 0.0515, 0.4186]], [[0.801, 0.3851, 0.2593], [0.961, 0.9097, 0.2038]]]]], [[[[[0.7732, 0.7009, 0.357], [0.3368, 0.7805, 0.5465]], [[0.7514, 0.7052, 0.1465], [0.2724, 0.8173, 0.9486]], [[0.9554, 0.334, 0.5308], [0.0533, 0.428, 0.6111]]], [[[0.4804, 0.1637, 0.5075], [0.185, 0.1386, 0.6153]], [[0.9216, 0.4121, 0.3301], [0.5873, 0.4574, 0.3632]], [[0.6842, 0.2811, 0.5189], [0.1661, 0.2735, 0.2052]]]]], Sub52346), 
LMin31954 = minimum_layer([Con55684,Sub52346], Min31954), 
LRes7829 = reshape_layer(Min31954, [2, 3, 6], Res7829), 
LRes86043 = reshape_layer(Res7829, [2, 18], Res86043), 
LFla62604 = flatten_layer(Res86043, Fla62604), 
LMax75069 = maximum_layer([[[[[[0.7746], [0.9081]]], [[[0.9559], [0.9671]]]]], [[[[[0.85], [0.5368]]], [[[0.1632], [0.9587]]]]]], Max75069), 
LRes81932 = reshape_layer(Max75069, [2, 1, 2], Res81932), 
LRes22960 = reshape_layer(Res81932, [2, 2], Res22960), 
LFla68924 = flatten_layer(Res22960, Fla68924), 
LGlo28687 = global_average_pooling2D_layer([[[[1.5706], [1.6292]], [[1.0046], [1.4555]]]], Glo28687), 
LCon69453 = concatenate_layer([Glo28687,[[0.6981, 0.4278, 0.0703]]], 1, Con69453), 
LMin9361 = minimum_layer([Fla68924,Con69453], Min9361), 
LCon62109 = concatenate_layer([Min9361,[[0.5032, 0.0897, 0.0824, 0.0372, 0.1009, 0.7778, 0.2892, 0.2521, 0.6606, 0.6011, 0.9007, 0.4154, 0.1197, 0.6962, 0.6083, 0.9641, 0.3401, 0.4338, 0.7319, 0.4398, 0.3599, 0.54, 0.5975, 0.6111, 0.2678, 0.2532, 0.5758, 0.399, 0.6262, 0.9114, 0.4455, 0.4142]]], 1, Con62109), 
LSub31379 = subtract_layer(Fla62604,Con62109, Sub31379), 
exec_layers([LSim63192,LRes18582,LRes66356,LRes13972,LZer71118,LCon55684,LSub52346,LMin31954,LRes7829,LRes86043,LFla62604,LMax75069,LRes81932,LRes22960,LFla68924,LGlo28687,LCon69453,LMin9361,LCon62109,LSub31379],["Sim63192","Res18582","Res66356","Res13972","Zer71118","Con55684","Sub52346","Min31954","Res7829","Res86043","Fla62604","Max75069","Res81932","Res22960","Fla68924","Glo28687","Con69453","Min9361","Con62109","Sub31379"],Sub31379,"Sub31379")

Actual (Unparsed): [[-0.8500000, -1.3766000, -0.6747000, -0.0703000, -0.7003000, -0.0304000, -0.2611000, -0.2758000, -0.0041000, -0.7778000, -0.7256000, -0.3770000, -0.9737000, -0.3385000, -1.3689000, -0.4154000, -0.0525000, -0.6572000, -1.0637000, -0.8184000, 0.0682000, -0.4430000, -0.5230000, -0.6224000, -0.9767000, -0.4200000, -0.5866000, -0.8059000, -0.6737000, -0.2128000, -0.5758000, -0.2950000, -0.8858000, -0.1165000, 0.0122000, -0.4156000]]

Expected (Unparsed): [[-0.85,-1.3766,-0.6747,-0.0703,-0.7002999999999999,-0.030400000000000003,-0.2611,-0.27580000000000005,-0.004100000000000006,-0.7778,-0.7256,-0.377,-0.9737,-0.33849999999999997,-1.3689,-0.4154,-0.05250000000000002,-0.6572,-1.0636999999999999,-0.8184,0.06819999999999998,-0.443,-0.523,-0.6224000000000001,-0.9767,-0.42000000000000004,-0.5866,-0.8059000000000001,-0.6737,-0.2128,-0.5758,-0.29500000000000004,-0.8858,-0.11650000000000005,0.012199999999999989,-0.41559999999999997]]

Actual:   [[-0.85, -1.3766, -0.6747, -0.0703, -0.7003, -0.0304, -0.2611, -0.2758, -0.0041, -0.7778, -0.7256, -0.377, -0.9737, -0.3385, -1.3689, -0.4154, -0.0525, -0.6572, -1.0637, -0.8184, 0.0682, -0.443, -0.523, -0.6224, -0.9767, -0.42, -0.5866, -0.8059, -0.6737, -0.2128, -0.5758, -0.295, -0.8858, -0.1165, 0.0122, -0.4156]]

Expected: [[-0.85, -1.3766, -0.6747, -0.0703, -0.7002, -0.0304, -0.2611, -0.2758, -0.0041, -0.7778, -0.7256, -0.377, -0.9737, -0.3384, -1.3689, -0.4154, -0.0525, -0.6572, -1.0636, -0.8184, 0.0682, -0.443, -0.523, -0.6224, -0.9767, -0.42, -0.5866, -0.8059, -0.6737, -0.2128, -0.5758, -0.295, -0.8858, -0.1165, 0.0122, -0.4155]]