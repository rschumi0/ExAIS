import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer68962 = tf.keras.layers.Input(shape=([3, 2]))

Zer68962 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer68962', )(in0Zer68962)
Res42900 = keras.layers.Reshape((5, 2, 1), name = 'Res42900', )(Zer68962)
Res669 = keras.layers.Reshape((5, 2, 1, 1), name = 'Res669', )(Res42900)
Con6939 = keras.layers.Conv3D(3, (4, 2, 1),strides=(8, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con6939', )(Res669)
PRe11930 = keras.layers.PReLU(name = 'PRe11930', )(Con6939)
Res61410 = keras.layers.Reshape((1, 1, 3), name = 'Res61410', )(PRe11930)
Res2823 = keras.layers.Reshape((1, 3), name = 'Res2823', )(Res61410)
GRU34174 = keras.layers.GRU(3,reset_after=True, recurrent_activation='sigmoid', name = 'GRU34174', )(Res2823)
Res400 = keras.layers.Reshape((3, 1), name = 'Res400', )(GRU34174)
Sep20011 = keras.layers.SeparableConv1D(4, (2),strides=(2), padding='same', name = 'Sep20011', )(Res400)
model = tf.keras.models.Model(inputs=[in0Zer68962], outputs=Sep20011)
w = model.get_layer('Con6939').get_weights() 
w[0] = np.array([[[[[0.6675, 0.3028, 0.4654]]], [[[0.7203, 0.1559, 0.5847]]]], [[[[0.9896, 0.3218, 0.5816]]], [[[0.7406, 0.0052, 0.8307]]]], [[[[0.0858, 0.1441, 0.0116]]], [[[0.6907, 0.8994, 0.8995]]]], [[[[0.6919, 0.2988, 0.9279]]], [[[0.2938, 0.9411, 0.2662]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con6939').set_weights(w) 
w = model.get_layer('PRe11930').get_weights() 
w[0] = np.array([[[[0.7809, 0.248, 0.1753]]]])
model.get_layer('PRe11930').set_weights(w) 
w = model.get_layer('GRU34174').get_weights() 
w[0] = np.array([[2, 3, 1, 9, 1, 9, 5, 10, 5], [1, 8, 9, 10, 2, 2, 6, 1, 10], [7, 10, 4, 9, 9, 6, 1, 2, 4]])
w[1] = np.array([[1, 2, 6, 9, 9, 5, 2, 8, 6], [2, 6, 10, 8, 8, 2, 7, 8, 2], [9, 5, 3, 5, 9, 4, 10, 9, 5]])
w[2] = np.array([[6, 9, 7, 9, 2, 4, 9, 7, 5], [5, 4, 1, 8, 7, 2, 1, 1, 4]])
model.get_layer('GRU34174').set_weights(w) 
w = model.get_layer('Sep20011').get_weights() 
w[0] = np.array([[[0.0423]], [[0.7041]]])
w[1] = np.array([[[0.6285, 0.0205, 0.6294, 0.0014]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep20011').set_weights(w) 
in0Zer68962 = tf.constant([[[1.9425, 1.8522], [1.1685, 1.3791], [1.7319, 1.6004]]])
print (np.array2string(model.predict([in0Zer68962],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sep20011.png')

LZer68962 = zero_padding1D_layer([[[1.9425, 1.8522], [1.1685, 1.3791], [1.7319, 1.6004]]], 1, 1, Zer68962), 
LRes42900 = reshape_layer(Zer68962, [5, 2, 1], Res42900), 
LRes669 = reshape_layer(Res42900, [5, 2, 1, 1], Res669), 
LCon6939 = conv3D_layer(Res669, 4, 2, 1,[[[[[0.6675, 0.3028, 0.4654]]], [[[0.7203, 0.1559, 0.5847]]]], [[[[0.9896, 0.3218, 0.5816]]], [[[0.7406, 0.0052, 0.8307]]]], [[[[0.0858, 0.1441, 0.0116]]], [[[0.6907, 0.8994, 0.8995]]]], [[[[0.6919, 0.2988, 0.9279]]], [[[0.2938, 0.9411, 0.2662]]]]],[0, 0, 0], 8, 1, 1, false, 1, 1, 1, Con6939), 
LPRe11930 = prelu_layer(Con6939, [[[[0.7809, 0.248, 0.1753]]]], PRe11930), 
LRes61410 = reshape_layer(PRe11930, [1, 1, 3], Res61410), 
LRes2823 = reshape_layer(Res61410, [1, 3], Res2823), 
LGRU34174 = gru_layer(Res2823,[[2, 3, 1, 9, 1, 9, 5, 10, 5], [1, 8, 9, 10, 2, 2, 6, 1, 10], [7, 10, 4, 9, 9, 6, 1, 2, 4]],[[1, 2, 6, 9, 9, 5, 2, 8, 6], [2, 6, 10, 8, 8, 2, 7, 8, 2], [9, 5, 3, 5, 9, 4, 10, 9, 5]],[[6, 9, 7, 9, 2, 4, 9, 7, 5], [5, 4, 1, 8, 7, 2, 1, 1, 4]], true, GRU34174), 
LRes400 = reshape_layer(GRU34174, [3, 1], Res400), 
LSep20011 = separable_conv1D_layer(Res400, 2,[[[[0.0423]], [[0.7041]]],[[[0.6285, 0.0205, 0.6294, 0.0014]]]],[0, 0, 0, 0], 2, true, Sep20011), 
exec_layers([LZer68962,LRes42900,LRes669,LCon6939,LPRe11930,LRes61410,LRes2823,LGRU34174,LRes400,LSep20011],["Zer68962","Res42900","Res669","Con6939","PRe11930","Res61410","Res2823","GRU34174","Res400","Sep20011"],Sep20011,"Sep20011")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]]]

Actual:   [[[0, 0, 0, 0], [0, 0, 0, 0]]]

Expected: [[[0, 0, 0, 0], [0, 0, 0, 0]]]