import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul50257 = tf.keras.layers.Input(shape=([2, 2]))
in1Mul50257 = tf.keras.layers.Input(shape=([2, 2]))
in0Con8190 = tf.keras.layers.Input(shape=([4, 2, 3]))
in0Sub35378 = tf.keras.layers.Input(shape=([3, 2, 2]))
in1Sub35378 = tf.keras.layers.Input(shape=([3, 2, 2]))
in0Con70700 = tf.keras.layers.Input(shape=([4, 2, 2]))
in0Max61928 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in1Max61928 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Con87634 = tf.keras.layers.Input(shape=([4, 2, 3]))
in0Mas46466 = tf.keras.layers.Input(shape=([4, 2, 4]))

Mul50257 = keras.layers.Multiply(name = 'Mul50257', )([in0Mul50257,in1Mul50257])
Res53497 = keras.layers.Reshape((2, 2, 1), name = 'Res53497', )(Mul50257)
Res42390 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res42390', )(Res53497)
Cro19422 = keras.layers.Cropping3D(cropping=((0, 0), (0, 1), (0, 0)), name = 'Cro19422', )(Res42390)
Res19190 = keras.layers.Reshape((2, 1, 1), name = 'Res19190', )(Cro19422)
Res19571 = keras.layers.Reshape((2, 1), name = 'Res19571', )(Res19190)
Sof75763 = keras.layers.Softmax(axis=1, name = 'Sof75763', )(Res19571)
Res85346 = keras.layers.Reshape((2, 1, 1), name = 'Res85346', )(Sof75763)
Zer89046 = keras.layers.ZeroPadding2D(padding=((2, 0), (1, 0)), name = 'Zer89046', )(Res85346)
Con8190 = keras.layers.Concatenate(axis=3, name = 'Con8190', )([Zer89046,in0Con8190])
Sub35378 = keras.layers.Subtract(name = 'Sub35378', )([in0Sub35378,in1Sub35378])
Zer82911 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer82911', )(Sub35378)
Con70700 = keras.layers.Concatenate(axis=3, name = 'Con70700', )([Zer82911,in0Con70700])
Max61928 = keras.layers.Maximum(name = 'Max61928', )([in0Max61928,in1Max61928])
Res99001 = keras.layers.Reshape((2, 2, 2), name = 'Res99001', )(Max61928)
Res48146 = keras.layers.Reshape((2, 4), name = 'Res48146', )(Res99001)
Sim60178 = keras.layers.SimpleRNN(1,name = 'Sim60178', )(Res48146)
Res37671 = keras.layers.Reshape((1, 1), name = 'Res37671', )(Sim60178)
Res76515 = keras.layers.Reshape((1, 1, 1), name = 'Res76515', )(Res37671)
Zer85668 = keras.layers.ZeroPadding2D(padding=((3, 0), (1, 0)), name = 'Zer85668', )(Res76515)
Con87634 = keras.layers.Concatenate(axis=3, name = 'Con87634', )([Zer85668,in0Con87634])
Mas46466 = keras.layers.Masking(mask_value=2, name = 'Mas46466', )(in0Mas46466)
Mul6715 = keras.layers.Multiply(name = 'Mul6715', )([Con87634,Mas46466])
Ave18241 = keras.layers.Average(name = 'Ave18241', )([Con70700,Mul6715])
Add52734 = keras.layers.Add(name = 'Add52734', )([Con8190,Ave18241])
model = tf.keras.models.Model(inputs=[in0Mul50257,in1Mul50257,in0Con8190,in0Sub35378,in1Sub35378,in0Con70700,in0Max61928,in1Max61928,in0Con87634,in0Mas46466], outputs=Add52734)
w = model.get_layer('Sim60178').get_weights() 
w[0] = np.array([[2], [7], [10], [7]])
w[1] = np.array([[5]])
w[2] = np.array([5])
model.get_layer('Sim60178').set_weights(w) 
in0Mul50257 = tf.constant([[[0.32, 0.5499], [0.7694, 0.8687]]])
in1Mul50257 = tf.constant([[[0.7483, 0.4047], [0.7872, 0.261]]])
in0Con8190 = tf.constant([[[[0.7841, 0.794, 0.9076], [0.3958, 0.915, 0.7681]], [[0.6808, 0.2805, 0.435], [0.0277, 0.9757, 0.2611]], [[0.0266, 0.499, 0.5021], [0.2975, 0.4488, 0.7233]], [[0.6385, 0.5819, 0.0036], [0.785, 0.3344, 0.0373]]]])
in0Sub35378 = tf.constant([[[[0.2456, 0.0295], [0.4685, 0.2896]], [[0.8339, 0.4202], [0.9757, 0.3249]], [[0.3906, 0.3122], [0.965, 0.704]]]])
in1Sub35378 = tf.constant([[[[0.7423, 0.631], [0.7476, 0.8065]], [[0.6419, 0.902], [0.4347, 0.2523]], [[0.5352, 0.8123], [0.1428, 0.0042]]]])
in0Con70700 = tf.constant([[[[0.4795, 0.2599], [0.6416, 0.1366]], [[0.2124, 0.7761], [0.2159, 0.3419]], [[0.1858, 0.622], [0.7829, 0.3078]], [[0.8582, 0.0914], [0.0769, 0.1626]]]])
in0Max61928 = tf.constant([[[[[0.744], [0.6861]], [[0.1661], [0.4]]], [[[0.8752], [0.2056]], [[0.6603], [0.2688]]]]])
in1Max61928 = tf.constant([[[[[0.4379], [0.3614]], [[0.0777], [0.0758]]], [[[0.1022], [0.7948]], [[0.0546], [0.8601]]]]])
in0Con87634 = tf.constant([[[[0.3202, 0.3536, 0.9617], [0.3436, 0.6757, 0.5432]], [[0.5712, 0.9722, 0.5863], [0.1606, 0.8154, 0.2366]], [[0.0698, 0.566, 0.6948], [0.7029, 0.4894, 0.217]], [[0.3903, 0.0985, 0.9134], [0.2923, 0.9936, 0.7492]]]])
in0Mas46466 = tf.constant([[[[1.7718, 1.4065, 1.7107, 1.5826], [1.6569, 1.3509, 1.3471, 1.3876]], [[1.8326, 1.3082, 1.3457, 1.1924], [1.3474, 1.2322, 1.6666, 1.9686]], [[1.8065, 1.6095, 1.7164, 1.0563], [1.4948, 1.6331, 1.5168, 1.8587]], [[1.531, 1.5939, 1.0429, 1.3073], [1.243, 1.2219, 1.3183, 1.5586]]]])
print (np.array2string(model.predict([in0Mul50257,in1Mul50257,in0Con8190,in0Sub35378,in1Sub35378,in0Con70700,in0Max61928,in1Max61928,in0Con87634,in0Mas46466],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add52734.png')

LMul50257 = multiply_layer([[[[0.32, 0.5499], [0.7694, 0.8687]]], [[[0.7483, 0.4047], [0.7872, 0.261]]]], Mul50257), 
LRes53497 = reshape_layer(Mul50257, [2, 2, 1], Res53497), 
LRes42390 = reshape_layer(Res53497, [2, 2, 1, 1], Res42390), 
LCro19422 = cropping3D_layer(Res42390, 0, 0, 0, 1, 0, 0, Cro19422), 
LRes19190 = reshape_layer(Cro19422, [2, 1, 1], Res19190), 
LRes19571 = reshape_layer(Res19190, [2, 1], Res19571), 
LSof75763 = softmax_layer(Res19571, 1, Sof75763), 
LRes85346 = reshape_layer(Sof75763, [2, 1, 1], Res85346), 
LZer89046 = zero_padding2D_layer(Res85346, 2, 0, 1, 0, Zer89046), 
LCon8190 = concatenate_layer([Zer89046,[[[[0.7841, 0.794, 0.9076], [0.3958, 0.915, 0.7681]], [[0.6808, 0.2805, 0.435], [0.0277, 0.9757, 0.2611]], [[0.0266, 0.499, 0.5021], [0.2975, 0.4488, 0.7233]], [[0.6385, 0.5819, 0.0036], [0.785, 0.3344, 0.0373]]]]], 3, Con8190), 
LSub35378 = subtract_layer([[[[0.2456, 0.0295], [0.4685, 0.2896]], [[0.8339, 0.4202], [0.9757, 0.3249]], [[0.3906, 0.3122], [0.965, 0.704]]]], [[[[0.7423, 0.631], [0.7476, 0.8065]], [[0.6419, 0.902], [0.4347, 0.2523]], [[0.5352, 0.8123], [0.1428, 0.0042]]]], Sub35378), 
LZer82911 = zero_padding2D_layer(Sub35378, 1, 0, 0, 0, Zer82911), 
LCon70700 = concatenate_layer([Zer82911,[[[[0.4795, 0.2599], [0.6416, 0.1366]], [[0.2124, 0.7761], [0.2159, 0.3419]], [[0.1858, 0.622], [0.7829, 0.3078]], [[0.8582, 0.0914], [0.0769, 0.1626]]]]], 3, Con70700), 
LMax61928 = maximum_layer([[[[[[0.744], [0.6861]], [[0.1661], [0.4]]], [[[0.8752], [0.2056]], [[0.6603], [0.2688]]]]], [[[[[0.4379], [0.3614]], [[0.0777], [0.0758]]], [[[0.1022], [0.7948]], [[0.0546], [0.8601]]]]]], Max61928), 
LRes99001 = reshape_layer(Max61928, [2, 2, 2], Res99001), 
LRes48146 = reshape_layer(Res99001, [2, 4], Res48146), 
LSim60178 = simple_rnn_layer(Res48146,[[2], [7], [10], [7]],[[5]],[5], Sim60178), 
LRes37671 = reshape_layer(Sim60178, [1, 1], Res37671), 
LRes76515 = reshape_layer(Res37671, [1, 1, 1], Res76515), 
LZer85668 = zero_padding2D_layer(Res76515, 3, 0, 1, 0, Zer85668), 
LCon87634 = concatenate_layer([Zer85668,[[[[0.3202, 0.3536, 0.9617], [0.3436, 0.6757, 0.5432]], [[0.5712, 0.9722, 0.5863], [0.1606, 0.8154, 0.2366]], [[0.0698, 0.566, 0.6948], [0.7029, 0.4894, 0.217]], [[0.3903, 0.0985, 0.9134], [0.2923, 0.9936, 0.7492]]]]], 3, Con87634), 
LMas46466 = masking_layer([[[[1.7718, 1.4065, 1.7107, 1.5826], [1.6569, 1.3509, 1.3471, 1.3876]], [[1.8326, 1.3082, 1.3457, 1.1924], [1.3474, 1.2322, 1.6666, 1.9686]], [[1.8065, 1.6095, 1.7164, 1.0563], [1.4948, 1.6331, 1.5168, 1.8587]], [[1.531, 1.5939, 1.0429, 1.3073], [1.243, 1.2219, 1.3183, 1.5586]]]], 2, Mas46466), 
LMul6715 = multiply_layer([Con87634,Mas46466], Mul6715), 
LAve18241 = average_layer([Con70700,Mul6715], Ave18241), 
LAdd52734 = add_layer([Con8190,Ave18241], Add52734), 
exec_layers([LMul50257,LRes53497,LRes42390,LCro19422,LRes19190,LRes19571,LSof75763,LRes85346,LZer89046,LCon8190,LSub35378,LZer82911,LCon70700,LMax61928,LRes99001,LRes48146,LSim60178,LRes37671,LRes76515,LZer85668,LCon87634,LMas46466,LMul6715,LAve18241,LAdd52734],["Mul50257","Res53497","Res42390","Cro19422","Res19190","Res19571","Sof75763","Res85346","Zer89046","Con8190","Sub35378","Zer82911","Con70700","Max61928","Res99001","Res48146","Sim60178","Res37671","Res76515","Zer85668","Con87634","Mas46466","Mul6715","Ave18241","Add52734"],Add52734,"Add52734")

Actual (Unparsed): [[[[0.0000000, 1.0092806, 1.3362018, 1.7985432], [0.0000000, 0.6278846, 1.6909178, 1.2132722]], [[-0.2483500, 0.7536720, 1.0408448, 1.1726021], [-0.1395500, -0.1318043, 1.7631228, 0.6649354]], [[0.0960000, -0.1581285, 1.0776412, 1.1800586], [0.6799558, 0.9077530, 1.2114110, 1.0788689]], [[-0.0723000, 0.6994995, 1.0623628, 0.6463439], [1.6231442, 1.3134807, 1.0277814, 0.7024515]]]]

Expected (Unparsed): [[[[0.0,1.00928065,1.33620176,1.79854321],[0.0,0.62788462,1.690917735,1.21327216]],[[-0.24834999999999996,0.7536719199999999,1.0408447699999999,1.17260206],[-0.13955,-0.13180433999999996,1.76312282,0.66493538]],[[0.09599999999999997,-0.15812844999999998,1.0776412,1.18005862],[0.6799557622056684,0.907752995,1.2114109599999998,1.07886895]],[[-0.0723,0.699499585,1.062362825,0.6463439099999999],[1.6231442377943315,1.313480685,1.02778144,0.70245156]]]]

Actual:   [[[[0, 1.0093, 1.3363, 1.7986], [0, 0.6279, 1.691, 1.2133]], [[-0.2483, 0.7537, 1.0409, 1.1727], [-0.1395, -0.1318, 1.7632, 0.665]], [[0.096, -0.1581, 1.0777, 1.1801], [0.68, 0.9078, 1.2115, 1.0789]], [[-0.0723, 0.6995, 1.0624, 0.6464], [1.6232, 1.3135, 1.0278, 0.7025]]]]

Expected: [[[[0, 1.0093, 1.3363, 1.7986], [0, 0.6279, 1.691, 1.2133]], [[-0.2483, 0.7537, 1.0409, 1.1727], [-0.1395, -0.1318, 1.7632, 0.665]], [[0.096, -0.1581, 1.0777, 1.1801], [0.68, 0.9078, 1.2115, 1.0789]], [[-0.0723, 0.6995, 1.0624, 0.6464], [1.6232, 1.3135, 1.0278, 0.7025]]]]