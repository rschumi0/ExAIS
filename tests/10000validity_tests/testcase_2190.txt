import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con44250 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Glo23071 = tf.keras.layers.Input(shape=([1, 1]))
in0Con36019 = tf.keras.layers.Input(shape=([215]))
in0Sub90070 = tf.keras.layers.Input(shape=([3, 3, 2]))
in1Sub90070 = tf.keras.layers.Input(shape=([3, 3, 2]))
in0GRU95145 = tf.keras.layers.Input(shape=([1, 2]))
in0Con4370 = tf.keras.layers.Input(shape=([16]))
in0Con364 = tf.keras.layers.Input(shape=([198]))

Con44250 = keras.layers.Conv2DTranspose(3, (2, 1),strides=(5, 2), padding='same', name = 'Con44250', )(in0Con44250)
Zer93765 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer93765', )(Con44250)
Res45344 = keras.layers.Reshape((12, 18), name = 'Res45344', )(Zer93765)
Fla46389 = keras.layers.Flatten(name = 'Fla46389', )(Res45344)
Glo23071 = keras.layers.GlobalAveragePooling1D(name = 'Glo23071', )(in0Glo23071)
Con36019 = keras.layers.Concatenate(axis=1, name = 'Con36019', )([Glo23071,in0Con36019])
Max4692 = keras.layers.Maximum(name = 'Max4692', )([Fla46389,Con36019])
Sub90070 = keras.layers.Subtract(name = 'Sub90070', )([in0Sub90070,in1Sub90070])
Res54282 = keras.layers.Reshape((3, 6), name = 'Res54282', )(Sub90070)
Fla23080 = keras.layers.Flatten(name = 'Fla23080', )(Res54282)
GRU95145 = keras.layers.GRU(2,reset_after=False, recurrent_activation='sigmoid', name = 'GRU95145', )(in0GRU95145)
Con4370 = keras.layers.Concatenate(axis=1, name = 'Con4370', )([GRU95145,in0Con4370])
Ave75773 = keras.layers.Average(name = 'Ave75773', )([Fla23080,Con4370])
Bat78210 = keras.layers.BatchNormalization(axis=1, epsilon=0.42151020354108637,  name = 'Bat78210', )(Ave75773)
Con364 = keras.layers.Concatenate(axis=1, name = 'Con364', )([Bat78210,in0Con364])
Mul36932 = keras.layers.Multiply(name = 'Mul36932', )([Max4692,Con364])
Res27965 = keras.layers.Reshape((216, 1), name = 'Res27965', )(Mul36932)
Res40404 = keras.layers.Reshape((216, 1, 1), name = 'Res40404', )(Res27965)
Res77092 = keras.layers.Reshape((216, 1, 1, 1), name = 'Res77092', )(Res40404)
Cro66736 = keras.layers.Cropping3D(cropping=((42, 116), (0, 0), (0, 0)), name = 'Cro66736', )(Res77092)
model = tf.keras.models.Model(inputs=[in0Con44250,in0Glo23071,in0Con36019,in0Sub90070,in1Sub90070,in0GRU95145,in0Con4370,in0Con364], outputs=Cro66736)
w = model.get_layer('Con44250').get_weights() 
w[0] = np.array([[[[0.3846], [0.7262], [0.6611]]], [[[0.8401], [0.8724], [0.2074]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con44250').set_weights(w) 
w = model.get_layer('GRU95145').get_weights() 
w[0] = np.array([[10, 9, 4, 6, 9, 10], [7, 2, 2, 2, 10, 2]])
w[1] = np.array([[8, 6, 3, 5, 6, 2], [8, 3, 7, 2, 6, 6]])
w[2] = np.array([10, 2, 9, 6, 2, 3])
model.get_layer('GRU95145').set_weights(w) 
w = model.get_layer('Bat78210').get_weights() 
w[0] = np.array([0.7207, 0.0657, 0.1607, 0.822, 0.3177, 0.2638, 0.7559, 0.8559, 0.0165, 0.5604, 0.7588, 0.2359, 0.4302, 0.2009, 0.75, 0.5077, 0.2181, 0.9003])
w[1] = np.array([0.026, 0.2043, 0.8127, 0.0963, 0.5185, 0.2775, 0.4653, 0.0139, 0.7366, 0.6487, 0.919, 0.9509, 0.4562, 0.2721, 0.8923, 0.2638, 0.4605, 0.0026])
w[2] = np.array([0.081, 0.5076, 0.3625, 0.8569, 0.5758, 0.0604, 0.4307, 0.9704, 0.4296, 0.3527, 0.3831, 0.6625, 0.6064, 0.5111, 0.313, 0.5442, 0.7001, 0.8276])
w[3] = np.array([0.2689, 0.5312, 0.6158, 0.9666, 0.5219, 0.9544, 0.8773, 0.2383, 0.2229, 0.7034, 0.3424, 0.5781, 0.9785, 0.4803, 0.8889, 0.1017, 0.8545, 0.7957])
model.get_layer('Bat78210').set_weights(w) 
in0Con44250 = tf.constant([[[[0.8329], [0.5253]], [[0.0857], [0.6804]]]])
in0Glo23071 = tf.constant([[[1.2855]]])
in0Con36019 = tf.constant([[0.8974, 0.2215, 0.4283, 0.7301, 0.7771, 0.1647, 0.3984, 0.7916, 0.4491, 0.8726, 0.4772, 0.2411, 0.5752, 0.9976, 0.4512, 0.152, 0.7834, 0.4062, 0.1265, 0.1826, 0.4312, 0.5852, 0.8209, 0.9794, 0.8197, 0.9593, 0.43, 0.4045, 0.7705, 0.3228, 0.8752, 0.0166, 0.4617, 0.5491, 0.2398, 0.337, 0.6883, 0.2355, 0.1857, 0.5665, 0.2574, 0.9648, 0.3022, 0.5834, 0.0596, 0.421, 0.8866, 0.25, 0.4676, 0.6836, 0.2798, 0.2809, 0.1054, 0.6429, 0.2895, 0.1884, 0.7021, 0.6273, 0.4203, 0.1058, 0.7023, 0.0166, 0.6003, 0.6151, 0.5355, 0.8248, 0.8458, 0.0551, 0.9689, 0.9791, 0.8361, 0.1709, 0.7608, 0.2992, 0.6849, 0.3814, 0.9147, 0.9831, 0.2905, 0.386, 0.1925, 0.7434, 0.5202, 0.3107, 0.1869, 0.609, 0.1444, 0.1028, 0.1782, 0.8019, 0.8737, 0.4214, 0.2001, 0.0338, 0.0696, 0.8445, 0.2304, 0.0258, 0.704, 0.8148, 0.1839, 0.0499, 0.9235, 0.3811, 0.4362, 0.8152, 0.1356, 0.4544, 0.9337, 0.0744, 0.8831, 0.9995, 0.5578, 0.9185, 0.8952, 0.3037, 0.3001, 0.8406, 0.6135, 0.2292, 0.982, 0.302, 0.1767, 0.1414, 0.7013, 0.7137, 0.3221, 0.029, 0.9296, 0.4583, 0.9072, 0.1831, 0.1947, 0.8206, 0.7929, 0.6879, 0.5853, 0.4688, 0.6376, 0.8875, 0.8918, 0.4365, 0.751, 0.9444, 0.0568, 0.3873, 0.5295, 0.5771, 0.7527, 0.3196, 0.153, 0.0783, 0.3249, 0.7606, 0.1619, 0.7517, 0.0438, 0.9348, 0.2525, 0.978, 0.594, 0.3529, 0.1296, 0.2237, 0.9959, 0.7576, 0.5377, 0.4385, 0.7029, 0.3908, 0.6564, 0.4542, 0.4457, 0.1007, 0.8882, 0.1928, 0.5067, 0.8935, 0.6959, 0.7188, 0.4977, 0.1539, 0.5504, 0.4317, 0.3893, 0.9074, 0.2422, 0.9817, 0.4904, 0.1783, 0.7764, 0.815, 0.3172, 0.7088, 0.823, 0.6075, 0.8022, 0.0476, 0.2273, 0.2282, 0.0946, 0.293, 0.3982, 0.2895, 0.2831, 0.5765, 0.4856, 0.7892, 0.7294, 0.7155, 0.1369, 0.8229, 0.3459, 0.3279, 0.2767]])
in0Sub90070 = tf.constant([[[[0.0457, 0.2225], [0.5926, 0.7477], [0.8253, 0.3607]], [[0.6035, 0.1822], [0.0743, 0.1394], [0.8146, 0.015]], [[0.8657, 0.0062], [0.0916, 0.6677], [0.9515, 0.3376]]]])
in1Sub90070 = tf.constant([[[[0.9416, 0.0758], [0.2816, 0.7096], [0.8945, 0.1485]], [[0.9153, 0.7663], [0.2683, 0.4034], [0.7391, 0.6204]], [[0.2426, 0.9433], [0.0342, 0.3527], [0.6283, 0.5356]]]])
in0GRU95145 = tf.constant([[[10, 6]]])
in0Con4370 = tf.constant([[0.7936, 0.4745, 0.7691, 0.8012, 0.1105, 0.9418, 0.0657, 0.4631, 0.2469, 0.5369, 0.6615, 0.5398, 0.7149, 0.6448, 0.438, 0.9876]])
in0Con364 = tf.constant([[0.4539, 0.2956, 0.8031, 0.4166, 0.0109, 0.3711, 0.9974, 0.4575, 0.8923, 0.776, 0.2383, 0.1971, 0.5034, 0.1517, 0.9447, 0.2197, 0.3596, 0.9428, 0.9415, 0.7582, 0.0017, 0.1759, 0.8553, 0.6317, 0.5115, 0.9702, 0.7425, 0.4901, 0.6115, 0.4491, 0.0492, 0.0276, 0.7244, 0.9307, 0.3405, 0.1112, 0.9082, 0.89, 0.2344, 0.9632, 0.286, 0.2047, 0.6313, 0.6364, 0.4447, 0.6236, 0.6347, 0.0225, 0.2881, 0.2312, 0.5308, 0.5502, 0.0031, 0.9193, 0.8111, 0.5416, 0.1169, 0.5229, 0.503, 0.9229, 0.1103, 0.3287, 0.0098, 0.6138, 0.6856, 0.1247, 0.2477, 0.4566, 0.5854, 0.8199, 0.1185, 0.9874, 0.8034, 0.9381, 0.2582, 0.7018, 0.1416, 0.962, 0.5622, 0.7218, 0.3252, 0.5904, 0.2019, 0.9308, 0.3082, 0.4591, 0.722, 0.7133, 0.9778, 0.7714, 0.3343, 0.4068, 0.1958, 0.5855, 0.7084, 0.4549, 0.0052, 0.2164, 0.402, 0.0374, 0.8714, 0.3212, 0.5697, 0.6428, 0.0294, 0.7587, 0.7409, 0.6506, 0.3651, 0.2414, 0.2705, 0.4935, 0.7697, 0.1294, 0.5285, 0.381, 0.5766, 0.4573, 0.0189, 0.8845, 0.5161, 0.4282, 0.3957, 0.9055, 0.6014, 0.1619, 0.7776, 0.6813, 0.5013, 0.4436, 0.8566, 0.5155, 0.2462, 0.5801, 0.0385, 0.8652, 0.5645, 0.2459, 0.2614, 0.2654, 0.7537, 0.3737, 0.1939, 0.3238, 0.7535, 0.7297, 0.2319, 0.6842, 0.0048, 0.8032, 0.0869, 0.4188, 0.758, 0.0324, 0.7837, 0.7897, 0.7195, 0.1963, 0.5716, 0.6932, 0.3199, 0.0029, 0.5954, 0.3926, 0.4246, 0.5244, 0.1662, 0.3324, 0.0137, 0.1479, 0.129, 0.9297, 0.2088, 0.1365, 0.1308, 0.241, 0.0431, 0.7304, 0.5602, 0.3134, 0.5339, 0.9543, 0.5516, 0.85, 0.9472, 0.947, 0.7246, 0.537, 0.622, 0.6755, 0.2642, 0.017, 0.3611, 0.359, 0.5383, 0.0229, 0.1886, 0.7891]])
print (np.array2string(model.predict([in0Con44250,in0Glo23071,in0Con36019,in0Sub90070,in1Sub90070,in0GRU95145,in0Con4370,in0Con364],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Cro66736.png')

LCon44250 = conv2D_transpose_layer([[[[0.8329], [0.5253]], [[0.0857], [0.6804]]]], 2, 1,[[[[0.3846], [0.7262], [0.6611]]], [[[0.8401], [0.8724], [0.2074]]]],[0, 0, 0], 5, 2, true, Con44250), 
LZer93765 = zero_padding2D_layer(Con44250, 1, 1, 1, 1, Zer93765), 
LRes45344 = reshape_layer(Zer93765, [12, 18], Res45344), 
LFla46389 = flatten_layer(Res45344, Fla46389), 
LGlo23071 = global_average_pooling1D_layer([[[1.2855]]], Glo23071), 
LCon36019 = concatenate_layer([Glo23071,[[0.8974, 0.2215, 0.4283, 0.7301, 0.7771, 0.1647, 0.3984, 0.7916, 0.4491, 0.8726, 0.4772, 0.2411, 0.5752, 0.9976, 0.4512, 0.152, 0.7834, 0.4062, 0.1265, 0.1826, 0.4312, 0.5852, 0.8209, 0.9794, 0.8197, 0.9593, 0.43, 0.4045, 0.7705, 0.3228, 0.8752, 0.0166, 0.4617, 0.5491, 0.2398, 0.337, 0.6883, 0.2355, 0.1857, 0.5665, 0.2574, 0.9648, 0.3022, 0.5834, 0.0596, 0.421, 0.8866, 0.25, 0.4676, 0.6836, 0.2798, 0.2809, 0.1054, 0.6429, 0.2895, 0.1884, 0.7021, 0.6273, 0.4203, 0.1058, 0.7023, 0.0166, 0.6003, 0.6151, 0.5355, 0.8248, 0.8458, 0.0551, 0.9689, 0.9791, 0.8361, 0.1709, 0.7608, 0.2992, 0.6849, 0.3814, 0.9147, 0.9831, 0.2905, 0.386, 0.1925, 0.7434, 0.5202, 0.3107, 0.1869, 0.609, 0.1444, 0.1028, 0.1782, 0.8019, 0.8737, 0.4214, 0.2001, 0.0338, 0.0696, 0.8445, 0.2304, 0.0258, 0.704, 0.8148, 0.1839, 0.0499, 0.9235, 0.3811, 0.4362, 0.8152, 0.1356, 0.4544, 0.9337, 0.0744, 0.8831, 0.9995, 0.5578, 0.9185, 0.8952, 0.3037, 0.3001, 0.8406, 0.6135, 0.2292, 0.982, 0.302, 0.1767, 0.1414, 0.7013, 0.7137, 0.3221, 0.029, 0.9296, 0.4583, 0.9072, 0.1831, 0.1947, 0.8206, 0.7929, 0.6879, 0.5853, 0.4688, 0.6376, 0.8875, 0.8918, 0.4365, 0.751, 0.9444, 0.0568, 0.3873, 0.5295, 0.5771, 0.7527, 0.3196, 0.153, 0.0783, 0.3249, 0.7606, 0.1619, 0.7517, 0.0438, 0.9348, 0.2525, 0.978, 0.594, 0.3529, 0.1296, 0.2237, 0.9959, 0.7576, 0.5377, 0.4385, 0.7029, 0.3908, 0.6564, 0.4542, 0.4457, 0.1007, 0.8882, 0.1928, 0.5067, 0.8935, 0.6959, 0.7188, 0.4977, 0.1539, 0.5504, 0.4317, 0.3893, 0.9074, 0.2422, 0.9817, 0.4904, 0.1783, 0.7764, 0.815, 0.3172, 0.7088, 0.823, 0.6075, 0.8022, 0.0476, 0.2273, 0.2282, 0.0946, 0.293, 0.3982, 0.2895, 0.2831, 0.5765, 0.4856, 0.7892, 0.7294, 0.7155, 0.1369, 0.8229, 0.3459, 0.3279, 0.2767]]], 1, Con36019), 
LMax4692 = maximum_layer([Fla46389,Con36019], Max4692), 
LSub90070 = subtract_layer([[[[0.0457, 0.2225], [0.5926, 0.7477], [0.8253, 0.3607]], [[0.6035, 0.1822], [0.0743, 0.1394], [0.8146, 0.015]], [[0.8657, 0.0062], [0.0916, 0.6677], [0.9515, 0.3376]]]], [[[[0.9416, 0.0758], [0.2816, 0.7096], [0.8945, 0.1485]], [[0.9153, 0.7663], [0.2683, 0.4034], [0.7391, 0.6204]], [[0.2426, 0.9433], [0.0342, 0.3527], [0.6283, 0.5356]]]], Sub90070), 
LRes54282 = reshape_layer(Sub90070, [3, 6], Res54282), 
LFla23080 = flatten_layer(Res54282, Fla23080), 
LGRU95145 = gru_layer([[[10, 6]]],[[10, 9, 4, 6, 9, 10], [7, 2, 2, 2, 10, 2]],[[8, 6, 3, 5, 6, 2], [8, 3, 7, 2, 6, 6]],[10, 2, 9, 6, 2, 3], false, GRU95145), 
LCon4370 = concatenate_layer([GRU95145,[[0.7936, 0.4745, 0.7691, 0.8012, 0.1105, 0.9418, 0.0657, 0.4631, 0.2469, 0.5369, 0.6615, 0.5398, 0.7149, 0.6448, 0.438, 0.9876]]], 1, Con4370), 
LAve75773 = average_layer([Fla23080,Con4370], Ave75773), 
LBat78210 = batch_normalization_layer(Ave75773, 1, 0.42151020354108637, [0.7207, 0.0657, 0.1607, 0.822, 0.3177, 0.2638, 0.7559, 0.8559, 0.0165, 0.5604, 0.7588, 0.2359, 0.4302, 0.2009, 0.75, 0.5077, 0.2181, 0.9003], [0.026, 0.2043, 0.8127, 0.0963, 0.5185, 0.2775, 0.4653, 0.0139, 0.7366, 0.6487, 0.919, 0.9509, 0.4562, 0.2721, 0.8923, 0.2638, 0.4605, 0.0026], [0.081, 0.5076, 0.3625, 0.8569, 0.5758, 0.0604, 0.4307, 0.9704, 0.4296, 0.3527, 0.3831, 0.6625, 0.6064, 0.5111, 0.313, 0.5442, 0.7001, 0.8276], [0.2689, 0.5312, 0.6158, 0.9666, 0.5219, 0.9544, 0.8773, 0.2383, 0.2229, 0.7034, 0.3424, 0.5781, 0.9785, 0.4803, 0.8889, 0.1017, 0.8545, 0.7957], Bat78210), 
LCon364 = concatenate_layer([Bat78210,[[0.4539, 0.2956, 0.8031, 0.4166, 0.0109, 0.3711, 0.9974, 0.4575, 0.8923, 0.776, 0.2383, 0.1971, 0.5034, 0.1517, 0.9447, 0.2197, 0.3596, 0.9428, 0.9415, 0.7582, 0.0017, 0.1759, 0.8553, 0.6317, 0.5115, 0.9702, 0.7425, 0.4901, 0.6115, 0.4491, 0.0492, 0.0276, 0.7244, 0.9307, 0.3405, 0.1112, 0.9082, 0.89, 0.2344, 0.9632, 0.286, 0.2047, 0.6313, 0.6364, 0.4447, 0.6236, 0.6347, 0.0225, 0.2881, 0.2312, 0.5308, 0.5502, 0.0031, 0.9193, 0.8111, 0.5416, 0.1169, 0.5229, 0.503, 0.9229, 0.1103, 0.3287, 0.0098, 0.6138, 0.6856, 0.1247, 0.2477, 0.4566, 0.5854, 0.8199, 0.1185, 0.9874, 0.8034, 0.9381, 0.2582, 0.7018, 0.1416, 0.962, 0.5622, 0.7218, 0.3252, 0.5904, 0.2019, 0.9308, 0.3082, 0.4591, 0.722, 0.7133, 0.9778, 0.7714, 0.3343, 0.4068, 0.1958, 0.5855, 0.7084, 0.4549, 0.0052, 0.2164, 0.402, 0.0374, 0.8714, 0.3212, 0.5697, 0.6428, 0.0294, 0.7587, 0.7409, 0.6506, 0.3651, 0.2414, 0.2705, 0.4935, 0.7697, 0.1294, 0.5285, 0.381, 0.5766, 0.4573, 0.0189, 0.8845, 0.5161, 0.4282, 0.3957, 0.9055, 0.6014, 0.1619, 0.7776, 0.6813, 0.5013, 0.4436, 0.8566, 0.5155, 0.2462, 0.5801, 0.0385, 0.8652, 0.5645, 0.2459, 0.2614, 0.2654, 0.7537, 0.3737, 0.1939, 0.3238, 0.7535, 0.7297, 0.2319, 0.6842, 0.0048, 0.8032, 0.0869, 0.4188, 0.758, 0.0324, 0.7837, 0.7897, 0.7195, 0.1963, 0.5716, 0.6932, 0.3199, 0.0029, 0.5954, 0.3926, 0.4246, 0.5244, 0.1662, 0.3324, 0.0137, 0.1479, 0.129, 0.9297, 0.2088, 0.1365, 0.1308, 0.241, 0.0431, 0.7304, 0.5602, 0.3134, 0.5339, 0.9543, 0.5516, 0.85, 0.9472, 0.947, 0.7246, 0.537, 0.622, 0.6755, 0.2642, 0.017, 0.3611, 0.359, 0.5383, 0.0229, 0.1886, 0.7891]]], 1, Con364), 
LMul36932 = multiply_layer([Max4692,Con364], Mul36932), 
LRes27965 = reshape_layer(Mul36932, [216, 1], Res27965), 
LRes40404 = reshape_layer(Res27965, [216, 1, 1], Res40404), 
LRes77092 = reshape_layer(Res40404, [216, 1, 1, 1], Res77092), 
LCro66736 = cropping3D_layer(Res77092, 42, 116, 0, 0, 0, 0, Cro66736), 
exec_layers([LCon44250,LZer93765,LRes45344,LFla46389,LGlo23071,LCon36019,LMax4692,LSub90070,LRes54282,LFla23080,LGRU95145,LCon4370,LAve75773,LBat78210,LCon364,LMul36932,LRes27965,LRes40404,LRes77092,LCro66736],["Con44250","Zer93765","Res45344","Fla46389","Glo23071","Con36019","Max4692","Sub90070","Res54282","Fla23080","GRU95145","Con4370","Ave75773","Bat78210","Con364","Mul36932","Res27965","Res40404","Res77092","Cro66736"],Cro66736,"Cro66736")

Actual (Unparsed): [[[[[0.4934952]]], [[[0.2931944]]], [[[0.4331745]]], [[[0.2162834]]], [[[0.2802332]]], [[[0.3981721]]], [[[0.0123000]]], [[[0.0129058]]], [[[0.4951998]]], [[[0.2604099]]], [[[0.0956464]]], [[[0.0117205]]], [[[0.5838818]]], [[[0.2576550]]], [[[0.0441610]]], [[[0.6762627]]], [[[0.1794078]]], [[[0.0860354]]], [[[0.0667915]]], [[[0.4469437]]], [[[0.0073820]]], [[[0.3743471]]], [[[0.3904040]]], [[[0.0120488]]], [[[0.2376249]]], [[[0.1955490]]], [[[0.0292471]]], [[[0.5330888]]], [[[0.0030352]]], [[[0.7686267]]], [[[0.1386170]]], [[[0.4120493]]], [[[0.0349765]]], [[[0.3581342]]], [[[0.1918442]]], [[[0.8441766]]], [[[0.1084359]]], [[[0.0954873]]], [[[0.0037828]]], [[[0.1181565]]], [[[0.5096750]]], [[[0.0648689]]], [[[0.0769604]]], [[[0.0853385]]], [[[0.3565086]]], [[[0.1183936]]], [[[0.0121818]]], [[[0.1759547]]], [[[0.6442465]]], [[[0.8196180]]], [[[0.1088055]]], [[[0.1404302]]], [[[0.0047861]]], [[[0.0669552]]], [[[0.4747779]]], [[[0.1663027]]], [[[0.0083902]]], [[[0.4156416]]]]]

Expected (Unparsed): [[[[[0.49349519999999997]]],[[[0.29319444]]],[[[0.4331745000000001]]],[[[0.216283350153]]],[[[0.28023315678]]],[[[0.39817206000000005]]],[[[0.0123]]],[[[0.01290576]]],[[[0.49519984]]],[[[0.26040986]]],[[[0.09564645000000001]]],[[[0.011720479999999998]]],[[[0.58388178]]],[[[0.25765499999999997]]],[[[0.04416096]]],[[[0.6762627199999999]]],[[[0.17940779999999998]]],[[[0.08603540999999999]]],[[[0.06679154]]],[[[0.44694372]]],[[[0.0073820199999999996]]],[[[0.37434708]]],[[[0.39040397]]],[[[0.012048749999999999]]],[[[0.23762488]]],[[[0.19554896]]],[[[0.029247080000000005]]],[[[0.53308878]]],[[[0.00303521]]],[[[0.7686267299999999]]],[[[0.13861699]]],[[[0.41204928]]],[[[0.034976480000000004]]],[[[0.35813421]]],[[[0.19184420000000002]]],[[[0.84417663]]],[[[0.10843592999999999]]],[[[0.09548734999999998]]],[[[0.0037828]]],[[[0.11815650000000001]]],[[[0.50967504]]],[[[0.06486894]]],[[[0.07696038999999999]]],[[[0.08533854]]],[[[0.3565086]]],[[[0.11839356]]],[[[0.0121818]]],[[[0.17595468]]],[[[0.64424646]]],[[[0.81961797]]],[[[0.10880548]]],[[[0.14043018]]],[[[0.00478608]]],[[[0.06695519999999999]]],[[[0.47477790000000003]]],[[[0.16630272]]],[[[0.008390159999999999]]],[[[0.4156416]]]]]

Actual:   [[[[[0.4935]]], [[[0.2932]]], [[[0.4332]]], [[[0.2163]]], [[[0.2803]]], [[[0.3982]]], [[[0.0123]]], [[[0.013]]], [[[0.4952]]], [[[0.2605]]], [[[0.0957]]], [[[0.0118]]], [[[0.5839]]], [[[0.2577]]], [[[0.0442]]], [[[0.6763]]], [[[0.1795]]], [[[0.0861]]], [[[0.0668]]], [[[0.447]]], [[[0.0074]]], [[[0.3744]]], [[[0.3905]]], [[[0.0121]]], [[[0.2377]]], [[[0.1956]]], [[[0.0293]]], [[[0.5331]]], [[[0.0031]]], [[[0.7687]]], [[[0.1387]]], [[[0.4121]]], [[[0.035]]], [[[0.3582]]], [[[0.1919]]], [[[0.8442]]], [[[0.1085]]], [[[0.0955]]], [[[0.0038]]], [[[0.1182]]], [[[0.5097]]], [[[0.0649]]], [[[0.077]]], [[[0.0854]]], [[[0.3566]]], [[[0.1184]]], [[[0.0122]]], [[[0.176]]], [[[0.6443]]], [[[0.8197]]], [[[0.1089]]], [[[0.1405]]], [[[0.0048]]], [[[0.067]]], [[[0.4748]]], [[[0.1664]]], [[[0.0084]]], [[[0.4157]]]]]

Expected: [[[[[0.4935]]], [[[0.2932]]], [[[0.4332]]], [[[0.2163]]], [[[0.2803]]], [[[0.3982]]], [[[0.0123]]], [[[0.013]]], [[[0.4952]]], [[[0.2605]]], [[[0.0957]]], [[[0.0118]]], [[[0.5839]]], [[[0.2577]]], [[[0.0442]]], [[[0.6763]]], [[[0.1795]]], [[[0.0861]]], [[[0.0668]]], [[[0.447]]], [[[0.0074]]], [[[0.3744]]], [[[0.3905]]], [[[0.0121]]], [[[0.2377]]], [[[0.1956]]], [[[0.0293]]], [[[0.5331]]], [[[0.0031]]], [[[0.7687]]], [[[0.1387]]], [[[0.4121]]], [[[0.035]]], [[[0.3582]]], [[[0.1919]]], [[[0.8442]]], [[[0.1085]]], [[[0.0955]]], [[[0.0038]]], [[[0.1182]]], [[[0.5097]]], [[[0.0649]]], [[[0.077]]], [[[0.0854]]], [[[0.3566]]], [[[0.1184]]], [[[0.0122]]], [[[0.176]]], [[[0.6443]]], [[[0.8197]]], [[[0.1089]]], [[[0.1405]]], [[[0.0048]]], [[[0.067]]], [[[0.4748]]], [[[0.1664]]], [[[0.0084]]], [[[0.4157]]]]]