import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mas96377 = tf.keras.layers.Input(shape=([4]))
in0Ave60134 = tf.keras.layers.Input(shape=([1, 1]))
in1Ave60134 = tf.keras.layers.Input(shape=([1, 1]))

Mas96377 = keras.layers.Masking(mask_value=1, name = 'Mas96377', )(in0Mas96377)
ELU72192 = keras.layers.ELU(alpha=-6.987107362998741, name = 'ELU72192', )(Mas96377)
Res21159 = keras.layers.Reshape((4, 1), name = 'Res21159', )(ELU72192)
Ave60134 = keras.layers.Average(name = 'Ave60134', )([in0Ave60134,in1Ave60134])
Dot37387 = keras.layers.Dot(axes=(2, 2), name = 'Dot37387', )([Res21159,Ave60134])
Max86001 = keras.layers.MaxPool1D(pool_size=(1), name = 'Max86001', )(Dot37387)
model = tf.keras.models.Model(inputs=[in0Mas96377,in0Ave60134,in1Ave60134], outputs=Max86001)
in0Mas96377 = tf.constant([[1.7029, 1.1288, 1.3935, 1.9942]])
in0Ave60134 = tf.constant([[[0.8869]]])
in1Ave60134 = tf.constant([[[0.1157]]])
print (np.array2string(model.predict([in0Mas96377,in0Ave60134,in1Ave60134],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max86001.png')

LMas96377 = masking_layer([[1.7029, 1.1288, 1.3935, 1.9942]], 1, Mas96377), 
LELU72192 = elu_layer(Mas96377, -6.987107362998741, ELU72192), 
LRes21159 = reshape_layer(ELU72192, [4, 1], Res21159), 
LAve60134 = average_layer([[[[0.8869]]], [[[0.1157]]]], Ave60134), 
LDot37387 = dot_layer(Res21159,Ave60134, 2, 2, Dot37387), 
LMax86001 = max_pool1D_layer(Dot37387, 1, Max86001), 
exec_layers([LMas96377,LELU72192,LRes21159,LAve60134,LDot37387,LMax86001],["Mas96377","ELU72192","Res21159","Ave60134","Dot37387","Max86001"],Max86001,"Max86001")

Actual (Unparsed): [[[0.8536638], [0.5658675], [0.6985615], [0.9996925]]]

Expected (Unparsed): [[[0.8536637699999999],[0.56586744],[0.69856155],[0.9996924599999999]]]

Actual:   [[[0.8537], [0.5659], [0.6986], [0.9997]]]

Expected: [[[0.8537], [0.5659], [0.6986], [0.9997]]]