import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub4748 = tf.keras.layers.Input(shape=([2, 3, 2, 2]))
in1Sub4748 = tf.keras.layers.Input(shape=([2, 3, 2, 2]))
in0Ave48954 = tf.keras.layers.Input(shape=([1, 2]))
in1Ave48954 = tf.keras.layers.Input(shape=([1, 2]))
in0Con46102 = tf.keras.layers.Input(shape=([2, 8]))
in0Con25873 = tf.keras.layers.Input(shape=([2, 12, 5, 1]))
in0Sep75843 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Mas13504 = tf.keras.layers.Input(shape=([3]))
in0Con90024 = tf.keras.layers.Input(shape=([2, 3, 2]))
in0Con77206 = tf.keras.layers.Input(shape=([2, 3, 3, 1]))
in0Max72574 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in1Max72574 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))

Sub4748 = keras.layers.Subtract(name = 'Sub4748', )([in0Sub4748,in1Sub4748])
Res80409 = keras.layers.Reshape((2, 3, 4), name = 'Res80409', )(Sub4748)
Res48584 = keras.layers.Reshape((2, 12), name = 'Res48584', )(Res80409)
Ave48954 = keras.layers.Average(name = 'Ave48954', )([in0Ave48954,in1Ave48954])
Den30054 = keras.layers.Dense(4,name = 'Den30054', )(Ave48954)
Zer25394 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer25394', )(Den30054)
Con46102 = keras.layers.Concatenate(axis=2, name = 'Con46102', )([Zer25394,in0Con46102])
Sub19464 = keras.layers.Subtract(name = 'Sub19464', )([Res48584,Con46102])
Res17627 = keras.layers.Reshape((2, 12, 1), name = 'Res17627', )(Sub19464)
Res73482 = keras.layers.Reshape((2, 12, 1, 1), name = 'Res73482', )(Res17627)
Zer55748 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (4, 0)), name = 'Zer55748', )(Res73482)
Con25873 = keras.layers.Concatenate(axis=4, name = 'Con25873', )([Zer55748,in0Con25873])
Sep75843 = keras.layers.SeparableConv2D(3, (1, 2),strides=(1, 1), padding='same', name = 'Sep75843', )(in0Sep75843)
Zer17980 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer17980', )(Sep75843)
Mas13504 = keras.layers.Masking(mask_value=1, name = 'Mas13504', )(in0Mas13504)
Res72505 = keras.layers.Reshape((3, 1), name = 'Res72505', )(Mas13504)
Res13269 = keras.layers.Reshape((3, 1, 1), name = 'Res13269', )(Res72505)
Ave88387 = keras.layers.AveragePooling2D(pool_size=(2, 1), strides=(1, 1), padding='valid', name = 'Ave88387', )(Res13269)
Zer16764 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer16764', )(Ave88387)
Con90024 = keras.layers.Concatenate(axis=3, name = 'Con90024', )([Zer16764,in0Con90024])
Max45715 = keras.layers.Maximum(name = 'Max45715', )([Zer17980,Con90024])
Res6362 = keras.layers.Reshape((2, 3, 3, 1), name = 'Res6362', )(Max45715)
Con77206 = keras.layers.Concatenate(axis=4, name = 'Con77206', )([Res6362,in0Con77206])
Max72574 = keras.layers.Maximum(name = 'Max72574', )([in0Max72574,in1Max72574])
Zer22708 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (2, 0)), name = 'Zer22708', )(Max72574)
Ave13202 = keras.layers.Average(name = 'Ave13202', )([Con77206,Zer22708])
Zer92705 = keras.layers.ZeroPadding3D(padding=((0, 0), (9, 0), (2, 0)), name = 'Zer92705', )(Ave13202)
Mul3355 = keras.layers.Multiply(name = 'Mul3355', )([Con25873,Zer92705])
model = tf.keras.models.Model(inputs=[in0Sub4748,in1Sub4748,in0Ave48954,in1Ave48954,in0Con46102,in0Con25873,in0Sep75843,in0Mas13504,in0Con90024,in0Con77206,in0Max72574,in1Max72574], outputs=Mul3355)
w = model.get_layer('Den30054').get_weights() 
w[0] = np.array([[0.171, 0.1616, 0.5527, 0.5284], [0.8779, 0.2976, 0.5572, 0.5983]])
w[1] = np.array([0.3863, 0.4138, 0.1876, 0.2956])
model.get_layer('Den30054').set_weights(w) 
w = model.get_layer('Sep75843').get_weights() 
w[0] = np.array([[[[0.0283], [0.2566]], [[0.3422], [0.255]]]])
w[1] = np.array([[[[0.75, 0.2891, 0.8064], [0.1875, 0.9348, 0.9085]]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep75843').set_weights(w) 
in0Sub4748 = tf.constant([[[[[0.4529, 0.4534], [0.889, 0.0879]], [[0.1073, 0.4532], [0.1543, 0.7203]], [[0.1103, 0.448], [0.9609, 0.8454]]], [[[0.094, 0.2021], [0.9289, 0.722]], [[0.4222, 0.1937], [0.8268, 0.299]], [[0.8301, 0.6206], [0.3354, 0.4172]]]]])
in1Sub4748 = tf.constant([[[[[0.6728, 0.2207], [0.9775, 0.1694]], [[0.1503, 0.4968], [0.026, 0.656]], [[0.705, 0.4862], [0.0422, 0.5697]]], [[[0.8999, 0.3089], [0.3269, 0.2697]], [[0.477, 0.3404], [0.9705, 0.2636]], [[0.9663, 0.0093], [0.3805, 0.3093]]]]])
in0Ave48954 = tf.constant([[[0.1728, 0.8967]]])
in1Ave48954 = tf.constant([[[0.1291, 0.6645]]])
in0Con46102 = tf.constant([[[0.9622, 0.5303, 0.3482, 0.2228, 0.2677, 0.3864, 0.1607, 0.932], [0.0963, 0.2457, 0.6999, 0.6642, 0.6808, 0.1163, 0.9316, 0.9524]]])
in0Con25873 = tf.constant([[[[[0.3528], [0.0896], [0.6109], [0.0043], [0.7753]], [[0.421], [0.3495], [0.341], [0.1812], [0.4245]], [[0.1448], [0.3125], [0.006], [0.0675], [0.5006]], [[0.599], [0.142], [0.5275], [0.3214], [0.6605]], [[0.8476], [0.6266], [0.2903], [0.4867], [0.8299]], [[0.6114], [0.922], [0.3197], [0.9702], [0.7864]], [[0.5376], [0.3656], [0.9703], [0.5981], [0.8511]], [[0.8746], [0.5308], [0.6481], [0.3376], [0.6077]], [[0.5452], [0.7667], [0.0579], [0.632], [0.1888]], [[0.7187], [0.1596], [0.5918], [0.7148], [0.3337]], [[0.8412], [0.0868], [0.2314], [0.8518], [0.1718]], [[0.5546], [0.7255], [0.0604], [0.7901], [0.1055]]], [[[0.1253], [0.3592], [0.1738], [0.0829], [0.2469]], [[0.2368], [0.8648], [0.7359], [0.0609], [0.7667]], [[0.7646], [0.2813], [0.8277], [0.6395], [0.372]], [[0.804], [0.3059], [0.9354], [0.6259], [0.9012]], [[0.4132], [0.3103], [0.8376], [0.7088], [0.4345]], [[0.5224], [0.0482], [0.9662], [0.115], [0.2543]], [[0.0321], [0.0742], [0.748], [0.0034], [0.0809]], [[0.6778], [0.6753], [0.4046], [0.6511], [0.1683]], [[0.4547], [0.7283], [0.9324], [0.6388], [0.3154]], [[0.4509], [0.4062], [0.2512], [0.4238], [0.7355]], [[0.5017], [0.6773], [0.9116], [0.3808], [0.5288]], [[0.2598], [0.5805], [0.294], [0.1692], [0.8085]]]]])
in0Sep75843 = tf.constant([[[[0.1024, 0.0291], [0.7214, 0.3699]]]])
in0Mas13504 = tf.constant([[1.4034, 1.9984, 1.4112]])
in0Con90024 = tf.constant([[[[0.0398, 0.2834], [0.6688, 0.5992], [0.3115, 0.8227]], [[0.2911, 0.2142], [0.645, 0.381], [0.3878, 0.1718]]]])
in0Con77206 = tf.constant([[[[[0.5638], [0.6915], [0.9365]], [[0.606], [0.8847], [0.6587]], [[0.3872], [0.0413], [0.543]]], [[[0.7799], [0.8883], [0.922]], [[0.2572], [0.5143], [0.5712]], [[0.1488], [0.1442], [0.6443]]]]])
in0Max72574 = tf.constant([[[[[0.831, 0.2016]]], [[[0.8173, 0.5068]]]]])
in1Max72574 = tf.constant([[[[[0.3824, 0.282]]], [[[0.2232, 0.7067]]]]])
print (np.array2string(model.predict([in0Sub4748,in1Sub4748,in0Ave48954,in1Ave48954,in0Con46102,in0Con25873,in0Sep75843,in0Mas13504,in0Con90024,in0Con77206,in0Max72574,in1Max72574],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul3355.png')

LSub4748 = subtract_layer([[[[[0.4529, 0.4534], [0.889, 0.0879]], [[0.1073, 0.4532], [0.1543, 0.7203]], [[0.1103, 0.448], [0.9609, 0.8454]]], [[[0.094, 0.2021], [0.9289, 0.722]], [[0.4222, 0.1937], [0.8268, 0.299]], [[0.8301, 0.6206], [0.3354, 0.4172]]]]], [[[[[0.6728, 0.2207], [0.9775, 0.1694]], [[0.1503, 0.4968], [0.026, 0.656]], [[0.705, 0.4862], [0.0422, 0.5697]]], [[[0.8999, 0.3089], [0.3269, 0.2697]], [[0.477, 0.3404], [0.9705, 0.2636]], [[0.9663, 0.0093], [0.3805, 0.3093]]]]], Sub4748), 
LRes80409 = reshape_layer(Sub4748, [2, 3, 4], Res80409), 
LRes48584 = reshape_layer(Res80409, [2, 12], Res48584), 
LAve48954 = average_layer([[[[0.1728, 0.8967]]], [[[0.1291, 0.6645]]]], Ave48954), 
LDen30054 = dense_layer(Ave48954, [[0.171, 0.1616, 0.5527, 0.5284], [0.8779, 0.2976, 0.5572, 0.5983]],[0.3863, 0.4138, 0.1876, 0.2956], Den30054), 
LZer25394 = zero_padding1D_layer(Den30054, 1, 0, Zer25394), 
LCon46102 = concatenate_layer([Zer25394,[[[0.9622, 0.5303, 0.3482, 0.2228, 0.2677, 0.3864, 0.1607, 0.932], [0.0963, 0.2457, 0.6999, 0.6642, 0.6808, 0.1163, 0.9316, 0.9524]]]], 2, Con46102), 
LSub19464 = subtract_layer(Res48584,Con46102, Sub19464), 
LRes17627 = reshape_layer(Sub19464, [2, 12, 1], Res17627), 
LRes73482 = reshape_layer(Res17627, [2, 12, 1, 1], Res73482), 
LZer55748 = zero_padding3D_layer(Res73482, 0, 0, 0, 0, 4, 0, Zer55748), 
LCon25873 = concatenate_layer([Zer55748,[[[[[0.3528], [0.0896], [0.6109], [0.0043], [0.7753]], [[0.421], [0.3495], [0.341], [0.1812], [0.4245]], [[0.1448], [0.3125], [0.006], [0.0675], [0.5006]], [[0.599], [0.142], [0.5275], [0.3214], [0.6605]], [[0.8476], [0.6266], [0.2903], [0.4867], [0.8299]], [[0.6114], [0.922], [0.3197], [0.9702], [0.7864]], [[0.5376], [0.3656], [0.9703], [0.5981], [0.8511]], [[0.8746], [0.5308], [0.6481], [0.3376], [0.6077]], [[0.5452], [0.7667], [0.0579], [0.632], [0.1888]], [[0.7187], [0.1596], [0.5918], [0.7148], [0.3337]], [[0.8412], [0.0868], [0.2314], [0.8518], [0.1718]], [[0.5546], [0.7255], [0.0604], [0.7901], [0.1055]]], [[[0.1253], [0.3592], [0.1738], [0.0829], [0.2469]], [[0.2368], [0.8648], [0.7359], [0.0609], [0.7667]], [[0.7646], [0.2813], [0.8277], [0.6395], [0.372]], [[0.804], [0.3059], [0.9354], [0.6259], [0.9012]], [[0.4132], [0.3103], [0.8376], [0.7088], [0.4345]], [[0.5224], [0.0482], [0.9662], [0.115], [0.2543]], [[0.0321], [0.0742], [0.748], [0.0034], [0.0809]], [[0.6778], [0.6753], [0.4046], [0.6511], [0.1683]], [[0.4547], [0.7283], [0.9324], [0.6388], [0.3154]], [[0.4509], [0.4062], [0.2512], [0.4238], [0.7355]], [[0.5017], [0.6773], [0.9116], [0.3808], [0.5288]], [[0.2598], [0.5805], [0.294], [0.1692], [0.8085]]]]]], 4, Con25873), 
LSep75843 = separable_conv2D_layer([[[[0.1024, 0.0291], [0.7214, 0.3699]]]], 1, 2,[[[[[0.0283], [0.2566]], [[0.3422], [0.255]]]],[[[[0.75, 0.2891, 0.8064], [0.1875, 0.9348, 0.9085]]]]],[0, 0, 0], 1, 1, true, Sep75843), 
LZer17980 = zero_padding2D_layer(Sep75843, 1, 0, 1, 0, Zer17980), 
LMas13504 = masking_layer([[1.4034, 1.9984, 1.4112]], 1, Mas13504), 
LRes72505 = reshape_layer(Mas13504, [3, 1], Res72505), 
LRes13269 = reshape_layer(Res72505, [3, 1, 1], Res13269), 
LAve88387 = average_pooling2D_layer(Res13269, 2, 1, 1, 1, false, Ave88387), 
LZer16764 = zero_padding2D_layer(Ave88387, 0, 0, 2, 0, Zer16764), 
LCon90024 = concatenate_layer([Zer16764,[[[[0.0398, 0.2834], [0.6688, 0.5992], [0.3115, 0.8227]], [[0.2911, 0.2142], [0.645, 0.381], [0.3878, 0.1718]]]]], 3, Con90024), 
LMax45715 = maximum_layer([Zer17980,Con90024], Max45715), 
LRes6362 = reshape_layer(Max45715, [2, 3, 3, 1], Res6362), 
LCon77206 = concatenate_layer([Res6362,[[[[[0.5638], [0.6915], [0.9365]], [[0.606], [0.8847], [0.6587]], [[0.3872], [0.0413], [0.543]]], [[[0.7799], [0.8883], [0.922]], [[0.2572], [0.5143], [0.5712]], [[0.1488], [0.1442], [0.6443]]]]]], 4, Con77206), 
LMax72574 = maximum_layer([[[[[[0.831, 0.2016]]], [[[0.8173, 0.5068]]]]], [[[[[0.3824, 0.282]]], [[[0.2232, 0.7067]]]]]], Max72574), 
LZer22708 = zero_padding3D_layer(Max72574, 0, 0, 2, 0, 2, 0, Zer22708), 
LAve13202 = average_layer([Con77206,Zer22708], Ave13202), 
LZer92705 = zero_padding3D_layer(Ave13202, 0, 0, 9, 0, 2, 0, Zer92705), 
LMul3355 = multiply_layer([Con25873,Zer92705], Mul3355), 
exec_layers([LSub4748,LRes80409,LRes48584,LAve48954,LDen30054,LZer25394,LCon46102,LSub19464,LRes17627,LRes73482,LZer55748,LCon25873,LSep75843,LZer17980,LMas13504,LRes72505,LRes13269,LAve88387,LZer16764,LCon90024,LMax45715,LRes6362,LCon77206,LMax72574,LZer22708,LAve13202,LZer92705,LMul3355],["Sub4748","Res80409","Res48584","Ave48954","Den30054","Zer25394","Con46102","Sub19464","Res17627","Res73482","Zer55748","Con25873","Sep75843","Zer17980","Mas13504","Res72505","Res13269","Ave88387","Zer16764","Con90024","Max45715","Res6362","Con77206","Max72574","Zer22708","Ave13202","Zer92705","Mul3355"],Mul3355,"Mul3355")

Actual (Unparsed): [[[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.1668284], [0.0000000, 0.2471421], [-0.0601658, 0.1562550]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0701142], [0.0000000, 0.3767937], [0.2270968, 0.0565823]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0116934], [0.0000000, 0.0163156], [-0.5426617, 0.0435187]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [-0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0979554], [0.0000000, 0.1882308], [0.0530145, 0.3390655]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.1172318], [0.0000000, 0.0979227], [-0.1860614, 0.1510253]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0218736], [0.0000000, 0.0121993], [-0.4176475, 0.5461417]]]]]

Expected (Unparsed): [[[[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[-0.0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[0.0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[-0.0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[-0.0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[-0.0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[-0.0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[-0.0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[-0.0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[-0.0,0.0]],[[0,0.0],[0,0.0],[0,0.16682841999999998],[0.0,0.2471421],[-0.06016582,0.156255025]],[[0,0.0],[0,0.0],[0,0.0701142],[0.0,0.37679373],[0.2270968,0.05658233]],[[0,0.0],[0,0.0],[0.0,0.01169344],[0.0,0.016315565],[-0.542661655,0.043518749999999995]]],[[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[-0.0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[-0.0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[-0.0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[-0.0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[-0.0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[-0.0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[-0.0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[-0.0,0.0]],[[0,0.0],[0,0.0],[0,0.0],[0,0.0],[-0.0,0.0]],[[0,0.0],[0,0.0],[0,0.09795543999999999],[0.0,0.18823077],[0.053014500000000006,0.3390655]],[[0,0.0],[0,0.0],[0.0,0.11723175999999999],[0.0,0.09792272],[-0.18606135000000001,0.15102528]],[[0,0.0],[0,0.0],[0.0,0.021873599999999997],[0.0,0.01219932],[-0.41764747500000005,0.54614175]]]]]

Actual:   [[[[[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0.1669], [0, 0.2472], [-0.0601, 0.1563]], [[0, 0], [0, 0], [0, 0.0702], [0, 0.3768], [0.2271, 0.0566]], [[0, 0], [0, 0], [0, 0.0117], [0, 0.0164], [-0.5426, 0.0436]]], [[[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0.098], [0, 0.1883], [0.0531, 0.3391]], [[0, 0], [0, 0], [0, 0.1173], [0, 0.098], [-0.186, 0.1511]], [[0, 0], [0, 0], [0, 0.0219], [0, 0.0122], [-0.4176, 0.5462]]]]]

Expected: [[[[[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0.1669], [0, 0.2472], [-0.0601, 0.1563]], [[0, 0], [0, 0], [0, 0.0702], [0, 0.3768], [0.2271, 0.0566]], [[0, 0], [0, 0], [0, 0.0117], [0, 0.0164], [-0.5426, 0.0436]]], [[[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0], [-0, 0]], [[0, 0], [0, 0], [0, 0.098], [0, 0.1883], [0.0531, 0.3391]], [[0, 0], [0, 0], [0, 0.1173], [0, 0.098], [-0.186, 0.1511]], [[0, 0], [0, 0], [0, 0.0219], [0, 0.0122], [-0.4176, 0.5462]]]]]