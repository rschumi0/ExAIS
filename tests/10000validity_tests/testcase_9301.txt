import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Up_21396 = tf.keras.layers.Input(shape=([2, 3, 4, 4]))

Up_21396 = keras.layers.UpSampling3D(size=(2, 1, 2), name = 'Up_21396', )(in0Up_21396)
Res5595 = keras.layers.Reshape((4, 3, 32), name = 'Res5595', )(Up_21396)
Res88876 = keras.layers.Reshape((4, 96), name = 'Res88876', )(Res5595)
LST19704 = keras.layers.LSTM(2,recurrent_activation='sigmoid', name = 'LST19704', )(Res88876)
Res10632 = keras.layers.Reshape((2, 1), name = 'Res10632', )(LST19704)
Res5289 = keras.layers.Reshape((2, 1, 1), name = 'Res5289', )(Res10632)
Res18011 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res18011', )(Res5289)
Up_32525 = keras.layers.UpSampling3D(size=(2, 2, 2), name = 'Up_32525', )(Res18011)
model = tf.keras.models.Model(inputs=[in0Up_21396], outputs=Up_32525)
w = model.get_layer('LST19704').get_weights() 
w[0] = np.array([[8, 4, 7, 6, 10, 10, 7, 7], [1, 2, 9, 1, 3, 3, 5, 9], [1, 1, 6, 2, 4, 7, 1, 1], [1, 7, 10, 4, 8, 7, 2, 5], [3, 5, 10, 2, 1, 1, 8, 7], [3, 6, 5, 3, 8, 4, 8, 1], [10, 10, 2, 1, 8, 9, 9, 3], [7, 7, 9, 5, 3, 6, 3, 4], [7, 2, 2, 1, 1, 5, 9, 10], [6, 7, 10, 8, 9, 9, 5, 5], [3, 2, 4, 7, 8, 4, 6, 9], [9, 1, 10, 2, 4, 10, 4, 7], [3, 6, 2, 2, 10, 8, 8, 4], [1, 6, 10, 3, 7, 2, 5, 3], [4, 5, 2, 10, 3, 8, 10, 9], [7, 4, 6, 3, 8, 9, 4, 7], [6, 9, 6, 2, 10, 9, 4, 1], [2, 7, 8, 3, 4, 9, 10, 8], [3, 5, 2, 9, 9, 6, 8, 10], [4, 5, 1, 9, 2, 5, 9, 10], [2, 10, 2, 10, 3, 6, 2, 4], [8, 5, 5, 2, 5, 3, 10, 2], [9, 5, 7, 3, 9, 3, 7, 4], [3, 6, 5, 3, 7, 1, 5, 10], [8, 8, 10, 6, 3, 5, 6, 9], [4, 7, 2, 9, 6, 6, 7, 2], [2, 3, 2, 5, 1, 1, 5, 5], [10, 8, 2, 9, 10, 7, 9, 9], [6, 8, 2, 3, 7, 6, 8, 7], [6, 7, 3, 7, 4, 7, 8, 10], [9, 4, 1, 3, 6, 2, 6, 8], [3, 1, 7, 8, 10, 5, 5, 10], [10, 5, 10, 8, 7, 1, 10, 4], [4, 8, 4, 2, 10, 4, 6, 10], [5, 2, 4, 4, 4, 2, 1, 7], [4, 3, 1, 7, 10, 1, 7, 6], [9, 7, 3, 7, 1, 2, 3, 2], [8, 4, 10, 9, 7, 1, 3, 2], [4, 7, 3, 3, 4, 3, 3, 10], [1, 2, 9, 9, 10, 5, 9, 9], [5, 1, 2, 2, 4, 7, 10, 9], [6, 8, 9, 7, 5, 9, 3, 8], [6, 4, 8, 2, 1, 4, 8, 1], [4, 8, 10, 8, 3, 4, 3, 4], [3, 2, 7, 10, 1, 3, 1, 1], [6, 4, 10, 3, 6, 4, 7, 9], [7, 5, 5, 9, 10, 3, 8, 5], [9, 2, 2, 10, 5, 2, 1, 4], [9, 9, 8, 3, 9, 10, 2, 3], [6, 8, 2, 7, 7, 4, 2, 8], [3, 9, 5, 7, 6, 6, 8, 3], [6, 6, 8, 2, 5, 3, 4, 2], [9, 1, 1, 7, 8, 8, 6, 5], [7, 1, 3, 5, 5, 5, 10, 9], [10, 8, 9, 10, 6, 7, 8, 4], [3, 9, 8, 6, 7, 5, 10, 7], [5, 8, 6, 2, 5, 10, 6, 4], [2, 1, 4, 5, 8, 9, 1, 8], [4, 7, 7, 6, 9, 7, 4, 8], [1, 8, 7, 2, 6, 8, 3, 2], [3, 5, 7, 2, 7, 6, 6, 10], [1, 9, 3, 2, 6, 6, 1, 7], [7, 5, 7, 7, 10, 10, 9, 4], [9, 1, 8, 4, 10, 2, 7, 4], [7, 3, 3, 3, 1, 7, 8, 9], [1, 1, 3, 2, 8, 8, 5, 4], [5, 10, 9, 3, 8, 9, 10, 9], [1, 9, 7, 4, 9, 8, 3, 7], [8, 9, 2, 5, 5, 1, 8, 8], [6, 6, 6, 9, 1, 10, 2, 2], [6, 7, 7, 8, 7, 1, 7, 9], [8, 4, 1, 6, 10, 6, 6, 3], [4, 8, 7, 6, 1, 6, 1, 3], [5, 7, 8, 4, 6, 6, 10, 9], [2, 1, 7, 7, 10, 1, 10, 6], [4, 1, 4, 8, 10, 2, 6, 4], [8, 3, 9, 6, 2, 10, 4, 6], [8, 6, 9, 8, 9, 2, 3, 10], [8, 1, 10, 9, 9, 4, 5, 6], [1, 6, 2, 10, 2, 2, 10, 8], [6, 3, 10, 5, 7, 4, 3, 5], [2, 4, 10, 4, 7, 2, 10, 7], [10, 2, 8, 6, 7, 2, 7, 9], [7, 5, 5, 4, 5, 8, 10, 4], [10, 10, 5, 3, 7, 10, 4, 9], [3, 6, 5, 7, 6, 6, 5, 8], [5, 7, 2, 1, 2, 2, 5, 4], [5, 1, 9, 10, 4, 9, 8, 7], [7, 7, 3, 3, 1, 5, 10, 2], [7, 5, 4, 3, 3, 7, 8, 8], [7, 4, 7, 10, 9, 6, 5, 6], [5, 8, 8, 10, 10, 1, 1, 9], [9, 7, 6, 9, 5, 1, 3, 4], [10, 2, 5, 6, 10, 1, 10, 10], [3, 2, 7, 8, 8, 8, 9, 9], [6, 6, 7, 4, 5, 2, 5, 4]])
w[1] = np.array([[1, 6, 8, 3, 5, 6, 7, 4], [4, 5, 5, 9, 2, 4, 6, 3]])
w[2] = np.array([9, 6, 5, 6, 5, 2, 10, 10])
model.get_layer('LST19704').set_weights(w) 
in0Up_21396 = tf.constant([[[[[1.0999, 1.0921, 1.5553, 1.3443], [1.4532, 1.4249, 1.8287, 1.6596], [1.0564, 1.5457, 1.435, 1.1663], [1.6478, 1.5211, 1.7982, 1.5819]], [[1.8706, 1.3407, 1.6798, 1.1189], [1.2769, 1.5454, 1.4819, 1.6019], [1.6181, 1.1101, 1.5341, 1.7455], [1.786, 1.758, 1.1078, 1.8531]], [[1.4735, 1.3165, 1.622, 1.2753], [1.607, 1.6833, 1.0041, 1.0639], [1.872, 1.4668, 1.4512, 1.394], [1.1986, 1.3898, 1.9042, 1.4914]]], [[[1.9052, 1.0982, 1.3863, 1.9977], [1.3067, 1.1064, 1.9886, 1.9346], [1.9868, 1.2285, 1.6901, 1.6858], [1.6062, 1.9913, 1.387, 1.7068]], [[1.0724, 1.2109, 1.4797, 1.9939], [1.1331, 1.1203, 1.1126, 1.6942], [1.9699, 1.1848, 1.6957, 1.6245], [1.1693, 1.0108, 1.6529, 1.8824]], [[1.5247, 1.5645, 1.4312, 1.1754], [1.4867, 1.2483, 1.6872, 1.9771], [1.7149, 1.2572, 1.2192, 1.1226], [1.1151, 1.0307, 1.6555, 1.9996]]]]])
print (np.array2string(model.predict([in0Up_21396],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Up_32525.png')

LUp_21396 = up_sampling3D_layer([[[[[1.0999, 1.0921, 1.5553, 1.3443], [1.4532, 1.4249, 1.8287, 1.6596], [1.0564, 1.5457, 1.435, 1.1663], [1.6478, 1.5211, 1.7982, 1.5819]], [[1.8706, 1.3407, 1.6798, 1.1189], [1.2769, 1.5454, 1.4819, 1.6019], [1.6181, 1.1101, 1.5341, 1.7455], [1.786, 1.758, 1.1078, 1.8531]], [[1.4735, 1.3165, 1.622, 1.2753], [1.607, 1.6833, 1.0041, 1.0639], [1.872, 1.4668, 1.4512, 1.394], [1.1986, 1.3898, 1.9042, 1.4914]]], [[[1.9052, 1.0982, 1.3863, 1.9977], [1.3067, 1.1064, 1.9886, 1.9346], [1.9868, 1.2285, 1.6901, 1.6858], [1.6062, 1.9913, 1.387, 1.7068]], [[1.0724, 1.2109, 1.4797, 1.9939], [1.1331, 1.1203, 1.1126, 1.6942], [1.9699, 1.1848, 1.6957, 1.6245], [1.1693, 1.0108, 1.6529, 1.8824]], [[1.5247, 1.5645, 1.4312, 1.1754], [1.4867, 1.2483, 1.6872, 1.9771], [1.7149, 1.2572, 1.2192, 1.1226], [1.1151, 1.0307, 1.6555, 1.9996]]]]], 2, 1, 2, Up_21396), 
LRes5595 = reshape_layer(Up_21396, [4, 3, 32], Res5595), 
LRes88876 = reshape_layer(Res5595, [4, 96], Res88876), 
LLST19704 = lstm_layer(Res88876,[[8, 4, 7, 6, 10, 10, 7, 7], [1, 2, 9, 1, 3, 3, 5, 9], [1, 1, 6, 2, 4, 7, 1, 1], [1, 7, 10, 4, 8, 7, 2, 5], [3, 5, 10, 2, 1, 1, 8, 7], [3, 6, 5, 3, 8, 4, 8, 1], [10, 10, 2, 1, 8, 9, 9, 3], [7, 7, 9, 5, 3, 6, 3, 4], [7, 2, 2, 1, 1, 5, 9, 10], [6, 7, 10, 8, 9, 9, 5, 5], [3, 2, 4, 7, 8, 4, 6, 9], [9, 1, 10, 2, 4, 10, 4, 7], [3, 6, 2, 2, 10, 8, 8, 4], [1, 6, 10, 3, 7, 2, 5, 3], [4, 5, 2, 10, 3, 8, 10, 9], [7, 4, 6, 3, 8, 9, 4, 7], [6, 9, 6, 2, 10, 9, 4, 1], [2, 7, 8, 3, 4, 9, 10, 8], [3, 5, 2, 9, 9, 6, 8, 10], [4, 5, 1, 9, 2, 5, 9, 10], [2, 10, 2, 10, 3, 6, 2, 4], [8, 5, 5, 2, 5, 3, 10, 2], [9, 5, 7, 3, 9, 3, 7, 4], [3, 6, 5, 3, 7, 1, 5, 10], [8, 8, 10, 6, 3, 5, 6, 9], [4, 7, 2, 9, 6, 6, 7, 2], [2, 3, 2, 5, 1, 1, 5, 5], [10, 8, 2, 9, 10, 7, 9, 9], [6, 8, 2, 3, 7, 6, 8, 7], [6, 7, 3, 7, 4, 7, 8, 10], [9, 4, 1, 3, 6, 2, 6, 8], [3, 1, 7, 8, 10, 5, 5, 10], [10, 5, 10, 8, 7, 1, 10, 4], [4, 8, 4, 2, 10, 4, 6, 10], [5, 2, 4, 4, 4, 2, 1, 7], [4, 3, 1, 7, 10, 1, 7, 6], [9, 7, 3, 7, 1, 2, 3, 2], [8, 4, 10, 9, 7, 1, 3, 2], [4, 7, 3, 3, 4, 3, 3, 10], [1, 2, 9, 9, 10, 5, 9, 9], [5, 1, 2, 2, 4, 7, 10, 9], [6, 8, 9, 7, 5, 9, 3, 8], [6, 4, 8, 2, 1, 4, 8, 1], [4, 8, 10, 8, 3, 4, 3, 4], [3, 2, 7, 10, 1, 3, 1, 1], [6, 4, 10, 3, 6, 4, 7, 9], [7, 5, 5, 9, 10, 3, 8, 5], [9, 2, 2, 10, 5, 2, 1, 4], [9, 9, 8, 3, 9, 10, 2, 3], [6, 8, 2, 7, 7, 4, 2, 8], [3, 9, 5, 7, 6, 6, 8, 3], [6, 6, 8, 2, 5, 3, 4, 2], [9, 1, 1, 7, 8, 8, 6, 5], [7, 1, 3, 5, 5, 5, 10, 9], [10, 8, 9, 10, 6, 7, 8, 4], [3, 9, 8, 6, 7, 5, 10, 7], [5, 8, 6, 2, 5, 10, 6, 4], [2, 1, 4, 5, 8, 9, 1, 8], [4, 7, 7, 6, 9, 7, 4, 8], [1, 8, 7, 2, 6, 8, 3, 2], [3, 5, 7, 2, 7, 6, 6, 10], [1, 9, 3, 2, 6, 6, 1, 7], [7, 5, 7, 7, 10, 10, 9, 4], [9, 1, 8, 4, 10, 2, 7, 4], [7, 3, 3, 3, 1, 7, 8, 9], [1, 1, 3, 2, 8, 8, 5, 4], [5, 10, 9, 3, 8, 9, 10, 9], [1, 9, 7, 4, 9, 8, 3, 7], [8, 9, 2, 5, 5, 1, 8, 8], [6, 6, 6, 9, 1, 10, 2, 2], [6, 7, 7, 8, 7, 1, 7, 9], [8, 4, 1, 6, 10, 6, 6, 3], [4, 8, 7, 6, 1, 6, 1, 3], [5, 7, 8, 4, 6, 6, 10, 9], [2, 1, 7, 7, 10, 1, 10, 6], [4, 1, 4, 8, 10, 2, 6, 4], [8, 3, 9, 6, 2, 10, 4, 6], [8, 6, 9, 8, 9, 2, 3, 10], [8, 1, 10, 9, 9, 4, 5, 6], [1, 6, 2, 10, 2, 2, 10, 8], [6, 3, 10, 5, 7, 4, 3, 5], [2, 4, 10, 4, 7, 2, 10, 7], [10, 2, 8, 6, 7, 2, 7, 9], [7, 5, 5, 4, 5, 8, 10, 4], [10, 10, 5, 3, 7, 10, 4, 9], [3, 6, 5, 7, 6, 6, 5, 8], [5, 7, 2, 1, 2, 2, 5, 4], [5, 1, 9, 10, 4, 9, 8, 7], [7, 7, 3, 3, 1, 5, 10, 2], [7, 5, 4, 3, 3, 7, 8, 8], [7, 4, 7, 10, 9, 6, 5, 6], [5, 8, 8, 10, 10, 1, 1, 9], [9, 7, 6, 9, 5, 1, 3, 4], [10, 2, 5, 6, 10, 1, 10, 10], [3, 2, 7, 8, 8, 8, 9, 9], [6, 6, 7, 4, 5, 2, 5, 4]],[[1, 6, 8, 3, 5, 6, 7, 4], [4, 5, 5, 9, 2, 4, 6, 3]],[9, 6, 5, 6, 5, 2, 10, 10], LST19704), 
LRes10632 = reshape_layer(LST19704, [2, 1], Res10632), 
LRes5289 = reshape_layer(Res10632, [2, 1, 1], Res5289), 
LRes18011 = reshape_layer(Res5289, [2, 1, 1, 1], Res18011), 
LUp_32525 = up_sampling3D_layer(Res18011, 2, 2, 2, Up_32525), 
exec_layers([LUp_21396,LRes5595,LRes88876,LLST19704,LRes10632,LRes5289,LRes18011,LUp_32525],["Up_21396","Res5595","Res88876","LST19704","Res10632","Res5289","Res18011","Up_32525"],Up_32525,"Up_32525")

Actual (Unparsed): [[[[[0.9993293], [0.9993293]], [[0.9993293], [0.9993293]]], [[[0.9993293], [0.9993293]], [[0.9993293], [0.9993293]]], [[[0.9993293], [0.9993293]], [[0.9993293], [0.9993293]]], [[[0.9993293], [0.9993293]], [[0.9993293], [0.9993293]]]]]

Expected (Unparsed): [[[[[0.999329299739067],[0.999329299739067]],[[0.999329299739067],[0.999329299739067]]],[[[0.999329299739067],[0.999329299739067]],[[0.999329299739067],[0.999329299739067]]],[[[0.999329299739067],[0.999329299739067]],[[0.999329299739067],[0.999329299739067]]],[[[0.999329299739067],[0.999329299739067]],[[0.999329299739067],[0.999329299739067]]]]]

Actual:   [[[[[0.9994], [0.9994]], [[0.9994], [0.9994]]], [[[0.9994], [0.9994]], [[0.9994], [0.9994]]], [[[0.9994], [0.9994]], [[0.9994], [0.9994]]], [[[0.9994], [0.9994]], [[0.9994], [0.9994]]]]]

Expected: [[[[[0.9994], [0.9994]], [[0.9994], [0.9994]]], [[[0.9994], [0.9994]], [[0.9994], [0.9994]]], [[[0.9994], [0.9994]], [[0.9994], [0.9994]]], [[[0.9994], [0.9994]], [[0.9994], [0.9994]]]]]