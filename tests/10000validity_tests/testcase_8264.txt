import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro18478 = tf.keras.layers.Input(shape=([3, 4, 3]))
in0Cro63493 = tf.keras.layers.Input(shape=([4, 1]))
in0Con52474 = tf.keras.layers.Input(shape=([2, 2]))
in0Con86538 = tf.keras.layers.Input(shape=([2, 1]))
in0Con69915 = tf.keras.layers.Input(shape=([1, 12, 1]))

Cro18478 = keras.layers.Cropping2D(cropping=((2, 0), (1, 1)), name = 'Cro18478', )(in0Cro18478)
Lea72600 = keras.layers.LeakyReLU(alpha=9.715004507440728, name = 'Lea72600', )(Cro18478)
Zer10649 = keras.layers.ZeroPadding2D(padding=((0, 0), (10, 0)), name = 'Zer10649', )(Lea72600)
Cro63493 = keras.layers.Cropping1D(cropping=((2, 0)), name = 'Cro63493', )(in0Cro63493)
Con52474 = keras.layers.Concatenate(axis=2, name = 'Con52474', )([Cro63493,in0Con52474])
Con86538 = keras.layers.Conv1D(3, (2),strides=(1), padding='same', dilation_rate=(1), name = 'Con86538', )(in0Con86538)
Mul94906 = keras.layers.Multiply(name = 'Mul94906', )([Con52474,Con86538])
Res64814 = keras.layers.Reshape((2, 3, 1), name = 'Res64814', )(Mul94906)
Res26944 = keras.layers.Reshape((2, 3, 1, 1), name = 'Res26944', )(Res64814)
Con54373 = keras.layers.Conv3DTranspose(2, (1, 2, 1),strides=(1, 4, 1), padding='same', name = 'Con54373', )(Res26944)
Res82691 = keras.layers.Reshape((2, 12, 2), name = 'Res82691', )(Con54373)
PRe66844 = keras.layers.PReLU(name = 'PRe66844', )(Res82691)
Max49759 = keras.layers.MaxPool2D(pool_size=(1, 1), strides=(6, 1), padding='valid', name = 'Max49759', )(PRe66844)
Con69915 = keras.layers.Concatenate(axis=3, name = 'Con69915', )([Max49759,in0Con69915])
Ave20393 = keras.layers.Average(name = 'Ave20393', )([Zer10649,Con69915])
model = tf.keras.models.Model(inputs=[in0Cro18478,in0Cro63493,in0Con52474,in0Con86538,in0Con69915], outputs=Ave20393)
w = model.get_layer('Con86538').get_weights() 
w[0] = np.array([[[0.1335, 0.8732, 0.1179]], [[0.616, 0.8157, 0.4543]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con86538').set_weights(w) 
w = model.get_layer('Con54373').get_weights() 
w[0] = np.array([[[[[0.2166], [0.1991]]], [[[0.368], [0.5208]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con54373').set_weights(w) 
w = model.get_layer('PRe66844').get_weights() 
w[0] = np.array([[[0.4105, 0.9454], [0.1411, 0.0798], [0.5178, 0.5919], [0.4783, 0.4934], [0.0766, 0.9394], [0.3293, 0.0666], [0.3405, 0.4522], [0.3801, 0.5948], [0.2521, 0.98], [0.8878, 0.1974], [0.9795, 0.4442], [0.8269, 0.3424]], [[0.7694, 0.8244], [0.3511, 0.4413], [0.1067, 0.611], [0.8328, 0.3724], [0.8433, 0.2175], [0.7929, 0.6323], [0.6484, 0.4576], [0.6261, 0.9445], [0.8634, 0.0814], [0.1403, 0.0588], [0.6037, 0.5405], [0.5804, 0.1645]]])
model.get_layer('PRe66844').set_weights(w) 
in0Cro18478 = tf.constant([[[[1.2663, 1.3345, 1.3762], [1.5389, 1.3617, 1.2631], [1.1065, 1.3823, 1.9816], [1.2368, 1.9508, 1.2303]], [[1.2324, 1.7865, 1.0588], [1.2692, 1.0008, 1.7008], [1.315, 1.3064, 1.1805], [1.8167, 1.4689, 1.5343]], [[1.6039, 1.801, 1.9632], [1.3153, 1.3359, 1.7859], [1.9199, 1.4457, 1.8226], [1.6952, 1.6583, 1.5214]]]])
in0Cro63493 = tf.constant([[[1.6236], [1.7139], [1.9325], [1.3571]]])
in0Con52474 = tf.constant([[[0.5173, 0.7583], [0.695, 0.627]]])
in0Con86538 = tf.constant([[[0.1045], [0.6359]]])
in0Con69915 = tf.constant([[[[0.4091], [0.8961], [0.9515], [0.556], [0.6576], [0.3078], [0.4515], [0.4252], [0.6054], [0.1767], [0.527], [0.3128]]]])
print (np.array2string(model.predict([in0Cro18478,in0Cro63493,in0Con52474,in0Con86538,in0Con69915],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave20393.png')

LCro18478 = cropping2D_layer([[[[1.2663, 1.3345, 1.3762], [1.5389, 1.3617, 1.2631], [1.1065, 1.3823, 1.9816], [1.2368, 1.9508, 1.2303]], [[1.2324, 1.7865, 1.0588], [1.2692, 1.0008, 1.7008], [1.315, 1.3064, 1.1805], [1.8167, 1.4689, 1.5343]], [[1.6039, 1.801, 1.9632], [1.3153, 1.3359, 1.7859], [1.9199, 1.4457, 1.8226], [1.6952, 1.6583, 1.5214]]]], 2, 0, 1, 1, Cro18478), 
LLea72600 = leaky_relu_layer(Cro18478, 9.715004507440728, Lea72600), 
LZer10649 = zero_padding2D_layer(Lea72600, 0, 0, 10, 0, Zer10649), 
LCro63493 = cropping1D_layer([[[1.6236], [1.7139], [1.9325], [1.3571]]], 2, 0, Cro63493), 
LCon52474 = concatenate_layer([Cro63493,[[[0.5173, 0.7583], [0.695, 0.627]]]], 2, Con52474), 
LCon86538 = conv1D_layer([[[0.1045], [0.6359]]], 2,[[[0.1335, 0.8732, 0.1179]], [[0.616, 0.8157, 0.4543]]],[0, 0, 0], 1, true, 1, Con86538), 
LMul94906 = multiply_layer([Con52474,Con86538], Mul94906), 
LRes64814 = reshape_layer(Mul94906, [2, 3, 1], Res64814), 
LRes26944 = reshape_layer(Res64814, [2, 3, 1, 1], Res26944), 
LCon54373 = conv3D_transpose_layer(Res26944, 1, 2, 1,[[[[[0.2166], [0.1991]]], [[[0.368], [0.5208]]]]],[0, 0], 1, 4, 1, true, Con54373), 
LRes82691 = reshape_layer(Con54373, [2, 12, 2], Res82691), 
LPRe66844 = prelu_layer(Res82691, [[[0.4105, 0.9454], [0.1411, 0.0798], [0.5178, 0.5919], [0.4783, 0.4934], [0.0766, 0.9394], [0.3293, 0.0666], [0.3405, 0.4522], [0.3801, 0.5948], [0.2521, 0.98], [0.8878, 0.1974], [0.9795, 0.4442], [0.8269, 0.3424]], [[0.7694, 0.8244], [0.3511, 0.4413], [0.1067, 0.611], [0.8328, 0.3724], [0.8433, 0.2175], [0.7929, 0.6323], [0.6484, 0.4576], [0.6261, 0.9445], [0.8634, 0.0814], [0.1403, 0.0588], [0.6037, 0.5405], [0.5804, 0.1645]]], PRe66844), 
LMax49759 = max_pool2D_layer(PRe66844, 1, 1, 6, 1, false, Max49759), 
LCon69915 = concatenate_layer([Max49759,[[[[0.4091], [0.8961], [0.9515], [0.556], [0.6576], [0.3078], [0.4515], [0.4252], [0.6054], [0.1767], [0.527], [0.3128]]]]], 3, Con69915), 
LAve20393 = average_layer([Zer10649,Con69915], Ave20393), 
exec_layers([LCro18478,LLea72600,LZer10649,LCro63493,LCon52474,LCon86538,LMul94906,LRes64814,LRes26944,LCon54373,LRes82691,LPRe66844,LMax49759,LCon69915,LAve20393],["Cro18478","Lea72600","Zer10649","Cro63493","Con52474","Con86538","Mul94906","Res64814","Res26944","Con54373","Res82691","PRe66844","Max49759","Con69915","Ave20393"],Ave20393,"Ave20393")

Actual (Unparsed): [[[[0.0849016, 0.0780420, 0.2045500], [0.1442464, 0.2041400, 0.4480500], [0.0000000, 0.0000000, 0.4757500], [0.0000000, 0.0000000, 0.2780000], [0.0341718, 0.0314109, 0.3288000], [0.0580573, 0.0821637, 0.1539000], [0.0000000, 0.0000000, 0.2257500], [0.0000000, 0.0000000, 0.2126000], [0.0247365, 0.0227380, 0.3027000], [0.0420270, 0.0594773, 0.0883500], [0.6576500, 0.6679500, 1.1564500], [0.9599500, 0.7228500, 1.0677000]]]]

Expected (Unparsed): [[[[0.08490155782721251,0.07804201368143127,0.20455],[0.14424641403700003,0.20414003377845005,0.44805],[0,0,0.47575],[0,0,0.278],[0.034171758471977697,0.03141088232581145,0.3288],[0.058057281245096,0.0821636741099076,0.1539],[0,0,0.22575],[0,0,0.2126],[0.024736530336988794,0.022737964866548797,0.3027],[0.042026976749823995,0.059477308400294394,0.08835],[0.65765,0.66795,1.15645],[0.95995,0.72285,1.0677]]]]

Actual:   [[[[0.085, 0.0781, 0.2046], [0.1443, 0.2042, 0.4481], [0, 0, 0.4758], [0, 0, 0.278], [0.0342, 0.0315, 0.3288], [0.0581, 0.0822, 0.1539], [0, 0, 0.2258], [0, 0, 0.2126], [0.0248, 0.0228, 0.3027], [0.0421, 0.0595, 0.0884], [0.6577, 0.668, 1.1565], [0.96, 0.7229, 1.0677]]]]

Expected: [[[[0.085, 0.0781, 0.2046], [0.1443, 0.2042, 0.4481], [0, 0, 0.4758], [0, 0, 0.278], [0.0342, 0.0315, 0.3288], [0.0581, 0.0822, 0.1539], [0, 0, 0.2258], [0, 0, 0.2126], [0.0248, 0.0228, 0.3027], [0.0421, 0.0595, 0.0884], [0.6577, 0.668, 1.1565], [0.96, 0.7229, 1.0677]]]]