import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub43960 = tf.keras.layers.Input(shape=([3, 3, 2]))
in1Sub43960 = tf.keras.layers.Input(shape=([3, 3, 2]))
in0Con87404 = tf.keras.layers.Input(shape=([3, 8, 1]))
in0Up_61141 = tf.keras.layers.Input(shape=([3, 4, 3]))
in0Con36516 = tf.keras.layers.Input(shape=([9, 3, 3]))
in0Dot35773 = tf.keras.layers.Input(shape=([3, 3]))
in1Dot35773 = tf.keras.layers.Input(shape=([3, 3]))
in0Dot84344 = tf.keras.layers.Input(shape=([3]))
in1Dot84344 = tf.keras.layers.Input(shape=([3]))
in0Con54895 = tf.keras.layers.Input(shape=([8]))
in0Con50308 = tf.keras.layers.Input(shape=([9, 3, 3]))
in0Mas91996 = tf.keras.layers.Input(shape=([4, 2, 1]))

Sub43960 = keras.layers.Subtract(name = 'Sub43960', )([in0Sub43960,in1Sub43960])
Zer99903 = keras.layers.ZeroPadding2D(padding=((0, 0), (5, 0)), name = 'Zer99903', )(Sub43960)
Con87404 = keras.layers.Concatenate(axis=3, name = 'Con87404', )([Zer99903,in0Con87404])
Up_61141 = keras.layers.UpSampling2D(size=(1, 2), name = 'Up_61141', )(in0Up_61141)
Sub58440 = keras.layers.Subtract(name = 'Sub58440', )([Con87404,Up_61141])
Res76742 = keras.layers.Reshape((3, 24), name = 'Res76742', )(Sub58440)
LST58093 = keras.layers.LSTM(2,recurrent_activation='sigmoid', name = 'LST58093', )(Res76742)
Res68747 = keras.layers.Reshape((2, 1), name = 'Res68747', )(LST58093)
Res91254 = keras.layers.Reshape((2, 1, 1), name = 'Res91254', )(Res68747)
Zer87070 = keras.layers.ZeroPadding2D(padding=((7, 0), (2, 0)), name = 'Zer87070', )(Res91254)
Con36516 = keras.layers.Concatenate(axis=3, name = 'Con36516', )([Zer87070,in0Con36516])
Dot35773 = keras.layers.Dot(axes=(2, 2), name = 'Dot35773', )([in0Dot35773,in1Dot35773])
Fla37208 = keras.layers.Flatten(name = 'Fla37208', )(Dot35773)
Dot84344 = keras.layers.Dot(axes=(1, 1), name = 'Dot84344', )([in0Dot84344,in1Dot84344])
Con54895 = keras.layers.Concatenate(axis=1, name = 'Con54895', )([Dot84344,in0Con54895])
Min9192 = keras.layers.Minimum(name = 'Min9192', )([Fla37208,Con54895])
Res72719 = keras.layers.Reshape((9, 1), name = 'Res72719', )(Min9192)
Res53985 = keras.layers.Reshape((9, 1, 1), name = 'Res53985', )(Res72719)
Zer6449 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer6449', )(Res53985)
Con50308 = keras.layers.Concatenate(axis=3, name = 'Con50308', )([Zer6449,in0Con50308])
Mas91996 = keras.layers.Masking(mask_value=2, name = 'Mas91996', )(in0Mas91996)
Den23674 = keras.layers.Dense(4,name = 'Den23674', )(Mas91996)
Zer78704 = keras.layers.ZeroPadding2D(padding=((5, 0), (1, 0)), name = 'Zer78704', )(Den23674)
Ave85417 = keras.layers.Average(name = 'Ave85417', )([Con50308,Zer78704])
Sub86464 = keras.layers.Subtract(name = 'Sub86464', )([Con36516,Ave85417])
model = tf.keras.models.Model(inputs=[in0Sub43960,in1Sub43960,in0Con87404,in0Up_61141,in0Con36516,in0Dot35773,in1Dot35773,in0Dot84344,in1Dot84344,in0Con54895,in0Con50308,in0Mas91996], outputs=Sub86464)
w = model.get_layer('LST58093').get_weights() 
w[0] = np.array([[2, 1, 3, 7, 3, 8, 2, 1], [1, 10, 1, 1, 2, 9, 2, 9], [7, 10, 7, 1, 7, 9, 6, 10], [6, 1, 6, 9, 3, 1, 5, 4], [2, 2, 3, 1, 1, 4, 7, 2], [8, 8, 10, 5, 1, 8, 3, 3], [3, 5, 5, 5, 7, 2, 7, 4], [9, 8, 5, 5, 8, 9, 6, 9], [1, 4, 4, 1, 2, 3, 8, 10], [6, 10, 9, 10, 7, 9, 10, 5], [4, 10, 6, 8, 4, 5, 3, 9], [6, 5, 6, 10, 10, 7, 5, 7], [6, 8, 3, 3, 4, 9, 1, 3], [8, 1, 3, 1, 5, 3, 3, 7], [5, 6, 6, 5, 6, 5, 2, 9], [10, 8, 2, 9, 3, 6, 1, 3], [7, 7, 8, 6, 4, 1, 10, 7], [2, 2, 10, 1, 5, 8, 3, 2], [1, 1, 4, 3, 9, 8, 2, 4], [9, 10, 6, 2, 7, 8, 6, 3], [5, 9, 2, 8, 4, 4, 6, 6], [3, 7, 5, 6, 10, 8, 4, 4], [10, 7, 4, 9, 7, 4, 8, 8], [3, 4, 9, 10, 8, 9, 4, 7]])
w[1] = np.array([[7, 9, 6, 2, 5, 6, 7, 2], [2, 4, 7, 10, 6, 10, 2, 5]])
w[2] = np.array([9, 7, 7, 4, 6, 7, 8, 1])
model.get_layer('LST58093').set_weights(w) 
w = model.get_layer('Den23674').get_weights() 
w[0] = np.array([[0.092, 0.2319, 0.4362, 0.8608]])
w[1] = np.array([0.175, 0.9232, 0.9392, 0.7635])
model.get_layer('Den23674').set_weights(w) 
in0Sub43960 = tf.constant([[[[0.4973, 0.0595], [0.0332, 0.4607], [0.8641, 0.366]], [[0.021, 0.4108], [0.2583, 0.0187], [0.2206, 0.4964]], [[0.1019, 0.1534], [0.5137, 0.4647], [0.8744, 0.6208]]]])
in1Sub43960 = tf.constant([[[[0.6033, 0.67], [0.2378, 0.3202], [0.2817, 0.9303]], [[0.9178, 0.2818], [0.448, 0.005], [0.5138, 0.5814]], [[0.3632, 0.2982], [0.9899, 0.4694], [0.2292, 0.338]]]])
in0Con87404 = tf.constant([[[[0.7904], [0.036], [0.1068], [0.3347], [0.8024], [0.3794], [0.0787], [0.7738]], [[0.9316], [0.6186], [0.1401], [0.5509], [0.823], [0.6449], [0.3977], [0.0292]], [[0.4561], [0.7384], [0.5515], [0.8303], [0.8991], [0.9398], [0.1349], [0.9134]]]])
in0Up_61141 = tf.constant([[[[1.4592, 1.9406, 1.5487], [1.5588, 1.0133, 1.3324], [1.8875, 1.9242, 1.7766], [1.4436, 1.5915, 1.967]], [[1.063, 1.0943, 1.7364], [1.8936, 1.5029, 1.0095], [1.0857, 1.5042, 1.2723], [1.4025, 1.1163, 1.8126]], [[1.1052, 1.6585, 1.2337], [1.415, 1.5975, 1.0746], [1.144, 1.8539, 1.4238], [1.6994, 1.9762, 1.4494]]]])
in0Con36516 = tf.constant([[[[0.7217, 0.8217, 0.3221], [0.1617, 0.0071, 0.4652], [0.8318, 0.9257, 0.5586]], [[0.3577, 0.3908, 0.1678], [0.4965, 0.4628, 0.5366], [0.0849, 0.164, 0.185]], [[0.3088, 0.581, 0.2984], [0.7305, 0.0158, 0.7006], [0.4465, 0.2134, 0.931]], [[0.2273, 0.071, 0.7905], [0.641, 0.1543, 0.6644], [0.5867, 0.4082, 0.6022]], [[0.8498, 0.6843, 0.8353], [0.1585, 0.882, 0.9849], [0.3185, 0.5449, 0.1852]], [[0.3269, 0.2692, 0.9784], [0.5624, 0.8442, 0.8418], [0.5873, 0.4954, 0.1843]], [[0.9605, 0.7675, 0.5172], [0.8693, 0.7627, 0.418], [0.9826, 0.78, 0.1885]], [[0.5843, 0.6893, 0.4709], [0.337, 0.1546, 0.711], [0.782, 0.3834, 0.9043]], [[0.4877, 0.0043, 0.3054], [0.3635, 0.6935, 0.6758], [0.4001, 0.6961, 0.6498]]]])
in0Dot35773 = tf.constant([[[0.4776, 0.9328, 0.1539], [0.3303, 0.6198, 0.6968], [0.2069, 0.688, 0.6736]]])
in1Dot35773 = tf.constant([[[0.669, 0.6795, 0.594], [0.5398, 0.2811, 0.0457], [0.0802, 0.8229, 0.93]]])
in0Dot84344 = tf.constant([[0.0731, 0.5578, 0.1563]])
in1Dot84344 = tf.constant([[0.1201, 0.3908, 0.0734]])
in0Con54895 = tf.constant([[0.3681, 0.7857, 0.5512, 0.0112, 0.9743, 0.3164, 0.3783, 0.7295]])
in0Con50308 = tf.constant([[[[0.1343, 0.9365, 0.6427], [0.1933, 0.6706, 0.6074], [0.6667, 0.1071, 0.719]], [[0.8006, 0.5004, 0.7465], [0.6435, 0.2929, 0.194], [0.4621, 0.9376, 0.2074]], [[0.1982, 0.1277, 0.5432], [0.9088, 0.4316, 0.9036], [0.5906, 0.656, 0.0849]], [[0.1407, 0.0623, 0.1008], [0.8177, 0.2213, 0.5787], [0.33, 0.5983, 0.258]], [[0.2322, 0.0406, 0.5472], [0.4789, 0.1546, 0.6108], [0.7999, 0.815, 0.2939]], [[0.2834, 0.5833, 0.6784], [0.6954, 0.413, 0.4108], [0.1674, 0.4374, 0.7466]], [[0.5468, 0.9678, 0.2535], [0.0024, 0.6642, 0.0362], [0.7892, 0.5945, 0.9236]], [[0.74, 0.3879, 0.2067], [0.5416, 0.511, 0.276], [0.065, 0.2829, 0.2218]], [[0.0299, 0.1785, 0.2085], [0.4358, 0.2435, 0.5221], [0.4476, 0.3997, 0.388]]]])
in0Mas91996 = tf.constant([[[[1.4936], [1.0662]], [[1.1101], [1.3399]], [[1.9945], [1.6173]], [[1.2254], [1.9626]]]])
print (np.array2string(model.predict([in0Sub43960,in1Sub43960,in0Con87404,in0Up_61141,in0Con36516,in0Dot35773,in1Dot35773,in0Dot84344,in1Dot84344,in0Con54895,in0Con50308,in0Mas91996],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub86464.png')

LSub43960 = subtract_layer([[[[0.4973, 0.0595], [0.0332, 0.4607], [0.8641, 0.366]], [[0.021, 0.4108], [0.2583, 0.0187], [0.2206, 0.4964]], [[0.1019, 0.1534], [0.5137, 0.4647], [0.8744, 0.6208]]]], [[[[0.6033, 0.67], [0.2378, 0.3202], [0.2817, 0.9303]], [[0.9178, 0.2818], [0.448, 0.005], [0.5138, 0.5814]], [[0.3632, 0.2982], [0.9899, 0.4694], [0.2292, 0.338]]]], Sub43960), 
LZer99903 = zero_padding2D_layer(Sub43960, 0, 0, 5, 0, Zer99903), 
LCon87404 = concatenate_layer([Zer99903,[[[[0.7904], [0.036], [0.1068], [0.3347], [0.8024], [0.3794], [0.0787], [0.7738]], [[0.9316], [0.6186], [0.1401], [0.5509], [0.823], [0.6449], [0.3977], [0.0292]], [[0.4561], [0.7384], [0.5515], [0.8303], [0.8991], [0.9398], [0.1349], [0.9134]]]]], 3, Con87404), 
LUp_61141 = up_sampling2D_layer([[[[1.4592, 1.9406, 1.5487], [1.5588, 1.0133, 1.3324], [1.8875, 1.9242, 1.7766], [1.4436, 1.5915, 1.967]], [[1.063, 1.0943, 1.7364], [1.8936, 1.5029, 1.0095], [1.0857, 1.5042, 1.2723], [1.4025, 1.1163, 1.8126]], [[1.1052, 1.6585, 1.2337], [1.415, 1.5975, 1.0746], [1.144, 1.8539, 1.4238], [1.6994, 1.9762, 1.4494]]]], 1, 2, Up_61141), 
LSub58440 = subtract_layer(Con87404,Up_61141, Sub58440), 
LRes76742 = reshape_layer(Sub58440, [3, 24], Res76742), 
LLST58093 = lstm_layer(Res76742,[[2, 1, 3, 7, 3, 8, 2, 1], [1, 10, 1, 1, 2, 9, 2, 9], [7, 10, 7, 1, 7, 9, 6, 10], [6, 1, 6, 9, 3, 1, 5, 4], [2, 2, 3, 1, 1, 4, 7, 2], [8, 8, 10, 5, 1, 8, 3, 3], [3, 5, 5, 5, 7, 2, 7, 4], [9, 8, 5, 5, 8, 9, 6, 9], [1, 4, 4, 1, 2, 3, 8, 10], [6, 10, 9, 10, 7, 9, 10, 5], [4, 10, 6, 8, 4, 5, 3, 9], [6, 5, 6, 10, 10, 7, 5, 7], [6, 8, 3, 3, 4, 9, 1, 3], [8, 1, 3, 1, 5, 3, 3, 7], [5, 6, 6, 5, 6, 5, 2, 9], [10, 8, 2, 9, 3, 6, 1, 3], [7, 7, 8, 6, 4, 1, 10, 7], [2, 2, 10, 1, 5, 8, 3, 2], [1, 1, 4, 3, 9, 8, 2, 4], [9, 10, 6, 2, 7, 8, 6, 3], [5, 9, 2, 8, 4, 4, 6, 6], [3, 7, 5, 6, 10, 8, 4, 4], [10, 7, 4, 9, 7, 4, 8, 8], [3, 4, 9, 10, 8, 9, 4, 7]],[[7, 9, 6, 2, 5, 6, 7, 2], [2, 4, 7, 10, 6, 10, 2, 5]],[9, 7, 7, 4, 6, 7, 8, 1], LST58093), 
LRes68747 = reshape_layer(LST58093, [2, 1], Res68747), 
LRes91254 = reshape_layer(Res68747, [2, 1, 1], Res91254), 
LZer87070 = zero_padding2D_layer(Res91254, 7, 0, 2, 0, Zer87070), 
LCon36516 = concatenate_layer([Zer87070,[[[[0.7217, 0.8217, 0.3221], [0.1617, 0.0071, 0.4652], [0.8318, 0.9257, 0.5586]], [[0.3577, 0.3908, 0.1678], [0.4965, 0.4628, 0.5366], [0.0849, 0.164, 0.185]], [[0.3088, 0.581, 0.2984], [0.7305, 0.0158, 0.7006], [0.4465, 0.2134, 0.931]], [[0.2273, 0.071, 0.7905], [0.641, 0.1543, 0.6644], [0.5867, 0.4082, 0.6022]], [[0.8498, 0.6843, 0.8353], [0.1585, 0.882, 0.9849], [0.3185, 0.5449, 0.1852]], [[0.3269, 0.2692, 0.9784], [0.5624, 0.8442, 0.8418], [0.5873, 0.4954, 0.1843]], [[0.9605, 0.7675, 0.5172], [0.8693, 0.7627, 0.418], [0.9826, 0.78, 0.1885]], [[0.5843, 0.6893, 0.4709], [0.337, 0.1546, 0.711], [0.782, 0.3834, 0.9043]], [[0.4877, 0.0043, 0.3054], [0.3635, 0.6935, 0.6758], [0.4001, 0.6961, 0.6498]]]]], 3, Con36516), 
LDot35773 = dot_layer([[[0.4776, 0.9328, 0.1539], [0.3303, 0.6198, 0.6968], [0.2069, 0.688, 0.6736]]], [[[0.669, 0.6795, 0.594], [0.5398, 0.2811, 0.0457], [0.0802, 0.8229, 0.93]]], 2, 2, Dot35773), 
LFla37208 = flatten_layer(Dot35773, Fla37208), 
LDot84344 = dot_layer([[0.0731, 0.5578, 0.1563]], [[0.1201, 0.3908, 0.0734]], 1, 1, Dot84344), 
LCon54895 = concatenate_layer([Dot84344,[[0.3681, 0.7857, 0.5512, 0.0112, 0.9743, 0.3164, 0.3783, 0.7295]]], 1, Con54895), 
LMin9192 = minimum_layer([Fla37208,Con54895], Min9192), 
LRes72719 = reshape_layer(Min9192, [9, 1], Res72719), 
LRes53985 = reshape_layer(Res72719, [9, 1, 1], Res53985), 
LZer6449 = zero_padding2D_layer(Res53985, 0, 0, 2, 0, Zer6449), 
LCon50308 = concatenate_layer([Zer6449,[[[[0.1343, 0.9365, 0.6427], [0.1933, 0.6706, 0.6074], [0.6667, 0.1071, 0.719]], [[0.8006, 0.5004, 0.7465], [0.6435, 0.2929, 0.194], [0.4621, 0.9376, 0.2074]], [[0.1982, 0.1277, 0.5432], [0.9088, 0.4316, 0.9036], [0.5906, 0.656, 0.0849]], [[0.1407, 0.0623, 0.1008], [0.8177, 0.2213, 0.5787], [0.33, 0.5983, 0.258]], [[0.2322, 0.0406, 0.5472], [0.4789, 0.1546, 0.6108], [0.7999, 0.815, 0.2939]], [[0.2834, 0.5833, 0.6784], [0.6954, 0.413, 0.4108], [0.1674, 0.4374, 0.7466]], [[0.5468, 0.9678, 0.2535], [0.0024, 0.6642, 0.0362], [0.7892, 0.5945, 0.9236]], [[0.74, 0.3879, 0.2067], [0.5416, 0.511, 0.276], [0.065, 0.2829, 0.2218]], [[0.0299, 0.1785, 0.2085], [0.4358, 0.2435, 0.5221], [0.4476, 0.3997, 0.388]]]]], 3, Con50308), 
LMas91996 = masking_layer([[[[1.4936], [1.0662]], [[1.1101], [1.3399]], [[1.9945], [1.6173]], [[1.2254], [1.9626]]]], 2, Mas91996), 
LDen23674 = dense_layer(Mas91996, [[0.092, 0.2319, 0.4362, 0.8608]],[0.175, 0.9232, 0.9392, 0.7635], Den23674), 
LZer78704 = zero_padding2D_layer(Den23674, 5, 0, 1, 0, Zer78704), 
LAve85417 = average_layer([Con50308,Zer78704], Ave85417), 
LSub86464 = subtract_layer(Con36516,Ave85417, Sub86464), 
exec_layers([LSub43960,LZer99903,LCon87404,LUp_61141,LSub58440,LRes76742,LLST58093,LRes68747,LRes91254,LZer87070,LCon36516,LDot35773,LFla37208,LDot84344,LCon54895,LMin9192,LRes72719,LRes53985,LZer6449,LCon50308,LMas91996,LDen23674,LZer78704,LAve85417,LSub86464],["Sub43960","Zer99903","Con87404","Up_61141","Sub58440","Res76742","LST58093","Res68747","Res91254","Zer87070","Con36516","Dot35773","Fla37208","Dot84344","Con54895","Min9192","Res72719","Res53985","Zer6449","Con50308","Mas91996","Den23674","Zer78704","Ave85417","Sub86464"],Sub86464,"Sub86464")

Actual (Unparsed): [[[[0.0000000, 0.6545500, 0.3534500, 0.0007500], [0.0000000, 0.0650500, -0.3282000, 0.1615000], [-0.1191200, 0.4984500, 0.8721500, 0.1991000]], [[0.0000000, -0.0426000, 0.1406000, -0.2054500], [0.0000000, 0.1747500, 0.3163500, 0.4396000], [-0.1840500, -0.1461500, -0.3048000, 0.0813000]], [[0.0000000, 0.2097000, 0.5171500, 0.0268000], [0.0000000, 0.2761000, -0.2000000, 0.2488000], [-0.3928500, 0.1512000, -0.1146000, 0.8885500]], [[0.0000000, 0.1569500, 0.0398500, 0.7401000], [0.0000000, 0.2321500, 0.0436500, 0.3750500], [-0.2756000, 0.4217000, 0.1090500, 0.4732000]], [[0.0000000, 0.7337000, 0.6640000, 0.5617000], [0.0000000, -0.0809500, 0.8047000, 0.6795000], [-0.0056000, -0.0814500, 0.1374000, 0.0382500]], [[0.0000000, 0.1852000, -0.0224500, 0.6392000], [-0.1562056, -0.4200829, -0.1576541, -0.3881955], [-0.6236952, -0.0816259, -0.4254382, -1.0296425]], [[0.0000000, 0.6871000, 0.2836000, 0.3904500], [-0.1385646, 0.2777839, -0.2811128, -0.4596370], [-0.3073354, -0.0289614, -0.2790822, -1.2317430]], [[0.0000000, 0.2143000, 0.4953500, 0.3675500], [-0.1792470, -0.6266623, -1.0055005, -0.6671828], [-0.3298283, 0.1003741, -0.5803831, -0.2844360]], [[0.0000000, 0.4727500, -0.0849500, 0.2011500], [-0.1438684, -0.4580851, -0.1651097, -0.4944121], [-0.5425296, -0.5128635, -0.4013931, -0.7706530]]]]

Expected (Unparsed): [[[[0,0.65455,0.35345,0.0007499999999999729],[0,0.06505000000000001,-0.3282,0.16149999999999998],[-0.119119985,0.49845,0.87215,0.1991]],[[0,-0.04259999999999997,0.1406,-0.20545000000000002],[0,0.17475000000000002,0.31635,0.4396],[-0.18405,-0.14615,-0.30479999999999996,0.0813]],[[0,0.20970000000000003,0.51715,0.02679999999999999],[0,0.2761,-0.19999999999999998,0.24880000000000002],[-0.39285,0.1512,-0.11460000000000001,0.8885500000000001]],[[0,0.15695,0.03985,0.7401],[0,0.23215000000000002,0.043649999999999994,0.37505],[-0.2756,0.42169999999999996,0.10904999999999998,0.47319999999999995]],[[0,0.7337,0.664,0.5617000000000001],[0,-0.08095,0.8047,0.6795],[-0.0056,-0.08145000000000002,0.13740000000000008,0.038250000000000006]],[[0,0.18520000000000003,-0.022450000000000025,0.6392],[-0.1562056,-0.42008292,-0.15765416,-0.38819543999999995],[-0.6236952,-0.08162588999999998,-0.42543822000000003,-1.0296424800000001]],[[0,0.6871,0.28359999999999996,0.39044999999999996],[-0.13856459999999998,0.27778390499999994,-0.2811128100000001,-0.45963704],[-0.30733540000000004,-0.028961405000000107,-0.27908219,-1.23174296]],[[0,0.21430000000000005,0.49535,0.36755],[-0.179247,-0.6266622749999999,-1.00550045,-0.6671827999999999],[-0.32982827,0.10037406500000001,-0.58038313,-0.28443592000000006]],[[0,0.47275,-0.08495,0.20115],[-0.1438684,-0.45808513,-0.16510974,-0.49441216],[-0.5425296,-0.51286347,-0.4013930600000001,-0.7706530399999999]]]]

Actual:   [[[[0, 0.6546, 0.3535, 0.0008], [0, 0.0651, -0.3282, 0.1615], [-0.1191, 0.4985, 0.8722, 0.1991]], [[0, -0.0426, 0.1406, -0.2054], [0, 0.1748, 0.3164, 0.4396], [-0.184, -0.1461, -0.3048, 0.0813]], [[0, 0.2097, 0.5172, 0.0268], [0, 0.2761, -0.2, 0.2488], [-0.3928, 0.1512, -0.1146, 0.8886]], [[0, 0.157, 0.0399, 0.7401], [0, 0.2322, 0.0437, 0.3751], [-0.2756, 0.4217, 0.1091, 0.4732]], [[0, 0.7337, 0.664, 0.5617], [0, -0.0809, 0.8047, 0.6795], [-0.0056, -0.0814, 0.1374, 0.0383]], [[0, 0.1852, -0.0224, 0.6392], [-0.1562, -0.42, -0.1576, -0.3881], [-0.6236, -0.0816, -0.4254, -1.0296]], [[0, 0.6871, 0.2836, 0.3905], [-0.1385, 0.2778, -0.2811, -0.4596], [-0.3073, -0.0289, -0.279, -1.2317]], [[0, 0.2143, 0.4954, 0.3676], [-0.1792, -0.6266, -1.0055, -0.6671], [-0.3298, 0.1004, -0.5803, -0.2844]], [[0, 0.4728, -0.0849, 0.2012], [-0.1438, -0.458, -0.1651, -0.4944], [-0.5425, -0.5128, -0.4013, -0.7706]]]]

Expected: [[[[0, 0.6546, 0.3535, 0.0008], [0, 0.0651, -0.3282, 0.1615], [-0.1191, 0.4985, 0.8722, 0.1991]], [[0, -0.0425, 0.1406, -0.2054], [0, 0.1748, 0.3164, 0.4396], [-0.184, -0.1461, -0.3047, 0.0813]], [[0, 0.2098, 0.5172, 0.0268], [0, 0.2761, -0.1999, 0.2489], [-0.3928, 0.1512, -0.1146, 0.8886]], [[0, 0.157, 0.0399, 0.7401], [0, 0.2322, 0.0437, 0.3751], [-0.2756, 0.4217, 0.1091, 0.4732]], [[0, 0.7337, 0.664, 0.5618], [0, -0.0809, 0.8047, 0.6795], [-0.0056, -0.0814, 0.1375, 0.0383]], [[0, 0.1853, -0.0224, 0.6392], [-0.1562, -0.42, -0.1576, -0.3881], [-0.6236, -0.0816, -0.4254, -1.0296]], [[0, 0.6871, 0.2836, 0.3905], [-0.1385, 0.2778, -0.2811, -0.4596], [-0.3073, -0.0289, -0.279, -1.2317]], [[0, 0.2144, 0.4954, 0.3676], [-0.1792, -0.6266, -1.0055, -0.6671], [-0.3298, 0.1004, -0.5803, -0.2844]], [[0, 0.4728, -0.0849, 0.2012], [-0.1438, -0.458, -0.1651, -0.4944], [-0.5425, -0.5128, -0.4013, -0.7706]]]]