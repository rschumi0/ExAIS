import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub44559 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in1Sub44559 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in0Ave44281 = tf.keras.layers.Input(shape=([1, 2, 1]))
in1Ave44281 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con64555 = tf.keras.layers.Input(shape=([3, 26]))

Sub44559 = keras.layers.Subtract(name = 'Sub44559', )([in0Sub44559,in1Sub44559])
Res50433 = keras.layers.Reshape((3, 3, 9), name = 'Res50433', )(Sub44559)
Res12779 = keras.layers.Reshape((3, 27), name = 'Res12779', )(Res50433)
Up_69981 = keras.layers.UpSampling1D(size=(1), name = 'Up_69981', )(Res12779)
Ave44281 = keras.layers.Average(name = 'Ave44281', )([in0Ave44281,in1Ave44281])
Res36090 = keras.layers.Reshape((1, 2), name = 'Res36090', )(Ave44281)
Per74787 = keras.layers.Permute((2,1), name = 'Per74787',)(Res36090)
Zer85256 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer85256', )(Per74787)
Con64555 = keras.layers.Concatenate(axis=2, name = 'Con64555', )([Zer85256,in0Con64555])
Add93802 = keras.layers.Add(name = 'Add93802', )([Up_69981,Con64555])
model = tf.keras.models.Model(inputs=[in0Sub44559,in1Sub44559,in0Ave44281,in1Ave44281,in0Con64555], outputs=Add93802)
in0Sub44559 = tf.constant([[[[[0.1231, 0.7245, 0.4664], [0.5008, 0.5547, 0.0764], [0.4501, 0.3122, 0.2705]], [[0.414, 0.2941, 0.9051], [0.6549, 0.2175, 0.1697], [0.2369, 0.0323, 0.0578]], [[0.2362, 0.8181, 0.6558], [0.1914, 0.6194, 0.8806], [0.5955, 0.9617, 0.7082]]], [[[0.9056, 0.2743, 0.537], [0.377, 0.5781, 0.7542], [0.0304, 0.4881, 0.7644]], [[0.2587, 0.8478, 0.2995], [0.4253, 0.8324, 0.1865], [0.2122, 0.47, 0.4843]], [[0.9688, 0.6253, 0.4339], [0.6407, 0.1363, 0.5373], [0.5189, 0.2399, 0.1531]]], [[[0.9313, 0.974, 0.3436], [0.7698, 0.9102, 0.0146], [0.7088, 0.5878, 0.0136]], [[0.4776, 0.3679, 0.727], [0.1377, 0.1945, 0.8988], [0.9489, 0.0064, 0.6258]], [[0.7302, 0.9187, 0.1965], [0.6454, 0.5253, 0.8954], [0.3062, 0.4916, 0.4136]]]]])
in1Sub44559 = tf.constant([[[[[0.0353, 0.9757, 0.8045], [0.6002, 0.6642, 0.1175], [0.3622, 0.6707, 0.3289]], [[0.8928, 0.5954, 0.7322], [0.1737, 0.6871, 0.2118], [0.3836, 0.2041, 0.5747]], [[0.2945, 0.3906, 0.2979], [0.5425, 0.0495, 0.8584], [0.4028, 0.045, 0.9773]]], [[[0.6382, 0.2204, 0.3008], [0.6129, 0.6845, 0.8177], [0.1094, 0.1414, 0.0862]], [[0.0294, 0.8656, 0.1321], [0.536, 0.2204, 0.8801], [0.3536, 0.0746, 0.9617]], [[0.0769, 0.135, 0.0454], [0.4382, 0.6307, 0.0193], [0.3341, 0.9591, 0.1319]]], [[[0.5178, 0.128, 0.7654], [0.4236, 0.6221, 0.6301], [0.444, 0.3409, 0.3523]], [[0.386, 0.645, 0.2003], [0.0303, 0.1462, 0.4771], [0.0381, 0.154, 0.4707]], [[0.9039, 0.2768, 0.7187], [0.6083, 0.7052, 0.7094], [0.5822, 0.533, 0.0789]]]]])
in0Ave44281 = tf.constant([[[[0.4356], [0.0033]]]])
in1Ave44281 = tf.constant([[[[0.4053], [0.761]]]])
in0Con64555 = tf.constant([[[0.5295, 0.866, 0.1148, 0.3518, 0.8575, 0.4128, 0.7902, 0.253, 0.4669, 0.896, 0.8031, 0.8815, 0.4721, 0.5108, 0.1404, 0.7788, 0.9737, 0.561, 0.5279, 0.9368, 0.327, 0.2751, 0.5615, 0.0253, 0.5549, 0.9869], [0.0279, 0.2282, 0.0428, 0.1407, 0.5708, 0.2972, 0.352, 0.6029, 0.5098, 0.5295, 0.8445, 0.1883, 0.9294, 0.3805, 0.8241, 0.1409, 0.1204, 0.3339, 0.0705, 0.5516, 0.0808, 0.4694, 0.9637, 0.3373, 0.0582, 0.891], [0.8821, 0.4591, 0.052, 0.81, 0.1923, 0.5156, 0.7853, 0.6115, 0.9435, 0.7117, 0.9009, 0.6764, 0.3301, 0.4721, 0.0432, 0.0797, 0.0919, 0.6476, 0.0413, 0.5405, 0.2839, 0.3442, 0.6323, 0.1597, 0.2674, 0.894]]])
print (np.array2string(model.predict([in0Sub44559,in1Sub44559,in0Ave44281,in1Ave44281,in0Con64555],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add93802.png')

LSub44559 = subtract_layer([[[[[0.1231, 0.7245, 0.4664], [0.5008, 0.5547, 0.0764], [0.4501, 0.3122, 0.2705]], [[0.414, 0.2941, 0.9051], [0.6549, 0.2175, 0.1697], [0.2369, 0.0323, 0.0578]], [[0.2362, 0.8181, 0.6558], [0.1914, 0.6194, 0.8806], [0.5955, 0.9617, 0.7082]]], [[[0.9056, 0.2743, 0.537], [0.377, 0.5781, 0.7542], [0.0304, 0.4881, 0.7644]], [[0.2587, 0.8478, 0.2995], [0.4253, 0.8324, 0.1865], [0.2122, 0.47, 0.4843]], [[0.9688, 0.6253, 0.4339], [0.6407, 0.1363, 0.5373], [0.5189, 0.2399, 0.1531]]], [[[0.9313, 0.974, 0.3436], [0.7698, 0.9102, 0.0146], [0.7088, 0.5878, 0.0136]], [[0.4776, 0.3679, 0.727], [0.1377, 0.1945, 0.8988], [0.9489, 0.0064, 0.6258]], [[0.7302, 0.9187, 0.1965], [0.6454, 0.5253, 0.8954], [0.3062, 0.4916, 0.4136]]]]], [[[[[0.0353, 0.9757, 0.8045], [0.6002, 0.6642, 0.1175], [0.3622, 0.6707, 0.3289]], [[0.8928, 0.5954, 0.7322], [0.1737, 0.6871, 0.2118], [0.3836, 0.2041, 0.5747]], [[0.2945, 0.3906, 0.2979], [0.5425, 0.0495, 0.8584], [0.4028, 0.045, 0.9773]]], [[[0.6382, 0.2204, 0.3008], [0.6129, 0.6845, 0.8177], [0.1094, 0.1414, 0.0862]], [[0.0294, 0.8656, 0.1321], [0.536, 0.2204, 0.8801], [0.3536, 0.0746, 0.9617]], [[0.0769, 0.135, 0.0454], [0.4382, 0.6307, 0.0193], [0.3341, 0.9591, 0.1319]]], [[[0.5178, 0.128, 0.7654], [0.4236, 0.6221, 0.6301], [0.444, 0.3409, 0.3523]], [[0.386, 0.645, 0.2003], [0.0303, 0.1462, 0.4771], [0.0381, 0.154, 0.4707]], [[0.9039, 0.2768, 0.7187], [0.6083, 0.7052, 0.7094], [0.5822, 0.533, 0.0789]]]]], Sub44559), 
LRes50433 = reshape_layer(Sub44559, [3, 3, 9], Res50433), 
LRes12779 = reshape_layer(Res50433, [3, 27], Res12779), 
LUp_69981 = up_sampling1D_layer(Res12779, 1, Up_69981), 
LAve44281 = average_layer([[[[[0.4356], [0.0033]]]], [[[[0.4053], [0.761]]]]], Ave44281), 
LRes36090 = reshape_layer(Ave44281, [1, 2], Res36090), 
LPer74787 = permute_layer(Res36090, 2,1, Per74787), 
LZer85256 = zero_padding1D_layer(Per74787, 1, 0, Zer85256), 
LCon64555 = concatenate_layer([Zer85256,[[[0.5295, 0.866, 0.1148, 0.3518, 0.8575, 0.4128, 0.7902, 0.253, 0.4669, 0.896, 0.8031, 0.8815, 0.4721, 0.5108, 0.1404, 0.7788, 0.9737, 0.561, 0.5279, 0.9368, 0.327, 0.2751, 0.5615, 0.0253, 0.5549, 0.9869], [0.0279, 0.2282, 0.0428, 0.1407, 0.5708, 0.2972, 0.352, 0.6029, 0.5098, 0.5295, 0.8445, 0.1883, 0.9294, 0.3805, 0.8241, 0.1409, 0.1204, 0.3339, 0.0705, 0.5516, 0.0808, 0.4694, 0.9637, 0.3373, 0.0582, 0.891], [0.8821, 0.4591, 0.052, 0.81, 0.1923, 0.5156, 0.7853, 0.6115, 0.9435, 0.7117, 0.9009, 0.6764, 0.3301, 0.4721, 0.0432, 0.0797, 0.0919, 0.6476, 0.0413, 0.5405, 0.2839, 0.3442, 0.6323, 0.1597, 0.2674, 0.894]]]], 2, Con64555), 
LAdd93802 = add_layer([Up_69981,Con64555], Add93802), 
exec_layers([LSub44559,LRes50433,LRes12779,LUp_69981,LAve44281,LRes36090,LPer74787,LZer85256,LCon64555,LAdd93802],["Sub44559","Res50433","Res12779","Up_69981","Ave44281","Res36090","Per74787","Zer85256","Con64555","Add93802"],Add93802,"Add93802")

Actual (Unparsed): [[[0.0878000, 0.2783000, 0.5279000, 0.0154000, 0.2423000, 0.8164000, 0.5007000, 0.4317000, 0.1946000, -0.0119000, 0.5947000, 0.9760000, 1.3627000, 0.0025000, 0.4687000, -0.0063000, 0.6070000, 0.4568000, 0.5027000, 0.9554000, 1.2947000, -0.0241000, 0.8450000, 0.5837000, 0.2180000, 1.4716000, 0.7178000], [0.6878500, 0.0818000, 0.4644000, -0.1931000, 0.0343000, 0.5073000, 0.2182000, 0.6987000, 1.2811000, 0.7391000, 0.5117000, 1.0119000, 0.0776000, 1.5414000, -0.3131000, 0.6827000, 0.5363000, -0.3570000, 1.2258000, 0.5608000, 0.9401000, 0.2833000, -0.0250000, 1.4817000, 0.5221000, -0.6610000, 0.9122000], [0.7956500, 1.7281000, 0.0373000, 0.3982000, 1.0981000, -0.4232000, 0.7804000, 1.0322000, 0.2728000, 1.0351000, 0.4346001, 1.4276000, 0.7838000, 0.3784000, 0.8938000, 0.9540000, -0.0679000, 0.2470000, 0.4739000, 0.6832000, 0.0183000, 0.3210000, 0.1643000, 0.8183000, -0.1163000, 0.2260000, 1.2287000]]]

Expected (Unparsed): [[[0.0878,0.2783,0.5279,0.015400000000000066,0.24229999999999996,0.8164,0.5006999999999999,0.43170000000000003,0.1946,-0.011900000000000077,0.5947,0.9760000000000001,1.3627,0.0025000000000000022,0.4687,-0.0063,0.607,0.4568,0.5027,0.9554,1.2947,-0.024099999999999955,0.845,0.5837,0.21800000000000003,1.4716,0.7178000000000001],[0.68785,0.08179999999999998,0.46440000000000003,-0.1931,0.03429999999999994,0.5073,0.2182,0.6987,1.2811,0.7391,0.5116999999999999,1.0119,0.07759999999999997,1.5413999999999999,-0.3131,0.6827000000000001,0.5363,-0.357,1.2258,0.5608,0.9400999999999999,0.28330000000000005,-0.025000000000000078,1.4817,0.5221,-0.6609999999999999,0.9122],[0.79565,1.7281,0.037300000000000055,0.39820000000000005,1.0981,-0.4232,0.7804,1.0322,0.27280000000000004,1.0351,0.4346,1.4276,0.7838,0.3784,0.8938,0.954,-0.06790000000000002,0.247,0.4738999999999999,0.6831999999999999,0.018299999999999983,0.321,0.16429999999999995,0.8182999999999999,-0.11630000000000001,0.22599999999999998,1.2287]]]

Actual:   [[[0.0878, 0.2783, 0.5279, 0.0154, 0.2423, 0.8164, 0.5007, 0.4317, 0.1946, -0.0119, 0.5947, 0.976, 1.3627, 0.0025, 0.4687, -0.0063, 0.607, 0.4568, 0.5027, 0.9554, 1.2947, -0.0241, 0.845, 0.5837, 0.218, 1.4716, 0.7178], [0.6879, 0.0818, 0.4644, -0.1931, 0.0343, 0.5073, 0.2182, 0.6987, 1.2811, 0.7391, 0.5117, 1.0119, 0.0776, 1.5414, -0.3131, 0.6827, 0.5363, -0.357, 1.2258, 0.5608, 0.9401, 0.2833, -0.025, 1.4817, 0.5221, -0.661, 0.9122], [0.7957, 1.7281, 0.0373, 0.3982, 1.0981, -0.4232, 0.7804, 1.0322, 0.2728, 1.0351, 0.4347, 1.4276, 0.7838, 0.3784, 0.8938, 0.954, -0.0679, 0.247, 0.4739, 0.6832, 0.0183, 0.321, 0.1643, 0.8183, -0.1163, 0.226, 1.2287]]]

Expected: [[[0.0878, 0.2783, 0.5279, 0.0155, 0.2423, 0.8164, 0.5007, 0.4318, 0.1946, -0.0119, 0.5947, 0.9761, 1.3627, 0.0026, 0.4687, -0.0063, 0.607, 0.4568, 0.5027, 0.9554, 1.2947, -0.024, 0.845, 0.5837, 0.2181, 1.4716, 0.7179], [0.6879, 0.0818, 0.4645, -0.1931, 0.0343, 0.5073, 0.2182, 0.6987, 1.2811, 0.7391, 0.5117, 1.0119, 0.0776, 1.5414, -0.3131, 0.6828, 0.5363, -0.357, 1.2258, 0.5608, 0.9401, 0.2834, -0.025, 1.4817, 0.5221, -0.6609, 0.9122], [0.7957, 1.7281, 0.0374, 0.3983, 1.0981, -0.4232, 0.7804, 1.0322, 0.2729, 1.0351, 0.4346, 1.4276, 0.7838, 0.3784, 0.8938, 0.954, -0.0679, 0.247, 0.4739, 0.6832, 0.0183, 0.321, 0.1643, 0.8183, -0.1163, 0.226, 1.2287]]]