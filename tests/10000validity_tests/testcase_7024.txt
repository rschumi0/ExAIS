import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot76485 = tf.keras.layers.Input(shape=([2, 3]))
in1Dot76485 = tf.keras.layers.Input(shape=([2, 3]))
in0Con7673 = tf.keras.layers.Input(shape=([24, 3, 3, 2]))
in0Con91808 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Per33941 = tf.keras.layers.Input(shape=([4, 4]))

Dot76485 = keras.layers.Dot(axes=(2, 2), name = 'Dot76485', )([in0Dot76485,in1Dot76485])
Res93650 = keras.layers.Reshape((2, 2, 1), name = 'Res93650', )(Dot76485)
Res43431 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res43431', )(Res93650)
Zer11129 = keras.layers.ZeroPadding3D(padding=((22, 0), (1, 0), (2, 0)), name = 'Zer11129', )(Res43431)
Con7673 = keras.layers.Concatenate(axis=4, name = 'Con7673', )([Zer11129,in0Con7673])
Con91808 = keras.layers.Conv3DTranspose(3, (1, 2, 1),strides=(12, 1, 3), padding='valid', name = 'Con91808', )(in0Con91808)
Add69730 = keras.layers.Add(name = 'Add69730', )([Con7673,Con91808])
Res30383 = keras.layers.Reshape((24, 3, 9), name = 'Res30383', )(Add69730)
Res15 = keras.layers.Reshape((24, 27), name = 'Res15', )(Res30383)
Sep80778 = keras.layers.SeparableConv1D(4, (4),strides=(11), padding='valid', name = 'Sep80778', )(Res15)
Zer15948 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer15948', )(Sep80778)
Per33941 = keras.layers.Permute((2,1), name = 'Per33941',)(in0Per33941)
Min6424 = keras.layers.Minimum(name = 'Min6424', )([Zer15948,Per33941])
model = tf.keras.models.Model(inputs=[in0Dot76485,in1Dot76485,in0Con7673,in0Con91808,in0Per33941], outputs=Min6424)
w = model.get_layer('Con91808').get_weights() 
w[0] = np.array([[[[[0.2025, 0.561], [0.2785, 0.0653], [0.6408, 0.2377]]], [[[0.513, 0.2268], [0.1308, 0.407], [0.2539, 0.3524]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con91808').set_weights(w) 
w = model.get_layer('Sep80778').get_weights() 
w[0] = np.array([[[0.0236], [0.6408], [0.9326], [0.5674], [0.7307], [0.8142], [0.8537], [0.9485], [0.5204], [0.1739], [0.4481], [0.0716], [0.6346], [0.6588], [0.3699], [0.9513], [0.9729], [0.2439], [0.7222], [0.7471], [0.1242], [0.8572], [0.1466], [0.6273], [0.6936], [0.2886], [0.2875]], [[0.4245], [0.2941], [0.4892], [0.7403], [0.2988], [0.7478], [0.3032], [0.2817], [0.4158], [0.4941], [0.8604], [0.6502], [0.4663], [0.9382], [0.5645], [0.3957], [0.708], [0.4889], [0.8606], [0.348], [0.0941], [0.3352], [0.7343], [0.071], [0.9665], [0.5858], [0.2046]], [[0.26], [0.7398], [0.2614], [0.909], [0.4179], [0.9785], [0.7665], [0.2445], [0.3031], [0.2799], [0.8925], [0.4317], [0.5792], [0.4132], [0.109], [0.2972], [0.8185], [0.2381], [0.8826], [0.5321], [0.5097], [0.0298], [0.0322], [0.6773], [0.0038], [0.9672], [0.6755]], [[0.1123], [0.3967], [0.7109], [0.1512], [0.8766], [0.1891], [0.1906], [0.4123], [0.2439], [0.1922], [0.9499], [0.7767], [0.5828], [0.5557], [0.6566], [0.5941], [0.1926], [0.9796], [0.6733], [0.344], [0.4773], [0.1454], [0.9097], [0.9112], [0.0379], [0.1495], [0.5242]]])
w[1] = np.array([[[0.1209, 0.165, 0.7597, 0.6401], [0.3869, 0.0359, 0.493, 0.1169], [0.7942, 0.1305, 0.3414, 0.7497], [0.6991, 0.5648, 0.3924, 0.5422], [0.9265, 0.9281, 0.3561, 0.3498], [0.0987, 0.8382, 0.4569, 0.7495], [0.8943, 0.1025, 0.2944, 0.3078], [0.2552, 0.1566, 0.5099, 0.9436], [0.1374, 0.7621, 0.683, 0.0306], [0.2592, 0.7789, 0.2654, 0.8615], [0.447, 0.196, 0.5101, 0.1033], [0.5973, 0.5069, 0.2994, 0.9146], [0.9793, 0.942, 0.4866, 0.4673], [0.5892, 0.0357, 0.8763, 0.7157], [0.5309, 0.4984, 0.2424, 0.3915], [0.9482, 0.3863, 0.8519, 0.3692], [0.8618, 0.1201, 0.8049, 0.7384], [0.3747, 0.9882, 0.1268, 0.1534], [0.1002, 0.3905, 0.9578, 0.2822], [0.3433, 0.2261, 0.3718, 0.4741], [0.5141, 0.5106, 0.3266, 0.08], [0.4937, 0.5194, 0.999, 0.2175], [0.1857, 0.4975, 0.2903, 0.1518], [0.2846, 0.2498, 0.6005, 0.8828], [0.3737, 0.7325, 0.0657, 0.9722], [0.8225, 0.1027, 0.3275, 0.1223], [0.5977, 0.5508, 0.5619, 0.5286]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep80778').set_weights(w) 
in0Dot76485 = tf.constant([[[0.455, 0.9585, 0.4913], [0.6175, 0.6778, 0.9785]]])
in1Dot76485 = tf.constant([[[0.1506, 0.6784, 0.3787], [0.8572, 0.9741, 0.2672]]])
in0Con7673 = tf.constant([[[[[0.9068, 0.8198], [0.7775, 0.4196], [0.0942, 0.6716]], [[0.4233, 0.1425], [0.7297, 0.5882], [0.2478, 0.4877]], [[0.7771, 0.3194], [0.4309, 0.9238], [0.5556, 0.1199]]], [[[0.4952, 0.8843], [0.3759, 0.7656], [0.4764, 0.8989]], [[0.7102, 0.5703], [0.5251, 0.0087], [0.2148, 0.1868]], [[0.3893, 0.2954], [0.6626, 0.1016], [0.5461, 0.1755]]], [[[0.9922, 0.5108], [0.9739, 0.0954], [0.226, 0.6965]], [[0.6869, 0.399], [0.974, 0.1179], [0.1897, 0.4332]], [[0.6001, 0.1746], [0.9509, 0.4088], [0.8985, 0.0049]]], [[[0.8461, 0.1387], [0.3075, 0.7425], [0.272, 0.5389]], [[0.2677, 0.3668], [0.2975, 0.6971], [0.3223, 0.6597]], [[0.7837, 0.3873], [0.9527, 0.805], [0.8778, 0.1436]]], [[[0.9444, 0.8534], [0.6668, 0.3889], [0.286, 0.6184]], [[0.0635, 0.6637], [0.2182, 0.5619], [0.1869, 0.6967]], [[0.0699, 0.884], [0.6024, 0.9165], [0.9476, 0.3417]]], [[[0.7864, 0.0165], [0.1732, 0.2843], [0.0968, 0.3539]], [[0.6082, 0.018], [0.3434, 0.2887], [0.6458, 0.8892]], [[0.7794, 0.0513], [0.706, 0.4111], [0.9622, 0.3618]]], [[[0.5234, 0.3482], [0.4705, 0.8229], [0.3859, 0.9217]], [[0.9058, 0.0533], [0.7504, 0.2009], [0.9536, 0.639]], [[0.3379, 0.3059], [0.5376, 0.2407], [0.8961, 0.2626]]], [[[0.2594, 0.6145], [0.3041, 0.2229], [0.3822, 0.8788]], [[0.59, 0.2917], [0.5953, 0.091], [0.7364, 0.3866]], [[0.6701, 0.0869], [0.8515, 0.3964], [0.909, 0.5777]]], [[[0.405, 0.4038], [0.9798, 0.7004], [0.7406, 0.8872]], [[0.3243, 0.575], [0.0102, 0.6307], [0.8399, 0.9322]], [[0.0048, 0.5329], [0.9378, 0.5471], [0.096, 0.6301]]], [[[0.4048, 0.037], [0.6487, 0.4266], [0.7144, 0.5646]], [[0.8184, 0.0601], [0.5669, 0.1247], [0.6006, 0.9189]], [[0.4702, 0.3867], [0.3685, 0.0786], [0.1197, 0.516]]], [[[0.9036, 0.3251], [0.1806, 0.0019], [0.0998, 0.5931]], [[0.8333, 0.2855], [0.1062, 0.3643], [0.1025, 0.8968]], [[0.6628, 0.9401], [0.5576, 0.8869], [0.7777, 0.536]]], [[[0.4483, 0.5736], [0.6965, 0.8237], [0.7144, 0.0039]], [[0.3251, 0.8928], [0.6005, 0.0839], [0.8765, 0.5984]], [[0.7937, 0.0229], [0.5371, 0.9147], [0.1046, 0.6003]]], [[[0.3731, 0.2251], [0.7156, 0.7704], [0.5298, 0.4434]], [[0.9293, 0.2943], [0.0175, 0.4848], [0.173, 0.4107]], [[0.0219, 0.8826], [0.7314, 0.0394], [0.729, 0.2802]]], [[[0.3165, 0.6483], [0.1135, 0.122], [0.1148, 0.711]], [[0.0022, 0.1087], [0.3964, 0.6287], [0.9952, 0.8919]], [[0.1205, 0.1003], [0.5064, 0.0373], [0.2232, 0.1836]]], [[[0.2627, 0.5047], [0.4375, 0.7134], [0.0974, 0.7635]], [[0.5626, 0.3135], [0.7628, 0.1918], [0.0711, 0.9742]], [[0.7921, 0.5915], [0.8255, 0.0532], [0.1476, 0.4914]]], [[[0.4586, 0.601], [0.5074, 0.4089], [0.6678, 0.1145]], [[0.561, 0.395], [0.2691, 0.1763], [0.6141, 0.9925]], [[0.3632, 0.9508], [0.1339, 0.21], [0.3773, 0.1794]]], [[[0.6054, 0.2287], [0.0619, 0.1373], [0.2153, 0.3445]], [[0.7481, 0.0013], [0.4329, 0.0774], [0.2984, 0.2124]], [[0.5124, 0.472], [0.2212, 0.7109], [0.3089, 0.3639]]], [[[0.3622, 0.3745], [0.5679, 0.7827], [0.4333, 0.593]], [[0.0269, 0.7296], [0.3946, 0.6783], [0.2492, 0.2784]], [[0.3676, 0.7269], [0.1007, 0.3227], [0.3238, 0.6257]]], [[[0.1748, 0.3192], [0.2664, 0.1257], [0.2728, 0.0639]], [[0.0037, 0.2951], [0.2552, 0.8763], [0.898, 0.2049]], [[0.1935, 0.565], [0.1672, 0.405], [0.7725, 0.2013]]], [[[0.4134, 0.6007], [0.3203, 0.0367], [0.0594, 0.9547]], [[0.6752, 0.8665], [0.2836, 0.6078], [0.3396, 0.7637]], [[0.8627, 0.3376], [0.0143, 0.3842], [0.0537, 0.7545]]], [[[0.661, 0.9824], [0.2777, 0.0723], [0.6959, 0.8622]], [[0.9035, 0.2871], [0.7846, 0.241], [0.8724, 0.5439]], [[0.9761, 0.4021], [0.252, 0.581], [0.5927, 0.5753]]], [[[0.0646, 0.4025], [0.3744, 0.1978], [0.8946, 0.7492]], [[0.8663, 0.0814], [0.8484, 0.5121], [0.9315, 0.5405]], [[0.4114, 0.9672], [0.5773, 0.7179], [0.6307, 0.5937]]], [[[0.9858, 0.1888], [0.8338, 0.2847], [0.7575, 0.4194]], [[0.7887, 0.9596], [0.8969, 0.8087], [0.8094, 0.9419]], [[0.994, 0.8537], [0.8132, 0.9805], [0.3897, 0.4428]]], [[[0.7518, 0.4617], [0.8537, 0.4038], [0.15, 0.1821]], [[0.4457, 0.2137], [0.715, 0.037], [0.7861, 0.2077]], [[0.104, 0.1148], [0.9176, 0.7207], [0.9794, 0.9813]]]]])
in0Con91808 = tf.constant([[[[[0.5215, 0.1161]], [[0.9267, 0.5492]]], [[[0.3198, 0.2091]], [[0.0639, 0.6345]]]]])
in0Per33941 = tf.constant([[[1.3721, 1.394, 1.0255, 1.535], [1.7094, 1.9771, 1.1734, 1.9079], [1.3057, 1.6387, 1.9452, 1.0585], [1.9056, 1.1427, 1.9446, 1.5298]]])
print (np.array2string(model.predict([in0Dot76485,in1Dot76485,in0Con7673,in0Con91808,in0Per33941],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min6424.png')

LDot76485 = dot_layer([[[0.455, 0.9585, 0.4913], [0.6175, 0.6778, 0.9785]]], [[[0.1506, 0.6784, 0.3787], [0.8572, 0.9741, 0.2672]]], 2, 2, Dot76485), 
LRes93650 = reshape_layer(Dot76485, [2, 2, 1], Res93650), 
LRes43431 = reshape_layer(Res93650, [2, 2, 1, 1], Res43431), 
LZer11129 = zero_padding3D_layer(Res43431, 22, 0, 1, 0, 2, 0, Zer11129), 
LCon7673 = concatenate_layer([Zer11129,[[[[[0.9068, 0.8198], [0.7775, 0.4196], [0.0942, 0.6716]], [[0.4233, 0.1425], [0.7297, 0.5882], [0.2478, 0.4877]], [[0.7771, 0.3194], [0.4309, 0.9238], [0.5556, 0.1199]]], [[[0.4952, 0.8843], [0.3759, 0.7656], [0.4764, 0.8989]], [[0.7102, 0.5703], [0.5251, 0.0087], [0.2148, 0.1868]], [[0.3893, 0.2954], [0.6626, 0.1016], [0.5461, 0.1755]]], [[[0.9922, 0.5108], [0.9739, 0.0954], [0.226, 0.6965]], [[0.6869, 0.399], [0.974, 0.1179], [0.1897, 0.4332]], [[0.6001, 0.1746], [0.9509, 0.4088], [0.8985, 0.0049]]], [[[0.8461, 0.1387], [0.3075, 0.7425], [0.272, 0.5389]], [[0.2677, 0.3668], [0.2975, 0.6971], [0.3223, 0.6597]], [[0.7837, 0.3873], [0.9527, 0.805], [0.8778, 0.1436]]], [[[0.9444, 0.8534], [0.6668, 0.3889], [0.286, 0.6184]], [[0.0635, 0.6637], [0.2182, 0.5619], [0.1869, 0.6967]], [[0.0699, 0.884], [0.6024, 0.9165], [0.9476, 0.3417]]], [[[0.7864, 0.0165], [0.1732, 0.2843], [0.0968, 0.3539]], [[0.6082, 0.018], [0.3434, 0.2887], [0.6458, 0.8892]], [[0.7794, 0.0513], [0.706, 0.4111], [0.9622, 0.3618]]], [[[0.5234, 0.3482], [0.4705, 0.8229], [0.3859, 0.9217]], [[0.9058, 0.0533], [0.7504, 0.2009], [0.9536, 0.639]], [[0.3379, 0.3059], [0.5376, 0.2407], [0.8961, 0.2626]]], [[[0.2594, 0.6145], [0.3041, 0.2229], [0.3822, 0.8788]], [[0.59, 0.2917], [0.5953, 0.091], [0.7364, 0.3866]], [[0.6701, 0.0869], [0.8515, 0.3964], [0.909, 0.5777]]], [[[0.405, 0.4038], [0.9798, 0.7004], [0.7406, 0.8872]], [[0.3243, 0.575], [0.0102, 0.6307], [0.8399, 0.9322]], [[0.0048, 0.5329], [0.9378, 0.5471], [0.096, 0.6301]]], [[[0.4048, 0.037], [0.6487, 0.4266], [0.7144, 0.5646]], [[0.8184, 0.0601], [0.5669, 0.1247], [0.6006, 0.9189]], [[0.4702, 0.3867], [0.3685, 0.0786], [0.1197, 0.516]]], [[[0.9036, 0.3251], [0.1806, 0.0019], [0.0998, 0.5931]], [[0.8333, 0.2855], [0.1062, 0.3643], [0.1025, 0.8968]], [[0.6628, 0.9401], [0.5576, 0.8869], [0.7777, 0.536]]], [[[0.4483, 0.5736], [0.6965, 0.8237], [0.7144, 0.0039]], [[0.3251, 0.8928], [0.6005, 0.0839], [0.8765, 0.5984]], [[0.7937, 0.0229], [0.5371, 0.9147], [0.1046, 0.6003]]], [[[0.3731, 0.2251], [0.7156, 0.7704], [0.5298, 0.4434]], [[0.9293, 0.2943], [0.0175, 0.4848], [0.173, 0.4107]], [[0.0219, 0.8826], [0.7314, 0.0394], [0.729, 0.2802]]], [[[0.3165, 0.6483], [0.1135, 0.122], [0.1148, 0.711]], [[0.0022, 0.1087], [0.3964, 0.6287], [0.9952, 0.8919]], [[0.1205, 0.1003], [0.5064, 0.0373], [0.2232, 0.1836]]], [[[0.2627, 0.5047], [0.4375, 0.7134], [0.0974, 0.7635]], [[0.5626, 0.3135], [0.7628, 0.1918], [0.0711, 0.9742]], [[0.7921, 0.5915], [0.8255, 0.0532], [0.1476, 0.4914]]], [[[0.4586, 0.601], [0.5074, 0.4089], [0.6678, 0.1145]], [[0.561, 0.395], [0.2691, 0.1763], [0.6141, 0.9925]], [[0.3632, 0.9508], [0.1339, 0.21], [0.3773, 0.1794]]], [[[0.6054, 0.2287], [0.0619, 0.1373], [0.2153, 0.3445]], [[0.7481, 0.0013], [0.4329, 0.0774], [0.2984, 0.2124]], [[0.5124, 0.472], [0.2212, 0.7109], [0.3089, 0.3639]]], [[[0.3622, 0.3745], [0.5679, 0.7827], [0.4333, 0.593]], [[0.0269, 0.7296], [0.3946, 0.6783], [0.2492, 0.2784]], [[0.3676, 0.7269], [0.1007, 0.3227], [0.3238, 0.6257]]], [[[0.1748, 0.3192], [0.2664, 0.1257], [0.2728, 0.0639]], [[0.0037, 0.2951], [0.2552, 0.8763], [0.898, 0.2049]], [[0.1935, 0.565], [0.1672, 0.405], [0.7725, 0.2013]]], [[[0.4134, 0.6007], [0.3203, 0.0367], [0.0594, 0.9547]], [[0.6752, 0.8665], [0.2836, 0.6078], [0.3396, 0.7637]], [[0.8627, 0.3376], [0.0143, 0.3842], [0.0537, 0.7545]]], [[[0.661, 0.9824], [0.2777, 0.0723], [0.6959, 0.8622]], [[0.9035, 0.2871], [0.7846, 0.241], [0.8724, 0.5439]], [[0.9761, 0.4021], [0.252, 0.581], [0.5927, 0.5753]]], [[[0.0646, 0.4025], [0.3744, 0.1978], [0.8946, 0.7492]], [[0.8663, 0.0814], [0.8484, 0.5121], [0.9315, 0.5405]], [[0.4114, 0.9672], [0.5773, 0.7179], [0.6307, 0.5937]]], [[[0.9858, 0.1888], [0.8338, 0.2847], [0.7575, 0.4194]], [[0.7887, 0.9596], [0.8969, 0.8087], [0.8094, 0.9419]], [[0.994, 0.8537], [0.8132, 0.9805], [0.3897, 0.4428]]], [[[0.7518, 0.4617], [0.8537, 0.4038], [0.15, 0.1821]], [[0.4457, 0.2137], [0.715, 0.037], [0.7861, 0.2077]], [[0.104, 0.1148], [0.9176, 0.7207], [0.9794, 0.9813]]]]]], 4, Con7673), 
LCon91808 = conv3D_transpose_layer([[[[[0.5215, 0.1161]], [[0.9267, 0.5492]]], [[[0.3198, 0.2091]], [[0.0639, 0.6345]]]]], 1, 2, 1,[[[[[0.2025, 0.561], [0.2785, 0.0653], [0.6408, 0.2377]]], [[[0.513, 0.2268], [0.1308, 0.407], [0.2539, 0.3524]]]]],[0, 0, 0], 12, 1, 3, false, Con91808), 
LAdd69730 = add_layer([Con7673,Con91808], Add69730), 
LRes30383 = reshape_layer(Add69730, [24, 3, 9], Res30383), 
LRes15 = reshape_layer(Res30383, [24, 27], Res15), 
LSep80778 = separable_conv1D_layer(Res15, 4,[[[[0.0236], [0.6408], [0.9326], [0.5674], [0.7307], [0.8142], [0.8537], [0.9485], [0.5204], [0.1739], [0.4481], [0.0716], [0.6346], [0.6588], [0.3699], [0.9513], [0.9729], [0.2439], [0.7222], [0.7471], [0.1242], [0.8572], [0.1466], [0.6273], [0.6936], [0.2886], [0.2875]], [[0.4245], [0.2941], [0.4892], [0.7403], [0.2988], [0.7478], [0.3032], [0.2817], [0.4158], [0.4941], [0.8604], [0.6502], [0.4663], [0.9382], [0.5645], [0.3957], [0.708], [0.4889], [0.8606], [0.348], [0.0941], [0.3352], [0.7343], [0.071], [0.9665], [0.5858], [0.2046]], [[0.26], [0.7398], [0.2614], [0.909], [0.4179], [0.9785], [0.7665], [0.2445], [0.3031], [0.2799], [0.8925], [0.4317], [0.5792], [0.4132], [0.109], [0.2972], [0.8185], [0.2381], [0.8826], [0.5321], [0.5097], [0.0298], [0.0322], [0.6773], [0.0038], [0.9672], [0.6755]], [[0.1123], [0.3967], [0.7109], [0.1512], [0.8766], [0.1891], [0.1906], [0.4123], [0.2439], [0.1922], [0.9499], [0.7767], [0.5828], [0.5557], [0.6566], [0.5941], [0.1926], [0.9796], [0.6733], [0.344], [0.4773], [0.1454], [0.9097], [0.9112], [0.0379], [0.1495], [0.5242]]],[[[0.1209, 0.165, 0.7597, 0.6401], [0.3869, 0.0359, 0.493, 0.1169], [0.7942, 0.1305, 0.3414, 0.7497], [0.6991, 0.5648, 0.3924, 0.5422], [0.9265, 0.9281, 0.3561, 0.3498], [0.0987, 0.8382, 0.4569, 0.7495], [0.8943, 0.1025, 0.2944, 0.3078], [0.2552, 0.1566, 0.5099, 0.9436], [0.1374, 0.7621, 0.683, 0.0306], [0.2592, 0.7789, 0.2654, 0.8615], [0.447, 0.196, 0.5101, 0.1033], [0.5973, 0.5069, 0.2994, 0.9146], [0.9793, 0.942, 0.4866, 0.4673], [0.5892, 0.0357, 0.8763, 0.7157], [0.5309, 0.4984, 0.2424, 0.3915], [0.9482, 0.3863, 0.8519, 0.3692], [0.8618, 0.1201, 0.8049, 0.7384], [0.3747, 0.9882, 0.1268, 0.1534], [0.1002, 0.3905, 0.9578, 0.2822], [0.3433, 0.2261, 0.3718, 0.4741], [0.5141, 0.5106, 0.3266, 0.08], [0.4937, 0.5194, 0.999, 0.2175], [0.1857, 0.4975, 0.2903, 0.1518], [0.2846, 0.2498, 0.6005, 0.8828], [0.3737, 0.7325, 0.0657, 0.9722], [0.8225, 0.1027, 0.3275, 0.1223], [0.5977, 0.5508, 0.5619, 0.5286]]]],[0, 0, 0, 0], 11, false, Sep80778), 
LZer15948 = zero_padding1D_layer(Sep80778, 2, 0, Zer15948), 
LPer33941 = permute_layer([[[1.3721, 1.394, 1.0255, 1.535], [1.7094, 1.9771, 1.1734, 1.9079], [1.3057, 1.6387, 1.9452, 1.0585], [1.9056, 1.1427, 1.9446, 1.5298]]], 2,1, Per33941), 
LMin6424 = minimum_layer([Zer15948,Per33941], Min6424), 
exec_layers([LDot76485,LRes93650,LRes43431,LZer11129,LCon7673,LCon91808,LAdd69730,LRes30383,LRes15,LSep80778,LZer15948,LPer33941,LMin6424],["Dot76485","Res93650","Res43431","Zer11129","Con7673","Con91808","Add69730","Res30383","Res15","Sep80778","Zer15948","Per33941","Min6424"],Min6424,"Min6424")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [1.0255001, 1.1734000, 1.9452000, 1.9446000], [1.5350000, 1.9079000, 1.0585001, 1.5298001]]]

Expected (Unparsed): [[[0,0,0,0],[0,0,0,0],[1.0255,1.1734,1.9452,1.9446],[1.535,1.9079,1.0585,1.5298]]]

Actual:   [[[0, 0, 0, 0], [0, 0, 0, 0], [1.0256, 1.1734, 1.9452, 1.9446], [1.535, 1.9079, 1.0586, 1.5299]]]

Expected: [[[0, 0, 0, 0], [0, 0, 0, 0], [1.0255, 1.1734, 1.9452, 1.9446], [1.535, 1.9079, 1.0585, 1.5298]]]