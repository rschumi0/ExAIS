import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer31798 = tf.keras.layers.Input(shape=([4, 3, 1]))
in0Mul16282 = tf.keras.layers.Input(shape=([2, 2]))
in1Mul16282 = tf.keras.layers.Input(shape=([2, 2]))
in0Con21488 = tf.keras.layers.Input(shape=([6, 3]))
in0Con59415 = tf.keras.layers.Input(shape=([6, 5, 1, 1]))
in0Dot28033 = tf.keras.layers.Input(shape=([2]))
in1Dot28033 = tf.keras.layers.Input(shape=([2]))
in0Con39793 = tf.keras.layers.Input(shape=([6, 5, 1, 1]))
in0Min24415 = tf.keras.layers.Input(shape=([1, 2]))
in1Min24415 = tf.keras.layers.Input(shape=([1, 2]))

Zer31798 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer31798', )(in0Zer31798)
Res23065 = keras.layers.Reshape((6, 5), name = 'Res23065', )(Zer31798)
Mul16282 = keras.layers.Multiply(name = 'Mul16282', )([in0Mul16282,in1Mul16282])
Zer30233 = keras.layers.ZeroPadding1D(padding=((4, 0)), name = 'Zer30233', )(Mul16282)
Con21488 = keras.layers.Concatenate(axis=2, name = 'Con21488', )([Zer30233,in0Con21488])
Ave23389 = keras.layers.Average(name = 'Ave23389', )([Res23065,Con21488])
Res81225 = keras.layers.Reshape((6, 5, 1), name = 'Res81225', )(Ave23389)
Res50599 = keras.layers.Reshape((6, 5, 1, 1), name = 'Res50599', )(Res81225)
Con59415 = keras.layers.Concatenate(axis=4, name = 'Con59415', )([Res50599,in0Con59415])
Dot28033 = keras.layers.Dot(axes=(1, 1), name = 'Dot28033', )([in0Dot28033,in1Dot28033])
Res44263 = keras.layers.Reshape((1, 1), name = 'Res44263', )(Dot28033)
Res72571 = keras.layers.Reshape((1, 1, 1), name = 'Res72571', )(Res44263)
Res47535 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res47535', )(Res72571)
Con55079 = keras.layers.Conv3DTranspose(2, (1, 1, 1),strides=(1, 1, 1), padding='valid', name = 'Con55079', )(Res47535)
Zer76415 = keras.layers.ZeroPadding3D(padding=((5, 0), (4, 0), (0, 0)), name = 'Zer76415', )(Con55079)
Mul26613 = keras.layers.Multiply(name = 'Mul26613', )([Con59415,Zer76415])
Con39793 = keras.layers.Concatenate(axis=4, name = 'Con39793', )([Mul26613,in0Con39793])
Min24415 = keras.layers.Minimum(name = 'Min24415', )([in0Min24415,in1Min24415])
Res73844 = keras.layers.Reshape((1, 2, 1), name = 'Res73844', )(Min24415)
Res25426 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res25426', )(Res73844)
Con28767 = keras.layers.Conv3D(3, (1, 1, 1),strides=(1, 2, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con28767', )(Res25426)
Zer18533 = keras.layers.ZeroPadding3D(padding=((5, 0), (4, 0), (0, 0)), name = 'Zer18533', )(Con28767)
Max18180 = keras.layers.Maximum(name = 'Max18180', )([Con39793,Zer18533])
model = tf.keras.models.Model(inputs=[in0Zer31798,in0Mul16282,in1Mul16282,in0Con21488,in0Con59415,in0Dot28033,in1Dot28033,in0Con39793,in0Min24415,in1Min24415], outputs=Max18180)
w = model.get_layer('Con55079').get_weights() 
w[0] = np.array([[[[[0.7363], [0.6251]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con55079').set_weights(w) 
w = model.get_layer('Con28767').get_weights() 
w[0] = np.array([[[[[0.4691, 0.0624, 0.1989]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con28767').set_weights(w) 
in0Zer31798 = tf.constant([[[[1.8383], [1.1968], [1.6686]], [[1.9307], [1.6914], [1.3765]], [[1.1661], [1.7958], [1.9492]], [[1.0377], [1.3835], [1.0222]]]])
in0Mul16282 = tf.constant([[[0.196, 0.5404], [0.3913, 0.4393]]])
in1Mul16282 = tf.constant([[[0.3914, 0.0044], [0.9209, 0.4222]]])
in0Con21488 = tf.constant([[[0.0007, 0.1092, 0.1548], [0.2075, 0.7772, 0.8535], [0.1081, 0.6326, 0.366], [0.9279, 0.5473, 0.4242], [0.9837, 0.49, 0.3038], [0.7652, 0.0675, 0.2003]]])
in0Con59415 = tf.constant([[[[[0.3312]], [[0.2578]], [[0.1473]], [[0.0037]], [[0.7771]]], [[[0.9555]], [[0.9096]], [[0.5974]], [[0.3442]], [[0.2919]]], [[[0.2224]], [[0.7403]], [[0.2867]], [[0.4798]], [[0.8811]]], [[[0.7752]], [[0.5213]], [[0.2222]], [[0.5045]], [[0.9404]]], [[[0.9633]], [[0.1727]], [[0.5829]], [[0.121]], [[0.5404]]], [[[0.8794]], [[0.1003]], [[0.7205]], [[0.261]], [[0.8498]]]]])
in0Dot28033 = tf.constant([[0.9094, 0.9984]])
in1Dot28033 = tf.constant([[0.7671, 0.5747]])
in0Con39793 = tf.constant([[[[[0.3919]], [[0.2462]], [[0.6975]], [[0.7369]], [[0.281]]], [[[0.3477]], [[0.743]], [[0.1635]], [[0.4726]], [[0.3491]]], [[[0.1282]], [[0.4941]], [[0.4912]], [[0.4609]], [[0.5119]]], [[[0.9029]], [[0.657]], [[0.4961]], [[0.8943]], [[0.1506]]], [[[0.5939]], [[0.2613]], [[0.2613]], [[0.9712]], [[0.7877]]], [[[0.5908]], [[0.9385]], [[0.6937]], [[0.1979]], [[0.0319]]]]])
in0Min24415 = tf.constant([[[0.1106, 0.7715]]])
in1Min24415 = tf.constant([[[0.4427, 0.0654]]])
print (np.array2string(model.predict([in0Zer31798,in0Mul16282,in1Mul16282,in0Con21488,in0Con59415,in0Dot28033,in1Dot28033,in0Con39793,in0Min24415,in1Min24415],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max18180.png')

LZer31798 = zero_padding2D_layer([[[[1.8383], [1.1968], [1.6686]], [[1.9307], [1.6914], [1.3765]], [[1.1661], [1.7958], [1.9492]], [[1.0377], [1.3835], [1.0222]]]], 1, 1, 1, 1, Zer31798), 
LRes23065 = reshape_layer(Zer31798, [6, 5], Res23065), 
LMul16282 = multiply_layer([[[[0.196, 0.5404], [0.3913, 0.4393]]], [[[0.3914, 0.0044], [0.9209, 0.4222]]]], Mul16282), 
LZer30233 = zero_padding1D_layer(Mul16282, 4, 0, Zer30233), 
LCon21488 = concatenate_layer([Zer30233,[[[0.0007, 0.1092, 0.1548], [0.2075, 0.7772, 0.8535], [0.1081, 0.6326, 0.366], [0.9279, 0.5473, 0.4242], [0.9837, 0.49, 0.3038], [0.7652, 0.0675, 0.2003]]]], 2, Con21488), 
LAve23389 = average_layer([Res23065,Con21488], Ave23389), 
LRes81225 = reshape_layer(Ave23389, [6, 5, 1], Res81225), 
LRes50599 = reshape_layer(Res81225, [6, 5, 1, 1], Res50599), 
LCon59415 = concatenate_layer([Res50599,[[[[[0.3312]], [[0.2578]], [[0.1473]], [[0.0037]], [[0.7771]]], [[[0.9555]], [[0.9096]], [[0.5974]], [[0.3442]], [[0.2919]]], [[[0.2224]], [[0.7403]], [[0.2867]], [[0.4798]], [[0.8811]]], [[[0.7752]], [[0.5213]], [[0.2222]], [[0.5045]], [[0.9404]]], [[[0.9633]], [[0.1727]], [[0.5829]], [[0.121]], [[0.5404]]], [[[0.8794]], [[0.1003]], [[0.7205]], [[0.261]], [[0.8498]]]]]], 4, Con59415), 
LDot28033 = dot_layer([[0.9094, 0.9984]], [[0.7671, 0.5747]], 1, 1, Dot28033), 
LRes44263 = reshape_layer(Dot28033, [1, 1], Res44263), 
LRes72571 = reshape_layer(Res44263, [1, 1, 1], Res72571), 
LRes47535 = reshape_layer(Res72571, [1, 1, 1, 1], Res47535), 
LCon55079 = conv3D_transpose_layer(Res47535, 1, 1, 1,[[[[[0.7363], [0.6251]]]]],[0, 0], 1, 1, 1, false, Con55079), 
LZer76415 = zero_padding3D_layer(Con55079, 5, 0, 4, 0, 0, 0, Zer76415), 
LMul26613 = multiply_layer([Con59415,Zer76415], Mul26613), 
LCon39793 = concatenate_layer([Mul26613,[[[[[0.3919]], [[0.2462]], [[0.6975]], [[0.7369]], [[0.281]]], [[[0.3477]], [[0.743]], [[0.1635]], [[0.4726]], [[0.3491]]], [[[0.1282]], [[0.4941]], [[0.4912]], [[0.4609]], [[0.5119]]], [[[0.9029]], [[0.657]], [[0.4961]], [[0.8943]], [[0.1506]]], [[[0.5939]], [[0.2613]], [[0.2613]], [[0.9712]], [[0.7877]]], [[[0.5908]], [[0.9385]], [[0.6937]], [[0.1979]], [[0.0319]]]]]], 4, Con39793), 
LMin24415 = minimum_layer([[[[0.1106, 0.7715]]], [[[0.4427, 0.0654]]]], Min24415), 
LRes73844 = reshape_layer(Min24415, [1, 2, 1], Res73844), 
LRes25426 = reshape_layer(Res73844, [1, 2, 1, 1], Res25426), 
LCon28767 = conv3D_layer(Res25426, 1, 1, 1,[[[[[0.4691, 0.0624, 0.1989]]]]],[0, 0, 0], 1, 2, 1, false, 1, 1, 1, Con28767), 
LZer18533 = zero_padding3D_layer(Con28767, 5, 0, 4, 0, 0, 0, Zer18533), 
LMax18180 = maximum_layer([Con39793,Zer18533], Max18180), 
exec_layers([LZer31798,LRes23065,LMul16282,LZer30233,LCon21488,LAve23389,LRes81225,LRes50599,LCon59415,LDot28033,LRes44263,LRes72571,LRes47535,LCon55079,LZer76415,LMul26613,LCon39793,LMin24415,LRes73844,LRes25426,LCon28767,LZer18533,LMax18180],["Zer31798","Res23065","Mul16282","Zer30233","Con21488","Ave23389","Res81225","Res50599","Con59415","Dot28033","Res44263","Res72571","Res47535","Con55079","Zer76415","Mul26613","Con39793","Min24415","Res73844","Res25426","Con28767","Zer18533","Max18180"],Max18180,"Max18180")

Actual (Unparsed): [[[[[0.0000000, 0.0000000, 0.3919000]], [[0.0000000, 0.0000000, 0.2462000]], [[0.0000000, 0.0000000, 0.6975000]], [[0.0000000, 0.0000000, 0.7369000]], [[0.0000000, 0.0000000, 0.2810000]]], [[[0.0000000, 0.0000000, 0.3477000]], [[0.0000000, 0.0000000, 0.7430000]], [[0.0000000, 0.0000000, 0.1635000]], [[0.0000000, 0.0000000, 0.4726000]], [[0.0000000, 0.0000000, 0.3491000]]], [[[0.0000000, 0.0000000, 0.1282000]], [[0.0000000, 0.0000000, 0.4941000]], [[0.0000000, 0.0000000, 0.4912000]], [[0.0000000, 0.0000000, 0.4609000]], [[0.0000000, 0.0000000, 0.5119000]]], [[[0.0000000, 0.0000000, 0.9029000]], [[0.0000000, 0.0000000, 0.6570000]], [[0.0000000, 0.0000000, 0.4961000]], [[0.0000000, 0.0000000, 0.8943000]], [[0.0000000, 0.0000000, 0.1506000]]], [[[0.0000000, 0.0000000, 0.5939000]], [[0.0000000, 0.0000000, 0.2613000]], [[0.0000000, 0.0000000, 0.2613000]], [[0.0000000, 0.0000000, 0.9712000]], [[0.0000000, 0.0000000, 0.7877000]]], [[[0.0000000, 0.0000000, 0.5908000]], [[0.0000000, 0.0000000, 0.9385000]], [[0.0000000, 0.0000000, 0.6937000]], [[0.0000000, 0.0000000, 0.1979000]], [[0.0937522, 0.6753704, 0.0319000]]]]]

Expected (Unparsed): [[[[[0,0.0,0.3919]],[[0,0.0,0.2462]],[[0.0,0.0,0.6975]],[[0.0,0.0,0.7369]],[[0.0,0.0,0.281]]],[[[0,0.0,0.3477]],[[0.0,0.0,0.743]],[[0.0,0.0,0.1635]],[[0.0,0.0,0.4726]],[[0.0,0.0,0.3491]]],[[[0,0.0,0.1282]],[[0.0,0.0,0.4941]],[[0.0,0.0,0.4912]],[[0.0,0.0,0.4609]],[[0.0,0.0,0.5119]]],[[[0,0.0,0.9029]],[[0.0,0.0,0.657]],[[0.0,0.0,0.4961]],[[0.0,0.0,0.8943]],[[0.0,0.0,0.1506]]],[[[0.0,0.0,0.5939]],[[0.0,0.0,0.2613]],[[0.0,0.0,0.2613]],[[0.0,0.0,0.9712]],[[0.0,0.0,0.7877]]],[[[0.0,0.0,0.5908]],[[0.0,0.0,0.9385]],[[0.0,0.0,0.6937]],[[0.0,0.0,0.1979]],[[0.09375221692744289,0.6753703924485756,0.0319]]]]]

Actual:   [[[[[0, 0, 0.3919]], [[0, 0, 0.2462]], [[0, 0, 0.6975]], [[0, 0, 0.7369]], [[0, 0, 0.281]]], [[[0, 0, 0.3477]], [[0, 0, 0.743]], [[0, 0, 0.1635]], [[0, 0, 0.4726]], [[0, 0, 0.3491]]], [[[0, 0, 0.1282]], [[0, 0, 0.4941]], [[0, 0, 0.4912]], [[0, 0, 0.4609]], [[0, 0, 0.5119]]], [[[0, 0, 0.9029]], [[0, 0, 0.657]], [[0, 0, 0.4961]], [[0, 0, 0.8943]], [[0, 0, 0.1506]]], [[[0, 0, 0.5939]], [[0, 0, 0.2613]], [[0, 0, 0.2613]], [[0, 0, 0.9712]], [[0, 0, 0.7877]]], [[[0, 0, 0.5908]], [[0, 0, 0.9385]], [[0, 0, 0.6937]], [[0, 0, 0.1979]], [[0.0938, 0.6754, 0.0319]]]]]

Expected: [[[[[0, 0, 0.3919]], [[0, 0, 0.2462]], [[0, 0, 0.6975]], [[0, 0, 0.7369]], [[0, 0, 0.281]]], [[[0, 0, 0.3477]], [[0, 0, 0.743]], [[0, 0, 0.1635]], [[0, 0, 0.4726]], [[0, 0, 0.3491]]], [[[0, 0, 0.1282]], [[0, 0, 0.4941]], [[0, 0, 0.4912]], [[0, 0, 0.4609]], [[0, 0, 0.5119]]], [[[0, 0, 0.9029]], [[0, 0, 0.657]], [[0, 0, 0.4961]], [[0, 0, 0.8943]], [[0, 0, 0.1506]]], [[[0, 0, 0.5939]], [[0, 0, 0.2613]], [[0, 0, 0.2613]], [[0, 0, 0.9712]], [[0, 0, 0.7877]]], [[[0, 0, 0.5908]], [[0, 0, 0.9385]], [[0, 0, 0.6937]], [[0, 0, 0.1979]], [[0.0938, 0.6754, 0.0319]]]]]