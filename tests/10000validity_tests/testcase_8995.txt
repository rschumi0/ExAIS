import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sep22423 = tf.keras.layers.Input(shape=([2, 2]))
in0Con90824 = tf.keras.layers.Input(shape=([3, 5, 3, 2]))
in0Sub25611 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in1Sub25611 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in0Max65177 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in1Max65177 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in0Ave69083 = tf.keras.layers.Input(shape=([1, 2]))
in1Ave69083 = tf.keras.layers.Input(shape=([1, 2]))
in0Con81832 = tf.keras.layers.Input(shape=([3, 5, 8]))

Sep22423 = keras.layers.SeparableConv1D(4, (2),strides=(2), padding='same', name = 'Sep22423', )(in0Sep22423)
Res71398 = keras.layers.Reshape((1, 4, 1), name = 'Res71398', )(Sep22423)
Res73449 = keras.layers.Reshape((1, 4, 1, 1), name = 'Res73449', )(Res71398)
Zer19449 = keras.layers.ZeroPadding3D(padding=((2, 0), (1, 0), (2, 0)), name = 'Zer19449', )(Res73449)
Con90824 = keras.layers.Concatenate(axis=4, name = 'Con90824', )([Zer19449,in0Con90824])
Sub25611 = keras.layers.Subtract(name = 'Sub25611', )([in0Sub25611,in1Sub25611])
Zer31136 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (0, 0)), name = 'Zer31136', )(Sub25611)
Min51777 = keras.layers.Minimum(name = 'Min51777', )([Con90824,Zer31136])
Res71960 = keras.layers.Reshape((3, 5, 9), name = 'Res71960', )(Min51777)
Max65177 = keras.layers.Maximum(name = 'Max65177', )([in0Max65177,in1Max65177])
Res23948 = keras.layers.Reshape((2, 1, 1), name = 'Res23948', )(Max65177)
Ave69083 = keras.layers.Average(name = 'Ave69083', )([in0Ave69083,in1Ave69083])
Res7934 = keras.layers.Reshape((2, 1, 1), name = 'Res7934', )(Ave69083)
Ave21551 = keras.layers.Average(name = 'Ave21551', )([Res23948,Res7934])
Zer8786 = keras.layers.ZeroPadding2D(padding=((1, 0), (4, 0)), name = 'Zer8786', )(Ave21551)
Con81832 = keras.layers.Concatenate(axis=3, name = 'Con81832', )([Zer8786,in0Con81832])
Mul20842 = keras.layers.Multiply(name = 'Mul20842', )([Res71960,Con81832])
model = tf.keras.models.Model(inputs=[in0Sep22423,in0Con90824,in0Sub25611,in1Sub25611,in0Max65177,in1Max65177,in0Ave69083,in1Ave69083,in0Con81832], outputs=Mul20842)
w = model.get_layer('Sep22423').get_weights() 
w[0] = np.array([[[0.0534], [0.8522]], [[0.9028], [0.7279]]])
w[1] = np.array([[[0.3875, 0.052, 0.4522, 0.7406], [0.495, 0.4391, 0.6835, 0.2719]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep22423').set_weights(w) 
in0Sep22423 = tf.constant([[[0.9179, 0.0673], [0.1356, 0.9996]]])
in0Con90824 = tf.constant([[[[[0.0962, 0.4109], [0.5411, 0.9962], [0.4468, 0.7049]], [[0.3461, 0.7189], [0.3916, 0.1359], [0.1939, 0.5745]], [[0.1734, 0.6026], [0.195, 0.7287], [0.8657, 0.3843]], [[0.3165, 0.3312], [0.829, 0.7536], [0.5847, 0.062]], [[0.6575, 0.1807], [0.2067, 0.9691], [0.4795, 0.0001]]], [[[0.5521, 0.382], [0.8293, 0.7456], [0.8158, 0.1636]], [[0.958, 0.2298], [0.8388, 0.0713], [0.365, 0.8421]], [[0.0015, 0.5381], [0.5432, 0.4713], [0.3251, 0.7573]], [[0.4123, 0.9193], [0.9171, 0.5539], [0.681, 0.6657]], [[0.6792, 0.1627], [0.4301, 0.3705], [0.7589, 0.6963]]], [[[0.5338, 0.5521], [0.5714, 0.783], [0.1491, 0.4708]], [[0.3451, 0.5825], [0.394, 0.3617], [0.0484, 0.1455]], [[0.5084, 0.812], [0.2482, 0.8731], [0.2453, 0.2597]], [[0.9164, 0.6547], [0.9759, 0.2996], [0.4536, 0.1137]], [[0.0079, 0.7279], [0.2315, 0.2757], [0.9145, 0.0307]]]]])
in0Sub25611 = tf.constant([[[[[0.5622, 0.3921, 0.2082], [0.5773, 0.5744, 0.9773], [0.729, 0.5497, 0.6994]], [[0.6974, 0.2425, 0.5564], [0.3852, 0.412, 0.4973], [0.4233, 0.3946, 0.1598]], [[0.6343, 0.2749, 0.7379], [0.1561, 0.2679, 0.6219], [0.1475, 0.7788, 0.196]]], [[[0.4331, 0.8778, 0.9787], [0.7307, 0.2865, 0.8244], [0.7151, 0.0649, 0.1791]], [[0.8356, 0.082, 0.6634], [0.4737, 0.6113, 0.7644], [0.3985, 0.7634, 0.7716]], [[0.3466, 0.039, 0.1383], [0.5198, 0.7767, 0.7434], [0.4579, 0.8182, 0.9862]]], [[[0.4108, 0.7505, 0.1504], [0.2622, 0.0972, 0.7885], [0.7543, 0.4743, 0.2189]], [[0.2207, 0.6724, 0.6683], [0.9333, 0.3841, 0.0922], [0.8582, 0.9128, 0.0597]], [[0.2255, 0.0699, 0.7078], [0.9921, 0.4088, 0.8214], [0.0351, 0.9491, 0.202]]]]])
in1Sub25611 = tf.constant([[[[[0.2584, 0.6182, 0.4603], [0.0046, 0.1091, 0.6602], [0.1482, 0.1156, 0.4686]], [[0.6334, 0.737, 0.2215], [0.179, 0.8332, 0.4124], [0.0129, 0.2326, 0.0646]], [[0.19, 0.0013, 0.1922], [0.9022, 0.35, 0.6375], [0.0976, 0.1967, 0.7945]]], [[[0.5176, 0.7054, 0.8909], [0.3922, 0.8004, 0.1969], [0.7488, 0.9919, 0.9626]], [[0.6802, 0.3035, 0.8026], [0.6656, 0.9121, 0.1856], [0.2692, 0.8213, 0.67]], [[0.0077, 0.4019, 0.9085], [0.1142, 0.1462, 0.7601], [0.2142, 0.3003, 0.091]]], [[[0.9334, 0.9517, 0.723], [0.5123, 0.4188, 0.1422], [0.4039, 0.8325, 0.2452]], [[0.7384, 0.5719, 0.8844], [0.5674, 0.7138, 0.4255], [0.188, 0.7153, 0.747]], [[0.8178, 0.4849, 0.8671], [0.6876, 0.9576, 0.4296], [0.5941, 0.2075, 0.3821]]]]])
in0Max65177 = tf.constant([[[[[0.7594]]], [[[0.0144]]]]])
in1Max65177 = tf.constant([[[[[0.9132]]], [[[0.5232]]]]])
in0Ave69083 = tf.constant([[[0.8371, 0.192]]])
in1Ave69083 = tf.constant([[[0.7235, 0.1645]]])
in0Con81832 = tf.constant([[[[0.3627, 0.6838, 0.2269, 0.7112, 0.5799, 0.0583, 0.0827, 0.0285], [0.1368, 0.1433, 0.4714, 0.5983, 0.8783, 0.469, 0.2602, 0.8753], [0.1606, 0.0534, 0.7173, 0.5121, 0.5796, 0.8575, 0.1676, 0.1914], [0.8151, 0.194, 0.7775, 0.609, 0.9121, 0.1022, 0.5393, 0.6756], [0.7033, 0.505, 0.8017, 0.316, 0.4925, 0.0395, 0.4975, 0.342]], [[0.5654, 0.813, 0.557, 0.7493, 0.57, 0.9797, 0.8624, 0.4458], [0.3214, 0.9559, 0.5019, 0.8596, 0.1196, 0.2923, 0.0064, 0.0905], [0.2475, 0.7139, 0.7203, 0.2752, 0.9133, 0.597, 0.4464, 0.6128], [0.5373, 0.2072, 0.0314, 0.066, 0.9489, 0.3463, 0.6139, 0.094], [0.7542, 0.6709, 0.8429, 0.9015, 0.8637, 0.8326, 0.4948, 0.5949]], [[0.9273, 0.7668, 0.5632, 0.3245, 0.2141, 0.9072, 0.0806, 0.9622], [0.2961, 0.8428, 0.6388, 0.1144, 0.7478, 0.9453, 0.8214, 0.3035], [0.9559, 0.7996, 0.534, 0.9616, 0.0498, 0.8419, 0.5238, 0.4795], [0.9103, 0.4755, 0.2191, 0.9259, 0.189, 0.0747, 0.3833, 0.2103], [0.2828, 0.708, 0.9829, 0.403, 0.2456, 0.1185, 0.0937, 0.6433]]]])
print (np.array2string(model.predict([in0Sep22423,in0Con90824,in0Sub25611,in1Sub25611,in0Max65177,in1Max65177,in0Ave69083,in1Ave69083,in0Con81832],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul20842.png')

LSep22423 = separable_conv1D_layer([[[0.9179, 0.0673], [0.1356, 0.9996]]], 2,[[[[0.0534], [0.8522]], [[0.9028], [0.7279]]],[[[0.3875, 0.052, 0.4522, 0.7406], [0.495, 0.4391, 0.6835, 0.2719]]]],[0, 0, 0, 0], 2, true, Sep22423), 
LRes71398 = reshape_layer(Sep22423, [1, 4, 1], Res71398), 
LRes73449 = reshape_layer(Res71398, [1, 4, 1, 1], Res73449), 
LZer19449 = zero_padding3D_layer(Res73449, 2, 0, 1, 0, 2, 0, Zer19449), 
LCon90824 = concatenate_layer([Zer19449,[[[[[0.0962, 0.4109], [0.5411, 0.9962], [0.4468, 0.7049]], [[0.3461, 0.7189], [0.3916, 0.1359], [0.1939, 0.5745]], [[0.1734, 0.6026], [0.195, 0.7287], [0.8657, 0.3843]], [[0.3165, 0.3312], [0.829, 0.7536], [0.5847, 0.062]], [[0.6575, 0.1807], [0.2067, 0.9691], [0.4795, 0.0001]]], [[[0.5521, 0.382], [0.8293, 0.7456], [0.8158, 0.1636]], [[0.958, 0.2298], [0.8388, 0.0713], [0.365, 0.8421]], [[0.0015, 0.5381], [0.5432, 0.4713], [0.3251, 0.7573]], [[0.4123, 0.9193], [0.9171, 0.5539], [0.681, 0.6657]], [[0.6792, 0.1627], [0.4301, 0.3705], [0.7589, 0.6963]]], [[[0.5338, 0.5521], [0.5714, 0.783], [0.1491, 0.4708]], [[0.3451, 0.5825], [0.394, 0.3617], [0.0484, 0.1455]], [[0.5084, 0.812], [0.2482, 0.8731], [0.2453, 0.2597]], [[0.9164, 0.6547], [0.9759, 0.2996], [0.4536, 0.1137]], [[0.0079, 0.7279], [0.2315, 0.2757], [0.9145, 0.0307]]]]]], 4, Con90824), 
LSub25611 = subtract_layer([[[[[0.5622, 0.3921, 0.2082], [0.5773, 0.5744, 0.9773], [0.729, 0.5497, 0.6994]], [[0.6974, 0.2425, 0.5564], [0.3852, 0.412, 0.4973], [0.4233, 0.3946, 0.1598]], [[0.6343, 0.2749, 0.7379], [0.1561, 0.2679, 0.6219], [0.1475, 0.7788, 0.196]]], [[[0.4331, 0.8778, 0.9787], [0.7307, 0.2865, 0.8244], [0.7151, 0.0649, 0.1791]], [[0.8356, 0.082, 0.6634], [0.4737, 0.6113, 0.7644], [0.3985, 0.7634, 0.7716]], [[0.3466, 0.039, 0.1383], [0.5198, 0.7767, 0.7434], [0.4579, 0.8182, 0.9862]]], [[[0.4108, 0.7505, 0.1504], [0.2622, 0.0972, 0.7885], [0.7543, 0.4743, 0.2189]], [[0.2207, 0.6724, 0.6683], [0.9333, 0.3841, 0.0922], [0.8582, 0.9128, 0.0597]], [[0.2255, 0.0699, 0.7078], [0.9921, 0.4088, 0.8214], [0.0351, 0.9491, 0.202]]]]], [[[[[0.2584, 0.6182, 0.4603], [0.0046, 0.1091, 0.6602], [0.1482, 0.1156, 0.4686]], [[0.6334, 0.737, 0.2215], [0.179, 0.8332, 0.4124], [0.0129, 0.2326, 0.0646]], [[0.19, 0.0013, 0.1922], [0.9022, 0.35, 0.6375], [0.0976, 0.1967, 0.7945]]], [[[0.5176, 0.7054, 0.8909], [0.3922, 0.8004, 0.1969], [0.7488, 0.9919, 0.9626]], [[0.6802, 0.3035, 0.8026], [0.6656, 0.9121, 0.1856], [0.2692, 0.8213, 0.67]], [[0.0077, 0.4019, 0.9085], [0.1142, 0.1462, 0.7601], [0.2142, 0.3003, 0.091]]], [[[0.9334, 0.9517, 0.723], [0.5123, 0.4188, 0.1422], [0.4039, 0.8325, 0.2452]], [[0.7384, 0.5719, 0.8844], [0.5674, 0.7138, 0.4255], [0.188, 0.7153, 0.747]], [[0.8178, 0.4849, 0.8671], [0.6876, 0.9576, 0.4296], [0.5941, 0.2075, 0.3821]]]]], Sub25611), 
LZer31136 = zero_padding3D_layer(Sub25611, 0, 0, 2, 0, 0, 0, Zer31136), 
LMin51777 = minimum_layer([Con90824,Zer31136], Min51777), 
LRes71960 = reshape_layer(Min51777, [3, 5, 9], Res71960), 
LMax65177 = maximum_layer([[[[[[0.7594]]], [[[0.0144]]]]], [[[[[0.9132]]], [[[0.5232]]]]]], Max65177), 
LRes23948 = reshape_layer(Max65177, [2, 1, 1], Res23948), 
LAve69083 = average_layer([[[[0.8371, 0.192]]], [[[0.7235, 0.1645]]]], Ave69083), 
LRes7934 = reshape_layer(Ave69083, [2, 1, 1], Res7934), 
LAve21551 = average_layer([Res23948,Res7934], Ave21551), 
LZer8786 = zero_padding2D_layer(Ave21551, 1, 0, 4, 0, Zer8786), 
LCon81832 = concatenate_layer([Zer8786,[[[[0.3627, 0.6838, 0.2269, 0.7112, 0.5799, 0.0583, 0.0827, 0.0285], [0.1368, 0.1433, 0.4714, 0.5983, 0.8783, 0.469, 0.2602, 0.8753], [0.1606, 0.0534, 0.7173, 0.5121, 0.5796, 0.8575, 0.1676, 0.1914], [0.8151, 0.194, 0.7775, 0.609, 0.9121, 0.1022, 0.5393, 0.6756], [0.7033, 0.505, 0.8017, 0.316, 0.4925, 0.0395, 0.4975, 0.342]], [[0.5654, 0.813, 0.557, 0.7493, 0.57, 0.9797, 0.8624, 0.4458], [0.3214, 0.9559, 0.5019, 0.8596, 0.1196, 0.2923, 0.0064, 0.0905], [0.2475, 0.7139, 0.7203, 0.2752, 0.9133, 0.597, 0.4464, 0.6128], [0.5373, 0.2072, 0.0314, 0.066, 0.9489, 0.3463, 0.6139, 0.094], [0.7542, 0.6709, 0.8429, 0.9015, 0.8637, 0.8326, 0.4948, 0.5949]], [[0.9273, 0.7668, 0.5632, 0.3245, 0.2141, 0.9072, 0.0806, 0.9622], [0.2961, 0.8428, 0.6388, 0.1144, 0.7478, 0.9453, 0.8214, 0.3035], [0.9559, 0.7996, 0.534, 0.9616, 0.0498, 0.8419, 0.5238, 0.4795], [0.9103, 0.4755, 0.2191, 0.9259, 0.189, 0.0747, 0.3833, 0.2103], [0.2828, 0.708, 0.9829, 0.403, 0.2456, 0.1185, 0.0937, 0.6433]]]]], 3, Con81832), 
LMul20842 = multiply_layer([Res71960,Con81832], Mul20842), 
exec_layers([LSep22423,LRes71398,LRes73449,LZer19449,LCon90824,LSub25611,LZer31136,LMin51777,LRes71960,LMax65177,LRes23948,LAve69083,LRes7934,LAve21551,LZer8786,LCon81832,LMul20842],["Sep22423","Res71398","Res73449","Zer19449","Con90824","Sub25611","Zer31136","Min51777","Res71960","Max65177","Res23948","Ave69083","Res7934","Ave21551","Zer8786","Con81832","Mul20842"],Mul20842,"Mul20842")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, -0.0363117, -0.0134621, 0.0000000, 0.0998595, 0.1837911, 0.0000000, 0.0727552, 0.0441751], [0.0000000, -0.4030669, 0.0642528, 0.0000000, -0.2565108, 0.0774373, 0.0000000, 0.0873666, 0.0418872], [0.0000000, 0.1924229, 0.0912535, -0.5981483, -0.0259436, -0.0076830, 0.0000000, 0.2385512, -0.2046870]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, 0.0003713, 0.0626804, 0.0000000, -0.1414253, 0.4304383, -0.0201189, -0.4138128, -0.4801288], [0.0000000, -0.1190119, -0.0288422, -0.0060257, -0.0198528, 0.5255957, 0.0000000, -0.0355448, 0.0095504], [0.0000000, -0.2736992, -0.5167272, 0.0000000, 0.3877351, -0.0144238, 0.0000000, 0.2562569, 0.4142289]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [-0.0000000, -0.1923270, -0.4578510, -0.1335534, -0.3092506, 0.0321857, 0.2950018, -0.1876252, -0.0126108], [-0.0000000, 0.0914851, -0.1027556, 0.0000000, -0.3052692, -0.0629937, 0.0458691, 0.0757017, -0.1445392], [-0.2077344, -0.1173620, -0.1127844, 0.0000000, -0.2211664, 0.0677119, -0.0662415, 0.0694879, -0.1158583]]]]

Expected (Unparsed): [[[[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0,-0.036311659999999996,-0.013462140000000001,0.0,0.0998595,0.18379115999999995,0.0,0.07275516,0.04417512],[0,-0.40306695000000003,0.0642528,0.0,-0.25651080000000004,0.07743729000000003,0.0,0.0873666,0.0418872],[0,0.19242288,0.0912535,-0.59814837,-0.025943599999999983,-0.007682999999999974,0.0,0.23855125,-0.20468700000000004]],[[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[-0.0,0.00037125,0.06268041999999999,0.0,-0.14142528000000001,0.43043829,-0.020118900000000037,-0.41381280000000004,-0.48012879999999997],[0,-0.11901194999999999,-0.028842239999999998,-0.006025659999999998,-0.019852800000000004,0.5255957099999999,0.0,-0.03554481000000004,0.009550399999999992],[0.0,-0.27369918,-0.5167271800000001,0.0,0.38773515,-0.014423790000000042,0.0,0.25625692,0.41422887]],[[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[-0.0,-0.19232708000000004,-0.45785096,-0.1335534,-0.30925056,0.03218574,0.29500176,-0.18762516,-0.012610849999999995],[-0.0,0.09148515000000003,-0.10275554999999997,0.0,-0.30526923,-0.0629937,0.045869132354898604,0.07570174999999996,-0.14453918999999998],[-0.2077344175,-0.117362,-0.11278439999999999,0.0,-0.22116639999999999,0.06771192000000001,-0.0662415,0.06948792000000001,-0.11585832999999998]]]]

Actual:   [[[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -0.0363, -0.0134, 0, 0.0999, 0.1838, 0, 0.0728, 0.0442], [0, -0.403, 0.0643, 0, -0.2565, 0.0775, 0, 0.0874, 0.0419], [0, 0.1925, 0.0913, -0.5981, -0.0259, -0.0076, 0, 0.2386, -0.2046]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [-0, 0.0004, 0.0627, 0, -0.1414, 0.4305, -0.0201, -0.4138, -0.4801], [0, -0.119, -0.0288, -0.006, -0.0198, 0.5256, 0, -0.0355, 0.0096], [0, -0.2736, -0.5167, 0, 0.3878, -0.0144, 0, 0.2563, 0.4143]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [-0, -0.1923, -0.4578, -0.1335, -0.3092, 0.0322, 0.2951, -0.1876, -0.0126], [-0, 0.0915, -0.1027, 0, -0.3052, -0.0629, 0.0459, 0.0758, -0.1445], [-0.2077, -0.1173, -0.1127, 0, -0.2211, 0.0678, -0.0662, 0.0695, -0.1158]]]]

Expected: [[[[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -0.0363, -0.0134, 0, 0.0999, 0.1838, 0, 0.0728, 0.0442], [0, -0.403, 0.0643, 0, -0.2565, 0.0775, 0, 0.0874, 0.0419], [0, 0.1925, 0.0913, -0.5981, -0.0259, -0.0076, 0, 0.2386, -0.2046]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [-0, 0.0004, 0.0627, 0, -0.1414, 0.4305, -0.0201, -0.4138, -0.4801], [0, -0.119, -0.0288, -0.006, -0.0198, 0.5256, 0, -0.0355, 0.0096], [0, -0.2736, -0.5167, 0, 0.3878, -0.0144, 0, 0.2563, 0.4143]], [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [-0, -0.1923, -0.4578, -0.1335, -0.3092, 0.0322, 0.2951, -0.1876, -0.0126], [-0, 0.0915, -0.1027, 0, -0.3052, -0.0629, 0.0459, 0.0758, -0.1445], [-0.2077, -0.1173, -0.1127, 0, -0.2211, 0.0678, -0.0662, 0.0695, -0.1158]]]]