import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max55502 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Max55502 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Sub8187 = tf.keras.layers.Input(shape=([3, 3, 2]))
in1Sub8187 = tf.keras.layers.Input(shape=([3, 3, 2]))
in0Con29223 = tf.keras.layers.Input(shape=([5]))
in0Con36142 = tf.keras.layers.Input(shape=([8, 1, 1]))
in0Max11384 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Con40503 = tf.keras.layers.Input(shape=([8, 3, 2, 1]))
in0Sub31204 = tf.keras.layers.Input(shape=([3, 2, 2, 2]))
in1Sub31204 = tf.keras.layers.Input(shape=([3, 2, 2, 2]))

Max55502 = keras.layers.Maximum(name = 'Max55502', )([in0Max55502,in1Max55502])
Res7937 = keras.layers.Reshape((2, 4), name = 'Res7937', )(Max55502)
Fla83436 = keras.layers.Flatten(name = 'Fla83436', )(Res7937)
Sub8187 = keras.layers.Subtract(name = 'Sub8187', )([in0Sub8187,in1Sub8187])
Res5684 = keras.layers.Reshape((3, 6), name = 'Res5684', )(Sub8187)
Sim17399 = keras.layers.SimpleRNN(3,name = 'Sim17399', )(Res5684)
Con29223 = keras.layers.Concatenate(axis=1, name = 'Con29223', )([Sim17399,in0Con29223])
Ave73015 = keras.layers.Average(name = 'Ave73015', )([Fla83436,Con29223])
Res12382 = keras.layers.Reshape((8, 1), name = 'Res12382', )(Ave73015)
Res89491 = keras.layers.Reshape((8, 1, 1), name = 'Res89491', )(Res12382)
Con36142 = keras.layers.Concatenate(axis=3, name = 'Con36142', )([Res89491,in0Con36142])
Max11384 = keras.layers.MaxPool2D(pool_size=(1, 1), strides=(7, 7), padding='valid', name = 'Max11384', )(in0Max11384)
Zer43769 = keras.layers.ZeroPadding2D(padding=((7, 0), (0, 0)), name = 'Zer43769', )(Max11384)
Sub31220 = keras.layers.Subtract(name = 'Sub31220', )([Con36142,Zer43769])
Res11791 = keras.layers.Reshape((8, 1, 2, 1), name = 'Res11791', )(Sub31220)
Zer3038 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (0, 0)), name = 'Zer3038', )(Res11791)
Con40503 = keras.layers.Concatenate(axis=4, name = 'Con40503', )([Zer3038,in0Con40503])
Sub31204 = keras.layers.Subtract(name = 'Sub31204', )([in0Sub31204,in1Sub31204])
Zer38010 = keras.layers.ZeroPadding3D(padding=((5, 0), (1, 0), (0, 0)), name = 'Zer38010', )(Sub31204)
Max49528 = keras.layers.Maximum(name = 'Max49528', )([Con40503,Zer38010])
model = tf.keras.models.Model(inputs=[in0Max55502,in1Max55502,in0Sub8187,in1Sub8187,in0Con29223,in0Con36142,in0Max11384,in0Con40503,in0Sub31204,in1Sub31204], outputs=Max49528)
w = model.get_layer('Sim17399').get_weights() 
w[0] = np.array([[6, 3, 2], [9, 6, 1], [3, 3, 5], [5, 5, 1], [1, 7, 1], [7, 6, 2]])
w[1] = np.array([[9, 7, 8], [4, 10, 8], [8, 5, 2]])
w[2] = np.array([10, 6, 9])
model.get_layer('Sim17399').set_weights(w) 
in0Max55502 = tf.constant([[[[0.5122, 0.663], [0.4494, 0.5297]], [[0.1157, 0.2776], [0.2803, 0.3488]]]])
in1Max55502 = tf.constant([[[[0.8157, 0.7515], [0.9179, 0.7413]], [[0.2312, 0.0798], [0.1013, 0.3188]]]])
in0Sub8187 = tf.constant([[[[0.4428, 0.0914], [0.0684, 0.0695], [0.6196, 0.7964]], [[0.1737, 0.2867], [0.0251, 0.1019], [0.3007, 0.6144]], [[0.8512, 0.6418], [0.0342, 0.3927], [0.4897, 0.2913]]]])
in1Sub8187 = tf.constant([[[[0.1083, 0.3354], [0.0507, 0.0484], [0.738, 0.1929]], [[0.1635, 0.3569], [0.0562, 0.4638], [0.3542, 0.6174]], [[0.0305, 0.408], [0.5845, 0.5879], [0.9127, 0.5796]]]])
in0Con29223 = tf.constant([[0.459, 0.2546, 0.2848, 0.4538, 0.663]])
in0Con36142 = tf.constant([[[[0.2757]], [[0.254]], [[0.9336]], [[0.3776]], [[0.7639]], [[0.3739]], [[0.1085]], [[0.8491]]]])
in0Max11384 = tf.constant([[[[1.8579, 1.6095]], [[1.4875, 1.8539]]]])
in0Con40503 = tf.constant([[[[[0.9671], [0.228]], [[0.767], [0.8677]], [[0.2385], [0.8713]]], [[[0.9384], [0.0562]], [[0.9931], [0.4181]], [[0.7311], [0.6762]]], [[[0.671], [0.6809]], [[0.0439], [0.0729]], [[0.4956], [0.3462]]], [[[0.4314], [0.129]], [[0.0523], [0.2893]], [[0.1445], [0.5673]]], [[[0.3241], [0.1059]], [[0.6593], [0.1904]], [[0.3502], [0.0265]]], [[[0.6986], [0.7068]], [[0.6748], [0.978]], [[0.5205], [0.7846]]], [[[0.5362], [0.194]], [[0.2952], [0.4988]], [[0.3079], [0.4368]]], [[[0.7198], [0.3942]], [[0.0505], [0.595]], [[0.6315], [0.9722]]]]])
in0Sub31204 = tf.constant([[[[[0.151, 0.11], [0.1278, 0.4516]], [[0.3126, 0.6378], [0.9419, 0.7779]]], [[[0.9874, 0.7534], [0.0993, 0.9885]], [[0.0677, 0.4713], [0.7625, 0.0726]]], [[[0.6549, 0.5822], [0.9179, 0.8963]], [[0.0188, 0.1108], [0.8002, 0.0914]]]]])
in1Sub31204 = tf.constant([[[[[0.5869, 0.3687], [0.5327, 0.8937]], [[0.5624, 0.5453], [0.0709, 0.0356]]], [[[0.3768, 0.5482], [0.5285, 0.5789]], [[0.8123, 0.8515], [0.488, 0.1394]]], [[[0.2984, 0.4397], [0.9569, 0.2986]], [[0.5805, 0.5448], [0.2139, 0.122]]]]])
print (np.array2string(model.predict([in0Max55502,in1Max55502,in0Sub8187,in1Sub8187,in0Con29223,in0Con36142,in0Max11384,in0Con40503,in0Sub31204,in1Sub31204],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max49528.png')

LMax55502 = maximum_layer([[[[[0.5122, 0.663], [0.4494, 0.5297]], [[0.1157, 0.2776], [0.2803, 0.3488]]]], [[[[0.8157, 0.7515], [0.9179, 0.7413]], [[0.2312, 0.0798], [0.1013, 0.3188]]]]], Max55502), 
LRes7937 = reshape_layer(Max55502, [2, 4], Res7937), 
LFla83436 = flatten_layer(Res7937, Fla83436), 
LSub8187 = subtract_layer([[[[0.4428, 0.0914], [0.0684, 0.0695], [0.6196, 0.7964]], [[0.1737, 0.2867], [0.0251, 0.1019], [0.3007, 0.6144]], [[0.8512, 0.6418], [0.0342, 0.3927], [0.4897, 0.2913]]]], [[[[0.1083, 0.3354], [0.0507, 0.0484], [0.738, 0.1929]], [[0.1635, 0.3569], [0.0562, 0.4638], [0.3542, 0.6174]], [[0.0305, 0.408], [0.5845, 0.5879], [0.9127, 0.5796]]]], Sub8187), 
LRes5684 = reshape_layer(Sub8187, [3, 6], Res5684), 
LSim17399 = simple_rnn_layer(Res5684,[[6, 3, 2], [9, 6, 1], [3, 3, 5], [5, 5, 1], [1, 7, 1], [7, 6, 2]],[[9, 7, 8], [4, 10, 8], [8, 5, 2]],[10, 6, 9], Sim17399), 
LCon29223 = concatenate_layer([Sim17399,[[0.459, 0.2546, 0.2848, 0.4538, 0.663]]], 1, Con29223), 
LAve73015 = average_layer([Fla83436,Con29223], Ave73015), 
LRes12382 = reshape_layer(Ave73015, [8, 1], Res12382), 
LRes89491 = reshape_layer(Res12382, [8, 1, 1], Res89491), 
LCon36142 = concatenate_layer([Res89491,[[[[0.2757]], [[0.254]], [[0.9336]], [[0.3776]], [[0.7639]], [[0.3739]], [[0.1085]], [[0.8491]]]]], 3, Con36142), 
LMax11384 = max_pool2D_layer([[[[1.8579, 1.6095]], [[1.4875, 1.8539]]]], 1, 1, 7, 7, false, Max11384), 
LZer43769 = zero_padding2D_layer(Max11384, 7, 0, 0, 0, Zer43769), 
LSub31220 = subtract_layer(Con36142,Zer43769, Sub31220), 
LRes11791 = reshape_layer(Sub31220, [8, 1, 2, 1], Res11791), 
LZer3038 = zero_padding3D_layer(Res11791, 0, 0, 2, 0, 0, 0, Zer3038), 
LCon40503 = concatenate_layer([Zer3038,[[[[[0.9671], [0.228]], [[0.767], [0.8677]], [[0.2385], [0.8713]]], [[[0.9384], [0.0562]], [[0.9931], [0.4181]], [[0.7311], [0.6762]]], [[[0.671], [0.6809]], [[0.0439], [0.0729]], [[0.4956], [0.3462]]], [[[0.4314], [0.129]], [[0.0523], [0.2893]], [[0.1445], [0.5673]]], [[[0.3241], [0.1059]], [[0.6593], [0.1904]], [[0.3502], [0.0265]]], [[[0.6986], [0.7068]], [[0.6748], [0.978]], [[0.5205], [0.7846]]], [[[0.5362], [0.194]], [[0.2952], [0.4988]], [[0.3079], [0.4368]]], [[[0.7198], [0.3942]], [[0.0505], [0.595]], [[0.6315], [0.9722]]]]]], 4, Con40503), 
LSub31204 = subtract_layer([[[[[0.151, 0.11], [0.1278, 0.4516]], [[0.3126, 0.6378], [0.9419, 0.7779]]], [[[0.9874, 0.7534], [0.0993, 0.9885]], [[0.0677, 0.4713], [0.7625, 0.0726]]], [[[0.6549, 0.5822], [0.9179, 0.8963]], [[0.0188, 0.1108], [0.8002, 0.0914]]]]], [[[[[0.5869, 0.3687], [0.5327, 0.8937]], [[0.5624, 0.5453], [0.0709, 0.0356]]], [[[0.3768, 0.5482], [0.5285, 0.5789]], [[0.8123, 0.8515], [0.488, 0.1394]]], [[[0.2984, 0.4397], [0.9569, 0.2986]], [[0.5805, 0.5448], [0.2139, 0.122]]]]], Sub31204), 
LZer38010 = zero_padding3D_layer(Sub31204, 5, 0, 1, 0, 0, 0, Zer38010), 
LMax49528 = maximum_layer([Con40503,Zer38010], Max49528), 
exec_layers([LMax55502,LRes7937,LFla83436,LSub8187,LRes5684,LSim17399,LCon29223,LAve73015,LRes12382,LRes89491,LCon36142,LMax11384,LZer43769,LSub31220,LRes11791,LZer3038,LCon40503,LSub31204,LZer38010,LMax49528],["Max55502","Res7937","Fla83436","Sub8187","Res5684","Sim17399","Con29223","Ave73015","Res12382","Res89491","Con36142","Max11384","Zer43769","Sub31220","Res11791","Zer3038","Con40503","Sub31204","Zer38010","Max49528"],Max49528,"Max49528")

Actual (Unparsed): [[[[[0.0000000, 0.9671000], [0.0000000, 0.2280000]], [[0.0000000, 0.7670000], [0.0000000, 0.8677000]], [[0.9078500, 0.2385000], [0.2757000, 0.8713000]]], [[[0.0000000, 0.9384000], [0.0000000, 0.0562000]], [[0.0000000, 0.9931000], [0.0000000, 0.4181000]], [[0.8757500, 0.7311000], [0.2540000, 0.6762000]]], [[[0.0000000, 0.6710000], [0.0000000, 0.6809000]], [[0.0000000, 0.0439000], [0.0000000, 0.0729000]], [[0.9589500, 0.4956000], [0.9336000, 0.3462000]]], [[[0.0000000, 0.4314000], [0.0000000, 0.1290000]], [[0.0000000, 0.0523000], [0.0000000, 0.2893000]], [[0.6001500, 0.1445000], [0.3776000, 0.5673000]]], [[[0.0000000, 0.3241000], [0.0000000, 0.1059000]], [[0.0000000, 0.6593000], [0.0000000, 0.1904000]], [[0.2429000, 0.3502000], [0.7639000, 0.0265000]]], [[[0.0000000, 0.6986000], [0.0000000, 0.7068000]], [[0.0000000, 0.6748000], [0.0000000, 0.9780000]], [[0.2812000, 0.5205000], [0.8710000, 0.7846000]]], [[[0.0000000, 0.5362000], [0.0000000, 0.1940000]], [[0.6106000, 0.2952000], [0.0000000, 0.4988000]], [[0.3670500, 0.3079000], [0.2745000, 0.4368000]]], [[[0.0000000, 0.7198000], [0.0000000, 0.3942000]], [[0.3565000, 0.1425000], [0.0000000, 0.5977000]], [[-0.5617000, 0.6315000], [0.5863000, 0.9722000]]]]]

Expected (Unparsed): [[[[[0,0.9671],[0,0.228]],[[0,0.767],[0,0.8677]],[[0.90785,0.2385],[0.2757,0.8713]]],[[[0,0.9384],[0,0.0562]],[[0,0.9931],[0,0.4181]],[[0.87575,0.7311],[0.254,0.6762]]],[[[0,0.671],[0,0.6809]],[[0,0.0439],[0,0.0729]],[[0.95895,0.4956],[0.9336,0.3462]]],[[[0,0.4314],[0,0.129]],[[0,0.0523],[0,0.2893]],[[0.60015,0.1445],[0.3776,0.5673]]],[[[0,0.3241],[0,0.1059]],[[0,0.6593],[0,0.1904]],[[0.2429,0.3502],[0.7639,0.0265]]],[[[0,0.6986],[0,0.7068]],[[0,0.6748],[0,0.978]],[[0.2812,0.5205],[0.871,0.7846]]],[[[0,0.5362],[0,0.194]],[[0.6106,0.2952],[0,0.4988]],[[0.36705,0.3079],[0.27449999999999997,0.4368]]],[[[0,0.7198],[0,0.3942]],[[0.35650000000000004,0.14250000000000007],[0,0.5977]],[[-0.5617,0.6315],[0.5863,0.9722]]]]]

Actual:   [[[[[0, 0.9671], [0, 0.228]], [[0, 0.767], [0, 0.8677]], [[0.9079, 0.2385], [0.2757, 0.8713]]], [[[0, 0.9384], [0, 0.0562]], [[0, 0.9931], [0, 0.4181]], [[0.8758, 0.7311], [0.254, 0.6762]]], [[[0, 0.671], [0, 0.6809]], [[0, 0.0439], [0, 0.0729]], [[0.959, 0.4956], [0.9336, 0.3462]]], [[[0, 0.4314], [0, 0.129]], [[0, 0.0523], [0, 0.2893]], [[0.6002, 0.1445], [0.3776, 0.5673]]], [[[0, 0.3241], [0, 0.1059]], [[0, 0.6593], [0, 0.1904]], [[0.2429, 0.3502], [0.7639, 0.0265]]], [[[0, 0.6986], [0, 0.7068]], [[0, 0.6748], [0, 0.978]], [[0.2812, 0.5205], [0.871, 0.7846]]], [[[0, 0.5362], [0, 0.194]], [[0.6106, 0.2952], [0, 0.4988]], [[0.3671, 0.3079], [0.2745, 0.4368]]], [[[0, 0.7198], [0, 0.3942]], [[0.3565, 0.1425], [0, 0.5977]], [[-0.5617, 0.6315], [0.5863, 0.9722]]]]]

Expected: [[[[[0, 0.9671], [0, 0.228]], [[0, 0.767], [0, 0.8677]], [[0.9079, 0.2385], [0.2757, 0.8713]]], [[[0, 0.9384], [0, 0.0562]], [[0, 0.9931], [0, 0.4181]], [[0.8758, 0.7311], [0.254, 0.6762]]], [[[0, 0.671], [0, 0.6809]], [[0, 0.0439], [0, 0.0729]], [[0.959, 0.4956], [0.9336, 0.3462]]], [[[0, 0.4314], [0, 0.129]], [[0, 0.0523], [0, 0.2893]], [[0.6002, 0.1445], [0.3776, 0.5673]]], [[[0, 0.3241], [0, 0.1059]], [[0, 0.6593], [0, 0.1904]], [[0.2429, 0.3502], [0.7639, 0.0265]]], [[[0, 0.6986], [0, 0.7068]], [[0, 0.6748], [0, 0.978]], [[0.2812, 0.5205], [0.871, 0.7846]]], [[[0, 0.5362], [0, 0.194]], [[0.6106, 0.2952], [0, 0.4988]], [[0.3671, 0.3079], [0.2745, 0.4368]]], [[[0, 0.7198], [0, 0.3942]], [[0.3566, 0.1426], [0, 0.5977]], [[-0.5617, 0.6315], [0.5863, 0.9722]]]]]