import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave62259 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in1Ave62259 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Con80396 = tf.keras.layers.Input(shape=([1, 2]))
in0Den96266 = tf.keras.layers.Input(shape=([5, 4, 5]))

Ave62259 = keras.layers.Average(name = 'Ave62259', )([in0Ave62259,in1Ave62259])
Res9292 = keras.layers.Reshape((1, 2, 1), name = 'Res9292', )(Ave62259)
Res62660 = keras.layers.Reshape((1, 2), name = 'Res62660', )(Res9292)
Sim91006 = keras.layers.SimpleRNN(1,name = 'Sim91006', )(Res62660)
Res28836 = keras.layers.Reshape((1, 1), name = 'Res28836', )(Sim91006)
Res64235 = keras.layers.Reshape((1, 1, 1), name = 'Res64235', )(Res28836)
Cro44603 = keras.layers.Cropping2D(cropping=((0, 0), (0, 0)), name = 'Cro44603', )(Res64235)
Res67231 = keras.layers.Reshape((1, 1), name = 'Res67231', )(Cro44603)
Con80396 = keras.layers.Concatenate(axis=2, name = 'Con80396', )([Res67231,in0Con80396])
Den96266 = keras.layers.Dense(3,name = 'Den96266', )(in0Den96266)
Res87900 = keras.layers.Reshape((5, 12), name = 'Res87900', )(Den96266)
Con38861 = keras.layers.Conv1D(3, (3),strides=(1), padding='same', dilation_rate=(1), name = 'Con38861', )(Res87900)
Zer74733 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer74733', )(Con38861)
Dot82166 = keras.layers.Dot(axes=(2, 2), name = 'Dot82166', )([Con80396,Zer74733])
Bat426 = keras.layers.BatchNormalization(axis=2, epsilon=0.4562033285746847,  name = 'Bat426', )(Dot82166)
model = tf.keras.models.Model(inputs=[in0Ave62259,in1Ave62259,in0Con80396,in0Den96266], outputs=Bat426)
w = model.get_layer('Sim91006').get_weights() 
w[0] = np.array([[10], [7]])
w[1] = np.array([[2]])
w[2] = np.array([7])
model.get_layer('Sim91006').set_weights(w) 
w = model.get_layer('Den96266').get_weights() 
w[0] = np.array([[0.2736, 0.2698, 0.434], [0.982, 0.3359, 0.6842], [0.3356, 0.2784, 0.4421], [0.8112, 0.2465, 0.8482], [0.7717, 0.5893, 0.1523]])
w[1] = np.array([0.8651, 0.5717, 0.552])
model.get_layer('Den96266').set_weights(w) 
w = model.get_layer('Con38861').get_weights() 
w[0] = np.array([[[0.6443, 0.7788, 0.7013], [0.2073, 0.906, 0.8855], [0.7517, 0.8586, 0.1487], [0.1748, 0.806, 0.6868], [0.5748, 0.4385, 0.3708], [0.168, 0.7376, 0.4459], [0.15, 0.2142, 0.7262], [0.3262, 0.3814, 0.3188], [0.3431, 0.4249, 0.8936], [0.5067, 0.7256, 0.5377], [0.204, 0.7569, 0.4217], [0.0846, 0.3074, 0.6186]], [[0.2812, 0.4866, 0.4175], [0.3293, 0.643, 0.7332], [0.8112, 0.8622, 0.2104], [0.8889, 0.1024, 0.978], [0.6952, 0.0752, 0.7239], [0.54, 0.7767, 0.2886], [0.1312, 0.0587, 0.1791], [0.2648, 0.26, 0.6798], [0.6967, 0.4846, 0.0663], [0.6015, 0.8142, 0.3326], [0.5565, 0.2127, 0.163], [0.364, 0.5761, 0.0807]], [[0.4283, 0.6143, 0.7674], [0.2874, 0.4822, 0.8952], [0.5281, 0.508, 0.4547], [0.0587, 0.5088, 0.6609], [0.1739, 0.2843, 0.1705], [0.9183, 0.9088, 0.546], [0.1917, 0.3573, 0.63], [0.5493, 0.0617, 0.5622], [0.0663, 0.594, 0.0256], [0.0357, 0.6812, 0.0153], [0.6579, 0.3727, 0.3174], [0.0813, 0.7307, 0.7601]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con38861').set_weights(w) 
w = model.get_layer('Bat426').get_weights() 
w[0] = np.array([0.0505, 0.9561, 0.5765, 0.854, 0.9063, 0.1806, 0.3547])
w[1] = np.array([0.7646, 0.5046, 0.3862, 0.2556, 0.4201, 0.5096, 0.1673])
w[2] = np.array([0.7765, 0.6802, 0.2945, 0.3796, 0.0497, 0.1544, 0.7379])
w[3] = np.array([0.3492, 0.7768, 0.2886, 0.8927, 0.9845, 0.1232, 0.9016])
model.get_layer('Bat426').set_weights(w) 
in0Ave62259 = tf.constant([[[[[0.0954]], [[0.9456]]]]])
in1Ave62259 = tf.constant([[[[[0.1695]], [[0.7121]]]]])
in0Con80396 = tf.constant([[[0.8385, 0.3707]]])
in0Den96266 = tf.constant([[[[0.0964, 0.6487, 0.4586, 0.6237, 0.4744], [0.8732, 0.6509, 0.2917, 0.1272, 0.806], [0.9847, 0.1109, 0.8097, 0.8196, 0.4889], [0.5297, 0.8055, 0.5181, 0.968, 0.4012]], [[0.9693, 0.5011, 0.2624, 0.2736, 0.9093], [0.6309, 0.2579, 0.5347, 0.6209, 0.7948], [0.0518, 0.5453, 0.4548, 0.6351, 0.1405], [0.8984, 0.9038, 0.4916, 0.4906, 0.7216]], [[0.327, 0.8445, 0.8776, 0.5047, 0.3955], [0.8771, 0.9329, 0.2793, 0.739, 0.3885], [0.926, 0.1019, 0.0016, 0.1756, 0.4284], [0.7012, 0.2723, 0.1794, 0.653, 0.8373]], [[0.6475, 0.143, 0.4458, 0.3902, 0.5027], [0.2644, 0.6159, 0.4475, 0.9026, 0.3436], [0.5362, 0.691, 0.4663, 0.2227, 0.7193], [0.1978, 0.913, 0.8946, 0.378, 0.3651]], [[0.4675, 0.5177, 0.8205, 0.0428, 0.2743], [0.716, 0.8944, 0.1182, 0.9856, 0.9645], [0.5951, 0.7318, 0.7222, 0.5683, 0.3853], [0.0267, 0.6817, 0.7228, 0.7322, 0.8314]]]])
print (np.array2string(model.predict([in0Ave62259,in1Ave62259,in0Con80396,in0Den96266],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Bat426.png')

LAve62259 = average_layer([[[[[[0.0954]], [[0.9456]]]]], [[[[[0.1695]], [[0.7121]]]]]], Ave62259), 
LRes9292 = reshape_layer(Ave62259, [1, 2, 1], Res9292), 
LRes62660 = reshape_layer(Res9292, [1, 2], Res62660), 
LSim91006 = simple_rnn_layer(Res62660,[[10], [7]],[[2]],[7], Sim91006), 
LRes28836 = reshape_layer(Sim91006, [1, 1], Res28836), 
LRes64235 = reshape_layer(Res28836, [1, 1, 1], Res64235), 
LCro44603 = cropping2D_layer(Res64235, 0, 0, 0, 0, Cro44603), 
LRes67231 = reshape_layer(Cro44603, [1, 1], Res67231), 
LCon80396 = concatenate_layer([Res67231,[[[0.8385, 0.3707]]]], 2, Con80396), 
LDen96266 = dense_layer([[[[0.0964, 0.6487, 0.4586, 0.6237, 0.4744], [0.8732, 0.6509, 0.2917, 0.1272, 0.806], [0.9847, 0.1109, 0.8097, 0.8196, 0.4889], [0.5297, 0.8055, 0.5181, 0.968, 0.4012]], [[0.9693, 0.5011, 0.2624, 0.2736, 0.9093], [0.6309, 0.2579, 0.5347, 0.6209, 0.7948], [0.0518, 0.5453, 0.4548, 0.6351, 0.1405], [0.8984, 0.9038, 0.4916, 0.4906, 0.7216]], [[0.327, 0.8445, 0.8776, 0.5047, 0.3955], [0.8771, 0.9329, 0.2793, 0.739, 0.3885], [0.926, 0.1019, 0.0016, 0.1756, 0.4284], [0.7012, 0.2723, 0.1794, 0.653, 0.8373]], [[0.6475, 0.143, 0.4458, 0.3902, 0.5027], [0.2644, 0.6159, 0.4475, 0.9026, 0.3436], [0.5362, 0.691, 0.4663, 0.2227, 0.7193], [0.1978, 0.913, 0.8946, 0.378, 0.3651]], [[0.4675, 0.5177, 0.8205, 0.0428, 0.2743], [0.716, 0.8944, 0.1182, 0.9856, 0.9645], [0.5951, 0.7318, 0.7222, 0.5683, 0.3853], [0.0267, 0.6817, 0.7228, 0.7322, 0.8314]]]], [[0.2736, 0.2698, 0.434], [0.982, 0.3359, 0.6842], [0.3356, 0.2784, 0.4421], [0.8112, 0.2465, 0.8482], [0.7717, 0.5893, 0.1523]],[0.8651, 0.5717, 0.552], Den96266), 
LRes87900 = reshape_layer(Den96266, [5, 12], Res87900), 
LCon38861 = conv1D_layer(Res87900, 3,[[[0.6443, 0.7788, 0.7013], [0.2073, 0.906, 0.8855], [0.7517, 0.8586, 0.1487], [0.1748, 0.806, 0.6868], [0.5748, 0.4385, 0.3708], [0.168, 0.7376, 0.4459], [0.15, 0.2142, 0.7262], [0.3262, 0.3814, 0.3188], [0.3431, 0.4249, 0.8936], [0.5067, 0.7256, 0.5377], [0.204, 0.7569, 0.4217], [0.0846, 0.3074, 0.6186]], [[0.2812, 0.4866, 0.4175], [0.3293, 0.643, 0.7332], [0.8112, 0.8622, 0.2104], [0.8889, 0.1024, 0.978], [0.6952, 0.0752, 0.7239], [0.54, 0.7767, 0.2886], [0.1312, 0.0587, 0.1791], [0.2648, 0.26, 0.6798], [0.6967, 0.4846, 0.0663], [0.6015, 0.8142, 0.3326], [0.5565, 0.2127, 0.163], [0.364, 0.5761, 0.0807]], [[0.4283, 0.6143, 0.7674], [0.2874, 0.4822, 0.8952], [0.5281, 0.508, 0.4547], [0.0587, 0.5088, 0.6609], [0.1739, 0.2843, 0.1705], [0.9183, 0.9088, 0.546], [0.1917, 0.3573, 0.63], [0.5493, 0.0617, 0.5622], [0.0663, 0.594, 0.0256], [0.0357, 0.6812, 0.0153], [0.6579, 0.3727, 0.3174], [0.0813, 0.7307, 0.7601]]],[0, 0, 0], 1, true, 1, Con38861), 
LZer74733 = zero_padding1D_layer(Con38861, 1, 1, Zer74733), 
LDot82166 = dot_layer(Con80396,Zer74733, 2, 2, Dot82166), 
LBat426 = batch_normalization_layer(Dot82166, 2, 0.4562033285746847, [0.0505, 0.9561, 0.5765, 0.854, 0.9063, 0.1806, 0.3547], [0.7646, 0.5046, 0.3862, 0.2556, 0.4201, 0.5096, 0.1673], [0.7765, 0.6802, 0.2945, 0.3796, 0.0497, 0.1544, 0.7379], [0.3492, 0.7768, 0.2886, 0.8927, 0.9845, 0.1232, 0.9016], Bat426), 
exec_layers([LAve62259,LRes9292,LRes62660,LSim91006,LRes28836,LRes64235,LCro44603,LRes67231,LCon80396,LDen96266,LRes87900,LCon38861,LZer74733,LDot82166,LBat426],["Ave62259","Res9292","Res62660","Sim91006","Res28836","Res64235","Cro44603","Res67231","Con80396","Den96266","Res87900","Con38861","Zer74733","Dot82166","Bat426"],Bat426,"Bat426")

Actual (Unparsed): [[[0.7209056, 41.9533986, 50.5078129, 54.0652847, 56.2762856, 12.7458199, -0.0573158]]]

Expected (Unparsed): [[[0.7209055649864975,41.95339807453501,50.50781207450655,54.06528409153937,56.27628487344801,12.745819821408928,-0.05731578036474522]]]

Actual:   [[[0.721, 41.9534, 50.5079, 54.0653, 56.2763, 12.7459, -0.0573]]]

Expected: [[[0.721, 41.9534, 50.5079, 54.0653, 56.2763, 12.7459, -0.0573]]]