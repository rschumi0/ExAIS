import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Loc96994 = tf.keras.layers.Input(shape=([2, 1]))
in0Ave87022 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Ave87022 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con24438 = tf.keras.layers.Input(shape=([4, 2]))

Loc96994 = keras.layers.LocallyConnected1D(2, (1),strides=(1), name = 'Loc96994', )(in0Loc96994)
Res3454 = keras.layers.Reshape((2, 2, 1), name = 'Res3454', )(Loc96994)
Res57105 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res57105', )(Res3454)
Up_51715 = keras.layers.UpSampling3D(size=(2, 2, 1), name = 'Up_51715', )(Res57105)
Res42564 = keras.layers.Reshape((4, 4, 1), name = 'Res42564', )(Up_51715)
Res98871 = keras.layers.Reshape((4, 4), name = 'Res98871', )(Res42564)
Ave87022 = keras.layers.Average(name = 'Ave87022', )([in0Ave87022,in1Ave87022])
Res89948 = keras.layers.Reshape((2, 2), name = 'Res89948', )(Ave87022)
Cro33695 = keras.layers.Cropping1D(cropping=((0, 0)), name = 'Cro33695', )(Res89948)
Max3041 = keras.layers.MaxPool1D(pool_size=(1), strides=(1), padding='valid', name = 'Max3041', )(Cro33695)
Zer60420 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer60420', )(Max3041)
Con24438 = keras.layers.Concatenate(axis=2, name = 'Con24438', )([Zer60420,in0Con24438])
Max90052 = keras.layers.Maximum(name = 'Max90052', )([Res98871,Con24438])
model = tf.keras.models.Model(inputs=[in0Loc96994,in0Ave87022,in1Ave87022,in0Con24438], outputs=Max90052)
w = model.get_layer('Loc96994').get_weights() 
w[0] = np.array([[[0.1018, 0.6453]], [[0.5883, 0.2657]]])
w[1] = np.array([[0, 0], [0, 0]])
model.get_layer('Loc96994').set_weights(w) 
in0Loc96994 = tf.constant([[[0.6511], [0.1516]]])
in0Ave87022 = tf.constant([[[[0.9268], [0.6741]], [[0.225], [0.7146]]]])
in1Ave87022 = tf.constant([[[[0.0038], [0.0479]], [[0.6195], [0.5778]]]])
in0Con24438 = tf.constant([[[0.4936, 0.6957], [0.982, 0.9622], [0.9848, 0.2058], [0.1625, 0.6847]]])
print (np.array2string(model.predict([in0Loc96994,in0Ave87022,in1Ave87022,in0Con24438],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max90052.png')

LLoc96994 = locally_connected1D_layer([[[0.6511], [0.1516]]], 1,[[[0.1018, 0.6453]], [[0.5883, 0.2657]]],[[0, 0], [0, 0]], 1, Loc96994), 
LRes3454 = reshape_layer(Loc96994, [2, 2, 1], Res3454), 
LRes57105 = reshape_layer(Res3454, [2, 2, 1, 1], Res57105), 
LUp_51715 = up_sampling3D_layer(Res57105, 2, 2, 1, Up_51715), 
LRes42564 = reshape_layer(Up_51715, [4, 4, 1], Res42564), 
LRes98871 = reshape_layer(Res42564, [4, 4], Res98871), 
LAve87022 = average_layer([[[[[0.9268], [0.6741]], [[0.225], [0.7146]]]], [[[[0.0038], [0.0479]], [[0.6195], [0.5778]]]]], Ave87022), 
LRes89948 = reshape_layer(Ave87022, [2, 2], Res89948), 
LCro33695 = cropping1D_layer(Res89948, 0, 0, Cro33695), 
LMax3041 = max_pool1D_layer(Cro33695, 1, 1, false, Max3041), 
LZer60420 = zero_padding1D_layer(Max3041, 2, 0, Zer60420), 
LCon24438 = concatenate_layer([Zer60420,[[[0.4936, 0.6957], [0.982, 0.9622], [0.9848, 0.2058], [0.1625, 0.6847]]]], 2, Con24438), 
LMax90052 = maximum_layer([Res98871,Con24438], Max90052), 
exec_layers([LLoc96994,LRes3454,LRes57105,LUp_51715,LRes42564,LRes98871,LAve87022,LRes89948,LCro33695,LMax3041,LZer60420,LCon24438,LMax90052],["Loc96994","Res3454","Res57105","Up_51715","Res42564","Res98871","Ave87022","Res89948","Cro33695","Max3041","Zer60420","Con24438","Max90052"],Max90052,"Max90052")

Actual (Unparsed): [[[0.0662820, 0.0662820, 0.4936000, 0.6957000], [0.0662820, 0.0662820, 0.9820000, 0.9622000], [0.4653000, 0.3610000, 0.9848000, 0.2058000], [0.4222500, 0.6462000, 0.1625000, 0.6847000]]]

Expected (Unparsed): [[[0.06628198,0.06628198,0.4936,0.6957],[0.06628198,0.06628198,0.982,0.9622],[0.4653,0.361,0.9848,0.2058],[0.42225,0.6462,0.1625,0.6847]]]

Actual:   [[[0.0663, 0.0663, 0.4936, 0.6957], [0.0663, 0.0663, 0.982, 0.9622], [0.4653, 0.361, 0.9848, 0.2058], [0.4223, 0.6462, 0.1625, 0.6847]]]

Expected: [[[0.0663, 0.0663, 0.4936, 0.6957], [0.0663, 0.0663, 0.982, 0.9622], [0.4653, 0.361, 0.9848, 0.2058], [0.4223, 0.6462, 0.1625, 0.6847]]]