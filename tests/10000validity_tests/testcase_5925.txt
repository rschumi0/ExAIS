import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con58906 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))
in0Con61529 = tf.keras.layers.Input(shape=([2]))
in0Mas75217 = tf.keras.layers.Input(shape=([4, 1, 4]))
in0Sof32843 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Con24209 = tf.keras.layers.Input(shape=([4, 1, 2]))

Con58906 = keras.layers.Conv3D(2, (1, 1, 1),strides=(10, 6, 6), padding='same', dilation_rate=(1, 1, 1), name = 'Con58906', )(in0Con58906)
Res24946 = keras.layers.Reshape((1, 1, 2), name = 'Res24946', )(Con58906)
Max79822 = keras.layers.MaxPool2D(pool_size=(1, 1), name = 'Max79822', )(Res24946)
Res87142 = keras.layers.Reshape((1, 2), name = 'Res87142', )(Max79822)
Fla30739 = keras.layers.Flatten(name = 'Fla30739', )(Res87142)
Con61529 = keras.layers.Concatenate(axis=1, name = 'Con61529', )([Fla30739,in0Con61529])
Mas75217 = keras.layers.Masking(mask_value=1, name = 'Mas75217', )(in0Mas75217)
Sof32843 = keras.layers.Softmax(axis=1, name = 'Sof32843', input_shape=(2, 1, 2))(in0Sof32843)
Zer52793 = keras.layers.ZeroPadding2D(padding=((2, 0), (0, 0)), name = 'Zer52793', )(Sof32843)
Con24209 = keras.layers.Concatenate(axis=3, name = 'Con24209', )([Zer52793,in0Con24209])
Sub81450 = keras.layers.Subtract(name = 'Sub81450', )([Mas75217,Con24209])
Glo25644 = keras.layers.GlobalMaxPool2D(name = 'Glo25644', )(Sub81450)
Mul37809 = keras.layers.Multiply(name = 'Mul37809', )([Con61529,Glo25644])
model = tf.keras.models.Model(inputs=[in0Con58906,in0Con61529,in0Mas75217,in0Sof32843,in0Con24209], outputs=Mul37809)
w = model.get_layer('Con58906').get_weights() 
w[0] = np.array([[[[[0.729, 0.4654]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con58906').set_weights(w) 
in0Con58906 = tf.constant([[[[[0.0915]]]]])
in0Con61529 = tf.constant([[0.9556, 0.2752]])
in0Mas75217 = tf.constant([[[[1.3247, 1.4504, 1.4687, 1.3933]], [[1.6827, 1.841, 1.5509, 1.1442]], [[1.1716, 1.9059, 1.2223, 1.3546]], [[1.7463, 1.6347, 1.8742, 1.3718]]]])
in0Sof32843 = tf.constant([[[[0.5174, 0.4907]], [[0.6321, 0.8142]]]])
in0Con24209 = tf.constant([[[[0.9674, 0.2079]], [[0.994, 0.1673]], [[0.7178, 0.9537]], [[0.2873, 0.6911]]]])
print (np.array2string(model.predict([in0Con58906,in0Con61529,in0Mas75217,in0Sof32843,in0Con24209],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul37809.png')

LCon58906 = conv3D_layer([[[[[0.0915]]]]], 1, 1, 1,[[[[[0.729, 0.4654]]]]],[0, 0], 10, 6, 6, true, 1, 1, 1, Con58906), 
LRes24946 = reshape_layer(Con58906, [1, 1, 2], Res24946), 
LMax79822 = max_pool2D_layer(Res24946, 1, 1, Max79822), 
LRes87142 = reshape_layer(Max79822, [1, 2], Res87142), 
LFla30739 = flatten_layer(Res87142, Fla30739), 
LCon61529 = concatenate_layer([Fla30739,[[0.9556, 0.2752]]], 1, Con61529), 
LMas75217 = masking_layer([[[[1.3247, 1.4504, 1.4687, 1.3933]], [[1.6827, 1.841, 1.5509, 1.1442]], [[1.1716, 1.9059, 1.2223, 1.3546]], [[1.7463, 1.6347, 1.8742, 1.3718]]]], 1, Mas75217), 
LSof32843 = softmax_layer([[[[0.5174, 0.4907]], [[0.6321, 0.8142]]]], 1, Sof32843), 
LZer52793 = zero_padding2D_layer(Sof32843, 2, 0, 0, 0, Zer52793), 
LCon24209 = concatenate_layer([Zer52793,[[[[0.9674, 0.2079]], [[0.994, 0.1673]], [[0.7178, 0.9537]], [[0.2873, 0.6911]]]]], 3, Con24209), 
LSub81450 = subtract_layer(Mas75217,Con24209, Sub81450), 
LGlo25644 = global_max_pool2D_layer(Sub81450, Glo25644), 
LMul37809 = multiply_layer([Con61529,Glo25644], Mul37809), 
exec_layers([LCon58906,LRes24946,LMax79822,LRes87142,LFla30739,LCon61529,LMas75217,LSof32843,LZer52793,LCon24209,LSub81450,LGlo25644,LMul37809],["Con58906","Res24946","Max79822","Res87142","Fla30739","Con61529","Mas75217","Sof32843","Zer52793","Con24209","Sub81450","Glo25644","Mul37809"],Mul37809,"Mul37809")

Actual (Unparsed): [[0.1122420, 0.0783973, 1.5164417, 0.3262221]]

Expected (Unparsed): [[0.11224197945,0.0783973281,1.51644164,0.32622208]]

Actual:   [[0.1123, 0.0784, 1.5165, 0.3263]]

Expected: [[0.1123, 0.0784, 1.5165, 0.3263]]