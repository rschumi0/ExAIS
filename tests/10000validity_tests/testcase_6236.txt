import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer36198 = tf.keras.layers.Input(shape=([1, 2]))
in0Con72575 = tf.keras.layers.Input(shape=([3, 4, 1, 1]))
in0Add4366 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in1Add4366 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in0Min77512 = tf.keras.layers.Input(shape=([1, 1]))
in1Min77512 = tf.keras.layers.Input(shape=([1, 1]))
in0Con82623 = tf.keras.layers.Input(shape=([3, 7]))

Zer36198 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer36198', )(in0Zer36198)
Res30080 = keras.layers.Reshape((3, 2, 1), name = 'Res30080', )(Zer36198)
Up_96011 = keras.layers.UpSampling2D(size=(1, 2), name = 'Up_96011', )(Res30080)
Res41333 = keras.layers.Reshape((3, 4, 1, 1), name = 'Res41333', )(Up_96011)
Con72575 = keras.layers.Concatenate(axis=4, name = 'Con72575', )([Res41333,in0Con72575])
Add4366 = keras.layers.Add(name = 'Add4366', )([in0Add4366,in1Add4366])
Zer42932 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (0, 0)), name = 'Zer42932', )(Add4366)
Max20833 = keras.layers.Maximum(name = 'Max20833', )([Con72575,Zer42932])
Res40448 = keras.layers.Reshape((3, 4, 2), name = 'Res40448', )(Max20833)
Res78504 = keras.layers.Reshape((3, 8), name = 'Res78504', )(Res40448)
Min77512 = keras.layers.Minimum(name = 'Min77512', )([in0Min77512,in1Min77512])
Zer18803 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer18803', )(Min77512)
Con82623 = keras.layers.Concatenate(axis=2, name = 'Con82623', )([Zer18803,in0Con82623])
Ave1614 = keras.layers.Average(name = 'Ave1614', )([Res78504,Con82623])
Bat27545 = keras.layers.BatchNormalization(axis=2, epsilon=0.9237379992043202,  name = 'Bat27545', )(Ave1614)
model = tf.keras.models.Model(inputs=[in0Zer36198,in0Con72575,in0Add4366,in1Add4366,in0Min77512,in1Min77512,in0Con82623], outputs=Bat27545)
w = model.get_layer('Bat27545').get_weights() 
w[0] = np.array([0.8093, 0.0303, 0.4328, 0.3651, 0.7788, 0.0516, 0.0168, 0.2411])
w[1] = np.array([0.0274, 0.0165, 0.1407, 0.5269, 0.6619, 0.213, 0.6246, 0.3761])
w[2] = np.array([0.5554, 0.8918, 0.6994, 0.6845, 0.8316, 0.2187, 0.712, 0.9914])
w[3] = np.array([0.5209, 0.0426, 0.389, 0.2604, 0.9153, 0.6058, 0.3977, 0.9081])
model.get_layer('Bat27545').set_weights(w) 
in0Zer36198 = tf.constant([[[1.1435, 1.0539]]])
in0Con72575 = tf.constant([[[[[0.6115]], [[0.7779]], [[0.0025]], [[0.3652]]], [[[0.6769]], [[0.2667]], [[0.6676]], [[0.6838]]], [[[0.4285]], [[0.922]], [[0.3877]], [[0.2501]]]]])
in0Add4366 = tf.constant([[[[[0.4758, 0.9344]], [[0.4209, 0.1497]]]]])
in1Add4366 = tf.constant([[[[[0.2449, 0.6839]], [[0.0504, 0.6636]]]]])
in0Min77512 = tf.constant([[[0.1792]]])
in1Min77512 = tf.constant([[[0.0506]]])
in0Con82623 = tf.constant([[[0.9692, 0.2654, 0.4901, 0.6822, 0.7966, 0.0948, 0.6828], [0.0859, 0.3018, 0.1755, 0.9803, 0.8673, 0.386, 0.4654], [0.5938, 0.4385, 0.9024, 0.4084, 0.9608, 0.6781, 0.4858]]])
print (np.array2string(model.predict([in0Zer36198,in0Con72575,in0Add4366,in1Add4366,in0Min77512,in1Min77512,in0Con82623],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Bat27545.png')

LZer36198 = zero_padding1D_layer([[[1.1435, 1.0539]]], 1, 1, Zer36198), 
LRes30080 = reshape_layer(Zer36198, [3, 2, 1], Res30080), 
LUp_96011 = up_sampling2D_layer(Res30080, 1, 2, Up_96011), 
LRes41333 = reshape_layer(Up_96011, [3, 4, 1, 1], Res41333), 
LCon72575 = concatenate_layer([Res41333,[[[[[0.6115]], [[0.7779]], [[0.0025]], [[0.3652]]], [[[0.6769]], [[0.2667]], [[0.6676]], [[0.6838]]], [[[0.4285]], [[0.922]], [[0.3877]], [[0.2501]]]]]], 4, Con72575), 
LAdd4366 = add_layer([[[[[[0.4758, 0.9344]], [[0.4209, 0.1497]]]]], [[[[[0.2449, 0.6839]], [[0.0504, 0.6636]]]]]], Add4366), 
LZer42932 = zero_padding3D_layer(Add4366, 2, 0, 2, 0, 0, 0, Zer42932), 
LMax20833 = maximum_layer([Con72575,Zer42932], Max20833), 
LRes40448 = reshape_layer(Max20833, [3, 4, 2], Res40448), 
LRes78504 = reshape_layer(Res40448, [3, 8], Res78504), 
LMin77512 = minimum_layer([[[[0.1792]]], [[[0.0506]]]], Min77512), 
LZer18803 = zero_padding1D_layer(Min77512, 2, 0, Zer18803), 
LCon82623 = concatenate_layer([Zer18803,[[[0.9692, 0.2654, 0.4901, 0.6822, 0.7966, 0.0948, 0.6828], [0.0859, 0.3018, 0.1755, 0.9803, 0.8673, 0.386, 0.4654], [0.5938, 0.4385, 0.9024, 0.4084, 0.9608, 0.6781, 0.4858]]]], 2, Con82623), 
LAve1614 = average_layer([Res78504,Con82623], Ave1614), 
LBat27545 = batch_normalization_layer(Ave1614, 2, 0.9237379992043202, [0.8093, 0.0303, 0.4328, 0.3651, 0.7788, 0.0516, 0.0168, 0.2411], [0.0274, 0.0165, 0.1407, 0.5269, 0.6619, 0.213, 0.6246, 0.3761], [0.5554, 0.8918, 0.6994, 0.6845, 0.8316, 0.2187, 0.712, 0.9914], [0.5209, 0.0426, 0.389, 0.2604, 0.9153, 0.6058, 0.3977, 0.9081], Bat27545), 
exec_layers([LZer36198,LRes30080,LUp_96011,LRes41333,LCon72575,LAdd4366,LZer42932,LMax20833,LRes40448,LRes78504,LMin77512,LZer18803,LCon82623,LAve1614,LBat27545],["Zer36198","Res30080","Up_96011","Res41333","Con72575","Add4366","Zer42932","Max20833","Res40448","Res78504","Min77512","Zer18803","Con82623","Ave1614","Bat27545"],Bat27545,"Bat27545")

Actual (Unparsed): [[[-0.3465693, 0.0133730, -0.0733678, 0.5099565, 0.3802112, 0.2205455, 0.6148872, 0.2928389], [0.0384090, 0.0007678, 0.1494826, 0.3714228, 0.7684306, 0.2358952, 0.6247162, 0.3018526], [-0.3295339, 0.0047671, -0.0406741, 0.6032965, 0.5085361, 0.2576785, 0.6225934, 0.3152039]]]

Expected (Unparsed): [[[-0.34656925460376425,0.013372983656737454,-0.0733678446471844,0.5099565419354185,0.3802111848316745,0.2205455009701761,0.614887160258913,0.29283885353829836],[0.038408997682339824,0.0007678251197515626,0.1494825611223699,0.3714228026311467,0.7684306324438827,0.23589518195954742,0.6247161857898611,0.30185257628318946],[-0.32953392485677974,0.00476713877710312,-0.04067405259810411,0.6032965426001033,0.5085360895194673,0.25767846123258564,0.6225934202581234,0.31520393042804296]]]

Actual:   [[[-0.3465, 0.0134, -0.0733, 0.51, 0.3803, 0.2206, 0.6149, 0.2929], [0.0385, 0.0008, 0.1495, 0.3715, 0.7685, 0.2359, 0.6248, 0.3019], [-0.3295, 0.0048, -0.0406, 0.6033, 0.5086, 0.2577, 0.6226, 0.3153]]]

Expected: [[[-0.3465, 0.0134, -0.0733, 0.51, 0.3803, 0.2206, 0.6149, 0.2929], [0.0385, 0.0008, 0.1495, 0.3715, 0.7685, 0.2359, 0.6248, 0.3019], [-0.3295, 0.0048, -0.0406, 0.6033, 0.5086, 0.2577, 0.6226, 0.3153]]]