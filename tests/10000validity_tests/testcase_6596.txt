import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer37241 = tf.keras.layers.Input(shape=([2, 4, 4]))
in0Sub3951 = tf.keras.layers.Input(shape=([2, 3]))
in1Sub3951 = tf.keras.layers.Input(shape=([2, 3]))
in0Con72279 = tf.keras.layers.Input(shape=([4, 20]))

Zer37241 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer37241', )(in0Zer37241)
Res28601 = keras.layers.Reshape((4, 24), name = 'Res28601', )(Zer37241)
Up_72630 = keras.layers.UpSampling1D(size=(1), name = 'Up_72630', )(Res28601)
Sub3951 = keras.layers.Subtract(name = 'Sub3951', )([in0Sub3951,in1Sub3951])
Con61866 = keras.layers.Conv1D(4, (2),strides=(1), padding='same', dilation_rate=(1), name = 'Con61866', )(Sub3951)
Zer34110 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer34110', )(Con61866)
Con72279 = keras.layers.Concatenate(axis=2, name = 'Con72279', )([Zer34110,in0Con72279])
Max38302 = keras.layers.Maximum(name = 'Max38302', )([Up_72630,Con72279])
model = tf.keras.models.Model(inputs=[in0Zer37241,in0Sub3951,in1Sub3951,in0Con72279], outputs=Max38302)
w = model.get_layer('Con61866').get_weights() 
w[0] = np.array([[[0.8186, 0.4334, 0.2721, 0.1417], [0.7833, 0.9306, 0.2435, 0.5148], [0.8455, 0.2703, 0.7025, 0.0712]], [[0.6046, 0.8345, 0.1234, 0.6454], [0.0314, 0.0283, 0.9358, 0.7485], [0.8489, 0.7201, 0.9844, 0.188]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con61866').set_weights(w) 
in0Zer37241 = tf.constant([[[[1.596, 1.1291, 1.0873, 1.0943], [1.614, 1.8719, 1.5792, 1.7797], [1.6252, 1.7039, 1.3502, 1.1416], [1.0521, 1.2933, 1.1615, 1.4571]], [[1.8535, 1.67, 1.8601, 1.6795], [1.8834, 1.6712, 1.4615, 1.7278], [1.2067, 1.1654, 1.1632, 1.8384], [1.5641, 1.3059, 1.5483, 1.709]]]])
in0Sub3951 = tf.constant([[[0.7891, 0.0616, 0.4319], [0.8665, 0.0035, 0.9271]]])
in1Sub3951 = tf.constant([[[0.8995, 0.543, 0.842], [0.0227, 0.093, 0.3617]]])
in0Con72279 = tf.constant([[[0.1895, 0.081, 0.3485, 0.5194, 0.1531, 0.5394, 0.18, 0.2256, 0.8868, 0.2109, 0.7542, 0.7494, 0.3019, 0.0735, 0.2722, 0.0837, 0.0608, 0.9923, 0.704, 0.1371], [0.3711, 0.2891, 0.4544, 0.6724, 0.4957, 0.8749, 0.4698, 0.4033, 0.3905, 0.8884, 0.9658, 0.7043, 0.6808, 0.8797, 0.4073, 0.7483, 0.5286, 0.4495, 0.8443, 0.5292], [0.8097, 0.9175, 0.2196, 0.1496, 0.4185, 0.0266, 0.8031, 0.9559, 0.4497, 0.9133, 0.4784, 0.592, 0.4685, 0.5732, 0.2104, 0.8051, 0.0727, 0.8339, 0.6568, 0.8892], [0.4749, 0.411, 0.5505, 0.9774, 0.8905, 0.9669, 0.1769, 0.0073, 0.1012, 0.2184, 0.9969, 0.0726, 0.6837, 0.0482, 0.2269, 0.0505, 0.0427, 0.2591, 0.9741, 0.8444]]])
print (np.array2string(model.predict([in0Zer37241,in0Sub3951,in1Sub3951,in0Con72279],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max38302.png')

LZer37241 = zero_padding2D_layer([[[[1.596, 1.1291, 1.0873, 1.0943], [1.614, 1.8719, 1.5792, 1.7797], [1.6252, 1.7039, 1.3502, 1.1416], [1.0521, 1.2933, 1.1615, 1.4571]], [[1.8535, 1.67, 1.8601, 1.6795], [1.8834, 1.6712, 1.4615, 1.7278], [1.2067, 1.1654, 1.1632, 1.8384], [1.5641, 1.3059, 1.5483, 1.709]]]], 1, 1, 1, 1, Zer37241), 
LRes28601 = reshape_layer(Zer37241, [4, 24], Res28601), 
LUp_72630 = up_sampling1D_layer(Res28601, 1, Up_72630), 
LSub3951 = subtract_layer([[[0.7891, 0.0616, 0.4319], [0.8665, 0.0035, 0.9271]]], [[[0.8995, 0.543, 0.842], [0.0227, 0.093, 0.3617]]], Sub3951), 
LCon61866 = conv1D_layer(Sub3951, 2,[[[0.8186, 0.4334, 0.2721, 0.1417], [0.7833, 0.9306, 0.2435, 0.5148], [0.8455, 0.2703, 0.7025, 0.0712]], [[0.6046, 0.8345, 0.1234, 0.6454], [0.0314, 0.0283, 0.9358, 0.7485], [0.8489, 0.7201, 0.9844, 0.188]]],[0, 0, 0, 0], 1, true, 1, Con61866), 
LZer34110 = zero_padding1D_layer(Con61866, 2, 0, Zer34110), 
LCon72279 = concatenate_layer([Zer34110,[[[0.1895, 0.081, 0.3485, 0.5194, 0.1531, 0.5394, 0.18, 0.2256, 0.8868, 0.2109, 0.7542, 0.7494, 0.3019, 0.0735, 0.2722, 0.0837, 0.0608, 0.9923, 0.704, 0.1371], [0.3711, 0.2891, 0.4544, 0.6724, 0.4957, 0.8749, 0.4698, 0.4033, 0.3905, 0.8884, 0.9658, 0.7043, 0.6808, 0.8797, 0.4073, 0.7483, 0.5286, 0.4495, 0.8443, 0.5292], [0.8097, 0.9175, 0.2196, 0.1496, 0.4185, 0.0266, 0.8031, 0.9559, 0.4497, 0.9133, 0.4784, 0.592, 0.4685, 0.5732, 0.2104, 0.8051, 0.0727, 0.8339, 0.6568, 0.8892], [0.4749, 0.411, 0.5505, 0.9774, 0.8905, 0.9669, 0.1769, 0.0073, 0.1012, 0.2184, 0.9969, 0.0726, 0.6837, 0.0482, 0.2269, 0.0505, 0.0427, 0.2591, 0.9741, 0.8444]]]], 2, Con72279), 
LMax38302 = maximum_layer([Up_72630,Con72279], Max38302), 
exec_layers([LZer37241,LRes28601,LUp_72630,LSub3951,LCon61866,LZer34110,LCon72279,LMax38302],["Zer37241","Res28601","Up_72630","Sub3951","Con61866","Zer34110","Con72279","Max38302"],Max38302,"Max38302")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.1895000, 0.0810000, 0.3485000, 0.5194000, 0.1531000, 0.5394000, 0.1800000, 0.2256000, 0.8868000, 0.2109000, 0.7542000, 0.7494000, 0.3019000, 0.0735000, 0.2722000, 0.0837000, 0.0608000, 0.9923000, 0.7040000, 0.1371000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 1.5960000, 1.1291000, 1.0872999, 1.0943000, 1.6140000, 1.8719000, 1.5792000, 1.7797000, 1.6252000, 1.7039000, 1.3502001, 1.1416000, 1.0520999, 1.2933000, 1.1615000, 1.4571000, 0.5286000, 0.4495000, 0.8443000, 0.5292000], [0.1731256, 0.5020746, 0.1415946, 0.2912255, 1.8535000, 1.6700000, 1.8601000, 1.6795000, 1.8834000, 1.6712000, 1.4615000, 1.7278000, 1.2067000, 1.1654000, 1.1632000, 1.8384000, 1.5641000, 1.3059000, 1.5483000, 1.7090000, 0.0727000, 0.8339000, 0.6568000, 0.8892000], [1.0986750, 0.4352418, 0.6049982, 0.1137483, 0.4749000, 0.4110000, 0.5505000, 0.9774000, 0.8905000, 0.9669000, 0.1769000, 0.0073000, 0.1012000, 0.2184000, 0.9969000, 0.0726000, 0.6837000, 0.0482000, 0.2269000, 0.0505000, 0.0427000, 0.2591000, 0.9741000, 0.8444000]]]

Expected (Unparsed): [[[0,0,0,0,0.1895,0.081,0.3485,0.5194,0.1531,0.5394,0.18,0.2256,0.8868,0.2109,0.7542,0.7494,0.3019,0.0735,0.2722,0.0837,0.0608,0.9923,0.704,0.1371],[0,0,0,0,1.596,1.1291,1.0873,1.0943,1.614,1.8719,1.5792,1.7797,1.6252,1.7039,1.3502,1.1416,1.0521,1.2933,1.1615,1.4571,0.5286,0.4495,0.8443,0.5292],[0.17312563000000009,0.50207456,0.14159459000000013,0.29122545000000005,1.8535,1.67,1.8601,1.6795,1.8834,1.6712,1.4615,1.7278,1.2067,1.1654,1.1632,1.8384,1.5641,1.3059,1.5483,1.709,0.0727,0.8339,0.6568,0.8892],[1.09867503,0.43524184,0.6049982300000001,0.11374833999999999,0.4749,0.411,0.5505,0.9774,0.8905,0.9669,0.1769,0.0073,0.1012,0.2184,0.9969,0.0726,0.6837,0.0482,0.2269,0.0505,0.0427,0.2591,0.9741,0.8444]]]

Actual:   [[[0, 0, 0, 0, 0.1895, 0.081, 0.3485, 0.5194, 0.1531, 0.5394, 0.18, 0.2256, 0.8868, 0.2109, 0.7542, 0.7494, 0.3019, 0.0735, 0.2722, 0.0837, 0.0608, 0.9923, 0.704, 0.1371], [0, 0, 0, 0, 1.596, 1.1291, 1.0873, 1.0943, 1.614, 1.8719, 1.5792, 1.7797, 1.6252, 1.7039, 1.3503, 1.1416, 1.0521, 1.2933, 1.1615, 1.4571, 0.5286, 0.4495, 0.8443, 0.5292], [0.1732, 0.5021, 0.1416, 0.2913, 1.8535, 1.67, 1.8601, 1.6795, 1.8834, 1.6712, 1.4615, 1.7278, 1.2067, 1.1654, 1.1632, 1.8384, 1.5641, 1.3059, 1.5483, 1.709, 0.0727, 0.8339, 0.6568, 0.8892], [1.0987, 0.4353, 0.605, 0.1138, 0.4749, 0.411, 0.5505, 0.9774, 0.8905, 0.9669, 0.1769, 0.0073, 0.1012, 0.2184, 0.9969, 0.0726, 0.6837, 0.0482, 0.2269, 0.0505, 0.0427, 0.2591, 0.9741, 0.8444]]]

Expected: [[[0, 0, 0, 0, 0.1895, 0.081, 0.3485, 0.5194, 0.1531, 0.5394, 0.18, 0.2256, 0.8868, 0.2109, 0.7542, 0.7494, 0.3019, 0.0735, 0.2722, 0.0837, 0.0608, 0.9923, 0.704, 0.1371], [0, 0, 0, 0, 1.596, 1.1291, 1.0873, 1.0943, 1.614, 1.8719, 1.5792, 1.7797, 1.6252, 1.7039, 1.3502, 1.1416, 1.0521, 1.2933, 1.1615, 1.4571, 0.5286, 0.4495, 0.8443, 0.5292], [0.1732, 0.5021, 0.1416, 0.2913, 1.8535, 1.67, 1.8601, 1.6795, 1.8834, 1.6712, 1.4615, 1.7278, 1.2067, 1.1654, 1.1632, 1.8384, 1.5641, 1.3059, 1.5483, 1.709, 0.0727, 0.8339, 0.6568, 0.8892], [1.0987, 0.4353, 0.605, 0.1138, 0.4749, 0.411, 0.5505, 0.9774, 0.8905, 0.9669, 0.1769, 0.0073, 0.1012, 0.2184, 0.9969, 0.0726, 0.6837, 0.0482, 0.2269, 0.0505, 0.0427, 0.2591, 0.9741, 0.8444]]]