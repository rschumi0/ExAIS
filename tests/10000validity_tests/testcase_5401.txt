import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub15548 = tf.keras.layers.Input(shape=([3, 3, 3]))
in1Sub15548 = tf.keras.layers.Input(shape=([3, 3, 3]))

Sub15548 = keras.layers.Subtract(name = 'Sub15548', )([in0Sub15548,in1Sub15548])
Sof85987 = keras.layers.Softmax(axis=1, name = 'Sof85987', )(Sub15548)
model = tf.keras.models.Model(inputs=[in0Sub15548,in1Sub15548], outputs=Sof85987)
in0Sub15548 = tf.constant([[[[0.1202, 0.5008, 0.7032], [0.4883, 0.9304, 0.9784], [0.3955, 0.5099, 0.6428]], [[0.0749, 0.857, 0.6821], [0.784, 0.9424, 0.0213], [0.9779, 0.2952, 0.0293]], [[0.1745, 0.0262, 0.2556], [0.9519, 0.7974, 0.2478], [0.1508, 0.5193, 0.8733]]]])
in1Sub15548 = tf.constant([[[[0.0122, 0.8656, 0.3782], [0.1297, 0.1402, 0.1987], [0.5619, 0.0069, 0.7202]], [[0.9765, 0.9487, 0.6294], [0.2614, 0.7793, 0.2695], [0.6918, 0.6617, 0.8812]], [[0.8351, 0.9675, 0.3355], [0.2535, 0.6015, 0.0951], [0.114, 0.3858, 0.5352]]]])
print (np.array2string(model.predict([in0Sub15548,in1Sub15548],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sof85987.png')

LSub15548 = subtract_layer([[[[0.1202, 0.5008, 0.7032], [0.4883, 0.9304, 0.9784], [0.3955, 0.5099, 0.6428]], [[0.0749, 0.857, 0.6821], [0.784, 0.9424, 0.0213], [0.9779, 0.2952, 0.0293]], [[0.1745, 0.0262, 0.2556], [0.9519, 0.7974, 0.2478], [0.1508, 0.5193, 0.8733]]]], [[[[0.0122, 0.8656, 0.3782], [0.1297, 0.1402, 0.1987], [0.5619, 0.0069, 0.7202]], [[0.9765, 0.9487, 0.6294], [0.2614, 0.7793, 0.2695], [0.6918, 0.6617, 0.8812]], [[0.8351, 0.9675, 0.3355], [0.2535, 0.6015, 0.0951], [0.114, 0.3858, 0.5352]]]], Sub15548), 
LSof85987 = softmax_layer(Sub15548, 1, Sof85987), 
exec_layers([LSub15548,LSof85987],["Sub15548","Sof85987"],Sof85987,"Sof85987")

Actual (Unparsed): [[[[0.5470380, 0.3477181, 0.4117481], [0.2791050, 0.4793663, 0.5285554], [0.2633273, 0.4738796, 0.3360145]], [[0.1993214, 0.4569125, 0.3135980], [0.3288455, 0.2560480, 0.1890946], [0.4140132, 0.1986319, 0.1548806]], [[0.2536406, 0.1953694, 0.2746539], [0.3920495, 0.2645857, 0.2823500], [0.3226595, 0.3274886, 0.5091050]]]]

Expected (Unparsed): [[[[0.5470380404939926,0.34771807234073165,0.41174812074646167],[0.27910500392399634,0.47936631138254976,0.5285553512680893],[0.26332729885247463,0.47387955480177746,0.3360144705388503]],[[0.19932134949174224,0.456912549348922,0.31359796678307006],[0.32884551103726284,0.25604803076856314,0.18909462149198575],[0.4140131517282544,0.19863186474851494,0.15488055796975533]],[[0.25364061001426524,0.19536937831034631,0.2746539124704683],[0.39204948503874076,0.2645856578488871,0.2823500272399248],[0.32265954941927094,0.3274885804497075,0.5091049714913943]]]]

Actual:   [[[[0.5471, 0.3478, 0.4118], [0.2792, 0.4794, 0.5286], [0.2634, 0.4739, 0.3361]], [[0.1994, 0.457, 0.3136], [0.3289, 0.2561, 0.1891], [0.4141, 0.1987, 0.1549]], [[0.2537, 0.1954, 0.2747], [0.3921, 0.2646, 0.2824], [0.3227, 0.3275, 0.5092]]]]

Expected: [[[[0.5471, 0.3478, 0.4118], [0.2792, 0.4794, 0.5286], [0.2634, 0.4739, 0.3361]], [[0.1994, 0.457, 0.3136], [0.3289, 0.2561, 0.1891], [0.4141, 0.1987, 0.1549]], [[0.2537, 0.1954, 0.2747], [0.3921, 0.2646, 0.2824], [0.3227, 0.3275, 0.5092]]]]