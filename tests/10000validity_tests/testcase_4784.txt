import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max10328 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Max10328 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))

Max10328 = keras.layers.Maximum(name = 'Max10328', )([in0Max10328,in1Max10328])
Mas29685 = keras.layers.Masking(mask_value=1, name = 'Mas29685', )(Max10328)
model = tf.keras.models.Model(inputs=[in0Max10328,in1Max10328], outputs=Mas29685)
in0Max10328 = tf.constant([[[[[0.8418, 0.0323], [0.3598, 0.1831]], [[0.3988, 0.7807], [0.9643, 0.9459]]], [[[0.4705, 0.0343], [0.808, 0.2374]], [[0.7541, 0.3441], [0.8416, 0.1226]]]]])
in1Max10328 = tf.constant([[[[[0.6339, 0.9657], [0.86, 0.8885]], [[0.7045, 0.7998], [0.5755, 0.5961]]], [[[0.1962, 0.064], [0.9085, 0.6556]], [[0.5824, 0.8254], [0.6893, 0.0398]]]]])
print (np.array2string(model.predict([in0Max10328,in1Max10328],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mas29685.png')

LMax10328 = maximum_layer([[[[[[0.8418, 0.0323], [0.3598, 0.1831]], [[0.3988, 0.7807], [0.9643, 0.9459]]], [[[0.4705, 0.0343], [0.808, 0.2374]], [[0.7541, 0.3441], [0.8416, 0.1226]]]]], [[[[[0.6339, 0.9657], [0.86, 0.8885]], [[0.7045, 0.7998], [0.5755, 0.5961]]], [[[0.1962, 0.064], [0.9085, 0.6556]], [[0.5824, 0.8254], [0.6893, 0.0398]]]]]], Max10328), 
LMas29685 = masking_layer(Max10328, 1, Mas29685), 
exec_layers([LMax10328,LMas29685],["Max10328","Mas29685"],Mas29685,"Mas29685")

Actual (Unparsed): [[[[[0.8418000, 0.9657000], [0.8600000, 0.8885000]], [[0.7045000, 0.7998000], [0.9643000, 0.9459000]]], [[[0.4705000, 0.0640000], [0.9085000, 0.6556000]], [[0.7541000, 0.8254000], [0.8416000, 0.1226000]]]]]

Expected (Unparsed): [[[[[0.8418,0.9657],[0.86,0.8885]],[[0.7045,0.7998],[0.9643,0.9459]]],[[[0.4705,0.064],[0.9085,0.6556]],[[0.7541,0.8254],[0.8416,0.1226]]]]]

Actual:   [[[[[0.8418, 0.9657], [0.86, 0.8885]], [[0.7045, 0.7998], [0.9643, 0.9459]]], [[[0.4705, 0.064], [0.9085, 0.6556]], [[0.7541, 0.8254], [0.8416, 0.1226]]]]]

Expected: [[[[[0.8418, 0.9657], [0.86, 0.8885]], [[0.7045, 0.7998], [0.9643, 0.9459]]], [[[0.4705, 0.064], [0.9085, 0.6556]], [[0.7541, 0.8254], [0.8416, 0.1226]]]]]