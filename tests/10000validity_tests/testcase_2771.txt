import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0ELU32192 = tf.keras.layers.Input(shape=([2, 2]))

ELU32192 = keras.layers.ELU(alpha=1.7329229818576053, name = 'ELU32192', input_shape=(2, 2))(in0ELU32192)
Loc8558 = keras.layers.LocallyConnected1D(3, (1),strides=(1), name = 'Loc8558', )(ELU32192)
Res81884 = keras.layers.Reshape((2, 3, 1), name = 'Res81884', )(Loc8558)
Res66055 = keras.layers.Reshape((2, 3, 1, 1), name = 'Res66055', )(Res81884)
Up_87748 = keras.layers.UpSampling3D(size=(2, 2, 2), name = 'Up_87748', )(Res66055)
Thr95228 = keras.layers.ThresholdedReLU(theta=6.403116087645878, name = 'Thr95228', )(Up_87748)
model = tf.keras.models.Model(inputs=[in0ELU32192], outputs=Thr95228)
w = model.get_layer('Loc8558').get_weights() 
w[0] = np.array([[[0.0799, 0.4809, 0.1571], [0.9483, 0.6932, 0.6553]], [[0.4779, 0.95, 0.9012], [0.5925, 0.4083, 0.3583]]])
w[1] = np.array([[0, 0, 0], [0, 0, 0]])
model.get_layer('Loc8558').set_weights(w) 
in0ELU32192 = tf.constant([[[0.816, 0.3136], [0.4268, 0.7593]]])
print (np.array2string(model.predict([in0ELU32192],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Thr95228.png')

LELU32192 = elu_layer([[[0.816, 0.3136], [0.4268, 0.7593]]], 1.7329229818576053, ELU32192), 
LLoc8558 = locally_connected1D_layer(ELU32192, 1,[[[0.0799, 0.4809, 0.1571], [0.9483, 0.6932, 0.6553]], [[0.4779, 0.95, 0.9012], [0.5925, 0.4083, 0.3583]]],[[0, 0, 0], [0, 0, 0]], 1, Loc8558), 
LRes81884 = reshape_layer(Loc8558, [2, 3, 1], Res81884), 
LRes66055 = reshape_layer(Res81884, [2, 3, 1, 1], Res66055), 
LUp_87748 = up_sampling3D_layer(Res66055, 2, 2, 2, Up_87748), 
LThr95228 = thresholded_relu_layer(Up_87748, 6.403116087645878, Thr95228), 
exec_layers([LELU32192,LLoc8558,LRes81884,LRes66055,LUp_87748,LThr95228],["ELU32192","Loc8558","Res81884","Res66055","Up_87748","Thr95228"],Thr95228,"Thr95228")

Actual (Unparsed): [[[[[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]]]]]

Expected (Unparsed): [[[[[0],[0]],[[0],[0]],[[0],[0]],[[0],[0]],[[0],[0]],[[0],[0]]],[[[0],[0]],[[0],[0]],[[0],[0]],[[0],[0]],[[0],[0]],[[0],[0]]],[[[0],[0]],[[0],[0]],[[0],[0]],[[0],[0]],[[0],[0]],[[0],[0]]],[[[0],[0]],[[0],[0]],[[0],[0]],[[0],[0]],[[0],[0]],[[0],[0]]]]]

Actual:   [[[[[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]]], [[[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]]], [[[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]]], [[[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]]]]]

Expected: [[[[[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]]], [[[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]]], [[[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]]], [[[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]], [[0], [0]]]]]