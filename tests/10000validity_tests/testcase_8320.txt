import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul31693 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in1Mul31693 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in0Con9483 = tf.keras.layers.Input(shape=([3, 2, 3, 2]))
in0Sub60137 = tf.keras.layers.Input(shape=([3, 2, 3, 3]))
in1Sub60137 = tf.keras.layers.Input(shape=([3, 2, 3, 3]))

Mul31693 = keras.layers.Multiply(name = 'Mul31693', )([in0Mul31693,in1Mul31693])
Res96399 = keras.layers.Reshape((2, 1, 2), name = 'Res96399', )(Mul31693)
Res18028 = keras.layers.Reshape((2, 2), name = 'Res18028', )(Res96399)
Con75941 = keras.layers.Conv1D(3, (2),strides=(4), padding='same', dilation_rate=(1), name = 'Con75941', )(Res18028)
Con60101 = keras.layers.Conv1D(3, (1),strides=(1), padding='same', dilation_rate=(1), name = 'Con60101', )(Con75941)
Con41265 = keras.layers.Conv1D(2, (1),strides=(1), padding='valid', dilation_rate=(1), name = 'Con41265', )(Con60101)
Res41770 = keras.layers.Reshape((1, 2, 1), name = 'Res41770', )(Con41265)
Res2405 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res2405', )(Res41770)
Zer6029 = keras.layers.ZeroPadding3D(padding=((2, 0), (0, 0), (2, 0)), name = 'Zer6029', )(Res2405)
Con9483 = keras.layers.Concatenate(axis=4, name = 'Con9483', )([Zer6029,in0Con9483])
Sub60137 = keras.layers.Subtract(name = 'Sub60137', )([in0Sub60137,in1Sub60137])
Mul84907 = keras.layers.Multiply(name = 'Mul84907', )([Con9483,Sub60137])
model = tf.keras.models.Model(inputs=[in0Mul31693,in1Mul31693,in0Con9483,in0Sub60137,in1Sub60137], outputs=Mul84907)
w = model.get_layer('Con75941').get_weights() 
w[0] = np.array([[[0.6784, 0.6317, 0.8979], [0.6351, 0.2414, 0.6795]], [[0.7674, 0.0385, 0.0686], [0.6561, 0.0237, 0.4529]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con75941').set_weights(w) 
w = model.get_layer('Con60101').get_weights() 
w[0] = np.array([[[0.9967, 0.8227, 0.1498], [0.0582, 0.8045, 0.4019], [0.47, 0.3628, 0.1005]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con60101').set_weights(w) 
w = model.get_layer('Con41265').get_weights() 
w[0] = np.array([[[0.8834, 0.5308], [0.835, 0.2961], [0.0919, 0.5763]]])
w[1] = np.array([0, 0])
model.get_layer('Con41265').set_weights(w) 
in0Mul31693 = tf.constant([[[[[0.7834, 0.3768]]], [[[0.8974, 0.6761]]]]])
in1Mul31693 = tf.constant([[[[[0.288, 0.0777]]], [[[0.8066, 0.4724]]]]])
in0Con9483 = tf.constant([[[[[0.1538, 0.6169], [0.7957, 0.1652], [0.4493, 0.1652]], [[0.441, 0.6357], [0.9654, 0.6433], [0.4155, 0.9264]]], [[[0.2996, 0.3058], [0.0963, 0.4513], [0.756, 0.6866]], [[0.5485, 0.7571], [0.4503, 0.8707], [0.4819, 0.8811]]], [[[0.2564, 0.5195], [0.2313, 0.901], [0.708, 0.7213]], [[0.7806, 0.2061], [0.162, 0.8502], [0.9333, 0.6451]]]]])
in0Sub60137 = tf.constant([[[[[0.8381, 0.9031, 0.0756], [0.8729, 0.431, 0.8342], [0.5979, 0.2632, 0.9476]], [[0.2307, 0.4399, 0.6893], [0.4023, 0.2547, 0.7877], [0.7504, 0.5948, 0.3185]]], [[[0.8519, 0.3126, 0.0659], [0.2515, 0.5424, 0.8066], [0.0564, 0.5639, 0.1043]], [[0.2682, 0.3788, 0.5284], [0.1939, 0.8173, 0.7259], [0.7961, 0.0647, 0.9775]]], [[[0.9583, 0.9166, 0.6312], [0.0883, 0.344, 0.4435], [0.187, 0.082, 0.5513]], [[0.2691, 0.4587, 0.059], [0.439, 0.4578, 0.5015], [0.4265, 0.3328, 0.1227]]]]])
in1Sub60137 = tf.constant([[[[[0.6597, 0.8423, 0.5267], [0.8272, 0.4491, 0.8473], [0.2084, 0.5824, 0.7539]], [[0.8599, 0.8715, 0.7595], [0.1709, 0.1597, 0.5462], [0.1372, 0.6858, 0.5921]]], [[[0.8594, 0.8689, 0.118], [0.9881, 0.0157, 0.3625], [0.9339, 0.7132, 0.2827]], [[0.9469, 0.0944, 0.3352], [0.4566, 0.7179, 0.5776], [0.1298, 0.0884, 0.1503]]], [[[0.0954, 0.0334, 0.9569], [0.8957, 0.3113, 0.694], [0.3908, 0.6879, 0.5563]], [[0.4734, 0.562, 0.429], [0.6426, 0.6087, 0.7978], [0.3383, 0.8732, 0.2544]]]]])
print (np.array2string(model.predict([in0Mul31693,in1Mul31693,in0Con9483,in0Sub60137,in1Sub60137],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul84907.png')

LMul31693 = multiply_layer([[[[[[0.7834, 0.3768]]], [[[0.8974, 0.6761]]]]], [[[[[0.288, 0.0777]]], [[[0.8066, 0.4724]]]]]], Mul31693), 
LRes96399 = reshape_layer(Mul31693, [2, 1, 2], Res96399), 
LRes18028 = reshape_layer(Res96399, [2, 2], Res18028), 
LCon75941 = conv1D_layer(Res18028, 2,[[[0.6784, 0.6317, 0.8979], [0.6351, 0.2414, 0.6795]], [[0.7674, 0.0385, 0.0686], [0.6561, 0.0237, 0.4529]]],[0, 0, 0], 4, true, 1, Con75941), 
LCon60101 = conv1D_layer(Con75941, 1,[[[0.9967, 0.8227, 0.1498], [0.0582, 0.8045, 0.4019], [0.47, 0.3628, 0.1005]]],[0, 0, 0], 1, true, 1, Con60101), 
LCon41265 = conv1D_layer(Con60101, 1,[[[0.8834, 0.5308], [0.835, 0.2961], [0.0919, 0.5763]]],[0, 0], 1, false, 1, Con41265), 
LRes41770 = reshape_layer(Con41265, [1, 2, 1], Res41770), 
LRes2405 = reshape_layer(Res41770, [1, 2, 1, 1], Res2405), 
LZer6029 = zero_padding3D_layer(Res2405, 2, 0, 0, 0, 2, 0, Zer6029), 
LCon9483 = concatenate_layer([Zer6029,[[[[[0.1538, 0.6169], [0.7957, 0.1652], [0.4493, 0.1652]], [[0.441, 0.6357], [0.9654, 0.6433], [0.4155, 0.9264]]], [[[0.2996, 0.3058], [0.0963, 0.4513], [0.756, 0.6866]], [[0.5485, 0.7571], [0.4503, 0.8707], [0.4819, 0.8811]]], [[[0.2564, 0.5195], [0.2313, 0.901], [0.708, 0.7213]], [[0.7806, 0.2061], [0.162, 0.8502], [0.9333, 0.6451]]]]]], 4, Con9483), 
LSub60137 = subtract_layer([[[[[0.8381, 0.9031, 0.0756], [0.8729, 0.431, 0.8342], [0.5979, 0.2632, 0.9476]], [[0.2307, 0.4399, 0.6893], [0.4023, 0.2547, 0.7877], [0.7504, 0.5948, 0.3185]]], [[[0.8519, 0.3126, 0.0659], [0.2515, 0.5424, 0.8066], [0.0564, 0.5639, 0.1043]], [[0.2682, 0.3788, 0.5284], [0.1939, 0.8173, 0.7259], [0.7961, 0.0647, 0.9775]]], [[[0.9583, 0.9166, 0.6312], [0.0883, 0.344, 0.4435], [0.187, 0.082, 0.5513]], [[0.2691, 0.4587, 0.059], [0.439, 0.4578, 0.5015], [0.4265, 0.3328, 0.1227]]]]], [[[[[0.6597, 0.8423, 0.5267], [0.8272, 0.4491, 0.8473], [0.2084, 0.5824, 0.7539]], [[0.8599, 0.8715, 0.7595], [0.1709, 0.1597, 0.5462], [0.1372, 0.6858, 0.5921]]], [[[0.8594, 0.8689, 0.118], [0.9881, 0.0157, 0.3625], [0.9339, 0.7132, 0.2827]], [[0.9469, 0.0944, 0.3352], [0.4566, 0.7179, 0.5776], [0.1298, 0.0884, 0.1503]]], [[[0.0954, 0.0334, 0.9569], [0.8957, 0.3113, 0.694], [0.3908, 0.6879, 0.5563]], [[0.4734, 0.562, 0.429], [0.6426, 0.6087, 0.7978], [0.3383, 0.8732, 0.2544]]]]], Sub60137), 
LMul84907 = multiply_layer([Con9483,Sub60137], Mul84907), 
exec_layers([LMul31693,LRes96399,LRes18028,LCon75941,LCon60101,LCon41265,LRes41770,LRes2405,LZer6029,LCon9483,LSub60137,LMul84907],["Mul31693","Res96399","Res18028","Con75941","Con60101","Con41265","Res41770","Res2405","Zer6029","Con9483","Sub60137","Mul84907"],Mul84907,"Mul84907")

Actual (Unparsed): [[[[[0.0000000, 0.0093510, -0.2782836], [0.0000000, -0.0144022, -0.0021641], [0.0000000, -0.1434166, 0.0319992]], [[-0.0000000, -0.1903356, -0.0446262], [0.0000000, 0.0917130, 0.1553570], [0.0000000, -0.0378105, -0.2534631]]], [[[-0.0000000, -0.1666675, -0.0159322], [-0.0000000, 0.0507212, 0.2004223], [-0.0000000, -0.1128708, -0.1224894]], [[-0.0000000, 0.1559934, 0.1462717], [-0.0000000, 0.0447598, 0.1291248], [0.0000000, -0.0114210, 0.7288459]]], [[[0.0000000, 0.2264525, -0.1692011], [-0.0000000, 0.0075635, -0.2257005], [-0.3922920, -0.4289772, -0.0036065]], [[-0.0000000, -0.0806360, -0.0762570], [-0.0000000, -0.0244458, -0.2519143], [0.0943854, -0.5043553, -0.0849597]]]]]

Expected (Unparsed): [[[[[0.0,0.009351039999999994,-0.27828358999999997],[0.0,-0.014402170000000004,-0.0021641200000000003],[0.0,-0.14341656,0.03199924]],[[-0.0,-0.19033560000000002,-0.04462613999999996],[0.0,0.09171299999999998,0.15535694999999997],[0.0,-0.03781049999999998,-0.25346304]]],[[[-0.0,-0.16666747999999998,-0.015932179999999997],[-0.0,0.050721209999999996,0.20042232999999998],[-0.0,-0.1128708,-0.12248944]],[[-0.0,0.15599340000000003,0.14627172],[-0.0,0.04475982000000002,0.12912481],[0.0,-0.011421030000000006,0.72884592]]],[[[0.0,0.22645248,-0.16920115],[-0.0,0.007563509999999989,-0.22570049999999994],[-0.3922919715395518,-0.42897719999999995,-0.0036065000000000034]],[[-0.0,-0.08063598000000004,-0.076257],[-0.0,-0.024445800000000007,-0.25191426],[0.09438538705838309,-0.50435532,-0.08495967000000001]]]]]

Actual:   [[[[[0, 0.0094, -0.2782], [0, -0.0144, -0.0021], [0, -0.1434, 0.032]], [[-0, -0.1903, -0.0446], [0, 0.0918, 0.1554], [0, -0.0378, -0.2534]]], [[[-0, -0.1666, -0.0159], [-0, 0.0508, 0.2005], [-0, -0.1128, -0.1224]], [[-0, 0.156, 0.1463], [-0, 0.0448, 0.1292], [0, -0.0114, 0.7289]]], [[[0, 0.2265, -0.1692], [-0, 0.0076, -0.2257], [-0.3922, -0.4289, -0.0036]], [[-0, -0.0806, -0.0762], [-0, -0.0244, -0.2519], [0.0944, -0.5043, -0.0849]]]]]

Expected: [[[[[0, 0.0094, -0.2782], [0, -0.0144, -0.0021], [0, -0.1434, 0.032]], [[-0, -0.1903, -0.0446], [0, 0.0918, 0.1554], [0, -0.0378, -0.2534]]], [[[-0, -0.1666, -0.0159], [-0, 0.0508, 0.2005], [-0, -0.1128, -0.1224]], [[-0, 0.156, 0.1463], [-0, 0.0448, 0.1292], [0, -0.0114, 0.7289]]], [[[0, 0.2265, -0.1692], [-0, 0.0076, -0.2257], [-0.3922, -0.4289, -0.0036]], [[-0, -0.0806, -0.0762], [-0, -0.0244, -0.2519], [0.0944, -0.5043, -0.0849]]]]]