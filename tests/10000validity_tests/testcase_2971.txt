import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max81546 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Max81546 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Glo62652 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con44749 = tf.keras.layers.Input(shape=([21]))

Max81546 = keras.layers.Maximum(name = 'Max81546', )([in0Max81546,in1Max81546])
Res54084 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res54084', )(Max81546)
Con99316 = keras.layers.Conv3DTranspose(2, (1, 1, 1),strides=(1, 11, 1), padding='valid', name = 'Con99316', )(Res54084)
Res26955 = keras.layers.Reshape((1, 11, 2), name = 'Res26955', )(Con99316)
Res79771 = keras.layers.Reshape((1, 22), name = 'Res79771', )(Res26955)
Fla28856 = keras.layers.Flatten(name = 'Fla28856', )(Res79771)
Glo62652 = keras.layers.GlobalMaxPool2D(name = 'Glo62652', )(in0Glo62652)
Res17275 = keras.layers.Reshape((2, 1), name = 'Res17275', )(Glo62652)
GRU80523 = keras.layers.GRU(1,reset_after=False, recurrent_activation='sigmoid', name = 'GRU80523', )(Res17275)
Con44749 = keras.layers.Concatenate(axis=1, name = 'Con44749', )([GRU80523,in0Con44749])
Max60642 = keras.layers.Maximum(name = 'Max60642', )([Fla28856,Con44749])
model = tf.keras.models.Model(inputs=[in0Max81546,in1Max81546,in0Glo62652,in0Con44749], outputs=Max60642)
w = model.get_layer('Con99316').get_weights() 
w[0] = np.array([[[[[0.2761], [0.2734]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con99316').set_weights(w) 
w = model.get_layer('GRU80523').get_weights() 
w[0] = np.array([[8, 10, 3]])
w[1] = np.array([[4, 1, 4]])
w[2] = np.array([3, 3, 9])
model.get_layer('GRU80523').set_weights(w) 
in0Max81546 = tf.constant([[[[0.6264]]]])
in1Max81546 = tf.constant([[[[0.2319]]]])
in0Glo62652 = tf.constant([[[[1.9918, 1.3484]]]])
in0Con44749 = tf.constant([[0.1507, 0.72, 0.1338, 0.8497, 0.5005, 0.8435, 0.5979, 0.7417, 0.1907, 0.3116, 0.0348, 0.7962, 0.8387, 0.1536, 0.4553, 0.3446, 0.6775, 0.6121, 0.4239, 0.8273, 0.8171]])
print (np.array2string(model.predict([in0Max81546,in1Max81546,in0Glo62652,in0Con44749],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max60642.png')

LMax81546 = maximum_layer([[[[[0.6264]]]], [[[[0.2319]]]]], Max81546), 
LRes54084 = reshape_layer(Max81546, [1, 1, 1, 1], Res54084), 
LCon99316 = conv3D_transpose_layer(Res54084, 1, 1, 1,[[[[[0.2761], [0.2734]]]]],[0, 0], 1, 11, 1, false, Con99316), 
LRes26955 = reshape_layer(Con99316, [1, 11, 2], Res26955), 
LRes79771 = reshape_layer(Res26955, [1, 22], Res79771), 
LFla28856 = flatten_layer(Res79771, Fla28856), 
LGlo62652 = global_max_pool2D_layer([[[[1.9918, 1.3484]]]], Glo62652), 
LRes17275 = reshape_layer(Glo62652, [2, 1], Res17275), 
LGRU80523 = gru_layer(Res17275,[[8, 10, 3]],[[4, 1, 4]],[3, 3, 9], false, GRU80523), 
LCon44749 = concatenate_layer([GRU80523,[[0.1507, 0.72, 0.1338, 0.8497, 0.5005, 0.8435, 0.5979, 0.7417, 0.1907, 0.3116, 0.0348, 0.7962, 0.8387, 0.1536, 0.4553, 0.3446, 0.6775, 0.6121, 0.4239, 0.8273, 0.8171]]], 1, Con44749), 
LMax60642 = maximum_layer([Fla28856,Con44749], Max60642), 
exec_layers([LMax81546,LRes54084,LCon99316,LRes26955,LRes79771,LFla28856,LGlo62652,LRes17275,LGRU80523,LCon44749,LMax60642],["Max81546","Res54084","Con99316","Res26955","Res79771","Fla28856","Glo62652","Res17275","GRU80523","Con44749","Max60642"],Max60642,"Max60642")

Actual (Unparsed): [[0.1729490, 0.1712578, 0.7200000, 0.1338000, 0.8497000, 0.5005000, 0.8435000, 0.5979000, 0.7417000, 0.1907000, 0.3116000, 0.0348000, 0.7962000, 0.8387000, 0.1536000, 0.4553000, 0.3446000, 0.6775000, 0.6121000, 0.4239000, 0.8273000, 0.8171000]]

Expected (Unparsed): [[0.17294904,0.17125775999999998,0.72,0.1338,0.8497,0.5005,0.8435,0.5979,0.7417,0.1907,0.3116,0.0348,0.7962,0.8387,0.1536,0.4553,0.3446,0.6775,0.6121,0.4239,0.8273,0.8171]]

Actual:   [[0.173, 0.1713, 0.72, 0.1338, 0.8497, 0.5005, 0.8435, 0.5979, 0.7417, 0.1907, 0.3116, 0.0348, 0.7962, 0.8387, 0.1536, 0.4553, 0.3446, 0.6775, 0.6121, 0.4239, 0.8273, 0.8171]]

Expected: [[0.173, 0.1713, 0.72, 0.1338, 0.8497, 0.5005, 0.8435, 0.5979, 0.7417, 0.1907, 0.3116, 0.0348, 0.7962, 0.8387, 0.1536, 0.4553, 0.3446, 0.6775, 0.6121, 0.4239, 0.8273, 0.8171]]