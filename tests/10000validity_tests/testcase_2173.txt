import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro81255 = tf.keras.layers.Input(shape=([2, 3, 3]))
in0Per82195 = tf.keras.layers.Input(shape=([1, 3]))
in0Con24557 = tf.keras.layers.Input(shape=([3, 2]))

Cro81255 = keras.layers.Cropping2D(cropping=((1, 0), (2, 0)), name = 'Cro81255', )(in0Cro81255)
Res72476 = keras.layers.Reshape((1, 3), name = 'Res72476', )(Cro81255)
Con50327 = keras.layers.Conv1D(3, (1),strides=(1), padding='same', dilation_rate=(1), name = 'Con50327', )(Res72476)
Zer40644 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer40644', )(Con50327)
Per82195 = keras.layers.Permute((2,1), name = 'Per82195',)(in0Per82195)
Con24557 = keras.layers.Concatenate(axis=2, name = 'Con24557', )([Per82195,in0Con24557])
Add92378 = keras.layers.Add(name = 'Add92378', )([Zer40644,Con24557])
Res56896 = keras.layers.Reshape((3, 3, 1), name = 'Res56896', )(Add92378)
Up_247 = keras.layers.UpSampling2D(size=(2, 2), name = 'Up_247', )(Res56896)
model = tf.keras.models.Model(inputs=[in0Cro81255,in0Per82195,in0Con24557], outputs=Up_247)
w = model.get_layer('Con50327').get_weights() 
w[0] = np.array([[[0.8305, 0.6132, 0.0588], [0.0526, 0.8351, 0.6138], [0.4369, 0.6113, 0.4564]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con50327').set_weights(w) 
in0Cro81255 = tf.constant([[[[1.202, 1.4868, 1.9736], [1.6246, 1.0645, 1.5451], [1.2412, 1.0712, 1.0221]], [[1.5158, 1.5236, 1.5798], [1.7532, 1.3781, 1.1949], [1.1253, 1.6192, 1.6315]]]])
in0Per82195 = tf.constant([[[1.0874, 1.1587, 1.6011]]])
in0Con24557 = tf.constant([[[0.8867, 0.8632], [0.2708, 0.15], [0.7686, 0.8554]]])
print (np.array2string(model.predict([in0Cro81255,in0Per82195,in0Con24557],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Up_247.png')

LCro81255 = cropping2D_layer([[[[1.202, 1.4868, 1.9736], [1.6246, 1.0645, 1.5451], [1.2412, 1.0712, 1.0221]], [[1.5158, 1.5236, 1.5798], [1.7532, 1.3781, 1.1949], [1.1253, 1.6192, 1.6315]]]], 1, 0, 2, 0, Cro81255), 
LRes72476 = reshape_layer(Cro81255, [1, 3], Res72476), 
LCon50327 = conv1D_layer(Res72476, 1,[[[0.8305, 0.6132, 0.0588], [0.0526, 0.8351, 0.6138], [0.4369, 0.6113, 0.4564]]],[0, 0, 0], 1, true, 1, Con50327), 
LZer40644 = zero_padding1D_layer(Con50327, 2, 0, Zer40644), 
LPer82195 = permute_layer([[[1.0874, 1.1587, 1.6011]]], 2,1, Per82195), 
LCon24557 = concatenate_layer([Per82195,[[[0.8867, 0.8632], [0.2708, 0.15], [0.7686, 0.8554]]]], 2, Con24557), 
LAdd92378 = add_layer([Zer40644,Con24557], Add92378), 
LRes56896 = reshape_layer(Add92378, [3, 3, 1], Res56896), 
LUp_247 = up_sampling2D_layer(Res56896, 2, 2, Up_247), 
exec_layers([LCro81255,LRes72476,LCon50327,LZer40644,LPer82195,LCon24557,LAdd92378,LRes56896,LUp_247],["Cro81255","Res72476","Con50327","Zer40644","Per82195","Con24557","Add92378","Res56896","Up_247"],Up_247,"Up_247")

Actual (Unparsed): [[[[1.0874000], [1.0874000], [0.8867000], [0.8867000], [0.8632000], [0.8632000]], [[1.0874000], [1.0874000], [0.8867000], [0.8867000], [0.8632000], [0.8632000]], [[1.1587000], [1.1587000], [0.2708000], [0.2708000], [0.1500000], [0.1500000]], [[1.1587000], [1.1587000], [0.2708000], [0.2708000], [0.1500000], [0.1500000]], [[3.3336339], [3.3336339], [3.8081638], [3.8081638], [2.6600492], [2.6600492]], [[3.3336339], [3.3336339], [3.8081638], [3.8081638], [2.6600492], [2.6600492]]]]

Expected (Unparsed): [[[[1.0874],[1.0874],[0.8867],[0.8867],[0.8632],[0.8632]],[[1.0874],[1.0874],[0.8867],[0.8867],[0.8632],[0.8632]],[[1.1587],[1.1587],[0.2708],[0.2708],[0.15],[0.15]],[[1.1587],[1.1587],[0.2708],[0.2708],[0.15],[0.15]],[[3.33363392],[3.33363392],[3.80816383],[3.80816383],[2.6600492],[2.6600492]],[[3.33363392],[3.33363392],[3.80816383],[3.80816383],[2.6600492],[2.6600492]]]]

Actual:   [[[[1.0874], [1.0874], [0.8867], [0.8867], [0.8632], [0.8632]], [[1.0874], [1.0874], [0.8867], [0.8867], [0.8632], [0.8632]], [[1.1587], [1.1587], [0.2708], [0.2708], [0.15], [0.15]], [[1.1587], [1.1587], [0.2708], [0.2708], [0.15], [0.15]], [[3.3337], [3.3337], [3.8082], [3.8082], [2.6601], [2.6601]], [[3.3337], [3.3337], [3.8082], [3.8082], [2.6601], [2.6601]]]]

Expected: [[[[1.0874], [1.0874], [0.8867], [0.8867], [0.8632], [0.8632]], [[1.0874], [1.0874], [0.8867], [0.8867], [0.8632], [0.8632]], [[1.1587], [1.1587], [0.2708], [0.2708], [0.15], [0.15]], [[1.1587], [1.1587], [0.2708], [0.2708], [0.15], [0.15]], [[3.3337], [3.3337], [3.8082], [3.8082], [2.6601], [2.6601]], [[3.3337], [3.3337], [3.8082], [3.8082], [2.6601], [2.6601]]]]