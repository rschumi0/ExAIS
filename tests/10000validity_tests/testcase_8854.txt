import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot61088 = tf.keras.layers.Input(shape=([2, 3]))
in1Dot61088 = tf.keras.layers.Input(shape=([2, 3]))
in0Con49841 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Dep45014 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Mul31380 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in1Mul31380 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in0Con22296 = tf.keras.layers.Input(shape=([2, 3]))

Dot61088 = keras.layers.Dot(axes=(2, 2), name = 'Dot61088', )([in0Dot61088,in1Dot61088])
Res5217 = keras.layers.Reshape((2, 2, 1), name = 'Res5217', )(Dot61088)
Con49841 = keras.layers.Concatenate(axis=3, name = 'Con49841', )([Res5217,in0Con49841])
Dep45014 = keras.layers.DepthwiseConv2D((1, 1),strides=(1, 1), padding='valid', name = 'Dep45014', )(in0Dep45014)
Zer68055 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer68055', )(Dep45014)
Ave20822 = keras.layers.Average(name = 'Ave20822', )([Con49841,Zer68055])
Res29321 = keras.layers.Reshape((2, 4), name = 'Res29321', )(Ave20822)
Mul31380 = keras.layers.Multiply(name = 'Mul31380', )([in0Mul31380,in1Mul31380])
Res15777 = keras.layers.Reshape((2, 1, 1), name = 'Res15777', )(Mul31380)
Res6080 = keras.layers.Reshape((2, 1), name = 'Res6080', )(Res15777)
Cro46799 = keras.layers.Cropping1D(cropping=((0, 0)), name = 'Cro46799', )(Res6080)
Con22296 = keras.layers.Concatenate(axis=2, name = 'Con22296', )([Cro46799,in0Con22296])
Ave23557 = keras.layers.Average(name = 'Ave23557', )([Res29321,Con22296])
model = tf.keras.models.Model(inputs=[in0Dot61088,in1Dot61088,in0Con49841,in0Dep45014,in0Mul31380,in1Mul31380,in0Con22296], outputs=Ave23557)
w = model.get_layer('Dep45014').get_weights() 
w[0] = np.array([[[[0.32], [0.4518]]]])
w[1] = np.array([0, 0])
model.get_layer('Dep45014').set_weights(w) 
in0Dot61088 = tf.constant([[[0.8771, 0.4043, 0.4197], [0.0379, 0.3637, 0.3176]]])
in1Dot61088 = tf.constant([[[0.5204, 0.9624, 0.7553], [0.8, 0.3054, 0.4842]]])
in0Con49841 = tf.constant([[[[0.2817], [0.7184]], [[0.2939], [0.8516]]]])
in0Dep45014 = tf.constant([[[[0.1292, 0.3248]]]])
in0Mul31380 = tf.constant([[[[[0.4773]]], [[[0.9541]]]]])
in1Mul31380 = tf.constant([[[[[0.4213]]], [[[0.4406]]]]])
in0Con22296 = tf.constant([[[0.9841, 0.5918, 0.3861], [0.0205, 0.293, 0.0552]]])
print (np.array2string(model.predict([in0Dot61088,in1Dot61088,in0Con49841,in0Dep45014,in0Mul31380,in1Mul31380,in0Con22296],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave23557.png')

LDot61088 = dot_layer([[[0.8771, 0.4043, 0.4197], [0.0379, 0.3637, 0.3176]]], [[[0.5204, 0.9624, 0.7553], [0.8, 0.3054, 0.4842]]], 2, 2, Dot61088), 
LRes5217 = reshape_layer(Dot61088, [2, 2, 1], Res5217), 
LCon49841 = concatenate_layer([Res5217,[[[[0.2817], [0.7184]], [[0.2939], [0.8516]]]]], 3, Con49841), 
LDep45014 = depthwise_conv2D_layer([[[[0.1292, 0.3248]]]], 1, 1,[[[[0.32], [0.4518]]]],[0, 0], 1, 1, false, Dep45014), 
LZer68055 = zero_padding2D_layer(Dep45014, 1, 0, 1, 0, Zer68055), 
LAve20822 = average_layer([Con49841,Zer68055], Ave20822), 
LRes29321 = reshape_layer(Ave20822, [2, 4], Res29321), 
LMul31380 = multiply_layer([[[[[[0.4773]]], [[[0.9541]]]]], [[[[[0.4213]]], [[[0.4406]]]]]], Mul31380), 
LRes15777 = reshape_layer(Mul31380, [2, 1, 1], Res15777), 
LRes6080 = reshape_layer(Res15777, [2, 1], Res6080), 
LCro46799 = cropping1D_layer(Res6080, 0, 0, Cro46799), 
LCon22296 = concatenate_layer([Cro46799,[[[0.9841, 0.5918, 0.3861], [0.0205, 0.293, 0.0552]]]], 2, Con22296), 
LAve23557 = average_layer([Res29321,Con22296], Ave23557), 
exec_layers([LDot61088,LRes5217,LCon49841,LDep45014,LZer68055,LAve20822,LRes29321,LMul31380,LRes15777,LRes6080,LCro46799,LCon22296,LAve23557],["Dot61088","Res5217","Con49841","Dep45014","Zer68055","Ave20822","Res29321","Mul31380","Res15777","Res6080","Cro46799","Con22296","Ave23557"],Ave23557,"Ave23557")

Actual (Unparsed): [[[0.3911784, 0.5624750, 0.5529930, 0.3726500], [0.3625961, 0.0837250, 0.2306300, 0.2771862]]]

Expected (Unparsed): [[[0.3911783875,0.562475,0.55299299,0.37265000000000004],[0.36259606,0.083725,0.230629975,0.27718616]]]

Actual:   [[[0.3912, 0.5625, 0.553, 0.3727], [0.3626, 0.0838, 0.2307, 0.2772]]]

Expected: [[[0.3912, 0.5625, 0.553, 0.3727], [0.3626, 0.0838, 0.2307, 0.2772]]]