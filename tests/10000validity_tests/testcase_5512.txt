import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave64330 = tf.keras.layers.Input(shape=([1, 1]))
in1Ave64330 = tf.keras.layers.Input(shape=([1, 1]))
in0Con787 = tf.keras.layers.Input(shape=([1]))
in0Add25319 = tf.keras.layers.Input(shape=([1, 2, 1]))
in1Add25319 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Glo21003 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Cro37696 = tf.keras.layers.Input(shape=([1, 3, 4]))
in0Con44605 = tf.keras.layers.Input(shape=([2, 3, 20]))
in0Ave7731 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Ave7731 = tf.keras.layers.Input(shape=([2, 2, 1]))

Ave64330 = keras.layers.Average(name = 'Ave64330', )([in0Ave64330,in1Ave64330])
Fla76473 = keras.layers.Flatten(name = 'Fla76473', )(Ave64330)
Con787 = keras.layers.Concatenate(axis=1, name = 'Con787', )([Fla76473,in0Con787])
Add25319 = keras.layers.Add(name = 'Add25319', )([in0Add25319,in1Add25319])
Res83749 = keras.layers.Reshape((1, 2), name = 'Res83749', )(Add25319)
Fla62830 = keras.layers.Flatten(name = 'Fla62830', )(Res83749)
Glo21003 = keras.layers.GlobalMaxPool2D(name = 'Glo21003', )(in0Glo21003)
Add5470 = keras.layers.Add(name = 'Add5470', )([Fla62830,Glo21003])
Min19937 = keras.layers.Minimum(name = 'Min19937', )([Con787,Add5470])
Res83257 = keras.layers.Reshape((2, 1), name = 'Res83257', )(Min19937)
Res54215 = keras.layers.Reshape((2, 1, 1), name = 'Res54215', )(Res83257)
Res10005 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res10005', )(Res54215)
Con43904 = keras.layers.Conv3DTranspose(2, (2, 1, 1),strides=(1, 1, 12), padding='same', name = 'Con43904', )(Res10005)
Res69970 = keras.layers.Reshape((2, 1, 24), name = 'Res69970', )(Con43904)
Zer97112 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer97112', )(Res69970)
Cro37696 = keras.layers.Cropping2D(cropping=((0, 0), (1, 0)), name = 'Cro37696', )(in0Cro37696)
Zer20313 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer20313', )(Cro37696)
Con44605 = keras.layers.Concatenate(axis=3, name = 'Con44605', )([Zer20313,in0Con44605])
Min10674 = keras.layers.Minimum(name = 'Min10674', )([Zer97112,Con44605])
Res96720 = keras.layers.Reshape((2, 72), name = 'Res96720', )(Min10674)
Ave7731 = keras.layers.Average(name = 'Ave7731', )([in0Ave7731,in1Ave7731])
Res95458 = keras.layers.Reshape((2, 2), name = 'Res95458', )(Ave7731)
Dot58445 = keras.layers.Dot(axes=(1, 1), name = 'Dot58445', )([Res96720,Res95458])
model = tf.keras.models.Model(inputs=[in0Ave64330,in1Ave64330,in0Con787,in0Add25319,in1Add25319,in0Glo21003,in0Cro37696,in0Con44605,in0Ave7731,in1Ave7731], outputs=Dot58445)
w = model.get_layer('Con43904').get_weights() 
w[0] = np.array([[[[[0.8425], [0.8231]]]], [[[[0.9013], [0.1074]]]]])
w[1] = np.array([0, 0])
model.get_layer('Con43904').set_weights(w) 
in0Ave64330 = tf.constant([[[0.0321]]])
in1Ave64330 = tf.constant([[[0.3993]]])
in0Con787 = tf.constant([[0.4819]])
in0Add25319 = tf.constant([[[[0.0062], [0.4445]]]])
in1Add25319 = tf.constant([[[[0.0192], [0.2381]]]])
in0Glo21003 = tf.constant([[[[1.9744, 1.9736]]]])
in0Cro37696 = tf.constant([[[[1.7304, 1.4707, 1.1809, 1.4807], [1.5186, 1.4935, 1.7192, 1.0375], [1.8694, 1.089, 1.1142, 1.2392]]]])
in0Con44605 = tf.constant([[[[0.7752, 0.9476, 0.7534, 0.7501, 0.4711, 0.3993, 0.5507, 0.9158, 0.6867, 0.5215, 0.0163, 0.6455, 0.3837, 0.5812, 0.8457, 0.4114, 0.105, 0.0461, 0.9354, 0.486], [0.8179, 0.0965, 0.4658, 0.4862, 0.2043, 0.9234, 0.0924, 0.3625, 0.535, 0.5024, 0.019, 0.6791, 0.6121, 0.2301, 0.339, 0.6193, 0.3874, 0.5369, 0.9228, 0.2665], [0.7729, 0.3484, 0.2997, 0.3642, 0.8471, 0.0581, 0.4394, 0.9351, 0.1332, 0.4958, 0.0727, 0.8535, 0.8716, 0.2271, 0.2066, 0.7088, 0.246, 0.406, 0.7884, 0.0696]], [[0.3331, 0.3136, 0.0511, 0.5682, 0.1414, 0.6665, 0.9347, 0.0562, 0.4809, 0.753, 0.1168, 0.4563, 0.5621, 0.4649, 0.6112, 0.8292, 0.1612, 0.3337, 0.5962, 0.6103], [0.91, 0.7494, 0.1202, 0.9278, 0.7657, 0.6444, 0.5974, 0.4119, 0.0036, 0.0572, 0.5567, 0.9241, 0.1336, 0.1586, 0.9337, 0.197, 0.9916, 0.5135, 0.3066, 0.4559], [0.8773, 0.5874, 0.8702, 0.7165, 0.0223, 0.7564, 0.6123, 0.6003, 0.8566, 0.3775, 0.1125, 0.1891, 0.5149, 0.7912, 0.6186, 0.6543, 0.772, 0.4847, 0.5727, 0.1381]]]])
in0Ave7731 = tf.constant([[[[0.8959], [0.0125]], [[0.7551], [0.8602]]]])
in1Ave7731 = tf.constant([[[[0.2389], [0.1977]], [[0.6365], [0.6121]]]])
print (np.array2string(model.predict([in0Ave64330,in1Ave64330,in0Con787,in0Add25319,in1Add25319,in0Glo21003,in0Cro37696,in0Con44605,in0Ave7731,in1Ave7731],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Dot58445.png')

LAve64330 = average_layer([[[[0.0321]]], [[[0.3993]]]], Ave64330), 
LFla76473 = flatten_layer(Ave64330, Fla76473), 
LCon787 = concatenate_layer([Fla76473,[[0.4819]]], 1, Con787), 
LAdd25319 = add_layer([[[[[0.0062], [0.4445]]]], [[[[0.0192], [0.2381]]]]], Add25319), 
LRes83749 = reshape_layer(Add25319, [1, 2], Res83749), 
LFla62830 = flatten_layer(Res83749, Fla62830), 
LGlo21003 = global_max_pool2D_layer([[[[1.9744, 1.9736]]]], Glo21003), 
LAdd5470 = add_layer([Fla62830,Glo21003], Add5470), 
LMin19937 = minimum_layer([Con787,Add5470], Min19937), 
LRes83257 = reshape_layer(Min19937, [2, 1], Res83257), 
LRes54215 = reshape_layer(Res83257, [2, 1, 1], Res54215), 
LRes10005 = reshape_layer(Res54215, [2, 1, 1, 1], Res10005), 
LCon43904 = conv3D_transpose_layer(Res10005, 2, 1, 1,[[[[[0.8425], [0.8231]]]], [[[[0.9013], [0.1074]]]]],[0, 0], 1, 1, 12, true, Con43904), 
LRes69970 = reshape_layer(Con43904, [2, 1, 24], Res69970), 
LZer97112 = zero_padding2D_layer(Res69970, 0, 0, 2, 0, Zer97112), 
LCro37696 = cropping2D_layer([[[[1.7304, 1.4707, 1.1809, 1.4807], [1.5186, 1.4935, 1.7192, 1.0375], [1.8694, 1.089, 1.1142, 1.2392]]]], 0, 0, 1, 0, Cro37696), 
LZer20313 = zero_padding2D_layer(Cro37696, 1, 0, 1, 0, Zer20313), 
LCon44605 = concatenate_layer([Zer20313,[[[[0.7752, 0.9476, 0.7534, 0.7501, 0.4711, 0.3993, 0.5507, 0.9158, 0.6867, 0.5215, 0.0163, 0.6455, 0.3837, 0.5812, 0.8457, 0.4114, 0.105, 0.0461, 0.9354, 0.486], [0.8179, 0.0965, 0.4658, 0.4862, 0.2043, 0.9234, 0.0924, 0.3625, 0.535, 0.5024, 0.019, 0.6791, 0.6121, 0.2301, 0.339, 0.6193, 0.3874, 0.5369, 0.9228, 0.2665], [0.7729, 0.3484, 0.2997, 0.3642, 0.8471, 0.0581, 0.4394, 0.9351, 0.1332, 0.4958, 0.0727, 0.8535, 0.8716, 0.2271, 0.2066, 0.7088, 0.246, 0.406, 0.7884, 0.0696]], [[0.3331, 0.3136, 0.0511, 0.5682, 0.1414, 0.6665, 0.9347, 0.0562, 0.4809, 0.753, 0.1168, 0.4563, 0.5621, 0.4649, 0.6112, 0.8292, 0.1612, 0.3337, 0.5962, 0.6103], [0.91, 0.7494, 0.1202, 0.9278, 0.7657, 0.6444, 0.5974, 0.4119, 0.0036, 0.0572, 0.5567, 0.9241, 0.1336, 0.1586, 0.9337, 0.197, 0.9916, 0.5135, 0.3066, 0.4559], [0.8773, 0.5874, 0.8702, 0.7165, 0.0223, 0.7564, 0.6123, 0.6003, 0.8566, 0.3775, 0.1125, 0.1891, 0.5149, 0.7912, 0.6186, 0.6543, 0.772, 0.4847, 0.5727, 0.1381]]]]], 3, Con44605), 
LMin10674 = minimum_layer([Zer97112,Con44605], Min10674), 
LRes96720 = reshape_layer(Min10674, [2, 72], Res96720), 
LAve7731 = average_layer([[[[[0.8959], [0.0125]], [[0.7551], [0.8602]]]], [[[[0.2389], [0.1977]], [[0.6365], [0.6121]]]]], Ave7731), 
LRes95458 = reshape_layer(Ave7731, [2, 2], Res95458), 
LDot58445 = dot_layer(Res96720,Res95458, 1, 1, Dot58445), 
exec_layers([LAve64330,LFla76473,LCon787,LAdd25319,LRes83749,LFla62830,LGlo21003,LAdd5470,LMin19937,LRes83257,LRes54215,LRes10005,LCon43904,LRes69970,LZer97112,LCro37696,LZer20313,LCon44605,LMin10674,LRes96720,LAve7731,LRes95458,LDot58445],["Ave64330","Fla76473","Con787","Add25319","Res83749","Fla62830","Glo21003","Add5470","Min19937","Res83257","Res54215","Res10005","Con43904","Res69970","Zer97112","Cro37696","Zer20313","Con44605","Min10674","Res96720","Ave7731","Res95458","Dot58445"],Dot58445,"Dot58445")

Actual (Unparsed): [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.4177661, 0.4419927], [0.2921094, 0.3090491], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.417766085128,0.441992675434],[0.29210941310599997,0.3090490722305],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0],[0.0,0.0]]]

Actual:   [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0.4178, 0.442], [0.2922, 0.3091], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]]

Expected: [[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0.4178, 0.442], [0.2922, 0.3091], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]]