import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Lea29431 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))
in0Con83705 = tf.keras.layers.Input(shape=([2, 2]))
in0Den87873 = tf.keras.layers.Input(shape=([2, 5]))
in0Mul36673 = tf.keras.layers.Input(shape=([1, 1]))
in1Mul36673 = tf.keras.layers.Input(shape=([1, 1]))
in0Con36198 = tf.keras.layers.Input(shape=([2, 2]))

Lea29431 = keras.layers.LeakyReLU(alpha=6.622820498518515, name = 'Lea29431', input_shape=(1, 1, 1, 1))(in0Lea29431)
Res49093 = keras.layers.Reshape((1, 1, 1), name = 'Res49093', )(Lea29431)
Res6979 = keras.layers.Reshape((1, 1), name = 'Res6979', )(Res49093)
Zer2554 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer2554', )(Res6979)
Con83705 = keras.layers.Concatenate(axis=2, name = 'Con83705', )([Zer2554,in0Con83705])
Den87873 = keras.layers.Dense(3,name = 'Den87873', )(in0Den87873)
Mul36673 = keras.layers.Multiply(name = 'Mul36673', )([in0Mul36673,in1Mul36673])
Zer23029 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer23029', )(Mul36673)
Con36198 = keras.layers.Concatenate(axis=2, name = 'Con36198', )([Zer23029,in0Con36198])
Sub84809 = keras.layers.Subtract(name = 'Sub84809', )([Den87873,Con36198])
Sof22211 = keras.layers.Softmax(axis=1, name = 'Sof22211', )(Sub84809)
Sub57514 = keras.layers.Subtract(name = 'Sub57514', )([Con83705,Sof22211])
Res66674 = keras.layers.Reshape((2, 3, 1), name = 'Res66674', )(Sub57514)
Sep39838 = keras.layers.SeparableConv2D(4, (1, 1),strides=(1, 1), padding='valid', name = 'Sep39838', )(Res66674)
model = tf.keras.models.Model(inputs=[in0Lea29431,in0Con83705,in0Den87873,in0Mul36673,in1Mul36673,in0Con36198], outputs=Sep39838)
w = model.get_layer('Den87873').get_weights() 
w[0] = np.array([[0.4697, 0.4821, 0.9021], [0.5682, 0.8397, 0.4264], [0.9342, 0.8312, 0.2262], [0.652, 0.7786, 0.0659], [0.0289, 0.9052, 0.1251]])
w[1] = np.array([0.5853, 0.8217, 0.398])
model.get_layer('Den87873').set_weights(w) 
w = model.get_layer('Sep39838').get_weights() 
w[0] = np.array([[[[0.0752]]]])
w[1] = np.array([[[[0.6651, 0.4965, 0.2636, 0.2989]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep39838').set_weights(w) 
in0Lea29431 = tf.constant([[[[[0.843]]]]])
in0Con83705 = tf.constant([[[0.3948, 0.3029], [0.7117, 0.8459]]])
in0Den87873 = tf.constant([[[0.3127, 0.2274, 0.8874, 0.4005, 0.0236], [0.4662, 0.746, 0.7561, 0.4017, 0.964]]])
in0Mul36673 = tf.constant([[[0.2704]]])
in1Mul36673 = tf.constant([[[0.556]]])
in0Con36198 = tf.constant([[[0.9715, 0.4238], [0.0761, 0.5469]]])
print (np.array2string(model.predict([in0Lea29431,in0Con83705,in0Den87873,in0Mul36673,in1Mul36673,in0Con36198],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sep39838.png')

LLea29431 = leaky_relu_layer([[[[[0.843]]]]], 6.622820498518515, Lea29431), 
LRes49093 = reshape_layer(Lea29431, [1, 1, 1], Res49093), 
LRes6979 = reshape_layer(Res49093, [1, 1], Res6979), 
LZer2554 = zero_padding1D_layer(Res6979, 1, 0, Zer2554), 
LCon83705 = concatenate_layer([Zer2554,[[[0.3948, 0.3029], [0.7117, 0.8459]]]], 2, Con83705), 
LDen87873 = dense_layer([[[0.3127, 0.2274, 0.8874, 0.4005, 0.0236], [0.4662, 0.746, 0.7561, 0.4017, 0.964]]], [[0.4697, 0.4821, 0.9021], [0.5682, 0.8397, 0.4264], [0.9342, 0.8312, 0.2262], [0.652, 0.7786, 0.0659], [0.0289, 0.9052, 0.1251]],[0.5853, 0.8217, 0.398], Den87873), 
LMul36673 = multiply_layer([[[[0.2704]]], [[[0.556]]]], Mul36673), 
LZer23029 = zero_padding1D_layer(Mul36673, 1, 0, Zer23029), 
LCon36198 = concatenate_layer([Zer23029,[[[0.9715, 0.4238], [0.0761, 0.5469]]]], 2, Con36198), 
LSub84809 = subtract_layer(Den87873,Con36198, Sub84809), 
LSof22211 = softmax_layer(Sub84809, 1, Sof22211), 
LSub57514 = subtract_layer(Con83705,Sof22211, Sub57514), 
LRes66674 = reshape_layer(Sub57514, [2, 3, 1], Res66674), 
LSep39838 = separable_conv2D_layer(Res66674, 1, 1,[[[[[0.0752]]]],[[[[0.6651, 0.4965, 0.2636, 0.2989]]]]],[0, 0, 0, 0], 1, 1, false, Sep39838), 
exec_layers([LLea29431,LRes49093,LRes6979,LZer2554,LCon83705,LDen87873,LMul36673,LZer23029,LCon36198,LSub84809,LSof22211,LSub57514,LRes66674,LSep39838],["Lea29431","Res49093","Res6979","Zer2554","Con83705","Den87873","Mul36673","Zer23029","Con36198","Sub84809","Sof22211","Sub57514","Res66674","Sep39838"],Sep39838,"Sep39838")

Actual (Unparsed): [[[[-0.0234876, -0.0175336, -0.0093089, -0.0105555], [0.0145182, 0.0108379, 0.0057540, 0.0065246], [-0.0058355, -0.0043562, -0.0023128, -0.0026225]], [[0.0156352, 0.0116717, 0.0061967, 0.0070265], [-0.0091916, -0.0068615, -0.0036429, -0.0041307], [0.0132778, 0.0099119, 0.0052624, 0.0059671]]]]

Expected (Unparsed): [[[[-0.023487607112741126,-0.01753359935569985,-0.00930887571029704,-0.010555474012927864],[0.01451821098514278,0.010837906711958186,0.005754022576580419,0.006524572640894869],[-0.005835461521542837,-0.00435619703119233,-0.002312776510417519,-0.0026224920294529454]],[[0.01563517047274113,0.011671721755699851,0.006196708670297041,0.007026541052927867],[-0.009191558105142782,-0.006861537511958189,-0.00364290289658042,-0.0041307423208948695],[0.013277770897542842,0.009911912871192334,0.00526239724641752,0.0059671112934529475]]]]

Actual:   [[[[-0.0234, -0.0175, -0.0093, -0.0105], [0.0146, 0.0109, 0.0058, 0.0066], [-0.0058, -0.0043, -0.0023, -0.0026]], [[0.0157, 0.0117, 0.0062, 0.0071], [-0.0091, -0.0068, -0.0036, -0.0041], [0.0133, 0.01, 0.0053, 0.006]]]]

Expected: [[[[-0.0234, -0.0175, -0.0093, -0.0105], [0.0146, 0.0109, 0.0058, 0.0066], [-0.0058, -0.0043, -0.0023, -0.0026]], [[0.0157, 0.0117, 0.0062, 0.0071], [-0.0091, -0.0068, -0.0036, -0.0041], [0.0133, 0.01, 0.0053, 0.006]]]]