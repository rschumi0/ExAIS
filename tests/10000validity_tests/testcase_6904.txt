import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sep5140 = tf.keras.layers.Input(shape=([2, 1]))
in0Max74223 = tf.keras.layers.Input(shape=([1, 2]))
in1Max74223 = tf.keras.layers.Input(shape=([1, 2]))
in0Con48209 = tf.keras.layers.Input(shape=([4, 5, 3]))
in0Min90091 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Min90091 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Max52902 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Max52902 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con30481 = tf.keras.layers.Input(shape=([2, 4, 3]))

Sep5140 = keras.layers.SeparableConv1D(2, (2),strides=(1), padding='same', name = 'Sep5140', )(in0Sep5140)
Max74223 = keras.layers.Maximum(name = 'Max74223', )([in0Max74223,in1Max74223])
ELU87229 = keras.layers.ELU(alpha=-9.941911967880909, name = 'ELU87229', )(Max74223)
Dot40947 = keras.layers.Dot(axes=(2, 2), name = 'Dot40947', )([Sep5140,ELU87229])
Res50633 = keras.layers.Reshape((2, 1, 1), name = 'Res50633', )(Dot40947)
Zer26568 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer26568', )(Res50633)
Zer23597 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer23597', )(Zer26568)
Con48209 = keras.layers.Concatenate(axis=3, name = 'Con48209', )([Zer23597,in0Con48209])
Min90091 = keras.layers.Minimum(name = 'Min90091', )([in0Min90091,in1Min90091])
Res86099 = keras.layers.Reshape((2, 2, 4), name = 'Res86099', )(Min90091)
Zer4043 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer4043', )(Res86099)
Max52902 = keras.layers.Maximum(name = 'Max52902', )([in0Max52902,in1Max52902])
Zer57391 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer57391', )(Max52902)
Ave4475 = keras.layers.AveragePooling2D(pool_size=(2, 1), strides=(2, 1), padding='valid', name = 'Ave4475', )(Zer57391)
Zer72269 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer72269', )(Ave4475)
Con30481 = keras.layers.Concatenate(axis=3, name = 'Con30481', )([Zer72269,in0Con30481])
Mul61408 = keras.layers.Multiply(name = 'Mul61408', )([Zer4043,Con30481])
Zer29478 = keras.layers.ZeroPadding2D(padding=((2, 0), (1, 0)), name = 'Zer29478', )(Mul61408)
Ave36968 = keras.layers.Average(name = 'Ave36968', )([Con48209,Zer29478])
model = tf.keras.models.Model(inputs=[in0Sep5140,in0Max74223,in1Max74223,in0Con48209,in0Min90091,in1Min90091,in0Max52902,in1Max52902,in0Con30481], outputs=Ave36968)
w = model.get_layer('Sep5140').get_weights() 
w[0] = np.array([[[0.9383]], [[0.8202]]])
w[1] = np.array([[[0.4541, 0.0275]]])
w[2] = np.array([0, 0])
model.get_layer('Sep5140').set_weights(w) 
in0Sep5140 = tf.constant([[[0.8826], [0.18]]])
in0Max74223 = tf.constant([[[0.8185, 0.1707]]])
in1Max74223 = tf.constant([[[0.797, 0.298]]])
in0Con48209 = tf.constant([[[[0.6584, 0.9886, 0.8145], [0.6456, 0.4942, 0.1179], [0.4071, 0.3269, 0.6094], [0.0156, 0.753, 0.5261], [0.2861, 0.6121, 0.9783]], [[0.6671, 0.8027, 0.8908], [0.954, 0.8327, 0.3985], [0.7146, 0.1731, 0.3702], [0.7347, 0.338, 0.1207], [0.0666, 0.8611, 0.6643]], [[0.3722, 0.6319, 0.5927], [0.4227, 0.5581, 0.9884], [0.3681, 0.094, 0.0266], [0.6532, 0.1225, 0.5894], [0.5027, 0.3231, 0.4359]], [[0.4034, 0.2935, 0.6238], [0.2413, 0.2007, 0.6217], [0.867, 0.6682, 0.575], [0.4848, 0.5785, 0.1826], [0.0209, 0.0279, 0.5006]]]])
in0Min90091 = tf.constant([[[[[0.0903, 0.9238], [0.6018, 0.2084]], [[0.6004, 0.4107], [0.7027, 0.0691]]], [[[0.03, 0.714], [0.3162, 0.7224]], [[0.943, 0.7567], [0.0094, 0.2408]]]]])
in1Min90091 = tf.constant([[[[[0.1956, 0.4566], [0.2166, 0.941]], [[0.4587, 0.8907], [0.0903, 0.6236]]], [[[0.6948, 0.7958], [0.7112, 0.9408]], [[0.6259, 0.0198], [0.6438, 0.4777]]]]])
in0Max52902 = tf.constant([[[[0.19]]]])
in1Max52902 = tf.constant([[[[0.8618]]]])
in0Con30481 = tf.constant([[[[0.7398, 0.5133, 0.2721], [0.8747, 0.368, 0.0132], [0.8239, 0.3382, 0.3271], [0.06, 0.4648, 0.2173]], [[0.8484, 0.3197, 0.4994], [0.4644, 0.2884, 0.2681], [0.8904, 0.142, 0.2855], [0.5351, 0.7356, 0.7694]]]])
print (np.array2string(model.predict([in0Sep5140,in0Max74223,in1Max74223,in0Con48209,in0Min90091,in1Min90091,in0Max52902,in1Max52902,in0Con30481],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave36968.png')

LSep5140 = separable_conv1D_layer([[[0.8826], [0.18]]], 2,[[[[0.9383]], [[0.8202]]],[[[0.4541, 0.0275]]]],[0, 0], 1, true, Sep5140), 
LMax74223 = maximum_layer([[[[0.8185, 0.1707]]], [[[0.797, 0.298]]]], Max74223), 
LELU87229 = elu_layer(Max74223, -9.941911967880909, ELU87229), 
LDot40947 = dot_layer(Sep5140,ELU87229, 2, 2, Dot40947), 
LRes50633 = reshape_layer(Dot40947, [2, 1, 1], Res50633), 
LZer26568 = zero_padding2D_layer(Res50633, 1, 1, 1, 1, Zer26568), 
LZer23597 = zero_padding2D_layer(Zer26568, 0, 0, 2, 0, Zer23597), 
LCon48209 = concatenate_layer([Zer23597,[[[[0.6584, 0.9886, 0.8145], [0.6456, 0.4942, 0.1179], [0.4071, 0.3269, 0.6094], [0.0156, 0.753, 0.5261], [0.2861, 0.6121, 0.9783]], [[0.6671, 0.8027, 0.8908], [0.954, 0.8327, 0.3985], [0.7146, 0.1731, 0.3702], [0.7347, 0.338, 0.1207], [0.0666, 0.8611, 0.6643]], [[0.3722, 0.6319, 0.5927], [0.4227, 0.5581, 0.9884], [0.3681, 0.094, 0.0266], [0.6532, 0.1225, 0.5894], [0.5027, 0.3231, 0.4359]], [[0.4034, 0.2935, 0.6238], [0.2413, 0.2007, 0.6217], [0.867, 0.6682, 0.575], [0.4848, 0.5785, 0.1826], [0.0209, 0.0279, 0.5006]]]]], 3, Con48209), 
LMin90091 = minimum_layer([[[[[[0.0903, 0.9238], [0.6018, 0.2084]], [[0.6004, 0.4107], [0.7027, 0.0691]]], [[[0.03, 0.714], [0.3162, 0.7224]], [[0.943, 0.7567], [0.0094, 0.2408]]]]], [[[[[0.1956, 0.4566], [0.2166, 0.941]], [[0.4587, 0.8907], [0.0903, 0.6236]]], [[[0.6948, 0.7958], [0.7112, 0.9408]], [[0.6259, 0.0198], [0.6438, 0.4777]]]]]], Min90091), 
LRes86099 = reshape_layer(Min90091, [2, 2, 4], Res86099), 
LZer4043 = zero_padding2D_layer(Res86099, 0, 0, 2, 0, Zer4043), 
LMax52902 = maximum_layer([[[[[0.19]]]], [[[[0.8618]]]]], Max52902), 
LZer57391 = zero_padding2D_layer(Max52902, 1, 1, 1, 1, Zer57391), 
LAve4475 = average_pooling2D_layer(Zer57391, 2, 1, 2, 1, false, Ave4475), 
LZer72269 = zero_padding2D_layer(Ave4475, 1, 0, 1, 0, Zer72269), 
LCon30481 = concatenate_layer([Zer72269,[[[[0.7398, 0.5133, 0.2721], [0.8747, 0.368, 0.0132], [0.8239, 0.3382, 0.3271], [0.06, 0.4648, 0.2173]], [[0.8484, 0.3197, 0.4994], [0.4644, 0.2884, 0.2681], [0.8904, 0.142, 0.2855], [0.5351, 0.7356, 0.7694]]]]], 3, Con30481), 
LMul61408 = multiply_layer([Zer4043,Con30481], Mul61408), 
LZer29478 = zero_padding2D_layer(Mul61408, 2, 0, 1, 0, Zer29478), 
LAve36968 = average_layer([Con48209,Zer29478], Ave36968), 
exec_layers([LSep5140,LMax74223,LELU87229,LDot40947,LRes50633,LZer26568,LZer23597,LCon48209,LMin90091,LRes86099,LZer4043,LMax52902,LZer57391,LAve4475,LZer72269,LCon30481,LMul61408,LZer29478,LAve36968],["Sep5140","Max74223","ELU87229","Dot40947","Res50633","Zer26568","Zer23597","Con48209","Min90091","Res86099","Zer4043","Max52902","Zer57391","Ave4475","Zer72269","Con30481","Mul61408","Zer29478","Ave36968"],Ave36968,"Ave36968")

Actual (Unparsed): [[[[0.0000000, 0.3292000, 0.4943000, 0.4072500], [0.0000000, 0.3228000, 0.2471000, 0.0589500], [0.0000000, 0.2035500, 0.1634500, 0.3047000], [0.0000000, 0.0078000, 0.3765000, 0.2630500], [0.0000000, 0.1430500, 0.3060500, 0.4891500]], [[0.0000000, 0.3335500, 0.4013500, 0.4454000], [0.0000000, 0.4770000, 0.4163500, 0.1992500], [0.0000000, 0.3573000, 0.0865500, 0.1851000], [0.1853375, 0.3673500, 0.1690000, 0.0603500], [0.0000000, 0.0333000, 0.4305500, 0.3321500]], [[0.0000000, 0.1861000, 0.3159500, 0.2963500], [0.0000000, 0.2113500, 0.2790500, 0.4942000], [0.0000000, 0.1840500, 0.0470000, 0.0133000], [0.0320794, 0.5146964, 0.0978771, 0.3287838], [0.0000000, 0.2636710, 0.1825357, 0.2254577]], [[0.0000000, 0.2017000, 0.1467500, 0.3119000], [0.0000000, 0.1206500, 0.1003500, 0.3108500], [0.0000000, 0.4335000, 0.3341000, 0.2875000], [0.0064635, 0.5602728, 0.3117002, 0.1944226], [0.0000000, 0.0157475, 0.0174073, 0.3429357]]]]

Expected (Unparsed): [[[[0,0.3292,0.4943,0.40725],[0,0.3228,0.2471,0.05895],[0,0.20355,0.16345,0.3047],[0,0.0078,0.3765,0.26305],[0,0.14305,0.30605,0.48915]],[[0,0.33355,0.40135,0.4454],[0,0.477,0.41635,0.19925],[0,0.3573,0.08655,0.1851],[0.18533754868257152,0.36735,0.169,0.06035],[0,0.0333,0.43055,0.33215]],[[0,0.1861,0.31595,0.29635],[0,0.21135,0.27905,0.4942],[0,0.18405,0.047,0.0133],[0.03207937590495,0.51469637,0.09787705999999999,0.32878382],[0.0,0.26367100000000004,0.18253572,0.225457715]],[[0,0.2017,0.14675,0.3119],[0,0.12065,0.10035,0.31085],[0,0.4335,0.3341,0.2875],[0.0064635,0.5602727999999999,0.3117002,0.1944226],[0.0,0.01574749,0.01740732,0.34293576000000003]]]]

Actual:   [[[[0, 0.3292, 0.4943, 0.4073], [0, 0.3228, 0.2471, 0.059], [0, 0.2036, 0.1635, 0.3047], [0, 0.0078, 0.3765, 0.2631], [0, 0.1431, 0.3061, 0.4892]], [[0, 0.3336, 0.4014, 0.4454], [0, 0.477, 0.4164, 0.1993], [0, 0.3573, 0.0866, 0.1851], [0.1854, 0.3674, 0.169, 0.0604], [0, 0.0333, 0.4306, 0.3322]], [[0, 0.1861, 0.316, 0.2964], [0, 0.2114, 0.2791, 0.4942], [0, 0.1841, 0.047, 0.0133], [0.0321, 0.5147, 0.0979, 0.3288], [0, 0.2637, 0.1826, 0.2255]], [[0, 0.2017, 0.1468, 0.3119], [0, 0.1207, 0.1004, 0.3109], [0, 0.4335, 0.3341, 0.2875], [0.0065, 0.5603, 0.3118, 0.1945], [0, 0.0158, 0.0175, 0.343]]]]

Expected: [[[[0, 0.3292, 0.4943, 0.4073], [0, 0.3228, 0.2471, 0.059], [0, 0.2036, 0.1635, 0.3047], [0, 0.0078, 0.3765, 0.2631], [0, 0.1431, 0.3061, 0.4892]], [[0, 0.3336, 0.4014, 0.4454], [0, 0.477, 0.4164, 0.1993], [0, 0.3573, 0.0866, 0.1851], [0.1854, 0.3674, 0.169, 0.0604], [0, 0.0333, 0.4306, 0.3322]], [[0, 0.1861, 0.316, 0.2964], [0, 0.2114, 0.2791, 0.4942], [0, 0.1841, 0.047, 0.0133], [0.0321, 0.5147, 0.0979, 0.3288], [0, 0.2637, 0.1826, 0.2255]], [[0, 0.2017, 0.1468, 0.3119], [0, 0.1207, 0.1004, 0.3109], [0, 0.4335, 0.3341, 0.2875], [0.0065, 0.5603, 0.3118, 0.1945], [0, 0.0158, 0.0175, 0.343]]]]