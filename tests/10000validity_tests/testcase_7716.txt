import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave28301 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Ave28301 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))

Ave28301 = keras.layers.Average(name = 'Ave28301', )([in0Ave28301,in1Ave28301])
Zer87992 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer87992', )(Ave28301)
Cro16140 = keras.layers.Cropping3D(cropping=((0, 0), (0, 0), (0, 0)), name = 'Cro16140', )(Zer87992)
model = tf.keras.models.Model(inputs=[in0Ave28301,in1Ave28301], outputs=Cro16140)
in0Ave28301 = tf.constant([[[[[0.812, 0.0749], [0.0605, 0.2262]], [[0.2346, 0.9529], [0.1882, 0.9217]]], [[[0.1157, 0.4582], [0.4365, 0.7145]], [[0.3123, 0.2485], [0.1925, 0.5818]]]]])
in1Ave28301 = tf.constant([[[[[0.9906, 0.4267], [0.6094, 0.4038]], [[0.8147, 0.5197], [0.3396, 0.5206]]], [[[0.3683, 0.5783], [0.6684, 0.952]], [[0.9334, 0.1932], [0.8475, 0.7481]]]]])
print (np.array2string(model.predict([in0Ave28301,in1Ave28301],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Cro16140.png')

LAve28301 = average_layer([[[[[[0.812, 0.0749], [0.0605, 0.2262]], [[0.2346, 0.9529], [0.1882, 0.9217]]], [[[0.1157, 0.4582], [0.4365, 0.7145]], [[0.3123, 0.2485], [0.1925, 0.5818]]]]], [[[[[0.9906, 0.4267], [0.6094, 0.4038]], [[0.8147, 0.5197], [0.3396, 0.5206]]], [[[0.3683, 0.5783], [0.6684, 0.952]], [[0.9334, 0.1932], [0.8475, 0.7481]]]]]], Ave28301), 
LZer87992 = zero_padding3D_layer(Ave28301, 1, 1, 1, 1, 1, 1, Zer87992), 
LCro16140 = cropping3D_layer(Zer87992, 0, 0, 0, 0, 0, 0, Cro16140), 
exec_layers([LAve28301,LZer87992,LCro16140],["Ave28301","Zer87992","Cro16140"],Cro16140,"Cro16140")

Actual (Unparsed): [[[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.9013000, 0.2508000], [0.3349500, 0.3150000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.5246500, 0.7363000], [0.2639000, 0.7211500], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.2420000, 0.5182500], [0.5524500, 0.8332500], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.6228500, 0.2208500], [0.5200000, 0.6649500], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]]]]

Expected (Unparsed): [[[[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]]],[[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0.9013,0.2508],[0.33495,0.315],[0,0]],[[0,0],[0.52465,0.7363],[0.2639,0.72115],[0,0]],[[0,0],[0,0],[0,0],[0,0]]],[[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0.242,0.51825],[0.55245,0.83325],[0,0]],[[0,0],[0.62285,0.22085],[0.52,0.6649499999999999],[0,0]],[[0,0],[0,0],[0,0],[0,0]]],[[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0],[0,0]]]]]

Actual:   [[[[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0.9013, 0.2508], [0.335, 0.315], [0, 0]], [[0, 0], [0.5247, 0.7363], [0.2639, 0.7212], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0.242, 0.5183], [0.5525, 0.8333], [0, 0]], [[0, 0], [0.6229, 0.2209], [0.52, 0.665], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]]]]

Expected: [[[[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0.9013, 0.2508], [0.335, 0.315], [0, 0]], [[0, 0], [0.5247, 0.7363], [0.2639, 0.7212], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0.242, 0.5183], [0.5525, 0.8333], [0, 0]], [[0, 0], [0.6229, 0.2209], [0.52, 0.665], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0], [0, 0]]]]]