import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot91477 = tf.keras.layers.Input(shape=([3, 3]))
in1Dot91477 = tf.keras.layers.Input(shape=([3, 3]))
in0Con40756 = tf.keras.layers.Input(shape=([45]))
in0Per49757 = tf.keras.layers.Input(shape=([4, 1]))
in0Con83853 = tf.keras.layers.Input(shape=([53]))
in0Sub622 = tf.keras.layers.Input(shape=([2, 3, 3, 3]))
in1Sub622 = tf.keras.layers.Input(shape=([2, 3, 3, 3]))

Dot91477 = keras.layers.Dot(axes=(2, 1), name = 'Dot91477', )([in0Dot91477,in1Dot91477])
Fla79107 = keras.layers.Flatten(name = 'Fla79107', )(Dot91477)
Con40756 = keras.layers.Concatenate(axis=1, name = 'Con40756', )([Fla79107,in0Con40756])
Per49757 = keras.layers.Permute((1,2), name = 'Per49757',)(in0Per49757)
Res44656 = keras.layers.Reshape((4, 1, 1), name = 'Res44656', )(Per49757)
Glo56128 = keras.layers.GlobalMaxPool2D(name = 'Glo56128', )(Res44656)
Con83853 = keras.layers.Concatenate(axis=1, name = 'Con83853', )([Glo56128,in0Con83853])
Sub622 = keras.layers.Subtract(name = 'Sub622', )([in0Sub622,in1Sub622])
Fla64786 = keras.layers.Flatten(name = 'Fla64786', )(Sub622)
Mul73246 = keras.layers.Multiply(name = 'Mul73246', )([Con83853,Fla64786])
Sub50764 = keras.layers.Subtract(name = 'Sub50764', )([Con40756,Mul73246])
model = tf.keras.models.Model(inputs=[in0Dot91477,in1Dot91477,in0Con40756,in0Per49757,in0Con83853,in0Sub622,in1Sub622], outputs=Sub50764)
in0Dot91477 = tf.constant([[[0.4082, 0.2524, 0.6002], [0.8304, 0.0253, 0.0264], [0.4728, 0.5864, 0.1514]]])
in1Dot91477 = tf.constant([[[0.5144, 0.3399, 0.7346], [0.2456, 0.0863, 0.7389], [0.1837, 0.9582, 0.3306]]])
in0Con40756 = tf.constant([[0.4936, 0.1466, 0.2636, 0.4202, 0.1291, 0.7564, 0.2243, 0.5607, 0.3783, 0.811, 0.127, 0.0844, 0.734, 0.0961, 0.1073, 0.2504, 0.1954, 0.3673, 0.8174, 0.235, 0.1831, 0.9952, 0.4623, 0.8824, 0.4502, 0.3275, 0.5588, 0.4799, 0.3515, 0.3945, 0.5692, 0.332, 0.9206, 0.203, 0.7885, 0.3032, 0.8204, 0.2792, 0.1245, 0.1682, 0.3869, 0.3028, 0.698, 0.5658, 0.6605]])
in0Per49757 = tf.constant([[[1.2758], [1.9621], [1.0894], [1.762]]])
in0Con83853 = tf.constant([[0.1047, 0.6513, 0.7099, 0.2637, 0.3848, 0.3581, 0.8885, 0.6316, 0.8114, 0.6277, 0.2098, 0.7449, 0.839, 0.7301, 0.7668, 0.9567, 0.6571, 0.9573, 0.5751, 0.2081, 0.3895, 0.4109, 0.6451, 0.298, 0.6779, 0.8026, 0.0517, 0.7657, 0.5446, 0.8556, 0.6297, 0.1756, 0.9986, 0.965, 0.3201, 0.6246, 0.3218, 0.0115, 0.9925, 0.9766, 0.3518, 0.6074, 0.7777, 0.667, 0.3645, 0.5987, 0.5601, 0.9217, 0.3517, 0.3477, 0.2968, 0.8838, 0.5877]])
in0Sub622 = tf.constant([[[[[0.1621, 0.5871, 0.3576], [0.9293, 0.2087, 0.8064], [0.6594, 0.532, 0.93]], [[0.7462, 0.8973, 0.7681], [0.8225, 0.7617, 0.119], [0.2854, 0.0685, 0.5736]], [[0.6724, 0.7915, 0.8862], [0.5968, 0.3093, 0.5875], [0.4975, 0.7195, 0.6942]]], [[[0.0337, 0.2191, 0.1747], [0.5659, 0.2316, 0.4922], [0.5619, 0.8838, 0.0101]], [[0.7662, 0.5213, 0.6481], [0.6422, 0.022, 0.0427], [0.7262, 0.5868, 0.3819]], [[0.8982, 0.9395, 0.9472], [0.6905, 0.228, 0.8699], [0.272, 0.169, 0.8823]]]]])
in1Sub622 = tf.constant([[[[[0.3297, 0.7844, 0.2487], [0.7206, 0.2061, 0.1175], [0.4712, 0.7073, 0.4382]], [[0.1606, 0.9038, 0.3059], [0.215, 0.6752, 0.8674], [0.3698, 0.0911, 0.9268]], [[0.897, 0.4574, 0.6118], [0.6969, 0.7632, 0.2548], [0.2082, 0.6888, 0.0724]]], [[[0.5829, 0.5794, 0.5213], [0.4304, 0.2843, 0.5145], [0.2177, 0.41, 0.139]], [[0.1217, 0.3378, 0.589], [0.8426, 0.7322, 0.678], [0.745, 0.9933, 0.3234]], [[0.7692, 0.8823, 0.9828], [0.1673, 0.2378, 0.1468], [0.6629, 0.552, 0.4654]]]]])
print (np.array2string(model.predict([in0Dot91477,in1Dot91477,in0Con40756,in0Per49757,in0Con83853,in0Sub622,in1Sub622],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub50764.png')

LDot91477 = dot_layer([[[0.4082, 0.2524, 0.6002], [0.8304, 0.0253, 0.0264], [0.4728, 0.5864, 0.1514]]], [[[0.5144, 0.3399, 0.7346], [0.2456, 0.0863, 0.7389], [0.1837, 0.9582, 0.3306]]], 2, 1, Dot91477), 
LFla79107 = flatten_layer(Dot91477, Fla79107), 
LCon40756 = concatenate_layer([Fla79107,[[0.4936, 0.1466, 0.2636, 0.4202, 0.1291, 0.7564, 0.2243, 0.5607, 0.3783, 0.811, 0.127, 0.0844, 0.734, 0.0961, 0.1073, 0.2504, 0.1954, 0.3673, 0.8174, 0.235, 0.1831, 0.9952, 0.4623, 0.8824, 0.4502, 0.3275, 0.5588, 0.4799, 0.3515, 0.3945, 0.5692, 0.332, 0.9206, 0.203, 0.7885, 0.3032, 0.8204, 0.2792, 0.1245, 0.1682, 0.3869, 0.3028, 0.698, 0.5658, 0.6605]]], 1, Con40756), 
LPer49757 = permute_layer([[[1.2758], [1.9621], [1.0894], [1.762]]], 1,2, Per49757), 
LRes44656 = reshape_layer(Per49757, [4, 1, 1], Res44656), 
LGlo56128 = global_max_pool2D_layer(Res44656, Glo56128), 
LCon83853 = concatenate_layer([Glo56128,[[0.1047, 0.6513, 0.7099, 0.2637, 0.3848, 0.3581, 0.8885, 0.6316, 0.8114, 0.6277, 0.2098, 0.7449, 0.839, 0.7301, 0.7668, 0.9567, 0.6571, 0.9573, 0.5751, 0.2081, 0.3895, 0.4109, 0.6451, 0.298, 0.6779, 0.8026, 0.0517, 0.7657, 0.5446, 0.8556, 0.6297, 0.1756, 0.9986, 0.965, 0.3201, 0.6246, 0.3218, 0.0115, 0.9925, 0.9766, 0.3518, 0.6074, 0.7777, 0.667, 0.3645, 0.5987, 0.5601, 0.9217, 0.3517, 0.3477, 0.2968, 0.8838, 0.5877]]], 1, Con83853), 
LSub622 = subtract_layer([[[[[0.1621, 0.5871, 0.3576], [0.9293, 0.2087, 0.8064], [0.6594, 0.532, 0.93]], [[0.7462, 0.8973, 0.7681], [0.8225, 0.7617, 0.119], [0.2854, 0.0685, 0.5736]], [[0.6724, 0.7915, 0.8862], [0.5968, 0.3093, 0.5875], [0.4975, 0.7195, 0.6942]]], [[[0.0337, 0.2191, 0.1747], [0.5659, 0.2316, 0.4922], [0.5619, 0.8838, 0.0101]], [[0.7662, 0.5213, 0.6481], [0.6422, 0.022, 0.0427], [0.7262, 0.5868, 0.3819]], [[0.8982, 0.9395, 0.9472], [0.6905, 0.228, 0.8699], [0.272, 0.169, 0.8823]]]]], [[[[[0.3297, 0.7844, 0.2487], [0.7206, 0.2061, 0.1175], [0.4712, 0.7073, 0.4382]], [[0.1606, 0.9038, 0.3059], [0.215, 0.6752, 0.8674], [0.3698, 0.0911, 0.9268]], [[0.897, 0.4574, 0.6118], [0.6969, 0.7632, 0.2548], [0.2082, 0.6888, 0.0724]]], [[[0.5829, 0.5794, 0.5213], [0.4304, 0.2843, 0.5145], [0.2177, 0.41, 0.139]], [[0.1217, 0.3378, 0.589], [0.8426, 0.7322, 0.678], [0.745, 0.9933, 0.3234]], [[0.7692, 0.8823, 0.9828], [0.1673, 0.2378, 0.1468], [0.6629, 0.552, 0.4654]]]]], Sub622), 
LFla64786 = flatten_layer(Sub622, Fla64786), 
LMul73246 = multiply_layer([Con83853,Fla64786], Mul73246), 
LSub50764 = subtract_layer(Con40756,Mul73246, Sub50764), 
exec_layers([LDot91477,LFla79107,LCon40756,LPer49757,LRes44656,LGlo56128,LCon83853,LSub622,LFla64786,LMul73246,LSub50764],["Dot91477","Fla79107","Con40756","Per49757","Res44656","Glo56128","Con83853","Sub622","Fla64786","Mul73246","Sub50764"],Sub50764,"Sub50764")

Actual (Unparsed): [[0.7110722, 0.7562982, 0.6138616, 0.2900650, 0.3090472, 0.3723451, 0.3476459, 0.5121366, 0.5200418, 0.0184442, 0.1506800, 0.1666304, -0.0323267, 0.0565265, 1.3028068, 0.2890179, 0.5823214, 0.6103878, 1.0260096, -0.0651409, 0.0272974, 0.7729890, 0.2826075, -0.1073248, 0.1641886, 0.1745885, -0.1317567, 0.8457936, 0.5108817, 0.3718584, 0.8792662, 0.4954852, 0.8863159, 0.1064819, -0.1297170, 0.6000609, 0.0773453, 0.2924497, 0.3938203, 0.7680970, 1.0255813, 1.1440985, 0.2144191, 1.1046351, 0.2641805, 0.7733795, 0.2449544, 0.1444396, -0.3140335, 0.3903467, 0.0513781, 0.8140191, 0.9042954, 0.4154879]]

Expected (Unparsed): [[0.7110722199999999,0.7562982500000001,0.61386163,0.29006499,0.30904721,0.3723451300000001,0.34764592000000005,0.51213657,0.5200418,0.018444159999999987,0.15068005000000004,0.16663044,-0.032326750000000015,0.05652649999999998,1.30280684,0.28901792000000004,0.58232142,0.61038772,1.0260095800000002,-0.06514091,0.027297360000000007,0.77298895,0.28260751,-0.10732476999999999,0.16418860000000002,0.17458846999999994,-0.13175668000000001,0.84579364,0.51088171,0.37185836000000005,0.8792662,0.49548519,0.88631588,0.10648188000000003,-0.12971700000000003,0.60006089,0.0773453,0.2924497,0.39382035000000004,0.768097,1.02558132,1.1440985399999999,0.21441912000000005,1.10463505,0.26418050000000004,0.7733795,0.24495435999999998,0.14443955999999997,-0.31403344,0.39034666,0.05137813000000002,0.81401912,0.9042954,0.41548787]]

Actual:   [[0.7111, 0.7563, 0.6139, 0.2901, 0.3091, 0.3724, 0.3477, 0.5122, 0.5201, 0.0185, 0.1507, 0.1667, -0.0323, 0.0566, 1.3029, 0.2891, 0.5824, 0.6104, 1.0261, -0.0651, 0.0273, 0.773, 0.2827, -0.1073, 0.1642, 0.1746, -0.1317, 0.8458, 0.5109, 0.3719, 0.8793, 0.4955, 0.8864, 0.1065, -0.1297, 0.6001, 0.0774, 0.2925, 0.3939, 0.7681, 1.0256, 1.1441, 0.2145, 1.1047, 0.2642, 0.7734, 0.245, 0.1445, -0.314, 0.3904, 0.0514, 0.8141, 0.9043, 0.4155]]

Expected: [[0.7111, 0.7563, 0.6139, 0.2901, 0.3091, 0.3724, 0.3477, 0.5122, 0.5201, 0.0185, 0.1507, 0.1667, -0.0323, 0.0566, 1.3029, 0.2891, 0.5824, 0.6104, 1.0261, -0.0651, 0.0273, 0.773, 0.2827, -0.1073, 0.1642, 0.1746, -0.1317, 0.8458, 0.5109, 0.3719, 0.8793, 0.4955, 0.8864, 0.1065, -0.1297, 0.6001, 0.0774, 0.2925, 0.3939, 0.7681, 1.0256, 1.1441, 0.2145, 1.1047, 0.2642, 0.7734, 0.245, 0.1445, -0.314, 0.3904, 0.0514, 0.8141, 0.9043, 0.4155]]