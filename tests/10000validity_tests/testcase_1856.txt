import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min9148 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Min9148 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Con87866 = tf.keras.layers.Input(shape=([2, 15]))
in0Sub5805 = tf.keras.layers.Input(shape=([3, 2, 3, 3]))
in1Sub5805 = tf.keras.layers.Input(shape=([3, 2, 3, 3]))

Min9148 = keras.layers.Minimum(name = 'Min9148', )([in0Min9148,in1Min9148])
Glo55664 = keras.layers.GlobalAveragePooling2D(name = 'Glo55664', )(Min9148)
Res26838 = keras.layers.Reshape((2, 1), name = 'Res26838', )(Glo55664)
Loc99528 = keras.layers.LocallyConnected1D(2, (1),strides=(1), name = 'Loc99528', )(Res26838)
Lay78117 = keras.layers.LayerNormalization(axis=2, epsilon=2.506798519580129, name = 'Lay78117', )(Loc99528)
Den84406 = keras.layers.Dense(3,name = 'Den84406', )(Lay78117)
Con87866 = keras.layers.Concatenate(axis=2, name = 'Con87866', )([Den84406,in0Con87866])
Sub5805 = keras.layers.Subtract(name = 'Sub5805', )([in0Sub5805,in1Sub5805])
Res14465 = keras.layers.Reshape((3, 2, 9), name = 'Res14465', )(Sub5805)
Res36771 = keras.layers.Reshape((3, 18), name = 'Res36771', )(Res14465)
Dot36985 = keras.layers.Dot(axes=(2, 2), name = 'Dot36985', )([Con87866,Res36771])
model = tf.keras.models.Model(inputs=[in0Min9148,in1Min9148,in0Con87866,in0Sub5805,in1Sub5805], outputs=Dot36985)
w = model.get_layer('Loc99528').get_weights() 
w[0] = np.array([[[0.6601, 0.5366]], [[0.5889, 0.6347]]])
w[1] = np.array([[0, 0], [0, 0]])
model.get_layer('Loc99528').set_weights(w) 
w = model.get_layer('Den84406').get_weights() 
w[0] = np.array([[0.781, 0.2324, 0.5722], [0.738, 0.719, 0.0973]])
w[1] = np.array([0.6944, 0.4742, 0.9491])
model.get_layer('Den84406').set_weights(w) 
in0Min9148 = tf.constant([[[[0.6622, 0.7253]], [[0.3358, 0.2677]]]])
in1Min9148 = tf.constant([[[[0.0372, 0.7309]], [[0.3987, 0.1137]]]])
in0Con87866 = tf.constant([[[0.5014, 0.8763, 0.9669, 0.5246, 0.4041, 0.2483, 0.1138, 0.7952, 0.8593, 0.6189, 0.6716, 0.8836, 0.5593, 0.0419, 0.5962], [0.1047, 0.5053, 0.0699, 0.008, 0.637, 0.2802, 0.6197, 0.8671, 0.3857, 0.1763, 0.1765, 0.1222, 0.4469, 0.8528, 0.0517]]])
in0Sub5805 = tf.constant([[[[[0.3688, 0.0807, 0.7314], [0.8133, 0.7661, 0.2344], [0.5509, 0.9516, 0.1285]], [[0.8255, 0.4867, 0.472], [0.1312, 0.4605, 0.1018], [0.9001, 0.1089, 0.3795]]], [[[0.0979, 0.4217, 0.8858], [0.257, 0.5386, 0.5446], [0.1506, 0.8596, 0.5567]], [[0.2082, 0.9349, 0.3649], [0.0463, 0.503, 0.1168], [0.8957, 0.7846, 0.6072]]], [[[0.6409, 0.225, 0.2744], [0.1599, 0.325, 0.668], [0.3554, 0.0478, 0.7047]], [[0.8919, 0.2931, 0.5043], [0.3582, 0.7484, 0.6193], [0.4941, 0.5465, 0.2599]]]]])
in1Sub5805 = tf.constant([[[[[0.4763, 0.5892, 0.8094], [0.5765, 0.5917, 0.9265], [0.3628, 0.0604, 0.3004]], [[0.3852, 0.7579, 0.6538], [0.2213, 0.8204, 0.2851], [0.3359, 0.2958, 0.0446]]], [[[0.0291, 0.7878, 0.8981], [0.2646, 0.317, 0.3487], [0.6413, 0.8473, 0.5399]], [[0.9668, 0.3177, 0.6147], [0.9737, 0.1311, 0.1381], [0.3487, 0.277, 0.6995]]], [[[0.0627, 0.8263, 0.8012], [0.134, 0.5527, 0.4963], [0.7131, 0.8991, 0.516]], [[0.862, 0.2008, 0.6807], [0.5657, 0.7383, 0.7087], [0.6468, 0.9683, 0.817]]]]])
print (np.array2string(model.predict([in0Min9148,in1Min9148,in0Con87866,in0Sub5805,in1Sub5805],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Dot36985.png')

LMin9148 = minimum_layer([[[[[0.6622, 0.7253]], [[0.3358, 0.2677]]]], [[[[0.0372, 0.7309]], [[0.3987, 0.1137]]]]], Min9148), 
LGlo55664 = global_average_pooling2D_layer(Min9148, Glo55664), 
LRes26838 = reshape_layer(Glo55664, [2, 1], Res26838), 
LLoc99528 = locally_connected1D_layer(Res26838, 1,[[[0.6601, 0.5366]], [[0.5889, 0.6347]]],[[0, 0], [0, 0]], 1, Loc99528), 
LLay78117 = layer_normalization_layer(Loc99528, 2, 2.506798519580129, Lay78117), 
LDen84406 = dense_layer(Lay78117, [[0.781, 0.2324, 0.5722], [0.738, 0.719, 0.0973]],[0.6944, 0.4742, 0.9491], Den84406), 
LCon87866 = concatenate_layer([Den84406,[[[0.5014, 0.8763, 0.9669, 0.5246, 0.4041, 0.2483, 0.1138, 0.7952, 0.8593, 0.6189, 0.6716, 0.8836, 0.5593, 0.0419, 0.5962], [0.1047, 0.5053, 0.0699, 0.008, 0.637, 0.2802, 0.6197, 0.8671, 0.3857, 0.1763, 0.1765, 0.1222, 0.4469, 0.8528, 0.0517]]]], 2, Con87866), 
LSub5805 = subtract_layer([[[[[0.3688, 0.0807, 0.7314], [0.8133, 0.7661, 0.2344], [0.5509, 0.9516, 0.1285]], [[0.8255, 0.4867, 0.472], [0.1312, 0.4605, 0.1018], [0.9001, 0.1089, 0.3795]]], [[[0.0979, 0.4217, 0.8858], [0.257, 0.5386, 0.5446], [0.1506, 0.8596, 0.5567]], [[0.2082, 0.9349, 0.3649], [0.0463, 0.503, 0.1168], [0.8957, 0.7846, 0.6072]]], [[[0.6409, 0.225, 0.2744], [0.1599, 0.325, 0.668], [0.3554, 0.0478, 0.7047]], [[0.8919, 0.2931, 0.5043], [0.3582, 0.7484, 0.6193], [0.4941, 0.5465, 0.2599]]]]], [[[[[0.4763, 0.5892, 0.8094], [0.5765, 0.5917, 0.9265], [0.3628, 0.0604, 0.3004]], [[0.3852, 0.7579, 0.6538], [0.2213, 0.8204, 0.2851], [0.3359, 0.2958, 0.0446]]], [[[0.0291, 0.7878, 0.8981], [0.2646, 0.317, 0.3487], [0.6413, 0.8473, 0.5399]], [[0.9668, 0.3177, 0.6147], [0.9737, 0.1311, 0.1381], [0.3487, 0.277, 0.6995]]], [[[0.0627, 0.8263, 0.8012], [0.134, 0.5527, 0.4963], [0.7131, 0.8991, 0.516]], [[0.862, 0.2008, 0.6807], [0.5657, 0.7383, 0.7087], [0.6468, 0.9683, 0.817]]]]], Sub5805), 
LRes14465 = reshape_layer(Sub5805, [3, 2, 9], Res14465), 
LRes36771 = reshape_layer(Res14465, [3, 18], Res36771), 
LDot36985 = dot_layer(Con87866,Res36771, 2, 2, Dot36985), 
exec_layers([LMin9148,LGlo55664,LRes26838,LLoc99528,LLay78117,LDen84406,LCon87866,LSub5805,LRes14465,LRes36771,LDot36985],["Min9148","Glo55664","Res26838","Loc99528","Lay78117","Den84406","Con87866","Sub5805","Res14465","Res36771","Dot36985"],Dot36985,"Dot36985")

Actual (Unparsed): [[[-0.6436318, 0.1142561, -1.5991019], [0.1703522, 0.5357442, -1.4485918]]]

Expected (Unparsed): [[[-0.6436317777525538,0.11425613710114102,-1.5991018931874295],[0.17035220091126071,0.5357442061147452,-1.448591808972859]]]

Actual:   [[[-0.6436, 0.1143, -1.5991], [0.1704, 0.5358, -1.4485]]]

Expected: [[[-0.6436, 0.1143, -1.5991], [0.1704, 0.5358, -1.4485]]]