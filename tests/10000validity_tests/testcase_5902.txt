import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Den52994 = tf.keras.layers.Input(shape=([4, 5, 4]))
in0Con83518 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Con16798 = tf.keras.layers.Input(shape=([39]))

Den52994 = keras.layers.Dense(2,name = 'Den52994', )(in0Den52994)
Res93274 = keras.layers.Reshape((4, 10), name = 'Res93274', )(Den52994)
Fla77189 = keras.layers.Flatten(name = 'Fla77189', )(Res93274)
Con83518 = keras.layers.Conv2D(4, (1, 1),strides=(1, 1), padding='same', dilation_rate=(1, 1), name = 'Con83518', )(in0Con83518)
Res66663 = keras.layers.Reshape((2, 4), name = 'Res66663', )(Con83518)
Sim52487 = keras.layers.SimpleRNN(1,name = 'Sim52487', )(Res66663)
Res55466 = keras.layers.Reshape((1, 1), name = 'Res55466', )(Sim52487)
Res89155 = keras.layers.Reshape((1, 1, 1), name = 'Res89155', )(Res55466)
Res2526 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res2526', )(Res89155)
Glo28189 = keras.layers.GlobalAveragePooling3D(name = 'Glo28189', )(Res2526)
Con16798 = keras.layers.Concatenate(axis=1, name = 'Con16798', )([Glo28189,in0Con16798])
Add85407 = keras.layers.Add(name = 'Add85407', )([Fla77189,Con16798])
model = tf.keras.models.Model(inputs=[in0Den52994,in0Con83518,in0Con16798], outputs=Add85407)
w = model.get_layer('Den52994').get_weights() 
w[0] = np.array([[0.4823, 0.7132], [0.4188, 0.6546], [0.3943, 0.4704], [0.1403, 0.3305]])
w[1] = np.array([0.4225, 0.0394])
model.get_layer('Den52994').set_weights(w) 
w = model.get_layer('Con83518').get_weights() 
w[0] = np.array([[[[0.9607, 0.3779, 0.2673, 0.0935], [0.4406, 0.9036, 0.8185, 0.1845]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con83518').set_weights(w) 
w = model.get_layer('Sim52487').get_weights() 
w[0] = np.array([[9], [5], [9], [10]])
w[1] = np.array([[8]])
w[2] = np.array([6])
model.get_layer('Sim52487').set_weights(w) 
in0Den52994 = tf.constant([[[[0.6597, 0.2701, 0.3204, 0.4481], [0.396, 0.6199, 0.4112, 0.4204], [0.1704, 0.6594, 0.0358, 0.6996], [0.0432, 0.1111, 0.8076, 0.8058], [0.2593, 0.7471, 0.6357, 0.0396]], [[0.8155, 0.5098, 0.6653, 0.8381], [0.0884, 0.4671, 0.5949, 0.2055], [0.5014, 0.0316, 0.0146, 0.6747], [0.0482, 0.2458, 0.3858, 0.3951], [0.8559, 0.0961, 0.2953, 0.3696]], [[0.8736, 0.755, 0.6514, 0.5627], [0.1996, 0.3697, 0.5658, 0.5916], [0.5248, 0.5195, 0.7642, 0.9753], [0.6616, 0.7428, 0.505, 0.4661], [0.1522, 0.6011, 0.1474, 0.8171]], [[0.5071, 0.5898, 0.7106, 0.4496], [0.7093, 0.8335, 0.9885, 0.8749], [0.2403, 0.909, 0.0477, 0.3988], [0.0313, 0.3292, 0.2236, 0.5918], [0.4251, 0.1897, 0.0515, 0.2416]]]])
in0Con83518 = tf.constant([[[[0.4457, 0.2313]], [[0.9226, 0.0224]]]])
in0Con16798 = tf.constant([[0.689, 0.3006, 0.7517, 0.8156, 0.383, 0.901, 0.9132, 0.8299, 0.1257, 0.1525, 0.3712, 0.5976, 0.3487, 0.5213, 0.8976, 0.4551, 0.9651, 0.8438, 0.0603, 0.5949, 0.113, 0.9697, 0.8838, 0.623, 0.3477, 0.1609, 0.7271, 0.4597, 0.7941, 0.6107, 0.4101, 0.8013, 0.0103, 0.6617, 0.3757, 0.714, 0.8263, 0.0451, 0.2016]])
print (np.array2string(model.predict([in0Den52994,in0Con83518,in0Con16798],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add85407.png')

LDen52994 = dense_layer([[[[0.6597, 0.2701, 0.3204, 0.4481], [0.396, 0.6199, 0.4112, 0.4204], [0.1704, 0.6594, 0.0358, 0.6996], [0.0432, 0.1111, 0.8076, 0.8058], [0.2593, 0.7471, 0.6357, 0.0396]], [[0.8155, 0.5098, 0.6653, 0.8381], [0.0884, 0.4671, 0.5949, 0.2055], [0.5014, 0.0316, 0.0146, 0.6747], [0.0482, 0.2458, 0.3858, 0.3951], [0.8559, 0.0961, 0.2953, 0.3696]], [[0.8736, 0.755, 0.6514, 0.5627], [0.1996, 0.3697, 0.5658, 0.5916], [0.5248, 0.5195, 0.7642, 0.9753], [0.6616, 0.7428, 0.505, 0.4661], [0.1522, 0.6011, 0.1474, 0.8171]], [[0.5071, 0.5898, 0.7106, 0.4496], [0.7093, 0.8335, 0.9885, 0.8749], [0.2403, 0.909, 0.0477, 0.3988], [0.0313, 0.3292, 0.2236, 0.5918], [0.4251, 0.1897, 0.0515, 0.2416]]]], [[0.4823, 0.7132], [0.4188, 0.6546], [0.3943, 0.4704], [0.1403, 0.3305]],[0.4225, 0.0394], Den52994), 
LRes93274 = reshape_layer(Den52994, [4, 10], Res93274), 
LFla77189 = flatten_layer(Res93274, Fla77189), 
LCon83518 = conv2D_layer([[[[0.4457, 0.2313]], [[0.9226, 0.0224]]]], 1, 1,[[[[0.9607, 0.3779, 0.2673, 0.0935], [0.4406, 0.9036, 0.8185, 0.1845]]]],[0, 0, 0, 0], 1, 1, true, 1, 1, Con83518), 
LRes66663 = reshape_layer(Con83518, [2, 4], Res66663), 
LSim52487 = simple_rnn_layer(Res66663,[[9], [5], [9], [10]],[[8]],[6], Sim52487), 
LRes55466 = reshape_layer(Sim52487, [1, 1], Res55466), 
LRes89155 = reshape_layer(Res55466, [1, 1, 1], Res89155), 
LRes2526 = reshape_layer(Res89155, [1, 1, 1, 1], Res2526), 
LGlo28189 = global_average_pooling3D_layer(Res2526, Glo28189), 
LCon16798 = concatenate_layer([Glo28189,[[0.689, 0.3006, 0.7517, 0.8156, 0.383, 0.901, 0.9132, 0.8299, 0.1257, 0.1525, 0.3712, 0.5976, 0.3487, 0.5213, 0.8976, 0.4551, 0.9651, 0.8438, 0.0603, 0.5949, 0.113, 0.9697, 0.8838, 0.623, 0.3477, 0.1609, 0.7271, 0.4597, 0.7941, 0.6107, 0.4101, 0.8013, 0.0103, 0.6617, 0.3757, 0.714, 0.8263, 0.0451, 0.2016]]], 1, Con16798), 
LAdd85407 = add_layer([Fla77189,Con16798], Add85407), 
exec_layers([LDen52994,LRes93274,LFla77189,LCon83518,LRes66663,LSim52487,LRes55466,LRes89155,LRes2526,LGlo28189,LCon16798,LAdd85407],["Den52994","Res93274","Fla77189","Con83518","Res66663","Sim52487","Res55466","Res89155","Res2526","Glo28189","Con16798","Add85407"],Add85407,"Add85407")

Actual (Unparsed): [[2.0429933, 1.6745187, 1.3948232, 1.8116844, 1.7087104, 1.2236306, 1.8223545, 1.7023483, 1.9465583, 1.1512055, 1.5617331, 1.9158789, 1.5217575, 1.1046692, 1.2992765, 1.5451400, 1.2113414, 1.5118378, 1.8876389, 1.0340969, 2.0907251, 1.7620654, 1.9493938, 1.7692365, 1.9543363, 1.7832684, 1.4780896, 2.1161881, 1.3801057, 1.6749176, 1.8680510, 1.6801059, 2.4274792, 1.8553267, 1.6555456, 1.3357548, 1.4606600, 1.4042888, 0.8062750, 0.7724333]]

Expected (Unparsed): [[2.0429933399999998,1.67451871,1.3948232,1.8116844200000002,1.70871046,1.22363064,1.8223544600000001,1.70234824,1.9465582599999998,1.1512054999999999,1.5617331100000003,1.91587885,1.52175752,1.1046692500000002,1.29927649,1.5451400299999998,1.21134137,1.51183779,1.88763892,1.03409686,2.09072511,1.7620654299999998,1.9493938599999998,1.7692364600000001,1.95433629,1.78326839,1.47808965,2.11618805,1.3801056900000002,1.67491761,1.86805103,1.68010584,2.42747921,1.8553267100000002,1.6555456400000002,1.3357548399999999,1.46065997,1.40428882,0.8062750200000001,0.77243334]]

Actual:   [[2.043, 1.6746, 1.3949, 1.8117, 1.7088, 1.2237, 1.8224, 1.7024, 1.9466, 1.1513, 1.5618, 1.9159, 1.5218, 1.1047, 1.2993, 1.5452, 1.2114, 1.5119, 1.8877, 1.0341, 2.0908, 1.7621, 1.9494, 1.7693, 1.9544, 1.7833, 1.4781, 2.1162, 1.3802, 1.675, 1.8681, 1.6802, 2.4275, 1.8554, 1.6556, 1.3358, 1.4607, 1.4043, 0.8063, 0.7725]]

Expected: [[2.043, 1.6746, 1.3949, 1.8117, 1.7088, 1.2237, 1.8224, 1.7024, 1.9466, 1.1513, 1.5618, 1.9159, 1.5218, 1.1047, 1.2993, 1.5452, 1.2114, 1.5119, 1.8877, 1.0341, 2.0908, 1.7621, 1.9494, 1.7693, 1.9544, 1.7833, 1.4781, 2.1162, 1.3802, 1.675, 1.8681, 1.6802, 2.4275, 1.8554, 1.6556, 1.3358, 1.4607, 1.4043, 0.8063, 0.7725]]