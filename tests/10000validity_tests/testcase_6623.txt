import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Glo64226 = tf.keras.layers.Input(shape=([2, 1]))
in0Con41874 = tf.keras.layers.Input(shape=([3, 3, 3]))
in0Zer38171 = tf.keras.layers.Input(shape=([1, 1, 4]))

Glo64226 = keras.layers.GlobalMaxPool1D(name = 'Glo64226', )(in0Glo64226)
Res1448 = keras.layers.Reshape((1, 1), name = 'Res1448', )(Glo64226)
GRU98819 = keras.layers.GRU(3,reset_after=False, recurrent_activation='sigmoid', name = 'GRU98819', )(Res1448)
Res87620 = keras.layers.Reshape((3, 1), name = 'Res87620', )(GRU98819)
Res11485 = keras.layers.Reshape((3, 1, 1), name = 'Res11485', )(Res87620)
Zer91752 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer91752', )(Res11485)
Con41874 = keras.layers.Concatenate(axis=3, name = 'Con41874', )([Zer91752,in0Con41874])
Zer38171 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer38171', )(in0Zer38171)
Con75607 = keras.layers.Conv2DTranspose(4, (1, 1),strides=(1, 1), padding='valid', name = 'Con75607', )(Zer38171)
Mul94046 = keras.layers.Multiply(name = 'Mul94046', )([Con41874,Con75607])
model = tf.keras.models.Model(inputs=[in0Glo64226,in0Con41874,in0Zer38171], outputs=Mul94046)
w = model.get_layer('GRU98819').get_weights() 
w[0] = np.array([[2, 10, 3, 5, 6, 4, 1, 1, 6]])
w[1] = np.array([[3, 1, 7, 1, 6, 10, 5, 9, 7], [2, 5, 5, 10, 3, 8, 5, 8, 3], [2, 4, 1, 9, 2, 5, 2, 9, 7]])
w[2] = np.array([1, 6, 9, 5, 2, 9, 2, 8, 10])
model.get_layer('GRU98819').set_weights(w) 
w = model.get_layer('Con75607').get_weights() 
w[0] = np.array([[[[0.6407, 0.0584, 0.0429, 0.6825], [0.7955, 0.5316, 0.9773, 0.2609], [0.1357, 0.6673, 0.331, 0.0664], [0.6929, 0.4083, 0.679, 0.1953]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con75607').set_weights(w) 
in0Glo64226 = tf.constant([[[1.2666], [1.8104]]])
in0Con41874 = tf.constant([[[[0.8965, 0.4683, 0.7294], [0.5863, 0.9151, 0.8932], [0.6832, 0.2255, 0.4652]], [[0.4158, 0.2374, 0.0871], [0.7383, 0.2697, 0.3811], [0.602, 0.7113, 0.5854]], [[0.1695, 0.6989, 0.2893], [0.4024, 0.541, 0.2509], [0.0392, 0.6584, 0.6931]]]])
in0Zer38171 = tf.constant([[[[1.1744, 1.8584, 1.7172, 1.3924]]]])
print (np.array2string(model.predict([in0Glo64226,in0Con41874,in0Zer38171],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul94046.png')

LGlo64226 = global_max_pool1D_layer([[[1.2666], [1.8104]]], Glo64226), 
LRes1448 = reshape_layer(Glo64226, [1, 1], Res1448), 
LGRU98819 = gru_layer(Res1448,[[2, 10, 3, 5, 6, 4, 1, 1, 6]],[[3, 1, 7, 1, 6, 10, 5, 9, 7], [2, 5, 5, 10, 3, 8, 5, 8, 3], [2, 4, 1, 9, 2, 5, 2, 9, 7]],[1, 6, 9, 5, 2, 9, 2, 8, 10], false, GRU98819), 
LRes87620 = reshape_layer(GRU98819, [3, 1], Res87620), 
LRes11485 = reshape_layer(Res87620, [3, 1, 1], Res11485), 
LZer91752 = zero_padding2D_layer(Res11485, 0, 0, 2, 0, Zer91752), 
LCon41874 = concatenate_layer([Zer91752,[[[[0.8965, 0.4683, 0.7294], [0.5863, 0.9151, 0.8932], [0.6832, 0.2255, 0.4652]], [[0.4158, 0.2374, 0.0871], [0.7383, 0.2697, 0.3811], [0.602, 0.7113, 0.5854]], [[0.1695, 0.6989, 0.2893], [0.4024, 0.541, 0.2509], [0.0392, 0.6584, 0.6931]]]]], 3, Con41874), 
LZer38171 = zero_padding2D_layer([[[[1.1744, 1.8584, 1.7172, 1.3924]]]], 1, 1, 1, 1, Zer38171), 
LCon75607 = conv2D_transpose_layer(Zer38171, 1, 1,[[[[0.6407, 0.0584, 0.0429, 0.6825], [0.7955, 0.5316, 0.9773, 0.2609], [0.1357, 0.6673, 0.331, 0.0664], [0.6929, 0.4083, 0.679, 0.1953]]]],[0, 0, 0, 0], 1, 1, false, Con75607), 
LMul94046 = multiply_layer([Con41874,Con75607], Mul94046), 
exec_layers([LGlo64226,LRes1448,LGRU98819,LRes87620,LRes11485,LZer91752,LCon41874,LZer38171,LCon75607,LMul94046],["Glo64226","Res1448","GRU98819","Res87620","Res11485","Zer91752","Con41874","Zer38171","Con75607","Mul94046"],Mul94046,"Mul94046")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 2.9263683, 0.5556696, 1.1472791], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]]]]

Expected (Unparsed): [[[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,2.9263682288879997,0.5556696417120001,1.1472790651],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]]]]

Actual:   [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 2.9264, 0.5557, 1.1473], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]]

Expected: [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 2.9264, 0.5557, 1.1473], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]]