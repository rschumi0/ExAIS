import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min55346 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Min55346 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Sub63952 = tf.keras.layers.Input(shape=([3, 2]))
in1Sub63952 = tf.keras.layers.Input(shape=([3, 2]))
in0Con37001 = tf.keras.layers.Input(shape=([3, 2]))
in0Con81268 = tf.keras.layers.Input(shape=([12]))
in0Lay19013 = tf.keras.layers.Input(shape=([4, 2, 4]))
in0Glo89840 = tf.keras.layers.Input(shape=([2, 1]))
in0Con56542 = tf.keras.layers.Input(shape=([1]))
in0Add78379 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in1Add78379 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Con58068 = tf.keras.layers.Input(shape=([22]))

Min55346 = keras.layers.Minimum(name = 'Min55346', )([in0Min55346,in1Min55346])
Res82877 = keras.layers.Reshape((2, 4), name = 'Res82877', )(Min55346)
Zer39510 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer39510', )(Res82877)
Sub63952 = keras.layers.Subtract(name = 'Sub63952', )([in0Sub63952,in1Sub63952])
Sep66970 = keras.layers.SeparableConv1D(2, (3),strides=(1), padding='same', name = 'Sep66970', )(Sub63952)
Con37001 = keras.layers.Concatenate(axis=2, name = 'Con37001', )([Sep66970,in0Con37001])
Ave96088 = keras.layers.Average(name = 'Ave96088', )([Zer39510,Con37001])
Fla57522 = keras.layers.Flatten(name = 'Fla57522', )(Ave96088)
Con81268 = keras.layers.Concatenate(axis=1, name = 'Con81268', )([Fla57522,in0Con81268])
Lay19013 = keras.layers.LayerNormalization(axis=3, epsilon=1.4119778281344968, name = 'Lay19013', )(in0Lay19013)
Den49993 = keras.layers.Dense(3,name = 'Den49993', )(Lay19013)
Res16168 = keras.layers.Reshape((4, 6), name = 'Res16168', )(Den49993)
Fla58041 = keras.layers.Flatten(name = 'Fla58041', )(Res16168)
Glo89840 = keras.layers.GlobalAveragePooling1D(name = 'Glo89840', )(in0Glo89840)
Den51181 = keras.layers.Dense(1,name = 'Den51181', )(Glo89840)
Con56542 = keras.layers.Concatenate(axis=1, name = 'Con56542', )([Den51181,in0Con56542])
Add78379 = keras.layers.Add(name = 'Add78379', )([in0Add78379,in1Add78379])
Res26371 = keras.layers.Reshape((2, 2, 2), name = 'Res26371', )(Add78379)
Glo56174 = keras.layers.GlobalAveragePooling2D(name = 'Glo56174', )(Res26371)
Mul57767 = keras.layers.Multiply(name = 'Mul57767', )([Con56542,Glo56174])
Con58068 = keras.layers.Concatenate(axis=1, name = 'Con58068', )([Mul57767,in0Con58068])
Min75076 = keras.layers.Minimum(name = 'Min75076', )([Fla58041,Con58068])
Add888 = keras.layers.Add(name = 'Add888', )([Con81268,Min75076])
model = tf.keras.models.Model(inputs=[in0Min55346,in1Min55346,in0Sub63952,in1Sub63952,in0Con37001,in0Con81268,in0Lay19013,in0Glo89840,in0Con56542,in0Add78379,in1Add78379,in0Con58068], outputs=Add888)
w = model.get_layer('Sep66970').get_weights() 
w[0] = np.array([[[0.5468], [0.0118]], [[0.5475], [0.4631]], [[0.4753], [0.6704]]])
w[1] = np.array([[[0.5085, 0.9419], [0.2733, 0.2279]]])
w[2] = np.array([0, 0])
model.get_layer('Sep66970').set_weights(w) 
w = model.get_layer('Den49993').get_weights() 
w[0] = np.array([[0.0412, 0.0486, 0.2128], [0.0297, 0.3288, 0.9815], [0.2003, 0.8471, 0.8834], [0.7016, 0.2307, 0.6599]])
w[1] = np.array([0.491, 0.687, 0.3778])
model.get_layer('Den49993').set_weights(w) 
w = model.get_layer('Den51181').get_weights() 
w[0] = np.array([[0.521]])
w[1] = np.array([0.1834])
model.get_layer('Den51181').set_weights(w) 
in0Min55346 = tf.constant([[[[0.001, 0.3953], [0.006, 0.8491]], [[0.4895, 0.4893], [0.4762, 0.0023]]]])
in1Min55346 = tf.constant([[[[0.983, 0.0092], [0.4503, 0.6248]], [[0.2077, 0.5289], [0.9772, 0.2384]]]])
in0Sub63952 = tf.constant([[[0.7107, 0.5311], [0.9432, 0.62], [0.287, 0.8527]]])
in1Sub63952 = tf.constant([[[0.0704, 0.5677], [0.4392, 0.7043], [0.3977, 0.7738]]])
in0Con37001 = tf.constant([[[0.0745, 0.8418], [0.9397, 0.435], [0.1842, 0.6844]]])
in0Con81268 = tf.constant([[0.327, 0.6593, 0.3477, 0.8302, 0.3292, 0.4587, 0.2661, 0.6778, 0.6492, 0.16, 0.9803, 0.0678]])
in0Lay19013 = tf.constant([[[[1.299, 1.5569, 1.6418, 1.1204], [1.7585, 1.4292, 1.0464, 1.4641]], [[1.9152, 1.6187, 1.0741, 1.5058], [1.3146, 1.7237, 1.5662, 1.6591]], [[1.8932, 1.8781, 1.8044, 1.9219], [1.9676, 1.4838, 1.2428, 1.6342]], [[1.0952, 1.3663, 1.5489, 1.6609], [1.1402, 1.2016, 1.9905, 1.9775]]]])
in0Glo89840 = tf.constant([[[1.4177], [1.2672]]])
in0Con56542 = tf.constant([[0.1272]])
in0Add78379 = tf.constant([[[[[0.1354], [0.8571]], [[0.3616], [0.0544]]], [[[0.2954], [0.8555]], [[0.7629], [0.0475]]]]])
in1Add78379 = tf.constant([[[[[0.1354], [0.5768]], [[0.2602], [0.0215]]], [[[0.3967], [0.7628]], [[0.4285], [0.5395]]]]])
in0Con58068 = tf.constant([[0.8319, 0.7043, 0.4368, 0.9601, 0.5001, 0.896, 0.3882, 0.3635, 0.9953, 0.5184, 0.9975, 0.1243, 0.428, 0.8405, 0.9038, 0.9819, 0.9864, 0.5971, 0.9337, 0.6776, 0.9529, 0.1145]])
print (np.array2string(model.predict([in0Min55346,in1Min55346,in0Sub63952,in1Sub63952,in0Con37001,in0Con81268,in0Lay19013,in0Glo89840,in0Con56542,in0Add78379,in1Add78379,in0Con58068],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add888.png')

LMin55346 = minimum_layer([[[[[0.001, 0.3953], [0.006, 0.8491]], [[0.4895, 0.4893], [0.4762, 0.0023]]]], [[[[0.983, 0.0092], [0.4503, 0.6248]], [[0.2077, 0.5289], [0.9772, 0.2384]]]]], Min55346), 
LRes82877 = reshape_layer(Min55346, [2, 4], Res82877), 
LZer39510 = zero_padding1D_layer(Res82877, 1, 0, Zer39510), 
LSub63952 = subtract_layer([[[0.7107, 0.5311], [0.9432, 0.62], [0.287, 0.8527]]], [[[0.0704, 0.5677], [0.4392, 0.7043], [0.3977, 0.7738]]], Sub63952), 
LSep66970 = separable_conv1D_layer(Sub63952, 3,[[[[0.5468], [0.0118]], [[0.5475], [0.4631]], [[0.4753], [0.6704]]],[[[0.5085, 0.9419], [0.2733, 0.2279]]]],[0, 0], 1, true, Sep66970), 
LCon37001 = concatenate_layer([Sep66970,[[[0.0745, 0.8418], [0.9397, 0.435], [0.1842, 0.6844]]]], 2, Con37001), 
LAve96088 = average_layer([Zer39510,Con37001], Ave96088), 
LFla57522 = flatten_layer(Ave96088, Fla57522), 
LCon81268 = concatenate_layer([Fla57522,[[0.327, 0.6593, 0.3477, 0.8302, 0.3292, 0.4587, 0.2661, 0.6778, 0.6492, 0.16, 0.9803, 0.0678]]], 1, Con81268), 
LLay19013 = layer_normalization_layer([[[[1.299, 1.5569, 1.6418, 1.1204], [1.7585, 1.4292, 1.0464, 1.4641]], [[1.9152, 1.6187, 1.0741, 1.5058], [1.3146, 1.7237, 1.5662, 1.6591]], [[1.8932, 1.8781, 1.8044, 1.9219], [1.9676, 1.4838, 1.2428, 1.6342]], [[1.0952, 1.3663, 1.5489, 1.6609], [1.1402, 1.2016, 1.9905, 1.9775]]]], 3, 1.4119778281344968, Lay19013), 
LDen49993 = dense_layer(Lay19013, [[0.0412, 0.0486, 0.2128], [0.0297, 0.3288, 0.9815], [0.2003, 0.8471, 0.8834], [0.7016, 0.2307, 0.6599]],[0.491, 0.687, 0.3778], Den49993), 
LRes16168 = reshape_layer(Den49993, [4, 6], Res16168), 
LFla58041 = flatten_layer(Res16168, Fla58041), 
LGlo89840 = global_average_pooling1D_layer([[[1.4177], [1.2672]]], Glo89840), 
LDen51181 = dense_layer(Glo89840, [[0.521]],[0.1834], Den51181), 
LCon56542 = concatenate_layer([Den51181,[[0.1272]]], 1, Con56542), 
LAdd78379 = add_layer([[[[[[0.1354], [0.8571]], [[0.3616], [0.0544]]], [[[0.2954], [0.8555]], [[0.7629], [0.0475]]]]], [[[[[0.1354], [0.5768]], [[0.2602], [0.0215]]], [[[0.3967], [0.7628]], [[0.4285], [0.5395]]]]]], Add78379), 
LRes26371 = reshape_layer(Add78379, [2, 2, 2], Res26371), 
LGlo56174 = global_average_pooling2D_layer(Res26371, Glo56174), 
LMul57767 = multiply_layer([Con56542,Glo56174], Mul57767), 
LCon58068 = concatenate_layer([Mul57767,[[0.8319, 0.7043, 0.4368, 0.9601, 0.5001, 0.896, 0.3882, 0.3635, 0.9953, 0.5184, 0.9975, 0.1243, 0.428, 0.8405, 0.9038, 0.9819, 0.9864, 0.5971, 0.9337, 0.6776, 0.9529, 0.1145]]], 1, Con58068), 
LMin75076 = minimum_layer([Fla58041,Con58068], Min75076), 
LAdd888 = add_layer([Con81268,Min75076], Add888), 
exec_layers([LMin55346,LRes82877,LZer39510,LSub63952,LSep66970,LCon37001,LAve96088,LFla57522,LCon81268,LLay19013,LDen49993,LRes16168,LFla58041,LGlo89840,LDen51181,LCon56542,LAdd78379,LRes26371,LGlo56174,LMul57767,LCon58068,LMin75076,LAdd888],["Min55346","Res82877","Zer39510","Sub63952","Sep66970","Con37001","Ave96088","Fla57522","Con81268","Lay19013","Den49993","Res16168","Fla58041","Glo89840","Den51181","Con56542","Add78379","Res26371","Glo56174","Mul57767","Con58068","Min75076","Add888"],Add888,"Add888")

Actual (Unparsed): [[0.5052783, 0.3876838, 0.5387607, 0.8838334, 0.5849315, 0.4627588, 0.8918427, 0.9382482, 0.3409753, 0.7134446, 1.0684574, 0.8573080, 0.8349794, 0.7836000, 0.7062742, 1.3060432, 0.7787346, 0.6065808, 0.9078194, 1.2749000, 1.1570108, 0.8376000, 1.9040324, 0.1823000]]

Expected (Unparsed): [[0.5052783647828818,0.3876838078664999,0.538760737682282,0.8838334409104298,0.58493150468,0.4627588041005628,0.8918426574882796,0.9382481398923809,0.340975302446217,0.71344455821,1.0684573684585126,0.8573080114803902,0.8349793667047005,0.7836,0.7062742245918134,1.30604317348665,0.7787345821404525,0.6065807430536818,0.9078194001816247,1.2749,1.1570107959653078,0.8376,1.9040324052613466,0.18230000000000002]]

Actual:   [[0.5053, 0.3877, 0.5388, 0.8839, 0.585, 0.4628, 0.8919, 0.9383, 0.341, 0.7135, 1.0685, 0.8574, 0.835, 0.7836, 0.7063, 1.3061, 0.7788, 0.6066, 0.9079, 1.2749, 1.1571, 0.8376, 1.9041, 0.1823]]

Expected: [[0.5053, 0.3877, 0.5388, 0.8839, 0.585, 0.4628, 0.8919, 0.9383, 0.341, 0.7135, 1.0685, 0.8574, 0.835, 0.7836, 0.7063, 1.3061, 0.7788, 0.6066, 0.9079, 1.2749, 1.1571, 0.8376, 1.9041, 0.1824]]