import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul94433 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in1Mul94433 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))

Mul94433 = keras.layers.Multiply(name = 'Mul94433', )([in0Mul94433,in1Mul94433])
Con13070 = keras.layers.Conv3D(3, (1, 1, 1),strides=(1, 9, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con13070', )(Mul94433)
Mas25141 = keras.layers.Masking(mask_value=1, name = 'Mas25141', )(Con13070)
model = tf.keras.models.Model(inputs=[in0Mul94433,in1Mul94433], outputs=Mas25141)
w = model.get_layer('Con13070').get_weights() 
w[0] = np.array([[[[[0.2377, 0.2663, 0.1626], [0.7443, 0.2458, 0.2145]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con13070').set_weights(w) 
in0Mul94433 = tf.constant([[[[[0.3041, 0.758], [0.3796, 0.7943]]], [[[0.9218, 0.8475], [0.9609, 0.505]]]]])
in1Mul94433 = tf.constant([[[[[0.766, 0.8167], [0.4437, 0.2374]]], [[[0.262, 0.7006], [0.6761, 0.5195]]]]])
print (np.array2string(model.predict([in0Mul94433,in1Mul94433],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mas25141.png')

LMul94433 = multiply_layer([[[[[[0.3041, 0.758], [0.3796, 0.7943]]], [[[0.9218, 0.8475], [0.9609, 0.505]]]]], [[[[[0.766, 0.8167], [0.4437, 0.2374]]], [[[0.262, 0.7006], [0.6761, 0.5195]]]]]], Mul94433), 
LCon13070 = conv3D_layer(Mul94433, 1, 1, 1,[[[[[0.2377, 0.2663, 0.1626], [0.7443, 0.2458, 0.2145]]]]],[0, 0, 0], 1, 9, 1, true, 1, 1, 1, Con13070), 
LMas25141 = masking_layer(Con13070, 1, Mas25141), 
exec_layers([LMul94433,LCon13070,LMas25141],["Mul94433","Con13070","Mas25141"],Mas25141,"Mas25141")

Actual (Unparsed): [[[[[0.5161353, 0.2141967, 0.1706642], [0.1803857, 0.0912022, 0.0678341]]], [[[0.4993418, 0.2102604, 0.1666310], [0.3496905, 0.2374907, 0.1619090]]]]]

Expected (Unparsed): [[[[[0.5161352966,0.21419668566,0.17066421126],[0.18038574333,0.09120223923199999,0.067834060242]]],[[[0.49934175886999993,0.21026037838,0.16663098441000002],[0.34969049352299997,0.237490669187,0.161908984824]]]]]

Actual:   [[[[[0.5162, 0.2142, 0.1707], [0.1804, 0.0913, 0.0679]]], [[[0.4994, 0.2103, 0.1667], [0.3497, 0.2375, 0.162]]]]]

Expected: [[[[[0.5162, 0.2142, 0.1707], [0.1804, 0.0913, 0.0679]]], [[[0.4994, 0.2103, 0.1667], [0.3497, 0.2375, 0.162]]]]]