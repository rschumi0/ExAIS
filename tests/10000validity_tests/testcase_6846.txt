import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Up_97608 = tf.keras.layers.Input(shape=([2, 3]))
in0Sub78032 = tf.keras.layers.Input(shape=([3]))
in1Sub78032 = tf.keras.layers.Input(shape=([3]))
in0Con45745 = tf.keras.layers.Input(shape=([9]))
in0Con72815 = tf.keras.layers.Input(shape=([12, 1, 2]))
in0Loc36759 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Min87332 = tf.keras.layers.Input(shape=([1, 2, 1]))
in1Min87332 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con39406 = tf.keras.layers.Input(shape=([12, 3, 2]))

Up_97608 = keras.layers.UpSampling1D(size=(2), name = 'Up_97608', )(in0Up_97608)
Fla60247 = keras.layers.Flatten(name = 'Fla60247', )(Up_97608)
Sub78032 = keras.layers.Subtract(name = 'Sub78032', )([in0Sub78032,in1Sub78032])
Con45745 = keras.layers.Concatenate(axis=1, name = 'Con45745', )([Sub78032,in0Con45745])
Min15409 = keras.layers.Minimum(name = 'Min15409', )([Fla60247,Con45745])
Res24421 = keras.layers.Reshape((12, 1), name = 'Res24421', )(Min15409)
Res99300 = keras.layers.Reshape((12, 1, 1), name = 'Res99300', )(Res24421)
Con72815 = keras.layers.Concatenate(axis=3, name = 'Con72815', )([Res99300,in0Con72815])
Loc36759 = keras.layers.LocallyConnected2D(3, (1, 2),strides=(1, 11), name = 'Loc36759', )(in0Loc36759)
Zer78016 = keras.layers.ZeroPadding2D(padding=((10, 0), (0, 0)), name = 'Zer78016', )(Loc36759)
Add81356 = keras.layers.Add(name = 'Add81356', )([Con72815,Zer78016])
Zer80573 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer80573', )(Add81356)
Min87332 = keras.layers.Minimum(name = 'Min87332', )([in0Min87332,in1Min87332])
Zer81724 = keras.layers.ZeroPadding2D(padding=((11, 0), (1, 0)), name = 'Zer81724', )(Min87332)
Con39406 = keras.layers.Concatenate(axis=3, name = 'Con39406', )([Zer81724,in0Con39406])
Sub42739 = keras.layers.Subtract(name = 'Sub42739', )([Zer80573,Con39406])
model = tf.keras.models.Model(inputs=[in0Up_97608,in0Sub78032,in1Sub78032,in0Con45745,in0Con72815,in0Loc36759,in0Min87332,in1Min87332,in0Con39406], outputs=Sub42739)
w = model.get_layer('Loc36759').get_weights() 
w[0] = np.array([[[0.9966, 0.4872, 0.9102], [0.6114, 0.9611, 0.95], [0.8761, 0.9479, 0.1085], [0.2791, 0.6907, 0.374]], [[0.1991, 0.2804, 0.2407], [0.4144, 0.6788, 0.6539], [0.405, 0.6972, 0.3784], [0.3065, 0.2384, 0.0403]]])
w[1] = np.array([[[0, 0, 0]], [[0, 0, 0]]])
model.get_layer('Loc36759').set_weights(w) 
in0Up_97608 = tf.constant([[[1.727, 1.4778, 1.5025], [1.2313, 1.8867, 1.694]]])
in0Sub78032 = tf.constant([[0.2029, 0.3481, 0.1665]])
in1Sub78032 = tf.constant([[0.6035, 0.2439, 0.5892]])
in0Con45745 = tf.constant([[0.0867, 0.9591, 0.2102, 0.7806, 0.3392, 0.4079, 0.4873, 0.9405, 0.8394]])
in0Con72815 = tf.constant([[[[0.7894, 0.0062]], [[0.0293, 0.6171]], [[0.7075, 0.6116]], [[0.7964, 0.8101]], [[0.8029, 0.5703]], [[0.8611, 0.951]], [[0.7045, 0.5626]], [[0.9548, 0.0949]], [[0.129, 0.6094]], [[0.1213, 0.6615]], [[0.5107, 0.1846]], [[0.1345, 0.8666]]]])
in0Loc36759 = tf.constant([[[[0.7351, 0.0972], [0.2316, 0.7706]], [[0.4549, 0.3103], [0.9973, 0.1945]]]])
in0Min87332 = tf.constant([[[[0.2209], [0.1044]]]])
in1Min87332 = tf.constant([[[[0.1524], [0.5557]]]])
in0Con39406 = tf.constant([[[[0.8835, 0.5497], [0.2977, 0.8037], [0.0095, 0.0518]], [[0.8581, 0.5157], [0.0975, 0.9952], [0.0192, 0.7858]], [[0.6559, 0.4157], [0.4368, 0.7034], [0.5398, 0.4285]], [[0.3044, 0.186], [0.0221, 0.7081], [0.5734, 0.9281]], [[0.0984, 0.2963], [0.3311, 0.7186], [0.5266, 0.9685]], [[0.5212, 0.44], [0.2901, 0.6823], [0.1457, 0.7384]], [[0.1422, 0.9497], [0.3205, 0.5688], [0.6422, 0.3299]], [[0.0772, 0.5613], [0.6246, 0.6227], [0.5978, 0.4293]], [[0.3554, 0.7554], [0.6502, 0.4464], [0.7273, 0.8065]], [[0.3526, 0.3542], [0.7184, 0.0823], [0.0346, 0.9336]], [[0.9978, 0.6759], [0.8901, 0.8703], [0.9995, 0.4741]], [[0.3143, 0.4754], [0.0063, 0.1521], [0.3106, 0.2851]]]])
print (np.array2string(model.predict([in0Up_97608,in0Sub78032,in1Sub78032,in0Con45745,in0Con72815,in0Loc36759,in0Min87332,in1Min87332,in0Con39406],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub42739.png')

LUp_97608 = up_sampling1D_layer([[[1.727, 1.4778, 1.5025], [1.2313, 1.8867, 1.694]]], 2, Up_97608), 
LFla60247 = flatten_layer(Up_97608, Fla60247), 
LSub78032 = subtract_layer([[0.2029, 0.3481, 0.1665]], [[0.6035, 0.2439, 0.5892]], Sub78032), 
LCon45745 = concatenate_layer([Sub78032,[[0.0867, 0.9591, 0.2102, 0.7806, 0.3392, 0.4079, 0.4873, 0.9405, 0.8394]]], 1, Con45745), 
LMin15409 = minimum_layer([Fla60247,Con45745], Min15409), 
LRes24421 = reshape_layer(Min15409, [12, 1], Res24421), 
LRes99300 = reshape_layer(Res24421, [12, 1, 1], Res99300), 
LCon72815 = concatenate_layer([Res99300,[[[[0.7894, 0.0062]], [[0.0293, 0.6171]], [[0.7075, 0.6116]], [[0.7964, 0.8101]], [[0.8029, 0.5703]], [[0.8611, 0.951]], [[0.7045, 0.5626]], [[0.9548, 0.0949]], [[0.129, 0.6094]], [[0.1213, 0.6615]], [[0.5107, 0.1846]], [[0.1345, 0.8666]]]]], 3, Con72815), 
LLoc36759 = locally_connected2D_layer([[[[0.7351, 0.0972], [0.2316, 0.7706]], [[0.4549, 0.3103], [0.9973, 0.1945]]]], 1, 2,[[[0.9966, 0.4872, 0.9102], [0.6114, 0.9611, 0.95], [0.8761, 0.9479, 0.1085], [0.2791, 0.6907, 0.374]], [[0.1991, 0.2804, 0.2407], [0.4144, 0.6788, 0.6539], [0.405, 0.6972, 0.3784], [0.3065, 0.2384, 0.0403]]],[[[0, 0, 0]], [[0, 0, 0]]], 1, 11, Loc36759), 
LZer78016 = zero_padding2D_layer(Loc36759, 10, 0, 0, 0, Zer78016), 
LAdd81356 = add_layer([Con72815,Zer78016], Add81356), 
LZer80573 = zero_padding2D_layer(Add81356, 0, 0, 2, 0, Zer80573), 
LMin87332 = minimum_layer([[[[[0.2209], [0.1044]]]], [[[[0.1524], [0.5557]]]]], Min87332), 
LZer81724 = zero_padding2D_layer(Min87332, 11, 0, 1, 0, Zer81724), 
LCon39406 = concatenate_layer([Zer81724,[[[[0.8835, 0.5497], [0.2977, 0.8037], [0.0095, 0.0518]], [[0.8581, 0.5157], [0.0975, 0.9952], [0.0192, 0.7858]], [[0.6559, 0.4157], [0.4368, 0.7034], [0.5398, 0.4285]], [[0.3044, 0.186], [0.0221, 0.7081], [0.5734, 0.9281]], [[0.0984, 0.2963], [0.3311, 0.7186], [0.5266, 0.9685]], [[0.5212, 0.44], [0.2901, 0.6823], [0.1457, 0.7384]], [[0.1422, 0.9497], [0.3205, 0.5688], [0.6422, 0.3299]], [[0.0772, 0.5613], [0.6246, 0.6227], [0.5978, 0.4293]], [[0.3554, 0.7554], [0.6502, 0.4464], [0.7273, 0.8065]], [[0.3526, 0.3542], [0.7184, 0.0823], [0.0346, 0.9336]], [[0.9978, 0.6759], [0.8901, 0.8703], [0.9995, 0.4741]], [[0.3143, 0.4754], [0.0063, 0.1521], [0.3106, 0.2851]]]]], 3, Con39406), 
LSub42739 = subtract_layer(Zer80573,Con39406, Sub42739), 
exec_layers([LUp_97608,LFla60247,LSub78032,LCon45745,LMin15409,LRes24421,LRes99300,LCon72815,LLoc36759,LZer78016,LAdd81356,LZer80573,LMin87332,LZer81724,LCon39406,LSub42739],["Up_97608","Fla60247","Sub78032","Con45745","Min15409","Res24421","Res99300","Con72815","Loc36759","Zer78016","Add81356","Zer80573","Min87332","Zer81724","Con39406","Sub42739"],Sub42739,"Sub42739")

Actual (Unparsed): [[[[0.0000000, -0.8835000, -0.5497000], [0.0000000, -0.2977000, -0.8037000], [-0.4006000, 0.7799000, -0.0456000]], [[0.0000000, -0.8581000, -0.5157000], [0.0000000, -0.0975000, -0.9952000], [0.1042000, 0.0101000, -0.1687000]], [[0.0000000, -0.6559000, -0.4157000], [0.0000000, -0.4368000, -0.7034000], [-0.4227000, 0.1677000, 0.1831000]], [[0.0000000, -0.3044000, -0.1860000], [0.0000000, -0.0221000, -0.7081000], [0.0867000, 0.2230000, -0.1180000]], [[0.0000000, -0.0984000, -0.2963000], [0.0000000, -0.3311000, -0.7186000], [0.9591000, 0.2763000, -0.3982000]], [[0.0000000, -0.5212000, -0.4400000], [0.0000000, -0.2901000, -0.6823000], [0.2102000, 0.7154000, 0.2126000]], [[0.0000000, -0.1422000, -0.9497000], [0.0000000, -0.3205000, -0.5688000], [0.7806000, 0.0623000, 0.2327000]], [[0.0000000, -0.0772000, -0.5613000], [0.0000000, -0.6246000, -0.6227000], [0.3392000, 0.3570000, -0.3344000]], [[0.0000000, -0.3554000, -0.7554000], [0.0000000, -0.6502000, -0.4464000], [0.4079000, -0.5983000, -0.1971000]], [[0.0000000, -0.3526000, -0.3542000], [0.0000000, -0.7184000, -0.0823000], [0.4873000, 0.0867000, -0.2721000]], [[0.0000000, -0.9978000, -0.6759000], [0.0000000, -0.8901000, -0.8703000], [2.1505080, 0.7145467, 0.7852610]], [[0.0000000, -0.3143000, -0.4754000], [-0.1524000, -0.0063000, -0.1521000], [1.4176797, 0.9037720, 1.2791162]]]]

Expected (Unparsed): [[[[0,-0.8835,-0.5497],[0,-0.2977,-0.8037],[-0.40060000000000007,0.7799,-0.0456]],[[0,-0.8581,-0.5157],[0,-0.0975,-0.9952],[0.10420000000000001,0.010100000000000001,-0.16870000000000007]],[[0,-0.6559,-0.4157],[0,-0.4368,-0.7034],[-0.42269999999999996,0.16770000000000007,0.18310000000000004]],[[0,-0.3044,-0.186],[0,-0.0221,-0.7081],[0.0867,0.22299999999999998,-0.118]],[[0,-0.0984,-0.2963],[0,-0.3311,-0.7186],[0.9591,0.2763,-0.3982]],[[0,-0.5212,-0.44],[0,-0.2901,-0.6823],[0.2102,0.7154,0.2126]],[[0,-0.1422,-0.9497],[0,-0.3205,-0.5688],[0.7806,0.06230000000000002,0.23269999999999996]],[[0,-0.0772,-0.5613],[0,-0.6246,-0.6227],[0.3392,0.357,-0.33440000000000003]],[[0,-0.3554,-0.7554],[0,-0.6502,-0.4464],[0.4079,-0.5982999999999999,-0.19709999999999994]],[[0,-0.3526,-0.3542],[0,-0.7184,-0.0823],[0.4873,0.0867,-0.2721]],[[0,-0.9978,-0.6759],[0,-0.8901,-0.8703],[2.15050796,0.7145466999999999,0.7852610200000001]],[[0,-0.3143,-0.4754],[-0.1524,-0.0063,-0.1521],[1.4176796600000001,0.90377196,1.2791162700000003]]]]

Actual:   [[[[0, -0.8835, -0.5497], [0, -0.2977, -0.8037], [-0.4006, 0.7799, -0.0456]], [[0, -0.8581, -0.5157], [0, -0.0975, -0.9952], [0.1042, 0.0101, -0.1687]], [[0, -0.6559, -0.4157], [0, -0.4368, -0.7034], [-0.4227, 0.1677, 0.1831]], [[0, -0.3044, -0.186], [0, -0.0221, -0.7081], [0.0867, 0.223, -0.118]], [[0, -0.0984, -0.2963], [0, -0.3311, -0.7186], [0.9591, 0.2763, -0.3982]], [[0, -0.5212, -0.44], [0, -0.2901, -0.6823], [0.2102, 0.7154, 0.2126]], [[0, -0.1422, -0.9497], [0, -0.3205, -0.5688], [0.7806, 0.0623, 0.2327]], [[0, -0.0772, -0.5613], [0, -0.6246, -0.6227], [0.3392, 0.357, -0.3344]], [[0, -0.3554, -0.7554], [0, -0.6502, -0.4464], [0.4079, -0.5983, -0.1971]], [[0, -0.3526, -0.3542], [0, -0.7184, -0.0823], [0.4873, 0.0867, -0.2721]], [[0, -0.9978, -0.6759], [0, -0.8901, -0.8703], [2.1506, 0.7146, 0.7853]], [[0, -0.3143, -0.4754], [-0.1524, -0.0063, -0.1521], [1.4177, 0.9038, 1.2792]]]]

Expected: [[[[0, -0.8835, -0.5497], [0, -0.2977, -0.8037], [-0.4006, 0.7799, -0.0456]], [[0, -0.8581, -0.5157], [0, -0.0975, -0.9952], [0.1043, 0.0102, -0.1687]], [[0, -0.6559, -0.4157], [0, -0.4368, -0.7034], [-0.4226, 0.1678, 0.1832]], [[0, -0.3044, -0.186], [0, -0.0221, -0.7081], [0.0867, 0.223, -0.118]], [[0, -0.0984, -0.2963], [0, -0.3311, -0.7186], [0.9591, 0.2763, -0.3982]], [[0, -0.5212, -0.44], [0, -0.2901, -0.6823], [0.2102, 0.7154, 0.2126]], [[0, -0.1422, -0.9497], [0, -0.3205, -0.5688], [0.7806, 0.0624, 0.2327]], [[0, -0.0772, -0.5613], [0, -0.6246, -0.6227], [0.3392, 0.357, -0.3344]], [[0, -0.3554, -0.7554], [0, -0.6502, -0.4464], [0.4079, -0.5982, -0.197]], [[0, -0.3526, -0.3542], [0, -0.7184, -0.0823], [0.4873, 0.0867, -0.2721]], [[0, -0.9978, -0.6759], [0, -0.8901, -0.8703], [2.1506, 0.7146, 0.7853]], [[0, -0.3143, -0.4754], [-0.1524, -0.0063, -0.1521], [1.4177, 0.9038, 1.2792]]]]