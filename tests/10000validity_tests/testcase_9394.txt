import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add78020 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in1Add78020 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Add9329 = tf.keras.layers.Input(shape=([1, 2]))
in1Add9329 = tf.keras.layers.Input(shape=([1, 2]))
in0Con6986 = tf.keras.layers.Input(shape=([2, 2]))

Add78020 = keras.layers.Add(name = 'Add78020', )([in0Add78020,in1Add78020])
Res84467 = keras.layers.Reshape((2, 2, 2), name = 'Res84467', )(Add78020)
Res27003 = keras.layers.Reshape((2, 4), name = 'Res27003', )(Res84467)
Add9329 = keras.layers.Add(name = 'Add9329', )([in0Add9329,in1Add9329])
Zer59975 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer59975', )(Add9329)
Con6986 = keras.layers.Concatenate(axis=2, name = 'Con6986', )([Zer59975,in0Con6986])
Min90818 = keras.layers.Minimum(name = 'Min90818', )([Res27003,Con6986])
Res49211 = keras.layers.Reshape((2, 4, 1), name = 'Res49211', )(Min90818)
Loc1095 = keras.layers.LocallyConnected2D(3, (2, 1),strides=(1, 1), name = 'Loc1095', )(Res49211)
Fla68581 = keras.layers.Flatten(name = 'Fla68581', )(Loc1095)
model = tf.keras.models.Model(inputs=[in0Add78020,in1Add78020,in0Add9329,in1Add9329,in0Con6986], outputs=Fla68581)
w = model.get_layer('Loc1095').get_weights() 
w[0] = np.array([[[0.3694, 0.0633, 0.203], [0.5587, 0.9119, 0.5221]], [[0.0065, 0.1403, 0.7168], [0.7456, 0.994, 0.9616]], [[0.0646, 0.4781, 0.34], [0.397, 0.4299, 0.852]], [[0.4312, 0.1256, 0.2656], [0.7831, 0.2708, 0.5146]]])
w[1] = np.array([[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]])
model.get_layer('Loc1095').set_weights(w) 
in0Add78020 = tf.constant([[[[[0.4661, 0.2943]], [[0.7404, 0.5637]]], [[[0.144, 0.5219]], [[0.0699, 0.613]]]]])
in1Add78020 = tf.constant([[[[[0.6348, 0.2934]], [[0.6039, 0.5448]]], [[[0.9829, 0.4512]], [[0.8562, 0.9118]]]]])
in0Add9329 = tf.constant([[[0.7841, 0.2101]]])
in1Add9329 = tf.constant([[[0.1574, 0.6716]]])
in0Con6986 = tf.constant([[[0.0501, 0.6229], [0.762, 0.2028]]])
print (np.array2string(model.predict([in0Add78020,in1Add78020,in0Add9329,in1Add9329,in0Con6986],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Fla68581.png')

LAdd78020 = add_layer([[[[[[0.4661, 0.2943]], [[0.7404, 0.5637]]], [[[0.144, 0.5219]], [[0.0699, 0.613]]]]], [[[[[0.6348, 0.2934]], [[0.6039, 0.5448]]], [[[0.9829, 0.4512]], [[0.8562, 0.9118]]]]]], Add78020), 
LRes84467 = reshape_layer(Add78020, [2, 2, 2], Res84467), 
LRes27003 = reshape_layer(Res84467, [2, 4], Res27003), 
LAdd9329 = add_layer([[[[0.7841, 0.2101]]], [[[0.1574, 0.6716]]]], Add9329), 
LZer59975 = zero_padding1D_layer(Add9329, 1, 0, Zer59975), 
LCon6986 = concatenate_layer([Zer59975,[[[0.0501, 0.6229], [0.762, 0.2028]]]], 2, Con6986), 
LMin90818 = minimum_layer([Res27003,Con6986], Min90818), 
LRes49211 = reshape_layer(Min90818, [2, 4, 1], Res49211), 
LLoc1095 = locally_connected2D_layer(Res49211, 2, 1,[[[0.3694, 0.0633, 0.203], [0.5587, 0.9119, 0.5221]], [[0.0065, 0.1403, 0.7168], [0.7456, 0.994, 0.9616]], [[0.0646, 0.4781, 0.34], [0.397, 0.4299, 0.852]], [[0.4312, 0.1256, 0.2656], [0.7831, 0.2708, 0.5146]]],[[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]], 1, 1, Loc1095), 
LFla68581 = flatten_layer(Loc1095, Fla68581), 
exec_layers([LAdd78020,LRes84467,LRes27003,LAdd9329,LZer59975,LCon6986,LMin90818,LRes49211,LLoc1095,LFla68581],["Add78020","Res84467","Res27003","Add9329","Zer59975","Con6986","Min90818","Res49211","Loc1095","Fla68581"],Fla68581,"Fla68581")

Actual (Unparsed): [[0.5260160, 0.8585538, 0.4915571, 0.6573955, 0.8764098, 0.8478427, 0.3057505, 0.3515366, 0.6662580, 0.4274072, 0.1331545, 0.2698031]]

Expected (Unparsed): [[0.52601605,0.8585538500000001,0.49155715,0.65739552,0.8764097999999999,0.8478427199999999,0.30575046,0.35153660999999997,0.666258,0.42740716,0.13315448,0.26980311999999995]]

Actual:   [[0.5261, 0.8586, 0.4916, 0.6574, 0.8765, 0.8479, 0.3058, 0.3516, 0.6663, 0.4275, 0.1332, 0.2699]]

Expected: [[0.5261, 0.8586, 0.4916, 0.6574, 0.8765, 0.8479, 0.3058, 0.3516, 0.6663, 0.4275, 0.1332, 0.2699]]