import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max78096 = tf.keras.layers.Input(shape=([2, 1]))
in1Max78096 = tf.keras.layers.Input(shape=([2, 1]))
in0Con63193 = tf.keras.layers.Input(shape=([2, 1]))
in0ReL62205 = tf.keras.layers.Input(shape=([2, 2]))

Max78096 = keras.layers.Maximum(name = 'Max78096', )([in0Max78096,in1Max78096])
Con63193 = keras.layers.Concatenate(axis=2, name = 'Con63193', )([Max78096,in0Con63193])
ReL62205 = keras.layers.ReLU(max_value=7.153486288591747, negative_slope=2.1274814006654967, threshold=0.9957529125137032, name = 'ReL62205', input_shape=(2, 2))(in0ReL62205)
Ave99085 = keras.layers.Average(name = 'Ave99085', )([Con63193,ReL62205])
Up_35142 = keras.layers.UpSampling1D(size=(2), name = 'Up_35142', )(Ave99085)
Res79806 = keras.layers.Reshape((4, 2, 1), name = 'Res79806', )(Up_35142)
Res2278 = keras.layers.Reshape((4, 2, 1, 1), name = 'Res2278', )(Res79806)
Con65000 = keras.layers.Conv3D(4, (4, 1, 1),strides=(1, 1, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con65000', )(Res2278)
model = tf.keras.models.Model(inputs=[in0Max78096,in1Max78096,in0Con63193,in0ReL62205], outputs=Con65000)
w = model.get_layer('Con65000').get_weights() 
w[0] = np.array([[[[[0.9996, 0.0368, 0.82, 0.2758]]]], [[[[0.7965, 0.3245, 0.3208, 0.8206]]]], [[[[0.4521, 0.2587, 0.1039, 0.2619]]]], [[[[0.0866, 0.3142, 0.0916, 0.0776]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con65000').set_weights(w) 
in0Max78096 = tf.constant([[[0.7334], [0.36]]])
in1Max78096 = tf.constant([[[0.7826], [0.3619]]])
in0Con63193 = tf.constant([[[0.1435], [0.1441]]])
in0ReL62205 = tf.constant([[[0.0532, 0.8424], [0.0279, 0.4472]]])
print (np.array2string(model.predict([in0Max78096,in1Max78096,in0Con63193,in0ReL62205],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con65000.png')

LMax78096 = maximum_layer([[[[0.7334], [0.36]]], [[[0.7826], [0.3619]]]], Max78096), 
LCon63193 = concatenate_layer([Max78096,[[[0.1435], [0.1441]]]], 2, Con63193), 
LReL62205 = relu_layer([[[0.0532, 0.8424], [0.0279, 0.4472]]], 7.153486288591747, 2.1274814006654967, 0.9957529125137032, ReL62205), 
LAve99085 = average_layer([Con63193,ReL62205], Ave99085), 
LUp_35142 = up_sampling1D_layer(Ave99085, 2, Up_35142), 
LRes79806 = reshape_layer(Up_35142, [4, 2, 1], Res79806), 
LRes2278 = reshape_layer(Res79806, [4, 2, 1, 1], Res2278), 
LCon65000 = conv3D_layer(Res2278, 4, 1, 1,[[[[[0.9996, 0.0368, 0.82, 0.2758]]]], [[[[0.7965, 0.3245, 0.3208, 0.8206]]]], [[[[0.4521, 0.2587, 0.1039, 0.2619]]]], [[[[0.0866, 0.3142, 0.0916, 0.0776]]]]],[0, 0, 0, 0], 1, 1, 1, true, 1, 1, 1, Con65000), 
exec_layers([LMax78096,LCon63193,LReL62205,LAve99085,LUp_35142,LRes79806,LRes2278,LCon65000],["Max78096","Con63193","ReL62205","Ave99085","Up_35142","Res79806","Res2278","Con65000"],Con65000,"Con65000")

Actual (Unparsed): [[[[[-0.8367973, -0.6231572, -0.3373639, -0.7276177]], [[-0.1583874, -0.2139948, -0.0856586, -0.1386063]]], [[[-1.5551511, -0.7070340, -0.8633077, -0.9583621]], [[-0.4396514, -0.3260348, -0.2042357, -0.2738299]]], [[[-1.6706425, -0.5173973, -0.8616903, -1.0872089]], [[-0.7299602, -0.3016509, -0.2921502, -0.5788662]]], [[[-1.5241606, -0.3065972, -0.9680766, -0.9303990]], [[-0.9186478, -0.1847934, -0.5834828, -0.5607736]]]]]

Expected (Unparsed): [[[[[-0.8367972911480945,-0.623157164204055,-0.3373639153199117,-0.7276177125309533]],[[-0.15838737330357322,-0.2139947590332159,-0.08565859810001916,-0.13860631905998036]]],[[[-1.555151093064687,-0.7070340228447041,-0.8633076576982142,-0.958362134585363]],[[-0.4396513925943405,-0.326034826683242,-0.20423572517920074,-0.27382995430801427]]],[[[-1.6706424988714494,-0.5173973465437407,-0.861690253116043,-1.0872089208241273]],[[-0.7299602023371328,-0.3016508728310838,-0.29215022713155503,-0.5788661534117417]]],[[[-1.5241606442711426,-0.3065972054869795,-0.9680766455010964,-0.9303990481481437]],[[-0.9186477813570368,-0.18479340983480733,-0.5834827620801223,-0.5607735802460081]]]]]

Actual:   [[[[[-0.8367, -0.6231, -0.3373, -0.7276]], [[-0.1583, -0.2139, -0.0856, -0.1386]]], [[[-1.5551, -0.707, -0.8633, -0.9583]], [[-0.4396, -0.326, -0.2042, -0.2738]]], [[[-1.6706, -0.5173, -0.8616, -1.0872]], [[-0.7299, -0.3016, -0.2921, -0.5788]]], [[[-1.5241, -0.3065, -0.968, -0.9303]], [[-0.9186, -0.1847, -0.5834, -0.5607]]]]]

Expected: [[[[[-0.8367, -0.6231, -0.3373, -0.7276]], [[-0.1583, -0.2139, -0.0856, -0.1386]]], [[[-1.5551, -0.707, -0.8633, -0.9583]], [[-0.4396, -0.326, -0.2042, -0.2738]]], [[[-1.6706, -0.5173, -0.8616, -1.0872]], [[-0.7299, -0.3016, -0.2921, -0.5788]]], [[[-1.5241, -0.3065, -0.968, -0.9303]], [[-0.9186, -0.1847, -0.5834, -0.5607]]]]]