import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mas11921 = tf.keras.layers.Input(shape=([2, 1]))
in0Con30514 = tf.keras.layers.Input(shape=([6, 8]))
in0Mul46794 = tf.keras.layers.Input(shape=([1, 1, 2]))
in1Mul46794 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con49239 = tf.keras.layers.Input(shape=([6, 3, 1]))
in0Zer20152 = tf.keras.layers.Input(shape=([4, 1, 3]))
in0Mul65876 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Mul65876 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Up_6687 = tf.keras.layers.Input(shape=([4, 4, 1]))
in0Mul79382 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in1Mul79382 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Con97853 = tf.keras.layers.Input(shape=([46]))

Mas11921 = keras.layers.Masking(mask_value=2, name = 'Mas11921', )(in0Mas11921)
Fla56943 = keras.layers.Flatten(name = 'Fla56943', )(Mas11921)
Thr83953 = keras.layers.ThresholdedReLU(theta=3.944334119209901, name = 'Thr83953', )(Fla56943)
Res57098 = keras.layers.Reshape((2, 1), name = 'Res57098', )(Thr83953)
Zer16569 = keras.layers.ZeroPadding1D(padding=((4, 0)), name = 'Zer16569', )(Res57098)
Con30514 = keras.layers.Concatenate(axis=2, name = 'Con30514', )([Zer16569,in0Con30514])
Mul46794 = keras.layers.Multiply(name = 'Mul46794', )([in0Mul46794,in1Mul46794])
Zer47853 = keras.layers.ZeroPadding2D(padding=((5, 0), (2, 0)), name = 'Zer47853', )(Mul46794)
Con49239 = keras.layers.Concatenate(axis=3, name = 'Con49239', )([Zer47853,in0Con49239])
Zer20152 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer20152', )(in0Zer20152)
Max43288 = keras.layers.Maximum(name = 'Max43288', )([Con49239,Zer20152])
Res66895 = keras.layers.Reshape((6, 9), name = 'Res66895', )(Max43288)
Up_90792 = keras.layers.UpSampling1D(size=(1), name = 'Up_90792', )(Res66895)
Ave96748 = keras.layers.Average(name = 'Ave96748', )([Con30514,Up_90792])
Res2808 = keras.layers.Reshape((6, 9, 1), name = 'Res2808', )(Ave96748)
Mul65876 = keras.layers.Multiply(name = 'Mul65876', )([in0Mul65876,in1Mul65876])
Res14033 = keras.layers.Reshape((1, 1), name = 'Res14033', )(Mul65876)
Sim74518 = keras.layers.SimpleRNN(1,name = 'Sim74518', )(Res14033)
Res59524 = keras.layers.Reshape((1, 1), name = 'Res59524', )(Sim74518)
Res29713 = keras.layers.Reshape((1, 1, 1), name = 'Res29713', )(Res59524)
Zer35723 = keras.layers.ZeroPadding2D(padding=((3, 0), (3, 0)), name = 'Zer35723', )(Res29713)
Up_6687 = keras.layers.UpSampling2D(size=(1, 1), name = 'Up_6687', )(in0Up_6687)
Min81203 = keras.layers.Minimum(name = 'Min81203', )([Zer35723,Up_6687])
Zer2483 = keras.layers.ZeroPadding2D(padding=((2, 0), (5, 0)), name = 'Zer2483', )(Min81203)
Ave31542 = keras.layers.Average(name = 'Ave31542', )([Res2808,Zer2483])
Res4842 = keras.layers.Reshape((6, 9), name = 'Res4842', )(Ave31542)
Fla76436 = keras.layers.Flatten(name = 'Fla76436', )(Res4842)
Mul79382 = keras.layers.Multiply(name = 'Mul79382', )([in0Mul79382,in1Mul79382])
Fla85461 = keras.layers.Flatten(name = 'Fla85461', )(Mul79382)
Con97853 = keras.layers.Concatenate(axis=1, name = 'Con97853', )([Fla85461,in0Con97853])
Ave7640 = keras.layers.Average(name = 'Ave7640', )([Fla76436,Con97853])
model = tf.keras.models.Model(inputs=[in0Mas11921,in0Con30514,in0Mul46794,in1Mul46794,in0Con49239,in0Zer20152,in0Mul65876,in1Mul65876,in0Up_6687,in0Mul79382,in1Mul79382,in0Con97853], outputs=Ave7640)
w = model.get_layer('Sim74518').get_weights() 
w[0] = np.array([[6]])
w[1] = np.array([[6]])
w[2] = np.array([4])
model.get_layer('Sim74518').set_weights(w) 
in0Mas11921 = tf.constant([[[1.7616], [1.3734]]])
in0Con30514 = tf.constant([[[0.2896, 0.0286, 0.3149, 0.4648, 0.7025, 0.5878, 0.131, 0.1744], [0.2277, 0.3857, 0.8678, 0.8222, 0.3717, 0.7885, 0.3656, 0.538], [0.1595, 0.6363, 0.3041, 0.0552, 0.7436, 0.1383, 0.2307, 0.6258], [0.5507, 0.6101, 0.5642, 0.7123, 0.1646, 0.2196, 0.3152, 0.1435], [0.3336, 0.6106, 0.2845, 0.0716, 0.5895, 0.1276, 0.9309, 0.3807], [0.9722, 0.3784, 0.9299, 0.1599, 0.2621, 0.0423, 0.6839, 0.4783]]])
in0Mul46794 = tf.constant([[[[0.1458, 0.8527]]]])
in1Mul46794 = tf.constant([[[[0.4538, 0.444]]]])
in0Con49239 = tf.constant([[[[0.4578], [0.4264], [0.3152]], [[0.1525], [0.0504], [0.3924]], [[0.5913], [0.6633], [0.8382]], [[0.0603], [0.703], [0.4276]], [[0.2106], [0.1133], [0.7832]], [[0.065], [0.5392], [0.5829]]]])
in0Zer20152 = tf.constant([[[[1.8896, 1.1636, 1.3326]], [[1.6107, 1.7379, 1.6912]], [[1.9657, 1.8069, 1.9087]], [[1.4912, 1.9948, 1.3177]]]])
in0Mul65876 = tf.constant([[[[0.4577]]]])
in1Mul65876 = tf.constant([[[[0.2979]]]])
in0Up_6687 = tf.constant([[[[1.2453], [1.2499], [1.7702], [1.3855]], [[1.4887], [1.7415], [1.2422], [1.978]], [[1.5438], [1.3703], [1.2811], [1.7296]], [[1.2976], [1.1628], [1.7973], [1.4986]]]])
in0Mul79382 = tf.constant([[[[[0.6636], [0.3231]], [[0.4264], [0.6257]]], [[[0.4519], [0.2996]], [[0.8289], [0.1924]]]]])
in1Mul79382 = tf.constant([[[[[0.6224], [0.0959]], [[0.5429], [0.2837]]], [[[0.4145], [0.7886]], [[0.0354], [0.1088]]]]])
in0Con97853 = tf.constant([[0.6439, 0.8065, 0.1989, 0.1616, 0.9738, 0.1337, 0.9967, 0.1855, 0.3116, 0.8632, 0.9553, 0.2996, 0.3595, 0.2736, 0.6446, 0.9701, 0.7236, 0.9175, 0.8673, 0.9187, 0.0991, 0.7492, 0.0779, 0.0988, 0.7103, 0.5688, 0.7346, 0.421, 0.6964, 0.3668, 0.73, 0.6903, 0.1775, 0.8553, 0.4803, 0.9355, 0.8044, 0.458, 0.2087, 0.8151, 0.6983, 0.298, 0.458, 0.0638, 0.8229, 0.2705]])
print (np.array2string(model.predict([in0Mas11921,in0Con30514,in0Mul46794,in1Mul46794,in0Con49239,in0Zer20152,in0Mul65876,in1Mul65876,in0Up_6687,in0Mul79382,in1Mul79382,in0Con97853],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave7640.png')

LMas11921 = masking_layer([[[1.7616], [1.3734]]], 2, Mas11921), 
LFla56943 = flatten_layer(Mas11921, Fla56943), 
LThr83953 = thresholded_relu_layer(Fla56943, 3.944334119209901, Thr83953), 
LRes57098 = reshape_layer(Thr83953, [2, 1], Res57098), 
LZer16569 = zero_padding1D_layer(Res57098, 4, 0, Zer16569), 
LCon30514 = concatenate_layer([Zer16569,[[[0.2896, 0.0286, 0.3149, 0.4648, 0.7025, 0.5878, 0.131, 0.1744], [0.2277, 0.3857, 0.8678, 0.8222, 0.3717, 0.7885, 0.3656, 0.538], [0.1595, 0.6363, 0.3041, 0.0552, 0.7436, 0.1383, 0.2307, 0.6258], [0.5507, 0.6101, 0.5642, 0.7123, 0.1646, 0.2196, 0.3152, 0.1435], [0.3336, 0.6106, 0.2845, 0.0716, 0.5895, 0.1276, 0.9309, 0.3807], [0.9722, 0.3784, 0.9299, 0.1599, 0.2621, 0.0423, 0.6839, 0.4783]]]], 2, Con30514), 
LMul46794 = multiply_layer([[[[[0.1458, 0.8527]]]], [[[[0.4538, 0.444]]]]], Mul46794), 
LZer47853 = zero_padding2D_layer(Mul46794, 5, 0, 2, 0, Zer47853), 
LCon49239 = concatenate_layer([Zer47853,[[[[0.4578], [0.4264], [0.3152]], [[0.1525], [0.0504], [0.3924]], [[0.5913], [0.6633], [0.8382]], [[0.0603], [0.703], [0.4276]], [[0.2106], [0.1133], [0.7832]], [[0.065], [0.5392], [0.5829]]]]], 3, Con49239), 
LZer20152 = zero_padding2D_layer([[[[1.8896, 1.1636, 1.3326]], [[1.6107, 1.7379, 1.6912]], [[1.9657, 1.8069, 1.9087]], [[1.4912, 1.9948, 1.3177]]]], 1, 1, 1, 1, Zer20152), 
LMax43288 = maximum_layer([Con49239,Zer20152], Max43288), 
LRes66895 = reshape_layer(Max43288, [6, 9], Res66895), 
LUp_90792 = up_sampling1D_layer(Res66895, 1, Up_90792), 
LAve96748 = average_layer([Con30514,Up_90792], Ave96748), 
LRes2808 = reshape_layer(Ave96748, [6, 9, 1], Res2808), 
LMul65876 = multiply_layer([[[[[0.4577]]]], [[[[0.2979]]]]], Mul65876), 
LRes14033 = reshape_layer(Mul65876, [1, 1], Res14033), 
LSim74518 = simple_rnn_layer(Res14033,[[6]],[[6]],[4], Sim74518), 
LRes59524 = reshape_layer(Sim74518, [1, 1], Res59524), 
LRes29713 = reshape_layer(Res59524, [1, 1, 1], Res29713), 
LZer35723 = zero_padding2D_layer(Res29713, 3, 0, 3, 0, Zer35723), 
LUp_6687 = up_sampling2D_layer([[[[1.2453], [1.2499], [1.7702], [1.3855]], [[1.4887], [1.7415], [1.2422], [1.978]], [[1.5438], [1.3703], [1.2811], [1.7296]], [[1.2976], [1.1628], [1.7973], [1.4986]]]], 1, 1, Up_6687), 
LMin81203 = minimum_layer([Zer35723,Up_6687], Min81203), 
LZer2483 = zero_padding2D_layer(Min81203, 2, 0, 5, 0, Zer2483), 
LAve31542 = average_layer([Res2808,Zer2483], Ave31542), 
LRes4842 = reshape_layer(Ave31542, [6, 9], Res4842), 
LFla76436 = flatten_layer(Res4842, Fla76436), 
LMul79382 = multiply_layer([[[[[[0.6636], [0.3231]], [[0.4264], [0.6257]]], [[[0.4519], [0.2996]], [[0.8289], [0.1924]]]]], [[[[[0.6224], [0.0959]], [[0.5429], [0.2837]]], [[[0.4145], [0.7886]], [[0.0354], [0.1088]]]]]], Mul79382), 
LFla85461 = flatten_layer(Mul79382, Fla85461), 
LCon97853 = concatenate_layer([Fla85461,[[0.6439, 0.8065, 0.1989, 0.1616, 0.9738, 0.1337, 0.9967, 0.1855, 0.3116, 0.8632, 0.9553, 0.2996, 0.3595, 0.2736, 0.6446, 0.9701, 0.7236, 0.9175, 0.8673, 0.9187, 0.0991, 0.7492, 0.0779, 0.0988, 0.7103, 0.5688, 0.7346, 0.421, 0.6964, 0.3668, 0.73, 0.6903, 0.1775, 0.8553, 0.4803, 0.9355, 0.8044, 0.458, 0.2087, 0.8151, 0.6983, 0.298, 0.458, 0.0638, 0.8229, 0.2705]]], 1, Con97853), 
LAve7640 = average_layer([Fla76436,Con97853], Ave7640), 
exec_layers([LMas11921,LFla56943,LThr83953,LRes57098,LZer16569,LCon30514,LMul46794,LZer47853,LCon49239,LZer20152,LMax43288,LRes66895,LUp_90792,LAve96748,LRes2808,LMul65876,LRes14033,LSim74518,LRes59524,LRes29713,LZer35723,LUp_6687,LMin81203,LZer2483,LAve31542,LRes4842,LFla76436,LMul79382,LFla85461,LCon97853,LAve7640],["Mas11921","Fla56943","Thr83953","Res57098","Zer16569","Con30514","Mul46794","Zer47853","Con49239","Zer20152","Max43288","Res66895","Up_90792","Ave96748","Res2808","Mul65876","Res14033","Sim74518","Res59524","Res29713","Zer35723","Up_6687","Min81203","Zer2483","Ave31542","Res4842","Fla76436","Mul79382","Fla85461","Con97853","Ave7640"],Ave7640,"Ave7640")

Actual (Unparsed): [[0.2065123, 0.0516926, 0.1765463, 0.1281180, 0.1517563, 0.2592448, 0.0881465, 0.0268416, 0.3831500, 0.4032500, 0.1279125, 0.1480750, 0.8315750, 0.3150750, 0.7113875, 0.1913125, 0.2015000, 0.5479000, 0.4776500, 0.1697375, 0.3332000, 0.3761500, 0.5464375, 0.7894000, 0.3790875, 0.4875875, 0.6166500, 0.4593500, 0.1183875, 0.4584000, 0.3551875, 0.3643000, 0.6143125, 0.3118500, 0.4067000, 0.2818875, 0.3482000, 0.2251000, 0.4676500, 0.5671125, 0.3470500, 0.6660500, 0.2561000, 0.5841125, 0.5476875, 0.2290000, 0.2258750, 0.4629750, 0.4653875, 0.1689875, 0.3291625, 0.0454580, 0.5442623, 0.5178673]]

Expected (Unparsed): [[0.20651231999999997,0.051692645,0.17654628,0.128118045,0.151756275,0.25924478,0.08814653,0.02684156,0.38315,0.40325,0.12791249999999998,0.148075,0.831575,0.315075,0.7113875000000001,0.1913125,0.20149999999999998,0.5479,0.47765,0.16973749999999999,0.3332,0.37615,0.5464374999999999,0.7894,0.3790875,0.4875875,0.6166499999999999,0.45935,0.11838749999999999,0.4584,0.3551875,0.3643,0.6143125,0.31184999999999996,0.4067,0.28188749999999996,0.3482,0.22510000000000002,0.46765,0.5671125,0.34704999999999997,0.66605,0.2561,0.5841125,0.5476875,0.229,0.225875,0.462975,0.4653875,0.16898749999999998,0.3291625,0.045458004999999996,0.54426235,0.5178673412733795]]

Actual:   [[0.2066, 0.0517, 0.1766, 0.1282, 0.1518, 0.2593, 0.0882, 0.0269, 0.3832, 0.4033, 0.128, 0.1481, 0.8316, 0.3151, 0.7114, 0.1914, 0.2015, 0.5479, 0.4777, 0.1698, 0.3332, 0.3762, 0.5465, 0.7894, 0.3791, 0.4876, 0.6167, 0.4594, 0.1184, 0.4584, 0.3552, 0.3643, 0.6144, 0.3119, 0.4067, 0.2819, 0.3482, 0.2251, 0.4677, 0.5672, 0.3471, 0.6661, 0.2561, 0.5842, 0.5477, 0.229, 0.2259, 0.463, 0.4654, 0.169, 0.3292, 0.0455, 0.5443, 0.5179]]

Expected: [[0.2066, 0.0517, 0.1766, 0.1282, 0.1518, 0.2593, 0.0882, 0.0269, 0.3832, 0.4033, 0.128, 0.1481, 0.8316, 0.3151, 0.7114, 0.1914, 0.2015, 0.5479, 0.4777, 0.1698, 0.3332, 0.3762, 0.5465, 0.7894, 0.3791, 0.4876, 0.6167, 0.4594, 0.1184, 0.4584, 0.3552, 0.3643, 0.6144, 0.3119, 0.4067, 0.2819, 0.3482, 0.2252, 0.4677, 0.5672, 0.3471, 0.6661, 0.2561, 0.5842, 0.5477, 0.229, 0.2259, 0.463, 0.4654, 0.169, 0.3292, 0.0455, 0.5443, 0.5179]]