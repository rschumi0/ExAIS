import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer94979 = tf.keras.layers.Input(shape=([3, 3, 3, 1]))
in0Up_52748 = tf.keras.layers.Input(shape=([3, 1, 2]))
in0Con8184 = tf.keras.layers.Input(shape=([3, 1, 1]))

Zer94979 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer94979', )(in0Zer94979)
Res77167 = keras.layers.Reshape((5, 5, 5), name = 'Res77167', )(Zer94979)
Con26338 = keras.layers.Conv2DTranspose(4, (4, 3),strides=(1, 1), padding='same', name = 'Con26338', )(Res77167)
Sep55403 = keras.layers.SeparableConv2D(3, (3, 5),strides=(4, 4), padding='valid', name = 'Sep55403', )(Con26338)
Zer88676 = keras.layers.ZeroPadding2D(padding=((2, 0), (0, 0)), name = 'Zer88676', )(Sep55403)
Up_52748 = keras.layers.UpSampling2D(size=(1, 2), name = 'Up_52748', )(in0Up_52748)
Max80054 = keras.layers.MaxPool2D(pool_size=(1, 2), strides=(1, 1), padding='valid', name = 'Max80054', )(Up_52748)
Con8184 = keras.layers.Concatenate(axis=3, name = 'Con8184', )([Max80054,in0Con8184])
Ave51927 = keras.layers.Average(name = 'Ave51927', )([Zer88676,Con8184])
model = tf.keras.models.Model(inputs=[in0Zer94979,in0Up_52748,in0Con8184], outputs=Ave51927)
w = model.get_layer('Con26338').get_weights() 
w[0] = np.array([[[[0.5481, 0.5237, 0.3837, 0.8888, 0.1632], [0.3182, 0.6817, 0.8109, 0.9047, 0.6873], [0.0774, 0.4931, 0.9969, 0.1739, 0.5446], [0.1653, 0.5179, 0.0694, 0.4161, 0.1522]], [[0.1602, 0.9391, 0.4023, 0.3356, 0.5546], [0.557, 0.4899, 0.5011, 0.8842, 0.2962], [0.8426, 0.5447, 0.0362, 0.1712, 0.428], [0.8751, 0.4641, 0.5428, 0.5951, 0.8563]], [[0.2679, 0.9568, 0.2432, 0.8069, 0.7376], [0.7138, 0.5355, 0.8958, 0.7524, 0.5444], [0.3377, 0.2565, 0.9782, 0.1977, 0.6901], [0.7806, 0.7645, 0.8429, 0.6588, 0.342]]], [[[0.007, 0.9313, 0.8526, 0.6576, 0.0114], [0.5678, 0.7427, 0.5931, 0.5713, 0.5018], [0.6761, 0.4885, 0.0557, 0.5635, 0.1339], [0.9937, 0.2924, 0.7412, 0.3555, 0.9813]], [[0.4256, 0.1274, 0.9203, 0.3366, 0.7328], [0.6428, 0.2615, 0.809, 0.5889, 0.79], [0.37, 0.6566, 0.3835, 0.6837, 0.1406], [0.513, 0.2165, 0.2615, 0.9101, 0.7642]], [[0.6226, 0.8834, 0.7438, 0.7341, 0.4111], [0.4995, 0.9343, 0.1475, 0.9448, 0.1827], [0.9984, 0.6651, 0.8263, 0.1058, 0.1784], [0.7628, 0.0151, 0.9727, 0.0844, 0.8719]]], [[[0.8531, 0.5088, 0.6521, 0.4833, 0.344], [0.8578, 0.0305, 0.8751, 0.2984, 0.6398], [0.3645, 0.2255, 0.6382, 0.9833, 0.6917], [0.1379, 0.232, 0.058, 0.3324, 0.0222]], [[0.1258, 0.5111, 0.2228, 0.3543, 0.9277], [0.7338, 0.6096, 0.5626, 0.4066, 0.0738], [0.4104, 0.1837, 0.0739, 0.9454, 0.3247], [0.9683, 0.63, 0.291, 0.4766, 0.823]], [[0.6804, 0.9968, 0.9671, 0.825, 0.0493], [0.6781, 0.2186, 0.0652, 0.356, 0.7137], [0.4078, 0.7394, 0.2542, 0.5312, 0.5961], [0.735, 0.8837, 0.9249, 0.395, 0.941]]], [[[0.6325, 0.6192, 0.1311, 0.6484, 0.2684], [0.3858, 0.5113, 0.6981, 0.8607, 0.7652], [0.7329, 0.4902, 0.6842, 0.8508, 0.8312], [0.5672, 0.4759, 0.6497, 0.8105, 0.2533]], [[0.995, 0.2526, 0.7685, 0.7463, 0.8281], [0.417, 0.7882, 0.1355, 0.7766, 0.194], [0.8493, 0.051, 0.9647, 0.9175, 0.3847], [0.0368, 0.0143, 0.2108, 0.4016, 0.2827]], [[0.248, 0.6674, 0.2714, 0.0538, 0.9019], [0.5115, 0.3978, 0.0087, 0.7554, 0.8579], [0.9719, 0.6132, 0.4196, 0.1518, 0.9391], [0.024, 0.7651, 0.9964, 0.1159, 0.1414]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con26338').set_weights(w) 
w = model.get_layer('Sep55403').get_weights() 
w[0] = np.array([[[[0.5312], [0.693], [0.3582], [0.1569]], [[0.6302], [0.0134], [0.652], [0.0105]], [[0.5071], [0.7251], [0.7007], [0.7611]], [[0.6853], [0.6534], [0.6718], [0.4978]], [[0.7647], [0.8208], [0.2346], [0.4057]]], [[[0.0177], [0.6814], [0.4677], [0.2287]], [[0.1262], [0.9688], [0.2485], [0.5774]], [[0.966], [0.6474], [0.9828], [0.5392]], [[0.3144], [0.7798], [0.765], [0.2647]], [[0.1121], [0.4739], [0.5807], [0.9444]]], [[[0.4376], [0.4595], [0.9565], [0.8654]], [[0.6686], [0.256], [0.5442], [0.0428]], [[0.399], [0.3431], [0.4857], [0.2593]], [[0.5571], [0.2193], [0.0464], [0.2112]], [[0.8248], [0.7465], [0.929], [0.8618]]]])
w[1] = np.array([[[[0.1852, 0.0818, 0.5566], [0.1577, 0.0048, 0.4433], [0.2501, 0.2983, 0.5862], [0.3126, 0.8246, 0.8069]]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep55403').set_weights(w) 
in0Zer94979 = tf.constant([[[[[1.1196], [1.4771], [1.2747]], [[1.9044], [1.738], [1.8344]], [[1.6304], [1.105], [1.6245]]], [[[1.804], [1.8554], [1.1395]], [[1.5775], [1.1591], [1.831]], [[1.5212], [1.0778], [1.0266]]], [[[1.1353], [1.0398], [1.5477]], [[1.2585], [1.5654], [1.1578]], [[1.2079], [1.3729], [1.0206]]]]])
in0Up_52748 = tf.constant([[[[1.9512, 1.4399]], [[1.8566, 1.485]], [[1.0483, 1.4235]]]])
in0Con8184 = tf.constant([[[[0.8546]], [[0.0468]], [[0.4946]]]])
print (np.array2string(model.predict([in0Zer94979,in0Up_52748,in0Con8184],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave51927.png')

LZer94979 = zero_padding3D_layer([[[[[1.1196], [1.4771], [1.2747]], [[1.9044], [1.738], [1.8344]], [[1.6304], [1.105], [1.6245]]], [[[1.804], [1.8554], [1.1395]], [[1.5775], [1.1591], [1.831]], [[1.5212], [1.0778], [1.0266]]], [[[1.1353], [1.0398], [1.5477]], [[1.2585], [1.5654], [1.1578]], [[1.2079], [1.3729], [1.0206]]]]], 1, 1, 1, 1, 1, 1, Zer94979), 
LRes77167 = reshape_layer(Zer94979, [5, 5, 5], Res77167), 
LCon26338 = conv2D_transpose_layer(Res77167, 4, 3,[[[[0.5481, 0.5237, 0.3837, 0.8888, 0.1632], [0.3182, 0.6817, 0.8109, 0.9047, 0.6873], [0.0774, 0.4931, 0.9969, 0.1739, 0.5446], [0.1653, 0.5179, 0.0694, 0.4161, 0.1522]], [[0.1602, 0.9391, 0.4023, 0.3356, 0.5546], [0.557, 0.4899, 0.5011, 0.8842, 0.2962], [0.8426, 0.5447, 0.0362, 0.1712, 0.428], [0.8751, 0.4641, 0.5428, 0.5951, 0.8563]], [[0.2679, 0.9568, 0.2432, 0.8069, 0.7376], [0.7138, 0.5355, 0.8958, 0.7524, 0.5444], [0.3377, 0.2565, 0.9782, 0.1977, 0.6901], [0.7806, 0.7645, 0.8429, 0.6588, 0.342]]], [[[0.007, 0.9313, 0.8526, 0.6576, 0.0114], [0.5678, 0.7427, 0.5931, 0.5713, 0.5018], [0.6761, 0.4885, 0.0557, 0.5635, 0.1339], [0.9937, 0.2924, 0.7412, 0.3555, 0.9813]], [[0.4256, 0.1274, 0.9203, 0.3366, 0.7328], [0.6428, 0.2615, 0.809, 0.5889, 0.79], [0.37, 0.6566, 0.3835, 0.6837, 0.1406], [0.513, 0.2165, 0.2615, 0.9101, 0.7642]], [[0.6226, 0.8834, 0.7438, 0.7341, 0.4111], [0.4995, 0.9343, 0.1475, 0.9448, 0.1827], [0.9984, 0.6651, 0.8263, 0.1058, 0.1784], [0.7628, 0.0151, 0.9727, 0.0844, 0.8719]]], [[[0.8531, 0.5088, 0.6521, 0.4833, 0.344], [0.8578, 0.0305, 0.8751, 0.2984, 0.6398], [0.3645, 0.2255, 0.6382, 0.9833, 0.6917], [0.1379, 0.232, 0.058, 0.3324, 0.0222]], [[0.1258, 0.5111, 0.2228, 0.3543, 0.9277], [0.7338, 0.6096, 0.5626, 0.4066, 0.0738], [0.4104, 0.1837, 0.0739, 0.9454, 0.3247], [0.9683, 0.63, 0.291, 0.4766, 0.823]], [[0.6804, 0.9968, 0.9671, 0.825, 0.0493], [0.6781, 0.2186, 0.0652, 0.356, 0.7137], [0.4078, 0.7394, 0.2542, 0.5312, 0.5961], [0.735, 0.8837, 0.9249, 0.395, 0.941]]], [[[0.6325, 0.6192, 0.1311, 0.6484, 0.2684], [0.3858, 0.5113, 0.6981, 0.8607, 0.7652], [0.7329, 0.4902, 0.6842, 0.8508, 0.8312], [0.5672, 0.4759, 0.6497, 0.8105, 0.2533]], [[0.995, 0.2526, 0.7685, 0.7463, 0.8281], [0.417, 0.7882, 0.1355, 0.7766, 0.194], [0.8493, 0.051, 0.9647, 0.9175, 0.3847], [0.0368, 0.0143, 0.2108, 0.4016, 0.2827]], [[0.248, 0.6674, 0.2714, 0.0538, 0.9019], [0.5115, 0.3978, 0.0087, 0.7554, 0.8579], [0.9719, 0.6132, 0.4196, 0.1518, 0.9391], [0.024, 0.7651, 0.9964, 0.1159, 0.1414]]]],[0, 0, 0, 0], 1, 1, true, Con26338), 
LSep55403 = separable_conv2D_layer(Con26338, 3, 5,[[[[[0.5312], [0.693], [0.3582], [0.1569]], [[0.6302], [0.0134], [0.652], [0.0105]], [[0.5071], [0.7251], [0.7007], [0.7611]], [[0.6853], [0.6534], [0.6718], [0.4978]], [[0.7647], [0.8208], [0.2346], [0.4057]]], [[[0.0177], [0.6814], [0.4677], [0.2287]], [[0.1262], [0.9688], [0.2485], [0.5774]], [[0.966], [0.6474], [0.9828], [0.5392]], [[0.3144], [0.7798], [0.765], [0.2647]], [[0.1121], [0.4739], [0.5807], [0.9444]]], [[[0.4376], [0.4595], [0.9565], [0.8654]], [[0.6686], [0.256], [0.5442], [0.0428]], [[0.399], [0.3431], [0.4857], [0.2593]], [[0.5571], [0.2193], [0.0464], [0.2112]], [[0.8248], [0.7465], [0.929], [0.8618]]]],[[[[0.1852, 0.0818, 0.5566], [0.1577, 0.0048, 0.4433], [0.2501, 0.2983, 0.5862], [0.3126, 0.8246, 0.8069]]]]],[0, 0, 0], 4, 4, false, Sep55403), 
LZer88676 = zero_padding2D_layer(Sep55403, 2, 0, 0, 0, Zer88676), 
LUp_52748 = up_sampling2D_layer([[[[1.9512, 1.4399]], [[1.8566, 1.485]], [[1.0483, 1.4235]]]], 1, 2, Up_52748), 
LMax80054 = max_pool2D_layer(Up_52748, 1, 2, 1, 1, false, Max80054), 
LCon8184 = concatenate_layer([Max80054,[[[[0.8546]], [[0.0468]], [[0.4946]]]]], 3, Con8184), 
LAve51927 = average_layer([Zer88676,Con8184], Ave51927), 
exec_layers([LZer94979,LRes77167,LCon26338,LSep55403,LZer88676,LUp_52748,LMax80054,LCon8184,LAve51927],["Zer94979","Res77167","Con26338","Sep55403","Zer88676","Up_52748","Max80054","Con8184","Ave51927"],Ave51927,"Ave51927")

Actual (Unparsed): [[[[0.9756000, 0.7199500, 0.4273000]], [[0.9283000, 0.7425000, 0.0234000]], [[29.1488474, 33.0795039, 76.7037543]]]]

Expected (Unparsed): [[[[0.9756,0.71995,0.4273]],[[0.9283,0.7425,0.0234]],[[29.148847106785453,33.07950363405732,76.70375362368388]]]]

Actual:   [[[[0.9756, 0.72, 0.4273]], [[0.9283, 0.7425, 0.0234]], [[29.1489, 33.0796, 76.7038]]]]

Expected: [[[[0.9756, 0.72, 0.4273]], [[0.9283, 0.7425, 0.0234]], [[29.1489, 33.0796, 76.7038]]]]