import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Loc28997 = tf.keras.layers.Input(shape=([1, 1]))

Loc28997 = keras.layers.LocallyConnected1D(4, (1),strides=(1), name = 'Loc28997', )(in0Loc28997)
Lay85106 = keras.layers.LayerNormalization(axis=1, epsilon=1.159691247181897, name = 'Lay85106', )(Loc28997)
Res38409 = keras.layers.Reshape((1, 4, 1), name = 'Res38409', )(Lay85106)
Res12259 = keras.layers.Reshape((1, 4, 1, 1), name = 'Res12259', )(Res38409)
Zer66249 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer66249', )(Res12259)
model = tf.keras.models.Model(inputs=[in0Loc28997], outputs=Zer66249)
w = model.get_layer('Loc28997').get_weights() 
w[0] = np.array([[[0.7298, 0.809, 0.8052, 0.7412]]])
w[1] = np.array([[0, 0, 0, 0]])
model.get_layer('Loc28997').set_weights(w) 
in0Loc28997 = tf.constant([[[0.9172]]])
print (np.array2string(model.predict([in0Loc28997],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Zer66249.png')

LLoc28997 = locally_connected1D_layer([[[0.9172]]], 1,[[[0.7298, 0.809, 0.8052, 0.7412]]],[[0, 0, 0, 0]], 1, Loc28997), 
LLay85106 = layer_normalization_layer(Loc28997, 1, 1.159691247181897, Lay85106), 
LRes38409 = reshape_layer(Lay85106, [1, 4, 1], Res38409), 
LRes12259 = reshape_layer(Res38409, [1, 4, 1, 1], Res12259), 
LZer66249 = zero_padding3D_layer(Res12259, 1, 1, 1, 1, 1, 1, Zer66249), 
exec_layers([LLoc28997,LLay85106,LRes38409,LRes12259,LZer66249],["Loc28997","Lay85106","Res38409","Res12259","Zer66249"],Zer66249,"Zer66249")

Actual (Unparsed): [[[[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]]]]

Expected (Unparsed): [[[[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]]],[[[0],[0],[0]],[[0],[0.0],[0]],[[0],[0.0],[0]],[[0],[0.0],[0]],[[0],[0.0],[0]],[[0],[0],[0]]],[[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]]]]]

Actual:   [[[[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]]]]

Expected: [[[[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]]]]