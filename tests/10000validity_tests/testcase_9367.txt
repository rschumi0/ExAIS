import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Up_18807 = tf.keras.layers.Input(shape=([3, 2, 3, 3]))
in0Add42884 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Add42884 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Add48336 = tf.keras.layers.Input(shape=([1, 1, 2]))
in1Add48336 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con67885 = tf.keras.layers.Input(shape=([6, 2, 7]))

Up_18807 = keras.layers.UpSampling3D(size=(2, 1, 1), name = 'Up_18807', )(in0Up_18807)
Res41983 = keras.layers.Reshape((6, 2, 9), name = 'Res41983', )(Up_18807)
Add42884 = keras.layers.Add(name = 'Add42884', )([in0Add42884,in1Add42884])
Add48336 = keras.layers.Add(name = 'Add48336', )([in0Add48336,in1Add48336])
Zer4155 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer4155', )(Add48336)
Mul25360 = keras.layers.Multiply(name = 'Mul25360', )([Add42884,Zer4155])
Zer56621 = keras.layers.ZeroPadding2D(padding=((4, 0), (0, 0)), name = 'Zer56621', )(Mul25360)
Con67885 = keras.layers.Concatenate(axis=3, name = 'Con67885', )([Zer56621,in0Con67885])
Max36605 = keras.layers.Maximum(name = 'Max36605', )([Res41983,Con67885])
model = tf.keras.models.Model(inputs=[in0Up_18807,in0Add42884,in1Add42884,in0Add48336,in1Add48336,in0Con67885], outputs=Max36605)
in0Up_18807 = tf.constant([[[[[1.4497, 1.9298, 1.8481], [1.6885, 1.7813, 1.3164], [1.0825, 1.9227, 1.1197]], [[1.3244, 1.068, 1.7909], [1.3142, 1.6775, 1.6609], [1.0522, 1.7458, 1.7357]]], [[[1.8495, 1.1184, 1.5855], [1.136, 1.9701, 1.0016], [1.0275, 1.8138, 1.4255]], [[1.2648, 1.0209, 1.1202], [1.5761, 1.3737, 1.0444], [1.4073, 1.5714, 1.7059]]], [[[1.8941, 1.7601, 1.8978], [1.4847, 1.288, 1.5208], [1.3257, 1.0759, 1.33]], [[1.8742, 1.7596, 1.4094], [1.5225, 1.0387, 1.2164], [1.7691, 1.0668, 1.5448]]]]])
in0Add42884 = tf.constant([[[[0.788, 0.8328], [0.6499, 0.6724]], [[0.9806, 0.6381], [0.7802, 0.3642]]]])
in1Add42884 = tf.constant([[[[0.264, 0.099], [0.0047, 0.8387]], [[0.0155, 0.8062], [0.018, 0.6833]]]])
in0Add48336 = tf.constant([[[[0.295, 0.1048]]]])
in1Add48336 = tf.constant([[[[0.7546, 0.4246]]]])
in0Con67885 = tf.constant([[[[0.5408, 0.2848, 0.6195, 0.3077, 0.0736, 0.5789, 0.4575], [0.8331, 0.5337, 0.2161, 0.9405, 0.3067, 0.9109, 0.6715]], [[0.0354, 0.4375, 0.5401, 0.7337, 0.8242, 0.3024, 0.8381], [0.2161, 0.7695, 0.8044, 0.7425, 0.4845, 0.3242, 0.8331]], [[0.4367, 0.6003, 0.2893, 0.3591, 0.5921, 0.5649, 0.1141], [0.1476, 0.5415, 0.6187, 0.1535, 0.5116, 0.5085, 0.8033]], [[0.7498, 0.5422, 0.2611, 0.024, 0.892, 0.5517, 0.3321], [0.6654, 0.1168, 0.0417, 0.2549, 0.4064, 0.2661, 0.3744]], [[0.0986, 0.2575, 0.6908, 0.4588, 0.9584, 0.0004, 0.4997], [0.1953, 0.9504, 0.1482, 0.4926, 0.1181, 0.6978, 0.265]], [[0.4888, 0.6667, 0.2514, 0.9827, 0.8635, 0.7794, 0.8842], [0.3378, 0.2389, 0.054, 0.2224, 0.1119, 0.4421, 0.5452]]]])
print (np.array2string(model.predict([in0Up_18807,in0Add42884,in1Add42884,in0Add48336,in1Add48336,in0Con67885],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max36605.png')

LUp_18807 = up_sampling3D_layer([[[[[1.4497, 1.9298, 1.8481], [1.6885, 1.7813, 1.3164], [1.0825, 1.9227, 1.1197]], [[1.3244, 1.068, 1.7909], [1.3142, 1.6775, 1.6609], [1.0522, 1.7458, 1.7357]]], [[[1.8495, 1.1184, 1.5855], [1.136, 1.9701, 1.0016], [1.0275, 1.8138, 1.4255]], [[1.2648, 1.0209, 1.1202], [1.5761, 1.3737, 1.0444], [1.4073, 1.5714, 1.7059]]], [[[1.8941, 1.7601, 1.8978], [1.4847, 1.288, 1.5208], [1.3257, 1.0759, 1.33]], [[1.8742, 1.7596, 1.4094], [1.5225, 1.0387, 1.2164], [1.7691, 1.0668, 1.5448]]]]], 2, 1, 1, Up_18807), 
LRes41983 = reshape_layer(Up_18807, [6, 2, 9], Res41983), 
LAdd42884 = add_layer([[[[[0.788, 0.8328], [0.6499, 0.6724]], [[0.9806, 0.6381], [0.7802, 0.3642]]]], [[[[0.264, 0.099], [0.0047, 0.8387]], [[0.0155, 0.8062], [0.018, 0.6833]]]]], Add42884), 
LAdd48336 = add_layer([[[[[0.295, 0.1048]]]], [[[[0.7546, 0.4246]]]]], Add48336), 
LZer4155 = zero_padding2D_layer(Add48336, 1, 0, 1, 0, Zer4155), 
LMul25360 = multiply_layer([Add42884,Zer4155], Mul25360), 
LZer56621 = zero_padding2D_layer(Mul25360, 4, 0, 0, 0, Zer56621), 
LCon67885 = concatenate_layer([Zer56621,[[[[0.5408, 0.2848, 0.6195, 0.3077, 0.0736, 0.5789, 0.4575], [0.8331, 0.5337, 0.2161, 0.9405, 0.3067, 0.9109, 0.6715]], [[0.0354, 0.4375, 0.5401, 0.7337, 0.8242, 0.3024, 0.8381], [0.2161, 0.7695, 0.8044, 0.7425, 0.4845, 0.3242, 0.8331]], [[0.4367, 0.6003, 0.2893, 0.3591, 0.5921, 0.5649, 0.1141], [0.1476, 0.5415, 0.6187, 0.1535, 0.5116, 0.5085, 0.8033]], [[0.7498, 0.5422, 0.2611, 0.024, 0.892, 0.5517, 0.3321], [0.6654, 0.1168, 0.0417, 0.2549, 0.4064, 0.2661, 0.3744]], [[0.0986, 0.2575, 0.6908, 0.4588, 0.9584, 0.0004, 0.4997], [0.1953, 0.9504, 0.1482, 0.4926, 0.1181, 0.6978, 0.265]], [[0.4888, 0.6667, 0.2514, 0.9827, 0.8635, 0.7794, 0.8842], [0.3378, 0.2389, 0.054, 0.2224, 0.1119, 0.4421, 0.5452]]]]], 3, Con67885), 
LMax36605 = maximum_layer([Res41983,Con67885], Max36605), 
exec_layers([LUp_18807,LRes41983,LAdd42884,LAdd48336,LZer4155,LMul25360,LZer56621,LCon67885,LMax36605],["Up_18807","Res41983","Add42884","Add48336","Zer4155","Mul25360","Zer56621","Con67885","Max36605"],Max36605,"Max36605")

Actual (Unparsed): [[[[1.4497000, 1.9298000, 1.8480999, 1.6885000, 1.7812999, 1.3164001, 1.0825000, 1.9227000, 1.1197000], [1.3243999, 1.0680000, 1.7909000, 1.3142000, 1.6775000, 1.6609000, 1.0522000, 1.7458000, 1.7357000]], [[1.4497000, 1.9298000, 1.8480999, 1.6885000, 1.7812999, 1.3164001, 1.0825000, 1.9227000, 1.1197000], [1.3243999, 1.0680000, 1.7909000, 1.3142000, 1.6775000, 1.6609000, 1.0522000, 1.7458000, 1.7357000]], [[1.8494999, 1.1184000, 1.5855000, 1.1360000, 1.9701000, 1.0016000, 1.0275000, 1.8138000, 1.4255000], [1.2648000, 1.0209000, 1.1202000, 1.5761000, 1.3737000, 1.0444000, 1.4073000, 1.5714000, 1.7059000]], [[1.8494999, 1.1184000, 1.5855000, 1.1360000, 1.9701000, 1.0016000, 1.0275000, 1.8138000, 1.4255000], [1.2648000, 1.0209000, 1.1202000, 1.5761000, 1.3737000, 1.0444000, 1.4073000, 1.5714000, 1.7059000]], [[1.8941000, 1.7601000, 1.8978000, 1.4847000, 1.2880000, 1.5208000, 1.3257000, 1.0759000, 1.3300000], [1.8742000, 1.7596000, 1.4094000, 1.5225000, 1.0387000, 1.2164000, 1.7691000, 1.0668000, 1.5448000]], [[1.8941000, 1.7601000, 1.8978000, 1.4847000, 1.2880000, 1.5208000, 1.3257000, 1.0759000, 1.3300000], [1.8742000, 1.7596000, 1.4094000, 1.5225000, 1.0387000, 1.2164000, 1.7691000, 1.0668000, 1.5448000]]]]

Expected (Unparsed): [[[[1.4497,1.9298,1.8481,1.6885,1.7813,1.3164,1.0825,1.9227,1.1197],[1.3244,1.068,1.7909,1.3142,1.6775,1.6609,1.0522,1.7458,1.7357]],[[1.4497,1.9298,1.8481,1.6885,1.7813,1.3164,1.0825,1.9227,1.1197],[1.3244,1.068,1.7909,1.3142,1.6775,1.6609,1.0522,1.7458,1.7357]],[[1.8495,1.1184,1.5855,1.136,1.9701,1.0016,1.0275,1.8138,1.4255],[1.2648,1.0209,1.1202,1.5761,1.3737,1.0444,1.4073,1.5714,1.7059]],[[1.8495,1.1184,1.5855,1.136,1.9701,1.0016,1.0275,1.8138,1.4255],[1.2648,1.0209,1.1202,1.5761,1.3737,1.0444,1.4073,1.5714,1.7059]],[[1.8941,1.7601,1.8978,1.4847,1.288,1.5208,1.3257,1.0759,1.33],[1.8742,1.7596,1.4094,1.5225,1.0387,1.2164,1.7691,1.0668,1.5448]],[[1.8941,1.7601,1.8978,1.4847,1.288,1.5208,1.3257,1.0759,1.33],[1.8742,1.7596,1.4094,1.5225,1.0387,1.2164,1.7691,1.0668,1.5448]]]]

Actual:   [[[[1.4497, 1.9298, 1.8481, 1.6885, 1.7813, 1.3165, 1.0825, 1.9227, 1.1197], [1.3244, 1.068, 1.7909, 1.3142, 1.6775, 1.6609, 1.0522, 1.7458, 1.7357]], [[1.4497, 1.9298, 1.8481, 1.6885, 1.7813, 1.3165, 1.0825, 1.9227, 1.1197], [1.3244, 1.068, 1.7909, 1.3142, 1.6775, 1.6609, 1.0522, 1.7458, 1.7357]], [[1.8495, 1.1184, 1.5855, 1.136, 1.9701, 1.0016, 1.0275, 1.8138, 1.4255], [1.2648, 1.0209, 1.1202, 1.5761, 1.3737, 1.0444, 1.4073, 1.5714, 1.7059]], [[1.8495, 1.1184, 1.5855, 1.136, 1.9701, 1.0016, 1.0275, 1.8138, 1.4255], [1.2648, 1.0209, 1.1202, 1.5761, 1.3737, 1.0444, 1.4073, 1.5714, 1.7059]], [[1.8941, 1.7601, 1.8978, 1.4847, 1.288, 1.5208, 1.3257, 1.0759, 1.33], [1.8742, 1.7596, 1.4094, 1.5225, 1.0387, 1.2164, 1.7691, 1.0668, 1.5448]], [[1.8941, 1.7601, 1.8978, 1.4847, 1.288, 1.5208, 1.3257, 1.0759, 1.33], [1.8742, 1.7596, 1.4094, 1.5225, 1.0387, 1.2164, 1.7691, 1.0668, 1.5448]]]]

Expected: [[[[1.4497, 1.9298, 1.8481, 1.6885, 1.7813, 1.3164, 1.0825, 1.9227, 1.1197], [1.3244, 1.068, 1.7909, 1.3142, 1.6775, 1.6609, 1.0522, 1.7458, 1.7357]], [[1.4497, 1.9298, 1.8481, 1.6885, 1.7813, 1.3164, 1.0825, 1.9227, 1.1197], [1.3244, 1.068, 1.7909, 1.3142, 1.6775, 1.6609, 1.0522, 1.7458, 1.7357]], [[1.8495, 1.1184, 1.5855, 1.136, 1.9701, 1.0016, 1.0275, 1.8138, 1.4255], [1.2648, 1.0209, 1.1202, 1.5761, 1.3737, 1.0444, 1.4073, 1.5714, 1.7059]], [[1.8495, 1.1184, 1.5855, 1.136, 1.9701, 1.0016, 1.0275, 1.8138, 1.4255], [1.2648, 1.0209, 1.1202, 1.5761, 1.3737, 1.0444, 1.4073, 1.5714, 1.7059]], [[1.8941, 1.7601, 1.8978, 1.4847, 1.288, 1.5208, 1.3257, 1.0759, 1.33], [1.8742, 1.7596, 1.4094, 1.5225, 1.0387, 1.2164, 1.7691, 1.0668, 1.5448]], [[1.8941, 1.7601, 1.8978, 1.4847, 1.288, 1.5208, 1.3257, 1.0759, 1.33], [1.8742, 1.7596, 1.4094, 1.5225, 1.0387, 1.2164, 1.7691, 1.0668, 1.5448]]]]