import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot96959 = tf.keras.layers.Input(shape=([2]))
in1Dot96959 = tf.keras.layers.Input(shape=([2]))
in0Den53158 = tf.keras.layers.Input(shape=([5, 4, 3]))
in0Con60698 = tf.keras.layers.Input(shape=([5, 4, 3]))
in0Con76918 = tf.keras.layers.Input(shape=([1, 2, 2]))

Dot96959 = keras.layers.Dot(axes=(1, 1), name = 'Dot96959', )([in0Dot96959,in1Dot96959])
Res273 = keras.layers.Reshape((1, 1), name = 'Res273', )(Dot96959)
Res53366 = keras.layers.Reshape((1, 1, 1), name = 'Res53366', )(Res273)
Res73327 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res73327', )(Res53366)
Con45126 = keras.layers.Conv3D(3, (1, 1, 1),strides=(1, 1, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con45126', )(Res73327)
Den20696 = keras.layers.Dense(1,name = 'Den20696', )(Con45126)
Res72363 = keras.layers.Reshape((1, 1, 1), name = 'Res72363', )(Den20696)
Zer65431 = keras.layers.ZeroPadding2D(padding=((4, 0), (3, 0)), name = 'Zer65431', )(Res72363)
Den53158 = keras.layers.Dense(1,name = 'Den53158', )(in0Den53158)
Ave54950 = keras.layers.Average(name = 'Ave54950', )([Zer65431,Den53158])
Con60698 = keras.layers.Concatenate(axis=3, name = 'Con60698', )([Ave54950,in0Con60698])
Con76918 = keras.layers.Conv2DTranspose(4, (1, 2),strides=(1, 1), padding='same', name = 'Con76918', )(in0Con76918)
Cro79516 = keras.layers.Cropping2D(cropping=((0, 0), (1, 0)), name = 'Cro79516', )(Con76918)
Zer77569 = keras.layers.ZeroPadding2D(padding=((4, 0), (3, 0)), name = 'Zer77569', )(Cro79516)
Max9341 = keras.layers.Maximum(name = 'Max9341', )([Con60698,Zer77569])
model = tf.keras.models.Model(inputs=[in0Dot96959,in1Dot96959,in0Den53158,in0Con60698,in0Con76918], outputs=Max9341)
w = model.get_layer('Con45126').get_weights() 
w[0] = np.array([[[[[0.3091, 0.6931, 0.0758]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con45126').set_weights(w) 
w = model.get_layer('Den20696').get_weights() 
w[0] = np.array([[0.7185], [0.8453], [0.2621]])
w[1] = np.array([0.8333])
model.get_layer('Den20696').set_weights(w) 
w = model.get_layer('Den53158').get_weights() 
w[0] = np.array([[0.8704], [0.8635], [0.3116]])
w[1] = np.array([0.8037])
model.get_layer('Den53158').set_weights(w) 
w = model.get_layer('Con76918').get_weights() 
w[0] = np.array([[[[0.3997, 0.7163], [0.851, 0.1718], [0.9818, 0.1434], [0.4598, 0.9407]], [[0.7256, 0.3888], [0.3925, 0.8567], [0.603, 0.3872], [0.0624, 0.3461]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con76918').set_weights(w) 
in0Dot96959 = tf.constant([[0.71, 0.3634]])
in1Dot96959 = tf.constant([[0.5094, 0.1375]])
in0Den53158 = tf.constant([[[[0.877, 0.7779, 0.7375], [0.5762, 0.0345, 0.805], [0.9176, 0.4638, 0.9136], [0.4188, 0.4549, 0.2921]], [[0.4227, 0.8032, 0.5352], [0.6938, 0.4455, 0.1857], [0.5425, 0.3539, 0.4188], [0.1898, 0.3113, 0.2238]], [[0.0453, 0.7649, 0.94], [0.3615, 0.0615, 0.4129], [0.2224, 0.774, 0.3235], [0.1297, 0.3643, 0.2281]], [[0.6016, 0.2067, 0.5427], [0.1122, 0.3801, 0.797], [0.0401, 0.0816, 0.6484], [0.9374, 0.138, 0.4001]], [[0.1386, 0.5457, 0.6909], [0.6039, 0.7164, 0.7561], [0.3184, 0.3545, 0.6624], [0.8486, 0.4495, 0.1248]]]])
in0Con60698 = tf.constant([[[[0.2027, 0.7759, 0.1086], [0.0019, 0.9983, 0.4261], [0.5004, 0.1876, 0.3487], [0.0322, 0.6467, 0.5642]], [[0.164, 0.8577, 0.1924], [0.7792, 0.7899, 0.4688], [0.8307, 0.599, 0.7003], [0.2619, 0.4445, 0.9207]], [[0.8956, 0.6852, 0.6402], [0.9387, 0.4998, 0.8411], [0.5208, 0.5774, 0.7973], [0.1021, 0.9961, 0.0673]], [[0.3525, 0.2192, 0.5338], [0.7245, 0.9162, 0.1583], [0.0184, 0.569, 0.5368], [0.5597, 0.3033, 0.4149]], [[0.6693, 0.2848, 0.1164], [0.4528, 0.099, 0.9862], [0.213, 0.154, 0.1866], [0.0184, 0.0541, 0.5277]]]])
in0Con76918 = tf.constant([[[[0.3978, 0.9363], [0.0347, 0.6654]]]])
print (np.array2string(model.predict([in0Dot96959,in1Dot96959,in0Den53158,in0Con60698,in0Con76918],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max9341.png')

LDot96959 = dot_layer([[0.71, 0.3634]], [[0.5094, 0.1375]], 1, 1, Dot96959), 
LRes273 = reshape_layer(Dot96959, [1, 1], Res273), 
LRes53366 = reshape_layer(Res273, [1, 1, 1], Res53366), 
LRes73327 = reshape_layer(Res53366, [1, 1, 1, 1], Res73327), 
LCon45126 = conv3D_layer(Res73327, 1, 1, 1,[[[[[0.3091, 0.6931, 0.0758]]]]],[0, 0, 0], 1, 1, 1, true, 1, 1, 1, Con45126), 
LDen20696 = dense_layer(Con45126, [[0.7185], [0.8453], [0.2621]],[0.8333], Den20696), 
LRes72363 = reshape_layer(Den20696, [1, 1, 1], Res72363), 
LZer65431 = zero_padding2D_layer(Res72363, 4, 0, 3, 0, Zer65431), 
LDen53158 = dense_layer([[[[0.877, 0.7779, 0.7375], [0.5762, 0.0345, 0.805], [0.9176, 0.4638, 0.9136], [0.4188, 0.4549, 0.2921]], [[0.4227, 0.8032, 0.5352], [0.6938, 0.4455, 0.1857], [0.5425, 0.3539, 0.4188], [0.1898, 0.3113, 0.2238]], [[0.0453, 0.7649, 0.94], [0.3615, 0.0615, 0.4129], [0.2224, 0.774, 0.3235], [0.1297, 0.3643, 0.2281]], [[0.6016, 0.2067, 0.5427], [0.1122, 0.3801, 0.797], [0.0401, 0.0816, 0.6484], [0.9374, 0.138, 0.4001]], [[0.1386, 0.5457, 0.6909], [0.6039, 0.7164, 0.7561], [0.3184, 0.3545, 0.6624], [0.8486, 0.4495, 0.1248]]]], [[0.8704], [0.8635], [0.3116]],[0.8037], Den53158), 
LAve54950 = average_layer([Zer65431,Den53158], Ave54950), 
LCon60698 = concatenate_layer([Ave54950,[[[[0.2027, 0.7759, 0.1086], [0.0019, 0.9983, 0.4261], [0.5004, 0.1876, 0.3487], [0.0322, 0.6467, 0.5642]], [[0.164, 0.8577, 0.1924], [0.7792, 0.7899, 0.4688], [0.8307, 0.599, 0.7003], [0.2619, 0.4445, 0.9207]], [[0.8956, 0.6852, 0.6402], [0.9387, 0.4998, 0.8411], [0.5208, 0.5774, 0.7973], [0.1021, 0.9961, 0.0673]], [[0.3525, 0.2192, 0.5338], [0.7245, 0.9162, 0.1583], [0.0184, 0.569, 0.5368], [0.5597, 0.3033, 0.4149]], [[0.6693, 0.2848, 0.1164], [0.4528, 0.099, 0.9862], [0.213, 0.154, 0.1866], [0.0184, 0.0541, 0.5277]]]]], 3, Con60698), 
LCon76918 = conv2D_transpose_layer([[[[0.3978, 0.9363], [0.0347, 0.6654]]]], 1, 2,[[[[0.3997, 0.7163], [0.851, 0.1718], [0.9818, 0.1434], [0.4598, 0.9407]], [[0.7256, 0.3888], [0.3925, 0.8567], [0.603, 0.3872], [0.0624, 0.3461]]]],[0, 0, 0, 0], 1, 1, true, Con76918), 
LCro79516 = cropping2D_layer(Con76918, 0, 0, 1, 0, Cro79516), 
LZer77569 = zero_padding2D_layer(Cro79516, 4, 0, 3, 0, Zer77569), 
LMax9341 = maximum_layer([Con60698,Zer77569], Max9341), 
exec_layers([LDot96959,LRes273,LRes53366,LRes73327,LCon45126,LDen20696,LRes72363,LZer65431,LDen53158,LAve54950,LCon60698,LCon76918,LCro79516,LZer77569,LMax9341],["Dot96959","Res273","Res53366","Res73327","Con45126","Den20696","Res72363","Zer65431","Den53158","Ave54950","Con60698","Con76918","Cro79516","Zer77569","Max9341"],Max9341,"Max9341")

Actual (Unparsed): [[[[1.2342812, 0.2027000, 0.7759000, 0.1086000], [0.7929266, 0.0019000, 0.9983000, 0.4261000], [1.1437740, 0.5004000, 0.1876000, 0.3487000], [0.8260240, 0.0322000, 0.6467000, 0.5642000]], [[1.0159748, 0.1640000, 0.8577000, 0.1924000], [0.9250684, 0.7792000, 0.7899000, 0.4688000], [0.8559914, 0.8307000, 0.5990000, 0.7003000], [0.6537228, 0.2619000, 0.4445000, 0.9207000]], [[0.8982621, 0.8956000, 0.6852000, 0.6402000], [0.6500572, 0.9387000, 0.4998000, 0.8411000], [0.8832143, 0.5208000, 0.5774000, 0.7973000], [0.6511200, 0.1021000, 0.9961000, 0.0673000]], [[0.8374617, 0.3525000, 0.2192000, 0.5338000], [0.7389602, 0.7245000, 0.9162000, 0.1583000], [0.5555530, 0.0184000, 0.5690000, 0.5368000], [0.9317236, 0.5597000, 0.3033000, 0.4149000]], [[0.8054169, 0.6693000, 0.2848000, 0.1164000], [1.0917734, 0.4528000, 0.0990000, 0.9862000], [0.7966750, 0.2130000, 0.1540000, 0.1866000], [1.5717114, 1.1021101, 0.7318956, 0.9907730]]]]

Expected (Unparsed): [[[[1.234281225,0.2027,0.7759,0.1086],[0.7929266150000001,0.0019,0.9983,0.4261],[1.14377405,0.5004,0.1876,0.3487],[0.826024015,0.0322,0.6467,0.5642]],[[1.0159748,0.164,0.8577,0.1924],[0.925068445,0.7792,0.7899,0.4688],[0.8559913649999998,0.8307,0.599,0.7003],[0.653722775,0.2619,0.4445,0.9207]],[[0.898262135,0.8956,0.6852,0.6402],[0.650057245,0.9387,0.4998,0.8411],[0.88321428,0.5208,0.5774,0.7973],[0.651119945,0.1021,0.9961,0.0673]],[[0.8374617049999998,0.3525,0.2192,0.5338],[0.738960215,0.7245,0.9162,0.1583],[0.5555530399999999,0.0184,0.569,0.5368],[0.93172356,0.5597,0.3033,0.4149]],[[0.805416915,0.6693,0.2848,0.1164],[1.09177336,0.4528,0.099,0.9862],[0.796674975,0.213,0.154,0.1866],[1.5717113857019198,1.10211013,0.73189558,0.9907729900000001]]]]

Actual:   [[[[1.2343, 0.2027, 0.7759, 0.1086], [0.793, 0.0019, 0.9983, 0.4261], [1.1438, 0.5004, 0.1876, 0.3487], [0.8261, 0.0322, 0.6467, 0.5642]], [[1.016, 0.164, 0.8577, 0.1924], [0.9251, 0.7792, 0.7899, 0.4688], [0.856, 0.8307, 0.599, 0.7003], [0.6538, 0.2619, 0.4445, 0.9207]], [[0.8983, 0.8956, 0.6852, 0.6402], [0.6501, 0.9387, 0.4998, 0.8411], [0.8833, 0.5208, 0.5774, 0.7973], [0.6512, 0.1021, 0.9961, 0.0673]], [[0.8375, 0.3525, 0.2192, 0.5338], [0.739, 0.7245, 0.9162, 0.1583], [0.5556, 0.0184, 0.569, 0.5368], [0.9318, 0.5597, 0.3033, 0.4149]], [[0.8055, 0.6693, 0.2848, 0.1164], [1.0918, 0.4528, 0.099, 0.9862], [0.7967, 0.213, 0.154, 0.1866], [1.5718, 1.1022, 0.7319, 0.9908]]]]

Expected: [[[[1.2343, 0.2027, 0.7759, 0.1086], [0.793, 0.0019, 0.9983, 0.4261], [1.1438, 0.5004, 0.1876, 0.3487], [0.8261, 0.0322, 0.6467, 0.5642]], [[1.016, 0.164, 0.8577, 0.1924], [0.9251, 0.7792, 0.7899, 0.4688], [0.856, 0.8307, 0.599, 0.7003], [0.6538, 0.2619, 0.4445, 0.9207]], [[0.8983, 0.8956, 0.6852, 0.6402], [0.6501, 0.9387, 0.4998, 0.8411], [0.8833, 0.5208, 0.5774, 0.7973], [0.6512, 0.1021, 0.9961, 0.0673]], [[0.8375, 0.3525, 0.2192, 0.5338], [0.739, 0.7245, 0.9162, 0.1583], [0.5556, 0.0184, 0.569, 0.5368], [0.9318, 0.5597, 0.3033, 0.4149]], [[0.8055, 0.6693, 0.2848, 0.1164], [1.0918, 0.4528, 0.099, 0.9862], [0.7967, 0.213, 0.154, 0.1866], [1.5718, 1.1022, 0.7319, 0.9908]]]]