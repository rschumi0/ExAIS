import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Thr43187 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))

Thr43187 = keras.layers.ThresholdedReLU(theta=0.8262526743110594, name = 'Thr43187', input_shape=(2, 2, 2, 2))(in0Thr43187)
Den2869 = keras.layers.Dense(2,name = 'Den2869', )(Thr43187)
model = tf.keras.models.Model(inputs=[in0Thr43187], outputs=Den2869)
w = model.get_layer('Den2869').get_weights() 
w[0] = np.array([[0.4533, 0.5073], [0.6018, 0.2275]])
w[1] = np.array([0.9633, 0.2875])
model.get_layer('Den2869').set_weights(w) 
in0Thr43187 = tf.constant([[[[[0.1777, 0.0685], [0.5745, 0.2361]], [[0.5624, 0.7352], [0.8087, 0.1997]]], [[[0.394, 0.2264], [0.4035, 0.624]], [[0.1117, 0.4625], [0.8424, 0.5456]]]]])
print (np.array2string(model.predict([in0Thr43187],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Den2869.png')

LThr43187 = thresholded_relu_layer([[[[[0.1777, 0.0685], [0.5745, 0.2361]], [[0.5624, 0.7352], [0.8087, 0.1997]]], [[[0.394, 0.2264], [0.4035, 0.624]], [[0.1117, 0.4625], [0.8424, 0.5456]]]]], 0.8262526743110594, Thr43187), 
LDen2869 = dense_layer(Thr43187, [[0.4533, 0.5073], [0.6018, 0.2275]],[0.9633, 0.2875], Den2869), 
exec_layers([LThr43187,LDen2869],["Thr43187","Den2869"],Den2869,"Den2869")

Actual (Unparsed): [[[[[0.9633000, 0.2875000], [0.9633000, 0.2875000]], [[0.9633000, 0.2875000], [0.9633000, 0.2875000]]], [[[0.9633000, 0.2875000], [0.9633000, 0.2875000]], [[0.9633000, 0.2875000], [1.3451599, 0.7148495]]]]]

Expected (Unparsed): [[[[[0.9633,0.2875],[0.9633,0.2875]],[[0.9633,0.2875],[0.9633,0.2875]]],[[[0.9633,0.2875],[0.9633,0.2875]],[[0.9633,0.2875],[1.34515992,0.71484952]]]]]

Actual:   [[[[[0.9633, 0.2875], [0.9633, 0.2875]], [[0.9633, 0.2875], [0.9633, 0.2875]]], [[[0.9633, 0.2875], [0.9633, 0.2875]], [[0.9633, 0.2875], [1.3452, 0.7149]]]]]

Expected: [[[[[0.9633, 0.2875], [0.9633, 0.2875]], [[0.9633, 0.2875], [0.9633, 0.2875]]], [[[0.9633, 0.2875], [0.9633, 0.2875]], [[0.9633, 0.2875], [1.3452, 0.7149]]]]]