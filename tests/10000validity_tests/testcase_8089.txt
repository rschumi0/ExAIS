import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot2860 = tf.keras.layers.Input(shape=([2, 3]))
in1Dot2860 = tf.keras.layers.Input(shape=([2, 3]))
in0Con70154 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Mul48847 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Mul48847 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Min25342 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in1Min25342 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))
in0Mul62842 = tf.keras.layers.Input(shape=([1, 2, 2]))
in1Mul62842 = tf.keras.layers.Input(shape=([1, 2, 2]))

Dot2860 = keras.layers.Dot(axes=(2, 2), name = 'Dot2860', )([in0Dot2860,in1Dot2860])
Res31417 = keras.layers.Reshape((2, 2, 1), name = 'Res31417', )(Dot2860)
Dep49087 = keras.layers.DepthwiseConv2D((1, 1),strides=(2, 2), padding='valid', name = 'Dep49087', )(Res31417)
Zer23759 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer23759', )(Dep49087)
Con70154 = keras.layers.Concatenate(axis=3, name = 'Con70154', )([Zer23759,in0Con70154])
Mul48847 = keras.layers.Multiply(name = 'Mul48847', )([in0Mul48847,in1Mul48847])
Sub74874 = keras.layers.Subtract(name = 'Sub74874', )([Con70154,Mul48847])
Lea22846 = keras.layers.LeakyReLU(alpha=8.256572746580122, name = 'Lea22846', )(Sub74874)
Min25342 = keras.layers.Minimum(name = 'Min25342', )([in0Min25342,in1Min25342])
Res51429 = keras.layers.Reshape((1, 1, 2), name = 'Res51429', )(Min25342)
Zer22164 = keras.layers.ZeroPadding2D(padding=((0, 0), (1, 0)), name = 'Zer22164', )(Res51429)
Mul62842 = keras.layers.Multiply(name = 'Mul62842', )([in0Mul62842,in1Mul62842])
Ave6226 = keras.layers.Average(name = 'Ave6226', )([Zer22164,Mul62842])
Zer50657 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer50657', )(Ave6226)
Ave44419 = keras.layers.Average(name = 'Ave44419', )([Lea22846,Zer50657])
Sof91040 = keras.layers.Softmax(axis=1, name = 'Sof91040', )(Ave44419)
model = tf.keras.models.Model(inputs=[in0Dot2860,in1Dot2860,in0Con70154,in0Mul48847,in1Mul48847,in0Min25342,in1Min25342,in0Mul62842,in1Mul62842], outputs=Sof91040)
w = model.get_layer('Dep49087').get_weights() 
w[0] = np.array([[[[0.8297]]]])
w[1] = np.array([0])
model.get_layer('Dep49087').set_weights(w) 
in0Dot2860 = tf.constant([[[0.6949, 0.6147, 0.1661], [0.9011, 0.1306, 0.023]]])
in1Dot2860 = tf.constant([[[0.1304, 0.95, 0.0734], [0.1869, 0.9662, 0.2076]]])
in0Con70154 = tf.constant([[[[0.6853], [0.0889]], [[0.5006], [0.9826]]]])
in0Mul48847 = tf.constant([[[[0.9753, 0.4769], [0.8029, 0.4868]], [[0.4886, 0.1657], [0.0789, 0.1564]]]])
in1Mul48847 = tf.constant([[[[0.6573, 0.7414], [0.4035, 0.0453]], [[0.1849, 0.7857], [0.6072, 0.4729]]]])
in0Min25342 = tf.constant([[[[[0.0414, 0.0867]]]]])
in1Min25342 = tf.constant([[[[[0.3564, 0.8617]]]]])
in0Mul62842 = tf.constant([[[[0.5275, 0.6741], [0.9495, 0.4216]]]])
in1Mul62842 = tf.constant([[[[0.7998, 0.7621], [0.6884, 0.207]]]])
print (np.array2string(model.predict([in0Dot2860,in1Dot2860,in0Con70154,in0Mul48847,in1Mul48847,in0Min25342,in1Min25342,in0Mul62842,in1Mul62842],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sof91040.png')

LDot2860 = dot_layer([[[0.6949, 0.6147, 0.1661], [0.9011, 0.1306, 0.023]]], [[[0.1304, 0.95, 0.0734], [0.1869, 0.9662, 0.2076]]], 2, 2, Dot2860), 
LRes31417 = reshape_layer(Dot2860, [2, 2, 1], Res31417), 
LDep49087 = depthwise_conv2D_layer(Res31417, 1, 1,[[[[0.8297]]]],[0], 2, 2, false, Dep49087), 
LZer23759 = zero_padding2D_layer(Dep49087, 1, 0, 1, 0, Zer23759), 
LCon70154 = concatenate_layer([Zer23759,[[[[0.6853], [0.0889]], [[0.5006], [0.9826]]]]], 3, Con70154), 
LMul48847 = multiply_layer([[[[[0.9753, 0.4769], [0.8029, 0.4868]], [[0.4886, 0.1657], [0.0789, 0.1564]]]], [[[[0.6573, 0.7414], [0.4035, 0.0453]], [[0.1849, 0.7857], [0.6072, 0.4729]]]]], Mul48847), 
LSub74874 = subtract_layer(Con70154,Mul48847, Sub74874), 
LLea22846 = leaky_relu_layer(Sub74874, 8.256572746580122, Lea22846), 
LMin25342 = minimum_layer([[[[[[0.0414, 0.0867]]]]], [[[[[0.3564, 0.8617]]]]]], Min25342), 
LRes51429 = reshape_layer(Min25342, [1, 1, 2], Res51429), 
LZer22164 = zero_padding2D_layer(Res51429, 0, 0, 1, 0, Zer22164), 
LMul62842 = multiply_layer([[[[[0.5275, 0.6741], [0.9495, 0.4216]]]], [[[[0.7998, 0.7621], [0.6884, 0.207]]]]], Mul62842), 
LAve6226 = average_layer([Zer22164,Mul62842], Ave6226), 
LZer50657 = zero_padding2D_layer(Ave6226, 1, 0, 0, 0, Zer50657), 
LAve44419 = average_layer([Lea22846,Zer50657], Ave44419), 
LSof91040 = softmax_layer(Ave44419, 1, Sof91040), 
exec_layers([LDot2860,LRes31417,LDep49087,LZer23759,LCon70154,LMul48847,LSub74874,LLea22846,LMin25342,LRes51429,LZer22164,LMul62842,LAve6226,LZer50657,LAve44419,LSof91040],["Dot2860","Res31417","Dep49087","Zer23759","Con70154","Mul48847","Sub74874","Lea22846","Min25342","Res51429","Zer22164","Mul62842","Ave6226","Zer50657","Ave44419","Sof91040"],Sof91040,"Sof91040")

Actual (Unparsed): [[[[0.0847870, 0.4631235], [0.1452747, 0.3859454]], [[0.9152130, 0.5368765], [0.8547253, 0.6140546]]]]

Expected (Unparsed): [[[[0.08478704440807604,0.4631234607154467],[0.14527469907005916,0.38594537644125126]],[[0.915212955591924,0.5368765392845534],[0.8547253009299409,0.6140546235587486]]]]

Actual:   [[[[0.0848, 0.4632], [0.1453, 0.386]], [[0.9153, 0.5369], [0.8548, 0.6141]]]]

Expected: [[[[0.0848, 0.4632], [0.1453, 0.386]], [[0.9153, 0.5369], [0.8548, 0.6141]]]]