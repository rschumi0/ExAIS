import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub38935 = tf.keras.layers.Input(shape=([2, 3, 3, 2]))
in1Sub38935 = tf.keras.layers.Input(shape=([2, 3, 3, 2]))
in0Add11819 = tf.keras.layers.Input(shape=([1, 1]))
in1Add11819 = tf.keras.layers.Input(shape=([1, 1]))
in0Con36138 = tf.keras.layers.Input(shape=([2, 17]))
in0Con28224 = tf.keras.layers.Input(shape=([2, 18, 2]))
in0Sub74405 = tf.keras.layers.Input(shape=([2, 3, 3]))
in1Sub74405 = tf.keras.layers.Input(shape=([2, 3, 3]))
in0Ave75487 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Ave75487 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con51159 = tf.keras.layers.Input(shape=([2, 18, 2]))

Sub38935 = keras.layers.Subtract(name = 'Sub38935', )([in0Sub38935,in1Sub38935])
Res93443 = keras.layers.Reshape((2, 3, 6), name = 'Res93443', )(Sub38935)
Res26786 = keras.layers.Reshape((2, 18), name = 'Res26786', )(Res93443)
Add11819 = keras.layers.Add(name = 'Add11819', )([in0Add11819,in1Add11819])
Zer99827 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer99827', )(Add11819)
Con36138 = keras.layers.Concatenate(axis=2, name = 'Con36138', )([Zer99827,in0Con36138])
Min96706 = keras.layers.Minimum(name = 'Min96706', )([Res26786,Con36138])
Res33118 = keras.layers.Reshape((2, 18, 1), name = 'Res33118', )(Min96706)
Con28224 = keras.layers.Concatenate(axis=3, name = 'Con28224', )([Res33118,in0Con28224])
Sub74405 = keras.layers.Subtract(name = 'Sub74405', )([in0Sub74405,in1Sub74405])
Zer39630 = keras.layers.ZeroPadding2D(padding=((0, 0), (15, 0)), name = 'Zer39630', )(Sub74405)
Sub97724 = keras.layers.Subtract(name = 'Sub97724', )([Con28224,Zer39630])
Ave75487 = keras.layers.Average(name = 'Ave75487', )([in0Ave75487,in1Ave75487])
Zer57859 = keras.layers.ZeroPadding2D(padding=((1, 0), (17, 0)), name = 'Zer57859', )(Ave75487)
Con51159 = keras.layers.Concatenate(axis=3, name = 'Con51159', )([Zer57859,in0Con51159])
Max17427 = keras.layers.Maximum(name = 'Max17427', )([Sub97724,Con51159])
Max53791 = keras.layers.MaxPool2D(pool_size=(1, 1), strides=(2, 1), padding='valid', name = 'Max53791', )(Max17427)
model = tf.keras.models.Model(inputs=[in0Sub38935,in1Sub38935,in0Add11819,in1Add11819,in0Con36138,in0Con28224,in0Sub74405,in1Sub74405,in0Ave75487,in1Ave75487,in0Con51159], outputs=Max53791)
in0Sub38935 = tf.constant([[[[[0.2714, 0.386], [0.1472, 0.489], [0.7166, 0.7601]], [[0.1004, 0.3847], [0.6817, 0.6906], [0.2709, 0.9103]], [[0.8433, 0.6095], [0.2026, 0.2078], [0.5594, 0.288]]], [[[0.6122, 0.7878], [0.9826, 0.9064], [0.3027, 0.7845]], [[0.4829, 0.0808], [0.6221, 0.2954], [0.173, 0.5788]], [[0.6725, 0.2874], [0.9977, 0.3708], [0.4599, 0.9248]]]]])
in1Sub38935 = tf.constant([[[[[0.4122, 0.7398], [0.5699, 0.198], [0.1477, 0.4058]], [[0.7611, 0.4227], [0.9451, 0.0059], [0.0695, 0.5147]], [[0.4219, 0.8176], [0.6371, 0.9458], [0.4291, 0.3111]]], [[[0.4949, 0.9383], [0.3556, 0.9733], [0.9587, 0.7655]], [[0.8416, 0.8613], [0.1288, 0.9912], [0.2721, 0.5067]], [[0.2242, 0.1039], [0.2422, 0.1239], [0.1265, 0.2786]]]]])
in0Add11819 = tf.constant([[[0.9057]]])
in1Add11819 = tf.constant([[[0.5515]]])
in0Con36138 = tf.constant([[[0.0324, 0.0147, 0.8761, 0.5986, 0.5915, 0.7848, 0.1259, 0.3279, 0.2342, 0.9342, 0.0337, 0.4825, 0.8867, 0.3076, 0.6007, 0.4779, 0.7639], [0.7792, 0.6313, 0.8537, 0.1428, 0.924, 0.7015, 0.1589, 0.345, 0.8314, 0.0062, 0.4102, 0.0337, 0.9629, 0.9124, 0.2056, 0.8204, 0.074]]])
in0Con28224 = tf.constant([[[[0.1931, 0.0402], [0.9908, 0.8227], [0.4118, 0.9556], [0.0237, 0.5859], [0.7912, 0.787], [0.3185, 0.4663], [0.4982, 0.3934], [0.5438, 0.1936], [0.0974, 0.3044], [0.1254, 0.7329], [0.9195, 0.3393], [0.47, 0.2503], [0.2062, 0.6434], [0.0304, 0.3942], [0.2868, 0.1121], [0.893, 0.6666], [0.0559, 0.0076], [0.533, 0.5697]], [[0.1875, 0.8094], [0.0043, 0.0302], [0.8499, 0.9885], [0.1121, 0.3269], [0.163, 0.4449], [0.0462, 0.3773], [0.282, 0.8056], [0.5486, 0.7764], [0.7808, 0.6474], [0.9329, 0.4202], [0.9616, 0.976], [0.1778, 0.8983], [0.823, 0.9709], [0.8748, 0.094], [0.6811, 0.0904], [0.0301, 0.5882], [0.8576, 0.1167], [0.5865, 0.5374]]]])
in0Sub74405 = tf.constant([[[[0.5622, 0.9345, 0.7527], [0.9966, 0.8082, 0.3482], [0.8927, 0.445, 0.6704]], [[0.8273, 0.3687, 0.5504], [0.7568, 0.8547, 0.3692], [0.9217, 0.7409, 0.1722]]]])
in1Sub74405 = tf.constant([[[[0.466, 0.9915, 0.3965], [0.9877, 0.1637, 0.0663], [0.6732, 0.3629, 0.1141]], [[0.7355, 0.9774, 0.3682], [0.3238, 0.5461, 0.1253], [0.7712, 0.5623, 0.7399]]]])
in0Ave75487 = tf.constant([[[[0.1431]]]])
in1Ave75487 = tf.constant([[[[0.8729]]]])
in0Con51159 = tf.constant([[[[0.8012, 0.744], [0.186, 0.6071], [0.5054, 0.9662], [0.1284, 0.8248], [0.3973, 0.7395], [0.0818, 0.2527], [0.1234, 0.2107], [0.3344, 0.325], [0.6957, 0.8501], [0.6649, 0.6075], [0.5488, 0.9609], [0.3279, 0.2839], [0.1911, 0.1699], [0.5634, 0.1841], [0.206, 0.5974], [0.4316, 0.8665], [0.0193, 0.9162], [0.6971, 0.668]], [[0.2833, 0.0473], [0.6887, 0.563], [0.9521, 0.8131], [0.5488, 0.1373], [0.1204, 0.4695], [0.0513, 0.9736], [0.4823, 0.674], [0.2155, 0.2721], [0.8288, 0.11], [0.2722, 0.5832], [0.348, 0.6864], [0.1492, 0.1179], [0.6185, 0.9553], [0.5344, 0.2184], [0.0924, 0.154], [0.7471, 0.2218], [0.5537, 0.0633], [0.1045, 0.1292]]]])
print (np.array2string(model.predict([in0Sub38935,in1Sub38935,in0Add11819,in1Add11819,in0Con36138,in0Con28224,in0Sub74405,in1Sub74405,in0Ave75487,in1Ave75487,in0Con51159],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max53791.png')

LSub38935 = subtract_layer([[[[[0.2714, 0.386], [0.1472, 0.489], [0.7166, 0.7601]], [[0.1004, 0.3847], [0.6817, 0.6906], [0.2709, 0.9103]], [[0.8433, 0.6095], [0.2026, 0.2078], [0.5594, 0.288]]], [[[0.6122, 0.7878], [0.9826, 0.9064], [0.3027, 0.7845]], [[0.4829, 0.0808], [0.6221, 0.2954], [0.173, 0.5788]], [[0.6725, 0.2874], [0.9977, 0.3708], [0.4599, 0.9248]]]]], [[[[[0.4122, 0.7398], [0.5699, 0.198], [0.1477, 0.4058]], [[0.7611, 0.4227], [0.9451, 0.0059], [0.0695, 0.5147]], [[0.4219, 0.8176], [0.6371, 0.9458], [0.4291, 0.3111]]], [[[0.4949, 0.9383], [0.3556, 0.9733], [0.9587, 0.7655]], [[0.8416, 0.8613], [0.1288, 0.9912], [0.2721, 0.5067]], [[0.2242, 0.1039], [0.2422, 0.1239], [0.1265, 0.2786]]]]], Sub38935), 
LRes93443 = reshape_layer(Sub38935, [2, 3, 6], Res93443), 
LRes26786 = reshape_layer(Res93443, [2, 18], Res26786), 
LAdd11819 = add_layer([[[[0.9057]]], [[[0.5515]]]], Add11819), 
LZer99827 = zero_padding1D_layer(Add11819, 1, 0, Zer99827), 
LCon36138 = concatenate_layer([Zer99827,[[[0.0324, 0.0147, 0.8761, 0.5986, 0.5915, 0.7848, 0.1259, 0.3279, 0.2342, 0.9342, 0.0337, 0.4825, 0.8867, 0.3076, 0.6007, 0.4779, 0.7639], [0.7792, 0.6313, 0.8537, 0.1428, 0.924, 0.7015, 0.1589, 0.345, 0.8314, 0.0062, 0.4102, 0.0337, 0.9629, 0.9124, 0.2056, 0.8204, 0.074]]]], 2, Con36138), 
LMin96706 = minimum_layer([Res26786,Con36138], Min96706), 
LRes33118 = reshape_layer(Min96706, [2, 18, 1], Res33118), 
LCon28224 = concatenate_layer([Res33118,[[[[0.1931, 0.0402], [0.9908, 0.8227], [0.4118, 0.9556], [0.0237, 0.5859], [0.7912, 0.787], [0.3185, 0.4663], [0.4982, 0.3934], [0.5438, 0.1936], [0.0974, 0.3044], [0.1254, 0.7329], [0.9195, 0.3393], [0.47, 0.2503], [0.2062, 0.6434], [0.0304, 0.3942], [0.2868, 0.1121], [0.893, 0.6666], [0.0559, 0.0076], [0.533, 0.5697]], [[0.1875, 0.8094], [0.0043, 0.0302], [0.8499, 0.9885], [0.1121, 0.3269], [0.163, 0.4449], [0.0462, 0.3773], [0.282, 0.8056], [0.5486, 0.7764], [0.7808, 0.6474], [0.9329, 0.4202], [0.9616, 0.976], [0.1778, 0.8983], [0.823, 0.9709], [0.8748, 0.094], [0.6811, 0.0904], [0.0301, 0.5882], [0.8576, 0.1167], [0.5865, 0.5374]]]]], 3, Con28224), 
LSub74405 = subtract_layer([[[[0.5622, 0.9345, 0.7527], [0.9966, 0.8082, 0.3482], [0.8927, 0.445, 0.6704]], [[0.8273, 0.3687, 0.5504], [0.7568, 0.8547, 0.3692], [0.9217, 0.7409, 0.1722]]]], [[[[0.466, 0.9915, 0.3965], [0.9877, 0.1637, 0.0663], [0.6732, 0.3629, 0.1141]], [[0.7355, 0.9774, 0.3682], [0.3238, 0.5461, 0.1253], [0.7712, 0.5623, 0.7399]]]], Sub74405), 
LZer39630 = zero_padding2D_layer(Sub74405, 0, 0, 15, 0, Zer39630), 
LSub97724 = subtract_layer(Con28224,Zer39630, Sub97724), 
LAve75487 = average_layer([[[[[0.1431]]]], [[[[0.8729]]]]], Ave75487), 
LZer57859 = zero_padding2D_layer(Ave75487, 1, 0, 17, 0, Zer57859), 
LCon51159 = concatenate_layer([Zer57859,[[[[0.8012, 0.744], [0.186, 0.6071], [0.5054, 0.9662], [0.1284, 0.8248], [0.3973, 0.7395], [0.0818, 0.2527], [0.1234, 0.2107], [0.3344, 0.325], [0.6957, 0.8501], [0.6649, 0.6075], [0.5488, 0.9609], [0.3279, 0.2839], [0.1911, 0.1699], [0.5634, 0.1841], [0.206, 0.5974], [0.4316, 0.8665], [0.0193, 0.9162], [0.6971, 0.668]], [[0.2833, 0.0473], [0.6887, 0.563], [0.9521, 0.8131], [0.5488, 0.1373], [0.1204, 0.4695], [0.0513, 0.9736], [0.4823, 0.674], [0.2155, 0.2721], [0.8288, 0.11], [0.2722, 0.5832], [0.348, 0.6864], [0.1492, 0.1179], [0.6185, 0.9553], [0.5344, 0.2184], [0.0924, 0.154], [0.7471, 0.2218], [0.5537, 0.0633], [0.1045, 0.1292]]]]], 3, Con51159), 
LMax17427 = maximum_layer([Sub97724,Con51159], Max17427), 
LMax53791 = max_pool2D_layer(Max17427, 1, 1, 2, 1, false, Max53791), 
exec_layers([LSub38935,LRes93443,LRes26786,LAdd11819,LZer99827,LCon36138,LMin96706,LRes33118,LCon28224,LSub74405,LZer39630,LSub97724,LAve75487,LZer57859,LCon51159,LMax17427,LMax53791],["Sub38935","Res93443","Res26786","Add11819","Zer99827","Con36138","Min96706","Res33118","Con28224","Sub74405","Zer39630","Sub97724","Ave75487","Zer57859","Con51159","Max17427","Max53791"],Max53791,"Max53791")

Actual (Unparsed): [[[[0.0000000, 0.8012000, 0.7440000], [0.0000000, 0.9908000, 0.8227000], [0.0000000, 0.5054000, 0.9662000], [0.2910000, 0.1284000, 0.8248000], [0.5689000, 0.7912000, 0.7870000], [0.3543000, 0.3185000, 0.4663000], [0.0000000, 0.4982000, 0.3934000], [0.0000000, 0.5438000, 0.3250000], [0.0000000, 0.6957000, 0.8501000], [0.2342000, 0.6649000, 0.7329000], [0.2014000, 0.9195000, 0.9609000], [0.0337000, 0.4700000, 0.2839000], [0.4214000, 0.2062000, 0.6434000], [0.0000000, 0.5634000, 0.3942000], [0.0000000, 0.2868000, 0.5974000], [0.0000000, 0.9500000, 0.8665000], [0.1214000, 0.0193000, 0.9162000], [0.0000000, 0.6971000, 0.6680000]]]]

Expected (Unparsed): [[[[0,0.8012,0.744],[0,0.9908,0.8227],[0,0.5054,0.9662],[0.291,0.1284,0.8248],[0.5689,0.7912,0.787],[0.3543,0.3185,0.4663],[0,0.4982,0.3934],[0,0.5438,0.325],[0,0.6957,0.8501],[0.2342,0.6649,0.7329],[0.20139999999999997,0.9195,0.9609],[0.0337,0.47,0.2839],[0.42140000000000005,0.2062,0.6434],[0,0.5634,0.3942],[0,0.2868,0.5974],[0,0.9500000000000001,0.8665],[0.12140000000000001,0.0193,0.9162],[0,0.6971,0.668]]]]

Actual:   [[[[0, 0.8012, 0.744], [0, 0.9908, 0.8227], [0, 0.5054, 0.9662], [0.291, 0.1284, 0.8248], [0.5689, 0.7912, 0.787], [0.3543, 0.3185, 0.4663], [0, 0.4982, 0.3934], [0, 0.5438, 0.325], [0, 0.6957, 0.8501], [0.2342, 0.6649, 0.7329], [0.2014, 0.9195, 0.9609], [0.0337, 0.47, 0.2839], [0.4214, 0.2062, 0.6434], [0, 0.5634, 0.3942], [0, 0.2868, 0.5974], [0, 0.95, 0.8665], [0.1214, 0.0193, 0.9162], [0, 0.6971, 0.668]]]]

Expected: [[[[0, 0.8012, 0.744], [0, 0.9908, 0.8227], [0, 0.5054, 0.9662], [0.291, 0.1284, 0.8248], [0.5689, 0.7912, 0.787], [0.3543, 0.3185, 0.4663], [0, 0.4982, 0.3934], [0, 0.5438, 0.325], [0, 0.6957, 0.8501], [0.2342, 0.6649, 0.7329], [0.2014, 0.9195, 0.9609], [0.0337, 0.47, 0.2839], [0.4215, 0.2062, 0.6434], [0, 0.5634, 0.3942], [0, 0.2868, 0.5974], [0, 0.9501, 0.8665], [0.1215, 0.0193, 0.9162], [0, 0.6971, 0.668]]]]