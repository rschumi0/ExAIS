import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add99431 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Add99431 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con69532 = tf.keras.layers.Input(shape=([2, 2, 3, 1]))
in0Add2976 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in1Add2976 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Ave18734 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in1Ave18734 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in0Con6981 = tf.keras.layers.Input(shape=([2, 2, 3, 1]))
in0Glo10286 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Max54761 = tf.keras.layers.Input(shape=([1, 1, 2]))
in1Max54761 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con76575 = tf.keras.layers.Input(shape=([23]))

Add99431 = keras.layers.Add(name = 'Add99431', )([in0Add99431,in1Add99431])
Bat51717 = keras.layers.BatchNormalization(axis=2, epsilon=0.5238494462920326,  name = 'Bat51717', )(Add99431)
Res95733 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res95733', )(Bat51717)
Zer66733 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (2, 0)), name = 'Zer66733', )(Res95733)
Con69532 = keras.layers.Concatenate(axis=4, name = 'Con69532', )([Zer66733,in0Con69532])
Add2976 = keras.layers.Add(name = 'Add2976', )([in0Add2976,in1Add2976])
Zer54196 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer54196', )(Add2976)
Ave18734 = keras.layers.Average(name = 'Ave18734', )([in0Ave18734,in1Ave18734])
Zer20052 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (1, 0)), name = 'Zer20052', )(Ave18734)
Con6981 = keras.layers.Concatenate(axis=4, name = 'Con6981', )([Zer20052,in0Con6981])
Mul37454 = keras.layers.Multiply(name = 'Mul37454', )([Zer54196,Con6981])
Max32330 = keras.layers.Maximum(name = 'Max32330', )([Con69532,Mul37454])
Res94903 = keras.layers.Reshape((2, 2, 6), name = 'Res94903', )(Max32330)
Res24851 = keras.layers.Reshape((2, 12), name = 'Res24851', )(Res94903)
Fla95485 = keras.layers.Flatten(name = 'Fla95485', )(Res24851)
Glo10286 = keras.layers.GlobalMaxPool3D(name = 'Glo10286', )(in0Glo10286)
Res61957 = keras.layers.Reshape((2, 1), name = 'Res61957', )(Glo10286)
Max54761 = keras.layers.Maximum(name = 'Max54761', )([in0Max54761,in1Max54761])
Res56457 = keras.layers.Reshape((2, 1), name = 'Res56457', )(Max54761)
Min43324 = keras.layers.Minimum(name = 'Min43324', )([Res61957,Res56457])
Glo83747 = keras.layers.GlobalAveragePooling1D(name = 'Glo83747', )(Min43324)
Con76575 = keras.layers.Concatenate(axis=1, name = 'Con76575', )([Glo83747,in0Con76575])
Add90285 = keras.layers.Add(name = 'Add90285', )([Fla95485,Con76575])
model = tf.keras.models.Model(inputs=[in0Add99431,in1Add99431,in0Con69532,in0Add2976,in1Add2976,in0Ave18734,in1Ave18734,in0Con6981,in0Glo10286,in0Max54761,in1Max54761,in0Con76575], outputs=Add90285)
w = model.get_layer('Bat51717').get_weights() 
w[0] = np.array([0.8757])
w[1] = np.array([0.348])
w[2] = np.array([0.2617])
w[3] = np.array([0.5241])
model.get_layer('Bat51717').set_weights(w) 
in0Add99431 = tf.constant([[[[0.7209]], [[0.8389]]]])
in1Add99431 = tf.constant([[[[0.0499]], [[0.6973]]]])
in0Con69532 = tf.constant([[[[[0.9355], [0.8821], [0.4983]], [[0.4754], [0.8787], [0.0124]]], [[[0.9789], [0.6778], [0.2092]], [[0.9509], [0.828], [0.1462]]]]])
in0Add2976 = tf.constant([[[[[0.7274, 0.5212]], [[0.1512, 0.915]]], [[[0.8555, 0.9132]], [[0.1185, 0.1747]]]]])
in1Add2976 = tf.constant([[[[[0.4762, 0.1385]], [[0.0471, 0.4192]]], [[[0.0444, 0.3646]], [[0.1047, 0.9471]]]]])
in0Ave18734 = tf.constant([[[[[0.1535], [0.5381]], [[0.0108], [0.2842]]]]])
in1Ave18734 = tf.constant([[[[[0.1508], [0.8263]], [[0.3123], [0.6649]]]]])
in0Con6981 = tf.constant([[[[[0.0887], [0.0234], [0.3086]], [[0.6455], [0.6198], [0.9713]]], [[[0.8621], [0.3022], [0.5826]], [[0.4786], [0.9254], [0.2343]]]]])
in0Glo10286 = tf.constant([[[[[1.6144, 1.176]], [[1.605, 1.8381]]], [[[1.1324, 1.7662]], [[1.0043, 1.923]]]]])
in0Max54761 = tf.constant([[[[0.2489, 0.035]]]])
in1Max54761 = tf.constant([[[[0.1095, 0.0778]]]])
in0Con76575 = tf.constant([[0.2484, 0.4459, 0.7273, 0.787, 0.8562, 0.5231, 0.018, 0.4653, 0.3702, 0.3835, 0.4934, 0.7016, 0.0938, 0.1836, 0.2001, 0.6302, 0.5978, 0.763, 0.5228, 0.824, 0.5835, 0.5752, 0.0868]])
print (np.array2string(model.predict([in0Add99431,in1Add99431,in0Con69532,in0Add2976,in1Add2976,in0Ave18734,in1Ave18734,in0Con6981,in0Glo10286,in0Max54761,in1Max54761,in0Con76575],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add90285.png')

LAdd99431 = add_layer([[[[[0.7209]], [[0.8389]]]], [[[[0.0499]], [[0.6973]]]]], Add99431), 
LBat51717 = batch_normalization_layer(Add99431, 2, 0.5238494462920326, [0.8757], [0.348], [0.2617], [0.5241], Bat51717), 
LRes95733 = reshape_layer(Bat51717, [2, 1, 1, 1], Res95733), 
LZer66733 = zero_padding3D_layer(Res95733, 0, 0, 1, 0, 2, 0, Zer66733), 
LCon69532 = concatenate_layer([Zer66733,[[[[[0.9355], [0.8821], [0.4983]], [[0.4754], [0.8787], [0.0124]]], [[[0.9789], [0.6778], [0.2092]], [[0.9509], [0.828], [0.1462]]]]]], 4, Con69532), 
LAdd2976 = add_layer([[[[[[0.7274, 0.5212]], [[0.1512, 0.915]]], [[[0.8555, 0.9132]], [[0.1185, 0.1747]]]]], [[[[[0.4762, 0.1385]], [[0.0471, 0.4192]]], [[[0.0444, 0.3646]], [[0.1047, 0.9471]]]]]], Add2976), 
LZer54196 = zero_padding3D_layer(Add2976, 0, 0, 0, 0, 2, 0, Zer54196), 
LAve18734 = average_layer([[[[[[0.1535], [0.5381]], [[0.0108], [0.2842]]]]], [[[[[0.1508], [0.8263]], [[0.3123], [0.6649]]]]]], Ave18734), 
LZer20052 = zero_padding3D_layer(Ave18734, 1, 0, 0, 0, 1, 0, Zer20052), 
LCon6981 = concatenate_layer([Zer20052,[[[[[0.0887], [0.0234], [0.3086]], [[0.6455], [0.6198], [0.9713]]], [[[0.8621], [0.3022], [0.5826]], [[0.4786], [0.9254], [0.2343]]]]]], 4, Con6981), 
LMul37454 = multiply_layer([Zer54196,Con6981], Mul37454), 
LMax32330 = maximum_layer([Con69532,Mul37454], Max32330), 
LRes94903 = reshape_layer(Max32330, [2, 2, 6], Res94903), 
LRes24851 = reshape_layer(Res94903, [2, 12], Res24851), 
LFla95485 = flatten_layer(Res24851, Fla95485), 
LGlo10286 = global_max_pool3D_layer([[[[[1.6144, 1.176]], [[1.605, 1.8381]]], [[[1.1324, 1.7662]], [[1.0043, 1.923]]]]], Glo10286), 
LRes61957 = reshape_layer(Glo10286, [2, 1], Res61957), 
LMax54761 = maximum_layer([[[[[0.2489, 0.035]]]], [[[[0.1095, 0.0778]]]]], Max54761), 
LRes56457 = reshape_layer(Max54761, [2, 1], Res56457), 
LMin43324 = minimum_layer([Res61957,Res56457], Min43324), 
LGlo83747 = global_average_pooling1D_layer(Min43324, Glo83747), 
LCon76575 = concatenate_layer([Glo83747,[[0.2484, 0.4459, 0.7273, 0.787, 0.8562, 0.5231, 0.018, 0.4653, 0.3702, 0.3835, 0.4934, 0.7016, 0.0938, 0.1836, 0.2001, 0.6302, 0.5978, 0.763, 0.5228, 0.824, 0.5835, 0.5752, 0.0868]]], 1, Con76575), 
LAdd90285 = add_layer([Fla95485,Con76575], Add90285), 
exec_layers([LAdd99431,LBat51717,LRes95733,LZer66733,LCon69532,LAdd2976,LZer54196,LAve18734,LZer20052,LCon6981,LMul37454,LMax32330,LRes94903,LRes24851,LFla95485,LGlo10286,LRes61957,LMax54761,LRes56457,LMin43324,LGlo83747,LCon76575,LAdd90285],["Add99431","Bat51717","Res95733","Zer66733","Con69532","Add2976","Zer54196","Ave18734","Zer20052","Con6981","Mul37454","Max32330","Res94903","Res24851","Fla95485","Glo10286","Res61957","Max54761","Res56457","Min43324","Glo83747","Con76575","Add90285"],Add90285,"Add90285")

Actual (Unparsed): [[0.1633500, 1.1839000, 0.4459000, 1.6094000, 0.7870000, 1.3545000, 0.5231000, 0.4934000, 0.4653000, 1.2489000, 1.1670001, 1.7893085, 0.7016000, 1.0727000, 0.1836000, 0.8779000, 1.2441118, 1.3422463, 0.7630000, 1.4737000, 0.8240000, 1.4115000, 2.0134474, 0.3496377]]

Expected (Unparsed): [[0.16335,1.1839,0.4459,1.6094,0.787,1.3545,0.5231,0.4934,0.4653,1.2489,1.1670001214738495,1.7893084600000002,0.7016,1.0727,0.1836,0.8778999999999999,1.24411178,1.34224628,0.763,1.4737,0.824,1.4115,2.0134473086199596,0.34963774000000003]]

Actual:   [[0.1634, 1.1839, 0.4459, 1.6094, 0.787, 1.3545, 0.5231, 0.4934, 0.4653, 1.2489, 1.1671, 1.7894, 0.7016, 1.0727, 0.1836, 0.8779, 1.2442, 1.3423, 0.763, 1.4737, 0.824, 1.4115, 2.0135, 0.3497]]

Expected: [[0.1634, 1.1839, 0.4459, 1.6094, 0.787, 1.3545, 0.5231, 0.4934, 0.4653, 1.2489, 1.1671, 1.7894, 0.7016, 1.0727, 0.1836, 0.8779, 1.2442, 1.3423, 0.763, 1.4737, 0.824, 1.4115, 2.0135, 0.3497]]