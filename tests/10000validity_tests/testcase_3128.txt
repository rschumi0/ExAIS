import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave80285 = tf.keras.layers.Input(shape=([1, 1]))
in0Con47977 = tf.keras.layers.Input(shape=([3, 1, 3]))
in0Cro74578 = tf.keras.layers.Input(shape=([3, 4, 4]))
in0Con74118 = tf.keras.layers.Input(shape=([3, 3, 3, 2]))
in0Sub96798 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in1Sub96798 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))

Ave80285 = keras.layers.AveragePooling1D(pool_size=(1), strides=(1), padding='same', name = 'Ave80285', )(in0Ave80285)
Res55006 = keras.layers.Reshape((1, 1, 1), name = 'Res55006', )(Ave80285)
Zer339 = keras.layers.ZeroPadding2D(padding=((2, 0), (0, 0)), name = 'Zer339', )(Res55006)
Con47977 = keras.layers.Concatenate(axis=3, name = 'Con47977', )([Zer339,in0Con47977])
Cro74578 = keras.layers.Cropping2D(cropping=((0, 0), (2, 1)), name = 'Cro74578', )(in0Cro74578)
Max39715 = keras.layers.Maximum(name = 'Max39715', )([Con47977,Cro74578])
Res85427 = keras.layers.Reshape((3, 4), name = 'Res85427', )(Max39715)
Sim21252 = keras.layers.SimpleRNN(1,name = 'Sim21252', )(Res85427)
Res80450 = keras.layers.Reshape((1, 1), name = 'Res80450', )(Sim21252)
Res89604 = keras.layers.Reshape((1, 1, 1), name = 'Res89604', )(Res80450)
Res98877 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res98877', )(Res89604)
Zer36473 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (2, 0)), name = 'Zer36473', )(Res98877)
Con74118 = keras.layers.Concatenate(axis=4, name = 'Con74118', )([Zer36473,in0Con74118])
Sub96798 = keras.layers.Subtract(name = 'Sub96798', )([in0Sub96798,in1Sub96798])
Lea33407 = keras.layers.LeakyReLU(alpha=1.9906067787411938, name = 'Lea33407', )(Sub96798)
Mul24440 = keras.layers.Multiply(name = 'Mul24440', )([Con74118,Lea33407])
model = tf.keras.models.Model(inputs=[in0Ave80285,in0Con47977,in0Cro74578,in0Con74118,in0Sub96798,in1Sub96798], outputs=Mul24440)
w = model.get_layer('Sim21252').get_weights() 
w[0] = np.array([[2], [1], [7], [3]])
w[1] = np.array([[2]])
w[2] = np.array([1])
model.get_layer('Sim21252').set_weights(w) 
in0Ave80285 = tf.constant([[[1.0782]]])
in0Con47977 = tf.constant([[[[0.243, 0.3105, 0.6076]], [[0.7195, 0.0247, 0.5276]], [[0.3384, 0.5809, 0.0063]]]])
in0Cro74578 = tf.constant([[[[1.7841, 1.0988, 1.1247, 1.4854], [1.7109, 1.9378, 1.0072, 1.2437], [1.2239, 1.409, 1.6368, 1.2736], [1.017, 1.2598, 1.0429, 1.633]], [[1.8755, 1.4823, 1.9306, 1.2949], [1.2323, 1.9459, 1.3365, 1.5726], [1.5333, 1.7423, 1.0389, 1.6198], [1.9344, 1.26, 1.2773, 1.4054]], [[1.7667, 1.176, 1.5739, 1.176], [1.0204, 1.8768, 1.0954, 1.7064], [1.8256, 1.303, 1.0446, 1.5659], [1.5331, 1.8488, 1.0317, 1.2227]]]])
in0Con74118 = tf.constant([[[[[0.7599, 0.6401], [0.3627, 0.4035], [0.3405, 0.4441]], [[0.4469, 0.6195], [0.8735, 0.0521], [0.7411, 0.8472]], [[0.2636, 0.996], [0.7215, 0.3703], [0.5038, 0.3525]]], [[[0.5274, 0.4897], [0.5949, 0.4571], [0.6965, 0.8153]], [[0.9573, 0.4204], [0.1539, 0.6851], [0.3004, 0.0937]], [[0.3096, 0.7597], [0.762, 0.3199], [0.2269, 0.9311]]], [[[0.7531, 0.5386], [0.2174, 0.2991], [0.3531, 0.0706]], [[0.8917, 0.1198], [0.2871, 0.6975], [0.6454, 0.3125]], [[0.4879, 0.4729], [0.8017, 0.3198], [0.9965, 0.0559]]]]])
in0Sub96798 = tf.constant([[[[[0.5401, 0.7407, 0.2349], [0.0553, 0.443, 0.2737], [0.437, 0.2428, 0.4512]], [[0.3839, 0.6934, 0.064], [0.2502, 0.3046, 0.4779], [0.3549, 0.6618, 0.4692]], [[0.6359, 0.7417, 0.5193], [0.3983, 0.3732, 0.7985], [0.1464, 0.0441, 0.8105]]], [[[0.4608, 0.7106, 0.9469], [0.3385, 0.8683, 0.5069], [0.6089, 0.1278, 0.3076]], [[0.9202, 0.6853, 0.6633], [0.0765, 0.4134, 0.9522], [0.104, 0.905, 0.3934]], [[0.5222, 0.5974, 0.0303], [0.218, 0.4491, 0.4218], [0.1472, 0.9241, 0.6855]]], [[[0.9719, 0.233, 0.4809], [0.3416, 0.1557, 0.6805], [0.5033, 0.3294, 0.7303]], [[0.264, 0.3946, 0.7706], [0.4654, 0.2098, 0.8306], [0.997, 0.7966, 0.0458]], [[0.348, 0.5795, 0.8068], [0.9653, 0.551, 0.5819], [0.9546, 0.1549, 0.1151]]]]])
in1Sub96798 = tf.constant([[[[[0.1585, 0.962, 0.9092], [0.3312, 0.685, 0.6655], [0.3831, 0.4094, 0.8492]], [[0.4382, 0.5163, 0.1389], [0.5095, 0.9989, 0.0072], [0.7906, 0.6792, 0.0369]], [[0.2089, 0.3366, 0.6897], [0.1033, 0.4731, 0.1628], [0.4459, 0.645, 0.7796]]], [[[0.4555, 0.6975, 0.8918], [0.4518, 0.3514, 0.4197], [0.5461, 0.3828, 0.7613]], [[0.7219, 0.8683, 0.4746], [0.4985, 0.1852, 0.806], [0.9271, 0.9753, 0.1647]], [[0.2708, 0.6041, 0.2641], [0.3907, 0.5304, 0.9519], [0.7652, 0.1483, 0.9573]]], [[[0.8481, 0.0707, 0.4254], [0.0474, 0.3182, 0.8669], [0.6794, 0.7097, 0.2737]], [[0.8821, 0.293, 0.3143], [0.2972, 0.9526, 0.3635], [0.8817, 0.0281, 0.2512]], [[0.2029, 0.1008, 0.888], [0.6073, 0.8138, 0.5668], [0.724, 0.628, 0.6468]]]]])
print (np.array2string(model.predict([in0Ave80285,in0Con47977,in0Cro74578,in0Con74118,in0Sub96798,in1Sub96798],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul24440.png')

LAve80285 = average_pooling1D_layer([[[1.0782]]], 1, 1, true, Ave80285), 
LRes55006 = reshape_layer(Ave80285, [1, 1, 1], Res55006), 
LZer339 = zero_padding2D_layer(Res55006, 2, 0, 0, 0, Zer339), 
LCon47977 = concatenate_layer([Zer339,[[[[0.243, 0.3105, 0.6076]], [[0.7195, 0.0247, 0.5276]], [[0.3384, 0.5809, 0.0063]]]]], 3, Con47977), 
LCro74578 = cropping2D_layer([[[[1.7841, 1.0988, 1.1247, 1.4854], [1.7109, 1.9378, 1.0072, 1.2437], [1.2239, 1.409, 1.6368, 1.2736], [1.017, 1.2598, 1.0429, 1.633]], [[1.8755, 1.4823, 1.9306, 1.2949], [1.2323, 1.9459, 1.3365, 1.5726], [1.5333, 1.7423, 1.0389, 1.6198], [1.9344, 1.26, 1.2773, 1.4054]], [[1.7667, 1.176, 1.5739, 1.176], [1.0204, 1.8768, 1.0954, 1.7064], [1.8256, 1.303, 1.0446, 1.5659], [1.5331, 1.8488, 1.0317, 1.2227]]]], 0, 0, 2, 1, Cro74578), 
LMax39715 = maximum_layer([Con47977,Cro74578], Max39715), 
LRes85427 = reshape_layer(Max39715, [3, 4], Res85427), 
LSim21252 = simple_rnn_layer(Res85427,[[2], [1], [7], [3]],[[2]],[1], Sim21252), 
LRes80450 = reshape_layer(Sim21252, [1, 1], Res80450), 
LRes89604 = reshape_layer(Res80450, [1, 1, 1], Res89604), 
LRes98877 = reshape_layer(Res89604, [1, 1, 1, 1], Res98877), 
LZer36473 = zero_padding3D_layer(Res98877, 2, 0, 2, 0, 2, 0, Zer36473), 
LCon74118 = concatenate_layer([Zer36473,[[[[[0.7599, 0.6401], [0.3627, 0.4035], [0.3405, 0.4441]], [[0.4469, 0.6195], [0.8735, 0.0521], [0.7411, 0.8472]], [[0.2636, 0.996], [0.7215, 0.3703], [0.5038, 0.3525]]], [[[0.5274, 0.4897], [0.5949, 0.4571], [0.6965, 0.8153]], [[0.9573, 0.4204], [0.1539, 0.6851], [0.3004, 0.0937]], [[0.3096, 0.7597], [0.762, 0.3199], [0.2269, 0.9311]]], [[[0.7531, 0.5386], [0.2174, 0.2991], [0.3531, 0.0706]], [[0.8917, 0.1198], [0.2871, 0.6975], [0.6454, 0.3125]], [[0.4879, 0.4729], [0.8017, 0.3198], [0.9965, 0.0559]]]]]], 4, Con74118), 
LSub96798 = subtract_layer([[[[[0.5401, 0.7407, 0.2349], [0.0553, 0.443, 0.2737], [0.437, 0.2428, 0.4512]], [[0.3839, 0.6934, 0.064], [0.2502, 0.3046, 0.4779], [0.3549, 0.6618, 0.4692]], [[0.6359, 0.7417, 0.5193], [0.3983, 0.3732, 0.7985], [0.1464, 0.0441, 0.8105]]], [[[0.4608, 0.7106, 0.9469], [0.3385, 0.8683, 0.5069], [0.6089, 0.1278, 0.3076]], [[0.9202, 0.6853, 0.6633], [0.0765, 0.4134, 0.9522], [0.104, 0.905, 0.3934]], [[0.5222, 0.5974, 0.0303], [0.218, 0.4491, 0.4218], [0.1472, 0.9241, 0.6855]]], [[[0.9719, 0.233, 0.4809], [0.3416, 0.1557, 0.6805], [0.5033, 0.3294, 0.7303]], [[0.264, 0.3946, 0.7706], [0.4654, 0.2098, 0.8306], [0.997, 0.7966, 0.0458]], [[0.348, 0.5795, 0.8068], [0.9653, 0.551, 0.5819], [0.9546, 0.1549, 0.1151]]]]], [[[[[0.1585, 0.962, 0.9092], [0.3312, 0.685, 0.6655], [0.3831, 0.4094, 0.8492]], [[0.4382, 0.5163, 0.1389], [0.5095, 0.9989, 0.0072], [0.7906, 0.6792, 0.0369]], [[0.2089, 0.3366, 0.6897], [0.1033, 0.4731, 0.1628], [0.4459, 0.645, 0.7796]]], [[[0.4555, 0.6975, 0.8918], [0.4518, 0.3514, 0.4197], [0.5461, 0.3828, 0.7613]], [[0.7219, 0.8683, 0.4746], [0.4985, 0.1852, 0.806], [0.9271, 0.9753, 0.1647]], [[0.2708, 0.6041, 0.2641], [0.3907, 0.5304, 0.9519], [0.7652, 0.1483, 0.9573]]], [[[0.8481, 0.0707, 0.4254], [0.0474, 0.3182, 0.8669], [0.6794, 0.7097, 0.2737]], [[0.8821, 0.293, 0.3143], [0.2972, 0.9526, 0.3635], [0.8817, 0.0281, 0.2512]], [[0.2029, 0.1008, 0.888], [0.6073, 0.8138, 0.5668], [0.724, 0.628, 0.6468]]]]], Sub96798), 
LLea33407 = leaky_relu_layer(Sub96798, 1.9906067787411938, Lea33407), 
LMul24440 = multiply_layer([Con74118,Lea33407], Mul24440), 
exec_layers([LAve80285,LRes55006,LZer339,LCon47977,LCro74578,LMax39715,LRes85427,LSim21252,LRes80450,LRes89604,LRes98877,LZer36473,LCon74118,LSub96798,LLea33407,LMul24440],["Ave80285","Res55006","Zer339","Con47977","Cro74578","Max39715","Res85427","Sim21252","Res80450","Res89604","Res98877","Zer36473","Con74118","Sub96798","Lea33407","Mul24440"],Mul24440,"Mul24440")

Actual (Unparsed): [[[[[0.0000000, -0.3347521, -0.8591846], [-0.0000000, -0.1747223, -0.3146976], [0.0000000, -0.1129217, -0.3518433]], [[-0.0000000, 0.0791460, -0.0923652], [-0.0000000, -1.2072454, 0.0245235], [-0.0000000, -0.0256691, 0.3662445]], [[0.0000000, 0.1067844, -0.3378426], [0.0000000, -0.1434787, 0.2353997], [-0.0000000, -0.6026231, 0.0108923]]], [[[0.0000000, 0.0069090, 0.0269825], [-0.0000000, 0.3075038, 0.0398591], [0.0000000, -0.3535467, -0.7363287]], [[0.0000000, -0.3487263, 0.0793295], [-0.0000000, 0.0351200, 0.1001616], [-0.0000000, -0.0420379, 0.0214292]], [[0.0000000, -0.0041291, -0.3535673], [-0.0000000, -0.1233193, -0.3375651], [-0.0000000, 0.1760290, -0.5037688]]], [[[0.0000000, 0.1222281, 0.0298923], [0.0000000, -0.0703232, -0.1109808], [-0.0000000, -0.2673065, 0.0322360]], [[-0.0000000, 0.0905967, 0.0546647], [0.0000000, -0.4245126, 0.3258023], [0.0000000, 0.4959899, -0.1277721]], [[0.0000000, 0.2335577, -0.0764383], [0.0000000, -0.4193945, 0.0048290], [0.2306000, -0.9384600, -0.0591649]]]]]

Expected (Unparsed): [[[[[0.0,-0.3347521207749103,-0.8591845631944102],[-0.0,-0.17472232503316235,-0.3146976134400077],[0.0,-0.11292174791968533,-0.3518433312347077]],[[-0.0,0.07914599000000001,-0.0923652493673197],[-0.0,-1.2072453832402896,0.024523470000000002],[-0.0,-0.025669153096816676,0.36624456]],[[0.0,0.10678436000000001,-0.33784259751710943],[0.0,-0.14347865680709102,0.23539970999999998],[-0.0,-0.602623198003505,0.010892250000000013]]],[[[0.0,0.00690894,0.026982469999999967],[-0.0,0.30750380999999993,0.03985912],[0.0,-0.35354669345527656,-0.7363286523332814]],[[0.0,-0.3487262400798768,0.07932948],[-0.0,0.03511998,0.10016162],[-0.0,-0.04203787282626994,0.021429190000000004]],[[0.0,-0.004129155453278389,-0.3535673161415044],[-0.0,-0.12331928430708416,-0.3375650870260852],[-0.0,0.17602902,-0.5037687895042346]]],[[[0.0,0.12222813,0.029892299999999993],[0.0,-0.07032316097597952,-0.11098078687400594],[-0.0,-0.26730650133400796,0.032235959999999994]],[[-0.0,0.09059672000000002,0.054664739999999996],[0.0,-0.4245125815479761,0.32580225],[0.0,0.49598989999999993,-0.12777207261045037]],[[0.0,0.23355773000000002,-0.07643826518813694],[0.0,-0.41939449264701884,0.00482898],[0.23060000000000003,-0.9384599207878802,-0.05916487439594913]]]]]

Actual:   [[[[[0, -0.3347, -0.8591], [-0, -0.1747, -0.3146], [0, -0.1129, -0.3518]], [[-0, 0.0792, -0.0923], [-0, -1.2072, 0.0246], [-0, -0.0256, 0.3663]], [[0, 0.1068, -0.3378], [0, -0.1434, 0.2354], [-0, -0.6026, 0.0109]]], [[[0, 0.007, 0.027], [-0, 0.3076, 0.0399], [0, -0.3535, -0.7363]], [[0, -0.3487, 0.0794], [-0, 0.0352, 0.1002], [-0, -0.042, 0.0215]], [[0, -0.0041, -0.3535], [-0, -0.1233, -0.3375], [-0, 0.1761, -0.5037]]], [[[0, 0.1223, 0.0299], [0, -0.0703, -0.1109], [-0, -0.2673, 0.0323]], [[-0, 0.0906, 0.0547], [0, -0.4245, 0.3259], [0, 0.496, -0.1277]], [[0, 0.2336, -0.0764], [0, -0.4193, 0.0049], [0.2306, -0.9384, -0.0591]]]]]

Expected: [[[[[0, -0.3347, -0.8591], [-0, -0.1747, -0.3146], [0, -0.1129, -0.3518]], [[-0, 0.0792, -0.0923], [-0, -1.2072, 0.0246], [-0, -0.0256, 0.3663]], [[0, 0.1068, -0.3378], [0, -0.1434, 0.2354], [-0, -0.6026, 0.0109]]], [[[0, 0.007, 0.027], [-0, 0.3076, 0.0399], [0, -0.3535, -0.7363]], [[0, -0.3487, 0.0794], [-0, 0.0352, 0.1002], [-0, -0.042, 0.0215]], [[0, -0.0041, -0.3535], [-0, -0.1233, -0.3375], [-0, 0.1761, -0.5037]]], [[[0, 0.1223, 0.0299], [0, -0.0703, -0.1109], [-0, -0.2673, 0.0323]], [[-0, 0.0906, 0.0547], [0, -0.4245, 0.3259], [0, 0.496, -0.1277]], [[0, 0.2336, -0.0764], [0, -0.4193, 0.0049], [0.2307, -0.9384, -0.0591]]]]]