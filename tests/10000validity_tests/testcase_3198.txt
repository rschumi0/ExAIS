import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max29980 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Max29980 = tf.keras.layers.Input(shape=([2, 1, 2]))

Max29980 = keras.layers.Maximum(name = 'Max29980', )([in0Max29980,in1Max29980])
Res4487 = keras.layers.Reshape((2, 1, 2, 1), name = 'Res4487', )(Max29980)
Con38093 = keras.layers.Conv3DTranspose(4, (2, 1, 1),strides=(1, 1, 1), padding='valid', name = 'Con38093', )(Res4487)
model = tf.keras.models.Model(inputs=[in0Max29980,in1Max29980], outputs=Con38093)
w = model.get_layer('Con38093').get_weights() 
w[0] = np.array([[[[[0.3389], [0.4941], [0.8182], [0.598]]]], [[[[0.6646], [0.5462], [0.5649], [0.3405]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con38093').set_weights(w) 
in0Max29980 = tf.constant([[[[0.5295, 0.1899]], [[0.6873, 0.892]]]])
in1Max29980 = tf.constant([[[[0.9468, 0.7607]], [[0.1258, 0.4595]]]])
print (np.array2string(model.predict([in0Max29980,in1Max29980],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con38093.png')

LMax29980 = maximum_layer([[[[[0.5295, 0.1899]], [[0.6873, 0.892]]]], [[[[0.9468, 0.7607]], [[0.1258, 0.4595]]]]], Max29980), 
LRes4487 = reshape_layer(Max29980, [2, 1, 2, 1], Res4487), 
LCon38093 = conv3D_transpose_layer(Res4487, 2, 1, 1,[[[[[0.3389], [0.4941], [0.8182], [0.598]]]], [[[[0.6646], [0.5462], [0.5649], [0.3405]]]]],[0, 0, 0, 0], 1, 1, 1, false, Con38093), 
exec_layers([LMax29980,LRes4487,LCon38093],["Max29980","Res4487","Con38093"],Con38093,"Con38093")

Actual (Unparsed): [[[[[0.3208705, 0.4678139, 0.7746718, 0.5661864], [0.2578012, 0.3758619, 0.6224047, 0.4548986]]], [[[0.8621693, 0.8567371, 1.0971962, 0.7333908], [0.8078600, 0.8562315, 1.1595538, 0.7924344]]], [[[0.4567796, 0.3754033, 0.3882558, 0.2340257], [0.5928232, 0.4872104, 0.5038908, 0.3037260]]]]]

Expected (Unparsed): [[[[[0.32087052,0.46781387999999996,0.77467176,0.5661864],[0.25780123,0.37586187,0.62240474,0.4548986]]],[[[0.86216925,0.85673709,1.09719618,0.7333908],[0.80786002,0.85623154,1.1595538300000001,0.79243435]]],[[[0.45677958,0.37540326,0.38825577,0.23402565000000003],[0.5928232,0.48721040000000004,0.5038908,0.30372600000000005]]]]]

Actual:   [[[[[0.3209, 0.4679, 0.7747, 0.5662], [0.2579, 0.3759, 0.6225, 0.4549]]], [[[0.8622, 0.8568, 1.0972, 0.7334], [0.8079, 0.8563, 1.1596, 0.7925]]], [[[0.4568, 0.3755, 0.3883, 0.2341], [0.5929, 0.4873, 0.5039, 0.3038]]]]]

Expected: [[[[[0.3209, 0.4679, 0.7747, 0.5662], [0.2579, 0.3759, 0.6225, 0.4549]]], [[[0.8622, 0.8568, 1.0972, 0.7334], [0.8079, 0.8563, 1.1596, 0.7925]]], [[[0.4568, 0.3755, 0.3883, 0.2341], [0.5929, 0.4873, 0.5039, 0.3038]]]]]