import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer68721 = tf.keras.layers.Input(shape=([1, 4, 1, 1]))
in0Con19905 = tf.keras.layers.Input(shape=([3, 8, 5, 3]))
in0Up_96613 = tf.keras.layers.Input(shape=([3, 4, 1, 4]))
in0Up_18735 = tf.keras.layers.Input(shape=([1, 3, 1]))
in0Sub66686 = tf.keras.layers.Input(shape=([3]))
in1Sub66686 = tf.keras.layers.Input(shape=([3]))
in0Con12229 = tf.keras.layers.Input(shape=([3]))

Zer68721 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer68721', )(in0Zer68721)
Zer25627 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (2, 0)), name = 'Zer25627', )(Zer68721)
Con19905 = keras.layers.Concatenate(axis=4, name = 'Con19905', )([Zer25627,in0Con19905])
Up_96613 = keras.layers.UpSampling3D(size=(1, 2, 1), name = 'Up_96613', )(in0Up_96613)
Zer6282 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (4, 0)), name = 'Zer6282', )(Up_96613)
Add59932 = keras.layers.Add(name = 'Add59932', )([Con19905,Zer6282])
Res23758 = keras.layers.Reshape((3, 8, 20), name = 'Res23758', )(Add59932)
Glo39375 = keras.layers.GlobalAveragePooling2D(name = 'Glo39375', )(Res23758)
Res5878 = keras.layers.Reshape((20, 1), name = 'Res5878', )(Glo39375)
Res62708 = keras.layers.Reshape((20, 1, 1), name = 'Res62708', )(Res5878)
Up_18735 = keras.layers.UpSampling2D(size=(2, 1), name = 'Up_18735', )(in0Up_18735)
Res64536 = keras.layers.Reshape((2, 3), name = 'Res64536', )(Up_18735)
Fla5958 = keras.layers.Flatten(name = 'Fla5958', )(Res64536)
Sub66686 = keras.layers.Subtract(name = 'Sub66686', )([in0Sub66686,in1Sub66686])
Con12229 = keras.layers.Concatenate(axis=1, name = 'Con12229', )([Sub66686,in0Con12229])
Ave85112 = keras.layers.Average(name = 'Ave85112', )([Fla5958,Con12229])
Res71126 = keras.layers.Reshape((6, 1), name = 'Res71126', )(Ave85112)
Res1843 = keras.layers.Reshape((6, 1, 1), name = 'Res1843', )(Res71126)
Up_99242 = keras.layers.UpSampling2D(size=(2, 1), name = 'Up_99242', )(Res1843)
Zer99532 = keras.layers.ZeroPadding2D(padding=((8, 0), (0, 0)), name = 'Zer99532', )(Up_99242)
Min24531 = keras.layers.Minimum(name = 'Min24531', )([Res62708,Zer99532])
model = tf.keras.models.Model(inputs=[in0Zer68721,in0Con19905,in0Up_96613,in0Up_18735,in0Sub66686,in1Sub66686,in0Con12229], outputs=Min24531)
in0Zer68721 = tf.constant([[[[[1.386]], [[1.2087]], [[1.6284]], [[1.6835]]]]])
in0Con19905 = tf.constant([[[[[0.3906, 0.4104, 0.963], [0.0922, 0.3012, 0.5796], [0.2669, 0.5385, 0.4798], [0.9839, 0.7587, 0.8679], [0.4644, 0.6097, 0.1575]], [[0.3627, 0.1166, 0.8576], [0.1603, 0.3037, 0.7859], [0.2498, 0.1322, 0.1119], [0.4886, 0.602, 0.6777], [0.8146, 0.3349, 0.7245]], [[0.9684, 0.2637, 0.3169], [0.604, 0.4058, 0.3718], [0.358, 0.0623, 0.3163], [0.1298, 0.2168, 0.0871], [0.8934, 0.3244, 0.4336]], [[0.3879, 0.5287, 0.6808], [0.019, 0.2418, 0.0094], [0.6238, 0.9875, 0.3635], [0.7943, 0.972, 0.1637], [0.3584, 0.7307, 0.6581]], [[0.9069, 0.3001, 0.1239], [0.0017, 0.5322, 0.1094], [0.0278, 0.1548, 0.2425], [0.7087, 0.9927, 0.0836], [0.3277, 0.3734, 0.2745]], [[0.8565, 0.2348, 0.3093], [0.6863, 0.0659, 0.8706], [0.2477, 0.8574, 0.9283], [0.1555, 0.7691, 0.654], [0.9787, 0.4195, 0.1413]], [[0.9098, 0.3037, 0.6999], [0.6881, 0.4188, 0.9426], [0.3831, 0.0955, 0.348], [0.4258, 0.9204, 0.6021], [0.845, 0.4189, 0.5342]], [[0.7246, 0.6329, 0.0904], [0.9383, 0.0228, 0.814], [0.1354, 0.0913, 0.4226], [0.9355, 0.3489, 0.9225], [0.7844, 0.6103, 0.268]]], [[[0.7791, 0.7292, 0.6307], [0.6777, 0.0734, 0.2158], [0.5665, 0.712, 0.2331], [0.0012, 0.2941, 0.8708], [0.6003, 0.909, 0.77]], [[0.5227, 0.3594, 0.7821], [0.6308, 0.3628, 0.9307], [0.1016, 0.8807, 0.8603], [0.5149, 0.516, 0.0079], [0.9397, 0.6392, 0.9451]], [[0.3619, 0.0183, 0.6203], [0.4985, 0.5203, 0.0442], [0.8352, 0.1761, 0.6731], [0.3697, 0.5692, 0.212], [0.7624, 0.1322, 0.9971]], [[0.9617, 0.2284, 0.3113], [0.5466, 0.436, 0.7343], [0.7884, 0.4908, 0.9386], [0.1683, 0.5389, 0.1206], [0.7811, 0.5554, 0.5575]], [[0.2624, 0.7137, 0.2479], [0.2365, 0.2193, 0.5378], [0.9141, 0.6975, 0.4413], [0.348, 0.3908, 0.0086], [0.358, 0.9868, 0.4271]], [[0.3133, 0.8439, 0.5919], [0.7105, 0.6412, 0.7286], [0.5642, 0.335, 0.5769], [0.6143, 0.8916, 0.05], [0.0206, 0.0144, 0.5269]], [[0.2104, 0.9912, 0.4925], [0.4366, 0.3387, 0.794], [0.0449, 0.0119, 0.6032], [0.9046, 0.446, 0.7673], [0.3209, 0.6027, 0.6528]], [[0.635, 0.8, 0.7337], [0.6552, 0.7132, 0.4521], [0.9704, 0.3463, 0.0221], [0.1226, 0.6006, 0.0892], [0.6793, 0.0186, 0.1789]]], [[[0.6606, 0.9196, 0.4417], [0.342, 0.1613, 0.5527], [0.7769, 0.7131, 0.3026], [0.7763, 0.8312, 0.0976], [0.2023, 0.7468, 0.6675]], [[0.1062, 0.4495, 0.9426], [0.5403, 0.9339, 0.7397], [0.1541, 0.4002, 0.2693], [0.8178, 0.8813, 0.7065], [0.2119, 0.8209, 0.0263]], [[0.9651, 0.6359, 0.3634], [0.0345, 0.4884, 0.6534], [0.8696, 0.0512, 0.3679], [0.7029, 0.728, 0.2412], [0.5413, 0.3159, 0.8118]], [[0.1469, 0.1405, 0.8021], [0.7931, 0.8496, 0.0136], [0.9302, 0.4623, 0.7416], [0.4287, 0.1824, 0.9574], [0.9192, 0.4881, 0.3104]], [[0.4076, 0.5591, 0.7069], [0.7351, 0.998, 0.1578], [0.5454, 0.7908, 0.8751], [0.1799, 0.4209, 0.9454], [0.6311, 0.4862, 0.8736]], [[0.8988, 0.3253, 0.8965], [0.1093, 0.9007, 0.1345], [0.3764, 0.1021, 0.7196], [0.7576, 0.6335, 0.8048], [0.4384, 0.6445, 0.3584]], [[0.7827, 0.6606, 0.9652], [0.9513, 0.766, 0.7657], [0.9922, 0.3384, 0.1969], [0.5715, 0.2298, 0.4025], [0.8395, 0.1321, 0.1904]], [[0.6239, 0.9119, 0.4276], [0.1928, 0.7627, 0.0055], [0.3884, 0.9364, 0.8007], [0.2637, 0.0346, 0.8921], [0.9019, 0.9041, 0.5126]]]]])
in0Up_96613 = tf.constant([[[[[1.0198, 1.701, 1.6005, 1.2842]], [[1.5125, 1.5755, 1.1031, 1.0049]], [[1.7341, 1.195, 1.6869, 1.5839]], [[1.9942, 1.6245, 1.9761, 1.7189]]], [[[1.3072, 1.944, 1.6716, 1.8763]], [[1.2142, 1.0157, 1.805, 1.0907]], [[1.5028, 1.9052, 1.9172, 1.9152]], [[1.4937, 1.8004, 1.1138, 1.4026]]], [[[1.0458, 1.3255, 1.8847, 1.6307]], [[1.0646, 1.6038, 1.1651, 1.8198]], [[1.0987, 1.2883, 1.3619, 1.5332]], [[1.554, 1.0493, 1.9761, 1.7993]]]]])
in0Up_18735 = tf.constant([[[[1.1649], [1.6846], [1.0056]]]])
in0Sub66686 = tf.constant([[0.2502, 0.6241, 0.1018]])
in1Sub66686 = tf.constant([[0.5341, 0.5318, 0.6892]])
in0Con12229 = tf.constant([[0.9402, 0.9284, 0.6205]])
print (np.array2string(model.predict([in0Zer68721,in0Con19905,in0Up_96613,in0Up_18735,in0Sub66686,in1Sub66686,in0Con12229],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min24531.png')

LZer68721 = zero_padding3D_layer([[[[[1.386]], [[1.2087]], [[1.6284]], [[1.6835]]]]], 1, 1, 1, 1, 1, 1, Zer68721), 
LZer25627 = zero_padding3D_layer(Zer68721, 0, 0, 2, 0, 2, 0, Zer25627), 
LCon19905 = concatenate_layer([Zer25627,[[[[[0.3906, 0.4104, 0.963], [0.0922, 0.3012, 0.5796], [0.2669, 0.5385, 0.4798], [0.9839, 0.7587, 0.8679], [0.4644, 0.6097, 0.1575]], [[0.3627, 0.1166, 0.8576], [0.1603, 0.3037, 0.7859], [0.2498, 0.1322, 0.1119], [0.4886, 0.602, 0.6777], [0.8146, 0.3349, 0.7245]], [[0.9684, 0.2637, 0.3169], [0.604, 0.4058, 0.3718], [0.358, 0.0623, 0.3163], [0.1298, 0.2168, 0.0871], [0.8934, 0.3244, 0.4336]], [[0.3879, 0.5287, 0.6808], [0.019, 0.2418, 0.0094], [0.6238, 0.9875, 0.3635], [0.7943, 0.972, 0.1637], [0.3584, 0.7307, 0.6581]], [[0.9069, 0.3001, 0.1239], [0.0017, 0.5322, 0.1094], [0.0278, 0.1548, 0.2425], [0.7087, 0.9927, 0.0836], [0.3277, 0.3734, 0.2745]], [[0.8565, 0.2348, 0.3093], [0.6863, 0.0659, 0.8706], [0.2477, 0.8574, 0.9283], [0.1555, 0.7691, 0.654], [0.9787, 0.4195, 0.1413]], [[0.9098, 0.3037, 0.6999], [0.6881, 0.4188, 0.9426], [0.3831, 0.0955, 0.348], [0.4258, 0.9204, 0.6021], [0.845, 0.4189, 0.5342]], [[0.7246, 0.6329, 0.0904], [0.9383, 0.0228, 0.814], [0.1354, 0.0913, 0.4226], [0.9355, 0.3489, 0.9225], [0.7844, 0.6103, 0.268]]], [[[0.7791, 0.7292, 0.6307], [0.6777, 0.0734, 0.2158], [0.5665, 0.712, 0.2331], [0.0012, 0.2941, 0.8708], [0.6003, 0.909, 0.77]], [[0.5227, 0.3594, 0.7821], [0.6308, 0.3628, 0.9307], [0.1016, 0.8807, 0.8603], [0.5149, 0.516, 0.0079], [0.9397, 0.6392, 0.9451]], [[0.3619, 0.0183, 0.6203], [0.4985, 0.5203, 0.0442], [0.8352, 0.1761, 0.6731], [0.3697, 0.5692, 0.212], [0.7624, 0.1322, 0.9971]], [[0.9617, 0.2284, 0.3113], [0.5466, 0.436, 0.7343], [0.7884, 0.4908, 0.9386], [0.1683, 0.5389, 0.1206], [0.7811, 0.5554, 0.5575]], [[0.2624, 0.7137, 0.2479], [0.2365, 0.2193, 0.5378], [0.9141, 0.6975, 0.4413], [0.348, 0.3908, 0.0086], [0.358, 0.9868, 0.4271]], [[0.3133, 0.8439, 0.5919], [0.7105, 0.6412, 0.7286], [0.5642, 0.335, 0.5769], [0.6143, 0.8916, 0.05], [0.0206, 0.0144, 0.5269]], [[0.2104, 0.9912, 0.4925], [0.4366, 0.3387, 0.794], [0.0449, 0.0119, 0.6032], [0.9046, 0.446, 0.7673], [0.3209, 0.6027, 0.6528]], [[0.635, 0.8, 0.7337], [0.6552, 0.7132, 0.4521], [0.9704, 0.3463, 0.0221], [0.1226, 0.6006, 0.0892], [0.6793, 0.0186, 0.1789]]], [[[0.6606, 0.9196, 0.4417], [0.342, 0.1613, 0.5527], [0.7769, 0.7131, 0.3026], [0.7763, 0.8312, 0.0976], [0.2023, 0.7468, 0.6675]], [[0.1062, 0.4495, 0.9426], [0.5403, 0.9339, 0.7397], [0.1541, 0.4002, 0.2693], [0.8178, 0.8813, 0.7065], [0.2119, 0.8209, 0.0263]], [[0.9651, 0.6359, 0.3634], [0.0345, 0.4884, 0.6534], [0.8696, 0.0512, 0.3679], [0.7029, 0.728, 0.2412], [0.5413, 0.3159, 0.8118]], [[0.1469, 0.1405, 0.8021], [0.7931, 0.8496, 0.0136], [0.9302, 0.4623, 0.7416], [0.4287, 0.1824, 0.9574], [0.9192, 0.4881, 0.3104]], [[0.4076, 0.5591, 0.7069], [0.7351, 0.998, 0.1578], [0.5454, 0.7908, 0.8751], [0.1799, 0.4209, 0.9454], [0.6311, 0.4862, 0.8736]], [[0.8988, 0.3253, 0.8965], [0.1093, 0.9007, 0.1345], [0.3764, 0.1021, 0.7196], [0.7576, 0.6335, 0.8048], [0.4384, 0.6445, 0.3584]], [[0.7827, 0.6606, 0.9652], [0.9513, 0.766, 0.7657], [0.9922, 0.3384, 0.1969], [0.5715, 0.2298, 0.4025], [0.8395, 0.1321, 0.1904]], [[0.6239, 0.9119, 0.4276], [0.1928, 0.7627, 0.0055], [0.3884, 0.9364, 0.8007], [0.2637, 0.0346, 0.8921], [0.9019, 0.9041, 0.5126]]]]]], 4, Con19905), 
LUp_96613 = up_sampling3D_layer([[[[[1.0198, 1.701, 1.6005, 1.2842]], [[1.5125, 1.5755, 1.1031, 1.0049]], [[1.7341, 1.195, 1.6869, 1.5839]], [[1.9942, 1.6245, 1.9761, 1.7189]]], [[[1.3072, 1.944, 1.6716, 1.8763]], [[1.2142, 1.0157, 1.805, 1.0907]], [[1.5028, 1.9052, 1.9172, 1.9152]], [[1.4937, 1.8004, 1.1138, 1.4026]]], [[[1.0458, 1.3255, 1.8847, 1.6307]], [[1.0646, 1.6038, 1.1651, 1.8198]], [[1.0987, 1.2883, 1.3619, 1.5332]], [[1.554, 1.0493, 1.9761, 1.7993]]]]], 1, 2, 1, Up_96613), 
LZer6282 = zero_padding3D_layer(Up_96613, 0, 0, 0, 0, 4, 0, Zer6282), 
LAdd59932 = add_layer([Con19905,Zer6282], Add59932), 
LRes23758 = reshape_layer(Add59932, [3, 8, 20], Res23758), 
LGlo39375 = global_average_pooling2D_layer(Res23758, Glo39375), 
LRes5878 = reshape_layer(Glo39375, [20, 1], Res5878), 
LRes62708 = reshape_layer(Res5878, [20, 1, 1], Res62708), 
LUp_18735 = up_sampling2D_layer([[[[1.1649], [1.6846], [1.0056]]]], 2, 1, Up_18735), 
LRes64536 = reshape_layer(Up_18735, [2, 3], Res64536), 
LFla5958 = flatten_layer(Res64536, Fla5958), 
LSub66686 = subtract_layer([[0.2502, 0.6241, 0.1018]], [[0.5341, 0.5318, 0.6892]], Sub66686), 
LCon12229 = concatenate_layer([Sub66686,[[0.9402, 0.9284, 0.6205]]], 1, Con12229), 
LAve85112 = average_layer([Fla5958,Con12229], Ave85112), 
LRes71126 = reshape_layer(Ave85112, [6, 1], Res71126), 
LRes1843 = reshape_layer(Res71126, [6, 1, 1], Res1843), 
LUp_99242 = up_sampling2D_layer(Res1843, 2, 1, Up_99242), 
LZer99532 = zero_padding2D_layer(Up_99242, 8, 0, 0, 0, Zer99532), 
LMin24531 = minimum_layer([Res62708,Zer99532], Min24531), 
exec_layers([LZer68721,LZer25627,LCon19905,LUp_96613,LZer6282,LAdd59932,LRes23758,LGlo39375,LRes5878,LRes62708,LUp_18735,LRes64536,LFla5958,LSub66686,LCon12229,LAve85112,LRes71126,LRes1843,LUp_99242,LZer99532,LMin24531],["Zer68721","Zer25627","Con19905","Up_96613","Zer6282","Add59932","Res23758","Glo39375","Res5878","Res62708","Up_18735","Res64536","Fla5958","Sub66686","Con12229","Ave85112","Res71126","Res1843","Up_99242","Zer99532","Min24531"],Min24531,"Min24531")

Actual (Unparsed): [[[[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.0000000]], [[0.4405000]], [[0.4318458]], [[0.4931333]], [[0.2091000]], [[0.2091000]], [[0.5737292]], [[0.4680208]], [[1.3065000]], [[1.3065000]], [[0.8130500]], [[0.8130500]]]]

Expected (Unparsed): [[[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0]],[[0.4405]],[[0.43184583333333343]],[[0.4931333333333332]],[[0.2091]],[[0.2091]],[[0.5737291666666666]],[[0.4680208333333333]],[[1.3065]],[[1.3065]],[[0.81305]],[[0.81305]]]]

Actual:   [[[[0]], [[0]], [[0]], [[0]], [[0]], [[0]], [[0]], [[0]], [[0]], [[0.4405]], [[0.4319]], [[0.4932]], [[0.2091]], [[0.2091]], [[0.5738]], [[0.4681]], [[1.3065]], [[1.3065]], [[0.8131]], [[0.8131]]]]

Expected: [[[[0]], [[0]], [[0]], [[0]], [[0]], [[0]], [[0]], [[0]], [[0]], [[0.4405]], [[0.4319]], [[0.4932]], [[0.2091]], [[0.2091]], [[0.5738]], [[0.4681]], [[1.3065]], [[1.3065]], [[0.8131]], [[0.8131]]]]