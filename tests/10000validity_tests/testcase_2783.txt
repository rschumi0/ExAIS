import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Den51184 = tf.keras.layers.Input(shape=([5, 4, 2]))
in0Ave45251 = tf.keras.layers.Input(shape=([2, 2]))
in0Up_79146 = tf.keras.layers.Input(shape=([4, 1, 1]))
in0Con25997 = tf.keras.layers.Input(shape=([5, 4, 2]))

Den51184 = keras.layers.Dense(3,name = 'Den51184', )(in0Den51184)
Dep19017 = keras.layers.DepthwiseConv2D((5, 2),strides=(1, 1), padding='same', name = 'Dep19017', )(Den51184)
Ave45251 = keras.layers.AveragePooling1D(pool_size=(2), name = 'Ave45251', )(in0Ave45251)
Res41762 = keras.layers.Reshape((1, 2, 1), name = 'Res41762', )(Ave45251)
Res73112 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res73112', )(Res41762)
Cro63640 = keras.layers.Cropping3D(cropping=((0, 0), (1, 0), (0, 0)), name = 'Cro63640', )(Res73112)
Res21350 = keras.layers.Reshape((1, 1, 1), name = 'Res21350', )(Cro63640)
Zer6676 = keras.layers.ZeroPadding2D(padding=((3, 0), (0, 0)), name = 'Zer6676', )(Res21350)
Up_79146 = keras.layers.UpSampling2D(size=(1, 1), name = 'Up_79146', )(in0Up_79146)
Min6288 = keras.layers.Minimum(name = 'Min6288', )([Zer6676,Up_79146])
Zer43564 = keras.layers.ZeroPadding2D(padding=((1, 0), (3, 0)), name = 'Zer43564', )(Min6288)
Con25997 = keras.layers.Concatenate(axis=3, name = 'Con25997', )([Zer43564,in0Con25997])
Min36704 = keras.layers.Minimum(name = 'Min36704', )([Dep19017,Con25997])
Res96728 = keras.layers.Reshape((5, 12), name = 'Res96728', )(Min36704)
Glo53855 = keras.layers.GlobalAveragePooling1D(name = 'Glo53855', )(Res96728)
Res37629 = keras.layers.Reshape((12, 1), name = 'Res37629', )(Glo53855)
Res54243 = keras.layers.Reshape((12, 1, 1), name = 'Res54243', )(Res37629)
Res29831 = keras.layers.Reshape((12, 1, 1, 1), name = 'Res29831', )(Res54243)
Con20248 = keras.layers.Conv3D(3, (2, 1, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con20248', )(Res29831)
model = tf.keras.models.Model(inputs=[in0Den51184,in0Ave45251,in0Up_79146,in0Con25997], outputs=Con20248)
w = model.get_layer('Den51184').get_weights() 
w[0] = np.array([[0.0261, 0.6465, 0.8924], [0.0216, 0.2195, 0.1949]])
w[1] = np.array([0.7863, 0.1567, 0.7123])
model.get_layer('Den51184').set_weights(w) 
w = model.get_layer('Dep19017').get_weights() 
w[0] = np.array([[[[0.3792], [0.745], [0.1502]], [[0.7532], [0.6859], [0.3469]]], [[[0.0172], [0.4827], [0.8564]], [[0.7829], [0.4169], [0.9324]]], [[[0.318], [0.3924], [0.8999]], [[0.7653], [0.8179], [0.0509]]], [[[0.4371], [0.1167], [0.6444]], [[0.5605], [0.15], [0.6332]]], [[[0.0236], [0.3911], [0.0711]], [[0.8957], [0.073], [0.2412]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Dep19017').set_weights(w) 
w = model.get_layer('Con20248').get_weights() 
w[0] = np.array([[[[[0.3661, 0.131, 0.7144]]]], [[[[0.9292, 0.9295, 0.4933]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con20248').set_weights(w) 
in0Den51184 = tf.constant([[[[0.8513, 0.6002], [0.6942, 0.0535], [0.0566, 0.1444], [0.9028, 0.6133]], [[0.5363, 0.9268], [0.3995, 0.904], [0.5748, 0.3419], [0.8293, 0.0148]], [[0.3899, 0.5749], [0.4237, 0.1023], [0.5682, 0.292], [0.8949, 0.5674]], [[0.6974, 0.1306], [0.2148, 0.052], [0.2801, 0.7234], [0.3354, 0.2109]], [[0.8731, 0.4133], [0.2178, 0.22], [0.4086, 0.6494], [0.5047, 0.8938]]]])
in0Ave45251 = tf.constant([[[1.8201, 1.297], [1.7888, 1.102]]])
in0Up_79146 = tf.constant([[[[1.4244]], [[1.7342]], [[1.7137]], [[1.8983]]]])
in0Con25997 = tf.constant([[[[0.3278, 0.6927], [0.1225, 0.7706], [0.3795, 0.8942], [0.8609, 0.4301]], [[0.4395, 0.263], [0.9565, 0.4112], [0.3219, 0.7536], [0.6603, 0.3574]], [[0.1031, 0.7241], [0.3454, 0.0333], [0.1929, 0.8178], [0.5227, 0.3673]], [[0.7815, 0.9749], [0.876, 0.1123], [0.0113, 0.9671], [0.2665, 0.9811]], [[0.9381, 0.0988], [0.5146, 0.1318], [0.5857, 0.7499], [0.6461, 0.1767]]]])
print (np.array2string(model.predict([in0Den51184,in0Ave45251,in0Up_79146,in0Con25997],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con20248.png')

LDen51184 = dense_layer([[[[0.8513, 0.6002], [0.6942, 0.0535], [0.0566, 0.1444], [0.9028, 0.6133]], [[0.5363, 0.9268], [0.3995, 0.904], [0.5748, 0.3419], [0.8293, 0.0148]], [[0.3899, 0.5749], [0.4237, 0.1023], [0.5682, 0.292], [0.8949, 0.5674]], [[0.6974, 0.1306], [0.2148, 0.052], [0.2801, 0.7234], [0.3354, 0.2109]], [[0.8731, 0.4133], [0.2178, 0.22], [0.4086, 0.6494], [0.5047, 0.8938]]]], [[0.0261, 0.6465, 0.8924], [0.0216, 0.2195, 0.1949]],[0.7863, 0.1567, 0.7123], Den51184), 
LDep19017 = depthwise_conv2D_layer(Den51184, 5, 2,[[[[0.3792], [0.745], [0.1502]], [[0.7532], [0.6859], [0.3469]]], [[[0.0172], [0.4827], [0.8564]], [[0.7829], [0.4169], [0.9324]]], [[[0.318], [0.3924], [0.8999]], [[0.7653], [0.8179], [0.0509]]], [[[0.4371], [0.1167], [0.6444]], [[0.5605], [0.15], [0.6332]]], [[[0.0236], [0.3911], [0.0711]], [[0.8957], [0.073], [0.2412]]]],[0, 0, 0], 1, 1, true, Dep19017), 
LAve45251 = average_pooling1D_layer([[[1.8201, 1.297], [1.7888, 1.102]]], 2, Ave45251), 
LRes41762 = reshape_layer(Ave45251, [1, 2, 1], Res41762), 
LRes73112 = reshape_layer(Res41762, [1, 2, 1, 1], Res73112), 
LCro63640 = cropping3D_layer(Res73112, 0, 0, 1, 0, 0, 0, Cro63640), 
LRes21350 = reshape_layer(Cro63640, [1, 1, 1], Res21350), 
LZer6676 = zero_padding2D_layer(Res21350, 3, 0, 0, 0, Zer6676), 
LUp_79146 = up_sampling2D_layer([[[[1.4244]], [[1.7342]], [[1.7137]], [[1.8983]]]], 1, 1, Up_79146), 
LMin6288 = minimum_layer([Zer6676,Up_79146], Min6288), 
LZer43564 = zero_padding2D_layer(Min6288, 1, 0, 3, 0, Zer43564), 
LCon25997 = concatenate_layer([Zer43564,[[[[0.3278, 0.6927], [0.1225, 0.7706], [0.3795, 0.8942], [0.8609, 0.4301]], [[0.4395, 0.263], [0.9565, 0.4112], [0.3219, 0.7536], [0.6603, 0.3574]], [[0.1031, 0.7241], [0.3454, 0.0333], [0.1929, 0.8178], [0.5227, 0.3673]], [[0.7815, 0.9749], [0.876, 0.1123], [0.0113, 0.9671], [0.2665, 0.9811]], [[0.9381, 0.0988], [0.5146, 0.1318], [0.5857, 0.7499], [0.6461, 0.1767]]]]], 3, Con25997), 
LMin36704 = minimum_layer([Dep19017,Con25997], Min36704), 
LRes96728 = reshape_layer(Min36704, [5, 12], Res96728), 
LGlo53855 = global_average_pooling1D_layer(Res96728, Glo53855), 
LRes37629 = reshape_layer(Glo53855, [12, 1], Res37629), 
LRes54243 = reshape_layer(Res37629, [12, 1, 1], Res54243), 
LRes29831 = reshape_layer(Res54243, [12, 1, 1, 1], Res29831), 
LCon20248 = conv3D_layer(Res29831, 2, 1, 1,[[[[[0.3661, 0.131, 0.7144]]]], [[[[0.9292, 0.9295, 0.4933]]]]],[0, 0, 0], 1, 1, 1, false, 1, 1, 1, Con20248), 
exec_layers([LDen51184,LDep19017,LAve45251,LRes41762,LRes73112,LCro63640,LRes21350,LZer6676,LUp_79146,LMin6288,LZer43564,LCon25997,LMin36704,LRes96728,LGlo53855,LRes37629,LRes54243,LRes29831,LCon20248],["Den51184","Dep19017","Ave45251","Res41762","Res73112","Cro63640","Res21350","Zer6676","Up_79146","Min6288","Zer43564","Con25997","Min36704","Res96728","Glo53855","Res37629","Res54243","Res29831","Con20248"],Con20248,"Con20248")

Actual (Unparsed): [[[[[0.4813256, 0.4814810, 0.2555294]]], [[[0.7013502, 0.5797337, 0.6417195]]], [[[0.2016113, 0.0721417, 0.3934201]]], [[[0.5231396, 0.5233085, 0.2777279]]], [[[0.4772920, 0.3450183, 0.5461719]]], [[[0.1068426, 0.0382310, 0.2084905]]], [[[0.2771432, 0.2772327, 0.1471317]]], [[[0.8864874, 0.8166174, 0.6257323]]], [[[0.4151140, 0.2184833, 0.6554043]]], [[[0.5737331, 0.5463605, 0.3655149]]], [[[0.6389223, 0.5047511, 0.6362896]]]]]

Expected (Unparsed): [[[[[0.4813256,0.481481,0.2555294]]],[[[0.70135024,0.57973365,0.64171951]]],[[[0.20161126999999998,0.0721417,0.39342008]]],[[[0.5231395999999999,0.5233085,0.27772789999999997]]],[[[0.477292028,0.34501828,0.546171872]]],[[[0.10684262399999998,0.03823104,0.208490496]]],[[[0.277143192,0.27723266999999996,0.147131658]]],[[[0.8864873699999999,0.8166173999999999,0.6257322599999999]]],[[[0.4151139718987037,0.2184832675525668,0.6554043468355903]]],[[[0.5737331215385364,0.5463604633424505,0.365514893459841]]],[[[0.6389223013839503,0.504751132617584,0.6362896155878016]]]]]

Actual:   [[[[[0.4814, 0.4815, 0.2556]]], [[[0.7014, 0.5798, 0.6418]]], [[[0.2017, 0.0722, 0.3935]]], [[[0.5232, 0.5234, 0.2778]]], [[[0.4773, 0.3451, 0.5462]]], [[[0.1069, 0.0383, 0.2085]]], [[[0.2772, 0.2773, 0.1472]]], [[[0.8865, 0.8167, 0.6258]]], [[[0.4152, 0.2185, 0.6555]]], [[[0.5738, 0.5464, 0.3656]]], [[[0.639, 0.5048, 0.6363]]]]]

Expected: [[[[[0.4814, 0.4815, 0.2556]]], [[[0.7014, 0.5798, 0.6418]]], [[[0.2017, 0.0722, 0.3935]]], [[[0.5232, 0.5234, 0.2778]]], [[[0.4773, 0.3451, 0.5462]]], [[[0.1069, 0.0383, 0.2085]]], [[[0.2772, 0.2773, 0.1472]]], [[[0.8865, 0.8167, 0.6258]]], [[[0.4152, 0.2185, 0.6555]]], [[[0.5738, 0.5464, 0.3656]]], [[[0.639, 0.5048, 0.6363]]]]]