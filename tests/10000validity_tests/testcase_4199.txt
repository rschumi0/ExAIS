import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max13963 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))
in1Max13963 = tf.keras.layers.Input(shape=([2, 1, 2, 2]))

Max13963 = keras.layers.Maximum(name = 'Max13963', )([in0Max13963,in1Max13963])
Den73712 = keras.layers.Dense(4,name = 'Den73712', )(Max13963)
model = tf.keras.models.Model(inputs=[in0Max13963,in1Max13963], outputs=Den73712)
w = model.get_layer('Den73712').get_weights() 
w[0] = np.array([[0.9244, 0.6187, 0.4363, 0.6128], [0.9842, 0.3023, 0.7841, 0.8385]])
w[1] = np.array([0.0172, 0.7875, 0.6575, 0.4342])
model.get_layer('Den73712').set_weights(w) 
in0Max13963 = tf.constant([[[[[0.3679, 0.374], [0.2349, 0.9668]]], [[[0.5385, 0.89], [0.7399, 0.8352]]]]])
in1Max13963 = tf.constant([[[[[0.7493, 0.4702], [0.3725, 0.6345]]], [[[0.3512, 0.5098], [0.8238, 0.0987]]]]])
print (np.array2string(model.predict([in0Max13963,in1Max13963],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Den73712.png')

LMax13963 = maximum_layer([[[[[[0.3679, 0.374], [0.2349, 0.9668]]], [[[0.5385, 0.89], [0.7399, 0.8352]]]]], [[[[[0.7493, 0.4702], [0.3725, 0.6345]]], [[[0.3512, 0.5098], [0.8238, 0.0987]]]]]], Max13963), 
LDen73712 = dense_layer(Max13963, [[0.9244, 0.6187, 0.4363, 0.6128], [0.9842, 0.3023, 0.7841, 0.8385]],[0.0172, 0.7875, 0.6575, 0.4342], Den73712), 
exec_layers([LMax13963,LDen73712],["Max13963","Den73712"],Den73712,"Den73712")

Actual (Unparsed): [[[[[1.1726238, 1.3932334, 1.3531034, 1.2876337], [1.3130635, 1.3102294, 1.5780896, 1.4731298]]], [[[1.3909274, 1.3897170, 1.5902965, 1.5104578], [1.6007246, 1.5496660, 1.6718043, 1.6393399]]]]]

Expected (Unparsed): [[[[[1.17262376,1.39323337,1.35310341,1.28763374],[1.31306356,1.31022939,1.57808963,1.4731298]]],[[[1.3909274,1.38971695,1.5902965500000001,1.5104578000000002],[1.60072456,1.5496660199999999,1.67180426,1.6393398399999999]]]]]

Actual:   [[[[[1.1727, 1.3933, 1.3532, 1.2877], [1.3131, 1.3103, 1.5781, 1.4732]]], [[[1.391, 1.3898, 1.5903, 1.5105], [1.6008, 1.5497, 1.6719, 1.6394]]]]]

Expected: [[[[[1.1727, 1.3933, 1.3532, 1.2877], [1.3131, 1.3103, 1.5781, 1.4732]]], [[[1.391, 1.3898, 1.5903, 1.5105], [1.6008, 1.5497, 1.6719, 1.6394]]]]]