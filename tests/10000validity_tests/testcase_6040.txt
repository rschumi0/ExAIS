import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Up_95573 = tf.keras.layers.Input(shape=([4, 4, 1, 1]))
in0Mul44864 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in1Mul44864 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))

Up_95573 = keras.layers.UpSampling3D(size=(2, 1, 2), name = 'Up_95573', )(in0Up_95573)
Thr59840 = keras.layers.ThresholdedReLU(theta=1.2175833478757685, name = 'Thr59840', )(Up_95573)
Lay28421 = keras.layers.LayerNormalization(axis=1, epsilon=1.5531721435786436, name = 'Lay28421', )(Thr59840)
Mul44864 = keras.layers.Multiply(name = 'Mul44864', )([in0Mul44864,in1Mul44864])
Zer41951 = keras.layers.ZeroPadding3D(padding=((7, 0), (3, 0), (0, 0)), name = 'Zer41951', )(Mul44864)
Sub45333 = keras.layers.Subtract(name = 'Sub45333', )([Lay28421,Zer41951])
Res96063 = keras.layers.Reshape((8, 4, 2), name = 'Res96063', )(Sub45333)
Res3833 = keras.layers.Reshape((8, 8), name = 'Res3833', )(Res96063)
Fla48340 = keras.layers.Flatten(name = 'Fla48340', )(Res3833)
Res50370 = keras.layers.Reshape((64, 1), name = 'Res50370', )(Fla48340)
Res10793 = keras.layers.Reshape((64, 1, 1), name = 'Res10793', )(Res50370)
Res68053 = keras.layers.Reshape((64, 1, 1, 1), name = 'Res68053', )(Res10793)
Con15279 = keras.layers.Conv3D(4, (63, 1, 1),strides=(7, 1, 4), padding='valid', dilation_rate=(1, 1, 1), name = 'Con15279', )(Res68053)
model = tf.keras.models.Model(inputs=[in0Up_95573,in0Mul44864,in1Mul44864], outputs=Con15279)
w = model.get_layer('Con15279').get_weights() 
w[0] = np.array([[[[[0.8562, 0.6871, 0.2551, 0.2943]]]], [[[[0.8306, 0.8178, 0.1558, 0.2816]]]], [[[[0.7126, 0.7848, 0.3735, 0.2916]]]], [[[[0.7082, 0.904, 0.1079, 0.998]]]], [[[[0.627, 0.1504, 0.7974, 0.4323]]]], [[[[0.9417, 0.8527, 0.7093, 0.1089]]]], [[[[0.4491, 0.335, 0.3898, 0.8582]]]], [[[[0.4856, 0.6159, 0.7432, 0.5039]]]], [[[[0.2314, 0.5834, 0.1068, 0.4651]]]], [[[[0.4948, 0.8976, 0.0635, 0.3424]]]], [[[[0.5144, 0.2458, 0.8887, 0.5566]]]], [[[[0.7338, 0.4694, 0.4712, 0.1472]]]], [[[[0.2135, 0.5158, 0.2634, 0.9102]]]], [[[[0.325, 0.1293, 0.3193, 0.1574]]]], [[[[0.6428, 0.6874, 0.76, 0.5118]]]], [[[[0.4945, 0.6164, 0.0709, 0.3203]]]], [[[[0.4609, 0.3704, 0.4785, 0.4613]]]], [[[[0.2263, 0.0508, 0.281, 0.5494]]]], [[[[0.5732, 0.3574, 0.4151, 0.8037]]]], [[[[0.9849, 0.7129, 0.7271, 0.1292]]]], [[[[0.2777, 0.0836, 0.3906, 0.2894]]]], [[[[0.9165, 0.2305, 0.659, 0.3945]]]], [[[[0.1865, 0.8691, 0.6779, 0.3177]]]], [[[[0.1889, 0.4882, 0.3919, 0.0642]]]], [[[[0.7114, 0.3875, 0.6784, 0.5671]]]], [[[[0.3804, 0.8269, 0.7149, 0.8572]]]], [[[[0.1467, 0.0506, 0.2435, 0.0674]]]], [[[[0.0777, 0.3492, 0.8375, 0.2699]]]], [[[[0.6341, 0.2509, 0.4895, 0.7151]]]], [[[[0.0927, 0.3976, 0.8475, 0.6454]]]], [[[[0.5468, 0.6539, 0.2031, 0.4898]]]], [[[[0.9592, 0.5205, 0.9012, 0.9109]]]], [[[[0.0764, 0.9808, 0.1858, 0.8712]]]], [[[[0.6188, 0.4948, 0.6209, 0.6142]]]], [[[[0.0576, 0.9738, 0.1344, 0.2139]]]], [[[[0.4564, 0.2189, 0.4205, 0.1371]]]], [[[[0.317, 0.4845, 0.9052, 0.0825]]]], [[[[0.0957, 0.5446, 0.7328, 0.2157]]]], [[[[0.0807, 0.8776, 0.2599, 0.8008]]]], [[[[0.6144, 0.3633, 0.3609, 0.145]]]], [[[[0.2248, 0.1911, 0.4403, 0.7198]]]], [[[[0.0904, 0.5126, 0.4257, 0.2981]]]], [[[[0.4059, 0.7441, 0.1703, 0.9576]]]], [[[[0.6367, 0.3205, 0.6342, 0.8381]]]], [[[[0.3553, 0.1339, 0.9323, 0.6152]]]], [[[[0.3387, 0.8536, 0.8382, 0.7515]]]], [[[[0.8719, 0.8138, 0.6151, 0.7232]]]], [[[[0.7501, 0.1846, 0.1088, 0.5834]]]], [[[[0.3011, 0.6926, 0.8825, 0.4214]]]], [[[[0.8616, 0.2473, 0.7982, 0.5013]]]], [[[[0.5311, 0.4482, 0.8589, 0.1272]]]], [[[[0.6987, 0.0933, 0.3109, 0.5675]]]], [[[[0.7962, 0.4953, 0.9797, 0.6948]]]], [[[[0.9618, 0.6189, 0.5582, 0.3499]]]], [[[[0.8183, 0.7999, 0.105, 0.8212]]]], [[[[0.3668, 0.0777, 0.3175, 0.2482]]]], [[[[0.0743, 0.9814, 0.2437, 0.2005]]]], [[[[0.5977, 0.9446, 0.9705, 0.1657]]]], [[[[0.2235, 0.3931, 0.4848, 0.1829]]]], [[[[0.0303, 0.9489, 0.3406, 0.4054]]]], [[[[0.9805, 0.1243, 0.9859, 0.9401]]]], [[[[0.6377, 0.3424, 0.6053, 0.9194]]]], [[[[0.9684, 0.1132, 0.1136, 0.3926]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con15279').set_weights(w) 
in0Up_95573 = tf.constant([[[[[1.7271]], [[1.7141]], [[1.8278]], [[1.0871]]], [[[1.1467]], [[1.7639]], [[1.8332]], [[1.5237]]], [[[1.9623]], [[1.0819]], [[1.8042]], [[1.9119]]], [[[1.8109]], [[1.2116]], [[1.5483]], [[1.6545]]]]])
in0Mul44864 = tf.constant([[[[[0.6585], [0.0278]]]]])
in1Mul44864 = tf.constant([[[[[0.4607], [0.6544]]]]])
print (np.array2string(model.predict([in0Up_95573,in0Mul44864,in1Mul44864],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con15279.png')

LUp_95573 = up_sampling3D_layer([[[[[1.7271]], [[1.7141]], [[1.8278]], [[1.0871]]], [[[1.1467]], [[1.7639]], [[1.8332]], [[1.5237]]], [[[1.9623]], [[1.0819]], [[1.8042]], [[1.9119]]], [[[1.8109]], [[1.2116]], [[1.5483]], [[1.6545]]]]], 2, 1, 2, Up_95573), 
LThr59840 = thresholded_relu_layer(Up_95573, 1.2175833478757685, Thr59840), 
LLay28421 = layer_normalization_layer(Thr59840, 1, 1.5531721435786436, Lay28421), 
LMul44864 = multiply_layer([[[[[[0.6585], [0.0278]]]]], [[[[[0.4607], [0.6544]]]]]], Mul44864), 
LZer41951 = zero_padding3D_layer(Mul44864, 7, 0, 3, 0, 0, 0, Zer41951), 
LSub45333 = subtract_layer(Lay28421,Zer41951, Sub45333), 
LRes96063 = reshape_layer(Sub45333, [8, 4, 2], Res96063), 
LRes3833 = reshape_layer(Res96063, [8, 8], Res3833), 
LFla48340 = flatten_layer(Res3833, Fla48340), 
LRes50370 = reshape_layer(Fla48340, [64, 1], Res50370), 
LRes10793 = reshape_layer(Res50370, [64, 1, 1], Res10793), 
LRes68053 = reshape_layer(Res10793, [64, 1, 1, 1], Res68053), 
LCon15279 = conv3D_layer(Res68053, 63, 1, 1,[[[[[0.8562, 0.6871, 0.2551, 0.2943]]]], [[[[0.8306, 0.8178, 0.1558, 0.2816]]]], [[[[0.7126, 0.7848, 0.3735, 0.2916]]]], [[[[0.7082, 0.904, 0.1079, 0.998]]]], [[[[0.627, 0.1504, 0.7974, 0.4323]]]], [[[[0.9417, 0.8527, 0.7093, 0.1089]]]], [[[[0.4491, 0.335, 0.3898, 0.8582]]]], [[[[0.4856, 0.6159, 0.7432, 0.5039]]]], [[[[0.2314, 0.5834, 0.1068, 0.4651]]]], [[[[0.4948, 0.8976, 0.0635, 0.3424]]]], [[[[0.5144, 0.2458, 0.8887, 0.5566]]]], [[[[0.7338, 0.4694, 0.4712, 0.1472]]]], [[[[0.2135, 0.5158, 0.2634, 0.9102]]]], [[[[0.325, 0.1293, 0.3193, 0.1574]]]], [[[[0.6428, 0.6874, 0.76, 0.5118]]]], [[[[0.4945, 0.6164, 0.0709, 0.3203]]]], [[[[0.4609, 0.3704, 0.4785, 0.4613]]]], [[[[0.2263, 0.0508, 0.281, 0.5494]]]], [[[[0.5732, 0.3574, 0.4151, 0.8037]]]], [[[[0.9849, 0.7129, 0.7271, 0.1292]]]], [[[[0.2777, 0.0836, 0.3906, 0.2894]]]], [[[[0.9165, 0.2305, 0.659, 0.3945]]]], [[[[0.1865, 0.8691, 0.6779, 0.3177]]]], [[[[0.1889, 0.4882, 0.3919, 0.0642]]]], [[[[0.7114, 0.3875, 0.6784, 0.5671]]]], [[[[0.3804, 0.8269, 0.7149, 0.8572]]]], [[[[0.1467, 0.0506, 0.2435, 0.0674]]]], [[[[0.0777, 0.3492, 0.8375, 0.2699]]]], [[[[0.6341, 0.2509, 0.4895, 0.7151]]]], [[[[0.0927, 0.3976, 0.8475, 0.6454]]]], [[[[0.5468, 0.6539, 0.2031, 0.4898]]]], [[[[0.9592, 0.5205, 0.9012, 0.9109]]]], [[[[0.0764, 0.9808, 0.1858, 0.8712]]]], [[[[0.6188, 0.4948, 0.6209, 0.6142]]]], [[[[0.0576, 0.9738, 0.1344, 0.2139]]]], [[[[0.4564, 0.2189, 0.4205, 0.1371]]]], [[[[0.317, 0.4845, 0.9052, 0.0825]]]], [[[[0.0957, 0.5446, 0.7328, 0.2157]]]], [[[[0.0807, 0.8776, 0.2599, 0.8008]]]], [[[[0.6144, 0.3633, 0.3609, 0.145]]]], [[[[0.2248, 0.1911, 0.4403, 0.7198]]]], [[[[0.0904, 0.5126, 0.4257, 0.2981]]]], [[[[0.4059, 0.7441, 0.1703, 0.9576]]]], [[[[0.6367, 0.3205, 0.6342, 0.8381]]]], [[[[0.3553, 0.1339, 0.9323, 0.6152]]]], [[[[0.3387, 0.8536, 0.8382, 0.7515]]]], [[[[0.8719, 0.8138, 0.6151, 0.7232]]]], [[[[0.7501, 0.1846, 0.1088, 0.5834]]]], [[[[0.3011, 0.6926, 0.8825, 0.4214]]]], [[[[0.8616, 0.2473, 0.7982, 0.5013]]]], [[[[0.5311, 0.4482, 0.8589, 0.1272]]]], [[[[0.6987, 0.0933, 0.3109, 0.5675]]]], [[[[0.7962, 0.4953, 0.9797, 0.6948]]]], [[[[0.9618, 0.6189, 0.5582, 0.3499]]]], [[[[0.8183, 0.7999, 0.105, 0.8212]]]], [[[[0.3668, 0.0777, 0.3175, 0.2482]]]], [[[[0.0743, 0.9814, 0.2437, 0.2005]]]], [[[[0.5977, 0.9446, 0.9705, 0.1657]]]], [[[[0.2235, 0.3931, 0.4848, 0.1829]]]], [[[[0.0303, 0.9489, 0.3406, 0.4054]]]], [[[[0.9805, 0.1243, 0.9859, 0.9401]]]], [[[[0.6377, 0.3424, 0.6053, 0.9194]]]], [[[[0.9684, 0.1132, 0.1136, 0.3926]]]]],[0, 0, 0, 0], 7, 1, 4, false, 1, 1, 1, Con15279), 
exec_layers([LUp_95573,LThr59840,LLay28421,LMul44864,LZer41951,LSub45333,LRes96063,LRes3833,LFla48340,LRes50370,LRes10793,LRes68053,LCon15279],["Up_95573","Thr59840","Lay28421","Mul44864","Zer41951","Sub45333","Res96063","Res3833","Fla48340","Res50370","Res10793","Res68053","Con15279"],Con15279,"Con15279")

Actual (Unparsed): [[[[[0.1973509, 0.3881233, -0.6769116, -1.2065973]]]]]

Expected (Unparsed): [[[[[0.19735093034979265,0.3881232960498854,-0.6769115644101196,-1.2065972471475401]]]]]

Actual:   [[[[[0.1974, 0.3882, -0.6769, -1.2065]]]]]

Expected: [[[[[0.1974, 0.3882, -0.6769, -1.2065]]]]]