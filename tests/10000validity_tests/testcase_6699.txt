import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min26081 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in1Min26081 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in0Zer62730 = tf.keras.layers.Input(shape=([1, 4, 2]))
in0Con66967 = tf.keras.layers.Input(shape=([12, 3, 2]))
in0Con53877 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Min50097 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Min50097 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con8478 = tf.keras.layers.Input(shape=([1, 2, 2]))

Min26081 = keras.layers.Minimum(name = 'Min26081', )([in0Min26081,in1Min26081])
Res71770 = keras.layers.Reshape((1, 1, 2), name = 'Res71770', )(Min26081)
Zer48327 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer48327', )(Res71770)
Zer5072 = keras.layers.ZeroPadding2D(padding=((0, 0), (3, 0)), name = 'Zer5072', )(Zer48327)
Zer62730 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer62730', )(in0Zer62730)
Sub60188 = keras.layers.Subtract(name = 'Sub60188', )([Zer5072,Zer62730])
Res49849 = keras.layers.Reshape((3, 12), name = 'Res49849', )(Sub60188)
Glo99148 = keras.layers.GlobalAveragePooling1D(name = 'Glo99148', )(Res49849)
Res62295 = keras.layers.Reshape((12, 1), name = 'Res62295', )(Glo99148)
Res8252 = keras.layers.Reshape((12, 1, 1), name = 'Res8252', )(Res62295)
Zer32678 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer32678', )(Res8252)
Con66967 = keras.layers.Concatenate(axis=3, name = 'Con66967', )([Zer32678,in0Con66967])
Con53877 = keras.layers.Conv2D(3, (1, 1),strides=(1, 1), padding='same', dilation_rate=(1, 1), name = 'Con53877', )(in0Con53877)
Min50097 = keras.layers.Minimum(name = 'Min50097', )([in0Min50097,in1Min50097])
Zer49239 = keras.layers.ZeroPadding2D(padding=((0, 0), (1, 0)), name = 'Zer49239', )(Min50097)
Con8478 = keras.layers.Concatenate(axis=3, name = 'Con8478', )([Zer49239,in0Con8478])
Max18324 = keras.layers.Maximum(name = 'Max18324', )([Con53877,Con8478])
Zer54353 = keras.layers.ZeroPadding2D(padding=((11, 0), (1, 0)), name = 'Zer54353', )(Max18324)
Max1453 = keras.layers.Maximum(name = 'Max1453', )([Con66967,Zer54353])
model = tf.keras.models.Model(inputs=[in0Min26081,in1Min26081,in0Zer62730,in0Con66967,in0Con53877,in0Min50097,in1Min50097,in0Con8478], outputs=Max1453)
w = model.get_layer('Con53877').get_weights() 
w[0] = np.array([[[[0.2606, 0.8332, 0.5721], [0.2317, 0.8024, 0.1615]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con53877').set_weights(w) 
in0Min26081 = tf.constant([[[[[0.0129], [0.7241]]]]])
in1Min26081 = tf.constant([[[[[0.3784], [0.5042]]]]])
in0Zer62730 = tf.constant([[[[1.9331, 1.5588], [1.1491, 1.0621], [1.816, 1.5079], [1.956, 1.0949]]]])
in0Con66967 = tf.constant([[[[0.5333, 0.6997], [0.7094, 0.3466], [0.5392, 0.1807]], [[0.5868, 0.3532], [0.7786, 0.887], [0.9492, 0.5707]], [[0.9431, 0.9285], [0.4751, 0.7557], [0.6409, 0.2925]], [[0.8561, 0.5809], [0.2279, 0.2519], [0.0833, 0.956]], [[0.0219, 0.7605], [0.3544, 0.1432], [0.8522, 0.1395]], [[0.0724, 0.8222], [0.1287, 0.5697], [0.1578, 0.6142]], [[0.1356, 0.6503], [0.4282, 0.9552], [0.049, 0.5549]], [[0.1137, 0.6278], [0.2593, 0.1255], [0.6696, 0.7031]], [[0.9377, 0.5805], [0.9253, 0.1257], [0.429, 0.3783]], [[0.2649, 0.679], [0.9756, 0.1833], [0.9737, 0.6133]], [[0.4813, 0.8051], [0.1039, 0.7859], [0.5086, 0.4494]], [[0.2146, 0.7679], [0.4715, 0.6082], [0.1233, 0.004]]]])
in0Con53877 = tf.constant([[[[0.2051, 0.3234], [0.3048, 0.0329]]]])
in0Min50097 = tf.constant([[[[0.6919]]]])
in1Min50097 = tf.constant([[[[0.9637]]]])
in0Con8478 = tf.constant([[[[0.9766, 0.7289], [0.3104, 0.578]]]])
print (np.array2string(model.predict([in0Min26081,in1Min26081,in0Zer62730,in0Con66967,in0Con53877,in0Min50097,in1Min50097,in0Con8478],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max1453.png')

LMin26081 = minimum_layer([[[[[[0.0129], [0.7241]]]]], [[[[[0.3784], [0.5042]]]]]], Min26081), 
LRes71770 = reshape_layer(Min26081, [1, 1, 2], Res71770), 
LZer48327 = zero_padding2D_layer(Res71770, 1, 1, 1, 1, Zer48327), 
LZer5072 = zero_padding2D_layer(Zer48327, 0, 0, 3, 0, Zer5072), 
LZer62730 = zero_padding2D_layer([[[[1.9331, 1.5588], [1.1491, 1.0621], [1.816, 1.5079], [1.956, 1.0949]]]], 1, 1, 1, 1, Zer62730), 
LSub60188 = subtract_layer(Zer5072,Zer62730, Sub60188), 
LRes49849 = reshape_layer(Sub60188, [3, 12], Res49849), 
LGlo99148 = global_average_pooling1D_layer(Res49849, Glo99148), 
LRes62295 = reshape_layer(Glo99148, [12, 1], Res62295), 
LRes8252 = reshape_layer(Res62295, [12, 1, 1], Res8252), 
LZer32678 = zero_padding2D_layer(Res8252, 0, 0, 2, 0, Zer32678), 
LCon66967 = concatenate_layer([Zer32678,[[[[0.5333, 0.6997], [0.7094, 0.3466], [0.5392, 0.1807]], [[0.5868, 0.3532], [0.7786, 0.887], [0.9492, 0.5707]], [[0.9431, 0.9285], [0.4751, 0.7557], [0.6409, 0.2925]], [[0.8561, 0.5809], [0.2279, 0.2519], [0.0833, 0.956]], [[0.0219, 0.7605], [0.3544, 0.1432], [0.8522, 0.1395]], [[0.0724, 0.8222], [0.1287, 0.5697], [0.1578, 0.6142]], [[0.1356, 0.6503], [0.4282, 0.9552], [0.049, 0.5549]], [[0.1137, 0.6278], [0.2593, 0.1255], [0.6696, 0.7031]], [[0.9377, 0.5805], [0.9253, 0.1257], [0.429, 0.3783]], [[0.2649, 0.679], [0.9756, 0.1833], [0.9737, 0.6133]], [[0.4813, 0.8051], [0.1039, 0.7859], [0.5086, 0.4494]], [[0.2146, 0.7679], [0.4715, 0.6082], [0.1233, 0.004]]]]], 3, Con66967), 
LCon53877 = conv2D_layer([[[[0.2051, 0.3234], [0.3048, 0.0329]]]], 1, 1,[[[[0.2606, 0.8332, 0.5721], [0.2317, 0.8024, 0.1615]]]],[0, 0, 0], 1, 1, true, 1, 1, Con53877), 
LMin50097 = minimum_layer([[[[[0.6919]]]], [[[[0.9637]]]]], Min50097), 
LZer49239 = zero_padding2D_layer(Min50097, 0, 0, 1, 0, Zer49239), 
LCon8478 = concatenate_layer([Zer49239,[[[[0.9766, 0.7289], [0.3104, 0.578]]]]], 3, Con8478), 
LMax18324 = maximum_layer([Con53877,Con8478], Max18324), 
LZer54353 = zero_padding2D_layer(Max18324, 11, 0, 1, 0, Zer54353), 
LMax1453 = maximum_layer([Con66967,Zer54353], Max1453), 
exec_layers([LMin26081,LRes71770,LZer48327,LZer5072,LZer62730,LSub60188,LRes49849,LGlo99148,LRes62295,LRes8252,LZer32678,LCon66967,LCon53877,LMin50097,LZer49239,LCon8478,LMax18324,LZer54353,LMax1453],["Min26081","Res71770","Zer48327","Zer5072","Zer62730","Sub60188","Res49849","Glo99148","Res62295","Res8252","Zer32678","Con66967","Con53877","Min50097","Zer49239","Con8478","Max18324","Zer54353","Max1453"],Max1453,"Max1453")

Actual (Unparsed): [[[[0.0000000, 0.5333000, 0.6997000], [0.0000000, 0.7094000, 0.3466000], [0.0000000, 0.5392000, 0.1807000]], [[0.0000000, 0.5868000, 0.3532000], [0.0000000, 0.7786000, 0.8870000], [0.0000000, 0.9492000, 0.5707000]], [[0.0000000, 0.9431000, 0.9285000], [0.0000000, 0.4751000, 0.7557000], [0.0000000, 0.6409000, 0.2925000]], [[0.0000000, 0.8561000, 0.5809000], [0.0000000, 0.2279000, 0.2519000], [0.0000000, 0.0833000, 0.9560000]], [[0.0000000, 0.0219000, 0.7605000], [0.0000000, 0.3544000, 0.1432000], [0.0000000, 0.8522000, 0.1395000]], [[0.0000000, 0.0724000, 0.8222000], [0.0000000, 0.1287000, 0.5697000], [0.0000000, 0.1578000, 0.6142000]], [[0.0000000, 0.1356000, 0.6503000], [0.0000000, 0.4282000, 0.9552000], [0.0000000, 0.0490000, 0.5549000]], [[0.0000000, 0.1137000, 0.6278000], [0.0000000, 0.2593000, 0.1255000], [0.0000000, 0.6696000, 0.7031000]], [[0.0000000, 0.9377000, 0.5805000], [0.0000000, 0.9253000, 0.1257000], [0.0000000, 0.4290000, 0.3783000]], [[0.0000000, 0.2649000, 0.6790000], [0.0000000, 0.9756000, 0.1833000], [0.0000000, 0.9737000, 0.6133000]], [[0.0000000, 0.4813000, 0.8051000], [0.0000000, 0.1039000, 0.7859000], [0.0000000, 0.5086000, 0.4494000]], [[0.0000000, 0.2146000, 0.7679000], [0.1283808, 0.9766000, 0.7289000], [0.6919000, 0.3104000, 0.5780000]]]]

Expected (Unparsed): [[[[0,0.5333,0.6997],[0,0.7094,0.3466],[0,0.5392,0.1807]],[[0,0.5868,0.3532],[0,0.7786,0.887],[0,0.9492,0.5707]],[[0,0.9431,0.9285],[0,0.4751,0.7557],[0,0.6409,0.2925]],[[0,0.8561,0.5809],[0,0.2279,0.2519],[0,0.0833,0.956]],[[0,0.0219,0.7605],[0,0.3544,0.1432],[0,0.8522,0.1395]],[[0,0.0724,0.8222],[0,0.1287,0.5697],[0,0.1578,0.6142]],[[0,0.1356,0.6503],[0,0.4282,0.9552],[0,0.049,0.5549]],[[0,0.1137,0.6278],[0,0.2593,0.1255],[0,0.6696,0.7031]],[[0,0.9377,0.5805],[0,0.9253,0.1257],[0,0.429,0.3783]],[[0,0.2649,0.679],[0,0.9756,0.1833],[0,0.9737,0.6133]],[[0,0.4813,0.8051],[0,0.1039,0.7859],[0,0.5086,0.4494]],[[0,0.2146,0.7679],[0.12838084,0.9766,0.7289],[0.6919,0.3104,0.578]]]]

Actual:   [[[[0, 0.5333, 0.6997], [0, 0.7094, 0.3466], [0, 0.5392, 0.1807]], [[0, 0.5868, 0.3532], [0, 0.7786, 0.887], [0, 0.9492, 0.5707]], [[0, 0.9431, 0.9285], [0, 0.4751, 0.7557], [0, 0.6409, 0.2925]], [[0, 0.8561, 0.5809], [0, 0.2279, 0.2519], [0, 0.0833, 0.956]], [[0, 0.0219, 0.7605], [0, 0.3544, 0.1432], [0, 0.8522, 0.1395]], [[0, 0.0724, 0.8222], [0, 0.1287, 0.5697], [0, 0.1578, 0.6142]], [[0, 0.1356, 0.6503], [0, 0.4282, 0.9552], [0, 0.049, 0.5549]], [[0, 0.1137, 0.6278], [0, 0.2593, 0.1255], [0, 0.6696, 0.7031]], [[0, 0.9377, 0.5805], [0, 0.9253, 0.1257], [0, 0.429, 0.3783]], [[0, 0.2649, 0.679], [0, 0.9756, 0.1833], [0, 0.9737, 0.6133]], [[0, 0.4813, 0.8051], [0, 0.1039, 0.7859], [0, 0.5086, 0.4494]], [[0, 0.2146, 0.7679], [0.1284, 0.9766, 0.7289], [0.6919, 0.3104, 0.578]]]]

Expected: [[[[0, 0.5333, 0.6997], [0, 0.7094, 0.3466], [0, 0.5392, 0.1807]], [[0, 0.5868, 0.3532], [0, 0.7786, 0.887], [0, 0.9492, 0.5707]], [[0, 0.9431, 0.9285], [0, 0.4751, 0.7557], [0, 0.6409, 0.2925]], [[0, 0.8561, 0.5809], [0, 0.2279, 0.2519], [0, 0.0833, 0.956]], [[0, 0.0219, 0.7605], [0, 0.3544, 0.1432], [0, 0.8522, 0.1395]], [[0, 0.0724, 0.8222], [0, 0.1287, 0.5697], [0, 0.1578, 0.6142]], [[0, 0.1356, 0.6503], [0, 0.4282, 0.9552], [0, 0.049, 0.5549]], [[0, 0.1137, 0.6278], [0, 0.2593, 0.1255], [0, 0.6696, 0.7031]], [[0, 0.9377, 0.5805], [0, 0.9253, 0.1257], [0, 0.429, 0.3783]], [[0, 0.2649, 0.679], [0, 0.9756, 0.1833], [0, 0.9737, 0.6133]], [[0, 0.4813, 0.8051], [0, 0.1039, 0.7859], [0, 0.5086, 0.4494]], [[0, 0.2146, 0.7679], [0.1284, 0.9766, 0.7289], [0.6919, 0.3104, 0.578]]]]