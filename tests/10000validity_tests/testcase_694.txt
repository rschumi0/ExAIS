import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min51022 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in1Min51022 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in0Mul27230 = tf.keras.layers.Input(shape=([1, 1, 2]))
in1Mul27230 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Dot43285 = tf.keras.layers.Input(shape=([2]))
in1Dot43285 = tf.keras.layers.Input(shape=([2]))
in0Con92584 = tf.keras.layers.Input(shape=([7]))
in0Con75969 = tf.keras.layers.Input(shape=([8, 11]))
in0Sub7981 = tf.keras.layers.Input(shape=([2, 2, 3]))
in1Sub7981 = tf.keras.layers.Input(shape=([2, 2, 3]))
in0Min17770 = tf.keras.layers.Input(shape=([1, 2]))
in1Min17770 = tf.keras.layers.Input(shape=([1, 2]))
in0Con87107 = tf.keras.layers.Input(shape=([2, 10]))

Min51022 = keras.layers.Minimum(name = 'Min51022', )([in0Min51022,in1Min51022])
Res42275 = keras.layers.Reshape((1, 2, 2), name = 'Res42275', )(Min51022)
Res44668 = keras.layers.Reshape((1, 4), name = 'Res44668', )(Res42275)
Mul27230 = keras.layers.Multiply(name = 'Mul27230', )([in0Mul27230,in1Mul27230])
Res3927 = keras.layers.Reshape((1, 2), name = 'Res3927', )(Mul27230)
Dot63072 = keras.layers.Dot(axes=(1, 1), name = 'Dot63072', )([Res44668,Res3927])
Fla91618 = keras.layers.Flatten(name = 'Fla91618', )(Dot63072)
Dot43285 = keras.layers.Dot(axes=(1, 1), name = 'Dot43285', )([in0Dot43285,in1Dot43285])
Con92584 = keras.layers.Concatenate(axis=1, name = 'Con92584', )([Dot43285,in0Con92584])
Ave15510 = keras.layers.Average(name = 'Ave15510', )([Fla91618,Con92584])
Res14059 = keras.layers.Reshape((8, 1), name = 'Res14059', )(Ave15510)
Con75969 = keras.layers.Concatenate(axis=2, name = 'Con75969', )([Res14059,in0Con75969])
Sub7981 = keras.layers.Subtract(name = 'Sub7981', )([in0Sub7981,in1Sub7981])
Res55861 = keras.layers.Reshape((2, 2, 3, 1), name = 'Res55861', )(Sub7981)
Up_98367 = keras.layers.UpSampling3D(size=(1, 2, 1), name = 'Up_98367', )(Res55861)
Res7621 = keras.layers.Reshape((2, 4, 3), name = 'Res7621', )(Up_98367)
Res73205 = keras.layers.Reshape((2, 12), name = 'Res73205', )(Res7621)
Min17770 = keras.layers.Minimum(name = 'Min17770', )([in0Min17770,in1Min17770])
Zer65731 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer65731', )(Min17770)
Con87107 = keras.layers.Concatenate(axis=2, name = 'Con87107', )([Zer65731,in0Con87107])
Max64912 = keras.layers.Maximum(name = 'Max64912', )([Res73205,Con87107])
Zer11493 = keras.layers.ZeroPadding1D(padding=((6, 0)), name = 'Zer11493', )(Max64912)
Ave29292 = keras.layers.Average(name = 'Ave29292', )([Con75969,Zer11493])
model = tf.keras.models.Model(inputs=[in0Min51022,in1Min51022,in0Mul27230,in1Mul27230,in0Dot43285,in1Dot43285,in0Con92584,in0Con75969,in0Sub7981,in1Sub7981,in0Min17770,in1Min17770,in0Con87107], outputs=Ave29292)
in0Min51022 = tf.constant([[[[[0.0631, 0.0074]], [[0.4426, 0.3926]]]]])
in1Min51022 = tf.constant([[[[[0.5039, 0.1214]], [[0.2929, 0.8682]]]]])
in0Mul27230 = tf.constant([[[[0.2255, 0.1864]]]])
in1Mul27230 = tf.constant([[[[0.1658, 0.5412]]]])
in0Dot43285 = tf.constant([[0.0937, 0.067]])
in1Dot43285 = tf.constant([[0.9527, 0.4599]])
in0Con92584 = tf.constant([[0.162, 0.5934, 0.6546, 0.7502, 0.3565, 0.1579, 0.5216]])
in0Con75969 = tf.constant([[[0.6402, 0.0462, 0.9064, 0.8211, 0.2372, 0.1675, 0.6027, 0.7826, 0.6677, 0.6662, 0.395], [0.2956, 0.6454, 0.6691, 0.7272, 0.2488, 0.6161, 0.1797, 0.0532, 0.2716, 0.6027, 0.4902], [0.4183, 0.304, 0.2519, 0.4802, 0.6965, 0.4138, 0.776, 0.0137, 0.4848, 0.5701, 0.386], [0.9917, 0.7612, 0.7573, 0.3738, 0.8721, 0.6756, 0.8971, 0.2137, 0.6334, 0.2638, 0.5361], [0.9294, 0.2207, 0.4473, 0.1507, 0.4983, 0.4919, 0.4143, 0.224, 0.2499, 0.5567, 0.3655], [0.957, 0.0572, 0.1909, 0.6523, 0.5899, 0.6153, 0.6985, 0.5321, 0.8311, 0.2562, 0.1949], [0.1277, 0.8177, 0.5575, 0.7866, 0.6847, 0.3638, 0.469, 0.5368, 0.8931, 0.9923, 0.8026], [0.4217, 0.8631, 0.3934, 0.7103, 0.7064, 0.3285, 0.5007, 0.2083, 0.301, 0.785, 0.338]]])
in0Sub7981 = tf.constant([[[[0.3101, 0.7742, 0.8016], [0.3824, 0.6672, 0.4039]], [[0.743, 0.5905, 0.0329], [0.9292, 0.9477, 0.1922]]]])
in1Sub7981 = tf.constant([[[[0.7387, 0.8221, 0.8416], [0.0235, 0.3391, 0.757]], [[0.6115, 0.676, 0.2912], [0.454, 0.7351, 0.6211]]]])
in0Min17770 = tf.constant([[[0.4644, 0.0564]]])
in1Min17770 = tf.constant([[[0.0408, 0.882]]])
in0Con87107 = tf.constant([[[0.6017, 0.1964, 0.2618, 0.5734, 0.3223, 0.9803, 0.4552, 0.6045, 0.4744, 0.793], [0.4227, 0.1822, 0.677, 0.3234, 0.2781, 0.5206, 0.9635, 0.2719, 0.3035, 0.1125]]])
print (np.array2string(model.predict([in0Min51022,in1Min51022,in0Mul27230,in1Mul27230,in0Dot43285,in1Dot43285,in0Con92584,in0Con75969,in0Sub7981,in1Sub7981,in0Min17770,in1Min17770,in0Con87107],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave29292.png')

LMin51022 = minimum_layer([[[[[[0.0631, 0.0074]], [[0.4426, 0.3926]]]]], [[[[[0.5039, 0.1214]], [[0.2929, 0.8682]]]]]], Min51022), 
LRes42275 = reshape_layer(Min51022, [1, 2, 2], Res42275), 
LRes44668 = reshape_layer(Res42275, [1, 4], Res44668), 
LMul27230 = multiply_layer([[[[[0.2255, 0.1864]]]], [[[[0.1658, 0.5412]]]]], Mul27230), 
LRes3927 = reshape_layer(Mul27230, [1, 2], Res3927), 
LDot63072 = dot_layer(Res44668,Res3927, 1, 1, Dot63072), 
LFla91618 = flatten_layer(Dot63072, Fla91618), 
LDot43285 = dot_layer([[0.0937, 0.067]], [[0.9527, 0.4599]], 1, 1, Dot43285), 
LCon92584 = concatenate_layer([Dot43285,[[0.162, 0.5934, 0.6546, 0.7502, 0.3565, 0.1579, 0.5216]]], 1, Con92584), 
LAve15510 = average_layer([Fla91618,Con92584], Ave15510), 
LRes14059 = reshape_layer(Ave15510, [8, 1], Res14059), 
LCon75969 = concatenate_layer([Res14059,[[[0.6402, 0.0462, 0.9064, 0.8211, 0.2372, 0.1675, 0.6027, 0.7826, 0.6677, 0.6662, 0.395], [0.2956, 0.6454, 0.6691, 0.7272, 0.2488, 0.6161, 0.1797, 0.0532, 0.2716, 0.6027, 0.4902], [0.4183, 0.304, 0.2519, 0.4802, 0.6965, 0.4138, 0.776, 0.0137, 0.4848, 0.5701, 0.386], [0.9917, 0.7612, 0.7573, 0.3738, 0.8721, 0.6756, 0.8971, 0.2137, 0.6334, 0.2638, 0.5361], [0.9294, 0.2207, 0.4473, 0.1507, 0.4983, 0.4919, 0.4143, 0.224, 0.2499, 0.5567, 0.3655], [0.957, 0.0572, 0.1909, 0.6523, 0.5899, 0.6153, 0.6985, 0.5321, 0.8311, 0.2562, 0.1949], [0.1277, 0.8177, 0.5575, 0.7866, 0.6847, 0.3638, 0.469, 0.5368, 0.8931, 0.9923, 0.8026], [0.4217, 0.8631, 0.3934, 0.7103, 0.7064, 0.3285, 0.5007, 0.2083, 0.301, 0.785, 0.338]]]], 2, Con75969), 
LSub7981 = subtract_layer([[[[0.3101, 0.7742, 0.8016], [0.3824, 0.6672, 0.4039]], [[0.743, 0.5905, 0.0329], [0.9292, 0.9477, 0.1922]]]], [[[[0.7387, 0.8221, 0.8416], [0.0235, 0.3391, 0.757]], [[0.6115, 0.676, 0.2912], [0.454, 0.7351, 0.6211]]]], Sub7981), 
LRes55861 = reshape_layer(Sub7981, [2, 2, 3, 1], Res55861), 
LUp_98367 = up_sampling3D_layer(Res55861, 1, 2, 1, Up_98367), 
LRes7621 = reshape_layer(Up_98367, [2, 4, 3], Res7621), 
LRes73205 = reshape_layer(Res7621, [2, 12], Res73205), 
LMin17770 = minimum_layer([[[[0.4644, 0.0564]]], [[[0.0408, 0.882]]]], Min17770), 
LZer65731 = zero_padding1D_layer(Min17770, 1, 0, Zer65731), 
LCon87107 = concatenate_layer([Zer65731,[[[0.6017, 0.1964, 0.2618, 0.5734, 0.3223, 0.9803, 0.4552, 0.6045, 0.4744, 0.793], [0.4227, 0.1822, 0.677, 0.3234, 0.2781, 0.5206, 0.9635, 0.2719, 0.3035, 0.1125]]]], 2, Con87107), 
LMax64912 = maximum_layer([Res73205,Con87107], Max64912), 
LZer11493 = zero_padding1D_layer(Max64912, 6, 0, Zer11493), 
LAve29292 = average_layer([Con75969,Zer11493], Ave29292), 
exec_layers([LMin51022,LRes42275,LRes44668,LMul27230,LRes3927,LDot63072,LFla91618,LDot43285,LCon92584,LAve15510,LRes14059,LCon75969,LSub7981,LRes55861,LUp_98367,LRes7621,LRes73205,LMin17770,LZer65731,LCon87107,LMax64912,LZer11493,LAve29292],["Min51022","Res42275","Res44668","Mul27230","Res3927","Dot63072","Fla91618","Dot43285","Con92584","Ave15510","Res14059","Con75969","Sub7981","Res55861","Up_98367","Res7621","Res73205","Min17770","Zer65731","Con87107","Max64912","Zer11493","Ave29292"],Ave29292,"Ave29292")

Actual (Unparsed): [[[0.0306101, 0.3201000, 0.0231000, 0.4532000, 0.4105500, 0.1186000, 0.0837500, 0.3013500, 0.3913000, 0.3338500, 0.3331000, 0.1975000], [0.0420914, 0.1478000, 0.3227000, 0.3345500, 0.3636000, 0.1244000, 0.3080500, 0.0898500, 0.0266000, 0.1358000, 0.3013500, 0.2451000], [0.1484192, 0.2091500, 0.1520000, 0.1259500, 0.2401000, 0.3482500, 0.2069000, 0.3880000, 0.0068500, 0.2424000, 0.2850500, 0.1930000], [0.1638366, 0.4958500, 0.3806000, 0.3786500, 0.1869000, 0.4360500, 0.3378000, 0.4485500, 0.1068500, 0.3167000, 0.1319000, 0.2680500], [0.1902877, 0.4647000, 0.1103500, 0.2236500, 0.0753500, 0.2491500, 0.2459500, 0.2071500, 0.1120000, 0.1249500, 0.2783500, 0.1827500], [0.0965119, 0.4785000, 0.0286000, 0.0954500, 0.3261500, 0.2949500, 0.3076500, 0.3492500, 0.2660500, 0.4155500, 0.1281000, 0.0974500], [0.0431446, 0.0638500, 0.7097000, 0.3769500, 0.5242000, 0.6290500, 0.3613500, 0.7246500, 0.4960000, 0.7488000, 0.7333500, 0.7978000], [0.2060513, 0.2390500, 0.6429000, 0.2878000, 0.6936500, 0.5149000, 0.4018500, 0.5106500, 0.5859000, 0.3881000, 0.5442500, 0.2252500]]]

Expected (Unparsed): [[[0.030610116622500003,0.3201,0.0231,0.4532,0.41055,0.1186,0.08375,0.30135,0.3913,0.33385,0.3331,0.1975],[0.042091376952,0.1478,0.3227,0.33455,0.3636,0.1244,0.30805,0.08985,0.0266,0.1358,0.30135,0.2451],[0.148419167615,0.20915,0.152,0.12595,0.2401,0.34825,0.2069,0.388,0.00685,0.2424,0.28505,0.193],[0.16383662740799998,0.49585,0.3806,0.37865,0.1869,0.43605,0.3378,0.44855,0.10685,0.3167,0.1319,0.26805],[0.1902877289775,0.4647,0.11035,0.22365,0.07535,0.24915,0.24595,0.20715,0.112,0.12495,0.27835,0.18275],[0.096511914568,0.4785,0.0286,0.09545,0.32615,0.29495,0.30765,0.34925,0.26605,0.41555,0.1281,0.09745],[0.043144622385000005,0.06385,0.7097,0.37695,0.5242,0.62905,0.36135,0.72465,0.496,0.7488,0.73335,0.7978000000000001],[0.20605134059199998,0.23905,0.6429,0.2878,0.6936500000000001,0.5149,0.40185000000000004,0.51065,0.5859,0.3881,0.54425,0.22525]]]

Actual:   [[[0.0307, 0.3201, 0.0231, 0.4532, 0.4106, 0.1186, 0.0838, 0.3014, 0.3913, 0.3339, 0.3331, 0.1975], [0.0421, 0.1478, 0.3227, 0.3346, 0.3636, 0.1244, 0.3081, 0.0899, 0.0266, 0.1358, 0.3014, 0.2451], [0.1485, 0.2092, 0.152, 0.126, 0.2401, 0.3483, 0.2069, 0.388, 0.0069, 0.2424, 0.2851, 0.193], [0.1639, 0.4959, 0.3806, 0.3787, 0.1869, 0.4361, 0.3378, 0.4486, 0.1069, 0.3167, 0.1319, 0.2681], [0.1903, 0.4647, 0.1104, 0.2237, 0.0754, 0.2492, 0.246, 0.2072, 0.112, 0.125, 0.2784, 0.1828], [0.0966, 0.4785, 0.0286, 0.0955, 0.3262, 0.295, 0.3077, 0.3493, 0.2661, 0.4156, 0.1281, 0.0975], [0.0432, 0.0639, 0.7097, 0.377, 0.5242, 0.6291, 0.3614, 0.7247, 0.496, 0.7488, 0.7334, 0.7978], [0.2061, 0.2391, 0.6429, 0.2878, 0.6937, 0.5149, 0.4019, 0.5107, 0.5859, 0.3881, 0.5443, 0.2253]]]

Expected: [[[0.0307, 0.3201, 0.0231, 0.4532, 0.4106, 0.1186, 0.0838, 0.3014, 0.3913, 0.3339, 0.3331, 0.1975], [0.0421, 0.1478, 0.3227, 0.3346, 0.3636, 0.1244, 0.3081, 0.0899, 0.0266, 0.1358, 0.3014, 0.2451], [0.1485, 0.2092, 0.152, 0.126, 0.2401, 0.3483, 0.2069, 0.388, 0.0069, 0.2424, 0.2851, 0.193], [0.1639, 0.4959, 0.3806, 0.3787, 0.1869, 0.4361, 0.3378, 0.4486, 0.1069, 0.3167, 0.1319, 0.2681], [0.1903, 0.4647, 0.1104, 0.2237, 0.0754, 0.2492, 0.246, 0.2072, 0.112, 0.125, 0.2784, 0.1828], [0.0966, 0.4785, 0.0286, 0.0955, 0.3262, 0.295, 0.3077, 0.3493, 0.2661, 0.4156, 0.1281, 0.0975], [0.0432, 0.0639, 0.7097, 0.377, 0.5242, 0.6291, 0.3614, 0.7247, 0.496, 0.7488, 0.7334, 0.7979], [0.2061, 0.2391, 0.6429, 0.2878, 0.6937, 0.5149, 0.4019, 0.5107, 0.5859, 0.3881, 0.5443, 0.2253]]]