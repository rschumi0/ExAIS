import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sof59824 = tf.keras.layers.Input(shape=([1, 2]))
in0Con52034 = tf.keras.layers.Input(shape=([2, 7, 1]))
in0Max12658 = tf.keras.layers.Input(shape=([2, 1, 2]))

Sof59824 = keras.layers.Softmax(axis=1, name = 'Sof59824', input_shape=(1, 2))(in0Sof59824)
Den34678 = keras.layers.Dense(4,name = 'Den34678', )(Sof59824)
Res60651 = keras.layers.Reshape((1, 4, 1), name = 'Res60651', )(Den34678)
Zer28147 = keras.layers.ZeroPadding2D(padding=((1, 0), (3, 0)), name = 'Zer28147', )(Res60651)
Con52034 = keras.layers.Concatenate(axis=3, name = 'Con52034', )([Zer28147,in0Con52034])
Max12658 = keras.layers.MaxPool2D(pool_size=(2, 1), strides=(1, 6), padding='same', name = 'Max12658', )(in0Max12658)
Zer7563 = keras.layers.ZeroPadding2D(padding=((0, 0), (6, 0)), name = 'Zer7563', )(Max12658)
Add35723 = keras.layers.Add(name = 'Add35723', )([Con52034,Zer7563])
Up_89474 = keras.layers.UpSampling2D(size=(2, 1), name = 'Up_89474', )(Add35723)
model = tf.keras.models.Model(inputs=[in0Sof59824,in0Con52034,in0Max12658], outputs=Up_89474)
w = model.get_layer('Den34678').get_weights() 
w[0] = np.array([[0.4663, 0.8037, 0.8701, 0.5489], [0.3883, 0.2941, 0.7651, 0.8917]])
w[1] = np.array([0.8725, 0.2379, 0.7652, 0.736])
model.get_layer('Den34678').set_weights(w) 
in0Sof59824 = tf.constant([[[0.8399, 0.974]]])
in0Con52034 = tf.constant([[[[0.0188], [0.7544], [0.7441], [0.9333], [0.0343], [0.0118], [0.7373]], [[0.7619], [0.4183], [0.0994], [0.9661], [0.9615], [0.0896], [0.9754]]]])
in0Max12658 = tf.constant([[[[1.0784, 1.9358]], [[1.5276, 1.5148]]]])
print (np.array2string(model.predict([in0Sof59824,in0Con52034,in0Max12658],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Up_89474.png')

LSof59824 = softmax_layer([[[0.8399, 0.974]]], 1, Sof59824), 
LDen34678 = dense_layer(Sof59824, [[0.4663, 0.8037, 0.8701, 0.5489], [0.3883, 0.2941, 0.7651, 0.8917]],[0.8725, 0.2379, 0.7652, 0.736], Den34678), 
LRes60651 = reshape_layer(Den34678, [1, 4, 1], Res60651), 
LZer28147 = zero_padding2D_layer(Res60651, 1, 0, 3, 0, Zer28147), 
LCon52034 = concatenate_layer([Zer28147,[[[[0.0188], [0.7544], [0.7441], [0.9333], [0.0343], [0.0118], [0.7373]], [[0.7619], [0.4183], [0.0994], [0.9661], [0.9615], [0.0896], [0.9754]]]]], 3, Con52034), 
LMax12658 = max_pool2D_layer([[[[1.0784, 1.9358]], [[1.5276, 1.5148]]]], 2, 1, 1, 6, true, Max12658), 
LZer7563 = zero_padding2D_layer(Max12658, 0, 0, 6, 0, Zer7563), 
LAdd35723 = add_layer([Con52034,Zer7563], Add35723), 
LUp_89474 = up_sampling2D_layer(Add35723, 2, 1, Up_89474), 
exec_layers([LSof59824,LDen34678,LRes60651,LZer28147,LCon52034,LMax12658,LZer7563,LAdd35723,LUp_89474],["Sof59824","Den34678","Res60651","Zer28147","Con52034","Max12658","Zer7563","Add35723","Up_89474"],Up_89474,"Up_89474")

Actual (Unparsed): [[[[0.0000000, 0.0188000], [0.0000000, 0.7544000], [0.0000000, 0.7441000], [0.0000000, 0.9333000], [0.0000000, 0.0343000], [0.0000000, 0.0118000], [1.5276000, 2.6730999]], [[0.0000000, 0.0188000], [0.0000000, 0.7544000], [0.0000000, 0.7441000], [0.0000000, 0.9333000], [0.0000000, 0.0343000], [0.0000000, 0.0118000], [1.5276000, 2.6730999]], [[0.0000000, 0.7619000], [0.0000000, 0.4183000], [0.0000000, 0.0994000], [1.7271000, 0.9661000], [1.3357000, 0.9615000], [2.4004000, 0.0896000], [3.7042000, 2.4901999]], [[0.0000000, 0.7619000], [0.0000000, 0.4183000], [0.0000000, 0.0994000], [1.7271000, 0.9661000], [1.3357000, 0.9615000], [2.4004000, 0.0896000], [3.7042000, 2.4901999]]]]

Expected (Unparsed): [[[[0,0.0188],[0,0.7544],[0,0.7441],[0,0.9333],[0,0.0343],[0,0.0118],[1.5276,2.6731]],[[0,0.0188],[0,0.7544],[0,0.7441],[0,0.9333],[0,0.0343],[0,0.0118],[1.5276,2.6731]],[[0,0.7619],[0,0.4183],[0,0.0994],[1.7271,0.9661],[1.3356999999999999,0.9615],[2.4004,0.0896],[3.7042,2.4901999999999997]],[[0,0.7619],[0,0.4183],[0,0.0994],[1.7271,0.9661],[1.3356999999999999,0.9615],[2.4004,0.0896],[3.7042,2.4901999999999997]]]]

Actual:   [[[[0, 0.0188], [0, 0.7544], [0, 0.7441], [0, 0.9333], [0, 0.0343], [0, 0.0118], [1.5276, 2.6731]], [[0, 0.0188], [0, 0.7544], [0, 0.7441], [0, 0.9333], [0, 0.0343], [0, 0.0118], [1.5276, 2.6731]], [[0, 0.7619], [0, 0.4183], [0, 0.0994], [1.7271, 0.9661], [1.3357, 0.9615], [2.4004, 0.0896], [3.7042, 2.4902]], [[0, 0.7619], [0, 0.4183], [0, 0.0994], [1.7271, 0.9661], [1.3357, 0.9615], [2.4004, 0.0896], [3.7042, 2.4902]]]]

Expected: [[[[0, 0.0188], [0, 0.7544], [0, 0.7441], [0, 0.9333], [0, 0.0343], [0, 0.0118], [1.5276, 2.6731]], [[0, 0.0188], [0, 0.7544], [0, 0.7441], [0, 0.9333], [0, 0.0343], [0, 0.0118], [1.5276, 2.6731]], [[0, 0.7619], [0, 0.4183], [0, 0.0994], [1.7271, 0.9661], [1.3357, 0.9615], [2.4004, 0.0896], [3.7042, 2.4902]], [[0, 0.7619], [0, 0.4183], [0, 0.0994], [1.7271, 0.9661], [1.3357, 0.9615], [2.4004, 0.0896], [3.7042, 2.4902]]]]