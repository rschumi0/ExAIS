import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Up_35380 = tf.keras.layers.Input(shape=([4, 2, 2]))
in0Con65717 = tf.keras.layers.Input(shape=([4, 8, 1]))
in0Min69180 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in1Min69180 = tf.keras.layers.Input(shape=([1, 2, 1, 2]))
in0Ave335 = tf.keras.layers.Input(shape=([2, 1]))
in0Con82726 = tf.keras.layers.Input(shape=([1, 3]))
in0Con47657 = tf.keras.layers.Input(shape=([2, 6, 2]))
in0Sub38031 = tf.keras.layers.Input(shape=([2, 3, 2]))
in1Sub38031 = tf.keras.layers.Input(shape=([2, 3, 2]))

Up_35380 = keras.layers.UpSampling2D(size=(1, 2), name = 'Up_35380', )(in0Up_35380)
Zer43048 = keras.layers.ZeroPadding2D(padding=((0, 0), (4, 0)), name = 'Zer43048', )(Up_35380)
Con65717 = keras.layers.Concatenate(axis=3, name = 'Con65717', )([Zer43048,in0Con65717])
Min69180 = keras.layers.Minimum(name = 'Min69180', )([in0Min69180,in1Min69180])
Res12124 = keras.layers.Reshape((1, 2, 2), name = 'Res12124', )(Min69180)
Res2898 = keras.layers.Reshape((1, 4), name = 'Res2898', )(Res12124)
Ave335 = keras.layers.AveragePooling1D(pool_size=(2), name = 'Ave335', )(in0Ave335)
Con82726 = keras.layers.Concatenate(axis=2, name = 'Con82726', )([Ave335,in0Con82726])
Min83106 = keras.layers.Minimum(name = 'Min83106', )([Res2898,Con82726])
Res56921 = keras.layers.Reshape((1, 4, 1), name = 'Res56921', )(Min83106)
Zer24556 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer24556', )(Res56921)
Con47657 = keras.layers.Concatenate(axis=3, name = 'Con47657', )([Zer24556,in0Con47657])
Sub38031 = keras.layers.Subtract(name = 'Sub38031', )([in0Sub38031,in1Sub38031])
Sep68103 = keras.layers.SeparableConv2D(3, (1, 2),strides=(1, 1), padding='valid', name = 'Sep68103', )(Sub38031)
Zer83056 = keras.layers.ZeroPadding2D(padding=((0, 0), (4, 0)), name = 'Zer83056', )(Sep68103)
Max9395 = keras.layers.Maximum(name = 'Max9395', )([Con47657,Zer83056])
Zer56000 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer56000', )(Max9395)
Max46633 = keras.layers.Maximum(name = 'Max46633', )([Con65717,Zer56000])
model = tf.keras.models.Model(inputs=[in0Up_35380,in0Con65717,in0Min69180,in1Min69180,in0Ave335,in0Con82726,in0Con47657,in0Sub38031,in1Sub38031], outputs=Max46633)
w = model.get_layer('Sep68103').get_weights() 
w[0] = np.array([[[[0.2821], [0.1788]], [[0.2299], [0.1516]]]])
w[1] = np.array([[[[0.8727, 0.6342, 0.7612], [0.9108, 0.5531, 0.4199]]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep68103').set_weights(w) 
in0Up_35380 = tf.constant([[[[1.9854, 1.7782], [1.1184, 1.0169]], [[1.3085, 1.9308], [1.575, 1.4655]], [[1.9622, 1.6717], [1.3662, 1.9774]], [[1.7846, 1.0389], [1.3889, 1.3525]]]])
in0Con65717 = tf.constant([[[[0.0807], [0.1677], [0.7285], [0.5493], [0.2886], [0.6014], [0.099], [0.3517]], [[0.4252], [0.8818], [0.8466], [0.2473], [0.2554], [0.794], [0.3553], [0.6083]], [[0.25], [0.9614], [0.4807], [0.8424], [0.9207], [0.5193], [0.4025], [0.1371]], [[0.2071], [0.5768], [0.3894], [0.66], [0.8621], [0.6382], [0.6768], [0.1411]]]])
in0Min69180 = tf.constant([[[[[0.1421, 0.2371]], [[0.8794, 0.1366]]]]])
in1Min69180 = tf.constant([[[[[0.6467, 0.4769]], [[0.7366, 0.0438]]]]])
in0Ave335 = tf.constant([[[1.9943], [1.2336]]])
in0Con82726 = tf.constant([[[0.3626, 0.9915, 0.7594]]])
in0Con47657 = tf.constant([[[[0.0384, 0.0141], [0.6681, 0.3204], [0.6569, 0.217], [0.7163, 0.408], [0.0016, 0.8196], [0.2747, 0.7863]], [[0.8343, 0.0139], [0.9897, 0.714], [0.3943, 0.0302], [0.3534, 0.9021], [0.562, 0.4412], [0.5736, 0.5773]]]])
in0Sub38031 = tf.constant([[[[0.0836, 0.7041], [0.1237, 0.2971], [0.3414, 0.4064]], [[0.6484, 0.7486], [0.6741, 0.227], [0.1767, 0.919]]]])
in1Sub38031 = tf.constant([[[[0.6535, 0.3005], [0.7028, 0.4581], [0.3844, 0.0249]], [[0.7226, 0.8752], [0.1379, 0.6702], [0.1117, 0.3012]]]])
print (np.array2string(model.predict([in0Up_35380,in0Con65717,in0Min69180,in1Min69180,in0Ave335,in0Con82726,in0Con47657,in0Sub38031,in1Sub38031],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max46633.png')

LUp_35380 = up_sampling2D_layer([[[[1.9854, 1.7782], [1.1184, 1.0169]], [[1.3085, 1.9308], [1.575, 1.4655]], [[1.9622, 1.6717], [1.3662, 1.9774]], [[1.7846, 1.0389], [1.3889, 1.3525]]]], 1, 2, Up_35380), 
LZer43048 = zero_padding2D_layer(Up_35380, 0, 0, 4, 0, Zer43048), 
LCon65717 = concatenate_layer([Zer43048,[[[[0.0807], [0.1677], [0.7285], [0.5493], [0.2886], [0.6014], [0.099], [0.3517]], [[0.4252], [0.8818], [0.8466], [0.2473], [0.2554], [0.794], [0.3553], [0.6083]], [[0.25], [0.9614], [0.4807], [0.8424], [0.9207], [0.5193], [0.4025], [0.1371]], [[0.2071], [0.5768], [0.3894], [0.66], [0.8621], [0.6382], [0.6768], [0.1411]]]]], 3, Con65717), 
LMin69180 = minimum_layer([[[[[[0.1421, 0.2371]], [[0.8794, 0.1366]]]]], [[[[[0.6467, 0.4769]], [[0.7366, 0.0438]]]]]], Min69180), 
LRes12124 = reshape_layer(Min69180, [1, 2, 2], Res12124), 
LRes2898 = reshape_layer(Res12124, [1, 4], Res2898), 
LAve335 = average_pooling1D_layer([[[1.9943], [1.2336]]], 2, Ave335), 
LCon82726 = concatenate_layer([Ave335,[[[0.3626, 0.9915, 0.7594]]]], 2, Con82726), 
LMin83106 = minimum_layer([Res2898,Con82726], Min83106), 
LRes56921 = reshape_layer(Min83106, [1, 4, 1], Res56921), 
LZer24556 = zero_padding2D_layer(Res56921, 1, 0, 2, 0, Zer24556), 
LCon47657 = concatenate_layer([Zer24556,[[[[0.0384, 0.0141], [0.6681, 0.3204], [0.6569, 0.217], [0.7163, 0.408], [0.0016, 0.8196], [0.2747, 0.7863]], [[0.8343, 0.0139], [0.9897, 0.714], [0.3943, 0.0302], [0.3534, 0.9021], [0.562, 0.4412], [0.5736, 0.5773]]]]], 3, Con47657), 
LSub38031 = subtract_layer([[[[0.0836, 0.7041], [0.1237, 0.2971], [0.3414, 0.4064]], [[0.6484, 0.7486], [0.6741, 0.227], [0.1767, 0.919]]]], [[[[0.6535, 0.3005], [0.7028, 0.4581], [0.3844, 0.0249]], [[0.7226, 0.8752], [0.1379, 0.6702], [0.1117, 0.3012]]]], Sub38031), 
LSep68103 = separable_conv2D_layer(Sub38031, 1, 2,[[[[[0.2821], [0.1788]], [[0.2299], [0.1516]]]],[[[[0.8727, 0.6342, 0.7612], [0.9108, 0.5531, 0.4199]]]]],[0, 0, 0], 1, 1, false, Sep68103), 
LZer83056 = zero_padding2D_layer(Sep68103, 0, 0, 4, 0, Zer83056), 
LMax9395 = maximum_layer([Con47657,Zer83056], Max9395), 
LZer56000 = zero_padding2D_layer(Max9395, 2, 0, 2, 0, Zer56000), 
LMax46633 = maximum_layer([Con65717,Zer56000], Max46633), 
exec_layers([LUp_35380,LZer43048,LCon65717,LMin69180,LRes12124,LRes2898,LAve335,LCon82726,LMin83106,LRes56921,LZer24556,LCon47657,LSub38031,LSep68103,LZer83056,LMax9395,LZer56000,LMax46633],["Up_35380","Zer43048","Con65717","Min69180","Res12124","Res2898","Ave335","Con82726","Min83106","Res56921","Zer24556","Con47657","Sub38031","Sep68103","Zer83056","Max9395","Zer56000","Max46633"],Max46633,"Max46633")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0807000], [0.0000000, 0.0000000, 0.1677000], [0.0000000, 0.0000000, 0.7285000], [0.0000000, 0.0000000, 0.5493000], [1.9854000, 1.7782000, 0.2886000], [1.9854000, 1.7782000, 0.6014000], [1.1184000, 1.0168999, 0.0990000], [1.1184000, 1.0168999, 0.3517000]], [[0.0000000, 0.0000000, 0.4252000], [0.0000000, 0.0000000, 0.8818000], [0.0000000, 0.0000000, 0.8466000], [0.0000000, 0.0000000, 0.2473000], [1.3085001, 1.9308000, 0.2554000], [1.3085001, 1.9308000, 0.7940000], [1.5750000, 1.4655000, 0.3553000], [1.5750000, 1.4655000, 0.6083000]], [[0.0000000, 0.0000000, 0.2500000], [0.0000000, 0.0000000, 0.9614000], [0.0000000, 0.0384000, 0.4807000], [0.0000000, 0.6681000, 0.8424000], [1.9622000, 1.6717000, 0.9207000], [1.9622000, 1.6717000, 0.5193000], [1.3662000, 1.9773999, 0.8196000], [1.3662000, 1.9773999, 0.7863000]], [[0.0000000, 0.0000000, 0.2071000], [0.0000000, 0.0000000, 0.5768000], [0.0000000, 0.8343000, 0.3894000], [0.0000000, 0.9897000, 0.7140000], [1.7846000, 1.0389000, 0.8621000], [1.7846000, 1.0389000, 0.9021000], [1.3889000, 1.3525000, 0.6768000], [1.3889000, 1.3525000, 0.5773000]]]]

Expected (Unparsed): [[[[0,0,0.0807],[0,0,0.1677],[0,0,0.7285],[0,0,0.5493],[1.9854,1.7782,0.2886],[1.9854,1.7782,0.6014],[1.1184,1.0169,0.099],[1.1184,1.0169,0.3517]],[[0,0,0.4252],[0,0,0.8818],[0,0,0.8466],[0,0,0.2473],[1.3085,1.9308,0.2554],[1.3085,1.9308,0.794],[1.575,1.4655,0.3553],[1.575,1.4655,0.6083]],[[0,0,0.25],[0,0,0.9614],[0,0.0384,0.4807],[0,0.6681,0.8424],[1.9622,1.6717,0.9207],[1.9622,1.6717,0.5193],[1.3662,1.9774,0.8196],[1.3662,1.9774,0.7863]],[[0,0,0.2071],[0,0,0.5768],[0,0.8343,0.3894],[0,0.9897,0.714],[1.7846,1.0389,0.8621],[1.7846,1.0389,0.9021],[1.3889,1.3525,0.6768],[1.3889,1.3525,0.5773]]]]

Actual:   [[[[0, 0, 0.0807], [0, 0, 0.1677], [0, 0, 0.7285], [0, 0, 0.5493], [1.9854, 1.7782, 0.2886], [1.9854, 1.7782, 0.6014], [1.1184, 1.0169, 0.099], [1.1184, 1.0169, 0.3517]], [[0, 0, 0.4252], [0, 0, 0.8818], [0, 0, 0.8466], [0, 0, 0.2473], [1.3086, 1.9308, 0.2554], [1.3086, 1.9308, 0.794], [1.575, 1.4655, 0.3553], [1.575, 1.4655, 0.6083]], [[0, 0, 0.25], [0, 0, 0.9614], [0, 0.0384, 0.4807], [0, 0.6681, 0.8424], [1.9622, 1.6717, 0.9207], [1.9622, 1.6717, 0.5193], [1.3662, 1.9774, 0.8196], [1.3662, 1.9774, 0.7863]], [[0, 0, 0.2071], [0, 0, 0.5768], [0, 0.8343, 0.3894], [0, 0.9897, 0.714], [1.7846, 1.0389, 0.8621], [1.7846, 1.0389, 0.9021], [1.3889, 1.3525, 0.6768], [1.3889, 1.3525, 0.5773]]]]

Expected: [[[[0, 0, 0.0807], [0, 0, 0.1677], [0, 0, 0.7285], [0, 0, 0.5493], [1.9854, 1.7782, 0.2886], [1.9854, 1.7782, 0.6014], [1.1184, 1.0169, 0.099], [1.1184, 1.0169, 0.3517]], [[0, 0, 0.4252], [0, 0, 0.8818], [0, 0, 0.8466], [0, 0, 0.2473], [1.3085, 1.9308, 0.2554], [1.3085, 1.9308, 0.794], [1.575, 1.4655, 0.3553], [1.575, 1.4655, 0.6083]], [[0, 0, 0.25], [0, 0, 0.9614], [0, 0.0384, 0.4807], [0, 0.6681, 0.8424], [1.9622, 1.6717, 0.9207], [1.9622, 1.6717, 0.5193], [1.3662, 1.9774, 0.8196], [1.3662, 1.9774, 0.7863]], [[0, 0, 0.2071], [0, 0, 0.5768], [0, 0.8343, 0.3894], [0, 0.9897, 0.714], [1.7846, 1.0389, 0.8621], [1.7846, 1.0389, 0.9021], [1.3889, 1.3525, 0.6768], [1.3889, 1.3525, 0.5773]]]]