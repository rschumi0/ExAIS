import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer52487 = tf.keras.layers.Input(shape=([4, 2]))
in0Sub70269 = tf.keras.layers.Input(shape=([3]))
in1Sub70269 = tf.keras.layers.Input(shape=([3]))
in0Con42685 = tf.keras.layers.Input(shape=([11]))

Zer52487 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer52487', )(in0Zer52487)
Fla10771 = keras.layers.Flatten(name = 'Fla10771', )(Zer52487)
Sub70269 = keras.layers.Subtract(name = 'Sub70269', )([in0Sub70269,in1Sub70269])
Res18317 = keras.layers.Reshape((3, 1), name = 'Res18317', )(Sub70269)
Res85620 = keras.layers.Reshape((3, 1, 1), name = 'Res85620', )(Res18317)
Glo44734 = keras.layers.GlobalAveragePooling2D(name = 'Glo44734', )(Res85620)
Con42685 = keras.layers.Concatenate(axis=1, name = 'Con42685', )([Glo44734,in0Con42685])
Mul38993 = keras.layers.Multiply(name = 'Mul38993', )([Fla10771,Con42685])
Lea76113 = keras.layers.LeakyReLU(alpha=1.4753671304815767, name = 'Lea76113', )(Mul38993)
model = tf.keras.models.Model(inputs=[in0Zer52487,in0Sub70269,in1Sub70269,in0Con42685], outputs=Lea76113)
in0Zer52487 = tf.constant([[[1.6841, 1.9367], [1.4304, 1.256], [1.4904, 1.0056], [1.0597, 1.9541]]])
in0Sub70269 = tf.constant([[0.848, 0.4707, 0.9841]])
in1Sub70269 = tf.constant([[0.8302, 0.8416, 0.9791]])
in0Con42685 = tf.constant([[0.1789, 0.5466, 0.829, 0.8892, 0.4066, 0.9359, 0.8207, 0.8242, 0.7129, 0.8272, 0.8222]])
print (np.array2string(model.predict([in0Zer52487,in0Sub70269,in1Sub70269,in0Con42685],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Lea76113.png')

LZer52487 = zero_padding1D_layer([[[1.6841, 1.9367], [1.4304, 1.256], [1.4904, 1.0056], [1.0597, 1.9541]]], 1, 1, Zer52487), 
LFla10771 = flatten_layer(Zer52487, Fla10771), 
LSub70269 = subtract_layer([[0.848, 0.4707, 0.9841]], [[0.8302, 0.8416, 0.9791]], Sub70269), 
LRes18317 = reshape_layer(Sub70269, [3, 1], Res18317), 
LRes85620 = reshape_layer(Res18317, [3, 1, 1], Res85620), 
LGlo44734 = global_average_pooling2D_layer(Res85620, Glo44734), 
LCon42685 = concatenate_layer([Glo44734,[[0.1789, 0.5466, 0.829, 0.8892, 0.4066, 0.9359, 0.8207, 0.8242, 0.7129, 0.8272, 0.8222]]], 1, Con42685), 
LMul38993 = multiply_layer([Fla10771,Con42685], Mul38993), 
LLea76113 = leaky_relu_layer(Mul38993, 1.4753671304815767, Lea76113), 
exec_layers([LZer52487,LFla10771,LSub70269,LRes18317,LRes85620,LGlo44734,LCon42685,LMul38993,LLea76113],["Zer52487","Fla10771","Sub70269","Res18317","Res85620","Glo44734","Con42685","Mul38993","Lea76113"],Lea76113,"Lea76113")

Actual (Unparsed): [[-0.0000000, 0.0000000, 0.9205291, 1.6055243, 1.2719117, 0.5106896, 1.3948653, 0.8252959, 0.8734047, 1.3930779, 0.0000000, 0.0000000]]

Expected (Unparsed): [[-0.0,0.0,0.9205290599999999,1.6055243,1.2719116799999999,0.5106896000000001,1.3948653599999998,0.8252959200000001,0.8734047400000001,1.3930778899999998,0.0,0.0]]

Actual:   [[-0, 0, 0.9206, 1.6056, 1.272, 0.5107, 1.3949, 0.8253, 0.8735, 1.3931, 0, 0]]

Expected: [[-0, 0, 0.9206, 1.6056, 1.272, 0.5107, 1.3949, 0.8253, 0.8735, 1.3931, 0, 0]]