import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub30937 = tf.keras.layers.Input(shape=([3, 3, 3, 2]))
in1Sub30937 = tf.keras.layers.Input(shape=([3, 3, 3, 2]))
in0Mul19378 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))
in1Mul19378 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))

Sub30937 = keras.layers.Subtract(name = 'Sub30937', )([in0Sub30937,in1Sub30937])
Thr13077 = keras.layers.ThresholdedReLU(theta=9.91302259078056, name = 'Thr13077', )(Sub30937)
Mul19378 = keras.layers.Multiply(name = 'Mul19378', )([in0Mul19378,in1Mul19378])
Zer84477 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (1, 0)), name = 'Zer84477', )(Mul19378)
Add49575 = keras.layers.Add(name = 'Add49575', )([Thr13077,Zer84477])
model = tf.keras.models.Model(inputs=[in0Sub30937,in1Sub30937,in0Mul19378,in1Mul19378], outputs=Add49575)
in0Sub30937 = tf.constant([[[[[0.4938, 0.3309], [0.917, 0.2542], [0.8794, 0.0632]], [[0.1472, 0.0673], [0.9097, 0.7484], [0.9736, 0.9832]], [[0.3129, 0.2781], [0.7649, 0.7581], [0.4427, 0.62]]], [[[0.1895, 0.5323], [0.4334, 0.0103], [0.7759, 0.0646]], [[0.9041, 0.6733], [0.147, 0.5872], [0.5716, 0.1864]], [[0.6655, 0.0765], [0.7656, 0.6543], [0.749, 0.294]]], [[[0.5048, 0.1867], [0.1707, 0.3008], [0.4894, 0.7846]], [[0.2476, 0.2718], [0.0924, 0.629], [0.9382, 0.345]], [[0.1899, 0.9437], [0.5175, 0.9285], [0.4644, 0.0515]]]]])
in1Sub30937 = tf.constant([[[[[0.6817, 0.3588], [0.6306, 0.9857], [0.6442, 0.0531]], [[0.8911, 0.0286], [0.0287, 0.3329], [0.8106, 0.8514]], [[0.1403, 0.9075], [0.712, 0.5066], [0.499, 0.6019]]], [[[0.6449, 0.3853], [0.3591, 0.2897], [0.9552, 0.3924]], [[0.306, 0.1481], [0.491, 0.0177], [0.9188, 0.2912]], [[0.5232, 0.6816], [0.922, 0.5565], [0.5273, 0.7229]]], [[[0.2067, 0.7224], [0.0771, 0.6611], [0.5996, 0.7149]], [[0.2363, 0.9123], [0.278, 0.426], [0.9948, 0.9709]], [[0.2894, 0.6105], [0.4971, 0.1736], [0.7158, 0.9548]]]]])
in0Mul19378 = tf.constant([[[[[0.0356, 0.5606], [0.6469, 0.818]]]]])
in1Mul19378 = tf.constant([[[[[0.0401, 0.0159], [0.2697, 0.333]]]]])
print (np.array2string(model.predict([in0Sub30937,in1Sub30937,in0Mul19378,in1Mul19378],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add49575.png')

LSub30937 = subtract_layer([[[[[0.4938, 0.3309], [0.917, 0.2542], [0.8794, 0.0632]], [[0.1472, 0.0673], [0.9097, 0.7484], [0.9736, 0.9832]], [[0.3129, 0.2781], [0.7649, 0.7581], [0.4427, 0.62]]], [[[0.1895, 0.5323], [0.4334, 0.0103], [0.7759, 0.0646]], [[0.9041, 0.6733], [0.147, 0.5872], [0.5716, 0.1864]], [[0.6655, 0.0765], [0.7656, 0.6543], [0.749, 0.294]]], [[[0.5048, 0.1867], [0.1707, 0.3008], [0.4894, 0.7846]], [[0.2476, 0.2718], [0.0924, 0.629], [0.9382, 0.345]], [[0.1899, 0.9437], [0.5175, 0.9285], [0.4644, 0.0515]]]]], [[[[[0.6817, 0.3588], [0.6306, 0.9857], [0.6442, 0.0531]], [[0.8911, 0.0286], [0.0287, 0.3329], [0.8106, 0.8514]], [[0.1403, 0.9075], [0.712, 0.5066], [0.499, 0.6019]]], [[[0.6449, 0.3853], [0.3591, 0.2897], [0.9552, 0.3924]], [[0.306, 0.1481], [0.491, 0.0177], [0.9188, 0.2912]], [[0.5232, 0.6816], [0.922, 0.5565], [0.5273, 0.7229]]], [[[0.2067, 0.7224], [0.0771, 0.6611], [0.5996, 0.7149]], [[0.2363, 0.9123], [0.278, 0.426], [0.9948, 0.9709]], [[0.2894, 0.6105], [0.4971, 0.1736], [0.7158, 0.9548]]]]], Sub30937), 
LThr13077 = thresholded_relu_layer(Sub30937, 9.91302259078056, Thr13077), 
LMul19378 = multiply_layer([[[[[[0.0356, 0.5606], [0.6469, 0.818]]]]], [[[[[0.0401, 0.0159], [0.2697, 0.333]]]]]], Mul19378), 
LZer84477 = zero_padding3D_layer(Mul19378, 2, 0, 2, 0, 1, 0, Zer84477), 
LAdd49575 = add_layer([Thr13077,Zer84477], Add49575), 
exec_layers([LSub30937,LThr13077,LMul19378,LZer84477,LAdd49575],["Sub30937","Thr13077","Mul19378","Zer84477","Add49575"],Add49575,"Add49575")

Actual (Unparsed): [[[[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]]], [[[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0000000, 0.0000000], [0.0000000, 0.0000000]], [[0.0000000, 0.0000000], [0.0014276, 0.0089135], [0.1744689, 0.2723940]]]]]

Expected (Unparsed): [[[[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0]]],[[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0]]],[[[0,0],[0,0],[0,0]],[[0,0],[0,0],[0,0]],[[0,0],[0.0014275599999999998,0.008913540000000001],[0.17446893,0.272394]]]]]

Actual:   [[[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0.0015, 0.009], [0.1745, 0.2724]]]]]

Expected: [[[[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]], [[[0, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]], [[0, 0], [0.0015, 0.009], [0.1745, 0.2724]]]]]