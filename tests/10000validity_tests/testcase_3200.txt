import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Den96777 = tf.keras.layers.Input(shape=([2, 3]))
in0Con51760 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con1669 = tf.keras.layers.Input(shape=([2]))

Den96777 = keras.layers.Dense(2,name = 'Den96777', )(in0Den96777)
Fla80957 = keras.layers.Flatten(name = 'Fla80957', )(Den96777)
Con51760 = keras.layers.Conv2D(2, (1, 2),strides=(9, 1), padding='valid', dilation_rate=(1, 1), name = 'Con51760', )(in0Con51760)
Res32596 = keras.layers.Reshape((1, 2), name = 'Res32596', )(Con51760)
Glo53778 = keras.layers.GlobalMaxPool1D(name = 'Glo53778', )(Res32596)
Con1669 = keras.layers.Concatenate(axis=1, name = 'Con1669', )([Glo53778,in0Con1669])
Sub62532 = keras.layers.Subtract(name = 'Sub62532', )([Fla80957,Con1669])
Res7373 = keras.layers.Reshape((4, 1), name = 'Res7373', )(Sub62532)
Loc29369 = keras.layers.LocallyConnected1D(4, (2),strides=(1), name = 'Loc29369', )(Res7373)
Res79258 = keras.layers.Reshape((3, 4, 1), name = 'Res79258', )(Loc29369)
Res51765 = keras.layers.Reshape((3, 4, 1, 1), name = 'Res51765', )(Res79258)
Con706 = keras.layers.Conv3D(4, (1, 3, 1),strides=(1, 1, 1), padding='same', dilation_rate=(1, 1, 1), name = 'Con706', )(Res51765)
model = tf.keras.models.Model(inputs=[in0Den96777,in0Con51760,in0Con1669], outputs=Con706)
w = model.get_layer('Den96777').get_weights() 
w[0] = np.array([[0.9177, 0.7059], [0.3697, 0.7105], [0.7673, 0.8197]])
w[1] = np.array([0.4093, 0.906])
model.get_layer('Den96777').set_weights(w) 
w = model.get_layer('Con51760').get_weights() 
w[0] = np.array([[[[0.3177, 0.3035]], [[0.0881, 0.2279]]]])
w[1] = np.array([0, 0])
model.get_layer('Con51760').set_weights(w) 
w = model.get_layer('Loc29369').get_weights() 
w[0] = np.array([[[0.8, 0.201, 0.1255, 0.1116], [0.1231, 0.7654, 0.5657, 0.0442]], [[0.6284, 0.1752, 0.217, 0.9615], [0.2966, 0.45, 0.6394, 0.332]], [[0.2437, 0.1429, 0.02, 0.7769], [0.3358, 0.3433, 0.8121, 0.9658]]])
w[1] = np.array([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])
model.get_layer('Loc29369').set_weights(w) 
w = model.get_layer('Con706').get_weights() 
w[0] = np.array([[[[[0.4471, 0.8519, 0.2655, 0.6048]]], [[[0.3194, 0.1992, 0.9267, 0.255]]], [[[0.4055, 0.0627, 0.269, 0.4098]]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con706').set_weights(w) 
in0Den96777 = tf.constant([[[0.8518, 0.0719, 0.891], [0.6848, 0.2898, 0.0813]]])
in0Con51760 = tf.constant([[[[0.2574], [0.2253]]]])
in0Con1669 = tf.constant([[0.7406, 0.9188]])
print (np.array2string(model.predict([in0Den96777,in0Con51760,in0Con1669],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Con706.png')

LDen96777 = dense_layer([[[0.8518, 0.0719, 0.891], [0.6848, 0.2898, 0.0813]]], [[0.9177, 0.7059], [0.3697, 0.7105], [0.7673, 0.8197]],[0.4093, 0.906], Den96777), 
LFla80957 = flatten_layer(Den96777, Fla80957), 
LCon51760 = conv2D_layer([[[[0.2574], [0.2253]]]], 1, 2,[[[[0.3177, 0.3035]], [[0.0881, 0.2279]]]],[0, 0], 9, 1, false, 1, 1, Con51760), 
LRes32596 = reshape_layer(Con51760, [1, 2], Res32596), 
LGlo53778 = global_max_pool1D_layer(Res32596, Glo53778), 
LCon1669 = concatenate_layer([Glo53778,[[0.7406, 0.9188]]], 1, Con1669), 
LSub62532 = subtract_layer(Fla80957,Con1669, Sub62532), 
LRes7373 = reshape_layer(Sub62532, [4, 1], Res7373), 
LLoc29369 = locally_connected1D_layer(Res7373, 2,[[[0.8, 0.201, 0.1255, 0.1116], [0.1231, 0.7654, 0.5657, 0.0442]], [[0.6284, 0.1752, 0.217, 0.9615], [0.2966, 0.45, 0.6394, 0.332]], [[0.2437, 0.1429, 0.02, 0.7769], [0.3358, 0.3433, 0.8121, 0.9658]]],[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 1, Loc29369), 
LRes79258 = reshape_layer(Loc29369, [3, 4, 1], Res79258), 
LRes51765 = reshape_layer(Res79258, [3, 4, 1, 1], Res51765), 
LCon706 = conv3D_layer(Res51765, 1, 3, 1,[[[[[0.4471, 0.8519, 0.2655, 0.6048]]], [[[0.3194, 0.1992, 0.9267, 0.255]]], [[[0.4055, 0.0627, 0.269, 0.4098]]]]],[0, 0, 0, 0], 1, 1, 1, true, 1, 1, 1, Con706), 
exec_layers([LDen96777,LFla80957,LCon51760,LRes32596,LGlo53778,LCon1669,LSub62532,LRes7373,LLoc29369,LRes79258,LRes51765,LCon706],["Den96777","Fla80957","Con51760","Res32596","Glo53778","Con1669","Sub62532","Res7373","Loc29369","Res79258","Res51765","Con706"],Con706,"Con706")

Actual (Unparsed): [[[[[1.3615828, 0.4660393, 2.1223640, 1.2604107]], [[1.9928313, 1.9449348, 2.7089065, 2.1382835]], [[1.4830679, 2.0229701, 1.9557795, 1.7088067]], [[0.7417379, 1.2920101, 0.6588291, 0.9509038]]], [[[0.7161506, 0.3347479, 1.5439365, 0.6223837]], [[1.1674414, 1.4391129, 1.1484836, 1.3686597]], [[1.4126835, 0.7938344, 1.4670730, 1.4656608]], [[1.0554993, 1.0977844, 2.2711434, 1.0327660]]], [[[0.2465225, 0.0925414, 0.4232117, 0.2245115]], [[0.5137120, 0.4120019, 0.5595224, 0.5529110]], [[0.7776746, 0.4639593, 0.9439548, 0.7936019]], [[0.6190423, 0.7372709, 1.1638035, 0.6461174]]]]]

Expected (Unparsed): [[[[[1.3615827899017998,0.46603933847418594,2.1223640335581244,1.2604106765672938]],[[1.9928313241551918,1.9449347874366636,2.70890649720916,2.1382835088315417]],[[1.4830679203971378,2.022970105447297,1.9557795185892246,1.708806723938096]],[[0.7417379481218461,1.2920101331574805,0.6588290833548546,0.9509038009032119]]],[[[0.7161505892766902,0.33474786034983706,1.5439364784541416,0.6223836916781698]],[[1.1674413552707352,1.4391128579201684,1.1484835972447187,1.3686597338622777]],[[1.4126834648333984,0.7938343848031636,1.4670729394469195,1.4656607603757958]],[[1.0554993063050753,1.0977844191690322,2.271143395546476,1.032766009988221]]],[[[0.24652249947372834,0.09254140340493777,0.4232117313909986,0.22451146215115136]],[[0.5137119731756827,0.41200185069744355,0.5595224243116931,0.5529110059947162]],[[0.7776745917009433,0.46395927665302883,0.9439547395552741,0.7936018704761146]],[[0.6190422627602854,0.7372708707286252,1.1638035066984274,0.6461173694926015]]]]]

Actual:   [[[[[1.3616, 0.4661, 2.1224, 1.2605]], [[1.9929, 1.945, 2.709, 2.1383]], [[1.4831, 2.023, 1.9558, 1.7089]], [[0.7418, 1.2921, 0.6589, 0.951]]], [[[0.7162, 0.3348, 1.544, 0.6224]], [[1.1675, 1.4392, 1.1485, 1.3687]], [[1.4127, 0.7939, 1.4671, 1.4657]], [[1.0555, 1.0978, 2.2712, 1.0328]]], [[[0.2466, 0.0926, 0.4233, 0.2246]], [[0.5138, 0.4121, 0.5596, 0.553]], [[0.7777, 0.464, 0.944, 0.7937]], [[0.6191, 0.7373, 1.1639, 0.6462]]]]]

Expected: [[[[[1.3616, 0.4661, 2.1224, 1.2605]], [[1.9929, 1.945, 2.709, 2.1383]], [[1.4831, 2.023, 1.9558, 1.7089]], [[0.7418, 1.2921, 0.6589, 0.951]]], [[[0.7162, 0.3348, 1.544, 0.6224]], [[1.1675, 1.4392, 1.1485, 1.3687]], [[1.4127, 0.7939, 1.4671, 1.4657]], [[1.0555, 1.0978, 2.2712, 1.0328]]], [[[0.2466, 0.0926, 0.4233, 0.2246]], [[0.5138, 0.4121, 0.5596, 0.553]], [[0.7777, 0.464, 0.944, 0.7937]], [[0.6191, 0.7373, 1.1639, 0.6462]]]]]