import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0ReL11927 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))
in0Dot25598 = tf.keras.layers.Input(shape=([3, 2]))
in1Dot25598 = tf.keras.layers.Input(shape=([3, 2]))
in0Glo59686 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con27992 = tf.keras.layers.Input(shape=([3]))

ReL11927 = keras.layers.ReLU(max_value=9.117553419486, negative_slope=7.575280015212986, threshold=9.367248962113543, name = 'ReL11927', input_shape=(1, 1, 2, 2))(in0ReL11927)
Res95263 = keras.layers.Reshape((1, 1, 4), name = 'Res95263', )(ReL11927)
Res64957 = keras.layers.Reshape((1, 4), name = 'Res64957', )(Res95263)
Fla29598 = keras.layers.Flatten(name = 'Fla29598', )(Res64957)
Dot25598 = keras.layers.Dot(axes=(2, 2), name = 'Dot25598', )([in0Dot25598,in1Dot25598])
Res56190 = keras.layers.Reshape((3, 3, 1), name = 'Res56190', )(Dot25598)
Glo59686 = keras.layers.GlobalAveragePooling2D(name = 'Glo59686', )(in0Glo59686)
Res76330 = keras.layers.Reshape((1, 1), name = 'Res76330', )(Glo59686)
Res24297 = keras.layers.Reshape((1, 1, 1), name = 'Res24297', )(Res76330)
Cro13843 = keras.layers.Cropping2D(cropping=((0, 0), (0, 0)), name = 'Cro13843', )(Res24297)
Zer36939 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer36939', )(Cro13843)
Sub27650 = keras.layers.Subtract(name = 'Sub27650', )([Res56190,Zer36939])
Glo47937 = keras.layers.GlobalAveragePooling2D(name = 'Glo47937', )(Sub27650)
Con27992 = keras.layers.Concatenate(axis=1, name = 'Con27992', )([Glo47937,in0Con27992])
Add96815 = keras.layers.Add(name = 'Add96815', )([Fla29598,Con27992])
model = tf.keras.models.Model(inputs=[in0ReL11927,in0Dot25598,in1Dot25598,in0Glo59686,in0Con27992], outputs=Add96815)
in0ReL11927 = tf.constant([[[[[0.3291, 0.9766], [0.4095, 0.9777]]]]])
in0Dot25598 = tf.constant([[[0.0074, 0.4432], [0.5218, 0.4088], [0.1488, 0.2086]]])
in1Dot25598 = tf.constant([[[0.6638, 0.0121], [0.0666, 0.4789], [0.8833, 0.6827]]])
in0Glo59686 = tf.constant([[[[1.2775], [1.9484]]]])
in0Con27992 = tf.constant([[0.0765, 0.0904, 0.3567]])
print (np.array2string(model.predict([in0ReL11927,in0Dot25598,in1Dot25598,in0Glo59686,in0Con27992],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add96815.png')

LReL11927 = relu_layer([[[[[0.3291, 0.9766], [0.4095, 0.9777]]]]], 9.117553419486, 7.575280015212986, 9.367248962113543, ReL11927), 
LRes95263 = reshape_layer(ReL11927, [1, 1, 4], Res95263), 
LRes64957 = reshape_layer(Res95263, [1, 4], Res64957), 
LFla29598 = flatten_layer(Res64957, Fla29598), 
LDot25598 = dot_layer([[[0.0074, 0.4432], [0.5218, 0.4088], [0.1488, 0.2086]]], [[[0.6638, 0.0121], [0.0666, 0.4789], [0.8833, 0.6827]]], 2, 2, Dot25598), 
LRes56190 = reshape_layer(Dot25598, [3, 3, 1], Res56190), 
LGlo59686 = global_average_pooling2D_layer([[[[1.2775], [1.9484]]]], Glo59686), 
LRes76330 = reshape_layer(Glo59686, [1, 1], Res76330), 
LRes24297 = reshape_layer(Res76330, [1, 1, 1], Res24297), 
LCro13843 = cropping2D_layer(Res24297, 0, 0, 0, 0, Cro13843), 
LZer36939 = zero_padding2D_layer(Cro13843, 2, 0, 2, 0, Zer36939), 
LSub27650 = subtract_layer(Res56190,Zer36939, Sub27650), 
LGlo47937 = global_average_pooling2D_layer(Sub27650, Glo47937), 
LCon27992 = concatenate_layer([Glo47937,[[0.0765, 0.0904, 0.3567]]], 1, Con27992), 
LAdd96815 = add_layer([Fla29598,Con27992], Add96815), 
exec_layers([LReL11927,LRes95263,LRes64957,LFla29598,LDot25598,LRes56190,LGlo59686,LRes76330,LRes24297,LCro13843,LZer36939,LSub27650,LGlo47937,LCon27992,LAdd96815],["ReL11927","Res95263","Res64957","Fla29598","Dot25598","Res56190","Glo59686","Res76330","Res24297","Cro13843","Zer36939","Sub27650","Glo47937","Con27992","Add96815"],Add96815,"Add96815")

Actual (Unparsed): [[-68.3858464, -63.4850155, -67.7670567, -63.1964826]]

Expected (Unparsed): [[-68.38584644943893,-63.4850153973663,-67.76705669399358,-63.19648258934957]]

Actual:   [[-68.3858, -63.485, -67.767, -63.1964]]

Expected: [[-68.3858, -63.485, -67.767, -63.1964]]