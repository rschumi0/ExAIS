import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave26047 = tf.keras.layers.Input(shape=([1, 1]))
in0Con17339 = tf.keras.layers.Input(shape=([4, 8, 1]))
in0Up_16067 = tf.keras.layers.Input(shape=([2, 4, 2]))
in0Con17250 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Up_529 = tf.keras.layers.Input(shape=([2, 4]))
in0Con81923 = tf.keras.layers.Input(shape=([4, 2]))
in0Con8303 = tf.keras.layers.Input(shape=([58]))

Ave26047 = keras.layers.AveragePooling1D(pool_size=(1), name = 'Ave26047', )(in0Ave26047)
Con76545 = keras.layers.Conv1D(3, (1),strides=(1), padding='valid', dilation_rate=(1), name = 'Con76545', )(Ave26047)
Res43511 = keras.layers.Reshape((1, 3, 1), name = 'Res43511', )(Con76545)
Zer88890 = keras.layers.ZeroPadding2D(padding=((3, 0), (5, 0)), name = 'Zer88890', )(Res43511)
Con17339 = keras.layers.Concatenate(axis=3, name = 'Con17339', )([Zer88890,in0Con17339])
Up_16067 = keras.layers.UpSampling2D(size=(2, 2), name = 'Up_16067', )(in0Up_16067)
Sub55624 = keras.layers.Subtract(name = 'Sub55624', )([Con17339,Up_16067])
Res30770 = keras.layers.Reshape((4, 16), name = 'Res30770', )(Sub55624)
Fla91842 = keras.layers.Flatten(name = 'Fla91842', )(Res30770)
Con17250 = keras.layers.Conv2DTranspose(3, (1, 1),strides=(1, 1), padding='same', name = 'Con17250', )(in0Con17250)
Res80912 = keras.layers.Reshape((1, 6), name = 'Res80912', )(Con17250)
Zer65446 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer65446', )(Res80912)
Up_529 = keras.layers.UpSampling1D(size=(2), name = 'Up_529', )(in0Up_529)
Con81923 = keras.layers.Concatenate(axis=2, name = 'Con81923', )([Up_529,in0Con81923])
Min17737 = keras.layers.Minimum(name = 'Min17737', )([Zer65446,Con81923])
Glo47738 = keras.layers.GlobalMaxPool1D(name = 'Glo47738', )(Min17737)
Sof93800 = keras.layers.Softmax(axis=1, name = 'Sof93800', )(Glo47738)
Con8303 = keras.layers.Concatenate(axis=1, name = 'Con8303', )([Sof93800,in0Con8303])
Mul93971 = keras.layers.Multiply(name = 'Mul93971', )([Fla91842,Con8303])
model = tf.keras.models.Model(inputs=[in0Ave26047,in0Con17339,in0Up_16067,in0Con17250,in0Up_529,in0Con81923,in0Con8303], outputs=Mul93971)
w = model.get_layer('Con76545').get_weights() 
w[0] = np.array([[[0.3419, 0.5235, 0.4244]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con76545').set_weights(w) 
w = model.get_layer('Con17250').get_weights() 
w[0] = np.array([[[[0.1288], [0.9671], [0.2913]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con17250').set_weights(w) 
in0Ave26047 = tf.constant([[[1.6975]]])
in0Con17339 = tf.constant([[[[0.4778], [0.0623], [0.5197], [0.703], [0.4337], [0.6082], [0.8073], [0.7167]], [[0.8536], [0.7673], [0.2712], [0.9358], [0.9925], [0.5719], [0.3347], [0.0501]], [[0.5769], [0.2224], [0.1412], [0.3085], [0.4943], [0.0619], [0.8294], [0.6799]], [[0.0949], [0.6327], [0.1306], [0.4905], [0.5166], [0.0348], [0.264], [0.735]]]])
in0Up_16067 = tf.constant([[[[1.1927, 1.0842], [1.906, 1.6159], [1.3666, 1.1195], [1.6625, 1.5024]], [[1.7527, 1.0313], [1.5092, 1.5911], [1.2482, 1.5665], [1.742, 1.1986]]]])
in0Con17250 = tf.constant([[[[0.0779], [0.0558]]]])
in0Up_529 = tf.constant([[[1.2343, 1.9056, 1.7841, 1.1202], [1.817, 1.4794, 1.556, 1.0945]]])
in0Con81923 = tf.constant([[[0.7904, 0.1179], [0.9795, 0.2043], [0.1848, 0.8713], [0.8086, 0.7182]]])
in0Con8303 = tf.constant([[0.369, 0.449, 0.5638, 0.1612, 0.7559, 0.017, 0.9024, 0.166, 0.4312, 0.3435, 0.9957, 0.6649, 0.3549, 0.2146, 0.3209, 0.1564, 0.4195, 0.532, 0.5961, 0.2513, 0.6046, 0.9007, 0.3, 0.3902, 0.8381, 0.5487, 0.2072, 0.0827, 0.7834, 0.7718, 0.9254, 0.9648, 0.5028, 0.8109, 0.6732, 0.8219, 0.9661, 0.311, 0.5661, 0.6114, 0.6714, 0.2843, 0.4972, 0.4326, 0.2219, 0.8094, 0.2867, 0.3377, 0.5669, 0.5313, 0.1577, 0.8551, 0.7526, 0.3965, 0.748, 0.1069, 0.4533, 0.9595]])
print (np.array2string(model.predict([in0Ave26047,in0Con17339,in0Up_16067,in0Con17250,in0Up_529,in0Con81923,in0Con8303],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul93971.png')

LAve26047 = average_pooling1D_layer([[[1.6975]]], 1, Ave26047), 
LCon76545 = conv1D_layer(Ave26047, 1,[[[0.3419, 0.5235, 0.4244]]],[0, 0, 0], 1, false, 1, Con76545), 
LRes43511 = reshape_layer(Con76545, [1, 3, 1], Res43511), 
LZer88890 = zero_padding2D_layer(Res43511, 3, 0, 5, 0, Zer88890), 
LCon17339 = concatenate_layer([Zer88890,[[[[0.4778], [0.0623], [0.5197], [0.703], [0.4337], [0.6082], [0.8073], [0.7167]], [[0.8536], [0.7673], [0.2712], [0.9358], [0.9925], [0.5719], [0.3347], [0.0501]], [[0.5769], [0.2224], [0.1412], [0.3085], [0.4943], [0.0619], [0.8294], [0.6799]], [[0.0949], [0.6327], [0.1306], [0.4905], [0.5166], [0.0348], [0.264], [0.735]]]]], 3, Con17339), 
LUp_16067 = up_sampling2D_layer([[[[1.1927, 1.0842], [1.906, 1.6159], [1.3666, 1.1195], [1.6625, 1.5024]], [[1.7527, 1.0313], [1.5092, 1.5911], [1.2482, 1.5665], [1.742, 1.1986]]]], 2, 2, Up_16067), 
LSub55624 = subtract_layer(Con17339,Up_16067, Sub55624), 
LRes30770 = reshape_layer(Sub55624, [4, 16], Res30770), 
LFla91842 = flatten_layer(Res30770, Fla91842), 
LCon17250 = conv2D_transpose_layer([[[[0.0779], [0.0558]]]], 1, 1,[[[[0.1288], [0.9671], [0.2913]]]],[0, 0, 0], 1, 1, true, Con17250), 
LRes80912 = reshape_layer(Con17250, [1, 6], Res80912), 
LZer65446 = zero_padding1D_layer(Res80912, 3, 0, Zer65446), 
LUp_529 = up_sampling1D_layer([[[1.2343, 1.9056, 1.7841, 1.1202], [1.817, 1.4794, 1.556, 1.0945]]], 2, Up_529), 
LCon81923 = concatenate_layer([Up_529,[[[0.7904, 0.1179], [0.9795, 0.2043], [0.1848, 0.8713], [0.8086, 0.7182]]]], 2, Con81923), 
LMin17737 = minimum_layer([Zer65446,Con81923], Min17737), 
LGlo47738 = global_max_pool1D_layer(Min17737, Glo47738), 
LSof93800 = softmax_layer(Glo47738, 1, Sof93800), 
LCon8303 = concatenate_layer([Sof93800,[[0.369, 0.449, 0.5638, 0.1612, 0.7559, 0.017, 0.9024, 0.166, 0.4312, 0.3435, 0.9957, 0.6649, 0.3549, 0.2146, 0.3209, 0.1564, 0.4195, 0.532, 0.5961, 0.2513, 0.6046, 0.9007, 0.3, 0.3902, 0.8381, 0.5487, 0.2072, 0.0827, 0.7834, 0.7718, 0.9254, 0.9648, 0.5028, 0.8109, 0.6732, 0.8219, 0.9661, 0.311, 0.5661, 0.6114, 0.6714, 0.2843, 0.4972, 0.4326, 0.2219, 0.8094, 0.2867, 0.3377, 0.5669, 0.5313, 0.1577, 0.8551, 0.7526, 0.3965, 0.748, 0.1069, 0.4533, 0.9595]]], 1, Con8303), 
LMul93971 = multiply_layer([Fla91842,Con8303], Mul93971), 
exec_layers([LAve26047,LCon76545,LRes43511,LZer88890,LCon17339,LUp_16067,LSub55624,LRes30770,LFla91842,LCon17250,LRes80912,LZer65446,LUp_529,LCon81923,LMin17737,LGlo47738,LSof93800,LCon8303,LMul93971],["Ave26047","Con76545","Res43511","Zer88890","Con17339","Up_16067","Sub55624","Res30770","Fla91842","Con17250","Res80912","Zer65446","Up_529","Con81923","Min17737","Glo47738","Sof93800","Con8303","Mul93971"],Mul93971,"Mul93971")

Actual (Unparsed): [[-0.1946144, -0.1056243, -0.1970936, -0.1662708, -0.3249716, -0.1799846, -0.7033140, -0.4098921, -0.7704891, -0.1105510, -1.0330130, -0.0086921, -1.5002400, -0.1153866, -0.7168700, -0.2698879, -1.1875714, -0.1533259, -0.4232892, -0.0680067, -0.6116354, -0.2103111, -0.7995670, -0.3618132, -0.8146302, -0.0319151, -0.8262464, -0.4932233, -0.4987500, -0.4556365, -1.3933413, -0.7968770, -0.3631594, -0.0375789, -1.3730652, -0.6243090, -1.3966137, -1.3988635, -0.7588257, -1.0400603, -0.8402883, -0.8812411, -1.2058860, -0.4679306, -0.9861462, -0.2257289, -1.1695788, -0.1474664, -0.8714424, -0.4050866, -0.3889241, -0.3226268, -0.4326876, -0.4932109, -0.8555655, -0.5847488, -0.1968412, -0.8977694, -0.5026050, -0.6073190, -0.6383124, -0.0999087, -0.4630827, -0.4448242]]

Expected (Unparsed): [[-0.19461436542193833,-0.10562430101304685,-0.19709359891193481,-0.1662707530826296,-0.32497160455524815,-0.17998455043886544,-0.703314,-0.4098921,-0.7704890799999999,-0.11055096,-1.03301294,-0.0086921,-1.50024,-0.11538659999999999,-0.7168700000000001,-0.26988795,-1.1875713900000002,-0.15332594000000002,-0.42328923,-0.06800674000000002,-0.6116354,-0.21031108,-0.7995669999999999,-0.3618132,-0.8146302599999999,-0.031915099999999974,-0.8262463600000001,-0.49322331999999997,-0.49875,-0.45563654,-1.39334125,-0.7968770099999999,-0.36315944,-0.03757888000000001,-1.37306518,-0.6243090200000002,-1.3966136800000002,-1.39886352,-0.7588257600000001,-1.04006034,-0.84028824,-0.88124118,-1.20588602,-0.4679306,-0.9861462000000001,-0.22572888000000008,-1.1695788,-0.14746641000000005,-0.8714424399999999,-0.40508664000000005,-0.38892413,-0.3226268400000001,-0.43268764000000004,-0.49321085,-0.85556548,-0.58474878,-0.19684114,-0.8977694900000001,-0.50260490685,-0.6073190500000001,-0.638312345,-0.09990874000000001,-0.4630826672999999,-0.4448242000000001]]

Actual:   [[-0.1946, -0.1056, -0.197, -0.1662, -0.3249, -0.1799, -0.7033, -0.4098, -0.7704, -0.1105, -1.033, -0.0086, -1.5002, -0.1153, -0.7168, -0.2698, -1.1875, -0.1533, -0.4232, -0.068, -0.6116, -0.2103, -0.7995, -0.3618, -0.8146, -0.0319, -0.8262, -0.4932, -0.4987, -0.4556, -1.3933, -0.7968, -0.3631, -0.0375, -1.373, -0.6243, -1.3966, -1.3988, -0.7588, -1.04, -0.8402, -0.8812, -1.2058, -0.4679, -0.9861, -0.2257, -1.1695, -0.1474, -0.8714, -0.405, -0.3889, -0.3226, -0.4326, -0.4932, -0.8555, -0.5847, -0.1968, -0.8977, -0.5026, -0.6073, -0.6383, -0.0999, -0.463, -0.4448]]

Expected: [[-0.1946, -0.1056, -0.197, -0.1662, -0.3249, -0.1799, -0.7033, -0.4098, -0.7704, -0.1105, -1.033, -0.0086, -1.5002, -0.1153, -0.7168, -0.2698, -1.1875, -0.1533, -0.4232, -0.068, -0.6116, -0.2103, -0.7995, -0.3618, -0.8146, -0.0319, -0.8262, -0.4932, -0.4987, -0.4556, -1.3933, -0.7968, -0.3631, -0.0375, -1.373, -0.6243, -1.3966, -1.3988, -0.7588, -1.04, -0.8402, -0.8812, -1.2058, -0.4679, -0.9861, -0.2257, -1.1695, -0.1474, -0.8714, -0.405, -0.3889, -0.3226, -0.4326, -0.4932, -0.8555, -0.5847, -0.1968, -0.8977, -0.5026, -0.6073, -0.6383, -0.0999, -0.463, -0.4448]]