import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sof99494 = tf.keras.layers.Input(shape=([2, 2]))
in0Sub85579 = tf.keras.layers.Input(shape=([2, 2, 3, 3]))
in1Sub85579 = tf.keras.layers.Input(shape=([2, 2, 3, 3]))
in0Con75507 = tf.keras.layers.Input(shape=([3]))

Sof99494 = keras.layers.Softmax(axis=1, name = 'Sof99494', input_shape=(2, 2))(in0Sof99494)
Fla73178 = keras.layers.Flatten(name = 'Fla73178', )(Sof99494)
Sub85579 = keras.layers.Subtract(name = 'Sub85579', )([in0Sub85579,in1Sub85579])
Res46043 = keras.layers.Reshape((2, 2, 9), name = 'Res46043', )(Sub85579)
Res51307 = keras.layers.Reshape((2, 18), name = 'Res51307', )(Res46043)
Sim53784 = keras.layers.SimpleRNN(1,name = 'Sim53784', )(Res51307)
Con75507 = keras.layers.Concatenate(axis=1, name = 'Con75507', )([Sim53784,in0Con75507])
Mul66890 = keras.layers.Multiply(name = 'Mul66890', )([Fla73178,Con75507])
model = tf.keras.models.Model(inputs=[in0Sof99494,in0Sub85579,in1Sub85579,in0Con75507], outputs=Mul66890)
w = model.get_layer('Sim53784').get_weights() 
w[0] = np.array([[9], [7], [10], [5], [10], [5], [10], [7], [3], [10], [8], [5], [4], [2], [7], [1], [6], [7]])
w[1] = np.array([[7]])
w[2] = np.array([10])
model.get_layer('Sim53784').set_weights(w) 
in0Sof99494 = tf.constant([[[0.9388, 0.79], [0.6175, 0.7387]]])
in0Sub85579 = tf.constant([[[[[0.8059, 0.826, 0.4394], [0.6307, 0.7782, 0.0645], [0.4213, 0.2158, 0.7283]], [[0.1039, 0.8133, 0.1783], [0.8111, 0.2678, 0.335], [0.1081, 0.1386, 0.8251]]], [[[0.9147, 0.5163, 0.8787], [0.6729, 0.5369, 0.8298], [0.5698, 0.8745, 0.5933]], [[0.6351, 0.2263, 0.0777], [0.1863, 0.9585, 0.3725], [0.5026, 0.1582, 0.4325]]]]])
in1Sub85579 = tf.constant([[[[[0.4876, 0.8856, 0.2328], [0.7801, 0.4707, 0.4936], [0.5459, 0.1698, 0.6419]], [[0.0806, 0.0143, 0.6421], [0.4831, 0.4489, 0.449], [0.9893, 0.7934, 0.1006]]], [[[0.0503, 0.1828, 0.1838], [0.3132, 0.9415, 0.6842], [0.8687, 0.8623, 0.6951]], [[0.7523, 0.5246, 0.5242], [0.3849, 0.1623, 0.5819], [0.442, 0.5564, 0.5918]]]]])
in0Con75507 = tf.constant([[0.1435, 0.9478, 0.0991]])
print (np.array2string(model.predict([in0Sof99494,in0Sub85579,in1Sub85579,in0Con75507],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul66890.png')

LSof99494 = softmax_layer([[[0.9388, 0.79], [0.6175, 0.7387]]], 1, Sof99494), 
LFla73178 = flatten_layer(Sof99494, Fla73178), 
LSub85579 = subtract_layer([[[[[0.8059, 0.826, 0.4394], [0.6307, 0.7782, 0.0645], [0.4213, 0.2158, 0.7283]], [[0.1039, 0.8133, 0.1783], [0.8111, 0.2678, 0.335], [0.1081, 0.1386, 0.8251]]], [[[0.9147, 0.5163, 0.8787], [0.6729, 0.5369, 0.8298], [0.5698, 0.8745, 0.5933]], [[0.6351, 0.2263, 0.0777], [0.1863, 0.9585, 0.3725], [0.5026, 0.1582, 0.4325]]]]], [[[[[0.4876, 0.8856, 0.2328], [0.7801, 0.4707, 0.4936], [0.5459, 0.1698, 0.6419]], [[0.0806, 0.0143, 0.6421], [0.4831, 0.4489, 0.449], [0.9893, 0.7934, 0.1006]]], [[[0.0503, 0.1828, 0.1838], [0.3132, 0.9415, 0.6842], [0.8687, 0.8623, 0.6951]], [[0.7523, 0.5246, 0.5242], [0.3849, 0.1623, 0.5819], [0.442, 0.5564, 0.5918]]]]], Sub85579), 
LRes46043 = reshape_layer(Sub85579, [2, 2, 9], Res46043), 
LRes51307 = reshape_layer(Res46043, [2, 18], Res51307), 
LSim53784 = simple_rnn_layer(Res51307,[[9], [7], [10], [5], [10], [5], [10], [7], [3], [10], [8], [5], [4], [2], [7], [1], [6], [7]],[[7]],[10], Sim53784), 
LCon75507 = concatenate_layer([Sim53784,[[0.1435, 0.9478, 0.0991]]], 1, Con75507), 
LMul66890 = multiply_layer([Fla73178,Con75507], Mul66890), 
exec_layers([LSof99494,LFla73178,LSub85579,LRes46043,LRes51307,LSim53784,LCon75507,LMul66890],["Sof99494","Fla73178","Sub85579","Res46043","Res51307","Sim53784","Con75507","Mul66890"],Mul66890,"Mul66890")

Actual (Unparsed): [[0.5796410, 0.0735900, 0.3984162, 0.0482793]]

Expected (Unparsed): [[0.5796410393984773,0.0735899839954079,0.39841622285812306,0.04827932115717823]]

Actual:   [[0.5797, 0.0736, 0.3985, 0.0483]]

Expected: [[0.5797, 0.0736, 0.3985, 0.0483]]