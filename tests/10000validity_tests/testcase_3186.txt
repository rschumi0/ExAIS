import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Loc97690 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Con64756 = tf.keras.layers.Input(shape=([33]))
in0Cro25282 = tf.keras.layers.Input(shape=([4, 2, 1, 4]))
in0Lay89968 = tf.keras.layers.Input(shape=([1, 1, 4]))

Loc97690 = keras.layers.LocallyConnected2D(3, (1, 2),strides=(1, 1), name = 'Loc97690', )(in0Loc97690)
Res69449 = keras.layers.Reshape((1, 3), name = 'Res69449', )(Loc97690)
Cro20599 = keras.layers.Cropping1D(cropping=((0, 0)), name = 'Cro20599', )(Res69449)
Res27609 = keras.layers.Reshape((1, 3, 1), name = 'Res27609', )(Cro20599)
Dep97974 = keras.layers.DepthwiseConv2D((1, 3),strides=(1, 1), padding='same', name = 'Dep97974', )(Res27609)
Res39765 = keras.layers.Reshape((1, 3), name = 'Res39765', )(Dep97974)
Fla89386 = keras.layers.Flatten(name = 'Fla89386', )(Res39765)
Con64756 = keras.layers.Concatenate(axis=1, name = 'Con64756', )([Fla89386,in0Con64756])
Cro25282 = keras.layers.Cropping3D(cropping=((3, 0), (1, 0), (0, 0)), name = 'Cro25282', )(in0Cro25282)
Res32803 = keras.layers.Reshape((1, 1, 4), name = 'Res32803', )(Cro25282)
Lay89968 = keras.layers.LayerNormalization(axis=1, epsilon=1.8895502138187208, name = 'Lay89968', )(in0Lay89968)
Add68933 = keras.layers.Add(name = 'Add68933', )([Res32803,Lay89968])
Zer67661 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer67661', )(Add68933)
Fla63818 = keras.layers.Flatten(name = 'Fla63818', )(Zer67661)
Ave82791 = keras.layers.Average(name = 'Ave82791', )([Con64756,Fla63818])
model = tf.keras.models.Model(inputs=[in0Loc97690,in0Con64756,in0Cro25282,in0Lay89968], outputs=Ave82791)
w = model.get_layer('Loc97690').get_weights() 
w[0] = np.array([[[0.634, 0.352, 0.7538], [0.1014, 0.6361, 0.9626], [0.4458, 0.3703, 0.452], [0.8733, 0.9287, 0.1572]]])
w[1] = np.array([[[0, 0, 0]]])
model.get_layer('Loc97690').set_weights(w) 
w = model.get_layer('Dep97974').get_weights() 
w[0] = np.array([[[[0.3478]], [[0.8648]], [[0.2588]]]])
w[1] = np.array([0])
model.get_layer('Dep97974').set_weights(w) 
in0Loc97690 = tf.constant([[[[0.8302, 0.2727], [0.2878, 0.953]]]])
in0Con64756 = tf.constant([[0.768, 0.7809, 0.2425, 0.292, 0.663, 0.1844, 0.335, 0.9294, 0.7947, 0.8057, 0.0632, 0.1293, 0.4175, 0.6825, 0.9334, 0.2181, 0.9489, 0.501, 0.3923, 0.5611, 0.1587, 0.928, 0.6734, 0.6869, 0.6674, 0.3875, 0.4222, 0.6522, 0.1946, 0.8316, 0.7836, 0.1316, 0.7736]])
in0Cro25282 = tf.constant([[[[[1.3111, 1.6593, 1.463, 1.5668]], [[1.7029, 1.2829, 1.5007, 1.8067]]], [[[1.3177, 1.654, 1.6018, 1.7065]], [[1.5216, 1.948, 1.0693, 1.8333]]], [[[1.1878, 1.0276, 1.3217, 1.4546]], [[1.3377, 1.4399, 1.4658, 1.5891]]], [[[1.6722, 1.3459, 1.3009, 1.8367]], [[1.6021, 1.0982, 1.7979, 1.534]]]]])
in0Lay89968 = tf.constant([[[[1.0768, 1.9743, 1.5509, 1.9582]]]])
print (np.array2string(model.predict([in0Loc97690,in0Con64756,in0Cro25282,in0Lay89968],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave82791.png')

LLoc97690 = locally_connected2D_layer([[[[0.8302, 0.2727], [0.2878, 0.953]]]], 1, 2,[[[0.634, 0.352, 0.7538], [0.1014, 0.6361, 0.9626], [0.4458, 0.3703, 0.452], [0.8733, 0.9287, 0.1572]]],[[[0, 0, 0]]], 1, 1, Loc97690), 
LRes69449 = reshape_layer(Loc97690, [1, 3], Res69449), 
LCro20599 = cropping1D_layer(Res69449, 0, 0, Cro20599), 
LRes27609 = reshape_layer(Cro20599, [1, 3, 1], Res27609), 
LDep97974 = depthwise_conv2D_layer(Res27609, 1, 3,[[[[0.3478]], [[0.8648]], [[0.2588]]]],[0], 1, 1, true, Dep97974), 
LRes39765 = reshape_layer(Dep97974, [1, 3], Res39765), 
LFla89386 = flatten_layer(Res39765, Fla89386), 
LCon64756 = concatenate_layer([Fla89386,[[0.768, 0.7809, 0.2425, 0.292, 0.663, 0.1844, 0.335, 0.9294, 0.7947, 0.8057, 0.0632, 0.1293, 0.4175, 0.6825, 0.9334, 0.2181, 0.9489, 0.501, 0.3923, 0.5611, 0.1587, 0.928, 0.6734, 0.6869, 0.6674, 0.3875, 0.4222, 0.6522, 0.1946, 0.8316, 0.7836, 0.1316, 0.7736]]], 1, Con64756), 
LCro25282 = cropping3D_layer([[[[[1.3111, 1.6593, 1.463, 1.5668]], [[1.7029, 1.2829, 1.5007, 1.8067]]], [[[1.3177, 1.654, 1.6018, 1.7065]], [[1.5216, 1.948, 1.0693, 1.8333]]], [[[1.1878, 1.0276, 1.3217, 1.4546]], [[1.3377, 1.4399, 1.4658, 1.5891]]], [[[1.6722, 1.3459, 1.3009, 1.8367]], [[1.6021, 1.0982, 1.7979, 1.534]]]]], 3, 0, 1, 0, 0, 0, Cro25282), 
LRes32803 = reshape_layer(Cro25282, [1, 1, 4], Res32803), 
LLay89968 = layer_normalization_layer([[[[1.0768, 1.9743, 1.5509, 1.9582]]]], 1, 1.8895502138187208, Lay89968), 
LAdd68933 = add_layer([Res32803,Lay89968], Add68933), 
LZer67661 = zero_padding2D_layer(Add68933, 1, 1, 1, 1, Zer67661), 
LFla63818 = flatten_layer(Zer67661, Fla63818), 
LAve82791 = average_layer([Con64756,Fla63818], Ave82791), 
exec_layers([LLoc97690,LRes69449,LCro20599,LRes27609,LDep97974,LRes39765,LFla89386,LCon64756,LCro25282,LRes32803,LLay89968,LAdd68933,LZer67661,LFla63818,LAve82791],["Loc97690","Res69449","Cro20599","Res27609","Dep97974","Res39765","Fla89386","Con64756","Cro25282","Res32803","Lay89968","Add68933","Zer67661","Fla63818","Ave82791"],Ave82791,"Ave82791")

Actual (Unparsed): [[0.8434705, 1.0446910, 0.7585586, 0.3840000, 0.3904500, 0.1212500, 0.1460000, 0.3315000, 0.0922000, 0.1675000, 0.4647000, 0.3973500, 0.4028500, 0.0316000, 0.0646500, 0.2087500, 1.1423000, 1.0158000, 1.0080000, 1.2414500, 0.2505000, 0.1961500, 0.2805500, 0.0793500, 0.4640000, 0.3367000, 0.3434500, 0.3337000, 0.1937500, 0.2111000, 0.3261000, 0.0973000, 0.4158000, 0.3918000, 0.0658000, 0.3868000]]

Expected (Unparsed): [[0.8434704502420001,1.044690968664,0.7585586226610002,0.384,0.39045,0.12125,0.146,0.3315,0.0922,0.1675,0.4647,0.39735,0.40285,0.0316,0.06465,0.20875,1.1423,1.0158,1.008,1.24145,0.2505,0.19615,0.28055,0.07935,0.464,0.3367,0.34345,0.3337,0.19375,0.2111,0.3261,0.0973,0.4158,0.3918,0.0658,0.3868]]

Actual:   [[0.8435, 1.0447, 0.7586, 0.384, 0.3905, 0.1213, 0.146, 0.3315, 0.0922, 0.1675, 0.4647, 0.3974, 0.4029, 0.0316, 0.0647, 0.2088, 1.1423, 1.0158, 1.008, 1.2415, 0.2505, 0.1962, 0.2806, 0.0794, 0.464, 0.3367, 0.3435, 0.3337, 0.1938, 0.2111, 0.3261, 0.0973, 0.4158, 0.3918, 0.0658, 0.3868]]

Expected: [[0.8435, 1.0447, 0.7586, 0.384, 0.3905, 0.1213, 0.146, 0.3315, 0.0922, 0.1675, 0.4647, 0.3974, 0.4029, 0.0316, 0.0647, 0.2088, 1.1423, 1.0158, 1.008, 1.2415, 0.2505, 0.1962, 0.2806, 0.0794, 0.464, 0.3367, 0.3435, 0.3337, 0.1938, 0.2111, 0.3261, 0.0973, 0.4158, 0.3918, 0.0658, 0.3868]]