import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0PRe29313 = tf.keras.layers.Input(shape=([2, 2]))
in0Con64904 = tf.keras.layers.Input(shape=([4, 2, 3, 1]))
in0Add13325 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Add13325 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con26146 = tf.keras.layers.Input(shape=([2, 2, 3, 1]))
in0Add82001 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))
in1Add82001 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))

PRe29313 = keras.layers.PReLU(name = 'PRe29313', input_shape=(2, 2))(in0PRe29313)
Zer2041 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer2041', )(PRe29313)
Res98770 = keras.layers.Reshape((4, 2, 1), name = 'Res98770', )(Zer2041)
Res37263 = keras.layers.Reshape((4, 2, 1, 1), name = 'Res37263', )(Res98770)
Zer80818 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer80818', )(Res37263)
Con64904 = keras.layers.Concatenate(axis=4, name = 'Con64904', )([Zer80818,in0Con64904])
Add13325 = keras.layers.Add(name = 'Add13325', )([in0Add13325,in1Add13325])
Res36202 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res36202', )(Add13325)
Zer70588 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (2, 0)), name = 'Zer70588', )(Res36202)
Con26146 = keras.layers.Concatenate(axis=4, name = 'Con26146', )([Zer70588,in0Con26146])
Add82001 = keras.layers.Add(name = 'Add82001', )([in0Add82001,in1Add82001])
Zer62252 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (1, 0)), name = 'Zer62252', )(Add82001)
Max8293 = keras.layers.Maximum(name = 'Max8293', )([Con26146,Zer62252])
Up_63146 = keras.layers.UpSampling3D(size=(2, 1, 1), name = 'Up_63146', )(Max8293)
Min1868 = keras.layers.Minimum(name = 'Min1868', )([Con64904,Up_63146])
model = tf.keras.models.Model(inputs=[in0PRe29313,in0Con64904,in0Add13325,in1Add13325,in0Con26146,in0Add82001,in1Add82001], outputs=Min1868)
w = model.get_layer('PRe29313').get_weights() 
w[0] = np.array([[0.4434, 0.2951], [0.8229, 0.4089]])
model.get_layer('PRe29313').set_weights(w) 
in0PRe29313 = tf.constant([[[0.807, 0.7287], [0.5413, 0.4408]]])
in0Con64904 = tf.constant([[[[[0.1798], [0.5643], [0.8058]], [[0.9009], [0.6941], [0.3593]]], [[[0.6964], [0.3793], [0.1984]], [[0.1106], [0.8052], [0.0917]]], [[[0.3325], [0.2605], [0.5393]], [[0.5339], [0.357], [0.1276]]], [[[0.188], [0.2517], [0.6264]], [[0.4775], [0.5752], [0.5586]]]]])
in0Add13325 = tf.constant([[[[0.1881], [0.367]], [[0.6329], [0.6487]]]])
in1Add13325 = tf.constant([[[[0.3595], [0.9032]], [[0.658], [0.9497]]]])
in0Con26146 = tf.constant([[[[[0.431], [0.9397], [0.844]], [[0.2425], [0.2911], [0.8034]]], [[[0.1627], [0.236], [0.5524]], [[0.1799], [0.9006], [0.5034]]]]])
in0Add82001 = tf.constant([[[[[0.8778, 0.5457], [0.5624, 0.8278]]]]])
in1Add82001 = tf.constant([[[[[0.8541, 0.437], [0.4206, 0.3781]]]]])
print (np.array2string(model.predict([in0PRe29313,in0Con64904,in0Add13325,in1Add13325,in0Con26146,in0Add82001,in1Add82001],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min1868.png')

LPRe29313 = prelu_layer([[[0.807, 0.7287], [0.5413, 0.4408]]], [[0.4434, 0.2951], [0.8229, 0.4089]], PRe29313), 
LZer2041 = zero_padding1D_layer(PRe29313, 1, 1, Zer2041), 
LRes98770 = reshape_layer(Zer2041, [4, 2, 1], Res98770), 
LRes37263 = reshape_layer(Res98770, [4, 2, 1, 1], Res37263), 
LZer80818 = zero_padding3D_layer(Res37263, 0, 0, 0, 0, 2, 0, Zer80818), 
LCon64904 = concatenate_layer([Zer80818,[[[[[0.1798], [0.5643], [0.8058]], [[0.9009], [0.6941], [0.3593]]], [[[0.6964], [0.3793], [0.1984]], [[0.1106], [0.8052], [0.0917]]], [[[0.3325], [0.2605], [0.5393]], [[0.5339], [0.357], [0.1276]]], [[[0.188], [0.2517], [0.6264]], [[0.4775], [0.5752], [0.5586]]]]]], 4, Con64904), 
LAdd13325 = add_layer([[[[[0.1881], [0.367]], [[0.6329], [0.6487]]]], [[[[0.3595], [0.9032]], [[0.658], [0.9497]]]]], Add13325), 
LRes36202 = reshape_layer(Add13325, [2, 2, 1, 1], Res36202), 
LZer70588 = zero_padding3D_layer(Res36202, 0, 0, 0, 0, 2, 0, Zer70588), 
LCon26146 = concatenate_layer([Zer70588,[[[[[0.431], [0.9397], [0.844]], [[0.2425], [0.2911], [0.8034]]], [[[0.1627], [0.236], [0.5524]], [[0.1799], [0.9006], [0.5034]]]]]], 4, Con26146), 
LAdd82001 = add_layer([[[[[[0.8778, 0.5457], [0.5624, 0.8278]]]]], [[[[[0.8541, 0.437], [0.4206, 0.3781]]]]]], Add82001), 
LZer62252 = zero_padding3D_layer(Add82001, 1, 0, 1, 0, 1, 0, Zer62252), 
LMax8293 = maximum_layer([Con26146,Zer62252], Max8293), 
LUp_63146 = up_sampling3D_layer(Max8293, 2, 1, 1, Up_63146), 
LMin1868 = minimum_layer([Con64904,Up_63146], Min1868), 
exec_layers([LPRe29313,LZer2041,LRes98770,LRes37263,LZer80818,LCon64904,LAdd13325,LRes36202,LZer70588,LCon26146,LAdd82001,LZer62252,LMax8293,LUp_63146,LMin1868],["PRe29313","Zer2041","Res98770","Res37263","Zer80818","Con64904","Add13325","Res36202","Zer70588","Con26146","Add82001","Zer62252","Max8293","Up_63146","Min1868"],Min1868,"Min1868")

Actual (Unparsed): [[[[[0.0000000, 0.1798000], [0.0000000, 0.5643000], [0.0000000, 0.8058000]], [[0.0000000, 0.2425000], [0.0000000, 0.2911000], [0.0000000, 0.3593000]]], [[[0.0000000, 0.4310000], [0.0000000, 0.3793000], [0.5476000, 0.1984000]], [[0.0000000, 0.1106000], [0.0000000, 0.2911000], [0.7287000, 0.0917000]]], [[[0.0000000, 0.1627000], [0.0000000, 0.2360000], [0.5413000, 0.5393000]], [[0.0000000, 0.1799000], [0.0000000, 0.3570000], [0.4408000, 0.1276000]]], [[[0.0000000, 0.1627000], [0.0000000, 0.2360000], [0.0000000, 0.5524000]], [[0.0000000, 0.1799000], [0.0000000, 0.5752000], [0.0000000, 0.5586000]]]]]

Expected (Unparsed): [[[[[0,0.1798],[0,0.5643],[0,0.8058]],[[0,0.2425],[0,0.2911],[0,0.3593]]],[[[0,0.431],[0,0.3793],[0.5476,0.1984]],[[0,0.1106],[0,0.2911],[0.7287,0.0917]]],[[[0,0.1627],[0,0.236],[0.5413,0.5393]],[[0,0.1799],[0,0.357],[0.4408,0.1276]]],[[[0,0.1627],[0,0.236],[0,0.5524]],[[0,0.1799],[0,0.5752],[0,0.5586]]]]]

Actual:   [[[[[0, 0.1798], [0, 0.5643], [0, 0.8058]], [[0, 0.2425], [0, 0.2911], [0, 0.3593]]], [[[0, 0.431], [0, 0.3793], [0.5476, 0.1984]], [[0, 0.1106], [0, 0.2911], [0.7287, 0.0917]]], [[[0, 0.1627], [0, 0.236], [0.5413, 0.5393]], [[0, 0.1799], [0, 0.357], [0.4408, 0.1276]]], [[[0, 0.1627], [0, 0.236], [0, 0.5524]], [[0, 0.1799], [0, 0.5752], [0, 0.5586]]]]]

Expected: [[[[[0, 0.1798], [0, 0.5643], [0, 0.8058]], [[0, 0.2425], [0, 0.2911], [0, 0.3593]]], [[[0, 0.431], [0, 0.3793], [0.5476, 0.1984]], [[0, 0.1106], [0, 0.2911], [0.7287, 0.0917]]], [[[0, 0.1627], [0, 0.236], [0.5413, 0.5393]], [[0, 0.1799], [0, 0.357], [0.4408, 0.1276]]], [[[0, 0.1627], [0, 0.236], [0, 0.5524]], [[0, 0.1799], [0, 0.5752], [0, 0.5586]]]]]