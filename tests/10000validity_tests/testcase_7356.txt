import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul79514 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))
in1Mul79514 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))
in0Con35823 = tf.keras.layers.Input(shape=([3, 2, 3, 2]))
in0Sub27013 = tf.keras.layers.Input(shape=([3, 2, 3, 3]))
in1Sub27013 = tf.keras.layers.Input(shape=([3, 2, 3, 3]))

Mul79514 = keras.layers.Multiply(name = 'Mul79514', )([in0Mul79514,in1Mul79514])
Zer45604 = keras.layers.ZeroPadding3D(padding=((2, 0), (1, 0), (2, 0)), name = 'Zer45604', )(Mul79514)
Con35823 = keras.layers.Concatenate(axis=4, name = 'Con35823', )([Zer45604,in0Con35823])
Sub27013 = keras.layers.Subtract(name = 'Sub27013', )([in0Sub27013,in1Sub27013])
Max79405 = keras.layers.Maximum(name = 'Max79405', )([Con35823,Sub27013])
model = tf.keras.models.Model(inputs=[in0Mul79514,in1Mul79514,in0Con35823,in0Sub27013,in1Sub27013], outputs=Max79405)
in0Mul79514 = tf.constant([[[[[0.3843]]]]])
in1Mul79514 = tf.constant([[[[[0.9241]]]]])
in0Con35823 = tf.constant([[[[[0.4557, 0.9515], [0.5941, 0.5044], [0.3688, 0.4325]], [[0.5909, 0.6621], [0.7389, 0.2687], [0.9085, 0.097]]], [[[0.9041, 0.4255], [0.6913, 0.104], [0.0587, 0.3309]], [[0.8848, 0.8422], [0.7596, 0.0496], [0.6484, 0.4022]]], [[[0.719, 0.5443], [0.6891, 0.2785], [0.0337, 0.7992]], [[0.9653, 0.4941], [0.2302, 0.9736], [0.8274, 0.0359]]]]])
in0Sub27013 = tf.constant([[[[[0.7777, 0.3068, 0.016], [0.4074, 0.6354, 0.3427], [0.4147, 0.7561, 0.3387]], [[0.3154, 0.67, 0.0063], [0.4925, 0.6777, 0.4112], [0.7113, 0.0084, 0.6187]]], [[[0.9864, 0.7388, 0.2495], [0.3124, 0.0819, 0.0057], [0.9341, 0.2706, 0.5034]], [[0.7453, 0.9367, 0.5837], [0.2409, 0.1672, 0.7938], [0.988, 0.1338, 0.6551]]], [[[0.6802, 0.3729, 0.4184], [0.9705, 0.8518, 0.5586], [0.1916, 0.2848, 0.0731]], [[0.9139, 0.3595, 0.2427], [0.3406, 0.6602, 0.9487], [0.6775, 0.2958, 0.5142]]]]])
in1Sub27013 = tf.constant([[[[[0.7575, 0.044, 0.0792], [0.6562, 0.1951, 0.1125], [0.0218, 0.8806, 0.8206]], [[0.9763, 0.488, 0.186], [0.524, 0.9644, 0.3947], [0.9892, 0.5196, 0.6244]]], [[[0.4103, 0.6138, 0.3158], [0.5399, 0.6093, 0.6933], [0.6134, 0.3837, 0.4009]], [[0.6552, 0.6429, 0.2717], [0.8846, 0.509, 0.8011], [0.1776, 0.3911, 0.7448]]], [[[0.568, 0.8987, 0.8619], [0.2709, 0.5974, 0.8195], [0.8919, 0.9651, 0.5588]], [[0.5106, 0.7144, 0.5985], [0.7799, 0.0227, 0.1433], [0.5986, 0.9914, 0.586]]]]])
print (np.array2string(model.predict([in0Mul79514,in1Mul79514,in0Con35823,in0Sub27013,in1Sub27013],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max79405.png')

LMul79514 = multiply_layer([[[[[[0.3843]]]]], [[[[[0.9241]]]]]], Mul79514), 
LZer45604 = zero_padding3D_layer(Mul79514, 2, 0, 1, 0, 2, 0, Zer45604), 
LCon35823 = concatenate_layer([Zer45604,[[[[[0.4557, 0.9515], [0.5941, 0.5044], [0.3688, 0.4325]], [[0.5909, 0.6621], [0.7389, 0.2687], [0.9085, 0.097]]], [[[0.9041, 0.4255], [0.6913, 0.104], [0.0587, 0.3309]], [[0.8848, 0.8422], [0.7596, 0.0496], [0.6484, 0.4022]]], [[[0.719, 0.5443], [0.6891, 0.2785], [0.0337, 0.7992]], [[0.9653, 0.4941], [0.2302, 0.9736], [0.8274, 0.0359]]]]]], 4, Con35823), 
LSub27013 = subtract_layer([[[[[0.7777, 0.3068, 0.016], [0.4074, 0.6354, 0.3427], [0.4147, 0.7561, 0.3387]], [[0.3154, 0.67, 0.0063], [0.4925, 0.6777, 0.4112], [0.7113, 0.0084, 0.6187]]], [[[0.9864, 0.7388, 0.2495], [0.3124, 0.0819, 0.0057], [0.9341, 0.2706, 0.5034]], [[0.7453, 0.9367, 0.5837], [0.2409, 0.1672, 0.7938], [0.988, 0.1338, 0.6551]]], [[[0.6802, 0.3729, 0.4184], [0.9705, 0.8518, 0.5586], [0.1916, 0.2848, 0.0731]], [[0.9139, 0.3595, 0.2427], [0.3406, 0.6602, 0.9487], [0.6775, 0.2958, 0.5142]]]]], [[[[[0.7575, 0.044, 0.0792], [0.6562, 0.1951, 0.1125], [0.0218, 0.8806, 0.8206]], [[0.9763, 0.488, 0.186], [0.524, 0.9644, 0.3947], [0.9892, 0.5196, 0.6244]]], [[[0.4103, 0.6138, 0.3158], [0.5399, 0.6093, 0.6933], [0.6134, 0.3837, 0.4009]], [[0.6552, 0.6429, 0.2717], [0.8846, 0.509, 0.8011], [0.1776, 0.3911, 0.7448]]], [[[0.568, 0.8987, 0.8619], [0.2709, 0.5974, 0.8195], [0.8919, 0.9651, 0.5588]], [[0.5106, 0.7144, 0.5985], [0.7799, 0.0227, 0.1433], [0.5986, 0.9914, 0.586]]]]], Sub27013), 
LMax79405 = maximum_layer([Con35823,Sub27013], Max79405), 
exec_layers([LMul79514,LZer45604,LCon35823,LSub27013,LMax79405],["Mul79514","Zer45604","Con35823","Sub27013","Max79405"],Max79405,"Max79405")

Actual (Unparsed): [[[[[0.0202000, 0.4557000, 0.9515000], [0.0000000, 0.5941000, 0.5044000], [0.3929000, 0.3688000, 0.4325000]], [[0.0000000, 0.5909000, 0.6621000], [0.0000000, 0.7389000, 0.2687000], [0.0000000, 0.9085000, 0.0970000]]], [[[0.5761000, 0.9041000, 0.4255000], [0.0000000, 0.6913000, 0.1040000], [0.3207000, 0.0587000, 0.3309000]], [[0.0901000, 0.8848000, 0.8422000], [0.0000000, 0.7596000, 0.0496000], [0.8104000, 0.6484000, 0.4022000]]], [[[0.1122000, 0.7190000, 0.5443000], [0.6996000, 0.6891000, 0.2785000], [0.0000000, 0.0337000, 0.7992000]], [[0.4033000, 0.9653000, 0.4941000], [0.0000000, 0.6375000, 0.9736000], [0.3551316, 0.8274000, 0.0359000]]]]]

Expected (Unparsed): [[[[[0.020199999999999996,0.4557,0.9515],[0,0.5941,0.5044],[0.3929,0.3688,0.4325]],[[0,0.5909,0.6621],[0,0.7389,0.2687],[0,0.9085,0.097]]],[[[0.5761000000000001,0.9041,0.4255],[0,0.6913,0.104],[0.3207000000000001,0.0587,0.3309]],[[0.09009999999999996,0.8848,0.8422],[0,0.7596,0.0496],[0.8104,0.6484,0.4022]]],[[[0.11220000000000008,0.719,0.5443],[0.6996,0.6891,0.2785],[0,0.0337,0.7992]],[[0.4033,0.9653,0.4941],[0,0.6375,0.9736],[0.35513163,0.8274,0.0359]]]]]

Actual:   [[[[[0.0202, 0.4557, 0.9515], [0, 0.5941, 0.5044], [0.3929, 0.3688, 0.4325]], [[0, 0.5909, 0.6621], [0, 0.7389, 0.2687], [0, 0.9085, 0.097]]], [[[0.5761, 0.9041, 0.4255], [0, 0.6913, 0.104], [0.3207, 0.0587, 0.3309]], [[0.0901, 0.8848, 0.8422], [0, 0.7596, 0.0496], [0.8104, 0.6484, 0.4022]]], [[[0.1122, 0.719, 0.5443], [0.6996, 0.6891, 0.2785], [0, 0.0337, 0.7992]], [[0.4033, 0.9653, 0.4941], [0, 0.6375, 0.9736], [0.3552, 0.8274, 0.0359]]]]]

Expected: [[[[[0.0202, 0.4557, 0.9515], [0, 0.5941, 0.5044], [0.3929, 0.3688, 0.4325]], [[0, 0.5909, 0.6621], [0, 0.7389, 0.2687], [0, 0.9085, 0.097]]], [[[0.5762, 0.9041, 0.4255], [0, 0.6913, 0.104], [0.3208, 0.0587, 0.3309]], [[0.0901, 0.8848, 0.8422], [0, 0.7596, 0.0496], [0.8104, 0.6484, 0.4022]]], [[[0.1123, 0.719, 0.5443], [0.6996, 0.6891, 0.2785], [0, 0.0337, 0.7992]], [[0.4033, 0.9653, 0.4941], [0, 0.6375, 0.9736], [0.3552, 0.8274, 0.0359]]]]]