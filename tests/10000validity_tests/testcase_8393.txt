import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add56840 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Add56840 = tf.keras.layers.Input(shape=([2, 2, 1]))

Add56840 = keras.layers.Add(name = 'Add56840', )([in0Add56840,in1Add56840])
Res55472 = keras.layers.Reshape((2, 2), name = 'Res55472', )(Add56840)
Loc18815 = keras.layers.LocallyConnected1D(4, (2),strides=(1), name = 'Loc18815', )(Res55472)
Thr32105 = keras.layers.ThresholdedReLU(theta=3.3477490341349414, name = 'Thr32105', )(Loc18815)
model = tf.keras.models.Model(inputs=[in0Add56840,in1Add56840], outputs=Thr32105)
w = model.get_layer('Loc18815').get_weights() 
w[0] = np.array([[[0.5007, 0.8466, 0.7201, 0.6237], [0.9852, 0.3266, 0.2846, 0.4996], [0.9821, 0.346, 0.8147, 0.0354], [0.5971, 0.0095, 0.3061, 0.9507]]])
w[1] = np.array([[0, 0, 0, 0]])
model.get_layer('Loc18815').set_weights(w) 
in0Add56840 = tf.constant([[[[0.7636], [0.2505]], [[0.4066], [0.9454]]]])
in1Add56840 = tf.constant([[[[0.9742], [0.1239]], [[0.4684], [0.9451]]]])
print (np.array2string(model.predict([in0Add56840,in1Add56840],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Thr32105.png')

LAdd56840 = add_layer([[[[[0.7636], [0.2505]], [[0.4066], [0.9454]]]], [[[[0.9742], [0.1239]], [[0.4684], [0.9451]]]]], Add56840), 
LRes55472 = reshape_layer(Add56840, [2, 2], Res55472), 
LLoc18815 = locally_connected1D_layer(Res55472, 2,[[[0.5007, 0.8466, 0.7201, 0.6237], [0.9852, 0.3266, 0.2846, 0.4996], [0.9821, 0.346, 0.8147, 0.0354], [0.5971, 0.0095, 0.3061, 0.9507]]],[[0, 0, 0, 0]], 1, Loc18815), 
LThr32105 = thresholded_relu_layer(Loc18815, 3.3477490341349414, Thr32105), 
exec_layers([LAdd56840,LRes55472,LLoc18815,LThr32105],["Add56840","Res55472","Loc18815","Thr32105"],Thr32105,"Thr32105")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0,0,0,0]]]

Actual:   [[[0, 0, 0, 0]]]

Expected: [[[0, 0, 0, 0]]]