import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Lea36135 = tf.keras.layers.Input(shape=([2, 2]))
in0Sep24201 = tf.keras.layers.Input(shape=([2, 2]))
in0Con34208 = tf.keras.layers.Input(shape=([1]))
in0Min63946 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Min63946 = tf.keras.layers.Input(shape=([2, 1, 1]))

Lea36135 = keras.layers.LeakyReLU(alpha=3.6028141652786827, name = 'Lea36135', input_shape=(2, 2))(in0Lea36135)
Cro78091 = keras.layers.Cropping1D(cropping=((1, 0)), name = 'Cro78091', )(Lea36135)
Fla51004 = keras.layers.Flatten(name = 'Fla51004', )(Cro78091)
Sep24201 = keras.layers.SeparableConv1D(4, (2),strides=(1), padding='same', name = 'Sep24201', )(in0Sep24201)
Res33996 = keras.layers.Reshape((2, 4, 1), name = 'Res33996', )(Sep24201)
Res83332 = keras.layers.Reshape((2, 4, 1, 1), name = 'Res83332', )(Res33996)
Zer31091 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer31091', )(Res83332)
Glo55283 = keras.layers.GlobalAveragePooling3D(name = 'Glo55283', )(Zer31091)
Con34208 = keras.layers.Concatenate(axis=1, name = 'Con34208', )([Glo55283,in0Con34208])
Ave10855 = keras.layers.Average(name = 'Ave10855', )([Fla51004,Con34208])
Res16592 = keras.layers.Reshape((2, 1), name = 'Res16592', )(Ave10855)
Min63946 = keras.layers.Minimum(name = 'Min63946', )([in0Min63946,in1Min63946])
Res11715 = keras.layers.Reshape((2, 1), name = 'Res11715', )(Min63946)
Sub14189 = keras.layers.Subtract(name = 'Sub14189', )([Res16592,Res11715])
model = tf.keras.models.Model(inputs=[in0Lea36135,in0Sep24201,in0Con34208,in0Min63946,in1Min63946], outputs=Sub14189)
w = model.get_layer('Sep24201').get_weights() 
w[0] = np.array([[[0.6767], [0.681]], [[0.9961], [0.5053]]])
w[1] = np.array([[[0.632, 0.2085, 0.8708, 0.6676], [0.1845, 0.4697, 0.0581, 0.2918]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep24201').set_weights(w) 
in0Lea36135 = tf.constant([[[0.1499, 0.6021], [0.9384, 0.9734]]])
in0Sep24201 = tf.constant([[[0.4175, 0.399], [0.914, 0.2873]]])
in0Con34208 = tf.constant([[0.7072]])
in0Min63946 = tf.constant([[[[0.1858]], [[0.5696]]]])
in1Min63946 = tf.constant([[[[0.4159]], [[0.3302]]]])
print (np.array2string(model.predict([in0Lea36135,in0Sep24201,in0Con34208,in0Min63946,in1Min63946],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub14189.png')

LLea36135 = leaky_relu_layer([[[0.1499, 0.6021], [0.9384, 0.9734]]], 3.6028141652786827, Lea36135), 
LCro78091 = cropping1D_layer(Lea36135, 1, 0, Cro78091), 
LFla51004 = flatten_layer(Cro78091, Fla51004), 
LSep24201 = separable_conv1D_layer([[[0.4175, 0.399], [0.914, 0.2873]]], 2,[[[[0.6767], [0.681]], [[0.9961], [0.5053]]],[[[0.632, 0.2085, 0.8708, 0.6676], [0.1845, 0.4697, 0.0581, 0.2918]]]],[0, 0, 0, 0], 1, true, Sep24201), 
LRes33996 = reshape_layer(Sep24201, [2, 4, 1], Res33996), 
LRes83332 = reshape_layer(Res33996, [2, 4, 1, 1], Res83332), 
LZer31091 = zero_padding3D_layer(Res83332, 1, 1, 1, 1, 1, 1, Zer31091), 
LGlo55283 = global_average_pooling3D_layer(Zer31091, Glo55283), 
LCon34208 = concatenate_layer([Glo55283,[[0.7072]]], 1, Con34208), 
LAve10855 = average_layer([Fla51004,Con34208], Ave10855), 
LRes16592 = reshape_layer(Ave10855, [2, 1], Res16592), 
LMin63946 = minimum_layer([[[[[0.1858]], [[0.5696]]]], [[[[0.4159]], [[0.3302]]]]], Min63946), 
LRes11715 = reshape_layer(Min63946, [2, 1], Res11715), 
LSub14189 = subtract_layer(Res16592,Res11715, Sub14189), 
exec_layers([LLea36135,LCro78091,LFla51004,LSep24201,LRes33996,LRes83332,LZer31091,LGlo55283,LCon34208,LAve10855,LRes16592,LMin63946,LRes11715,LSub14189],["Lea36135","Cro78091","Fla51004","Sep24201","Res33996","Res83332","Zer31091","Glo55283","Con34208","Ave10855","Res16592","Min63946","Res11715","Sub14189"],Sub14189,"Sub14189")

Actual (Unparsed): [[[0.3175968], [0.5101000]]]

Expected (Unparsed): [[[0.31759680596988893],[0.5101]]]

Actual:   [[[0.3176], [0.5101]]]

Expected: [[[0.3176], [0.5101]]]