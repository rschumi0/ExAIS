import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Den11726 = tf.keras.layers.Input(shape=([2, 2, 4]))

Den11726 = keras.layers.Dense(4,name = 'Den11726', )(in0Den11726)
Res9087 = keras.layers.Reshape((2, 8), name = 'Res9087', )(Den11726)
Glo61329 = keras.layers.GlobalAveragePooling1D(name = 'Glo61329', )(Res9087)
Res37092 = keras.layers.Reshape((8, 1), name = 'Res37092', )(Glo61329)
Res29214 = keras.layers.Reshape((8, 1, 1), name = 'Res29214', )(Res37092)
Loc99296 = keras.layers.LocallyConnected2D(4, (6, 1),strides=(1, 1), name = 'Loc99296', )(Res29214)
model = tf.keras.models.Model(inputs=[in0Den11726], outputs=Loc99296)
w = model.get_layer('Den11726').get_weights() 
w[0] = np.array([[0.5065, 0.5997, 0.1105, 0.5801], [0.3171, 0.9735, 0.7904, 0.3309], [0.937, 0.8477, 0.5013, 0.4154], [0.1276, 0.475, 0.3817, 0.8674]])
w[1] = np.array([0.6428, 0.6376, 0.2828, 0.5237])
model.get_layer('Den11726').set_weights(w) 
w = model.get_layer('Loc99296').get_weights() 
w[0] = np.array([[[0.1901, 0.4517, 0.9166, 0.1214], [0.6332, 0.6654, 0.7453, 0.1406], [0.6304, 0.652, 0.8356, 0.6103], [0.6178, 0.1653, 0.2683, 0.5285], [0.0171, 0.1964, 0.4339, 0.7672], [0.6676, 0.5415, 0.7334, 0.554]], [[0.3227, 0.183, 0.3078, 0.3279], [0.6107, 0.0759, 0.3436, 0.2424], [0.8768, 0.5856, 0.5953, 0.4464], [0.7547, 0.1308, 0.7771, 0.2877], [0.1437, 0.552, 0.3808, 0.7482], [0.5107, 0.3507, 0.299, 0.7516]], [[0.0801, 0.2168, 0.3546, 0.4599], [0.5267, 0.2026, 0.4659, 0.3162], [0.2453, 0.4891, 0.7164, 0.3844], [0.1327, 0.9367, 0.0372, 0.4859], [0.0927, 0.5201, 0.5601, 0.7409], [0.1464, 0.3001, 0.9558, 0.3832]]])
w[1] = np.array([[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[0, 0, 0, 0]]])
model.get_layer('Loc99296').set_weights(w) 
in0Den11726 = tf.constant([[[[0.5747, 0.4004, 0.2893, 0.0758], [0.807, 0.5643, 0.8415, 0.9864]], [[0.2061, 0.0726, 0.3105, 0.8082], [0.9166, 0.6308, 0.6195, 0.5231]]]])
print (np.array2string(model.predict([in0Den11726],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Loc99296.png')

LDen11726 = dense_layer([[[[0.5747, 0.4004, 0.2893, 0.0758], [0.807, 0.5643, 0.8415, 0.9864]], [[0.2061, 0.0726, 0.3105, 0.8082], [0.9166, 0.6308, 0.6195, 0.5231]]]], [[0.5065, 0.5997, 0.1105, 0.5801], [0.3171, 0.9735, 0.7904, 0.3309], [0.937, 0.8477, 0.5013, 0.4154], [0.1276, 0.475, 0.3817, 0.8674]],[0.6428, 0.6376, 0.2828, 0.5237], Den11726), 
LRes9087 = reshape_layer(Den11726, [2, 8], Res9087), 
LGlo61329 = global_average_pooling1D_layer(Res9087, Glo61329), 
LRes37092 = reshape_layer(Glo61329, [8, 1], Res37092), 
LRes29214 = reshape_layer(Res37092, [8, 1, 1], Res29214), 
LLoc99296 = locally_connected2D_layer(Res29214, 6, 1,[[[0.1901, 0.4517, 0.9166, 0.1214], [0.6332, 0.6654, 0.7453, 0.1406], [0.6304, 0.652, 0.8356, 0.6103], [0.6178, 0.1653, 0.2683, 0.5285], [0.0171, 0.1964, 0.4339, 0.7672], [0.6676, 0.5415, 0.7334, 0.554]], [[0.3227, 0.183, 0.3078, 0.3279], [0.6107, 0.0759, 0.3436, 0.2424], [0.8768, 0.5856, 0.5953, 0.4464], [0.7547, 0.1308, 0.7771, 0.2877], [0.1437, 0.552, 0.3808, 0.7482], [0.5107, 0.3507, 0.299, 0.7516]], [[0.0801, 0.2168, 0.3546, 0.4599], [0.5267, 0.2026, 0.4659, 0.3162], [0.2453, 0.4891, 0.7164, 0.3844], [0.1327, 0.9367, 0.0372, 0.4859], [0.0927, 0.5201, 0.5601, 0.7409], [0.1464, 0.3001, 0.9558, 0.3832]]],[[[0, 0, 0, 0]], [[0, 0, 0, 0]], [[0, 0, 0, 0]]], 1, 1, Loc99296), 
exec_layers([LDen11726,LRes9087,LGlo61329,LRes37092,LRes29214,LLoc99296],["Den11726","Res9087","Glo61329","Res37092","Res29214","Loc99296"],Loc99296,"Loc99296")

Actual (Unparsed): [[[[4.4267655, 4.2434792, 6.2490609, 4.6622351]], [[4.8904031, 3.4261593, 4.6395108, 5.0628241]], [[2.0919640, 5.4322720, 5.4127790, 4.8616511]]]]

Expected (Unparsed): [[[[4.4267655427865,4.2434792341735,6.249060893773501,4.662235136268]],[[4.890403082790499,3.4261592920785002,4.639510795723501,5.0628241031995]],[[2.0919640081394997,5.432272022398,5.4127789731405,4.861651086237001]]]]

Actual:   [[[[4.4268, 4.2435, 6.2491, 4.6623]], [[4.8905, 3.4262, 4.6396, 5.0629]], [[2.092, 5.4323, 5.4128, 4.8617]]]]

Expected: [[[[4.4268, 4.2435, 6.2491, 4.6623]], [[4.8905, 3.4262, 4.6396, 5.0629]], [[2.092, 5.4323, 5.4128, 4.8617]]]]