import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Up_47483 = tf.keras.layers.Input(shape=([4, 4, 1, 3]))
in0Con68722 = tf.keras.layers.Input(shape=([4, 4, 1]))
in0Add97439 = tf.keras.layers.Input(shape=([1, 2]))
in1Add97439 = tf.keras.layers.Input(shape=([1, 2]))

Up_47483 = keras.layers.UpSampling3D(size=(1, 1, 1), name = 'Up_47483', )(in0Up_47483)
Res51271 = keras.layers.Reshape((4, 4, 3), name = 'Res51271', )(Up_47483)
Con68722 = keras.layers.Concatenate(axis=3, name = 'Con68722', )([Res51271,in0Con68722])
Add97439 = keras.layers.Add(name = 'Add97439', )([in0Add97439,in1Add97439])
Res81531 = keras.layers.Reshape((1, 2, 1), name = 'Res81531', )(Add97439)
Loc46508 = keras.layers.LocallyConnected2D(4, (1, 2),strides=(1, 1), name = 'Loc46508', )(Res81531)
Zer74879 = keras.layers.ZeroPadding2D(padding=((3, 0), (3, 0)), name = 'Zer74879', )(Loc46508)
Mul50235 = keras.layers.Multiply(name = 'Mul50235', )([Con68722,Zer74879])
model = tf.keras.models.Model(inputs=[in0Up_47483,in0Con68722,in0Add97439,in1Add97439], outputs=Mul50235)
w = model.get_layer('Loc46508').get_weights() 
w[0] = np.array([[[0.1616, 0.4775, 0.1745, 0.384], [0.8633, 0.9342, 0.9495, 0.2706]]])
w[1] = np.array([[[0, 0, 0, 0]]])
model.get_layer('Loc46508').set_weights(w) 
in0Up_47483 = tf.constant([[[[[1.8075, 1.3128, 1.456]], [[1.6012, 1.8542, 1.2329]], [[1.1939, 1.8177, 1.9535]], [[1.1969, 1.6345, 1.6714]]], [[[1.2041, 1.5862, 1.9219]], [[1.0783, 1.8553, 1.7565]], [[1.0747, 1.3696, 1.5249]], [[1.9887, 1.9026, 1.1189]]], [[[1.5666, 1.3568, 1.8679]], [[1.4905, 1.1184, 1.2152]], [[1.3063, 1.2176, 1.2009]], [[1.2105, 1.533, 1.4126]]], [[[1.8695, 1.9452, 1.7535]], [[1.0249, 1.8233, 1.6816]], [[1.3677, 1.9137, 1.0677]], [[1.7656, 1.2134, 1.1835]]]]])
in0Con68722 = tf.constant([[[[0.5638], [0.0825], [0.4208], [0.8163]], [[0.4488], [0.7877], [0.4], [0.4153]], [[0.1253], [0.7354], [0.9417], [0.7625]], [[0.1286], [0.2466], [0.0312], [0.3872]]]])
in0Add97439 = tf.constant([[[0.1949, 0.7681]]])
in1Add97439 = tf.constant([[[0.5287, 0.6418]]])
print (np.array2string(model.predict([in0Up_47483,in0Con68722,in0Add97439,in1Add97439],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul50235.png')

LUp_47483 = up_sampling3D_layer([[[[[1.8075, 1.3128, 1.456]], [[1.6012, 1.8542, 1.2329]], [[1.1939, 1.8177, 1.9535]], [[1.1969, 1.6345, 1.6714]]], [[[1.2041, 1.5862, 1.9219]], [[1.0783, 1.8553, 1.7565]], [[1.0747, 1.3696, 1.5249]], [[1.9887, 1.9026, 1.1189]]], [[[1.5666, 1.3568, 1.8679]], [[1.4905, 1.1184, 1.2152]], [[1.3063, 1.2176, 1.2009]], [[1.2105, 1.533, 1.4126]]], [[[1.8695, 1.9452, 1.7535]], [[1.0249, 1.8233, 1.6816]], [[1.3677, 1.9137, 1.0677]], [[1.7656, 1.2134, 1.1835]]]]], 1, 1, 1, Up_47483), 
LRes51271 = reshape_layer(Up_47483, [4, 4, 3], Res51271), 
LCon68722 = concatenate_layer([Res51271,[[[[0.5638], [0.0825], [0.4208], [0.8163]], [[0.4488], [0.7877], [0.4], [0.4153]], [[0.1253], [0.7354], [0.9417], [0.7625]], [[0.1286], [0.2466], [0.0312], [0.3872]]]]], 3, Con68722), 
LAdd97439 = add_layer([[[[0.1949, 0.7681]]], [[[0.5287, 0.6418]]]], Add97439), 
LRes81531 = reshape_layer(Add97439, [1, 2, 1], Res81531), 
LLoc46508 = locally_connected2D_layer(Res81531, 1, 2,[[[0.1616, 0.4775, 0.1745, 0.384], [0.8633, 0.9342, 0.9495, 0.2706]]],[[[0, 0, 0, 0]]], 1, 1, Loc46508), 
LZer74879 = zero_padding2D_layer(Loc46508, 3, 0, 3, 0, Zer74879), 
LMul50235 = multiply_layer([Con68722,Zer74879], Mul50235), 
exec_layers([LUp_47483,LRes51271,LCon68722,LAdd97439,LRes81531,LLoc46508,LZer74879,LMul50235],["Up_47483","Res51271","Con68722","Add97439","Res81531","Loc46508","Zer74879","Mul50235"],Mul50235,"Mul50235")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [2.3554877, 2.0174566, 1.7337900, 0.2553125]]]]

Expected (Unparsed): [[[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[2.355487719208,2.017456573572,1.7337899238749999,0.25531245484799997]]]]

Actual:   [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2.3555, 2.0175, 1.7338, 0.2554]]]]

Expected: [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2.3555, 2.0175, 1.7338, 0.2554]]]]