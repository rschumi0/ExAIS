import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro52666 = tf.keras.layers.Input(shape=([4, 3, 3, 4]))
in0Max25983 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Max25983 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Con89115 = tf.keras.layers.Input(shape=([23]))

Cro52666 = keras.layers.Cropping3D(cropping=((1, 1), (0, 0), (1, 1)), name = 'Cro52666', )(in0Cro52666)
Res76607 = keras.layers.Reshape((2, 3, 4), name = 'Res76607', )(Cro52666)
Res9958 = keras.layers.Reshape((2, 12), name = 'Res9958', )(Res76607)
Fla18526 = keras.layers.Flatten(name = 'Fla18526', )(Res9958)
Max25983 = keras.layers.Maximum(name = 'Max25983', )([in0Max25983,in1Max25983])
Res87032 = keras.layers.Reshape((2, 2, 4), name = 'Res87032', )(Max25983)
Res50387 = keras.layers.Reshape((2, 8), name = 'Res50387', )(Res87032)
Sep49826 = keras.layers.SeparableConv1D(3, (2),strides=(2), padding='valid', name = 'Sep49826', )(Res50387)
Res86552 = keras.layers.Reshape((1, 3, 1), name = 'Res86552', )(Sep49826)
Glo72394 = keras.layers.GlobalAveragePooling2D(name = 'Glo72394', )(Res86552)
Thr64336 = keras.layers.ThresholdedReLU(theta=2.2401414131403103, name = 'Thr64336', )(Glo72394)
Con89115 = keras.layers.Concatenate(axis=1, name = 'Con89115', )([Thr64336,in0Con89115])
Mul67083 = keras.layers.Multiply(name = 'Mul67083', )([Fla18526,Con89115])
model = tf.keras.models.Model(inputs=[in0Cro52666,in0Max25983,in1Max25983,in0Con89115], outputs=Mul67083)
w = model.get_layer('Sep49826').get_weights() 
w[0] = np.array([[[0.4323], [0.8352], [0.4977], [0.6992], [0.6179], [0.358], [0.2961], [0.472]], [[0.1504], [0.9331], [0.516], [0.0045], [0.0332], [0.3101], [0.2755], [0.5124]]])
w[1] = np.array([[[0.1935, 0.6794, 0.6359], [0.9624, 0.7129, 0.6185], [0.7241, 0.6703, 0.3021], [0.918, 0.4755, 0.3552], [0.8455, 0.7532, 0.6269], [0.9499, 0.6256, 0.5849], [0.0333, 0.3861, 0.9683], [0.225, 0.7059, 0.6885]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep49826').set_weights(w) 
in0Cro52666 = tf.constant([[[[[1.3399, 1.5871, 1.1189, 1.5179], [1.1564, 1.4499, 1.9797, 1.0086], [1.8024, 1.4638, 1.8554, 1.1428]], [[1.8964, 1.025, 1.3241, 1.9966], [1.6612, 1.0841, 1.3671, 1.3896], [1.5961, 1.9373, 1.412, 1.0856]], [[1.3668, 1.0013, 1.1856, 1.1981], [1.4842, 1.6681, 1.0861, 1.3501], [1.1562, 1.8429, 1.295, 1.4691]]], [[[1.1618, 1.1769, 1.5199, 1.8396], [1.7171, 1.3266, 1.0829, 1.1777], [1.0831, 1.7934, 1.0522, 1.0478]], [[1.0987, 1.0265, 1.2515, 1.8968], [1.9146, 1.5107, 1.2744, 1.3469], [1.9477, 1.5011, 1.0852, 1.1571]], [[1.4827, 1.915, 1.3883, 1.4419], [1.4047, 1.6482, 1.7169, 1.3186], [1.2634, 1.2424, 1.1054, 1.1416]]], [[[1.2407, 1.3979, 1.2893, 1.8808], [1.6237, 1.3002, 1.6058, 1.0005], [1.067, 1.1086, 1.1548, 1.4052]], [[1.2711, 1.2407, 1.3279, 1.6302], [1.7005, 1.2791, 1.5088, 1.4788], [1.6171, 1.4267, 1.607, 1.7321]], [[1.0156, 1.4388, 1.1011, 1.3912], [1.0131, 1.8755, 1.4324, 1.1515], [1.8655, 1.3308, 1.9197, 1.4533]]], [[[1.0652, 1.022, 1.8442, 1.5049], [1.9045, 1.7509, 1.9918, 1.1332], [1.4848, 1.786, 1.7369, 1.18]], [[1.3941, 1.6544, 1.6957, 1.4336], [1.1825, 1.1853, 1.0915, 1.7606], [1.3233, 1.3962, 1.2296, 1.1884]], [[1.5614, 1.9804, 1.904, 1.1752], [1.4274, 1.2153, 1.1302, 1.2024], [1.2181, 1.0904, 1.3306, 1.1229]]]]])
in0Max25983 = tf.constant([[[[[0.935, 0.3291], [0.9873, 0.4118]], [[0.5073, 0.7682], [0.8199, 0.5741]]], [[[0.1274, 0.2486], [0.7474, 0.4898]], [[0.678, 0.772], [0.2492, 0.4]]]]])
in1Max25983 = tf.constant([[[[[0.0402, 0.1795], [0.2515, 0.5734]], [[0.5371, 0.0241], [0.3376, 0.4289]]], [[[0.8912, 0.6218], [0.902, 0.0382]], [[0.8491, 0.4924], [0.8529, 0.4822]]]]])
in0Con89115 = tf.constant([[0.9724, 0.9465, 0.2792, 0.6721, 0.1801, 0.9129, 0.5807, 0.3902, 0.2929, 0.4211, 0.2546, 0.1353, 0.6035, 0.4759, 0.3207, 0.1131, 0.2953, 0.1322, 0.064, 0.3058, 0.0827, 0.9238, 0.5453]])
print (np.array2string(model.predict([in0Cro52666,in0Max25983,in1Max25983,in0Con89115],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul67083.png')

LCro52666 = cropping3D_layer([[[[[1.3399, 1.5871, 1.1189, 1.5179], [1.1564, 1.4499, 1.9797, 1.0086], [1.8024, 1.4638, 1.8554, 1.1428]], [[1.8964, 1.025, 1.3241, 1.9966], [1.6612, 1.0841, 1.3671, 1.3896], [1.5961, 1.9373, 1.412, 1.0856]], [[1.3668, 1.0013, 1.1856, 1.1981], [1.4842, 1.6681, 1.0861, 1.3501], [1.1562, 1.8429, 1.295, 1.4691]]], [[[1.1618, 1.1769, 1.5199, 1.8396], [1.7171, 1.3266, 1.0829, 1.1777], [1.0831, 1.7934, 1.0522, 1.0478]], [[1.0987, 1.0265, 1.2515, 1.8968], [1.9146, 1.5107, 1.2744, 1.3469], [1.9477, 1.5011, 1.0852, 1.1571]], [[1.4827, 1.915, 1.3883, 1.4419], [1.4047, 1.6482, 1.7169, 1.3186], [1.2634, 1.2424, 1.1054, 1.1416]]], [[[1.2407, 1.3979, 1.2893, 1.8808], [1.6237, 1.3002, 1.6058, 1.0005], [1.067, 1.1086, 1.1548, 1.4052]], [[1.2711, 1.2407, 1.3279, 1.6302], [1.7005, 1.2791, 1.5088, 1.4788], [1.6171, 1.4267, 1.607, 1.7321]], [[1.0156, 1.4388, 1.1011, 1.3912], [1.0131, 1.8755, 1.4324, 1.1515], [1.8655, 1.3308, 1.9197, 1.4533]]], [[[1.0652, 1.022, 1.8442, 1.5049], [1.9045, 1.7509, 1.9918, 1.1332], [1.4848, 1.786, 1.7369, 1.18]], [[1.3941, 1.6544, 1.6957, 1.4336], [1.1825, 1.1853, 1.0915, 1.7606], [1.3233, 1.3962, 1.2296, 1.1884]], [[1.5614, 1.9804, 1.904, 1.1752], [1.4274, 1.2153, 1.1302, 1.2024], [1.2181, 1.0904, 1.3306, 1.1229]]]]], 1, 1, 0, 0, 1, 1, Cro52666), 
LRes76607 = reshape_layer(Cro52666, [2, 3, 4], Res76607), 
LRes9958 = reshape_layer(Res76607, [2, 12], Res9958), 
LFla18526 = flatten_layer(Res9958, Fla18526), 
LMax25983 = maximum_layer([[[[[[0.935, 0.3291], [0.9873, 0.4118]], [[0.5073, 0.7682], [0.8199, 0.5741]]], [[[0.1274, 0.2486], [0.7474, 0.4898]], [[0.678, 0.772], [0.2492, 0.4]]]]], [[[[[0.0402, 0.1795], [0.2515, 0.5734]], [[0.5371, 0.0241], [0.3376, 0.4289]]], [[[0.8912, 0.6218], [0.902, 0.0382]], [[0.8491, 0.4924], [0.8529, 0.4822]]]]]], Max25983), 
LRes87032 = reshape_layer(Max25983, [2, 2, 4], Res87032), 
LRes50387 = reshape_layer(Res87032, [2, 8], Res50387), 
LSep49826 = separable_conv1D_layer(Res50387, 2,[[[[0.4323], [0.8352], [0.4977], [0.6992], [0.6179], [0.358], [0.2961], [0.472]], [[0.1504], [0.9331], [0.516], [0.0045], [0.0332], [0.3101], [0.2755], [0.5124]]],[[[0.1935, 0.6794, 0.6359], [0.9624, 0.7129, 0.6185], [0.7241, 0.6703, 0.3021], [0.918, 0.4755, 0.3552], [0.8455, 0.7532, 0.6269], [0.9499, 0.6256, 0.5849], [0.0333, 0.3861, 0.9683], [0.225, 0.7059, 0.6885]]]],[0, 0, 0], 2, false, Sep49826), 
LRes86552 = reshape_layer(Sep49826, [1, 3, 1], Res86552), 
LGlo72394 = global_average_pooling2D_layer(Res86552, Glo72394), 
LThr64336 = thresholded_relu_layer(Glo72394, 2.2401414131403103, Thr64336), 
LCon89115 = concatenate_layer([Thr64336,[[0.9724, 0.9465, 0.2792, 0.6721, 0.1801, 0.9129, 0.5807, 0.3902, 0.2929, 0.4211, 0.2546, 0.1353, 0.6035, 0.4759, 0.3207, 0.1131, 0.2953, 0.1322, 0.064, 0.3058, 0.0827, 0.9238, 0.5453]]], 1, Con89115), 
LMul67083 = multiply_layer([Fla18526,Con89115], Mul67083), 
exec_layers([LCro52666,LRes76607,LRes9958,LFla18526,LMax25983,LRes87032,LRes50387,LSep49826,LRes86552,LGlo72394,LThr64336,LCon89115,LMul67083],["Cro52666","Res76607","Res9958","Fla18526","Max25983","Res87032","Res50387","Sep49826","Res86552","Glo72394","Thr64336","Con89115","Mul67083"],Mul67083,"Mul67083")

Actual (Unparsed): [[4.8744006, 1.2899858, 1.0249649, 0.3288138, 1.2868027, 0.2720771, 1.1633997, 0.7821448, 0.5481139, 0.4827578, 0.7229866, 0.3357156, 0.2196866, 0.7846707, 0.7642002, 0.3208603, 0.1923266, 0.3777182, 0.1994634, 0.0946432, 0.3098060, 0.1551038, 1.3232511, 0.6279130]]

Expected (Unparsed): [[4.874400469133948,1.2899858400000002,1.02496485,0.32881383999999997,1.2868026600000002,0.27207707,1.1633997600000001,0.78214483,0.54811394,0.48275778,0.72298659,0.33571555999999997,0.21968661,0.7846707,0.76420022,0.32086034999999996,0.19232655,0.37771823,0.19946336,0.0946432,0.30980598,0.15510385,1.32325112,0.62791295]]

Actual:   [[4.8745, 1.29, 1.025, 0.3289, 1.2869, 0.2721, 1.1634, 0.7822, 0.5482, 0.4828, 0.723, 0.3358, 0.2197, 0.7847, 0.7643, 0.3209, 0.1924, 0.3778, 0.1995, 0.0947, 0.3099, 0.1552, 1.3233, 0.628]]

Expected: [[4.8745, 1.29, 1.025, 0.3289, 1.2869, 0.2721, 1.1634, 0.7822, 0.5482, 0.4828, 0.723, 0.3358, 0.2197, 0.7847, 0.7643, 0.3209, 0.1924, 0.3778, 0.1995, 0.0947, 0.3099, 0.1552, 1.3233, 0.628]]