import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add22357 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Add22357 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Sub98393 = tf.keras.layers.Input(shape=([3, 2, 3, 2]))
in1Sub98393 = tf.keras.layers.Input(shape=([3, 2, 3, 2]))
in0Con27246 = tf.keras.layers.Input(shape=([15]))

Add22357 = keras.layers.Add(name = 'Add22357', )([in0Add22357,in1Add22357])
Res21012 = keras.layers.Reshape((2, 2, 4), name = 'Res21012', )(Add22357)
Res75135 = keras.layers.Reshape((2, 8), name = 'Res75135', )(Res21012)
Fla68854 = keras.layers.Flatten(name = 'Fla68854', )(Res75135)
Sub98393 = keras.layers.Subtract(name = 'Sub98393', )([in0Sub98393,in1Sub98393])
Res6563 = keras.layers.Reshape((3, 2, 6), name = 'Res6563', )(Sub98393)
PRe45680 = keras.layers.PReLU(name = 'PRe45680', )(Res6563)
Res65022 = keras.layers.Reshape((3, 2, 6, 1), name = 'Res65022', )(PRe45680)
Glo80485 = keras.layers.GlobalMaxPool3D(name = 'Glo80485', )(Res65022)
Con27246 = keras.layers.Concatenate(axis=1, name = 'Con27246', )([Glo80485,in0Con27246])
Mul96196 = keras.layers.Multiply(name = 'Mul96196', )([Fla68854,Con27246])
model = tf.keras.models.Model(inputs=[in0Add22357,in1Add22357,in0Sub98393,in1Sub98393,in0Con27246], outputs=Mul96196)
w = model.get_layer('PRe45680').get_weights() 
w[0] = np.array([[[0.4872, 0.631, 0.9534, 0.0582, 0.2817, 0.3713], [0.3679, 0.5471, 0.5023, 0.6921, 0.4145, 0.1284]], [[0.4201, 0.7424, 0.9261, 0.1716, 0.567, 0.8413], [0.0327, 0.0663, 0.6421, 0.2444, 0.4985, 0.7642]], [[0.7041, 0.3907, 0.3759, 0.1539, 0.7991, 0.8154], [0.9116, 0.8106, 0.7871, 0.7306, 0.9688, 0.3096]]])
model.get_layer('PRe45680').set_weights(w) 
in0Add22357 = tf.constant([[[[[0.3819, 0.8294], [0.1436, 0.0375]], [[0.9761, 0.3783], [0.2548, 0.3072]]], [[[0.2985, 0.0383], [0.6898, 0.4381]], [[0.892, 0.2088], [0.6604, 0.8571]]]]])
in1Add22357 = tf.constant([[[[[0.1854, 0.8616], [0.545, 0.6993]], [[0.2601, 0.3655], [0.759, 0.0548]]], [[[0.6364, 0.3093], [0.3632, 0.1866]], [[0.7588, 0.5431], [0.0887, 0.0364]]]]])
in0Sub98393 = tf.constant([[[[[0.205, 0.7636], [0.1312, 0.894], [0.9019, 0.232]], [[0.1507, 0.3189], [0.7906, 0.6321], [0.4025, 0.2808]]], [[[0.4507, 0.6504], [0.8215, 0.0064], [0.1686, 0.5936]], [[0.181, 0.2122], [0.8108, 0.2446], [0.1591, 0.2362]]], [[[0.6563, 0.203], [0.2563, 0.0865], [0.0254, 0.1555]], [[0.0304, 0.5701], [0.1502, 0.8793], [0.042, 0.481]]]]])
in1Sub98393 = tf.constant([[[[[0.2289, 0.2934], [0.2346, 0.2895], [0.0239, 0.5418]], [[0.216, 0.8974], [0.6744, 0.9171], [0.0491, 0.8008]]], [[[0.6255, 0.4171], [0.7156, 0.4407], [0.6974, 0.8605]], [[0.3729, 0.6069], [0.3619, 0.7854], [0.8864, 0.512]]], [[[0.2303, 0.803], [0.8945, 0.5544], [0.6086, 0.6849]], [[0.8367, 0.8476], [0.7298, 0.2263], [0.9586, 0.311]]]]])
in0Con27246 = tf.constant([[0.2686, 0.5943, 0.3696, 0.6264, 0.3458, 0.6752, 0.0362, 0.488, 0.5699, 0.268, 0.5, 0.618, 0.7214, 0.5338, 0.8423]])
print (np.array2string(model.predict([in0Add22357,in1Add22357,in0Sub98393,in1Sub98393,in0Con27246],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul96196.png')

LAdd22357 = add_layer([[[[[[0.3819, 0.8294], [0.1436, 0.0375]], [[0.9761, 0.3783], [0.2548, 0.3072]]], [[[0.2985, 0.0383], [0.6898, 0.4381]], [[0.892, 0.2088], [0.6604, 0.8571]]]]], [[[[[0.1854, 0.8616], [0.545, 0.6993]], [[0.2601, 0.3655], [0.759, 0.0548]]], [[[0.6364, 0.3093], [0.3632, 0.1866]], [[0.7588, 0.5431], [0.0887, 0.0364]]]]]], Add22357), 
LRes21012 = reshape_layer(Add22357, [2, 2, 4], Res21012), 
LRes75135 = reshape_layer(Res21012, [2, 8], Res75135), 
LFla68854 = flatten_layer(Res75135, Fla68854), 
LSub98393 = subtract_layer([[[[[0.205, 0.7636], [0.1312, 0.894], [0.9019, 0.232]], [[0.1507, 0.3189], [0.7906, 0.6321], [0.4025, 0.2808]]], [[[0.4507, 0.6504], [0.8215, 0.0064], [0.1686, 0.5936]], [[0.181, 0.2122], [0.8108, 0.2446], [0.1591, 0.2362]]], [[[0.6563, 0.203], [0.2563, 0.0865], [0.0254, 0.1555]], [[0.0304, 0.5701], [0.1502, 0.8793], [0.042, 0.481]]]]], [[[[[0.2289, 0.2934], [0.2346, 0.2895], [0.0239, 0.5418]], [[0.216, 0.8974], [0.6744, 0.9171], [0.0491, 0.8008]]], [[[0.6255, 0.4171], [0.7156, 0.4407], [0.6974, 0.8605]], [[0.3729, 0.6069], [0.3619, 0.7854], [0.8864, 0.512]]], [[[0.2303, 0.803], [0.8945, 0.5544], [0.6086, 0.6849]], [[0.8367, 0.8476], [0.7298, 0.2263], [0.9586, 0.311]]]]], Sub98393), 
LRes6563 = reshape_layer(Sub98393, [3, 2, 6], Res6563), 
LPRe45680 = prelu_layer(Res6563, [[[0.4872, 0.631, 0.9534, 0.0582, 0.2817, 0.3713], [0.3679, 0.5471, 0.5023, 0.6921, 0.4145, 0.1284]], [[0.4201, 0.7424, 0.9261, 0.1716, 0.567, 0.8413], [0.0327, 0.0663, 0.6421, 0.2444, 0.4985, 0.7642]], [[0.7041, 0.3907, 0.3759, 0.1539, 0.7991, 0.8154], [0.9116, 0.8106, 0.7871, 0.7306, 0.9688, 0.3096]]], PRe45680), 
LRes65022 = reshape_layer(PRe45680, [3, 2, 6, 1], Res65022), 
LGlo80485 = global_max_pool3D_layer(Res65022, Glo80485), 
LCon27246 = concatenate_layer([Glo80485,[[0.2686, 0.5943, 0.3696, 0.6264, 0.3458, 0.6752, 0.0362, 0.488, 0.5699, 0.268, 0.5, 0.618, 0.7214, 0.5338, 0.8423]]], 1, Con27246), 
LMul96196 = multiply_layer([Fla68854,Con27246], Mul96196), 
exec_layers([LAdd22357,LRes21012,LRes75135,LFla68854,LSub98393,LRes6563,LPRe45680,LRes65022,LGlo80485,LCon27246,LMul96196],["Add22357","Res21012","Res75135","Fla68854","Sub98393","Res6563","PRe45680","Res65022","Glo80485","Con27246","Mul96196"],Mul96196,"Mul96196")

Actual (Unparsed): [[0.4980894, 0.4542026, 0.4092350, 0.2723213, 0.7743557, 0.2572061, 0.6845177, 0.0131044, 0.4562312, 0.1980972, 0.2822040, 0.3123500, 1.0201944, 0.5424207, 0.3998696, 0.7525951]]

Expected (Unparsed): [[0.4980894,0.4542026,0.4092349800000001,0.27232128,0.7743556799999999,0.25720604,0.6845177600000001,0.0131044,0.45623119999999995,0.19809724,0.282204,0.31235,1.0201944,0.54242066,0.39986958000000006,0.75259505]]

Actual:   [[0.4981, 0.4543, 0.4093, 0.2724, 0.7744, 0.2573, 0.6846, 0.0132, 0.4563, 0.1981, 0.2823, 0.3124, 1.0202, 0.5425, 0.3999, 0.7526]]

Expected: [[0.4981, 0.4543, 0.4093, 0.2724, 0.7744, 0.2573, 0.6846, 0.0132, 0.4563, 0.1981, 0.2823, 0.3124, 1.0202, 0.5425, 0.3999, 0.7526]]