import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min91469 = tf.keras.layers.Input(shape=([1, 1]))
in1Min91469 = tf.keras.layers.Input(shape=([1, 1]))
in0Con69339 = tf.keras.layers.Input(shape=([1, 1]))
in0Min59386 = tf.keras.layers.Input(shape=([2, 1, 2]))
in1Min59386 = tf.keras.layers.Input(shape=([2, 1, 2]))
in0Min62268 = tf.keras.layers.Input(shape=([1, 2]))
in1Min62268 = tf.keras.layers.Input(shape=([1, 2]))

Min91469 = keras.layers.Minimum(name = 'Min91469', )([in0Min91469,in1Min91469])
Con69339 = keras.layers.Concatenate(axis=2, name = 'Con69339', )([Min91469,in0Con69339])
Min59386 = keras.layers.Minimum(name = 'Min59386', )([in0Min59386,in1Min59386])
Res10907 = keras.layers.Reshape((2, 2), name = 'Res10907', )(Min59386)
Dot17653 = keras.layers.Dot(axes=(2, 2), name = 'Dot17653', )([Con69339,Res10907])
Res92703 = keras.layers.Reshape((1, 2, 1), name = 'Res92703', )(Dot17653)
Max11623 = keras.layers.MaxPool2D(pool_size=(1, 1), name = 'Max11623', )(Res92703)
Ave80780 = keras.layers.AveragePooling2D(pool_size=(1, 2), strides=(1, 1), padding='same', name = 'Ave80780', )(Max11623)
Res62585 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res62585', )(Ave80780)
Zer90588 = keras.layers.ZeroPadding3D(padding=((2, 0), (2, 0), (2, 0)), name = 'Zer90588', )(Res62585)
Min62268 = keras.layers.Minimum(name = 'Min62268', )([in0Min62268,in1Min62268])
Res24862 = keras.layers.Reshape((1, 2, 1), name = 'Res24862', )(Min62268)
Res88296 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res88296', )(Res24862)
Zer90423 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer90423', )(Res88296)
ReL4976 = keras.layers.ReLU(max_value=3.1896415098153637, negative_slope=3.393467442050111, threshold=7.694860226182523, name = 'ReL4976', )(Zer90423)
Min34549 = keras.layers.Minimum(name = 'Min34549', )([Zer90588,ReL4976])
model = tf.keras.models.Model(inputs=[in0Min91469,in1Min91469,in0Con69339,in0Min59386,in1Min59386,in0Min62268,in1Min62268], outputs=Min34549)
in0Min91469 = tf.constant([[[0.5585]]])
in1Min91469 = tf.constant([[[0.0541]]])
in0Con69339 = tf.constant([[[0.5526]]])
in0Min59386 = tf.constant([[[[0.6618, 0.3167]], [[0.3851, 0.6233]]]])
in1Min59386 = tf.constant([[[[0.4512, 0.2131]], [[0.1945, 0.5775]]]])
in0Min62268 = tf.constant([[[0.3819, 0.8426]]])
in1Min62268 = tf.constant([[[0.7236, 0.9688]]])
print (np.array2string(model.predict([in0Min91469,in1Min91469,in0Con69339,in0Min59386,in1Min59386,in0Min62268,in1Min62268],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min34549.png')

LMin91469 = minimum_layer([[[[0.5585]]], [[[0.0541]]]], Min91469), 
LCon69339 = concatenate_layer([Min91469,[[[0.5526]]]], 2, Con69339), 
LMin59386 = minimum_layer([[[[[0.6618, 0.3167]], [[0.3851, 0.6233]]]], [[[[0.4512, 0.2131]], [[0.1945, 0.5775]]]]], Min59386), 
LRes10907 = reshape_layer(Min59386, [2, 2], Res10907), 
LDot17653 = dot_layer(Con69339,Res10907, 2, 2, Dot17653), 
LRes92703 = reshape_layer(Dot17653, [1, 2, 1], Res92703), 
LMax11623 = max_pool2D_layer(Res92703, 1, 1, Max11623), 
LAve80780 = average_pooling2D_layer(Max11623, 1, 2, 1, 1, true, Ave80780), 
LRes62585 = reshape_layer(Ave80780, [1, 2, 1, 1], Res62585), 
LZer90588 = zero_padding3D_layer(Res62585, 2, 0, 2, 0, 2, 0, Zer90588), 
LMin62268 = minimum_layer([[[[0.3819, 0.8426]]], [[[0.7236, 0.9688]]]], Min62268), 
LRes24862 = reshape_layer(Min62268, [1, 2, 1], Res24862), 
LRes88296 = reshape_layer(Res24862, [1, 2, 1, 1], Res88296), 
LZer90423 = zero_padding3D_layer(Res88296, 1, 1, 1, 1, 1, 1, Zer90423), 
LReL4976 = relu_layer(Zer90423, 3.1896415098153637, 3.393467442050111, 7.694860226182523, ReL4976), 
LMin34549 = minimum_layer([Zer90588,ReL4976], Min34549), 
exec_layers([LMin91469,LCon69339,LMin59386,LRes10907,LDot17653,LRes92703,LMax11623,LAve80780,LRes62585,LZer90588,LMin62268,LRes24862,LRes88296,LZer90423,LReL4976,LMin34549],["Min91469","Con69339","Min59386","Res10907","Dot17653","Res92703","Max11623","Ave80780","Res62585","Zer90588","Min62268","Res24862","Res88296","Zer90423","ReL4976","Min34549"],Min34549,"Min34549")

Actual (Unparsed): [[[[[-26.1122576], [-26.1122576], [-26.1122576]], [[-26.1122576], [-26.1122576], [-26.1122576]], [[-26.1122576], [-26.1122576], [-26.1122576]], [[-26.1122576], [-26.1122576], [-26.1122576]]], [[[-26.1122576], [-26.1122576], [-26.1122576]], [[-26.1122576], [-24.8162924], [-26.1122576]], [[-26.1122576], [-23.2529220], [-26.1122576]], [[-26.1122576], [-26.1122576], [-26.1122576]]], [[[-26.1122576], [-26.1122576], [-26.1122576]], [[-26.1122576], [-26.1122576], [-26.1122576]], [[-26.1122576], [-26.1122576], [-26.1122576]], [[-26.1122576], [-26.1122576], [-26.1122576]]]]]

Expected (Unparsed): [[[[[-26.112257648676742],[-26.112257648676742],[-26.112257648676742]],[[-26.112257648676742],[-26.112257648676742],[-26.112257648676742]],[[-26.112257648676742],[-26.112257648676742],[-26.112257648676742]],[[-26.112257648676742],[-26.112257648676742],[-26.112257648676742]]],[[[-26.112257648676742],[-26.112257648676742],[-26.112257648676742]],[[-26.112257648676742],[-24.816292432557805],[-26.112257648676742]],[[-26.112257648676742],[-23.25292198200532],[-26.112257648676742]],[[-26.112257648676742],[-26.112257648676742],[-26.112257648676742]]],[[[-26.112257648676742],[-26.112257648676742],[-26.112257648676742]],[[-26.112257648676742],[-26.112257648676742],[-26.112257648676742]],[[-26.112257648676742],[-26.112257648676742],[-26.112257648676742]],[[-26.112257648676742],[-26.112257648676742],[-26.112257648676742]]]]]

Actual:   [[[[[-26.1122], [-26.1122], [-26.1122]], [[-26.1122], [-26.1122], [-26.1122]], [[-26.1122], [-26.1122], [-26.1122]], [[-26.1122], [-26.1122], [-26.1122]]], [[[-26.1122], [-26.1122], [-26.1122]], [[-26.1122], [-24.8162], [-26.1122]], [[-26.1122], [-23.2529], [-26.1122]], [[-26.1122], [-26.1122], [-26.1122]]], [[[-26.1122], [-26.1122], [-26.1122]], [[-26.1122], [-26.1122], [-26.1122]], [[-26.1122], [-26.1122], [-26.1122]], [[-26.1122], [-26.1122], [-26.1122]]]]]

Expected: [[[[[-26.1122], [-26.1122], [-26.1122]], [[-26.1122], [-26.1122], [-26.1122]], [[-26.1122], [-26.1122], [-26.1122]], [[-26.1122], [-26.1122], [-26.1122]]], [[[-26.1122], [-26.1122], [-26.1122]], [[-26.1122], [-24.8162], [-26.1122]], [[-26.1122], [-23.2529], [-26.1122]], [[-26.1122], [-26.1122], [-26.1122]]], [[[-26.1122], [-26.1122], [-26.1122]], [[-26.1122], [-26.1122], [-26.1122]], [[-26.1122], [-26.1122], [-26.1122]], [[-26.1122], [-26.1122], [-26.1122]]]]]