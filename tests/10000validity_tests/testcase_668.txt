import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max16523 = tf.keras.layers.Input(shape=([2, 1]))
in1Max16523 = tf.keras.layers.Input(shape=([2, 1]))
in0Con72071 = tf.keras.layers.Input(shape=([2, 9]))
in0Den95440 = tf.keras.layers.Input(shape=([2, 5, 3]))
in0Max14677 = tf.keras.layers.Input(shape=([2, 2]))
in1Max14677 = tf.keras.layers.Input(shape=([2, 2]))
in0Con57809 = tf.keras.layers.Input(shape=([2, 8]))
in0Mul10059 = tf.keras.layers.Input(shape=([2, 1]))
in1Mul10059 = tf.keras.layers.Input(shape=([2, 1]))
in0Con19696 = tf.keras.layers.Input(shape=([4, 9]))

Max16523 = keras.layers.Maximum(name = 'Max16523', )([in0Max16523,in1Max16523])
Con72071 = keras.layers.Concatenate(axis=2, name = 'Con72071', )([Max16523,in0Con72071])
Den95440 = keras.layers.Dense(2,name = 'Den95440', )(in0Den95440)
Res80720 = keras.layers.Reshape((2, 10), name = 'Res80720', )(Den95440)
Max14677 = keras.layers.Maximum(name = 'Max14677', )([in0Max14677,in1Max14677])
Con57809 = keras.layers.Concatenate(axis=2, name = 'Con57809', )([Max14677,in0Con57809])
Min18682 = keras.layers.Minimum(name = 'Min18682', )([Res80720,Con57809])
Mul11537 = keras.layers.Multiply(name = 'Mul11537', )([Con72071,Min18682])
Zer38976 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer38976', )(Mul11537)
Mul10059 = keras.layers.Multiply(name = 'Mul10059', )([in0Mul10059,in1Mul10059])
Zer34717 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer34717', )(Mul10059)
Con19696 = keras.layers.Concatenate(axis=2, name = 'Con19696', )([Zer34717,in0Con19696])
Max74772 = keras.layers.Maximum(name = 'Max74772', )([Zer38976,Con19696])
model = tf.keras.models.Model(inputs=[in0Max16523,in1Max16523,in0Con72071,in0Den95440,in0Max14677,in1Max14677,in0Con57809,in0Mul10059,in1Mul10059,in0Con19696], outputs=Max74772)
w = model.get_layer('Den95440').get_weights() 
w[0] = np.array([[0.9072, 0.5411], [0.0766, 0.9354], [0.3728, 0.8243]])
w[1] = np.array([0.7354, 0.6355])
model.get_layer('Den95440').set_weights(w) 
in0Max16523 = tf.constant([[[0.2679], [0.2027]]])
in1Max16523 = tf.constant([[[0.4068], [0.5382]]])
in0Con72071 = tf.constant([[[0.2555, 0.2526, 0.5783, 0.2562, 0.2998, 0.0527, 0.5507, 0.4266, 0.685], [0.6791, 0.1147, 0.1688, 0.5598, 0.0282, 0.6917, 0.8319, 0.1774, 0.5871]]])
in0Den95440 = tf.constant([[[[0.6409, 0.3391, 0.5932], [0.2829, 0.9216, 0.5216], [0.4973, 0.1562, 0.9372], [0.276, 0.6569, 0.7537], [0.4587, 0.8388, 0.8109]], [[0.5961, 0.954, 0.7573], [0.5757, 0.8819, 0.3459], [0.2631, 0.1766, 0.5772], [0.7616, 0.3041, 0.1188], [0.7784, 0.3781, 0.8504]]]])
in0Max14677 = tf.constant([[[0.5757, 0.3966], [0.383, 0.8455]]])
in1Max14677 = tf.constant([[[0.4445, 0.869], [0.7532, 0.9654]]])
in0Con57809 = tf.constant([[[0.8651, 0.856, 0.034, 0.3297, 0.9115, 0.977, 0.7445, 0.764], [0.647, 0.375, 0.982, 0.6127, 0.9661, 0.4779, 0.6021, 0.2782]]])
in0Mul10059 = tf.constant([[[0.4731], [0.7745]]])
in1Mul10059 = tf.constant([[[0.0256], [0.1703]]])
in0Con19696 = tf.constant([[[0.6191, 0.1642, 0.5632, 0.9958, 0.7773, 0.241, 0.8367, 0.1042, 0.6339], [0.0536, 0.413, 0.1385, 0.5351, 0.3403, 0.8772, 0.88, 0.8959, 0.3395], [0.0649, 0.0059, 0.3676, 0.0934, 0.7541, 0.3997, 0.4748, 0.6179, 0.2366], [0.4322, 0.4771, 0.8277, 0.271, 0.7488, 0.5216, 0.5258, 0.9949, 0.899]]])
print (np.array2string(model.predict([in0Max16523,in1Max16523,in0Con72071,in0Den95440,in0Max14677,in1Max14677,in0Con57809,in0Mul10059,in1Mul10059,in0Con19696],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max74772.png')

LMax16523 = maximum_layer([[[[0.2679], [0.2027]]], [[[0.4068], [0.5382]]]], Max16523), 
LCon72071 = concatenate_layer([Max16523,[[[0.2555, 0.2526, 0.5783, 0.2562, 0.2998, 0.0527, 0.5507, 0.4266, 0.685], [0.6791, 0.1147, 0.1688, 0.5598, 0.0282, 0.6917, 0.8319, 0.1774, 0.5871]]]], 2, Con72071), 
LDen95440 = dense_layer([[[[0.6409, 0.3391, 0.5932], [0.2829, 0.9216, 0.5216], [0.4973, 0.1562, 0.9372], [0.276, 0.6569, 0.7537], [0.4587, 0.8388, 0.8109]], [[0.5961, 0.954, 0.7573], [0.5757, 0.8819, 0.3459], [0.2631, 0.1766, 0.5772], [0.7616, 0.3041, 0.1188], [0.7784, 0.3781, 0.8504]]]], [[0.9072, 0.5411], [0.0766, 0.9354], [0.3728, 0.8243]],[0.7354, 0.6355], Den95440), 
LRes80720 = reshape_layer(Den95440, [2, 10], Res80720), 
LMax14677 = maximum_layer([[[[0.5757, 0.3966], [0.383, 0.8455]]], [[[0.4445, 0.869], [0.7532, 0.9654]]]], Max14677), 
LCon57809 = concatenate_layer([Max14677,[[[0.8651, 0.856, 0.034, 0.3297, 0.9115, 0.977, 0.7445, 0.764], [0.647, 0.375, 0.982, 0.6127, 0.9661, 0.4779, 0.6021, 0.2782]]]], 2, Con57809), 
LMin18682 = minimum_layer([Res80720,Con57809], Min18682), 
LMul11537 = multiply_layer([Con72071,Min18682], Mul11537), 
LZer38976 = zero_padding1D_layer(Mul11537, 2, 0, Zer38976), 
LMul10059 = multiply_layer([[[[0.4731], [0.7745]]], [[[0.0256], [0.1703]]]], Mul10059), 
LZer34717 = zero_padding1D_layer(Mul10059, 1, 1, Zer34717), 
LCon19696 = concatenate_layer([Zer34717,[[[0.6191, 0.1642, 0.5632, 0.9958, 0.7773, 0.241, 0.8367, 0.1042, 0.6339], [0.0536, 0.413, 0.1385, 0.5351, 0.3403, 0.8772, 0.88, 0.8959, 0.3395], [0.0649, 0.0059, 0.3676, 0.0934, 0.7541, 0.3997, 0.4748, 0.6179, 0.2366], [0.4322, 0.4771, 0.8277, 0.271, 0.7488, 0.5216, 0.5258, 0.9949, 0.899]]]], 2, Con19696), 
LMax74772 = maximum_layer([Zer38976,Con19696], Max74772), 
exec_layers([LMax16523,LCon72071,LDen95440,LRes80720,LMax14677,LCon57809,LMin18682,LMul11537,LZer38976,LMul10059,LZer34717,LCon19696,LMax74772],["Max16523","Con72071","Den95440","Res80720","Max14677","Con57809","Min18682","Mul11537","Zer38976","Mul10059","Zer34717","Con19696","Max74772"],Max74772,"Max74772")

Actual (Unparsed): [[[0.0000000, 0.6191000, 0.1642000, 0.5632000, 0.9958000, 0.7773000, 0.2410000, 0.8367000, 0.1042000, 0.6339000], [0.0121114, 0.0536000, 0.4130000, 0.1385000, 0.5351000, 0.3403000, 0.8772000, 0.8800000, 0.8959000, 0.3395000], [0.2341948, 0.2220295, 0.2185243, 0.4950248, 0.0934000, 0.7541000, 0.3997000, 0.5380339, 0.6179000, 0.5233400], [0.4053723, 0.6556031, 0.4771000, 0.8277000, 0.5497236, 0.7488000, 0.6682513, 0.5258000, 0.9949000, 0.8990000]]]

Expected (Unparsed): [[[0,0.6191,0.1642,0.5632,0.9958,0.7773,0.241,0.8367,0.1042,0.6339],[0.012111360000000002,0.0536,0.413,0.1385,0.5351,0.3403,0.8772,0.88,0.8959,0.3395],[0.23419476,0.2220295,0.21852426,0.49502480000000004,0.0934,0.7541,0.3997,0.5380339,0.6179,0.52334],[0.40537224,0.6556031400000001,0.4771,0.8277,0.5497236,0.7488,0.6682513699999999,0.5258,0.9949,0.899]]]

Actual:   [[[0, 0.6191, 0.1642, 0.5632, 0.9958, 0.7773, 0.241, 0.8367, 0.1042, 0.6339], [0.0122, 0.0536, 0.413, 0.1385, 0.5351, 0.3403, 0.8772, 0.88, 0.8959, 0.3395], [0.2342, 0.2221, 0.2186, 0.4951, 0.0934, 0.7541, 0.3997, 0.5381, 0.6179, 0.5234], [0.4054, 0.6557, 0.4771, 0.8277, 0.5498, 0.7488, 0.6683, 0.5258, 0.9949, 0.899]]]

Expected: [[[0, 0.6191, 0.1642, 0.5632, 0.9958, 0.7773, 0.241, 0.8367, 0.1042, 0.6339], [0.0122, 0.0536, 0.413, 0.1385, 0.5351, 0.3403, 0.8772, 0.88, 0.8959, 0.3395], [0.2342, 0.2221, 0.2186, 0.4951, 0.0934, 0.7541, 0.3997, 0.5381, 0.6179, 0.5234], [0.4054, 0.6557, 0.4771, 0.8277, 0.5498, 0.7488, 0.6683, 0.5258, 0.9949, 0.899]]]