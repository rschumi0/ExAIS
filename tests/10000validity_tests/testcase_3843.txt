import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Den36686 = tf.keras.layers.Input(shape=([4, 3]))
in0Con38938 = tf.keras.layers.Input(shape=([4, 1, 1]))
in0Add99268 = tf.keras.layers.Input(shape=([1, 1, 2]))
in1Add99268 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con78264 = tf.keras.layers.Input(shape=([2, 3]))
in0Min23101 = tf.keras.layers.Input(shape=([1, 2]))
in1Min23101 = tf.keras.layers.Input(shape=([1, 2]))
in0Con2683 = tf.keras.layers.Input(shape=([2, 14, 3]))
in0Con29064 = tf.keras.layers.Input(shape=([1, 1, 1]))

Den36686 = keras.layers.Dense(1,name = 'Den36686', )(in0Den36686)
Res63186 = keras.layers.Reshape((4, 1, 1), name = 'Res63186', )(Den36686)
Con38938 = keras.layers.Concatenate(axis=3, name = 'Con38938', )([Res63186,in0Con38938])
Add99268 = keras.layers.Add(name = 'Add99268', )([in0Add99268,in1Add99268])
Zer56267 = keras.layers.ZeroPadding2D(padding=((3, 0), (0, 0)), name = 'Zer56267', )(Add99268)
Max39839 = keras.layers.Maximum(name = 'Max39839', )([Con38938,Zer56267])
Res16396 = keras.layers.Reshape((4, 2), name = 'Res16396', )(Max39839)
Glo73258 = keras.layers.GlobalMaxPool1D(name = 'Glo73258', )(Res16396)
Res18441 = keras.layers.Reshape((2, 1), name = 'Res18441', )(Glo73258)
Con78264 = keras.layers.Concatenate(axis=2, name = 'Con78264', )([Res18441,in0Con78264])
Min23101 = keras.layers.Minimum(name = 'Min23101', )([in0Min23101,in1Min23101])
Den51167 = keras.layers.Dense(4,name = 'Den51167', )(Min23101)
Zer98330 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer98330', )(Den51167)
Add64134 = keras.layers.Add(name = 'Add64134', )([Con78264,Zer98330])
Res26856 = keras.layers.Reshape((2, 4, 1), name = 'Res26856', )(Add64134)
Zer68110 = keras.layers.ZeroPadding2D(padding=((0, 0), (10, 0)), name = 'Zer68110', )(Res26856)
Con2683 = keras.layers.Concatenate(axis=3, name = 'Con2683', )([Zer68110,in0Con2683])
Con29064 = keras.layers.Conv2DTranspose(4, (1, 1),strides=(1, 9), padding='valid', name = 'Con29064', )(in0Con29064)
Zer79502 = keras.layers.ZeroPadding2D(padding=((1, 0), (5, 0)), name = 'Zer79502', )(Con29064)
Add36526 = keras.layers.Add(name = 'Add36526', )([Con2683,Zer79502])
model = tf.keras.models.Model(inputs=[in0Den36686,in0Con38938,in0Add99268,in1Add99268,in0Con78264,in0Min23101,in1Min23101,in0Con2683,in0Con29064], outputs=Add36526)
w = model.get_layer('Den36686').get_weights() 
w[0] = np.array([[0.7588], [0.6966], [0.4989]])
w[1] = np.array([0.0666])
model.get_layer('Den36686').set_weights(w) 
w = model.get_layer('Den51167').get_weights() 
w[0] = np.array([[0.8645, 0.2213, 0.4687, 0.6538], [0.23, 0.9365, 0.2392, 0.6763]])
w[1] = np.array([0.3529, 0.8268, 0.9296, 0.0982])
model.get_layer('Den51167').set_weights(w) 
w = model.get_layer('Con29064').get_weights() 
w[0] = np.array([[[[0.1574], [0.1622], [0.7285], [0.5617]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con29064').set_weights(w) 
in0Den36686 = tf.constant([[[0.8616, 0.1448, 0.1162], [0.9541, 0.0039, 0.6755], [0.4306, 0.8546, 0.9464], [0.5721, 0.0318, 0.4713]]])
in0Con38938 = tf.constant([[[[0.019]], [[0.823]], [[0.8155]], [[0.3201]]]])
in0Add99268 = tf.constant([[[[0.5381, 0.7114]]]])
in1Add99268 = tf.constant([[[[0.6649, 0.285]]]])
in0Con78264 = tf.constant([[[0.583, 0.0954, 0.0031], [0.7998, 0.8802, 0.2282]]])
in0Min23101 = tf.constant([[[0.1014, 0.8536]]])
in1Min23101 = tf.constant([[[0.4116, 0.1576]]])
in0Con2683 = tf.constant([[[[0.3626, 0.7502, 0.6485], [0.2775, 0.4539, 0.9994], [0.2584, 0.6911, 0.7867], [0.6434, 0.8813, 0.752], [0.8251, 0.5898, 0.9407], [0.4821, 0.2423, 0.4597], [0.7918, 0.6154, 0.0781], [0.7359, 0.9182, 0.9563], [0.8488, 0.6364, 0.8565], [0.1766, 0.2727, 0.2921], [0.2586, 0.4788, 0.1228], [0.412, 0.6801, 0.6088], [0.4713, 0.3868, 0.265], [0.4193, 0.2542, 0.6944]], [[0.4871, 0.5551, 0.651], [0.5523, 0.5041, 0.8626], [0.2454, 0.9886, 0.4811], [0.8071, 0.3184, 0.8933], [0.4484, 0.526, 0.9045], [0.155, 0.8755, 0.1386], [0.4403, 0.6889, 0.1574], [0.5922, 0.9291, 0.0165], [0.6449, 0.6267, 0.5524], [0.0732, 0.6742, 0.4139], [0.5694, 0.0854, 0.2982], [0.0415, 0.162, 0.6875], [0.0627, 0.2971, 0.6098], [0.9275, 0.224, 0.1374]]]])
in0Con29064 = tf.constant([[[[0.5793]]]])
print (np.array2string(model.predict([in0Den36686,in0Con38938,in0Add99268,in1Add99268,in0Con78264,in0Min23101,in1Min23101,in0Con2683,in0Con29064],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add36526.png')

LDen36686 = dense_layer([[[0.8616, 0.1448, 0.1162], [0.9541, 0.0039, 0.6755], [0.4306, 0.8546, 0.9464], [0.5721, 0.0318, 0.4713]]], [[0.7588], [0.6966], [0.4989]],[0.0666], Den36686), 
LRes63186 = reshape_layer(Den36686, [4, 1, 1], Res63186), 
LCon38938 = concatenate_layer([Res63186,[[[[0.019]], [[0.823]], [[0.8155]], [[0.3201]]]]], 3, Con38938), 
LAdd99268 = add_layer([[[[[0.5381, 0.7114]]]], [[[[0.6649, 0.285]]]]], Add99268), 
LZer56267 = zero_padding2D_layer(Add99268, 3, 0, 0, 0, Zer56267), 
LMax39839 = maximum_layer([Con38938,Zer56267], Max39839), 
LRes16396 = reshape_layer(Max39839, [4, 2], Res16396), 
LGlo73258 = global_max_pool1D_layer(Res16396, Glo73258), 
LRes18441 = reshape_layer(Glo73258, [2, 1], Res18441), 
LCon78264 = concatenate_layer([Res18441,[[[0.583, 0.0954, 0.0031], [0.7998, 0.8802, 0.2282]]]], 2, Con78264), 
LMin23101 = minimum_layer([[[[0.1014, 0.8536]]], [[[0.4116, 0.1576]]]], Min23101), 
LDen51167 = dense_layer(Min23101, [[0.8645, 0.2213, 0.4687, 0.6538], [0.23, 0.9365, 0.2392, 0.6763]],[0.3529, 0.8268, 0.9296, 0.0982], Den51167), 
LZer98330 = zero_padding1D_layer(Den51167, 1, 0, Zer98330), 
LAdd64134 = add_layer([Con78264,Zer98330], Add64134), 
LRes26856 = reshape_layer(Add64134, [2, 4, 1], Res26856), 
LZer68110 = zero_padding2D_layer(Res26856, 0, 0, 10, 0, Zer68110), 
LCon2683 = concatenate_layer([Zer68110,[[[[0.3626, 0.7502, 0.6485], [0.2775, 0.4539, 0.9994], [0.2584, 0.6911, 0.7867], [0.6434, 0.8813, 0.752], [0.8251, 0.5898, 0.9407], [0.4821, 0.2423, 0.4597], [0.7918, 0.6154, 0.0781], [0.7359, 0.9182, 0.9563], [0.8488, 0.6364, 0.8565], [0.1766, 0.2727, 0.2921], [0.2586, 0.4788, 0.1228], [0.412, 0.6801, 0.6088], [0.4713, 0.3868, 0.265], [0.4193, 0.2542, 0.6944]], [[0.4871, 0.5551, 0.651], [0.5523, 0.5041, 0.8626], [0.2454, 0.9886, 0.4811], [0.8071, 0.3184, 0.8933], [0.4484, 0.526, 0.9045], [0.155, 0.8755, 0.1386], [0.4403, 0.6889, 0.1574], [0.5922, 0.9291, 0.0165], [0.6449, 0.6267, 0.5524], [0.0732, 0.6742, 0.4139], [0.5694, 0.0854, 0.2982], [0.0415, 0.162, 0.6875], [0.0627, 0.2971, 0.6098], [0.9275, 0.224, 0.1374]]]]], 3, Con2683), 
LCon29064 = conv2D_transpose_layer([[[[0.5793]]]], 1, 1,[[[[0.1574], [0.1622], [0.7285], [0.5617]]]],[0, 0, 0, 0], 1, 9, false, Con29064), 
LZer79502 = zero_padding2D_layer(Con29064, 1, 0, 5, 0, Zer79502), 
LAdd36526 = add_layer([Con2683,Zer79502], Add36526), 
exec_layers([LDen36686,LRes63186,LCon38938,LAdd99268,LZer56267,LMax39839,LRes16396,LGlo73258,LRes18441,LCon78264,LMin23101,LDen51167,LZer98330,LAdd64134,LRes26856,LZer68110,LCon2683,LCon29064,LZer79502,LAdd36526],["Den36686","Res63186","Con38938","Add99268","Zer56267","Max39839","Res16396","Glo73258","Res18441","Con78264","Min23101","Den51167","Zer98330","Add64134","Res26856","Zer68110","Con2683","Con29064","Zer79502","Add36526"],Add36526,"Add36526")

Actual (Unparsed): [[[[0.0000000, 0.3626000, 0.7502000, 0.6485000], [0.0000000, 0.2775000, 0.4539000, 0.9994000], [0.0000000, 0.2584000, 0.6911000, 0.7867000], [0.0000000, 0.6434000, 0.8813000, 0.7520000], [0.0000000, 0.8251000, 0.5898000, 0.9407000], [0.0000000, 0.4821000, 0.2423000, 0.4597000], [0.0000000, 0.7918000, 0.6154000, 0.0781000], [0.0000000, 0.7359000, 0.9182000, 0.9563000], [0.0000000, 0.8488000, 0.6364000, 0.8565000], [0.0000000, 0.1766000, 0.2727000, 0.2921000], [1.4608126, 0.2586000, 0.4788000, 0.1228000], [0.5830000, 0.4120000, 0.6801000, 0.6088000], [0.0954000, 0.4713000, 0.3868000, 0.2650000], [0.0031000, 0.4193000, 0.2542000, 0.6944000]], [[0.0000000, 0.4871000, 0.5551000, 0.6510000], [0.0000000, 0.5523000, 0.5041000, 0.8626000], [0.0000000, 0.2454000, 0.9886000, 0.4811000], [0.0000000, 0.8071000, 0.3184000, 0.8933000], [0.0000000, 0.4484000, 0.5260000, 0.9045000], [0.0911818, 0.2489625, 1.2975201, 0.4639928], [0.0000000, 0.4403000, 0.6889000, 0.1574000], [0.0000000, 0.5922000, 0.9291000, 0.0165000], [0.0000000, 0.6449000, 0.6267000, 0.5524000], [0.0000000, 0.0732000, 0.6742000, 0.4139000], [1.4732083, 0.5694000, 0.0854000, 0.2982000], [1.7966322, 0.0415000, 0.1620000, 0.6875000], [1.8950241, 0.0627000, 0.2971000, 0.6098000], [0.4992802, 0.9275000, 0.2240000, 0.1374000]]]]

Expected (Unparsed): [[[[0,0.3626,0.7502,0.6485],[0,0.2775,0.4539,0.9994],[0,0.2584,0.6911,0.7867],[0,0.6434,0.8813,0.752],[0,0.8251,0.5898,0.9407],[0,0.4821,0.2423,0.4597],[0,0.7918,0.6154,0.0781],[0,0.7359,0.9182,0.9563],[0,0.8488,0.6364,0.8565],[0,0.1766,0.2727,0.2921],[1.4608126000000001,0.2586,0.4788,0.1228],[0.583,0.412,0.6801,0.6088],[0.0954,0.4713,0.3868,0.265],[0.0031,0.4193,0.2542,0.6944]],[[0,0.4871,0.5551,0.651],[0,0.5523,0.5041,0.8626],[0,0.2454,0.9886,0.4811],[0,0.8071,0.3184,0.8933],[0,0.4484,0.526,0.9045],[0.09118182000000001,0.24896246,1.29752005,0.46399281000000003],[0,0.4403,0.6889,0.1574],[0,0.5922,0.9291,0.0165],[0,0.6449,0.6267,0.5524],[0,0.0732,0.6742,0.4139],[1.4732083,0.5694,0.0854,0.2982],[1.7966322199999998,0.0415,0.162,0.6875],[1.8950241,0.0627,0.2971,0.6098],[0.49928019999999995,0.9275,0.224,0.1374]]]]

Actual:   [[[[0, 0.3626, 0.7502, 0.6485], [0, 0.2775, 0.4539, 0.9994], [0, 0.2584, 0.6911, 0.7867], [0, 0.6434, 0.8813, 0.752], [0, 0.8251, 0.5898, 0.9407], [0, 0.4821, 0.2423, 0.4597], [0, 0.7918, 0.6154, 0.0781], [0, 0.7359, 0.9182, 0.9563], [0, 0.8488, 0.6364, 0.8565], [0, 0.1766, 0.2727, 0.2921], [1.4609, 0.2586, 0.4788, 0.1228], [0.583, 0.412, 0.6801, 0.6088], [0.0954, 0.4713, 0.3868, 0.265], [0.0031, 0.4193, 0.2542, 0.6944]], [[0, 0.4871, 0.5551, 0.651], [0, 0.5523, 0.5041, 0.8626], [0, 0.2454, 0.9886, 0.4811], [0, 0.8071, 0.3184, 0.8933], [0, 0.4484, 0.526, 0.9045], [0.0912, 0.249, 1.2976, 0.464], [0, 0.4403, 0.6889, 0.1574], [0, 0.5922, 0.9291, 0.0165], [0, 0.6449, 0.6267, 0.5524], [0, 0.0732, 0.6742, 0.4139], [1.4733, 0.5694, 0.0854, 0.2982], [1.7967, 0.0415, 0.162, 0.6875], [1.8951, 0.0627, 0.2971, 0.6098], [0.4993, 0.9275, 0.224, 0.1374]]]]

Expected: [[[[0, 0.3626, 0.7502, 0.6485], [0, 0.2775, 0.4539, 0.9994], [0, 0.2584, 0.6911, 0.7867], [0, 0.6434, 0.8813, 0.752], [0, 0.8251, 0.5898, 0.9407], [0, 0.4821, 0.2423, 0.4597], [0, 0.7918, 0.6154, 0.0781], [0, 0.7359, 0.9182, 0.9563], [0, 0.8488, 0.6364, 0.8565], [0, 0.1766, 0.2727, 0.2921], [1.4609, 0.2586, 0.4788, 0.1228], [0.583, 0.412, 0.6801, 0.6088], [0.0954, 0.4713, 0.3868, 0.265], [0.0031, 0.4193, 0.2542, 0.6944]], [[0, 0.4871, 0.5551, 0.651], [0, 0.5523, 0.5041, 0.8626], [0, 0.2454, 0.9886, 0.4811], [0, 0.8071, 0.3184, 0.8933], [0, 0.4484, 0.526, 0.9045], [0.0912, 0.249, 1.2976, 0.464], [0, 0.4403, 0.6889, 0.1574], [0, 0.5922, 0.9291, 0.0165], [0, 0.6449, 0.6267, 0.5524], [0, 0.0732, 0.6742, 0.4139], [1.4733, 0.5694, 0.0854, 0.2982], [1.7967, 0.0415, 0.162, 0.6875], [1.8951, 0.0627, 0.2971, 0.6098], [0.4993, 0.9275, 0.224, 0.1374]]]]