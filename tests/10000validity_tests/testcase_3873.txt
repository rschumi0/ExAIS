import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add7834 = tf.keras.layers.Input(shape=([2, 2]))
in1Add7834 = tf.keras.layers.Input(shape=([2, 2]))
in0Sim60806 = tf.keras.layers.Input(shape=([3, 2]))
in0Con98795 = tf.keras.layers.Input(shape=([5]))

Add7834 = keras.layers.Add(name = 'Add7834', )([in0Add7834,in1Add7834])
Res80558 = keras.layers.Reshape((2, 2, 1), name = 'Res80558', )(Add7834)
Res20713 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res20713', )(Res80558)
Con89922 = keras.layers.Conv3D(3, (2, 1, 1),strides=(1, 1, 1), padding='valid', dilation_rate=(1, 1, 1), name = 'Con89922', )(Res20713)
Res88124 = keras.layers.Reshape((1, 2, 3), name = 'Res88124', )(Con89922)
Res55302 = keras.layers.Reshape((1, 6), name = 'Res55302', )(Res88124)
Fla71753 = keras.layers.Flatten(name = 'Fla71753', )(Res55302)
Sim60806 = keras.layers.SimpleRNN(1,name = 'Sim60806', )(in0Sim60806)
Fla87675 = keras.layers.Flatten(name = 'Fla87675', )(Sim60806)
Con98795 = keras.layers.Concatenate(axis=1, name = 'Con98795', )([Fla87675,in0Con98795])
Mul49692 = keras.layers.Multiply(name = 'Mul49692', )([Fla71753,Con98795])
Res33523 = keras.layers.Reshape((6, 1), name = 'Res33523', )(Mul49692)
Res85529 = keras.layers.Reshape((6, 1, 1), name = 'Res85529', )(Res33523)
Res98370 = keras.layers.Reshape((6, 1, 1, 1), name = 'Res98370', )(Res85529)
Zer64732 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer64732', )(Res98370)
model = tf.keras.models.Model(inputs=[in0Add7834,in1Add7834,in0Sim60806,in0Con98795], outputs=Zer64732)
w = model.get_layer('Con89922').get_weights() 
w[0] = np.array([[[[[0.939, 0.6699, 0.9006]]]], [[[[0.6504, 0.0247, 0.2406]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con89922').set_weights(w) 
w = model.get_layer('Sim60806').get_weights() 
w[0] = np.array([[2], [1]])
w[1] = np.array([[2]])
w[2] = np.array([8])
model.get_layer('Sim60806').set_weights(w) 
in0Add7834 = tf.constant([[[0.8766, 0.4634], [0.0065, 0.6397]]])
in1Add7834 = tf.constant([[[0.7351, 0.3075], [0.0618, 0.9323]]])
in0Sim60806 = tf.constant([[[7, 5], [8, 2], [5, 3]]])
in0Con98795 = tf.constant([[0.006, 0.3931, 0.0721, 0.9324, 0.1312]])
print (np.array2string(model.predict([in0Add7834,in1Add7834,in0Sim60806,in0Con98795],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Zer64732.png')

LAdd7834 = add_layer([[[[0.8766, 0.4634], [0.0065, 0.6397]]], [[[0.7351, 0.3075], [0.0618, 0.9323]]]], Add7834), 
LRes80558 = reshape_layer(Add7834, [2, 2, 1], Res80558), 
LRes20713 = reshape_layer(Res80558, [2, 2, 1, 1], Res20713), 
LCon89922 = conv3D_layer(Res20713, 2, 1, 1,[[[[[0.939, 0.6699, 0.9006]]]], [[[[0.6504, 0.0247, 0.2406]]]]],[0, 0, 0], 1, 1, 1, false, 1, 1, 1, Con89922), 
LRes88124 = reshape_layer(Con89922, [1, 2, 3], Res88124), 
LRes55302 = reshape_layer(Res88124, [1, 6], Res55302), 
LFla71753 = flatten_layer(Res55302, Fla71753), 
LSim60806 = simple_rnn_layer([[[7, 5], [8, 2], [5, 3]]],[[2], [1]],[[2]],[8], Sim60806), 
LFla87675 = flatten_layer(Sim60806, Fla87675), 
LCon98795 = concatenate_layer([Fla87675,[[0.006, 0.3931, 0.0721, 0.9324, 0.1312]]], 1, Con98795), 
LMul49692 = multiply_layer([Fla71753,Con98795], Mul49692), 
LRes33523 = reshape_layer(Mul49692, [6, 1], Res33523), 
LRes85529 = reshape_layer(Res33523, [6, 1, 1], Res85529), 
LRes98370 = reshape_layer(Res85529, [6, 1, 1, 1], Res98370), 
LZer64732 = zero_padding3D_layer(Res98370, 1, 1, 1, 1, 1, 1, Zer64732), 
exec_layers([LAdd7834,LRes80558,LRes20713,LCon89922,LRes88124,LRes55302,LFla71753,LSim60806,LFla87675,LCon98795,LMul49692,LRes33523,LRes85529,LRes98370,LZer64732],["Add7834","Res80558","Res20713","Con89922","Res88124","Res55302","Fla71753","Sim60806","Fla87675","Con98795","Mul49692","Res33523","Res85529","Res98370","Zer64732"],Zer64732,"Zer64732")

Actual (Unparsed): [[[[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [1.5578086], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0064882], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.5770433], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.1259085], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.5177191], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.1407114], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]], [[0.0000000], [0.0000000], [0.0000000]]]]]

Expected (Unparsed): [[[[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]]],[[[0],[0],[0]],[[0],[1.5578086199999999],[0]],[[0],[0],[0]]],[[[0],[0],[0]],[[0],[0.00648818904],[0]],[[0],[0],[0]]],[[[0],[0],[0]],[[0],[0.577043283],[0]],[[0],[0],[0]]],[[[0],[0],[0]],[[0],[0.12590851119],[0]],[[0],[0],[0]]],[[[0],[0],[0]],[[0],[0.5177191186439999],[0]],[[0],[0],[0]]],[[[0],[0],[0]],[[0],[0.140711441088],[0]],[[0],[0],[0]]],[[[0],[0],[0]],[[0],[0],[0]],[[0],[0],[0]]]]]

Actual:   [[[[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [1.5579], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0.0065], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0.5771], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0.126], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0.5178], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0.1408], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]]]]

Expected: [[[[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [1.5579], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0.0065], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0.5771], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0.126], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0.5178], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0.1408], [0]], [[0], [0], [0]]], [[[0], [0], [0]], [[0], [0], [0]], [[0], [0], [0]]]]]