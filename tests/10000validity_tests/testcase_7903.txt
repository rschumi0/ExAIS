import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave42565 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con31580 = tf.keras.layers.Input(shape=([3, 3, 3]))
in0Glo94516 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Zer99424 = tf.keras.layers.Input(shape=([3, 4]))
in0Con94468 = tf.keras.layers.Input(shape=([5, 8]))

Ave42565 = keras.layers.AveragePooling2D(pool_size=(1, 1), strides=(1, 9), padding='valid', name = 'Ave42565', )(in0Ave42565)
Zer38811 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer38811', )(Ave42565)
Con31580 = keras.layers.Concatenate(axis=3, name = 'Con31580', )([Zer38811,in0Con31580])
Glo94516 = keras.layers.GlobalAveragePooling2D(name = 'Glo94516', )(in0Glo94516)
Res10957 = keras.layers.Reshape((1, 1), name = 'Res10957', )(Glo94516)
Max10833 = keras.layers.MaxPool1D(pool_size=(1), strides=(10), padding='same', name = 'Max10833', )(Res10957)
Res44915 = keras.layers.Reshape((1, 1, 1), name = 'Res44915', )(Max10833)
Con1614 = keras.layers.Conv2D(4, (1, 1),strides=(1, 1), padding='same', dilation_rate=(1, 1), name = 'Con1614', )(Res44915)
Zer25633 = keras.layers.ZeroPadding2D(padding=((2, 0), (2, 0)), name = 'Zer25633', )(Con1614)
Mul94061 = keras.layers.Multiply(name = 'Mul94061', )([Con31580,Zer25633])
Res18825 = keras.layers.Reshape((3, 12), name = 'Res18825', )(Mul94061)
Zer70463 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer70463', )(Res18825)
Zer99424 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer99424', )(in0Zer99424)
Con94468 = keras.layers.Concatenate(axis=2, name = 'Con94468', )([Zer99424,in0Con94468])
Mul13897 = keras.layers.Multiply(name = 'Mul13897', )([Zer70463,Con94468])
model = tf.keras.models.Model(inputs=[in0Ave42565,in0Con31580,in0Glo94516,in0Zer99424,in0Con94468], outputs=Mul13897)
w = model.get_layer('Con1614').get_weights() 
w[0] = np.array([[[[0.9612, 0.3423, 0.4615, 0.7176]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con1614').set_weights(w) 
in0Ave42565 = tf.constant([[[[1.0686]]]])
in0Con31580 = tf.constant([[[[0.9914, 0.2779, 0.7749], [0.4331, 0.8774, 0.8274], [0.8206, 0.3624, 0.0947]], [[0.7476, 0.058, 0.0475], [0.1548, 0.2542, 0.0547], [0.8293, 0.4605, 0.8209]], [[0.8591, 0.8856, 0.1237], [0.2125, 0.7412, 0.8731], [0.2895, 0.6743, 0.2748]]]])
in0Glo94516 = tf.constant([[[[1.6464], [1.8176]]]])
in0Zer99424 = tf.constant([[[1.3373, 1.4958, 1.3022, 1.0041], [1.6315, 1.2344, 1.0502, 1.7646], [1.4809, 1.3001, 1.0534, 1.4788]]])
in0Con94468 = tf.constant([[[0.2446, 0.7548, 0.5779, 0.0232, 0.3978, 0.7809, 0.3664, 0.09], [0.3832, 0.4717, 0.7343, 0.5503, 0.6981, 0.9368, 0.133, 0.6393], [0.6093, 0.3351, 0.5898, 0.6563, 0.2461, 0.223, 0.2572, 0.928], [0.5156, 0.083, 0.0191, 0.5589, 0.3819, 0.2941, 0.7366, 0.25], [0.241, 0.5056, 0.7432, 0.1182, 0.2242, 0.2328, 0.6192, 0.7572]]])
print (np.array2string(model.predict([in0Ave42565,in0Con31580,in0Glo94516,in0Zer99424,in0Con94468],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul13897.png')

LAve42565 = average_pooling2D_layer([[[[1.0686]]]], 1, 1, 1, 9, false, Ave42565), 
LZer38811 = zero_padding2D_layer(Ave42565, 1, 1, 1, 1, Zer38811), 
LCon31580 = concatenate_layer([Zer38811,[[[[0.9914, 0.2779, 0.7749], [0.4331, 0.8774, 0.8274], [0.8206, 0.3624, 0.0947]], [[0.7476, 0.058, 0.0475], [0.1548, 0.2542, 0.0547], [0.8293, 0.4605, 0.8209]], [[0.8591, 0.8856, 0.1237], [0.2125, 0.7412, 0.8731], [0.2895, 0.6743, 0.2748]]]]], 3, Con31580), 
LGlo94516 = global_average_pooling2D_layer([[[[1.6464], [1.8176]]]], Glo94516), 
LRes10957 = reshape_layer(Glo94516, [1, 1], Res10957), 
LMax10833 = max_pool1D_layer(Res10957, 1, 10, true, Max10833), 
LRes44915 = reshape_layer(Max10833, [1, 1, 1], Res44915), 
LCon1614 = conv2D_layer(Res44915, 1, 1,[[[[0.9612, 0.3423, 0.4615, 0.7176]]]],[0, 0, 0, 0], 1, 1, true, 1, 1, Con1614), 
LZer25633 = zero_padding2D_layer(Con1614, 2, 0, 2, 0, Zer25633), 
LMul94061 = multiply_layer([Con31580,Zer25633], Mul94061), 
LRes18825 = reshape_layer(Mul94061, [3, 12], Res18825), 
LZer70463 = zero_padding1D_layer(Res18825, 2, 0, Zer70463), 
LZer99424 = zero_padding1D_layer([[[1.3373, 1.4958, 1.3022, 1.0041], [1.6315, 1.2344, 1.0502, 1.7646], [1.4809, 1.3001, 1.0534, 1.4788]]], 1, 1, Zer99424), 
LCon94468 = concatenate_layer([Zer99424,[[[0.2446, 0.7548, 0.5779, 0.0232, 0.3978, 0.7809, 0.3664, 0.09], [0.3832, 0.4717, 0.7343, 0.5503, 0.6981, 0.9368, 0.133, 0.6393], [0.6093, 0.3351, 0.5898, 0.6563, 0.2461, 0.223, 0.2572, 0.928], [0.5156, 0.083, 0.0191, 0.5589, 0.3819, 0.2941, 0.7366, 0.25], [0.241, 0.5056, 0.7432, 0.1182, 0.2242, 0.2328, 0.6192, 0.7572]]]], 2, Con94468), 
LMul13897 = multiply_layer([Zer70463,Con94468], Mul13897), 
exec_layers([LAve42565,LZer38811,LCon31580,LGlo94516,LRes10957,LMax10833,LRes44915,LCon1614,LZer25633,LMul94061,LRes18825,LZer70463,LZer99424,LCon94468,LMul13897],["Ave42565","Zer38811","Con31580","Glo94516","Res10957","Max10833","Res44915","Con1614","Zer25633","Mul94061","Res18825","Zer70463","Zer99424","Con94468","Mul13897"],Mul13897,"Mul13897")

Actual (Unparsed

Expected (Unparsed): [[[0,0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],[0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.03995639804016,0.33373649488608004,0.258617346504192]]]

Actual:   [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04, 0.3338, 0.2587]]]

Expected: [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0.04, 0.3338, 0.2587]]]