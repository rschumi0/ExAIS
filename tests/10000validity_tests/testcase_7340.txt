import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dep50829 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con49868 = tf.keras.layers.Input(shape=([1, 1, 2, 3]))
in0Glo71373 = tf.keras.layers.Input(shape=([1, 1]))
in0Con9072 = tf.keras.layers.Input(shape=([1, 1, 2, 3]))
in0Cro14949 = tf.keras.layers.Input(shape=([4, 2, 2, 4]))
in0Min14903 = tf.keras.layers.Input(shape=([1, 1]))
in1Min14903 = tf.keras.layers.Input(shape=([1, 1]))
in0Con48129 = tf.keras.layers.Input(shape=([4, 3]))
in0Zer67326 = tf.keras.layers.Input(shape=([2, 4]))
in0Ave24163 = tf.keras.layers.Input(shape=([1, 1]))
in1Ave24163 = tf.keras.layers.Input(shape=([1, 1]))
in0Con27166 = tf.keras.layers.Input(shape=([4, 3]))
in0Con77996 = tf.keras.layers.Input(shape=([4, 4]))

Dep50829 = keras.layers.DepthwiseConv2D((1, 1),strides=(2, 2), padding='valid', name = 'Dep50829', )(in0Dep50829)
Res71252 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res71252', )(Dep50829)
Zer21369 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (1, 0)), name = 'Zer21369', )(Res71252)
Con49868 = keras.layers.Concatenate(axis=4, name = 'Con49868', )([Zer21369,in0Con49868])
Glo71373 = keras.layers.GlobalMaxPool1D(name = 'Glo71373', )(in0Glo71373)
Res84115 = keras.layers.Reshape((1, 1), name = 'Res84115', )(Glo71373)
Res30437 = keras.layers.Reshape((1, 1, 1), name = 'Res30437', )(Res84115)
Res66595 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res66595', )(Res30437)
Zer56008 = keras.layers.ZeroPadding3D(padding=((0, 0), (0, 0), (1, 0)), name = 'Zer56008', )(Res66595)
Con9072 = keras.layers.Concatenate(axis=4, name = 'Con9072', )([Zer56008,in0Con9072])
Cro14949 = keras.layers.Cropping3D(cropping=((1, 2), (1, 0), (0, 0)), name = 'Cro14949', )(in0Cro14949)
Ave93506 = keras.layers.Average(name = 'Ave93506', )([Con9072,Cro14949])
Max46946 = keras.layers.Maximum(name = 'Max46946', )([Con49868,Ave93506])
Res68166 = keras.layers.Reshape((1, 1, 8), name = 'Res68166', )(Max46946)
Res2735 = keras.layers.Reshape((1, 8), name = 'Res2735', )(Res68166)
Zer75239 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer75239', )(Res2735)
Min14903 = keras.layers.Minimum(name = 'Min14903', )([in0Min14903,in1Min14903])
Zer94036 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer94036', )(Min14903)
Con48129 = keras.layers.Concatenate(axis=2, name = 'Con48129', )([Zer94036,in0Con48129])
Zer67326 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer67326', )(in0Zer67326)
Ave24163 = keras.layers.Average(name = 'Ave24163', )([in0Ave24163,in1Ave24163])
Zer52101 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer52101', )(Ave24163)
Con27166 = keras.layers.Concatenate(axis=2, name = 'Con27166', )([Zer52101,in0Con27166])
Add83627 = keras.layers.Add(name = 'Add83627', )([Zer67326,Con27166])
Ave42073 = keras.layers.Average(name = 'Ave42073', )([Con48129,Add83627])
Con77996 = keras.layers.Concatenate(axis=2, name = 'Con77996', )([Ave42073,in0Con77996])
Max30530 = keras.layers.Maximum(name = 'Max30530', )([Zer75239,Con77996])
model = tf.keras.models.Model(inputs=[in0Dep50829,in0Con49868,in0Glo71373,in0Con9072,in0Cro14949,in0Min14903,in1Min14903,in0Con48129,in0Zer67326,in0Ave24163,in1Ave24163,in0Con27166,in0Con77996], outputs=Max30530)
w = model.get_layer('Dep50829').get_weights() 
w[0] = np.array([[[[0.9951]]]])
w[1] = np.array([0])
model.get_layer('Dep50829').set_weights(w) 
in0Dep50829 = tf.constant([[[[0.3819]], [[0.3192]]]])
in0Con49868 = tf.constant([[[[[0.0262, 0.9047, 0.1366], [0.2237, 0.9807, 0.9663]]]]])
in0Glo71373 = tf.constant([[[1.8566]]])
in0Con9072 = tf.constant([[[[[0.0468, 0.1453, 0.1124], [0.5768, 0.1865, 0.4601]]]]])
in0Cro14949 = tf.constant([[[[[1.3384, 1.8803, 1.016, 1.778], [1.9395, 1.8585, 1.9755, 1.7245]], [[1.5539, 1.3519, 1.0316, 1.3306], [1.3538, 1.5885, 1.8062, 1.6103]]], [[[1.9359, 1.7161, 1.7463, 1.67], [1.4172, 1.4959, 1.9922, 1.3312]], [[1.4947, 1.862, 1.6244, 1.9506], [1.7235, 1.5583, 1.8466, 1.7365]]], [[[1.0969, 1.0307, 1.5686, 1.0305], [1.252, 1.3723, 1.6744, 1.3477]], [[1.2725, 1.3995, 1.9828, 1.4501], [1.1077, 1.8709, 1.5361, 1.3671]]], [[[1.0887, 1.4519, 1.3916, 1.0681], [1.8852, 1.2735, 1.5313, 1.4465]], [[1.516, 1.8408, 1.8531, 1.3752], [1.7062, 1.6012, 1.464, 1.8631]]]]])
in0Min14903 = tf.constant([[[0.9624]]])
in1Min14903 = tf.constant([[[0.7023]]])
in0Con48129 = tf.constant([[[0.4827, 0.9244, 0.6399], [0.8265, 0.8456, 0.7392], [0.3094, 0.8558, 0.6885], [0.4244, 0.3915, 0.2082]]])
in0Zer67326 = tf.constant([[[1.6547, 1.7548, 1.2321, 1.34], [1.0033, 1.9952, 1.9024, 1.625]]])
in0Ave24163 = tf.constant([[[0.03]]])
in1Ave24163 = tf.constant([[[0.2105]]])
in0Con27166 = tf.constant([[[0.7384, 0.9748, 0.2842], [0.4388, 0.6049, 0.2767], [0.1624, 0.7328, 0.1312], [0.5796, 0.805, 0.4008]]])
in0Con77996 = tf.constant([[[0.988, 0.3848, 0.5464, 0.395], [0.7059, 0.0243, 0.8352, 0.7103], [0.9376, 0.2198, 0.5765, 0.8541], [0.4208, 0.4118, 0.4861, 0.4864]]])
print (np.array2string(model.predict([in0Dep50829,in0Con49868,in0Glo71373,in0Con9072,in0Cro14949,in0Min14903,in1Min14903,in0Con48129,in0Zer67326,in0Ave24163,in1Ave24163,in0Con27166,in0Con77996],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max30530.png')

LDep50829 = depthwise_conv2D_layer([[[[0.3819]], [[0.3192]]]], 1, 1,[[[[0.9951]]]],[0], 2, 2, false, Dep50829), 
LRes71252 = reshape_layer(Dep50829, [1, 1, 1, 1], Res71252), 
LZer21369 = zero_padding3D_layer(Res71252, 0, 0, 0, 0, 1, 0, Zer21369), 
LCon49868 = concatenate_layer([Zer21369,[[[[[0.0262, 0.9047, 0.1366], [0.2237, 0.9807, 0.9663]]]]]], 4, Con49868), 
LGlo71373 = global_max_pool1D_layer([[[1.8566]]], Glo71373), 
LRes84115 = reshape_layer(Glo71373, [1, 1], Res84115), 
LRes30437 = reshape_layer(Res84115, [1, 1, 1], Res30437), 
LRes66595 = reshape_layer(Res30437, [1, 1, 1, 1], Res66595), 
LZer56008 = zero_padding3D_layer(Res66595, 0, 0, 0, 0, 1, 0, Zer56008), 
LCon9072 = concatenate_layer([Zer56008,[[[[[0.0468, 0.1453, 0.1124], [0.5768, 0.1865, 0.4601]]]]]], 4, Con9072), 
LCro14949 = cropping3D_layer([[[[[1.3384, 1.8803, 1.016, 1.778], [1.9395, 1.8585, 1.9755, 1.7245]], [[1.5539, 1.3519, 1.0316, 1.3306], [1.3538, 1.5885, 1.8062, 1.6103]]], [[[1.9359, 1.7161, 1.7463, 1.67], [1.4172, 1.4959, 1.9922, 1.3312]], [[1.4947, 1.862, 1.6244, 1.9506], [1.7235, 1.5583, 1.8466, 1.7365]]], [[[1.0969, 1.0307, 1.5686, 1.0305], [1.252, 1.3723, 1.6744, 1.3477]], [[1.2725, 1.3995, 1.9828, 1.4501], [1.1077, 1.8709, 1.5361, 1.3671]]], [[[1.0887, 1.4519, 1.3916, 1.0681], [1.8852, 1.2735, 1.5313, 1.4465]], [[1.516, 1.8408, 1.8531, 1.3752], [1.7062, 1.6012, 1.464, 1.8631]]]]], 1, 2, 1, 0, 0, 0, Cro14949), 
LAve93506 = average_layer([Con9072,Cro14949], Ave93506), 
LMax46946 = maximum_layer([Con49868,Ave93506], Max46946), 
LRes68166 = reshape_layer(Max46946, [1, 1, 8], Res68166), 
LRes2735 = reshape_layer(Res68166, [1, 8], Res2735), 
LZer75239 = zero_padding1D_layer(Res2735, 3, 0, Zer75239), 
LMin14903 = minimum_layer([[[[0.9624]]], [[[0.7023]]]], Min14903), 
LZer94036 = zero_padding1D_layer(Min14903, 3, 0, Zer94036), 
LCon48129 = concatenate_layer([Zer94036,[[[0.4827, 0.9244, 0.6399], [0.8265, 0.8456, 0.7392], [0.3094, 0.8558, 0.6885], [0.4244, 0.3915, 0.2082]]]], 2, Con48129), 
LZer67326 = zero_padding1D_layer([[[1.6547, 1.7548, 1.2321, 1.34], [1.0033, 1.9952, 1.9024, 1.625]]], 1, 1, Zer67326), 
LAve24163 = average_layer([[[[0.03]]], [[[0.2105]]]], Ave24163), 
LZer52101 = zero_padding1D_layer(Ave24163, 3, 0, Zer52101), 
LCon27166 = concatenate_layer([Zer52101,[[[0.7384, 0.9748, 0.2842], [0.4388, 0.6049, 0.2767], [0.1624, 0.7328, 0.1312], [0.5796, 0.805, 0.4008]]]], 2, Con27166), 
LAdd83627 = add_layer([Zer67326,Con27166], Add83627), 
LAve42073 = average_layer([Con48129,Add83627], Ave42073), 
LCon77996 = concatenate_layer([Ave42073,[[[0.988, 0.3848, 0.5464, 0.395], [0.7059, 0.0243, 0.8352, 0.7103], [0.9376, 0.2198, 0.5765, 0.8541], [0.4208, 0.4118, 0.4861, 0.4864]]]], 2, Con77996), 
LMax30530 = maximum_layer([Zer75239,Con77996], Max30530), 
exec_layers([LDep50829,LRes71252,LZer21369,LCon49868,LGlo71373,LRes84115,LRes30437,LRes66595,LZer56008,LCon9072,LCro14949,LAve93506,LMax46946,LRes68166,LRes2735,LZer75239,LMin14903,LZer94036,LCon48129,LZer67326,LAve24163,LZer52101,LCon27166,LAdd83627,LAve42073,LCon77996,LMax30530],["Dep50829","Res71252","Zer21369","Con49868","Glo71373","Res84115","Res30437","Res66595","Zer56008","Con9072","Cro14949","Ave93506","Max46946","Res68166","Res2735","Zer75239","Min14903","Zer94036","Con48129","Zer67326","Ave24163","Zer52101","Con27166","Add83627","Ave42073","Con77996","Max30530"],Max30530,"Max30530")

Actual (Unparsed): [[[0.0000000, 0.6105500, 0.9496000, 0.4620500, 0.9880000, 0.3848000, 0.5464000, 0.3950000], [0.8273500, 1.5100500, 1.3413000, 1.1779500, 0.7059000, 0.0243000, 0.8352000, 0.7103000], [0.5016500, 1.2335000, 1.7455000, 1.2223500, 0.9376000, 0.2198000, 0.5765000, 0.8541000], [0.7473500, 0.9544000, 0.9047000, 1.0315000, 1.7900500, 1.0675500, 1.0165500, 1.0983000]]]

Expected (Unparsed): [[[0,0.6105499999999999,0.9496,0.46205,0.988,0.3848,0.5464,0.395],[0.82735,1.5100500000000001,1.3413,1.17795,0.7059,0.0243,0.8352,0.7103],[0.50165,1.2335,1.7455,1.22235,0.9376,0.2198,0.5765,0.8541],[0.74735,0.9544,0.9047,1.0314999999999999,1.79005,1.06755,1.01655,1.0983]]]

Actual:   [[[0, 0.6106, 0.9496, 0.4621, 0.988, 0.3848, 0.5464, 0.395], [0.8274, 1.5101, 1.3413, 1.178, 0.7059, 0.0243, 0.8352, 0.7103], [0.5017, 1.2335, 1.7455, 1.2224, 0.9376, 0.2198, 0.5765, 0.8541], [0.7474, 0.9544, 0.9047, 1.0315, 1.7901, 1.0676, 1.0166, 1.0983]]]

Expected: [[[0, 0.6106, 0.9496, 0.4621, 0.988, 0.3848, 0.5464, 0.395], [0.8274, 1.5101, 1.3413, 1.178, 0.7059, 0.0243, 0.8352, 0.7103], [0.5017, 1.2335, 1.7455, 1.2224, 0.9376, 0.2198, 0.5765, 0.8541], [0.7474, 0.9544, 0.9047, 1.0315, 1.7901, 1.0676, 1.0166, 1.0983]]]