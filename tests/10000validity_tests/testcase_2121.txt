import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub65932 = tf.keras.layers.Input(shape=([2, 3, 3]))
in1Sub65932 = tf.keras.layers.Input(shape=([2, 3, 3]))

Sub65932 = keras.layers.Subtract(name = 'Sub65932', )([in0Sub65932,in1Sub65932])
Res56418 = keras.layers.Reshape((2, 9), name = 'Res56418', )(Sub65932)
Cro76726 = keras.layers.Cropping1D(cropping=((1, 0)), name = 'Cro76726', )(Res56418)
Lay58406 = keras.layers.LayerNormalization(axis=1, epsilon=2.246010841365734, name = 'Lay58406', )(Cro76726)
model = tf.keras.models.Model(inputs=[in0Sub65932,in1Sub65932], outputs=Lay58406)
in0Sub65932 = tf.constant([[[[0.8628, 0.2514, 0.8004], [0.9423, 0.7308, 0.842], [0.2253, 0.6376, 0.1813]], [[0.0711, 0.3696, 0.806], [0.0835, 0.7743, 0.0241], [0.3002, 0.4299, 0.3221]]]])
in1Sub65932 = tf.constant([[[[0.1491, 0.987, 0.5792], [0.2628, 0.2213, 0.9347], [0.6345, 0.0558, 0.2983]], [[0.2115, 0.8231, 0.608], [0.9654, 0.2771, 0.4401], [0.5288, 0.8487, 0.1041]]]])
print (np.array2string(model.predict([in0Sub65932,in1Sub65932],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Lay58406.png')

LSub65932 = subtract_layer([[[[0.8628, 0.2514, 0.8004], [0.9423, 0.7308, 0.842], [0.2253, 0.6376, 0.1813]], [[0.0711, 0.3696, 0.806], [0.0835, 0.7743, 0.0241], [0.3002, 0.4299, 0.3221]]]], [[[[0.1491, 0.987, 0.5792], [0.2628, 0.2213, 0.9347], [0.6345, 0.0558, 0.2983]], [[0.2115, 0.8231, 0.608], [0.9654, 0.2771, 0.4401], [0.5288, 0.8487, 0.1041]]]], Sub65932), 
LRes56418 = reshape_layer(Sub65932, [2, 9], Res56418), 
LCro76726 = cropping1D_layer(Res56418, 1, 0, Cro76726), 
LLay58406 = layer_normalization_layer(Cro76726, 1, 2.246010841365734, Lay58406), 
exec_layers([LSub65932,LRes56418,LCro76726,LLay58406],["Sub65932","Res56418","Cro76726","Lay58406"],Lay58406,"Lay58406")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]]]

Actual:   [[[0, 0, 0, 0, 0, 0, 0, 0, 0]]]

Expected: [[[0, 0, 0, 0, 0, 0, 0, 0, 0]]]