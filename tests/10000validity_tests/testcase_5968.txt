import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer57806 = tf.keras.layers.Input(shape=([4, 3, 2]))
in0Ave27607 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Ave27607 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Con59288 = tf.keras.layers.Input(shape=([57]))

Zer57806 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer57806', )(in0Zer57806)
Res94319 = keras.layers.Reshape((6, 10), name = 'Res94319', )(Zer57806)
Fla12175 = keras.layers.Flatten(name = 'Fla12175', )(Res94319)
Ave27607 = keras.layers.Average(name = 'Ave27607', )([in0Ave27607,in1Ave27607])
Res73890 = keras.layers.Reshape((2, 2, 4), name = 'Res73890', )(Ave27607)
Res379 = keras.layers.Reshape((2, 8), name = 'Res379', )(Res73890)
GRU88459 = keras.layers.GRU(3,reset_after=False, recurrent_activation='sigmoid', name = 'GRU88459', )(Res379)
Con59288 = keras.layers.Concatenate(axis=1, name = 'Con59288', )([GRU88459,in0Con59288])
Max2281 = keras.layers.Maximum(name = 'Max2281', )([Fla12175,Con59288])
model = tf.keras.models.Model(inputs=[in0Zer57806,in0Ave27607,in1Ave27607,in0Con59288], outputs=Max2281)
w = model.get_layer('GRU88459').get_weights() 
w[0] = np.array([[8, 4, 2, 6, 4, 10, 3, 7, 8], [9, 1, 7, 6, 1, 7, 8, 7, 4], [3, 5, 3, 8, 5, 8, 1, 10, 5], [6, 8, 10, 4, 5, 10, 2, 2, 7], [6, 1, 5, 3, 2, 5, 6, 8, 1], [8, 3, 1, 7, 7, 1, 8, 1, 9], [10, 3, 2, 8, 7, 9, 9, 10, 8], [3, 3, 3, 7, 6, 3, 6, 4, 3]])
w[1] = np.array([[1, 7, 1, 6, 9, 1, 5, 6, 1], [5, 10, 7, 10, 7, 2, 8, 9, 10], [2, 8, 5, 9, 1, 3, 9, 8, 10]])
w[2] = np.array([8, 2, 7, 8, 8, 9, 7, 3, 8])
model.get_layer('GRU88459').set_weights(w) 
in0Zer57806 = tf.constant([[[[1.1066, 1.9451], [1.4574, 1.8463], [1.0978, 1.6401]], [[1.6031, 1.0112], [1.1203, 1.3802], [1.3839, 1.7343]], [[1.2127, 1.7594], [1.0335, 1.4471], [1.1956, 1.9688]], [[1.307, 1.5806], [1.8568, 1.6743], [1.9882, 1.6366]]]])
in0Ave27607 = tf.constant([[[[[0.4286, 0.8423], [0.4349, 0.1236]], [[0.7887, 0.2427], [0.7124, 0.8978]]], [[[0.345, 0.3322], [0.5986, 0.7506]], [[0.7489, 0.0984], [0.6326, 0.7919]]]]])
in1Ave27607 = tf.constant([[[[[0.4226, 0.2362], [0.4187, 0.2938]], [[0.383, 0.7143], [0.6029, 0.179]]], [[[0.998, 0.3939], [0.2917, 0.2651]], [[0.1207, 0.8628], [0.1976, 0.7083]]]]])
in0Con59288 = tf.constant([[0.1145, 0.3121, 0.2694, 0.7919, 0.8126, 0.2054, 0.0689, 0.9254, 0.6691, 0.8536, 0.8296, 0.2041, 0.7381, 0.4268, 0.5371, 0.5384, 0.2206, 0.1605, 0.1982, 0.944, 0.2539, 0.8083, 0.8588, 0.9923, 0.9904, 0.3586, 0.7632, 0.679, 0.7814, 0.87, 0.4504, 0.8148, 0.8157, 0.6596, 0.3835, 0.3143, 0.8712, 0.4945, 0.7835, 0.5653, 0.939, 0.8866, 0.7039, 0.3998, 0.3497, 0.0619, 0.0193, 0.052, 0.6924, 0.6902, 0.9287, 0.8926, 0.2542, 0.9979, 0.7742, 0.6563, 0.9265]])
print (np.array2string(model.predict([in0Zer57806,in0Ave27607,in1Ave27607,in0Con59288],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max2281.png')

LZer57806 = zero_padding2D_layer([[[[1.1066, 1.9451], [1.4574, 1.8463], [1.0978, 1.6401]], [[1.6031, 1.0112], [1.1203, 1.3802], [1.3839, 1.7343]], [[1.2127, 1.7594], [1.0335, 1.4471], [1.1956, 1.9688]], [[1.307, 1.5806], [1.8568, 1.6743], [1.9882, 1.6366]]]], 1, 1, 1, 1, Zer57806), 
LRes94319 = reshape_layer(Zer57806, [6, 10], Res94319), 
LFla12175 = flatten_layer(Res94319, Fla12175), 
LAve27607 = average_layer([[[[[[0.4286, 0.8423], [0.4349, 0.1236]], [[0.7887, 0.2427], [0.7124, 0.8978]]], [[[0.345, 0.3322], [0.5986, 0.7506]], [[0.7489, 0.0984], [0.6326, 0.7919]]]]], [[[[[0.4226, 0.2362], [0.4187, 0.2938]], [[0.383, 0.7143], [0.6029, 0.179]]], [[[0.998, 0.3939], [0.2917, 0.2651]], [[0.1207, 0.8628], [0.1976, 0.7083]]]]]], Ave27607), 
LRes73890 = reshape_layer(Ave27607, [2, 2, 4], Res73890), 
LRes379 = reshape_layer(Res73890, [2, 8], Res379), 
LGRU88459 = gru_layer(Res379,[[8, 4, 2, 6, 4, 10, 3, 7, 8], [9, 1, 7, 6, 1, 7, 8, 7, 4], [3, 5, 3, 8, 5, 8, 1, 10, 5], [6, 8, 10, 4, 5, 10, 2, 2, 7], [6, 1, 5, 3, 2, 5, 6, 8, 1], [8, 3, 1, 7, 7, 1, 8, 1, 9], [10, 3, 2, 8, 7, 9, 9, 10, 8], [3, 3, 3, 7, 6, 3, 6, 4, 3]],[[1, 7, 1, 6, 9, 1, 5, 6, 1], [5, 10, 7, 10, 7, 2, 8, 9, 10], [2, 8, 5, 9, 1, 3, 9, 8, 10]],[8, 2, 7, 8, 8, 9, 7, 3, 8], false, GRU88459), 
LCon59288 = concatenate_layer([GRU88459,[[0.1145, 0.3121, 0.2694, 0.7919, 0.8126, 0.2054, 0.0689, 0.9254, 0.6691, 0.8536, 0.8296, 0.2041, 0.7381, 0.4268, 0.5371, 0.5384, 0.2206, 0.1605, 0.1982, 0.944, 0.2539, 0.8083, 0.8588, 0.9923, 0.9904, 0.3586, 0.7632, 0.679, 0.7814, 0.87, 0.4504, 0.8148, 0.8157, 0.6596, 0.3835, 0.3143, 0.8712, 0.4945, 0.7835, 0.5653, 0.939, 0.8866, 0.7039, 0.3998, 0.3497, 0.0619, 0.0193, 0.052, 0.6924, 0.6902, 0.9287, 0.8926, 0.2542, 0.9979, 0.7742, 0.6563, 0.9265]]], 1, Con59288), 
LMax2281 = maximum_layer([Fla12175,Con59288], Max2281), 
exec_layers([LZer57806,LRes94319,LFla12175,LAve27607,LRes73890,LRes379,LGRU88459,LCon59288,LMax2281],["Zer57806","Res94319","Fla12175","Ave27607","Res73890","Res379","GRU88459","Con59288","Max2281"],Max2281,"Max2281")

Actual (Unparsed): [[0.0000000, 0.0000012, 0.0000000, 0.1145000, 0.3121000, 0.2694000, 0.7919000, 0.8126000, 0.2054000, 0.0689000, 0.9254000, 0.6691000, 1.1066000, 1.9450999, 1.4574000, 1.8463000, 1.0978000, 1.6401000, 0.5384000, 0.2206000, 0.1605000, 0.1982000, 1.6030999, 1.0112000, 1.1203001, 1.3802000, 1.3839000, 1.7343000, 0.3586000, 0.7632000, 0.6790000, 0.7814000, 1.2127000, 1.7594000, 1.0335000, 1.4471000, 1.1956000, 1.9687999, 0.3143000, 0.8712000, 0.4945000, 0.7835000, 1.3070000, 1.5806000, 1.8568000, 1.6743000, 1.9881999, 1.6366000, 0.0619000, 0.0193000, 0.0520000, 0.6924000, 0.6902000, 0.9287000, 0.8926000, 0.2542000, 0.9979000, 0.7742000, 0.6563000, 0.9265000]]

Expected (Unparsed): [[3.330669073875467e-15,1.229739968259683e-6,6.435039167655385e-10,0.1145,0.3121,0.2694,0.7919,0.8126,0.2054,0.0689,0.9254,0.6691,1.1066,1.9451,1.4574,1.8463,1.0978,1.6401,0.5384,0.2206,0.1605,0.1982,1.6031,1.0112,1.1203,1.3802,1.3839,1.7343,0.3586,0.7632,0.679,0.7814,1.2127,1.7594,1.0335,1.4471,1.1956,1.9688,0.3143,0.8712,0.4945,0.7835,1.307,1.5806,1.8568,1.6743,1.9882,1.6366,0.0619,0.0193,0.052,0.6924,0.6902,0.9287,0.8926,0.2542,0.9979,0.7742,0.6563,0.9265]]

Actual:   [[0, 0, 0, 0.1145, 0.3121, 0.2694, 0.7919, 0.8126, 0.2054, 0.0689, 0.9254, 0.6691, 1.1066, 1.9451, 1.4574, 1.8463, 1.0978, 1.6401, 0.5384, 0.2206, 0.1605, 0.1982, 1.6031, 1.0112, 1.1204, 1.3802, 1.3839, 1.7343, 0.3586, 0.7632, 0.679, 0.7814, 1.2127, 1.7594, 1.0335, 1.4471, 1.1956, 1.9688, 0.3143, 0.8712, 0.4945, 0.7835, 1.307, 1.5806, 1.8568, 1.6743, 1.9882, 1.6366, 0.0619, 0.0193, 0.052, 0.6924, 0.6902, 0.9287, 0.8926, 0.2542, 0.9979, 0.7742, 0.6563, 0.9265]]

Expected: [[0, 0, 0, 0.1145, 0.3121, 0.2694, 0.7919, 0.8126, 0.2054, 0.0689, 0.9254, 0.6691, 1.1066, 1.9451, 1.4574, 1.8463, 1.0978, 1.6401, 0.5384, 0.2206, 0.1605, 0.1982, 1.6031, 1.0112, 1.1203, 1.3802, 1.3839, 1.7343, 0.3586, 0.7632, 0.679, 0.7814, 1.2127, 1.7594, 1.0335, 1.4471, 1.1956, 1.9688, 0.3143, 0.8712, 0.4945, 0.7835, 1.307, 1.5806, 1.8568, 1.6743, 1.9882, 1.6366, 0.0619, 0.0193, 0.052, 0.6924, 0.6902, 0.9287, 0.8926, 0.2542, 0.9979, 0.7742, 0.6563, 0.9265]]