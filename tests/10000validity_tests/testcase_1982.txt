import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add14028 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in1Add14028 = tf.keras.layers.Input(shape=([2, 1, 1, 2]))
in0Con20519 = tf.keras.layers.Input(shape=([2, 3, 2, 1]))
in0Sub60672 = tf.keras.layers.Input(shape=([2, 3, 2, 3]))
in1Sub60672 = tf.keras.layers.Input(shape=([2, 3, 2, 3]))

Add14028 = keras.layers.Add(name = 'Add14028', )([in0Add14028,in1Add14028])
Zer1911 = keras.layers.ZeroPadding3D(padding=((0, 0), (2, 0), (1, 0)), name = 'Zer1911', )(Add14028)
Con20519 = keras.layers.Concatenate(axis=4, name = 'Con20519', )([Zer1911,in0Con20519])
Sub60672 = keras.layers.Subtract(name = 'Sub60672', )([in0Sub60672,in1Sub60672])
Max59279 = keras.layers.Maximum(name = 'Max59279', )([Con20519,Sub60672])
Res2133 = keras.layers.Reshape((2, 3, 6), name = 'Res2133', )(Max59279)
Glo64366 = keras.layers.GlobalMaxPool2D(name = 'Glo64366', )(Res2133)
model = tf.keras.models.Model(inputs=[in0Add14028,in1Add14028,in0Con20519,in0Sub60672,in1Sub60672], outputs=Glo64366)
in0Add14028 = tf.constant([[[[[0.3482, 0.064]]], [[[0.5302, 0.9032]]]]])
in1Add14028 = tf.constant([[[[[0.2036, 0.7262]]], [[[0.3688, 0.0657]]]]])
in0Con20519 = tf.constant([[[[[0.7274], [0.2017]], [[0.5581], [0.8453]], [[0.2186], [0.612]]], [[[0.0422], [0.8961]], [[0.5573], [0.2781]], [[0.7738], [0.3852]]]]])
in0Sub60672 = tf.constant([[[[[0.4541, 0.2693, 0.1763], [0.1684, 0.4725, 0.9366]], [[0.305, 0.5613, 0.1278], [0.1219, 0.8601, 0.5942]], [[0.3235, 0.5197, 0.487], [0.7854, 0.2867, 0.3236]]], [[[0.7629, 0.4915, 0.3085], [0.6193, 0.7614, 0.9938]], [[0.1983, 0.7898, 0.6918], [0.9742, 0.0584, 0.4434]], [[0.1219, 0.9384, 0.1152], [0.1024, 0.1893, 0.2631]]]]])
in1Sub60672 = tf.constant([[[[[0.2448, 0.6505, 0.3722], [0.1939, 0.5252, 0.3281]], [[0.8533, 0.3006, 0.6126], [0.8817, 0.2371, 0.6088]], [[0.9914, 0.3307, 0.4041], [0.8688, 0.1823, 0.6968]]], [[[0.5807, 0.1998, 0.8025], [0.9549, 0.2814, 0.6503]], [[0.9683, 0.4146, 0.6428], [0.0534, 0.9088, 0.7127]], [[0.8092, 0.9255, 0.8115], [0.614, 0.4522, 0.0529]]]]])
print (np.array2string(model.predict([in0Add14028,in1Add14028,in0Con20519,in0Sub60672,in1Sub60672],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Glo64366.png')

LAdd14028 = add_layer([[[[[[0.3482, 0.064]]], [[[0.5302, 0.9032]]]]], [[[[[0.2036, 0.7262]]], [[[0.3688, 0.0657]]]]]], Add14028), 
LZer1911 = zero_padding3D_layer(Add14028, 0, 0, 2, 0, 1, 0, Zer1911), 
LCon20519 = concatenate_layer([Zer1911,[[[[[0.7274], [0.2017]], [[0.5581], [0.8453]], [[0.2186], [0.612]]], [[[0.0422], [0.8961]], [[0.5573], [0.2781]], [[0.7738], [0.3852]]]]]], 4, Con20519), 
LSub60672 = subtract_layer([[[[[0.4541, 0.2693, 0.1763], [0.1684, 0.4725, 0.9366]], [[0.305, 0.5613, 0.1278], [0.1219, 0.8601, 0.5942]], [[0.3235, 0.5197, 0.487], [0.7854, 0.2867, 0.3236]]], [[[0.7629, 0.4915, 0.3085], [0.6193, 0.7614, 0.9938]], [[0.1983, 0.7898, 0.6918], [0.9742, 0.0584, 0.4434]], [[0.1219, 0.9384, 0.1152], [0.1024, 0.1893, 0.2631]]]]], [[[[[0.2448, 0.6505, 0.3722], [0.1939, 0.5252, 0.3281]], [[0.8533, 0.3006, 0.6126], [0.8817, 0.2371, 0.6088]], [[0.9914, 0.3307, 0.4041], [0.8688, 0.1823, 0.6968]]], [[[0.5807, 0.1998, 0.8025], [0.9549, 0.2814, 0.6503]], [[0.9683, 0.4146, 0.6428], [0.0534, 0.9088, 0.7127]], [[0.8092, 0.9255, 0.8115], [0.614, 0.4522, 0.0529]]]]], Sub60672), 
LMax59279 = maximum_layer([Con20519,Sub60672], Max59279), 
LRes2133 = reshape_layer(Max59279, [2, 3, 6], Res2133), 
LGlo64366 = global_max_pool2D_layer(Res2133, Glo64366), 
exec_layers([LAdd14028,LZer1911,LCon20519,LSub60672,LMax59279,LRes2133,LGlo64366],["Add14028","Zer1911","Con20519","Sub60672","Max59279","Res2133","Glo64366"],Glo64366,"Glo64366")

Actual (Unparsed): [[0.2093000, 0.3752000, 0.7738000, 0.9208000, 0.9689000, 0.8961000]]

Expected (Unparsed): [[0.2093,0.3751999999999999,0.7738,0.9208,0.9689,0.8961]]

Actual:   [[0.2093, 0.3752, 0.7738, 0.9208, 0.9689, 0.8961]]

Expected: [[0.2093, 0.3752, 0.7738, 0.9208, 0.9689, 0.8961]]