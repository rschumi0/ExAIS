import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub33760 = tf.keras.layers.Input(shape=([2, 3, 3, 2]))
in1Sub33760 = tf.keras.layers.Input(shape=([2, 3, 3, 2]))
in0Ave65983 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in1Ave65983 = tf.keras.layers.Input(shape=([1, 1, 2, 1]))
in0Con67178 = tf.keras.layers.Input(shape=([2, 3, 3, 1]))

Sub33760 = keras.layers.Subtract(name = 'Sub33760', )([in0Sub33760,in1Sub33760])
Ave65983 = keras.layers.Average(name = 'Ave65983', )([in0Ave65983,in1Ave65983])
Sof58880 = keras.layers.Softmax(axis=1, name = 'Sof58880', )(Ave65983)
Zer80242 = keras.layers.ZeroPadding3D(padding=((1, 0), (2, 0), (1, 0)), name = 'Zer80242', )(Sof58880)
Con67178 = keras.layers.Concatenate(axis=4, name = 'Con67178', )([Zer80242,in0Con67178])
Min27050 = keras.layers.Minimum(name = 'Min27050', )([Sub33760,Con67178])
model = tf.keras.models.Model(inputs=[in0Sub33760,in1Sub33760,in0Ave65983,in1Ave65983,in0Con67178], outputs=Min27050)
in0Sub33760 = tf.constant([[[[[0.2976, 0.62], [0.068, 0.7375], [0.2547, 0.8261]], [[0.9868, 0.6095], [0.1856, 0.97], [0.3113, 0.0121]], [[0.9627, 0.1955], [0.1502, 0.6066], [0.2285, 0.7981]]], [[[0.1468, 0.5663], [0.8161, 0.0547], [0.1046, 0.9404]], [[0.7469, 0.4537], [0.428, 0.154], [0.4963, 0.8]], [[0.3443, 0.129], [0.0223, 0.7631], [0.313, 0.8737]]]]])
in1Sub33760 = tf.constant([[[[[0.3881, 0.313], [0.513, 0.0289], [0.6803, 0.1461]], [[0.8024, 0.7798], [0.321, 0.6403], [0.0856, 0.7521]], [[0.8057, 0.101], [0.5982, 0.9885], [0.3574, 0.0577]]], [[[0.216, 0.8762], [0.9835, 0.1547], [0.5352, 0.9378]], [[0.945, 0.7437], [0.1293, 0.7315], [0.7037, 0.6275]], [[0.0909, 0.7124], [0.999, 0.5344], [0.6877, 0.8033]]]]])
in0Ave65983 = tf.constant([[[[[0.8256], [0.8077]]]]])
in1Ave65983 = tf.constant([[[[[0.727], [0.5925]]]]])
in0Con67178 = tf.constant([[[[[0.9676], [0.3351], [0.447]], [[0.5304], [0.4963], [0.8634]], [[0.8267], [0.371], [0.6001]]], [[[0.4311], [0.7271], [0.4418]], [[0.1411], [0.8818], [0.9197]], [[0.6098], [0.6355], [0.3248]]]]])
print (np.array2string(model.predict([in0Sub33760,in1Sub33760,in0Ave65983,in1Ave65983,in0Con67178],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min27050.png')

LSub33760 = subtract_layer([[[[[0.2976, 0.62], [0.068, 0.7375], [0.2547, 0.8261]], [[0.9868, 0.6095], [0.1856, 0.97], [0.3113, 0.0121]], [[0.9627, 0.1955], [0.1502, 0.6066], [0.2285, 0.7981]]], [[[0.1468, 0.5663], [0.8161, 0.0547], [0.1046, 0.9404]], [[0.7469, 0.4537], [0.428, 0.154], [0.4963, 0.8]], [[0.3443, 0.129], [0.0223, 0.7631], [0.313, 0.8737]]]]], [[[[[0.3881, 0.313], [0.513, 0.0289], [0.6803, 0.1461]], [[0.8024, 0.7798], [0.321, 0.6403], [0.0856, 0.7521]], [[0.8057, 0.101], [0.5982, 0.9885], [0.3574, 0.0577]]], [[[0.216, 0.8762], [0.9835, 0.1547], [0.5352, 0.9378]], [[0.945, 0.7437], [0.1293, 0.7315], [0.7037, 0.6275]], [[0.0909, 0.7124], [0.999, 0.5344], [0.6877, 0.8033]]]]], Sub33760), 
LAve65983 = average_layer([[[[[[0.8256], [0.8077]]]]], [[[[[0.727], [0.5925]]]]]], Ave65983), 
LSof58880 = softmax_layer(Ave65983, 1, Sof58880), 
LZer80242 = zero_padding3D_layer(Sof58880, 1, 0, 2, 0, 1, 0, Zer80242), 
LCon67178 = concatenate_layer([Zer80242,[[[[[0.9676], [0.3351], [0.447]], [[0.5304], [0.4963], [0.8634]], [[0.8267], [0.371], [0.6001]]], [[[0.4311], [0.7271], [0.4418]], [[0.1411], [0.8818], [0.9197]], [[0.6098], [0.6355], [0.3248]]]]]], 4, Con67178), 
LMin27050 = minimum_layer([Sub33760,Con67178], Min27050), 
exec_layers([LSub33760,LAve65983,LSof58880,LZer80242,LCon67178,LMin27050],["Sub33760","Ave65983","Sof58880","Zer80242","Con67178","Min27050"],Min27050,"Min27050")

Actual (Unparsed): [[[[[-0.0905000, 0.3070000], [-0.4450000, 0.3351000], [-0.4256000, 0.4470000]], [[0.0000000, -0.1703000], [-0.1354000, 0.3297001], [0.0000000, -0.7400000]], [[0.0000000, 0.0945000], [-0.4480000, -0.3819000], [-0.1289000, 0.6001000]]], [[[-0.0692000, -0.3099000], [-0.1674000, -0.1000000], [-0.4306000, 0.0026000]], [[-0.1981000, -0.2900000], [0.0000000, -0.5775000], [-0.2074000, 0.1725000]], [[0.0000000, -0.5834000], [-0.9767000, 0.2287000], [-0.3747000, 0.0704000]]]]]

Expected (Unparsed): [[[[[-0.09050000000000002,0.307],[-0.445,0.3351],[-0.42560000000000003,0.447]],[[0,-0.1703],[-0.13540000000000002,0.3297],[0,-0.74]],[[0,0.0945],[-0.44799999999999995,-0.3819],[-0.1289,0.6001]]],[[[-0.06919999999999998,-0.30989999999999995],[-0.1674,-0.1],[-0.4306,0.0026000000000000467]],[[-0.19809999999999994,-0.29000000000000004],[0,-0.5775],[-0.20739999999999997,0.1725000000000001]],[[0,-0.5834],[-0.9767,0.22870000000000001],[-0.3747,0.07040000000000002]]]]]

Actual:   [[[[[-0.0905, 0.307], [-0.445, 0.3351], [-0.4256, 0.447]], [[0, -0.1703], [-0.1354, 0.3298], [0, -0.74]], [[0, 0.0945], [-0.448, -0.3819], [-0.1289, 0.6001]]], [[[-0.0692, -0.3099], [-0.1674, -0.1], [-0.4306, 0.0026]], [[-0.1981, -0.29], [0, -0.5775], [-0.2074, 0.1725]], [[0, -0.5834], [-0.9767, 0.2287], [-0.3747, 0.0704]]]]]

Expected: [[[[[-0.0905, 0.307], [-0.445, 0.3351], [-0.4256, 0.447]], [[0, -0.1703], [-0.1354, 0.3297], [0, -0.74]], [[0, 0.0945], [-0.4479, -0.3819], [-0.1289, 0.6001]]], [[[-0.0691, -0.3098], [-0.1674, -0.1], [-0.4306, 0.0027]], [[-0.198, -0.29], [0, -0.5775], [-0.2073, 0.1726]], [[0, -0.5834], [-0.9767, 0.2288], [-0.3747, 0.0705]]]]]