import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0PRe53347 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in0Con68917 = tf.keras.layers.Input(shape=([4, 2, 1]))
in0Cro8080 = tf.keras.layers.Input(shape=([4, 3, 3]))

PRe53347 = keras.layers.PReLU(name = 'PRe53347', input_shape=(1, 2, 2, 1))(in0PRe53347)
Res48948 = keras.layers.Reshape((1, 2, 2), name = 'Res48948', )(PRe53347)
Zer65443 = keras.layers.ZeroPadding2D(padding=((3, 0), (0, 0)), name = 'Zer65443', )(Res48948)
Con68917 = keras.layers.Concatenate(axis=3, name = 'Con68917', )([Zer65443,in0Con68917])
Cro8080 = keras.layers.Cropping2D(cropping=((0, 0), (0, 1)), name = 'Cro8080', )(in0Cro8080)
Mul42654 = keras.layers.Multiply(name = 'Mul42654', )([Con68917,Cro8080])
Cro38660 = keras.layers.Cropping2D(cropping=((2, 0), (0, 1)), name = 'Cro38660', )(Mul42654)
Res56833 = keras.layers.Reshape((2, 3), name = 'Res56833', )(Cro38660)
Sep95540 = keras.layers.SeparableConv1D(3, (2),strides=(2), padding='valid', name = 'Sep95540', )(Res56833)
model = tf.keras.models.Model(inputs=[in0PRe53347,in0Con68917,in0Cro8080], outputs=Sep95540)
w = model.get_layer('PRe53347').get_weights() 
w[0] = np.array([[[[0.4212], [0.8106]], [[0.5337], [0.7169]]]])
model.get_layer('PRe53347').set_weights(w) 
w = model.get_layer('Sep95540').get_weights() 
w[0] = np.array([[[0.4741], [0.7463], [0.7063]], [[0.9596], [0.2848], [0.9979]]])
w[1] = np.array([[[0.9546, 0.6758, 0.9993], [0.4955, 0.8149, 0.4395], [0.3978, 0.7695, 0.0112]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep95540').set_weights(w) 
in0PRe53347 = tf.constant([[[[[0.3693], [0.372]], [[0.4898], [0.6506]]]]])
in0Con68917 = tf.constant([[[[0.3604], [0.0188]], [[0.5445], [0.75]], [[0.6098], [0.4477]], [[0.2546], [0.593]]]])
in0Cro8080 = tf.constant([[[[1.8801, 1.7204, 1.9162], [1.3276, 1.2534, 1.9427], [1.1148, 1.5317, 1.8014]], [[1.6887, 1.1423, 1.3909], [1.7813, 1.5499, 1.7169], [1.3473, 1.4685, 1.9065]], [[1.0626, 1.4744, 1.7256], [1.9847, 1.5587, 1.6096], [1.4821, 1.8494, 1.5913]], [[1.4834, 1.6008, 1.634], [1.8943, 1.556, 1.5861], [1.0415, 1.9743, 1.4562]]]])
print (np.array2string(model.predict([in0PRe53347,in0Con68917,in0Cro8080],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sep95540.png')

LPRe53347 = prelu_layer([[[[[0.3693], [0.372]], [[0.4898], [0.6506]]]]], [[[[0.4212], [0.8106]], [[0.5337], [0.7169]]]], PRe53347), 
LRes48948 = reshape_layer(PRe53347, [1, 2, 2], Res48948), 
LZer65443 = zero_padding2D_layer(Res48948, 3, 0, 0, 0, Zer65443), 
LCon68917 = concatenate_layer([Zer65443,[[[[0.3604], [0.0188]], [[0.5445], [0.75]], [[0.6098], [0.4477]], [[0.2546], [0.593]]]]], 3, Con68917), 
LCro8080 = cropping2D_layer([[[[1.8801, 1.7204, 1.9162], [1.3276, 1.2534, 1.9427], [1.1148, 1.5317, 1.8014]], [[1.6887, 1.1423, 1.3909], [1.7813, 1.5499, 1.7169], [1.3473, 1.4685, 1.9065]], [[1.0626, 1.4744, 1.7256], [1.9847, 1.5587, 1.6096], [1.4821, 1.8494, 1.5913]], [[1.4834, 1.6008, 1.634], [1.8943, 1.556, 1.5861], [1.0415, 1.9743, 1.4562]]]], 0, 0, 0, 1, Cro8080), 
LMul42654 = multiply_layer([Con68917,Cro8080], Mul42654), 
LCro38660 = cropping2D_layer(Mul42654, 2, 0, 0, 1, Cro38660), 
LRes56833 = reshape_layer(Cro38660, [2, 3], Res56833), 
LSep95540 = separable_conv1D_layer(Res56833, 2,[[[[0.4741], [0.7463], [0.7063]], [[0.9596], [0.2848], [0.9979]]],[[[0.9546, 0.6758, 0.9993], [0.4955, 0.8149, 0.4395], [0.3978, 0.7695, 0.0112]]]],[0, 0, 0], 2, false, Sep95540), 
exec_layers([LPRe53347,LRes48948,LZer65443,LCon68917,LCro8080,LMul42654,LCro38660,LRes56833,LSep95540],["PRe53347","Res48948","Zer65443","Con68917","Cro8080","Mul42654","Cro38660","Res56833","Sep95540"],Sep95540,"Sep95540")

Actual (Unparsed): [[[1.0466534, 1.3848242, 0.6128316]]]

Expected (Unparsed): [[[1.0466534334818305,1.3848242507840616,0.6128315732565784]]]

Actual:   [[[1.0467, 1.3849, 0.6129]]]

Expected: [[[1.0467, 1.3849, 0.6129]]]