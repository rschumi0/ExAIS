import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro38671 = tf.keras.layers.Input(shape=([4, 4, 1, 3]))
in0Max45992 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con98686 = tf.keras.layers.Input(shape=([6, 2, 2]))

Cro38671 = keras.layers.Cropping3D(cropping=((1, 0), (3, 0), (0, 0)), name = 'Cro38671', )(in0Cro38671)
Res66922 = keras.layers.Reshape((3, 1, 3), name = 'Res66922', )(Cro38671)
Dep70748 = keras.layers.DepthwiseConv2D((1, 1),strides=(1, 1), padding='valid', name = 'Dep70748', )(Res66922)
Up_46893 = keras.layers.UpSampling2D(size=(2, 2), name = 'Up_46893', )(Dep70748)
Max45992 = keras.layers.MaxPool2D(pool_size=(1, 1), name = 'Max45992', )(in0Max45992)
Ave23292 = keras.layers.AveragePooling2D(pool_size=(1, 1), strides=(1, 1), padding='same', name = 'Ave23292', )(Max45992)
Zer57981 = keras.layers.ZeroPadding2D(padding=((5, 0), (1, 0)), name = 'Zer57981', )(Ave23292)
Con98686 = keras.layers.Concatenate(axis=3, name = 'Con98686', )([Zer57981,in0Con98686])
Min75663 = keras.layers.Minimum(name = 'Min75663', )([Up_46893,Con98686])
model = tf.keras.models.Model(inputs=[in0Cro38671,in0Max45992,in0Con98686], outputs=Min75663)
w = model.get_layer('Dep70748').get_weights() 
w[0] = np.array([[[[0.3042], [0.4056], [0.2619]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Dep70748').set_weights(w) 
in0Cro38671 = tf.constant([[[[[1.6387, 1.7728, 1.1913]], [[1.0785, 1.9033, 1.6207]], [[1.6608, 1.3041, 1.773]], [[1.163, 1.4663, 1.6337]]], [[[1.837, 1.2053, 1.2372]], [[1.325, 1.45, 1.2611]], [[1.3413, 1.466, 1.4915]], [[1.8484, 1.6773, 1.44]]], [[[1.8301, 1.7651, 1.0717]], [[1.0004, 1.7445, 1.8319]], [[1.6318, 1.9956, 1.1967]], [[1.4573, 1.0606, 1.2994]]], [[[1.7742, 1.7824, 1.3831]], [[1.0369, 1.3222, 1.0912]], [[1.7473, 1.7702, 1.7721]], [[1.6354, 1.9698, 1.9109]]]]])
in0Max45992 = tf.constant([[[[1.4411]]]])
in0Con98686 = tf.constant([[[[0.9587, 0.8726], [0.5427, 0.4129]], [[0.577, 0.9312], [0.3243, 0.8639]], [[0.3915, 0.552], [0.1748, 0.1854]], [[0.215, 0.9665], [0.8798, 0.0814]], [[0.9336, 0.0885], [0.5889, 0.9909]], [[0.9507, 0.7762], [0.7131, 0.8496]]]])
print (np.array2string(model.predict([in0Cro38671,in0Max45992,in0Con98686],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min75663.png')

LCro38671 = cropping3D_layer([[[[[1.6387, 1.7728, 1.1913]], [[1.0785, 1.9033, 1.6207]], [[1.6608, 1.3041, 1.773]], [[1.163, 1.4663, 1.6337]]], [[[1.837, 1.2053, 1.2372]], [[1.325, 1.45, 1.2611]], [[1.3413, 1.466, 1.4915]], [[1.8484, 1.6773, 1.44]]], [[[1.8301, 1.7651, 1.0717]], [[1.0004, 1.7445, 1.8319]], [[1.6318, 1.9956, 1.1967]], [[1.4573, 1.0606, 1.2994]]], [[[1.7742, 1.7824, 1.3831]], [[1.0369, 1.3222, 1.0912]], [[1.7473, 1.7702, 1.7721]], [[1.6354, 1.9698, 1.9109]]]]], 1, 0, 3, 0, 0, 0, Cro38671), 
LRes66922 = reshape_layer(Cro38671, [3, 1, 3], Res66922), 
LDep70748 = depthwise_conv2D_layer(Res66922, 1, 1,[[[[0.3042], [0.4056], [0.2619]]]],[0, 0, 0], 1, 1, false, Dep70748), 
LUp_46893 = up_sampling2D_layer(Dep70748, 2, 2, Up_46893), 
LMax45992 = max_pool2D_layer([[[[1.4411]]]], 1, 1, Max45992), 
LAve23292 = average_pooling2D_layer(Max45992, 1, 1, 1, 1, true, Ave23292), 
LZer57981 = zero_padding2D_layer(Ave23292, 5, 0, 1, 0, Zer57981), 
LCon98686 = concatenate_layer([Zer57981,[[[[0.9587, 0.8726], [0.5427, 0.4129]], [[0.577, 0.9312], [0.3243, 0.8639]], [[0.3915, 0.552], [0.1748, 0.1854]], [[0.215, 0.9665], [0.8798, 0.0814]], [[0.9336, 0.0885], [0.5889, 0.9909]], [[0.9507, 0.7762], [0.7131, 0.8496]]]]], 3, Con98686), 
LMin75663 = minimum_layer([Up_46893,Con98686], Min75663), 
exec_layers([LCro38671,LRes66922,LDep70748,LUp_46893,LMax45992,LAve23292,LZer57981,LCon98686,LMin75663],["Cro38671","Res66922","Dep70748","Up_46893","Max45992","Ave23292","Zer57981","Con98686","Min75663"],Min75663,"Min75663")

Actual (Unparsed): [[[[0.0000000, 0.6803129, 0.3771360], [0.0000000, 0.5427000, 0.3771360]], [[0.0000000, 0.5770000, 0.3771360], [0.0000000, 0.3243000, 0.3771360]], [[0.0000000, 0.3915000, 0.3403129], [0.0000000, 0.1748000, 0.1854000]], [[0.0000000, 0.2150000, 0.3403129], [0.0000000, 0.4301794, 0.0814000]], [[0.0000000, 0.7989509, 0.0885000], [0.0000000, 0.5889000, 0.5004647]], [[0.0000000, 0.7989509, 0.5004647], [0.4974887, 0.7131000, 0.5004647]]]]

Expected (Unparsed): [[[[0,0.68031288,0.377136],[0,0.5427,0.377136]],[[0,0.577,0.377136],[0,0.3243,0.377136]],[[0,0.3915,0.34031286000000005],[0,0.1748,0.1854]],[[0,0.215,0.34031286000000005],[0,0.43017936,0.0814]],[[0,0.79895088,0.0885],[0,0.5889,0.50046471]],[[0,0.79895088,0.50046471],[0.49748868,0.7131,0.50046471]]]]

Actual:   [[[[0, 0.6804, 0.3772], [0, 0.5427, 0.3772]], [[0, 0.577, 0.3772], [0, 0.3243, 0.3772]], [[0, 0.3915, 0.3404], [0, 0.1748, 0.1854]], [[0, 0.215, 0.3404], [0, 0.4302, 0.0814]], [[0, 0.799, 0.0885], [0, 0.5889, 0.5005]], [[0, 0.799, 0.5005], [0.4975, 0.7131, 0.5005]]]]

Expected: [[[[0, 0.6804, 0.3772], [0, 0.5427, 0.3772]], [[0, 0.577, 0.3772], [0, 0.3243, 0.3772]], [[0, 0.3915, 0.3404], [0, 0.1748, 0.1854]], [[0, 0.215, 0.3404], [0, 0.4302, 0.0814]], [[0, 0.799, 0.0885], [0, 0.5889, 0.5005]], [[0, 0.799, 0.5005], [0.4975, 0.7131, 0.5005]]]]