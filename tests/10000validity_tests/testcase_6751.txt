import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Con56213 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Zer1840 = tf.keras.layers.Input(shape=([3, 2]))
in0Dot72157 = tf.keras.layers.Input(shape=([3]))
in1Dot72157 = tf.keras.layers.Input(shape=([3]))
in0Con91612 = tf.keras.layers.Input(shape=([9]))
in0Con86370 = tf.keras.layers.Input(shape=([10, 2, 1]))
in0Con55258 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Con98925 = tf.keras.layers.Input(shape=([10, 2, 2]))

Con56213 = keras.layers.Conv2D(4, (2, 2),strides=(1, 1), padding='same', dilation_rate=(1, 1), name = 'Con56213', )(in0Con56213)
Zer81351 = keras.layers.ZeroPadding2D(padding=((8, 0), (0, 0)), name = 'Zer81351', )(Con56213)
Zer1840 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer1840', )(in0Zer1840)
Fla88504 = keras.layers.Flatten(name = 'Fla88504', )(Zer1840)
Dot72157 = keras.layers.Dot(axes=(1, 1), name = 'Dot72157', )([in0Dot72157,in1Dot72157])
Con91612 = keras.layers.Concatenate(axis=1, name = 'Con91612', )([Dot72157,in0Con91612])
Ave3239 = keras.layers.Average(name = 'Ave3239', )([Fla88504,Con91612])
Res34490 = keras.layers.Reshape((10, 1), name = 'Res34490', )(Ave3239)
Cro29325 = keras.layers.Cropping1D(cropping=((9, 0)), name = 'Cro29325', )(Res34490)
Res55675 = keras.layers.Reshape((1, 1, 1), name = 'Res55675', )(Cro29325)
Zer53286 = keras.layers.ZeroPadding2D(padding=((9, 0), (1, 0)), name = 'Zer53286', )(Res55675)
Con86370 = keras.layers.Concatenate(axis=3, name = 'Con86370', )([Zer53286,in0Con86370])
Con55258 = keras.layers.Conv2DTranspose(2, (1, 2),strides=(5, 1), padding='same', name = 'Con55258', )(in0Con55258)
Mul38073 = keras.layers.Multiply(name = 'Mul38073', )([Con86370,Con55258])
Con98925 = keras.layers.Concatenate(axis=3, name = 'Con98925', )([Mul38073,in0Con98925])
Add3603 = keras.layers.Add(name = 'Add3603', )([Zer81351,Con98925])
model = tf.keras.models.Model(inputs=[in0Con56213,in0Zer1840,in0Dot72157,in1Dot72157,in0Con91612,in0Con86370,in0Con55258,in0Con98925], outputs=Add3603)
w = model.get_layer('Con56213').get_weights() 
w[0] = np.array([[[[0.8664, 0.9954, 0.633, 0.6631]], [[0.9534, 0.7322, 0.7179, 0.5033]]], [[[0.3711, 0.1732, 0.4691, 0.0583]], [[0.9344, 0.9874, 0.9497, 0.0354]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con56213').set_weights(w) 
w = model.get_layer('Con55258').get_weights() 
w[0] = np.array([[[[0.0044], [0.9035]], [[0.1322], [0.1119]]]])
w[1] = np.array([0, 0])
model.get_layer('Con55258').set_weights(w) 
in0Con56213 = tf.constant([[[[0.1706], [0.2497]], [[0.5588], [0.5413]]]])
in0Zer1840 = tf.constant([[[1.9751, 1.2505], [1.1571, 1.7574], [1.3757, 1.8255]]])
in0Dot72157 = tf.constant([[0.8408, 0.7994, 0.7117]])
in1Dot72157 = tf.constant([[0.8527, 0.2661, 0.8551]])
in0Con91612 = tf.constant([[0.1011, 0.8502, 0.0968, 0.5033, 0.1095, 0.9159, 0.4579, 0.7743, 0.866]])
in0Con86370 = tf.constant([[[[0.1747], [0.2542]], [[0.9407], [0.9688]], [[0.8192], [0.3547]], [[0.3793], [0.9055]], [[0.7421], [0.4702]], [[0.8972], [0.7662]], [[0.2548], [0.5357]], [[0.8207], [0.5813]], [[0.858], [0.6489]], [[0.2454], [0.0954]]]])
in0Con55258 = tf.constant([[[[0.4208], [0.5468]], [[0.8696], [0.597]]]])
in0Con98925 = tf.constant([[[[0.4257, 0.205], [0.3346, 0.6399]], [[0.2158, 0.4394], [0.8791, 0.5619]], [[0.31, 0.6951], [0.9565, 0.2337]], [[0.0297, 0.9672], [0.3685, 0.6566]], [[0.1143, 0.1966], [0.0964, 0.8879]], [[0.1752, 0.5892], [0.1588, 0.0178]], [[0.427, 0.9878], [0.3072, 0.9115]], [[0.0849, 0.8625], [0.4395, 0.0558]], [[0.0242, 0.8287], [0.896, 0.4003]], [[0.9136, 0.5941], [0.9965, 0.7759]]]])
print (np.array2string(model.predict([in0Con56213,in0Zer1840,in0Dot72157,in1Dot72157,in0Con91612,in0Con86370,in0Con55258,in0Con98925],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add3603.png')

LCon56213 = conv2D_layer([[[[0.1706], [0.2497]], [[0.5588], [0.5413]]]], 2, 2,[[[[0.8664, 0.9954, 0.633, 0.6631]], [[0.9534, 0.7322, 0.7179, 0.5033]]], [[[0.3711, 0.1732, 0.4691, 0.0583]], [[0.9344, 0.9874, 0.9497, 0.0354]]]],[0, 0, 0, 0], 1, 1, true, 1, 1, Con56213), 
LZer81351 = zero_padding2D_layer(Con56213, 8, 0, 0, 0, Zer81351), 
LZer1840 = zero_padding1D_layer([[[1.9751, 1.2505], [1.1571, 1.7574], [1.3757, 1.8255]]], 1, 1, Zer1840), 
LFla88504 = flatten_layer(Zer1840, Fla88504), 
LDot72157 = dot_layer([[0.8408, 0.7994, 0.7117]], [[0.8527, 0.2661, 0.8551]], 1, 1, Dot72157), 
LCon91612 = concatenate_layer([Dot72157,[[0.1011, 0.8502, 0.0968, 0.5033, 0.1095, 0.9159, 0.4579, 0.7743, 0.866]]], 1, Con91612), 
LAve3239 = average_layer([Fla88504,Con91612], Ave3239), 
LRes34490 = reshape_layer(Ave3239, [10, 1], Res34490), 
LCro29325 = cropping1D_layer(Res34490, 9, 0, Cro29325), 
LRes55675 = reshape_layer(Cro29325, [1, 1, 1], Res55675), 
LZer53286 = zero_padding2D_layer(Res55675, 9, 0, 1, 0, Zer53286), 
LCon86370 = concatenate_layer([Zer53286,[[[[0.1747], [0.2542]], [[0.9407], [0.9688]], [[0.8192], [0.3547]], [[0.3793], [0.9055]], [[0.7421], [0.4702]], [[0.8972], [0.7662]], [[0.2548], [0.5357]], [[0.8207], [0.5813]], [[0.858], [0.6489]], [[0.2454], [0.0954]]]]], 3, Con86370), 
LCon55258 = conv2D_transpose_layer([[[[0.4208], [0.5468]], [[0.8696], [0.597]]]], 1, 2,[[[[0.0044], [0.9035]], [[0.1322], [0.1119]]]],[0, 0], 5, 1, true, Con55258), 
LMul38073 = multiply_layer([Con86370,Con55258], Mul38073), 
LCon98925 = concatenate_layer([Mul38073,[[[[0.4257, 0.205], [0.3346, 0.6399]], [[0.2158, 0.4394], [0.8791, 0.5619]], [[0.31, 0.6951], [0.9565, 0.2337]], [[0.0297, 0.9672], [0.3685, 0.6566]], [[0.1143, 0.1966], [0.0964, 0.8879]], [[0.1752, 0.5892], [0.1588, 0.0178]], [[0.427, 0.9878], [0.3072, 0.9115]], [[0.0849, 0.8625], [0.4395, 0.0558]], [[0.0242, 0.8287], [0.896, 0.4003]], [[0.9136, 0.5941], [0.9965, 0.7759]]]]], 3, Con98925), 
LAdd3603 = add_layer([Zer81351,Con98925], Add3603), 
exec_layers([LCon56213,LZer81351,LZer1840,LFla88504,LDot72157,LCon91612,LAve3239,LRes34490,LCro29325,LRes55675,LZer53286,LCon86370,LCon55258,LMul38073,LCon98925,LAdd3603],["Con56213","Zer81351","Zer1840","Fla88504","Dot72157","Con91612","Ave3239","Res34490","Cro29325","Res55675","Zer53286","Con86370","Con55258","Mul38073","Con98925","Add3603"],Add3603,"Add3603")

Actual (Unparsed): [[[[0.0000000, 0.0664197, 0.4257000, 0.2050000], [0.0000000, 0.1375530, 0.3346000, 0.6399000]], [[0.0000000, 0.0000000, 0.2158000, 0.4394000], [0.0000000, 0.0000000, 0.8791000, 0.5619000]], [[0.0000000, 0.0000000, 0.3100000, 0.6951000], [0.0000000, 0.0000000, 0.9565000, 0.2337000]], [[0.0000000, 0.0000000, 0.0297000, 0.9672000], [0.0000000, 0.0000000, 0.3685000, 0.6566000]], [[0.0000000, 0.0000000, 0.1143000, 0.1966000], [0.0000000, 0.0000000, 0.0964000, 0.8879000]], [[0.0000000, 0.7049153, 0.1752000, 0.5892000], [0.0000000, 0.4878378, 0.1588000, 0.0178000]], [[0.0000000, 0.0000000, 0.4270000, 0.9878000], [0.0000000, 0.0000000, 0.3072000, 0.9115000]], [[0.0000000, 0.0000000, 0.0849000, 0.8625000], [0.0000000, 0.0000000, 0.4395000, 0.0558000]], [[1.0990332, 0.9839093, 1.0876551, 1.1192389], [0.4172165, 0.3423045, 1.3079840, 0.5974339]], [[1.0002197, 0.9525694, 1.6559197, 1.2370766], [0.4689823, 0.5388100, 1.3391429, 1.1348360]]]]

Expected (Unparsed): [[[[0.0,0.06641968216,0.4257,0.205],[0.0,0.137553039544,0.3346,0.6399]],[[0,0.0,0.2158,0.4394],[0,0.0,0.8791,0.5619]],[[0,0.0,0.31,0.6951],[0,0.0,0.9565,0.2337]],[[0,0.0,0.0297,0.9672],[0,0.0,0.3685,0.6566]],[[0,0.0,0.1143,0.1966],[0,0.0,0.0964,0.8879]],[[0.0,0.7049153259200001,0.1752,0.5892],[0.0,0.487837808388,0.1588,0.0178]],[[0,0.0,0.427,0.9878],[0,0.0,0.3072,0.9115]],[[0,0.0,0.0849,0.8625],[0,0.0,0.4395,0.0558]],[[1.09903322,0.9839093600000001,1.08765512,1.1192389299999999],[0.41721651,0.34230454,1.30798393,0.59743386]],[[1.00021974,0.9525693799999999,1.6559196699999998,1.23707657],[0.46898231999999995,0.53881002,1.3391429000000001,1.13483603]]]]

Actual:   [[[[0, 0.0665, 0.4257, 0.205], [0, 0.1376, 0.3346, 0.6399]], [[0, 0, 0.2158, 0.4394], [0, 0, 0.8791, 0.5619]], [[0, 0, 0.31, 0.6951], [0, 0, 0.9565, 0.2337]], [[0, 0, 0.0297, 0.9672], [0, 0, 0.3685, 0.6566]], [[0, 0, 0.1143, 0.1966], [0, 0, 0.0964, 0.8879]], [[0, 0.705, 0.1752, 0.5892], [0, 0.4879, 0.1588, 0.0178]], [[0, 0, 0.427, 0.9878], [0, 0, 0.3072, 0.9115]], [[0, 0, 0.0849, 0.8625], [0, 0, 0.4395, 0.0558]], [[1.0991, 0.984, 1.0877, 1.1193], [0.4173, 0.3424, 1.308, 0.5975]], [[1.0003, 0.9526, 1.656, 1.2371], [0.469, 0.5389, 1.3392, 1.1349]]]]

Expected: [[[[0, 0.0665, 0.4257, 0.205], [0, 0.1376, 0.3346, 0.6399]], [[0, 0, 0.2158, 0.4394], [0, 0, 0.8791, 0.5619]], [[0, 0, 0.31, 0.6951], [0, 0, 0.9565, 0.2337]], [[0, 0, 0.0297, 0.9672], [0, 0, 0.3685, 0.6566]], [[0, 0, 0.1143, 0.1966], [0, 0, 0.0964, 0.8879]], [[0, 0.705, 0.1752, 0.5892], [0, 0.4879, 0.1588, 0.0178]], [[0, 0, 0.427, 0.9878], [0, 0, 0.3072, 0.9115]], [[0, 0, 0.0849, 0.8625], [0, 0, 0.4395, 0.0558]], [[1.0991, 0.984, 1.0877, 1.1193], [0.4173, 0.3424, 1.308, 0.5975]], [[1.0003, 0.9526, 1.656, 1.2371], [0.469, 0.5389, 1.3392, 1.1349]]]]