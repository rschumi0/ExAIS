import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min5070 = tf.keras.layers.Input(shape=([1, 2]))
in1Min5070 = tf.keras.layers.Input(shape=([1, 2]))
in0Con6844 = tf.keras.layers.Input(shape=([4, 1]))
in0Mul96199 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))
in1Mul96199 = tf.keras.layers.Input(shape=([2, 1, 2, 1]))

Min5070 = keras.layers.Minimum(name = 'Min5070', )([in0Min5070,in1Min5070])
Res32352 = keras.layers.Reshape((1, 2, 1), name = 'Res32352', )(Min5070)
Glo6094 = keras.layers.GlobalAveragePooling2D(name = 'Glo6094', )(Res32352)
Res4751 = keras.layers.Reshape((1, 1), name = 'Res4751', )(Glo6094)
Res51881 = keras.layers.Reshape((1, 1, 1), name = 'Res51881', )(Res4751)
Res63952 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res63952', )(Res51881)
Glo71543 = keras.layers.GlobalAveragePooling3D(name = 'Glo71543', )(Res63952)
Res24017 = keras.layers.Reshape((1, 1), name = 'Res24017', )(Glo71543)
Zer76446 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer76446', )(Res24017)
Con6844 = keras.layers.Concatenate(axis=2, name = 'Con6844', )([Zer76446,in0Con6844])
Mul96199 = keras.layers.Multiply(name = 'Mul96199', )([in0Mul96199,in1Mul96199])
Res62155 = keras.layers.Reshape((2, 1, 2), name = 'Res62155', )(Mul96199)
Res10704 = keras.layers.Reshape((2, 2), name = 'Res10704', )(Res62155)
Zer7374 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer7374', )(Res10704)
Thr50815 = keras.layers.ThresholdedReLU(theta=5.039832705872037, name = 'Thr50815', )(Zer7374)
Ave56345 = keras.layers.Average(name = 'Ave56345', )([Con6844,Thr50815])
model = tf.keras.models.Model(inputs=[in0Min5070,in1Min5070,in0Con6844,in0Mul96199,in1Mul96199], outputs=Ave56345)
in0Min5070 = tf.constant([[[0.8317, 0.1223]]])
in1Min5070 = tf.constant([[[0.653, 0.7776]]])
in0Con6844 = tf.constant([[[0.2137], [0.7549], [0.7173], [0.0209]]])
in0Mul96199 = tf.constant([[[[[0.8274], [0.1411]]], [[[0.7093], [0.8261]]]]])
in1Mul96199 = tf.constant([[[[[0.899], [0.3212]]], [[[0.5458], [0.6687]]]]])
print (np.array2string(model.predict([in0Min5070,in1Min5070,in0Con6844,in0Mul96199,in1Mul96199],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave56345.png')

LMin5070 = minimum_layer([[[[0.8317, 0.1223]]], [[[0.653, 0.7776]]]], Min5070), 
LRes32352 = reshape_layer(Min5070, [1, 2, 1], Res32352), 
LGlo6094 = global_average_pooling2D_layer(Res32352, Glo6094), 
LRes4751 = reshape_layer(Glo6094, [1, 1], Res4751), 
LRes51881 = reshape_layer(Res4751, [1, 1, 1], Res51881), 
LRes63952 = reshape_layer(Res51881, [1, 1, 1, 1], Res63952), 
LGlo71543 = global_average_pooling3D_layer(Res63952, Glo71543), 
LRes24017 = reshape_layer(Glo71543, [1, 1], Res24017), 
LZer76446 = zero_padding1D_layer(Res24017, 3, 0, Zer76446), 
LCon6844 = concatenate_layer([Zer76446,[[[0.2137], [0.7549], [0.7173], [0.0209]]]], 2, Con6844), 
LMul96199 = multiply_layer([[[[[[0.8274], [0.1411]]], [[[0.7093], [0.8261]]]]], [[[[[0.899], [0.3212]]], [[[0.5458], [0.6687]]]]]], Mul96199), 
LRes62155 = reshape_layer(Mul96199, [2, 1, 2], Res62155), 
LRes10704 = reshape_layer(Res62155, [2, 2], Res10704), 
LZer7374 = zero_padding1D_layer(Res10704, 1, 1, Zer7374), 
LThr50815 = thresholded_relu_layer(Zer7374, 5.039832705872037, Thr50815), 
LAve56345 = average_layer([Con6844,Thr50815], Ave56345), 
exec_layers([LMin5070,LRes32352,LGlo6094,LRes4751,LRes51881,LRes63952,LGlo71543,LRes24017,LZer76446,LCon6844,LMul96199,LRes62155,LRes10704,LZer7374,LThr50815,LAve56345],["Min5070","Res32352","Glo6094","Res4751","Res51881","Res63952","Glo71543","Res24017","Zer76446","Con6844","Mul96199","Res62155","Res10704","Zer7374","Thr50815","Ave56345"],Ave56345,"Ave56345")

Actual (Unparsed): [[[0.0000000, 0.1068500], [0.0000000, 0.3774500], [0.0000000, 0.3586500], [0.1938250, 0.0104500]]]

Expected (Unparsed): [[[0,0.10685],[0,0.37745],[0,0.35865],[0.193825,0.01045]]]

Actual:   [[[0, 0.1069], [0, 0.3775], [0, 0.3587], [0.1939, 0.0105]]]

Expected: [[[0, 0.1069], [0, 0.3775], [0, 0.3587], [0.1939, 0.0105]]]