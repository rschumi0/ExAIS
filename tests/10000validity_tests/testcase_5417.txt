import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max26925 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Max26925 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Glo94462 = tf.keras.layers.Input(shape=([1, 1, 1, 2]))

Max26925 = keras.layers.Maximum(name = 'Max26925', )([in0Max26925,in1Max26925])
Res96958 = keras.layers.Reshape((2, 2, 4), name = 'Res96958', )(Max26925)
Res29022 = keras.layers.Reshape((2, 8), name = 'Res29022', )(Res96958)
Cro31678 = keras.layers.Cropping1D(cropping=((0, 0)), name = 'Cro31678', )(Res29022)
Res36113 = keras.layers.Reshape((2, 8, 1), name = 'Res36113', )(Cro31678)
Glo94462 = keras.layers.GlobalAveragePooling3D(name = 'Glo94462', )(in0Glo94462)
Res18346 = keras.layers.Reshape((2, 1), name = 'Res18346', )(Glo94462)
Ave72534 = keras.layers.AveragePooling1D(pool_size=(2), name = 'Ave72534', )(Res18346)
Res55388 = keras.layers.Reshape((1, 1, 1), name = 'Res55388', )(Ave72534)
Max84437 = keras.layers.MaxPool2D(pool_size=(1, 1), strides=(1, 1), padding='same', name = 'Max84437', )(Res55388)
Lea79856 = keras.layers.LeakyReLU(alpha=6.159975076789301, name = 'Lea79856', )(Max84437)
Zer24867 = keras.layers.ZeroPadding2D(padding=((1, 0), (7, 0)), name = 'Zer24867', )(Lea79856)
Ave82265 = keras.layers.Average(name = 'Ave82265', )([Res36113,Zer24867])
model = tf.keras.models.Model(inputs=[in0Max26925,in1Max26925,in0Glo94462], outputs=Ave82265)
in0Max26925 = tf.constant([[[[[0.7696, 0.2225], [0.7292, 0.3246]], [[0.9108, 0.6757], [0.1914, 0.3433]]], [[[0.3774, 0.0499], [0.3454, 0.1156]], [[0.7136, 0.832], [0.8086, 0.8708]]]]])
in1Max26925 = tf.constant([[[[[0.425, 0.8693], [0.1293, 0.2843]], [[0.7098, 0.5729], [0.0562, 0.1444]]], [[[0.8802, 0.7414], [0.5203, 0.6121]], [[0.7637, 0.2332], [0.453, 0.3739]]]]])
in0Glo94462 = tf.constant([[[[[1.2993, 1.934]]]]])
print (np.array2string(model.predict([in0Max26925,in1Max26925,in0Glo94462],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave82265.png')

LMax26925 = maximum_layer([[[[[[0.7696, 0.2225], [0.7292, 0.3246]], [[0.9108, 0.6757], [0.1914, 0.3433]]], [[[0.3774, 0.0499], [0.3454, 0.1156]], [[0.7136, 0.832], [0.8086, 0.8708]]]]], [[[[[0.425, 0.8693], [0.1293, 0.2843]], [[0.7098, 0.5729], [0.0562, 0.1444]]], [[[0.8802, 0.7414], [0.5203, 0.6121]], [[0.7637, 0.2332], [0.453, 0.3739]]]]]], Max26925), 
LRes96958 = reshape_layer(Max26925, [2, 2, 4], Res96958), 
LRes29022 = reshape_layer(Res96958, [2, 8], Res29022), 
LCro31678 = cropping1D_layer(Res29022, 0, 0, Cro31678), 
LRes36113 = reshape_layer(Cro31678, [2, 8, 1], Res36113), 
LGlo94462 = global_average_pooling3D_layer([[[[[1.2993, 1.934]]]]], Glo94462), 
LRes18346 = reshape_layer(Glo94462, [2, 1], Res18346), 
LAve72534 = average_pooling1D_layer(Res18346, 2, Ave72534), 
LRes55388 = reshape_layer(Ave72534, [1, 1, 1], Res55388), 
LMax84437 = max_pool2D_layer(Res55388, 1, 1, 1, 1, true, Max84437), 
LLea79856 = leaky_relu_layer(Max84437, 6.159975076789301, Lea79856), 
LZer24867 = zero_padding2D_layer(Lea79856, 1, 0, 7, 0, Zer24867), 
LAve82265 = average_layer([Res36113,Zer24867], Ave82265), 
exec_layers([LMax26925,LRes96958,LRes29022,LCro31678,LRes36113,LGlo94462,LRes18346,LAve72534,LRes55388,LMax84437,LLea79856,LZer24867,LAve82265],["Max26925","Res96958","Res29022","Cro31678","Res36113","Glo94462","Res18346","Ave72534","Res55388","Max84437","Lea79856","Zer24867","Ave82265"],Ave82265,"Ave82265")

Actual (Unparsed): [[[[0.3848000], [0.4346500], [0.3646000], [0.1623000], [0.4554000], [0.3378500], [0.0957000], [0.1716500]], [[0.4401000], [0.3707000], [0.2601500], [0.3060500], [0.3818500], [0.4160000], [0.4043000], [1.2437250]]]]

Expected (Unparsed): [[[[0.3848],[0.43465],[0.3646],[0.1623],[0.4554],[0.33785],[0.0957],[0.17165]],[[0.4401],[0.3707],[0.26015],[0.30605],[0.38185],[0.416],[0.4043],[1.243725]]]]

Actual:   [[[[0.3848], [0.4347], [0.3646], [0.1623], [0.4554], [0.3379], [0.0957], [0.1717]], [[0.4401], [0.3707], [0.2602], [0.3061], [0.3819], [0.416], [0.4043], [1.2438]]]]

Expected: [[[[0.3848], [0.4347], [0.3646], [0.1623], [0.4554], [0.3379], [0.0957], [0.1717]], [[0.4401], [0.3707], [0.2602], [0.3061], [0.3819], [0.416], [0.4043], [1.2438]]]]