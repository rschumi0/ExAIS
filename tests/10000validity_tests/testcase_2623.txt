import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave94310 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Ave94310 = tf.keras.layers.Input(shape=([2, 2, 1]))
in0Mul39553 = tf.keras.layers.Input(shape=([1, 2]))
in1Mul39553 = tf.keras.layers.Input(shape=([1, 2]))
in0Con91772 = tf.keras.layers.Input(shape=([4, 6]))

Ave94310 = keras.layers.Average(name = 'Ave94310', )([in0Ave94310,in1Ave94310])
Res95155 = keras.layers.Reshape((2, 2), name = 'Res95155', )(Ave94310)
Res75806 = keras.layers.Reshape((2, 2, 1), name = 'Res75806', )(Res95155)
Res95920 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res95920', )(Res75806)
Up_50459 = keras.layers.UpSampling3D(size=(2, 2, 2), name = 'Up_50459', )(Res95920)
Lea42842 = keras.layers.LeakyReLU(alpha=2.198647552974483, name = 'Lea42842', )(Up_50459)
Res39210 = keras.layers.Reshape((4, 4, 2), name = 'Res39210', )(Lea42842)
Res38318 = keras.layers.Reshape((4, 8), name = 'Res38318', )(Res39210)
Mul39553 = keras.layers.Multiply(name = 'Mul39553', )([in0Mul39553,in1Mul39553])
Zer83831 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer83831', )(Mul39553)
Con91772 = keras.layers.Concatenate(axis=2, name = 'Con91772', )([Zer83831,in0Con91772])
Max24938 = keras.layers.Maximum(name = 'Max24938', )([Res38318,Con91772])
Res70347 = keras.layers.Reshape((4, 8, 1), name = 'Res70347', )(Max24938)
Sep6467 = keras.layers.SeparableConv2D(3, (1, 8),strides=(2, 2), padding='same', name = 'Sep6467', )(Res70347)
model = tf.keras.models.Model(inputs=[in0Ave94310,in1Ave94310,in0Mul39553,in1Mul39553,in0Con91772], outputs=Sep6467)
w = model.get_layer('Sep6467').get_weights() 
w[0] = np.array([[[[0.801]], [[0.5769]], [[0.91]], [[0.1292]], [[0.9469]], [[0.8326]], [[0.1904]], [[0.4599]]]])
w[1] = np.array([[[[0.9033, 0.3275, 0.7236]]]])
w[2] = np.array([0, 0, 0])
model.get_layer('Sep6467').set_weights(w) 
in0Ave94310 = tf.constant([[[[0.7611], [0.3816]], [[0.5038], [0.665]]]])
in1Ave94310 = tf.constant([[[[0.5389], [0.5641]], [[0.1563], [0.5719]]]])
in0Mul39553 = tf.constant([[[0.6683, 0.6045]]])
in1Mul39553 = tf.constant([[[0.0031, 0.0434]]])
in0Con91772 = tf.constant([[[0.6238, 0.8962, 0.2631, 0.2182, 0.5769, 0.0909], [0.9519, 0.6542, 0.6646, 0.1605, 0.9077, 0.3769], [0.099, 0.7805, 0.6709, 0.1678, 0.7945, 0.6775], [0.8203, 0.7142, 0.6523, 0.3362, 0.0459, 0.1337]]])
print (np.array2string(model.predict([in0Ave94310,in1Ave94310,in0Mul39553,in1Mul39553,in0Con91772],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sep6467.png')

LAve94310 = average_layer([[[[[0.7611], [0.3816]], [[0.5038], [0.665]]]], [[[[0.5389], [0.5641]], [[0.1563], [0.5719]]]]], Ave94310), 
LRes95155 = reshape_layer(Ave94310, [2, 2], Res95155), 
LRes75806 = reshape_layer(Res95155, [2, 2, 1], Res75806), 
LRes95920 = reshape_layer(Res75806, [2, 2, 1, 1], Res95920), 
LUp_50459 = up_sampling3D_layer(Res95920, 2, 2, 2, Up_50459), 
LLea42842 = leaky_relu_layer(Up_50459, 2.198647552974483, Lea42842), 
LRes39210 = reshape_layer(Lea42842, [4, 4, 2], Res39210), 
LRes38318 = reshape_layer(Res39210, [4, 8], Res38318), 
LMul39553 = multiply_layer([[[[0.6683, 0.6045]]], [[[0.0031, 0.0434]]]], Mul39553), 
LZer83831 = zero_padding1D_layer(Mul39553, 3, 0, Zer83831), 
LCon91772 = concatenate_layer([Zer83831,[[[0.6238, 0.8962, 0.2631, 0.2182, 0.5769, 0.0909], [0.9519, 0.6542, 0.6646, 0.1605, 0.9077, 0.3769], [0.099, 0.7805, 0.6709, 0.1678, 0.7945, 0.6775], [0.8203, 0.7142, 0.6523, 0.3362, 0.0459, 0.1337]]]], 2, Con91772), 
LMax24938 = maximum_layer([Res38318,Con91772], Max24938), 
LRes70347 = reshape_layer(Max24938, [4, 8, 1], Res70347), 
LSep6467 = separable_conv2D_layer(Res70347, 1, 8,[[[[[0.801]], [[0.5769]], [[0.91]], [[0.1292]], [[0.9469]], [[0.8326]], [[0.1904]], [[0.4599]]]],[[[[0.9033, 0.3275, 0.7236]]]]],[0, 0, 0], 2, 2, true, Sep6467), 
exec_layers([LAve94310,LRes95155,LRes75806,LRes95920,LUp_50459,LLea42842,LRes39210,LRes38318,LMul39553,LZer83831,LCon91772,LMax24938,LRes70347,LSep6467],["Ave94310","Res95155","Res75806","Res95920","Up_50459","Lea42842","Res39210","Res38318","Mul39553","Zer83831","Con91772","Max24938","Res70347","Sep6467"],Sep6467,"Sep6467")

Actual (Unparsed): [[[[1.4712546, 0.5334173, 1.1785673], [2.3920456, 0.8672589, 1.9161787], [2.5205399, 0.9138457, 2.0191106], [1.7553052, 0.6364026, 1.4061097]], [[0.9819960, 0.3560320, 0.7866404], [2.0904024, 0.7578953, 1.6745435], [2.3737081, 0.8606104, 1.9014892], [2.0949210, 0.7595335, 1.6781633]]]]

Expected (Unparsed): [[[[1.4712545676434998,0.5334173263625,1.178567259102],[2.392045567512,0.8672588545999999,1.916178647904],[2.5205398344345005,0.9138456722875001,2.019110621274],[1.755305215233,0.6364025882750001,1.406109657636]],[[0.9819959882984999,0.3560319784875,0.7866404263620002],[2.0904024297825003,0.7578952681875001,1.6745435604899999],[2.3737081619939997,0.8606104539499999,1.9014892350479997],[2.0949210389879998,0.7595335329,1.6781632500960002]]]]

Actual:   [[[[1.4713, 0.5335, 1.1786], [2.3921, 0.8673, 1.9162], [2.5206, 0.9139, 2.0192], [1.7554, 0.6365, 1.4062]], [[0.982, 0.3561, 0.7867], [2.0905, 0.7579, 1.6746], [2.3738, 0.8607, 1.9015], [2.095, 0.7596, 1.6782]]]]

Expected: [[[[1.4713, 0.5335, 1.1786], [2.3921, 0.8673, 1.9162], [2.5206, 0.9139, 2.0192], [1.7554, 0.6365, 1.4062]], [[0.982, 0.3561, 0.7867], [2.0905, 0.7579, 1.6746], [2.3738, 0.8607, 1.9015], [2.095, 0.7596, 1.6782]]]]