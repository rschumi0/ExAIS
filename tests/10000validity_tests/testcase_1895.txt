import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub32915 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in1Sub32915 = tf.keras.layers.Input(shape=([3, 3, 3, 3]))
in0Lay71236 = tf.keras.layers.Input(shape=([2]))
in0Con70759 = tf.keras.layers.Input(shape=([79]))
in0Min4690 = tf.keras.layers.Input(shape=([1, 1]))
in1Min4690 = tf.keras.layers.Input(shape=([1, 1]))
in0Con58801 = tf.keras.layers.Input(shape=([80]))

Sub32915 = keras.layers.Subtract(name = 'Sub32915', )([in0Sub32915,in1Sub32915])
Res35555 = keras.layers.Reshape((3, 3, 9), name = 'Res35555', )(Sub32915)
Res74081 = keras.layers.Reshape((3, 27), name = 'Res74081', )(Res35555)
Fla30634 = keras.layers.Flatten(name = 'Fla30634', )(Res74081)
Lay71236 = keras.layers.LayerNormalization(axis=1, epsilon=2.060293885171717, name = 'Lay71236', )(in0Lay71236)
Con70759 = keras.layers.Concatenate(axis=1, name = 'Con70759', )([Lay71236,in0Con70759])
Max31992 = keras.layers.Maximum(name = 'Max31992', )([Fla30634,Con70759])
Min4690 = keras.layers.Minimum(name = 'Min4690', )([in0Min4690,in1Min4690])
Res35739 = keras.layers.Reshape((1, 1, 1), name = 'Res35739', )(Min4690)
Glo12650 = keras.layers.GlobalAveragePooling2D(name = 'Glo12650', )(Res35739)
Con58801 = keras.layers.Concatenate(axis=1, name = 'Con58801', )([Glo12650,in0Con58801])
Min45023 = keras.layers.Minimum(name = 'Min45023', )([Max31992,Con58801])
model = tf.keras.models.Model(inputs=[in0Sub32915,in1Sub32915,in0Lay71236,in0Con70759,in0Min4690,in1Min4690,in0Con58801], outputs=Min45023)
in0Sub32915 = tf.constant([[[[[0.5418, 0.5088, 0.1916], [0.9188, 0.576, 0.3595], [0.1928, 0.328, 0.2578]], [[0.7254, 0.4437, 0.1024], [0.799, 0.1965, 0.7973], [0.992, 0.9381, 0.2158]], [[0.2646, 0.381, 0.4249], [0.944, 0.1646, 0.0883], [0.2809, 0.1238, 0.3106]]], [[[0.5092, 0.4711, 0.3762], [0.3812, 0.9698, 0.7846], [0.1868, 0.1852, 0.0122]], [[0.9224, 0.9533, 0.611], [0.9527, 0.0127, 0.8552], [0.6719, 0.4636, 0.0375]], [[0.9799, 0.2102, 0.1174], [0.9425, 0.0936, 0.4971], [0.8022, 0.5223, 0.6812]]], [[[0.1864, 0.6667, 0.5274], [0.3954, 0.8143, 0.7879], [0.824, 0.8535, 0.3184]], [[0.0652, 0.8485, 0.7984], [0.8513, 0.9422, 0.0501], [0.0028, 0.5027, 0.4309]], [[0.4885, 0.935, 0.4107], [0.5719, 0.2649, 0.1287], [0.1442, 0.9026, 0.0032]]]]])
in1Sub32915 = tf.constant([[[[[0.4033, 0.1667, 0.7234], [0.1694, 0.5659, 0.6565], [0.956, 0.6222, 0.9934]], [[0.9482, 0.166, 0.417], [0.5415, 0.3883, 0.8904], [0.5561, 0.5542, 0.4503]], [[0.7504, 0.0692, 0.3608], [0.5432, 0.9593, 0.5395], [0.5368, 0.0659, 0.7415]]], [[[0.9464, 0.3788, 0.9078], [0.8665, 0.4892, 0.4979], [0.7778, 0.9721, 0.875]], [[0.1699, 0.4558, 0.6024], [0.4058, 0.1001, 0.3034], [0.9164, 0.0882, 0.5547]], [[0.1444, 0.8407, 0.8978], [0.3932, 0.9339, 0.0288], [0.2816, 0.3947, 0.4682]]], [[[0.3703, 0.9577, 0.4124], [0.7582, 0.9485, 0.0787], [0.3149, 0.5887, 0.2831]], [[0.8683, 0.3769, 0.2137], [0.4151, 0.9099, 0.7636], [0.1044, 0.8923, 0.368]], [[0.027, 0.1551, 0.9942], [0.5597, 0.0713, 0.7791], [0.6021, 0.4551, 0.8819]]]]])
in0Lay71236 = tf.constant([[1.8831, 1.9602]])
in0Con70759 = tf.constant([[0.9418, 0.2213, 0.8378, 0.7539, 0.5893, 0.7268, 0.7027, 0.0704, 0.3995, 0.253, 0.2445, 0.3529, 0.9584, 0.0328, 0.4831, 0.152, 0.4726, 0.4939, 0.6571, 0.6954, 0.9911, 0.9651, 0.9694, 0.5232, 0.8989, 0.0661, 0.4753, 0.5718, 0.571, 0.7376, 0.3103, 0.5705, 0.0426, 0.6006, 0.7554, 0.8026, 0.4354, 0.2239, 0.345, 0.1242, 0.6655, 0.9171, 0.3389, 0.6266, 0.6485, 0.873, 0.3982, 0.4872, 0.8193, 0.8353, 0.2331, 0.3587, 0.2859, 0.9826, 0.3223, 0.1158, 0.3499, 0.3863, 0.5452, 0.8973, 0.4425, 0.2282, 0.7105, 0.1624, 0.7495, 0.9431, 0.5195, 0.9144, 0.9267, 0.5886, 0.4585, 0.3336, 0.3467, 0.0413, 0.4797, 0.8107, 0.2553, 0.0654, 0.1003]])
in0Min4690 = tf.constant([[[0.8847]]])
in1Min4690 = tf.constant([[[0.417]]])
in0Con58801 = tf.constant([[0.0518, 0.2899, 0.2369, 0.4324, 0.4262, 0.5075, 0.8471, 0.2308, 0.6891, 0.8826, 0.2131, 0.0623, 0.769, 0.1905, 0.1099, 0.6624, 0.8007, 0.955, 0.5557, 0.7847, 0.2525, 0.445, 0.1776, 0.9769, 0.7902, 0.7124, 0.2489, 0.7681, 0.9385, 0.1591, 0.8448, 0.6603, 0.4448, 0.3149, 0.6746, 0.4043, 0.874, 0.7379, 0.5377, 0.66, 0.3751, 0.2063, 0.0278, 0.2879, 0.7422, 0.6615, 0.0582, 0.2006, 0.8696, 0.6833, 0.0226, 0.9161, 0.4452, 0.6299, 0.9169, 0.6955, 0.2623, 0.9612, 0.5494, 0.4235, 0.8431, 0.6754, 0.0426, 0.1967, 0.1602, 0.2395, 0.1938, 0.919, 0.1201, 0.8689, 0.9, 0.0738, 0.1293, 0.5198, 0.7766, 0.2418, 0.5016, 0.5014, 0.3049, 0.8626]])
print (np.array2string(model.predict([in0Sub32915,in1Sub32915,in0Lay71236,in0Con70759,in0Min4690,in1Min4690,in0Con58801],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min45023.png')

LSub32915 = subtract_layer([[[[[0.5418, 0.5088, 0.1916], [0.9188, 0.576, 0.3595], [0.1928, 0.328, 0.2578]], [[0.7254, 0.4437, 0.1024], [0.799, 0.1965, 0.7973], [0.992, 0.9381, 0.2158]], [[0.2646, 0.381, 0.4249], [0.944, 0.1646, 0.0883], [0.2809, 0.1238, 0.3106]]], [[[0.5092, 0.4711, 0.3762], [0.3812, 0.9698, 0.7846], [0.1868, 0.1852, 0.0122]], [[0.9224, 0.9533, 0.611], [0.9527, 0.0127, 0.8552], [0.6719, 0.4636, 0.0375]], [[0.9799, 0.2102, 0.1174], [0.9425, 0.0936, 0.4971], [0.8022, 0.5223, 0.6812]]], [[[0.1864, 0.6667, 0.5274], [0.3954, 0.8143, 0.7879], [0.824, 0.8535, 0.3184]], [[0.0652, 0.8485, 0.7984], [0.8513, 0.9422, 0.0501], [0.0028, 0.5027, 0.4309]], [[0.4885, 0.935, 0.4107], [0.5719, 0.2649, 0.1287], [0.1442, 0.9026, 0.0032]]]]], [[[[[0.4033, 0.1667, 0.7234], [0.1694, 0.5659, 0.6565], [0.956, 0.6222, 0.9934]], [[0.9482, 0.166, 0.417], [0.5415, 0.3883, 0.8904], [0.5561, 0.5542, 0.4503]], [[0.7504, 0.0692, 0.3608], [0.5432, 0.9593, 0.5395], [0.5368, 0.0659, 0.7415]]], [[[0.9464, 0.3788, 0.9078], [0.8665, 0.4892, 0.4979], [0.7778, 0.9721, 0.875]], [[0.1699, 0.4558, 0.6024], [0.4058, 0.1001, 0.3034], [0.9164, 0.0882, 0.5547]], [[0.1444, 0.8407, 0.8978], [0.3932, 0.9339, 0.0288], [0.2816, 0.3947, 0.4682]]], [[[0.3703, 0.9577, 0.4124], [0.7582, 0.9485, 0.0787], [0.3149, 0.5887, 0.2831]], [[0.8683, 0.3769, 0.2137], [0.4151, 0.9099, 0.7636], [0.1044, 0.8923, 0.368]], [[0.027, 0.1551, 0.9942], [0.5597, 0.0713, 0.7791], [0.6021, 0.4551, 0.8819]]]]], Sub32915), 
LRes35555 = reshape_layer(Sub32915, [3, 3, 9], Res35555), 
LRes74081 = reshape_layer(Res35555, [3, 27], Res74081), 
LFla30634 = flatten_layer(Res74081, Fla30634), 
LLay71236 = layer_normalization_layer([[1.8831, 1.9602]], 1, 2.060293885171717, Lay71236), 
LCon70759 = concatenate_layer([Lay71236,[[0.9418, 0.2213, 0.8378, 0.7539, 0.5893, 0.7268, 0.7027, 0.0704, 0.3995, 0.253, 0.2445, 0.3529, 0.9584, 0.0328, 0.4831, 0.152, 0.4726, 0.4939, 0.6571, 0.6954, 0.9911, 0.9651, 0.9694, 0.5232, 0.8989, 0.0661, 0.4753, 0.5718, 0.571, 0.7376, 0.3103, 0.5705, 0.0426, 0.6006, 0.7554, 0.8026, 0.4354, 0.2239, 0.345, 0.1242, 0.6655, 0.9171, 0.3389, 0.6266, 0.6485, 0.873, 0.3982, 0.4872, 0.8193, 0.8353, 0.2331, 0.3587, 0.2859, 0.9826, 0.3223, 0.1158, 0.3499, 0.3863, 0.5452, 0.8973, 0.4425, 0.2282, 0.7105, 0.1624, 0.7495, 0.9431, 0.5195, 0.9144, 0.9267, 0.5886, 0.4585, 0.3336, 0.3467, 0.0413, 0.4797, 0.8107, 0.2553, 0.0654, 0.1003]]], 1, Con70759), 
LMax31992 = maximum_layer([Fla30634,Con70759], Max31992), 
LMin4690 = minimum_layer([[[[0.8847]]], [[[0.417]]]], Min4690), 
LRes35739 = reshape_layer(Min4690, [1, 1, 1], Res35739), 
LGlo12650 = global_average_pooling2D_layer(Res35739, Glo12650), 
LCon58801 = concatenate_layer([Glo12650,[[0.0518, 0.2899, 0.2369, 0.4324, 0.4262, 0.5075, 0.8471, 0.2308, 0.6891, 0.8826, 0.2131, 0.0623, 0.769, 0.1905, 0.1099, 0.6624, 0.8007, 0.955, 0.5557, 0.7847, 0.2525, 0.445, 0.1776, 0.9769, 0.7902, 0.7124, 0.2489, 0.7681, 0.9385, 0.1591, 0.8448, 0.6603, 0.4448, 0.3149, 0.6746, 0.4043, 0.874, 0.7379, 0.5377, 0.66, 0.3751, 0.2063, 0.0278, 0.2879, 0.7422, 0.6615, 0.0582, 0.2006, 0.8696, 0.6833, 0.0226, 0.9161, 0.4452, 0.6299, 0.9169, 0.6955, 0.2623, 0.9612, 0.5494, 0.4235, 0.8431, 0.6754, 0.0426, 0.1967, 0.1602, 0.2395, 0.1938, 0.919, 0.1201, 0.8689, 0.9, 0.0738, 0.1293, 0.5198, 0.7766, 0.2418, 0.5016, 0.5014, 0.3049, 0.8626]]], 1, Con58801), 
LMin45023 = minimum_layer([Max31992,Con58801], Min45023), 
exec_layers([LSub32915,LRes35555,LRes74081,LFla30634,LLay71236,LCon70759,LMax31992,LMin4690,LRes35739,LGlo12650,LCon58801,LMin45023],["Sub32915","Res35555","Res74081","Fla30634","Lay71236","Con70759","Max31992","Min4690","Res35739","Glo12650","Con58801","Min45023"],Min45023,"Min45023")

Actual (Unparsed): [[0.1385000, 0.0518000, 0.2899000, 0.2369000, 0.4324000, 0.4262000, 0.5075000, 0.7268000, 0.2308000, 0.0704000, 0.3995000, 0.2131000, 0.0623000, 0.3529000, 0.1905000, 0.1099000, 0.4831000, 0.1520000, 0.4726000, 0.4939000, 0.6571000, 0.2525000, 0.4450000, 0.1776000, 0.9694000, 0.5232000, 0.7124000, 0.0661000, 0.4753000, 0.5718000, 0.1591000, 0.7376000, 0.3103000, 0.4448000, 0.0426000, 0.6006000, 0.4043000, 0.8026000, 0.4354000, 0.5377000, 0.3450000, 0.3751000, 0.2063000, 0.0278000, 0.2879000, 0.7422000, 0.6485000, 0.0582000, 0.2006000, 0.4872000, 0.6833000, 0.0226000, 0.2331000, 0.3587000, 0.2859000, 0.9169000, 0.3223000, 0.1158000, 0.3499000, 0.5494000, 0.4235000, 0.8431000, 0.4425000, 0.0426000, 0.1967000, 0.1602000, 0.2395000, 0.1938000, 0.5195000, 0.1201000, 0.8689000, 0.5886000, 0.0738000, 0.1293000, 0.3467000, 0.0413000, 0.2418000, 0.5016000, 0.2553000, 0.3049000, 0.1003000]]

Expected (Unparsed): [[0.13849999999999996,0.0518,0.2899,0.2369,0.4324,0.4262,0.5075,0.7268,0.2308,0.0704,0.3995,0.2131,0.0623,0.3529,0.1905,0.1099,0.4831,0.152,0.4726,0.4939,0.6571,0.2525,0.445,0.1776,0.9694,0.5232,0.7124,0.0661,0.4753,0.5718,0.1591,0.7376,0.3103,0.4448,0.0426,0.6006,0.4043,0.8026,0.4354,0.5377,0.345,0.3751,0.2063,0.0278,0.2879,0.7422,0.6485,0.0582,0.2006,0.4872,0.6833,0.0226,0.2331,0.3587,0.2859,0.9169,0.3223,0.1158,0.3499,0.5494,0.4235,0.8431,0.4425,0.0426,0.1967,0.1602,0.2395,0.1938,0.5195,0.1201,0.8689,0.5886,0.0738,0.1293,0.3467,0.0413,0.2418,0.5016,0.2553,0.3049,0.1003]]

Actual:   [[0.1385, 0.0518, 0.2899, 0.2369, 0.4324, 0.4262, 0.5075, 0.7268, 0.2308, 0.0704, 0.3995, 0.2131, 0.0623, 0.3529, 0.1905, 0.1099, 0.4831, 0.152, 0.4726, 0.4939, 0.6571, 0.2525, 0.445, 0.1776, 0.9694, 0.5232, 0.7124, 0.0661, 0.4753, 0.5718, 0.1591, 0.7376, 0.3103, 0.4448, 0.0426, 0.6006, 0.4043, 0.8026, 0.4354, 0.5377, 0.345, 0.3751, 0.2063, 0.0278, 0.2879, 0.7422, 0.6485, 0.0582, 0.2006, 0.4872, 0.6833, 0.0226, 0.2331, 0.3587, 0.2859, 0.9169, 0.3223, 0.1158, 0.3499, 0.5494, 0.4235, 0.8431, 0.4425, 0.0426, 0.1967, 0.1602, 0.2395, 0.1938, 0.5195, 0.1201, 0.8689, 0.5886, 0.0738, 0.1293, 0.3467, 0.0413, 0.2418, 0.5016, 0.2553, 0.3049, 0.1003]]

Expected: [[0.1385, 0.0518, 0.2899, 0.2369, 0.4324, 0.4262, 0.5075, 0.7268, 0.2308, 0.0704, 0.3995, 0.2131, 0.0623, 0.3529, 0.1905, 0.1099, 0.4831, 0.152, 0.4726, 0.4939, 0.6571, 0.2525, 0.445, 0.1776, 0.9694, 0.5232, 0.7124, 0.0661, 0.4753, 0.5718, 0.1591, 0.7376, 0.3103, 0.4448, 0.0426, 0.6006, 0.4043, 0.8026, 0.4354, 0.5377, 0.345, 0.3751, 0.2063, 0.0278, 0.2879, 0.7422, 0.6485, 0.0582, 0.2006, 0.4872, 0.6833, 0.0226, 0.2331, 0.3587, 0.2859, 0.9169, 0.3223, 0.1158, 0.3499, 0.5494, 0.4235, 0.8431, 0.4425, 0.0426, 0.1967, 0.1602, 0.2395, 0.1938, 0.5195, 0.1201, 0.8689, 0.5886, 0.0738, 0.1293, 0.3467, 0.0413, 0.2418, 0.5016, 0.2553, 0.3049, 0.1003]]