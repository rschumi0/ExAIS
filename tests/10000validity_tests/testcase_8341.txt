import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Lay42199 = tf.keras.layers.Input(shape=([4, 4, 4]))

Lay42199 = keras.layers.LayerNormalization(axis=2, epsilon=1.3008596561159997, name = 'Lay42199', )(in0Lay42199)
Sof37490 = keras.layers.Softmax(axis=1, name = 'Sof37490', )(Lay42199)
model = tf.keras.models.Model(inputs=[in0Lay42199], outputs=Sof37490)
in0Lay42199 = tf.constant([[[[1.1829, 1.6362, 1.0015, 1.4768], [1.546, 1.0458, 1.626, 1.0209], [1.1402, 1.4832, 1.8482, 1.0166], [1.5446, 1.0088, 1.5838, 1.9159]], [[1.778, 1.5366, 1.4669, 1.9955], [1.5068, 1.9207, 1.434, 1.0738], [1.7429, 1.6238, 1.1329, 1.1062], [1.49, 1.458, 1.9898, 1.0291]], [[1.9595, 1.1288, 1.3886, 1.0447], [1.3089, 1.9582, 1.6978, 1.2577], [1.3323, 1.2138, 1.8118, 1.2095], [1.1726, 1.931, 1.4657, 1.3873]], [[1.918, 1.9767, 1.8305, 1.2318], [1.8968, 1.3754, 1.7963, 1.5133], [1.5881, 1.5955, 1.915, 1.2005], [1.334, 1.5757, 1.1838, 1.1109]]]])
print (np.array2string(model.predict([in0Lay42199],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sof37490.png')

LLay42199 = layer_normalization_layer([[[[1.1829, 1.6362, 1.0015, 1.4768], [1.546, 1.0458, 1.626, 1.0209], [1.1402, 1.4832, 1.8482, 1.0166], [1.5446, 1.0088, 1.5838, 1.9159]], [[1.778, 1.5366, 1.4669, 1.9955], [1.5068, 1.9207, 1.434, 1.0738], [1.7429, 1.6238, 1.1329, 1.1062], [1.49, 1.458, 1.9898, 1.0291]], [[1.9595, 1.1288, 1.3886, 1.0447], [1.3089, 1.9582, 1.6978, 1.2577], [1.3323, 1.2138, 1.8118, 1.2095], [1.1726, 1.931, 1.4657, 1.3873]], [[1.918, 1.9767, 1.8305, 1.2318], [1.8968, 1.3754, 1.7963, 1.5133], [1.5881, 1.5955, 1.915, 1.2005], [1.334, 1.5757, 1.1838, 1.1109]]]], 2, 1.3008596561159997, Lay42199), 
LSof37490 = softmax_layer(Lay42199, 1, Sof37490), 
exec_layers([LLay42199,LSof37490],["Lay42199","Sof37490"],Sof37490,"Sof37490")

Actual (Unparsed): [[[[0.1808446, 0.3111261, 0.1804895, 0.2346393], [0.2830957, 0.1888268, 0.2591402, 0.1959472], [0.2207955, 0.3023929, 0.2955266, 0.2128118], [0.3276180, 0.1981375, 0.2573787, 0.3604209]], [[0.2385241, 0.2133309, 0.2695435, 0.3772313], [0.2153989, 0.2988278, 0.2219727, 0.2149498], [0.2930706, 0.2547873, 0.1625875, 0.2406501], [0.2459511, 0.2167135, 0.3657128, 0.1807235]], [[0.3245195, 0.1626662, 0.2337525, 0.1815742], [0.2138803, 0.3251602, 0.2587954, 0.2669581], [0.2416581, 0.1933056, 0.2699945, 0.2790024], [0.2207923, 0.3442702, 0.2178152, 0.2607595]], [[0.2561118, 0.3128768, 0.3162145, 0.2065552], [0.2876251, 0.1871851, 0.2600918, 0.3221449], [0.2444758, 0.2495143, 0.2718913, 0.2675358], [0.2056386, 0.2408788, 0.1590934, 0.1980962]]]]

Expected (Unparsed): [[[[0.18084462750971395,0.31112608849327444,0.1804894891009097,0.234639263665913],[0.28309572338469624,0.18882684218335757,0.2591401692188252,0.195947207371254],[0.22079548418444367,0.30239291584973577,0.2955265941277225,0.21281177925318084],[0.32761797671714177,0.19813752220145572,0.2573786978711715,0.36042086149728686]],[[0.23852405401402849,0.2133309159474516,0.2695435166804863,0.3772312719406772],[0.2153989330313869,0.2988278457310453,0.22197267392712888,0.21494975886878473],[0.29307060423965325,0.2547872527554157,0.16258754483010424,0.24065009474339782],[0.245951140725222,0.21671348777461263,0.3657127863761228,0.18072351353920102]],[[0.324519501221036,0.16266616886747026,0.233752470833945,0.18157424302919267],[0.21388027105874535,0.32516022908634806,0.25879539663651097,0.2669581215990852],[0.2416581027674486,0.19330556241930397,0.2699945392004739,0.2790023625394385],[0.22079231015068065,0.3442702457200472,0.21781515028469758,0.26075946877775524]],[[0.2561118172552216,0.31287682669180356,0.31621452338465905,0.20655522136421728],[0.2876250725251715,0.187185082999249,0.26009176021753505,0.3221449121608761],[0.24447580880845446,0.24951426897554466,0.2718913218416994,0.2675357634639829],[0.20563857240695566,0.2408787443038844,0.15909336546800823,0.19809615618575682]]]]

Actual:   [[[[0.1809, 0.3112, 0.1805, 0.2347], [0.2831, 0.1889, 0.2592, 0.196], [0.2208, 0.3024, 0.2956, 0.2129], [0.3277, 0.1982, 0.2574, 0.3605]], [[0.2386, 0.2134, 0.2696, 0.3773], [0.2154, 0.2989, 0.222, 0.215], [0.2931, 0.2548, 0.1626, 0.2407], [0.246, 0.2168, 0.3658, 0.1808]], [[0.3246, 0.1627, 0.2338, 0.1816], [0.2139, 0.3252, 0.2588, 0.267], [0.2417, 0.1934, 0.27, 0.2791], [0.2208, 0.3443, 0.2179, 0.2608]], [[0.2562, 0.3129, 0.3163, 0.2066], [0.2877, 0.1872, 0.2601, 0.3222], [0.2445, 0.2496, 0.2719, 0.2676], [0.2057, 0.2409, 0.1591, 0.1981]]]]

Expected: [[[[0.1809, 0.3112, 0.1805, 0.2347], [0.2831, 0.1889, 0.2592, 0.196], [0.2208, 0.3024, 0.2956, 0.2129], [0.3277, 0.1982, 0.2574, 0.3605]], [[0.2386, 0.2134, 0.2696, 0.3773], [0.2154, 0.2989, 0.222, 0.215], [0.2931, 0.2548, 0.1626, 0.2407], [0.246, 0.2168, 0.3658, 0.1808]], [[0.3246, 0.1627, 0.2338, 0.1816], [0.2139, 0.3252, 0.2588, 0.267], [0.2417, 0.1934, 0.27, 0.2791], [0.2208, 0.3443, 0.2179, 0.2608]], [[0.2562, 0.3129, 0.3163, 0.2066], [0.2877, 0.1872, 0.2601, 0.3222], [0.2445, 0.2496, 0.2719, 0.2676], [0.2057, 0.2409, 0.1591, 0.1981]]]]