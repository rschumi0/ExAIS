import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Den54535 = tf.keras.layers.Input(shape=([2, 3, 5]))

Den54535 = keras.layers.Dense(4,name = 'Den54535', )(in0Den54535)
Up_88997 = keras.layers.UpSampling2D(size=(2, 1), name = 'Up_88997', )(Den54535)
model = tf.keras.models.Model(inputs=[in0Den54535], outputs=Up_88997)
w = model.get_layer('Den54535').get_weights() 
w[0] = np.array([[0.9999, 0.2794, 0.6746, 0.4715], [0.9991, 0.5454, 0.4138, 0.7114], [0.6501, 0.3207, 0.3899, 0.7658], [0.1191, 0.8446, 0.9424, 0.358], [0.8575, 0.8664, 0.5816, 0.0486]])
w[1] = np.array([0.3741, 0.6931, 0.2384, 0.7993])
model.get_layer('Den54535').set_weights(w) 
in0Den54535 = tf.constant([[[[0.676, 0.206, 0.0029, 0.7732, 0.0792], [0.979, 0.5248, 0.1117, 0.4475, 0.2558], [0.0522, 0.8338, 0.1775, 0.0856, 0.7088]], [[0.3434, 0.9814, 0.515, 0.4618, 0.0023], [0.332, 0.1139, 0.3203, 0.8779, 0.7761], [0.4497, 0.7039, 0.1751, 0.2141, 0.9152]]]])
print (np.array2string(model.predict([in0Den54535],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Up_88997.png')

LDen54535 = dense_layer([[[[0.676, 0.206, 0.0029, 0.7732, 0.0792], [0.979, 0.5248, 0.1117, 0.4475, 0.2558], [0.0522, 0.8338, 0.1775, 0.0856, 0.7088]], [[0.3434, 0.9814, 0.515, 0.4618, 0.0023], [0.332, 0.1139, 0.3203, 0.8779, 0.7761], [0.4497, 0.7039, 0.1751, 0.2141, 0.9152]]]], [[0.9999, 0.2794, 0.6746, 0.4715], [0.9991, 0.5454, 0.4138, 0.7114], [0.6501, 0.3207, 0.3899, 0.7658], [0.1191, 0.8446, 0.9424, 0.358], [0.8575, 0.8664, 0.5816, 0.0486]],[0.3741, 0.6931, 0.2384, 0.7993], Den54535), 
LUp_88997 = up_sampling2D_layer(Den54535, 2, 1, Up_88997), 
exec_layers([LDen54535,LUp_88997],["Den54535","Up_88997"],Up_88997,"Up_88997")

Actual (Unparsed): [[[[1.4177344, 1.7169204, 1.5555295, 1.5474579], [2.2225917, 1.8882643, 1.7300447, 1.8924179], [1.9927281, 1.9057656, 1.1807553, 1.6180996]], [[1.4177344, 1.7169204, 1.5555295, 1.5474579], [2.2225917, 1.8882643, 1.7300447, 1.8924179], [1.9927281, 1.9057656, 1.1807553, 1.6180996]], [[2.0897565, 1.8814910, 1.5134975, 2.2192042], [1.7981549, 2.3645894, 1.9130967, 1.6341589], [2.4511373, 2.2325659, 1.6353611, 1.7673061]], [[2.0897565, 1.8814910, 1.5134975, 2.2192042], [1.7981549, 2.3645894, 1.9130967, 1.6341589], [2.4511373, 2.2325659, 1.6353611, 1.7673061]]]]

Expected (Unparsed): [[[[1.41773441,1.7169204300000003,1.55552951,1.5474579399999997],[2.2225917,1.8882643300000002,1.7300447499999998,1.89241796],[1.99272807,1.90576553,1.18075533,1.6180996]],[[1.41773441,1.7169204300000003,1.55552951,1.5474579399999997],[2.2225917,1.8882643300000002,1.7300447499999998,1.89241796],[1.99272807,1.90576553,1.18075533,1.6180996]],[[2.0897565300000003,1.8814910200000003,1.5134974600000002,2.21920424],[1.7981549599999997,2.36458945,1.91309671,1.6341588599999999],[2.45113734,2.23256595,1.63536109,1.76730611]],[[2.0897565300000003,1.8814910200000003,1.5134974600000002,2.21920424],[1.7981549599999997,2.36458945,1.91309671,1.6341588599999999],[2.45113734,2.23256595,1.63536109,1.76730611]]]]

Actual:   [[[[1.4178, 1.717, 1.5556, 1.5475], [2.2226, 1.8883, 1.7301, 1.8925], [1.9928, 1.9058, 1.1808, 1.6181]], [[1.4178, 1.717, 1.5556, 1.5475], [2.2226, 1.8883, 1.7301, 1.8925], [1.9928, 1.9058, 1.1808, 1.6181]], [[2.0898, 1.8815, 1.5135, 2.2193], [1.7982, 2.3646, 1.9131, 1.6342], [2.4512, 2.2326, 1.6354, 1.7674]], [[2.0898, 1.8815, 1.5135, 2.2193], [1.7982, 2.3646, 1.9131, 1.6342], [2.4512, 2.2326, 1.6354, 1.7674]]]]

Expected: [[[[1.4178, 1.717, 1.5556, 1.5475], [2.2226, 1.8883, 1.7301, 1.8925], [1.9928, 1.9058, 1.1808, 1.6181]], [[1.4178, 1.717, 1.5556, 1.5475], [2.2226, 1.8883, 1.7301, 1.8925], [1.9928, 1.9058, 1.1808, 1.6181]], [[2.0898, 1.8815, 1.5135, 2.2193], [1.7982, 2.3646, 1.9131, 1.6342], [2.4512, 2.2326, 1.6354, 1.7674]], [[2.0898, 1.8815, 1.5135, 2.2193], [1.7982, 2.3646, 1.9131, 1.6342], [2.4512, 2.2326, 1.6354, 1.7674]]]]