import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot13112 = tf.keras.layers.Input(shape=([3, 3]))
in1Dot13112 = tf.keras.layers.Input(shape=([3, 3]))
in0Con31763 = tf.keras.layers.Input(shape=([3, 3, 3]))
in0Glo33403 = tf.keras.layers.Input(shape=([2, 2]))

Dot13112 = keras.layers.Dot(axes=(1, 1), name = 'Dot13112', )([in0Dot13112,in1Dot13112])
Res75952 = keras.layers.Reshape((3, 3, 1), name = 'Res75952', )(Dot13112)
Con31763 = keras.layers.Concatenate(axis=3, name = 'Con31763', )([Res75952,in0Con31763])
Glo33403 = keras.layers.GlobalMaxPool1D(name = 'Glo33403', )(in0Glo33403)
Res15308 = keras.layers.Reshape((2, 1), name = 'Res15308', )(Glo33403)
Res42614 = keras.layers.Reshape((2, 1, 1), name = 'Res42614', )(Res15308)
Sep58834 = keras.layers.SeparableConv2D(4, (2, 1),strides=(1, 1), padding='same', name = 'Sep58834', )(Res42614)
Zer25389 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer25389', )(Sep58834)
Mul70385 = keras.layers.Multiply(name = 'Mul70385', )([Con31763,Zer25389])
model = tf.keras.models.Model(inputs=[in0Dot13112,in1Dot13112,in0Con31763,in0Glo33403], outputs=Mul70385)
w = model.get_layer('Sep58834').get_weights() 
w[0] = np.array([[[[0.166]]], [[[0.4733]]]])
w[1] = np.array([[[[0.8715, 0.2871, 0.1492, 0.2073]]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep58834').set_weights(w) 
in0Dot13112 = tf.constant([[[0.5379, 0.5543, 0.0549], [0.2787, 0.1956, 0.8128], [0.9011, 0.9452, 0.5698]]])
in1Dot13112 = tf.constant([[[0.4435, 0.083, 0.533], [0.2839, 0.598, 0.1433], [0.6784, 0.3048, 0.4798]]])
in0Con31763 = tf.constant([[[[0.9249, 0.665, 0.4444], [0.0765, 0.2644, 0.7824], [0.1381, 0.1735, 0.7185]], [[0.771, 0.4633, 0.1552], [0.3689, 0.2557, 0.3325], [0.7825, 0.4693, 0.8533]], [[0.9422, 0.0254, 0.3406], [0.8329, 0.5804, 0.6424], [0.7735, 0.8328, 0.7497]]]])
in0Glo33403 = tf.constant([[[1.7953, 1.1711], [1.4923, 1.0039]]])
print (np.array2string(model.predict([in0Dot13112,in1Dot13112,in0Con31763,in0Glo33403],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul70385.png')

LDot13112 = dot_layer([[[0.5379, 0.5543, 0.0549], [0.2787, 0.1956, 0.8128], [0.9011, 0.9452, 0.5698]]], [[[0.4435, 0.083, 0.533], [0.2839, 0.598, 0.1433], [0.6784, 0.3048, 0.4798]]], 1, 1, Dot13112), 
LRes75952 = reshape_layer(Dot13112, [3, 3, 1], Res75952), 
LCon31763 = concatenate_layer([Res75952,[[[[0.9249, 0.665, 0.4444], [0.0765, 0.2644, 0.7824], [0.1381, 0.1735, 0.7185]], [[0.771, 0.4633, 0.1552], [0.3689, 0.2557, 0.3325], [0.7825, 0.4693, 0.8533]], [[0.9422, 0.0254, 0.3406], [0.8329, 0.5804, 0.6424], [0.7735, 0.8328, 0.7497]]]]], 3, Con31763), 
LGlo33403 = global_max_pool1D_layer([[[1.7953, 1.1711], [1.4923, 1.0039]]], Glo33403), 
LRes15308 = reshape_layer(Glo33403, [2, 1], Res15308), 
LRes42614 = reshape_layer(Res15308, [2, 1, 1], Res42614), 
LSep58834 = separable_conv2D_layer(Res42614, 2, 1,[[[[[0.166]]], [[[0.4733]]]],[[[[0.8715, 0.2871, 0.1492, 0.2073]]]]],[0, 0, 0, 0], 1, 1, true, Sep58834), 
LZer25389 = zero_padding2D_layer(Sep58834, 1, 0, 2, 0, Zer25389), 
LMul70385 = multiply_layer([Con31763,Zer25389], Mul70385), 
exec_layers([LDot13112,LRes75952,LCon31763,LGlo33403,LRes15308,LRes42614,LSep58834,LZer25389,LMul70385],["Dot13112","Res75952","Con31763","Glo33403","Res15308","Res42614","Sep58834","Zer25389","Mul70385"],Mul70385,"Mul70385")

Actual (Unparsed): [[[[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.5771245, 0.1914744, 0.0596778, 0.1507628]], [[0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0710091, 0.0431713, 0.0241553, 0.0302127]]]]

Expected (Unparsed): [[[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.5771245123524845,0.19147441698272252,0.0596777711159708,0.15076282435839872]],[[0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0],[0.0710091055787661,0.043171345026810005,0.024155254003775998,0.030212654337306008]]]]

Actual:   [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0.5772, 0.1915, 0.0597, 0.1508]], [[0, 0, 0, 0], [0, 0, 0, 0], [0.0711, 0.0432, 0.0242, 0.0303]]]]

Expected: [[[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0.5772, 0.1915, 0.0597, 0.1508]], [[0, 0, 0, 0], [0, 0, 0, 0], [0.0711, 0.0432, 0.0242, 0.0303]]]]