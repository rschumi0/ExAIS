import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min85358 = tf.keras.layers.Input(shape=([2, 1]))
in1Min85358 = tf.keras.layers.Input(shape=([2, 1]))
in0Con46925 = tf.keras.layers.Input(shape=([6, 1]))
in0Bat85566 = tf.keras.layers.Input(shape=([4, 1, 2]))

Min85358 = keras.layers.Minimum(name = 'Min85358', )([in0Min85358,in1Min85358])
Con97546 = keras.layers.Conv1D(2, (1),strides=(1), padding='same', dilation_rate=(1), name = 'Con97546', )(Min85358)
Zer7325 = keras.layers.ZeroPadding1D(padding=((4, 0)), name = 'Zer7325', )(Con97546)
Con46925 = keras.layers.Concatenate(axis=2, name = 'Con46925', )([Zer7325,in0Con46925])
Bat85566 = keras.layers.BatchNormalization(axis=2, epsilon=0.4025774471448742,  name = 'Bat85566', )(in0Bat85566)
Con88393 = keras.layers.Conv2DTranspose(2, (1, 1),strides=(1, 1), padding='valid', name = 'Con88393', )(Bat85566)
Con59581 = keras.layers.Conv2DTranspose(3, (3, 1),strides=(1, 1), padding='valid', name = 'Con59581', )(Con88393)
Res72274 = keras.layers.Reshape((6, 3), name = 'Res72274', )(Con59581)
Dot93748 = keras.layers.Dot(axes=(2, 2), name = 'Dot93748', )([Con46925,Res72274])
Max39340 = keras.layers.MaxPool1D(pool_size=(1), strides=(1), padding='same', name = 'Max39340', )(Dot93748)
model = tf.keras.models.Model(inputs=[in0Min85358,in1Min85358,in0Con46925,in0Bat85566], outputs=Max39340)
w = model.get_layer('Con97546').get_weights() 
w[0] = np.array([[[0.5327, 0.6624]]])
w[1] = np.array([0, 0])
model.get_layer('Con97546').set_weights(w) 
w = model.get_layer('Bat85566').get_weights() 
w[0] = np.array([0.7369])
w[1] = np.array([0.24])
w[2] = np.array([0.8881])
w[3] = np.array([0.7267])
model.get_layer('Bat85566').set_weights(w) 
w = model.get_layer('Con88393').get_weights() 
w[0] = np.array([[[[0.6514, 0.7156], [0.7694, 0.4995]]]])
w[1] = np.array([0, 0])
model.get_layer('Con88393').set_weights(w) 
w = model.get_layer('Con59581').get_weights() 
w[0] = np.array([[[[0.2468, 0.857], [0.0383, 0.4613], [0.0851, 0.1508]]], [[[0.332, 0.929], [0.3402, 0.0987], [0.2281, 0.0167]]], [[[0.2105, 0.4151], [0.0097, 0.4411], [0.1172, 0.8362]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con59581').set_weights(w) 
in0Min85358 = tf.constant([[[0.8886], [0.1496]]])
in1Min85358 = tf.constant([[[0.257], [0.0537]]])
in0Con46925 = tf.constant([[[0.2372], [0.3996], [0.2703], [0.8142], [0.0804], [0.1834]]])
in0Bat85566 = tf.constant([[[[1.9043, 1.5537]], [[1.7157, 1.7013]], [[1.3868, 1.3086]], [[1.167, 1.2591]]]])
print (np.array2string(model.predict([in0Min85358,in1Min85358,in0Con46925,in0Bat85566],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Max39340.png')

LMin85358 = minimum_layer([[[[0.8886], [0.1496]]], [[[0.257], [0.0537]]]], Min85358), 
LCon97546 = conv1D_layer(Min85358, 1,[[[0.5327, 0.6624]]],[0, 0], 1, true, 1, Con97546), 
LZer7325 = zero_padding1D_layer(Con97546, 4, 0, Zer7325), 
LCon46925 = concatenate_layer([Zer7325,[[[0.2372], [0.3996], [0.2703], [0.8142], [0.0804], [0.1834]]]], 2, Con46925), 
LBat85566 = batch_normalization_layer([[[[1.9043, 1.5537]], [[1.7157, 1.7013]], [[1.3868, 1.3086]], [[1.167, 1.2591]]]], 2, 0.4025774471448742, [0.7369], [0.24], [0.8881], [0.7267], Bat85566), 
LCon88393 = conv2D_transpose_layer(Bat85566, 1, 1,[[[[0.6514, 0.7156], [0.7694, 0.4995]]]],[0, 0], 1, 1, false, Con88393), 
LCon59581 = conv2D_transpose_layer(Con88393, 3, 1,[[[[0.2468, 0.857], [0.0383, 0.4613], [0.0851, 0.1508]]], [[[0.332, 0.929], [0.3402, 0.0987], [0.2281, 0.0167]]], [[[0.2105, 0.4151], [0.0097, 0.4411], [0.1172, 0.8362]]]],[0, 0, 0], 1, 1, false, Con59581), 
LRes72274 = reshape_layer(Con59581, [6, 3], Res72274), 
LDot93748 = dot_layer(Con46925,Res72274, 2, 2, Dot93748), 
LMax39340 = max_pool1D_layer(Dot93748, 1, 1, true, Max39340), 
exec_layers([LMin85358,LCon97546,LZer7325,LCon46925,LBat85566,LCon88393,LCon59581,LRes72274,LDot93748,LMax39340],["Min85358","Con97546","Zer7325","Con46925","Bat85566","Con88393","Con59581","Res72274","Dot93748","Max39340"],Max39340,"Max39340")

Actual (Unparsed): [[[0.0610886, 0.1238009, 0.3496171, 0.3123434, 0.2000838, 0.1331472], [0.1029131, 0.2085616, 0.5889840, 0.5261907, 0.3370720, 0.2243071], [0.0696131, 0.1410766, 0.3984043, 0.3559293, 0.2280044, 0.1517272], [0.2096893, 0.4249522, 1.2000770, 1.0721332, 0.6867969, 0.4570340], [0.2767341, 0.5584253, 0.7279104, 0.5967128, 0.3352680, 0.1413321], [0.1007298, 0.2036358, 0.3976545, 0.3440612, 0.2105855, 0.1230489]]]

Expected (Unparsed): [[[0.06108856207104522,0.12380085219105477,0.34961712963210173,0.31234339454887733,0.20008378572130006,0.13314722786973707],[0.10291310878410485,0.2085616380082019,0.5889840008473349,0.5261906427560346,0.33707201000940773,0.22430704998628556],[0.06961314640726611,0.14107660348752996,0.39840434291550203,0.3559292560984888,0.22800441517903627,0.15172721624447694],[0.20968932225229772,0.424952166332027,1.200077010735486,1.0721331865164248,0.6867968732473968,0.4570340342813657],[0.27673414943324576,0.5584252864264635,0.7279104098831943,0.5967127786443294,0.33526801853461663,0.14133211015468178],[0.1007297752829808,0.20363575647604149,0.3976545372595016,0.344061182155336,0.2105854738463312,0.12304892774939571]]]

Actual:   [[[0.0611, 0.1239, 0.3497, 0.3124, 0.2001, 0.1332], [0.103, 0.2086, 0.589, 0.5262, 0.3371, 0.2244], [0.0697, 0.1411, 0.3985, 0.356, 0.2281, 0.1518], [0.2097, 0.425, 1.2001, 1.0722, 0.6868, 0.4571], [0.2768, 0.5585, 0.728, 0.5968, 0.3353, 0.1414], [0.1008, 0.2037, 0.3977, 0.3441, 0.2106, 0.1231]]]

Expected: [[[0.0611, 0.1239, 0.3497, 0.3124, 0.2001, 0.1332], [0.103, 0.2086, 0.589, 0.5262, 0.3371, 0.2244], [0.0697, 0.1411, 0.3985, 0.356, 0.2281, 0.1518], [0.2097, 0.425, 1.2001, 1.0722, 0.6868, 0.4571], [0.2768, 0.5585, 0.728, 0.5968, 0.3353, 0.1414], [0.1008, 0.2037, 0.3977, 0.3441, 0.2106, 0.1231]]]