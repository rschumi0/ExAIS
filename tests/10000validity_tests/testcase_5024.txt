import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max42324 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in1Max42324 = tf.keras.layers.Input(shape=([2, 2, 2, 2]))
in0Con41671 = tf.keras.layers.Input(shape=([2, 22]))
in0LST73253 = tf.keras.layers.Input(shape=([1, 1]))
in0Zer71322 = tf.keras.layers.Input(shape=([4, 1, 3, 2]))

Max42324 = keras.layers.Maximum(name = 'Max42324', )([in0Max42324,in1Max42324])
Res83876 = keras.layers.Reshape((2, 2, 4), name = 'Res83876', )(Max42324)
Res48617 = keras.layers.Reshape((2, 8), name = 'Res48617', )(Res83876)
Con41671 = keras.layers.Concatenate(axis=2, name = 'Con41671', )([Res48617,in0Con41671])
LST73253 = keras.layers.LSTM(2,recurrent_activation='sigmoid', name = 'LST73253', )(in0LST73253)
Res88759 = keras.layers.Reshape((2, 1), name = 'Res88759', )(LST73253)
Zer99711 = keras.layers.ZeroPadding1D(padding=((10, 0)), name = 'Zer99711', )(Res88759)
Zer71322 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer71322', )(in0Zer71322)
PRe35412 = keras.layers.PReLU(name = 'PRe35412', )(Zer71322)
Res33162 = keras.layers.Reshape((6, 3, 10), name = 'Res33162', )(PRe35412)
Up_27899 = keras.layers.UpSampling2D(size=(2, 1), name = 'Up_27899', )(Res33162)
Res69976 = keras.layers.Reshape((12, 30), name = 'Res69976', )(Up_27899)
Dot99347 = keras.layers.Dot(axes=(1, 1), name = 'Dot99347', )([Zer99711,Res69976])
Zer1513 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer1513', )(Dot99347)
Sub28980 = keras.layers.Subtract(name = 'Sub28980', )([Con41671,Zer1513])
model = tf.keras.models.Model(inputs=[in0Max42324,in1Max42324,in0Con41671,in0LST73253,in0Zer71322], outputs=Sub28980)
w = model.get_layer('LST73253').get_weights() 
w[0] = np.array([[7, 6, 7, 9, 7, 5, 2, 6]])
w[1] = np.array([[4, 9, 2, 1, 3, 1, 8, 1], [8, 10, 8, 2, 6, 6, 6, 2]])
w[2] = np.array([6, 3, 2, 9, 2, 1, 8, 8])
model.get_layer('LST73253').set_weights(w) 
w = model.get_layer('PRe35412').get_weights() 
w[0] = np.array([[[[0.7731, 0.5746], [0.7259, 0.7507], [0.0616, 0.3501], [0.7098, 0.9533], [0.7461, 0.6767]], [[0.7764, 0.7687], [0.8548, 0.494], [0.7886, 0.7834], [0.1664, 0.7825], [0.3135, 0.4716]], [[0.5721, 0.0626], [0.8768, 0.1838], [0.9001, 0.6959], [0.0256, 0.7897], [0.8398, 0.2044]]], [[[0.5617, 0.5743], [0.0313, 0.1294], [0.314, 0.0003], [0.2159, 0.9208], [0.7272, 0.1169]], [[0.5859, 0.9676], [0.3645, 0.7214], [0.1153, 0.1598], [0.1427, 0.8605], [0.7037, 0.306]], [[0.75, 0.8984], [0.4285, 0.3212], [0.2323, 0.1678], [0.0583, 0.3488], [0.1759, 0.177]]], [[[0.2564, 0.8796], [0.2633, 0.445], [0.5768, 0.4965], [0.234, 0.3068], [0.4391, 0.0823]], [[0.4429, 0.4434], [0.7589, 0.206], [0.2761, 0.4712], [0.8034, 0.929], [0.6594, 0.6535]], [[0.1469, 0.4547], [0.7708, 0.6871], [0.3055, 0.8917], [0.859, 0.5589], [0.7473, 0.8913]]], [[[0.7586, 0.6689], [0.4938, 0.079], [0.2938, 0.7717], [0.4542, 0.0046], [0.266, 0.8022]], [[0.9687, 0.8049], [0.1313, 0.3183], [0.7761, 0.8931], [0.794, 0.1213], [0.7642, 0.7674]], [[0.162, 0.594], [0.4169, 0.4671], [0.243, 0.4344], [0.8273, 0.2939], [0.595, 0.7581]]], [[[0.5104, 0.1644], [0.8877, 0.9919], [0.0216, 0.3613], [0.1787, 0.5866], [0.5613, 0.5135]], [[0.2658, 0.3421], [0.3305, 0.3471], [0.1351, 0.0541], [0.3919, 0.125], [0.0933, 0.2689]], [[0.1847, 0.719], [0.6469, 0.1634], [0.6454, 0.9432], [0.5693, 0.9551], [0.0922, 0.1196]]], [[[0.8841, 0.7917], [0.6478, 0.841], [0.6847, 0.7676], [0.9939, 0.5537], [0.8097, 0.5753]], [[0.6774, 0.8884], [0.3969, 0.3074], [0.0229, 0.6348], [0.2521, 0.099], [0.9441, 0.879]], [[0.7843, 0.6198], [0.5915, 0.098], [0.9829, 0.9129], [0.8287, 0.9438], [0.5444, 0.7091]]]])
model.get_layer('PRe35412').set_weights(w) 
in0Max42324 = tf.constant([[[[[0.341, 0.4931], [0.16, 0.1869]], [[0.0159, 0.6656], [0.6289, 0.7838]]], [[[0.619, 0.7258], [0.6218, 0.8335]], [[0.7762, 0.3303], [0.9488, 0.3635]]]]])
in1Max42324 = tf.constant([[[[[0.2319, 0.4938], [0.8518, 0.0577]], [[0.7373, 0.7046], [0.573, 0.3708]]], [[[0.3156, 0.2528], [0.3597, 0.2778]], [[0.9534, 0.6791], [0.0973, 0.6322]]]]])
in0Con41671 = tf.constant([[[0.2575, 0.9294, 0.5931, 0.3704, 0.1185, 0.1756, 0.4295, 0.3777, 0.5205, 0.3355, 0.3082, 0.2965, 0.2177, 0.7261, 0.3771, 0.4415, 0.0742, 0.5331, 0.1672, 0.9223, 0.9941, 0.9004], [0.8324, 0.9124, 0.1708, 0.2964, 0.4581, 0.3644, 0.7997, 0.629, 0.4236, 0.7438, 0.9989, 0.7601, 0.8668, 0.111, 0.451, 0.6541, 0.0137, 0.5409, 0.1935, 0.3804, 0.5068, 0.4359]]])
in0LST73253 = tf.constant([[[10]]])
in0Zer71322 = tf.constant([[[[[1.8805, 1.3912], [1.8263, 1.6405], [1.7722, 1.1015]]], [[[1.4958, 1.2695], [1.4217, 1.1595], [1.5232, 1.8514]]], [[[1.5269, 1.9123], [1.7972, 1.2477], [1.7708, 1.2625]]], [[[1.282, 1.6865], [1.087, 1.195], [1.9547, 1.3856]]]]])
print (np.array2string(model.predict([in0Max42324,in1Max42324,in0Con41671,in0LST73253,in0Zer71322],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Sub28980.png')

LMax42324 = maximum_layer([[[[[[0.341, 0.4931], [0.16, 0.1869]], [[0.0159, 0.6656], [0.6289, 0.7838]]], [[[0.619, 0.7258], [0.6218, 0.8335]], [[0.7762, 0.3303], [0.9488, 0.3635]]]]], [[[[[0.2319, 0.4938], [0.8518, 0.0577]], [[0.7373, 0.7046], [0.573, 0.3708]]], [[[0.3156, 0.2528], [0.3597, 0.2778]], [[0.9534, 0.6791], [0.0973, 0.6322]]]]]], Max42324), 
LRes83876 = reshape_layer(Max42324, [2, 2, 4], Res83876), 
LRes48617 = reshape_layer(Res83876, [2, 8], Res48617), 
LCon41671 = concatenate_layer([Res48617,[[[0.2575, 0.9294, 0.5931, 0.3704, 0.1185, 0.1756, 0.4295, 0.3777, 0.5205, 0.3355, 0.3082, 0.2965, 0.2177, 0.7261, 0.3771, 0.4415, 0.0742, 0.5331, 0.1672, 0.9223, 0.9941, 0.9004], [0.8324, 0.9124, 0.1708, 0.2964, 0.4581, 0.3644, 0.7997, 0.629, 0.4236, 0.7438, 0.9989, 0.7601, 0.8668, 0.111, 0.451, 0.6541, 0.0137, 0.5409, 0.1935, 0.3804, 0.5068, 0.4359]]]], 2, Con41671), 
LLST73253 = lstm_layer([[[10]]],[[7, 6, 7, 9, 7, 5, 2, 6]],[[4, 9, 2, 1, 3, 1, 8, 1], [8, 10, 8, 2, 6, 6, 6, 2]],[6, 3, 2, 9, 2, 1, 8, 8], LST73253), 
LRes88759 = reshape_layer(LST73253, [2, 1], Res88759), 
LZer99711 = zero_padding1D_layer(Res88759, 10, 0, Zer99711), 
LZer71322 = zero_padding3D_layer([[[[[1.8805, 1.3912], [1.8263, 1.6405], [1.7722, 1.1015]]], [[[1.4958, 1.2695], [1.4217, 1.1595], [1.5232, 1.8514]]], [[[1.5269, 1.9123], [1.7972, 1.2477], [1.7708, 1.2625]]], [[[1.282, 1.6865], [1.087, 1.195], [1.9547, 1.3856]]]]], 1, 1, 1, 1, 1, 1, Zer71322), 
LPRe35412 = prelu_layer(Zer71322, [[[[0.7731, 0.5746], [0.7259, 0.7507], [0.0616, 0.3501], [0.7098, 0.9533], [0.7461, 0.6767]], [[0.7764, 0.7687], [0.8548, 0.494], [0.7886, 0.7834], [0.1664, 0.7825], [0.3135, 0.4716]], [[0.5721, 0.0626], [0.8768, 0.1838], [0.9001, 0.6959], [0.0256, 0.7897], [0.8398, 0.2044]]], [[[0.5617, 0.5743], [0.0313, 0.1294], [0.314, 0.0003], [0.2159, 0.9208], [0.7272, 0.1169]], [[0.5859, 0.9676], [0.3645, 0.7214], [0.1153, 0.1598], [0.1427, 0.8605], [0.7037, 0.306]], [[0.75, 0.8984], [0.4285, 0.3212], [0.2323, 0.1678], [0.0583, 0.3488], [0.1759, 0.177]]], [[[0.2564, 0.8796], [0.2633, 0.445], [0.5768, 0.4965], [0.234, 0.3068], [0.4391, 0.0823]], [[0.4429, 0.4434], [0.7589, 0.206], [0.2761, 0.4712], [0.8034, 0.929], [0.6594, 0.6535]], [[0.1469, 0.4547], [0.7708, 0.6871], [0.3055, 0.8917], [0.859, 0.5589], [0.7473, 0.8913]]], [[[0.7586, 0.6689], [0.4938, 0.079], [0.2938, 0.7717], [0.4542, 0.0046], [0.266, 0.8022]], [[0.9687, 0.8049], [0.1313, 0.3183], [0.7761, 0.8931], [0.794, 0.1213], [0.7642, 0.7674]], [[0.162, 0.594], [0.4169, 0.4671], [0.243, 0.4344], [0.8273, 0.2939], [0.595, 0.7581]]], [[[0.5104, 0.1644], [0.8877, 0.9919], [0.0216, 0.3613], [0.1787, 0.5866], [0.5613, 0.5135]], [[0.2658, 0.3421], [0.3305, 0.3471], [0.1351, 0.0541], [0.3919, 0.125], [0.0933, 0.2689]], [[0.1847, 0.719], [0.6469, 0.1634], [0.6454, 0.9432], [0.5693, 0.9551], [0.0922, 0.1196]]], [[[0.8841, 0.7917], [0.6478, 0.841], [0.6847, 0.7676], [0.9939, 0.5537], [0.8097, 0.5753]], [[0.6774, 0.8884], [0.3969, 0.3074], [0.0229, 0.6348], [0.2521, 0.099], [0.9441, 0.879]], [[0.7843, 0.6198], [0.5915, 0.098], [0.9829, 0.9129], [0.8287, 0.9438], [0.5444, 0.7091]]]], PRe35412), 
LRes33162 = reshape_layer(PRe35412, [6, 3, 10], Res33162), 
LUp_27899 = up_sampling2D_layer(Res33162, 2, 1, Up_27899), 
LRes69976 = reshape_layer(Up_27899, [12, 30], Res69976), 
LDot99347 = dot_layer(Zer99711,Res69976, 1, 1, Dot99347), 
LZer1513 = zero_padding1D_layer(Dot99347, 1, 0, Zer1513), 
LSub28980 = subtract_layer(Con41671,Zer1513, Sub28980), 
exec_layers([LMax42324,LRes83876,LRes48617,LCon41671,LLST73253,LRes88759,LZer99711,LZer71322,LPRe35412,LRes33162,LUp_27899,LRes69976,LDot99347,LZer1513,LSub28980],["Max42324","Res83876","Res48617","Con41671","LST73253","Res88759","Zer99711","Zer71322","PRe35412","Res33162","Up_27899","Res69976","Dot99347","Zer1513","Sub28980"],Sub28980,"Sub28980")

Actual (Unparsed): [[[0.3410000, 0.4938000, 0.8518000, 0.1869000, 0.7373000, 0.7046000, 0.6289000, 0.7838000, 0.2575000, 0.9294000, 0.5931000, 0.3704000, 0.1185000, 0.1756000, 0.4295000, 0.3777000, 0.5205000, 0.3355000, 0.3082000, 0.2965000, 0.2177000, 0.7261000, 0.3771000, 0.4415000, 0.0742000, 0.5331000, 0.1672000, 0.9223000, 0.9941000, 0.9004000], [0.6190000, 0.7258000, 0.6218000, 0.8335000, 0.9534000, 0.6791000, 0.9488000, 0.6322000, 0.8324000, 0.9124000, 0.1708000, 0.2964000, 0.4581000, 0.3644000, 0.7997000, 0.6290000, 0.4236000, 0.7438000, 0.9989000, 0.7601000, 0.8668000, 0.1110000, 0.4510000, 0.6541000, 0.0137000, 0.5409000, 0.1935000, 0.3804000, 0.5068000, 0.4359000]]]

Expected (Unparsed): [[[0.341,0.4938,0.8518,0.1869,0.7373,0.7046,0.6289,0.7838,0.2575,0.9294,0.5931,0.3704,0.1185,0.1756,0.4295,0.3777,0.5205,0.3355,0.3082,0.2965,0.2177,0.7261,0.3771,0.4415,0.0742,0.5331,0.1672,0.9223,0.9941,0.9004],[0.619,0.7258,0.6218,0.8335,0.9534,0.6791,0.9488,0.6322,0.8324,0.9124,0.1708,0.2964,0.4581,0.3644,0.7997,0.629,0.4236,0.7438,0.9989,0.7601,0.8668,0.111,0.451,0.6541,0.0137,0.5409,0.1935,0.3804,0.5068,0.4359]]]

Actual:   [[[0.341, 0.4938, 0.8518, 0.1869, 0.7373, 0.7046, 0.6289, 0.7838, 0.2575, 0.9294, 0.5931, 0.3704, 0.1185, 0.1756, 0.4295, 0.3777, 0.5205, 0.3355, 0.3082, 0.2965, 0.2177, 0.7261, 0.3771, 0.4415, 0.0742, 0.5331, 0.1672, 0.9223, 0.9941, 0.9004], [0.619, 0.7258, 0.6218, 0.8335, 0.9534, 0.6791, 0.9488, 0.6322, 0.8324, 0.9124, 0.1708, 0.2964, 0.4581, 0.3644, 0.7997, 0.629, 0.4236, 0.7438, 0.9989, 0.7601, 0.8668, 0.111, 0.451, 0.6541, 0.0137, 0.5409, 0.1935, 0.3804, 0.5068, 0.4359]]]

Expected: [[[0.341, 0.4938, 0.8518, 0.1869, 0.7373, 0.7046, 0.6289, 0.7838, 0.2575, 0.9294, 0.5931, 0.3704, 0.1185, 0.1756, 0.4295, 0.3777, 0.5205, 0.3355, 0.3082, 0.2965, 0.2177, 0.7261, 0.3771, 0.4415, 0.0742, 0.5331, 0.1672, 0.9223, 0.9941, 0.9004], [0.619, 0.7258, 0.6218, 0.8335, 0.9534, 0.6791, 0.9488, 0.6322, 0.8324, 0.9124, 0.1708, 0.2964, 0.4581, 0.3644, 0.7997, 0.629, 0.4236, 0.7438, 0.9989, 0.7601, 0.8668, 0.111, 0.451, 0.6541, 0.0137, 0.5409, 0.1935, 0.3804, 0.5068, 0.4359]]]