import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Den57384 = tf.keras.layers.Input(shape=([5, 3, 2]))

Den57384 = keras.layers.Dense(1,name = 'Den57384', )(in0Den57384)
Den29148 = keras.layers.Dense(1,name = 'Den29148', )(Den57384)
model = tf.keras.models.Model(inputs=[in0Den57384], outputs=Den29148)
w = model.get_layer('Den57384').get_weights() 
w[0] = np.array([[0.7407], [0.277]])
w[1] = np.array([0.1574])
model.get_layer('Den57384').set_weights(w) 
w = model.get_layer('Den29148').get_weights() 
w[0] = np.array([[0.4873]])
w[1] = np.array([0.576])
model.get_layer('Den29148').set_weights(w) 
in0Den57384 = tf.constant([[[[0.3447, 0.1918], [0.3713, 0.0469], [0.009, 0.2362]], [[0.9983, 0.4328], [0.5001, 0.6698], [0.5686, 0.0362]], [[0.5839, 0.7115], [0.5789, 0.4814], [0.6594, 0.3609]], [[0.4494, 0.6843], [0.0014, 0.5496], [0.4805, 0.8183]], [[0.3829, 0.6864], [0.0796, 0.7898], [0.1996, 0.7641]]]])
print (np.array2string(model.predict([in0Den57384],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Den29148.png')

LDen57384 = dense_layer([[[[0.3447, 0.1918], [0.3713, 0.0469], [0.009, 0.2362]], [[0.9983, 0.4328], [0.5001, 0.6698], [0.5686, 0.0362]], [[0.5839, 0.7115], [0.5789, 0.4814], [0.6594, 0.3609]], [[0.4494, 0.6843], [0.0014, 0.5496], [0.4805, 0.8183]], [[0.3829, 0.6864], [0.0796, 0.7898], [0.1996, 0.7641]]]], [[0.7407], [0.277]],[0.1574], Den57384), 
LDen29148 = dense_layer(Den57384, [[0.4873]],[0.576], Den29148), 
exec_layers([LDen57384,LDen29148],["Den57384","Den29148"],Den29148,"Den29148")

Actual (Unparsed): [[[[0.8030077], [0.7930499], [0.6878323]], [[1.0714508], [0.9236197], [0.8628196]], [[0.9594955], [0.9266314], [0.9394219]], [[0.9072771], [0.7273925], [0.9365900]], [[0.8835578], [0.7880410], [0.8278851]]]]

Expected (Unparsed): [[[[0.803007676797],[0.793049857233],[0.68783228001]],[[1.071450779593],[0.9236196798909999],[0.862819624366]],[[0.959495466079],[0.926631369319],[0.9394219466239999]],[[0.907277104664],[0.727392502514],[0.936590036785]],[[0.883557850259],[0.7880409541360001],[0.827885087366]]]]

Actual:   [[[[0.8031], [0.7931], [0.6879]], [[1.0715], [0.9237], [0.8629]], [[0.9595], [0.9267], [0.9395]], [[0.9073], [0.7274], [0.9366]], [[0.8836], [0.7881], [0.8279]]]]

Expected: [[[[0.8031], [0.7931], [0.6879]], [[1.0715], [0.9237], [0.8629]], [[0.9595], [0.9267], [0.9395]], [[0.9073], [0.7274], [0.9366]], [[0.8836], [0.7881], [0.8279]]]]