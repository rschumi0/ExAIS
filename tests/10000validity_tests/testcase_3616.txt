import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add22292 = tf.keras.layers.Input(shape=([1, 1]))
in1Add22292 = tf.keras.layers.Input(shape=([1, 1]))
in0Con27679 = tf.keras.layers.Input(shape=([16, 1]))
in0Cro36823 = tf.keras.layers.Input(shape=([3, 2, 4, 3]))
in0Con59553 = tf.keras.layers.Input(shape=([1, 7]))
in0Max45839 = tf.keras.layers.Input(shape=([1, 2, 1]))
in1Max45839 = tf.keras.layers.Input(shape=([1, 2, 1]))

Add22292 = keras.layers.Add(name = 'Add22292', )([in0Add22292,in1Add22292])
Glo96832 = keras.layers.GlobalAveragePooling1D(name = 'Glo96832', )(Add22292)
Res22667 = keras.layers.Reshape((1, 1), name = 'Res22667', )(Glo96832)
Zer27636 = keras.layers.ZeroPadding1D(padding=((15, 0)), name = 'Zer27636', )(Res22667)
Con27679 = keras.layers.Concatenate(axis=2, name = 'Con27679', )([Zer27636,in0Con27679])
Cro36823 = keras.layers.Cropping3D(cropping=((2, 0), (1, 0), (0, 1)), name = 'Cro36823', )(in0Cro36823)
Res94948 = keras.layers.Reshape((1, 1, 9), name = 'Res94948', )(Cro36823)
Res13562 = keras.layers.Reshape((1, 9), name = 'Res13562', )(Res94948)
Con59553 = keras.layers.Concatenate(axis=2, name = 'Con59553', )([Res13562,in0Con59553])
Max45839 = keras.layers.Maximum(name = 'Max45839', )([in0Max45839,in1Max45839])
Res66935 = keras.layers.Reshape((1, 2), name = 'Res66935', )(Max45839)
Ave15741 = keras.layers.AveragePooling1D(pool_size=(1), name = 'Ave15741', )(Res66935)
Dot11127 = keras.layers.Dot(axes=(1, 1), name = 'Dot11127', )([Con59553,Ave15741])
Add64666 = keras.layers.Add(name = 'Add64666', )([Con27679,Dot11127])
model = tf.keras.models.Model(inputs=[in0Add22292,in1Add22292,in0Con27679,in0Cro36823,in0Con59553,in0Max45839,in1Max45839], outputs=Add64666)
in0Add22292 = tf.constant([[[0.5764]]])
in1Add22292 = tf.constant([[[0.958]]])
in0Con27679 = tf.constant([[[0.5815], [0.0903], [0.3296], [0.2266], [0.079], [0.7835], [0.402], [0.8315], [0.1566], [0.8894], [0.0115], [0.4747], [0.4493], [0.376], [0.3391], [0.8298]]])
in0Cro36823 = tf.constant([[[[[1.1877, 1.685, 1.1928], [1.9041, 1.6006, 1.9724], [1.2775, 1.3661, 1.7887], [1.9294, 1.1794, 1.9718]], [[1.0447, 1.7161, 1.944], [1.2055, 1.1911, 1.5903], [1.3817, 1.7807, 1.0115], [1.1218, 1.9205, 1.9739]]], [[[1.5381, 1.6298, 1.397], [1.7225, 1.7308, 1.3463], [1.2444, 1.2897, 1.0993], [1.638, 1.5056, 1.2131]], [[1.9846, 1.8639, 1.7203], [1.0716, 1.5446, 1.0853], [1.0129, 1.3263, 1.9689], [1.9019, 1.6442, 1.1233]]], [[[1.0848, 1.1415, 1.8775], [1.4827, 1.3124, 1.9992], [1.2618, 1.7367, 1.8739], [1.4872, 1.332, 1.434]], [[1.2728, 1.7397, 1.2917], [1.1777, 1.3169, 1.7935], [1.4544, 1.0281, 1.3808], [1.9601, 1.0959, 1.1673]]]]])
in0Con59553 = tf.constant([[[0.3628, 0.9944, 0.6741, 0.398, 0.2671, 0.457, 0.8323]]])
in0Max45839 = tf.constant([[[[0.1792], [0.796]]]])
in1Max45839 = tf.constant([[[[0.8956], [0.497]]]])
print (np.array2string(model.predict([in0Add22292,in1Add22292,in0Con27679,in0Cro36823,in0Con59553,in0Max45839,in1Max45839],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add64666.png')

LAdd22292 = add_layer([[[[0.5764]]], [[[0.958]]]], Add22292), 
LGlo96832 = global_average_pooling1D_layer(Add22292, Glo96832), 
LRes22667 = reshape_layer(Glo96832, [1, 1], Res22667), 
LZer27636 = zero_padding1D_layer(Res22667, 15, 0, Zer27636), 
LCon27679 = concatenate_layer([Zer27636,[[[0.5815], [0.0903], [0.3296], [0.2266], [0.079], [0.7835], [0.402], [0.8315], [0.1566], [0.8894], [0.0115], [0.4747], [0.4493], [0.376], [0.3391], [0.8298]]]], 2, Con27679), 
LCro36823 = cropping3D_layer([[[[[1.1877, 1.685, 1.1928], [1.9041, 1.6006, 1.9724], [1.2775, 1.3661, 1.7887], [1.9294, 1.1794, 1.9718]], [[1.0447, 1.7161, 1.944], [1.2055, 1.1911, 1.5903], [1.3817, 1.7807, 1.0115], [1.1218, 1.9205, 1.9739]]], [[[1.5381, 1.6298, 1.397], [1.7225, 1.7308, 1.3463], [1.2444, 1.2897, 1.0993], [1.638, 1.5056, 1.2131]], [[1.9846, 1.8639, 1.7203], [1.0716, 1.5446, 1.0853], [1.0129, 1.3263, 1.9689], [1.9019, 1.6442, 1.1233]]], [[[1.0848, 1.1415, 1.8775], [1.4827, 1.3124, 1.9992], [1.2618, 1.7367, 1.8739], [1.4872, 1.332, 1.434]], [[1.2728, 1.7397, 1.2917], [1.1777, 1.3169, 1.7935], [1.4544, 1.0281, 1.3808], [1.9601, 1.0959, 1.1673]]]]], 2, 0, 1, 0, 0, 1, Cro36823), 
LRes94948 = reshape_layer(Cro36823, [1, 1, 9], Res94948), 
LRes13562 = reshape_layer(Res94948, [1, 9], Res13562), 
LCon59553 = concatenate_layer([Res13562,[[[0.3628, 0.9944, 0.6741, 0.398, 0.2671, 0.457, 0.8323]]]], 2, Con59553), 
LMax45839 = maximum_layer([[[[[0.1792], [0.796]]]], [[[[0.8956], [0.497]]]]], Max45839), 
LRes66935 = reshape_layer(Max45839, [1, 2], Res66935), 
LAve15741 = average_pooling1D_layer(Res66935, 1, Ave15741), 
LDot11127 = dot_layer(Con59553,Ave15741, 1, 1, Dot11127), 
LAdd64666 = add_layer([Con27679,Dot11127], Add64666), 
exec_layers([LAdd22292,LGlo96832,LRes22667,LZer27636,LCon27679,LCro36823,LRes94948,LRes13562,LCon59553,LMax45839,LRes66935,LAve15741,LDot11127,LAdd64666],["Add22292","Glo96832","Res22667","Zer27636","Con27679","Cro36823","Res94948","Res13562","Con59553","Max45839","Res66935","Ave15741","Dot11127","Add64666"],Add64666,"Add64666")

Actual (Unparsed): [[[1.1399197, 1.5946488], [1.5580753, 1.4751012], [1.1568466, 1.3577932], [1.0547482, 1.1640492], [1.1794157, 1.1272524], [1.6062586, 2.2111260], [1.3025606, 1.5597024], [0.9207664, 1.6498676], [1.2366445, 1.2557168], [0.3249237, 1.1781888], [0.8905847, 0.8030424], [0.6037240, 1.0112836], [0.3564488, 0.7661080], [0.2392148, 0.5886116], [0.4092892, 0.7028720], [2.2798079, 1.4923108]]]

Expected (Unparsed): [[[1.1399196799999998,1.5946487999999999],[1.55807532,1.4751012000000001],[1.15684652,1.3577932000000001],[1.05474812,1.1640492],[1.17941564,1.1272524],[1.6062586,2.211126],[1.3025606399999998,1.5597024],[0.92076636,1.6498676],[1.23664448,1.2557168],[0.32492368,1.1781888],[0.8905846399999999,0.8030423999999999],[0.60372396,1.0112836],[0.3564488,0.766108],[0.23921476,0.5886116],[0.4092892,0.702872],[2.27980788,1.4923108]]]

Actual:   [[[1.14, 1.5947], [1.5581, 1.4752], [1.1569, 1.3578], [1.0548, 1.1641], [1.1795, 1.1273], [1.6063, 2.2112], [1.3026, 1.5598], [0.9208, 1.6499], [1.2367, 1.2558], [0.325, 1.1782], [0.8906, 0.8031], [0.6038, 1.0113], [0.3565, 0.7662], [0.2393, 0.5887], [0.4093, 0.7029], [2.2799, 1.4924]]]

Expected: [[[1.14, 1.5947], [1.5581, 1.4752], [1.1569, 1.3578], [1.0548, 1.1641], [1.1795, 1.1273], [1.6063, 2.2112], [1.3026, 1.5598], [0.9208, 1.6499], [1.2367, 1.2558], [0.325, 1.1782], [0.8906, 0.8031], [0.6038, 1.0113], [0.3565, 0.7662], [0.2393, 0.5887], [0.4093, 0.7029], [2.2799, 1.4924]]]