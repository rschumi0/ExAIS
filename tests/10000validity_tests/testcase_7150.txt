import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Add78991 = tf.keras.layers.Input(shape=([2, 2]))
in1Add78991 = tf.keras.layers.Input(shape=([2, 2]))
in0Mul42432 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Mul42432 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Bat79221 = tf.keras.layers.Input(shape=([4]))
in0Con29493 = tf.keras.layers.Input(shape=([4, 47, 1]))
in0Min72598 = tf.keras.layers.Input(shape=([2, 2]))
in1Min72598 = tf.keras.layers.Input(shape=([2, 2]))
in0Ave56594 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in1Ave56594 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))

Add78991 = keras.layers.Add(name = 'Add78991', )([in0Add78991,in1Add78991])
Bat68294 = keras.layers.BatchNormalization(axis=1, epsilon=0.12590911572504662,  name = 'Bat68294', )(Add78991)
Res76411 = keras.layers.Reshape((2, 2, 1), name = 'Res76411', )(Bat68294)
Res72159 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res72159', )(Res76411)
Zer35419 = keras.layers.ZeroPadding3D(padding=((2, 0), (45, 0), (1, 0)), name = 'Zer35419', )(Res72159)
Mul42432 = keras.layers.Multiply(name = 'Mul42432', )([in0Mul42432,in1Mul42432])
Res46916 = keras.layers.Reshape((2, 2, 2, 1), name = 'Res46916', )(Mul42432)
Zer74768 = keras.layers.ZeroPadding3D(padding=((2, 0), (45, 0), (0, 0)), name = 'Zer74768', )(Res46916)
Bat79221 = keras.layers.BatchNormalization(axis=1, epsilon=0.3687221889372162,  name = 'Bat79221', )(in0Bat79221)
Res42264 = keras.layers.Reshape((4, 1), name = 'Res42264', )(Bat79221)
Res5779 = keras.layers.Reshape((4, 1, 1), name = 'Res5779', )(Res42264)
Zer22228 = keras.layers.ZeroPadding2D(padding=((0, 0), (46, 0)), name = 'Zer22228', )(Res5779)
Con29493 = keras.layers.Concatenate(axis=3, name = 'Con29493', )([Zer22228,in0Con29493])
Min72598 = keras.layers.Minimum(name = 'Min72598', )([in0Min72598,in1Min72598])
Res6211 = keras.layers.Reshape((2, 2, 1), name = 'Res6211', )(Min72598)
Con36588 = keras.layers.Conv2DTranspose(2, (2, 1),strides=(1, 12), padding='valid', name = 'Con36588', )(Res6211)
Zer40278 = keras.layers.ZeroPadding2D(padding=((1, 0), (23, 0)), name = 'Zer40278', )(Con36588)
Max70938 = keras.layers.Maximum(name = 'Max70938', )([Con29493,Zer40278])
Res36473 = keras.layers.Reshape((4, 47, 2, 1), name = 'Res36473', )(Max70938)
Ave56594 = keras.layers.Average(name = 'Ave56594', )([in0Ave56594,in1Ave56594])
Zer36776 = keras.layers.ZeroPadding3D(padding=((2, 0), (46, 0), (1, 0)), name = 'Zer36776', )(Ave56594)
Min21027 = keras.layers.Minimum(name = 'Min21027', )([Res36473,Zer36776])
Mul84605 = keras.layers.Multiply(name = 'Mul84605', )([Zer74768,Min21027])
Ave27493 = keras.layers.Average(name = 'Ave27493', )([Zer35419,Mul84605])
model = tf.keras.models.Model(inputs=[in0Add78991,in1Add78991,in0Mul42432,in1Mul42432,in0Bat79221,in0Con29493,in0Min72598,in1Min72598,in0Ave56594,in1Ave56594], outputs=Ave27493)
w = model.get_layer('Bat68294').get_weights() 
w[0] = np.array([0.6335, 0.6976])
w[1] = np.array([0.6517, 0.6495])
w[2] = np.array([0.9142, 0.5925])
w[3] = np.array([0.4923, 0.6029])
model.get_layer('Bat68294').set_weights(w) 
w = model.get_layer('Bat79221').get_weights() 
w[0] = np.array([0.9086, 0.0699, 0.2882, 0.4794])
w[1] = np.array([0.4343, 0.5669, 0.3095, 0.5201])
w[2] = np.array([0.9478, 0.2783, 0.1402, 0.4779])
w[3] = np.array([0.6858, 0.7016, 0.2, 0.867])
model.get_layer('Bat79221').set_weights(w) 
w = model.get_layer('Con36588').get_weights() 
w[0] = np.array([[[[0.4943], [0.8822]]], [[[0.4172], [0.3037]]]])
w[1] = np.array([0, 0])
model.get_layer('Con36588').set_weights(w) 
in0Add78991 = tf.constant([[[0.6455, 0.7439], [0.5137, 0.1029]]])
in1Add78991 = tf.constant([[[0.1286, 0.3022], [0.9762, 0.0841]]])
in0Mul42432 = tf.constant([[[[0.3071, 0.0461], [0.1665, 0.4259]], [[0.143, 0.911], [0.696, 0.8849]]]])
in1Mul42432 = tf.constant([[[[0.5873, 0.6617], [0.3589, 0.8857]], [[0.8806, 0.7187], [0.8339, 0.3958]]]])
in0Bat79221 = tf.constant([[1.1713, 1.4444, 1.3507, 1.4177]])
in0Con29493 = tf.constant([[[[0.1375], [0.5663], [0.2775], [0.7718], [0.3347], [0.0782], [0.7881], [0.8262], [0.908], [0.5124], [0.2719], [0.7309], [0.2945], [0.132], [0.7272], [0.4901], [0.1479], [0.2922], [0.5842], [0.4526], [0.6098], [0.6492], [0.4898], [0.2863], [0.3931], [0.445], [0.9646], [0.2169], [0.9765], [0.157], [0.6415], [0.9812], [0.945], [0.1061], [0.982], [0.8293], [0.3954], [0.3213], [0.2043], [0.6932], [0.3734], [0.0755], [0.6573], [0.3324], [0.504], [0.0266], [0.0243]], [[0.8674], [0.3391], [0.8264], [0.554], [0.6144], [0.4552], [0.3889], [0.9791], [0.5471], [0.0028], [0.7548], [0.9054], [0.0292], [0.2378], [0.6286], [0.2342], [0.6828], [0.542], [0.2199], [0.6129], [0.391], [0.5818], [0.9787], [0.0026], [0.4656], [0.5445], [0.1762], [0.195], [0.9561], [0.8447], [0.055], [0.5174], [0.9234], [0.2981], [0.4499], [0.0219], [0.2557], [0.5224], [0.3619], [0.1725], [0.2685], [0.2464], [0.9575], [0.4145], [0.8928], [0.2793], [0.8625]], [[0.0393], [0.7351], [0.1294], [0.4194], [0.4427], [0.667], [0.6425], [0.7862], [0.2157], [0.894], [0.58], [0.3691], [0.5027], [0.6394], [0.7542], [0.1013], [0.7162], [0.6839], [0.1936], [0.5076], [0.0076], [0.0018], [0.8274], [0.3272], [0.8574], [0.6472], [0.343], [0.7056], [0.7715], [0.8634], [0.1988], [0.6135], [0.3487], [0.1078], [0.2554], [0.2021], [0.9193], [0.318], [0.1234], [0.2595], [0.5429], [0.2807], [0.1241], [0.8025], [0.4058], [0.4045], [0.7064]], [[0.1023], [0.5555], [0.5504], [0.271], [0.125], [0.4744], [0.8254], [0.6155], [0.4472], [0.2086], [0.407], [0.6325], [0.1973], [0.6381], [0.5349], [0.4691], [0.4686], [0.0073], [0.7775], [0.0862], [0.9538], [0.0147], [0.5618], [0.0447], [0.254], [0.6046], [0.7428], [0.3893], [0.4348], [0.099], [0.678], [0.7015], [0.9196], [0.4628], [0.8747], [0.7474], [0.7369], [0.3026], [0.7783], [0.663], [0.4725], [0.668], [0.686], [0.2834], [0.0175], [0.8444], [0.0834]]]])
in0Min72598 = tf.constant([[[0.7075, 0.5604], [0.1168, 0.8756]]])
in1Min72598 = tf.constant([[[0.98, 0.6814], [0.126, 0.8191]]])
in0Ave56594 = tf.constant([[[[[0.9697]]], [[[0.1754]]]]])
in1Ave56594 = tf.constant([[[[[0.9525]]], [[[0.4185]]]]])
print (np.array2string(model.predict([in0Add78991,in1Add78991,in0Mul42432,in1Mul42432,in0Bat79221,in0Con29493,in0Min72598,in1Min72598,in0Ave56594,in1Ave56594],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave27493.png')

LAdd78991 = add_layer([[[[0.6455, 0.7439], [0.5137, 0.1029]]], [[[0.1286, 0.3022], [0.9762, 0.0841]]]], Add78991), 
LBat68294 = batch_normalization_layer(Add78991, 1, 0.12590911572504662, [0.6335, 0.6976], [0.6517, 0.6495], [0.9142, 0.5925], [0.4923, 0.6029], Bat68294), 
LRes76411 = reshape_layer(Bat68294, [2, 2, 1], Res76411), 
LRes72159 = reshape_layer(Res76411, [2, 2, 1, 1], Res72159), 
LZer35419 = zero_padding3D_layer(Res72159, 2, 0, 45, 0, 1, 0, Zer35419), 
LMul42432 = multiply_layer([[[[[0.3071, 0.0461], [0.1665, 0.4259]], [[0.143, 0.911], [0.696, 0.8849]]]], [[[[0.5873, 0.6617], [0.3589, 0.8857]], [[0.8806, 0.7187], [0.8339, 0.3958]]]]], Mul42432), 
LRes46916 = reshape_layer(Mul42432, [2, 2, 2, 1], Res46916), 
LZer74768 = zero_padding3D_layer(Res46916, 2, 0, 45, 0, 0, 0, Zer74768), 
LBat79221 = batch_normalization_layer([[1.1713, 1.4444, 1.3507, 1.4177]], 1, 0.3687221889372162, [0.9086, 0.0699, 0.2882, 0.4794], [0.4343, 0.5669, 0.3095, 0.5201], [0.9478, 0.2783, 0.1402, 0.4779], [0.6858, 0.7016, 0.2, 0.867], Bat79221), 
LRes42264 = reshape_layer(Bat79221, [4, 1], Res42264), 
LRes5779 = reshape_layer(Res42264, [4, 1, 1], Res5779), 
LZer22228 = zero_padding2D_layer(Res5779, 0, 0, 46, 0, Zer22228), 
LCon29493 = concatenate_layer([Zer22228,[[[[0.1375], [0.5663], [0.2775], [0.7718], [0.3347], [0.0782], [0.7881], [0.8262], [0.908], [0.5124], [0.2719], [0.7309], [0.2945], [0.132], [0.7272], [0.4901], [0.1479], [0.2922], [0.5842], [0.4526], [0.6098], [0.6492], [0.4898], [0.2863], [0.3931], [0.445], [0.9646], [0.2169], [0.9765], [0.157], [0.6415], [0.9812], [0.945], [0.1061], [0.982], [0.8293], [0.3954], [0.3213], [0.2043], [0.6932], [0.3734], [0.0755], [0.6573], [0.3324], [0.504], [0.0266], [0.0243]], [[0.8674], [0.3391], [0.8264], [0.554], [0.6144], [0.4552], [0.3889], [0.9791], [0.5471], [0.0028], [0.7548], [0.9054], [0.0292], [0.2378], [0.6286], [0.2342], [0.6828], [0.542], [0.2199], [0.6129], [0.391], [0.5818], [0.9787], [0.0026], [0.4656], [0.5445], [0.1762], [0.195], [0.9561], [0.8447], [0.055], [0.5174], [0.9234], [0.2981], [0.4499], [0.0219], [0.2557], [0.5224], [0.3619], [0.1725], [0.2685], [0.2464], [0.9575], [0.4145], [0.8928], [0.2793], [0.8625]], [[0.0393], [0.7351], [0.1294], [0.4194], [0.4427], [0.667], [0.6425], [0.7862], [0.2157], [0.894], [0.58], [0.3691], [0.5027], [0.6394], [0.7542], [0.1013], [0.7162], [0.6839], [0.1936], [0.5076], [0.0076], [0.0018], [0.8274], [0.3272], [0.8574], [0.6472], [0.343], [0.7056], [0.7715], [0.8634], [0.1988], [0.6135], [0.3487], [0.1078], [0.2554], [0.2021], [0.9193], [0.318], [0.1234], [0.2595], [0.5429], [0.2807], [0.1241], [0.8025], [0.4058], [0.4045], [0.7064]], [[0.1023], [0.5555], [0.5504], [0.271], [0.125], [0.4744], [0.8254], [0.6155], [0.4472], [0.2086], [0.407], [0.6325], [0.1973], [0.6381], [0.5349], [0.4691], [0.4686], [0.0073], [0.7775], [0.0862], [0.9538], [0.0147], [0.5618], [0.0447], [0.254], [0.6046], [0.7428], [0.3893], [0.4348], [0.099], [0.678], [0.7015], [0.9196], [0.4628], [0.8747], [0.7474], [0.7369], [0.3026], [0.7783], [0.663], [0.4725], [0.668], [0.686], [0.2834], [0.0175], [0.8444], [0.0834]]]]], 3, Con29493), 
LMin72598 = minimum_layer([[[[0.7075, 0.5604], [0.1168, 0.8756]]], [[[0.98, 0.6814], [0.126, 0.8191]]]], Min72598), 
LRes6211 = reshape_layer(Min72598, [2, 2, 1], Res6211), 
LCon36588 = conv2D_transpose_layer(Res6211, 2, 1,[[[[0.4943], [0.8822]]], [[[0.4172], [0.3037]]]],[0, 0], 1, 12, false, Con36588), 
LZer40278 = zero_padding2D_layer(Con36588, 1, 0, 23, 0, Zer40278), 
LMax70938 = maximum_layer([Con29493,Zer40278], Max70938), 
LRes36473 = reshape_layer(Max70938, [4, 47, 2, 1], Res36473), 
LAve56594 = average_layer([[[[[[0.9697]]], [[[0.1754]]]]], [[[[[0.9525]]], [[[0.4185]]]]]], Ave56594), 
LZer36776 = zero_padding3D_layer(Ave56594, 2, 0, 46, 0, 1, 0, Zer36776), 
LMin21027 = minimum_layer([Res36473,Zer36776], Min21027), 
LMul84605 = multiply_layer([Zer74768,Min21027], Mul84605), 
LAve27493 = average_layer([Zer35419,Mul84605], Ave27493), 
exec_layers([LAdd78991,LBat68294,LRes76411,LRes72159,LZer35419,LMul42432,LRes46916,LZer74768,LBat79221,LRes42264,LRes5779,LZer22228,LCon29493,LMin72598,LRes6211,LCon36588,LZer40278,LMax70938,LRes36473,LAve56594,LZer36776,LMin21027,LMul84605,LAve27493],["Add78991","Bat68294","Res76411","Res72159","Zer35419","Mul42432","Res46916","Zer74768","Bat79221","Res42264","Res5779","Zer22228","Con29493","Min72598","Res6211","Con36588","Zer40278","Max70938","Res36473","Ave56594","Zer36776","Min21027","Mul84605","Ave27493"],Ave27493,"Ave27493")

Actual (Unparsed): [[[[[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]]], [[[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.2694100]], [[0.0000000], [0.5122206]]], [[[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.0000000]], [[0.0000000], [0.6914033]], [[0.0000000], [0.1736788]]]]]

Expected (Unparsed

Actual

Expected