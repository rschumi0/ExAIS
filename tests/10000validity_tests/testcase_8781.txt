import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub19242 = tf.keras.layers.Input(shape=([2, 3, 3]))
in1Sub19242 = tf.keras.layers.Input(shape=([2, 3, 3]))
in0Up_32898 = tf.keras.layers.Input(shape=([4, 2]))
in0Con90834 = tf.keras.layers.Input(shape=([4, 7]))
in0Con98207 = tf.keras.layers.Input(shape=([4, 5]))
in0Ave63823 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in1Ave63823 = tf.keras.layers.Input(shape=([1, 2, 2, 1]))
in0Sub20209 = tf.keras.layers.Input(shape=([3, 2]))
in1Sub20209 = tf.keras.layers.Input(shape=([3, 2]))
in0Con52155 = tf.keras.layers.Input(shape=([14, 2]))

Sub19242 = keras.layers.Subtract(name = 'Sub19242', )([in0Sub19242,in1Sub19242])
Res82291 = keras.layers.Reshape((2, 9), name = 'Res82291', )(Sub19242)
Zer61574 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer61574', )(Res82291)
Up_32898 = keras.layers.UpSampling1D(size=(1), name = 'Up_32898', )(in0Up_32898)
Con90834 = keras.layers.Concatenate(axis=2, name = 'Con90834', )([Up_32898,in0Con90834])
Mul63485 = keras.layers.Multiply(name = 'Mul63485', )([Zer61574,Con90834])
Con98207 = keras.layers.Concatenate(axis=2, name = 'Con98207', )([Mul63485,in0Con98207])
Ave63823 = keras.layers.Average(name = 'Ave63823', )([in0Ave63823,in1Ave63823])
Res60241 = keras.layers.Reshape((1, 2, 2), name = 'Res60241', )(Ave63823)
Res7671 = keras.layers.Reshape((1, 4), name = 'Res7671', )(Res60241)
Zer19887 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer19887', )(Res7671)
Dot80012 = keras.layers.Dot(axes=(1, 1), name = 'Dot80012', )([Con98207,Zer19887])
Sub20209 = keras.layers.Subtract(name = 'Sub20209', )([in0Sub20209,in1Sub20209])
Zer29561 = keras.layers.ZeroPadding1D(padding=((11, 0)), name = 'Zer29561', )(Sub20209)
Con52155 = keras.layers.Concatenate(axis=2, name = 'Con52155', )([Zer29561,in0Con52155])
Ave86783 = keras.layers.Average(name = 'Ave86783', )([Dot80012,Con52155])
model = tf.keras.models.Model(inputs=[in0Sub19242,in1Sub19242,in0Up_32898,in0Con90834,in0Con98207,in0Ave63823,in1Ave63823,in0Sub20209,in1Sub20209,in0Con52155], outputs=Ave86783)
in0Sub19242 = tf.constant([[[[0.2796, 0.45, 0.5833], [0.5526, 0.9584, 0.2421], [0.1778, 0.6684, 0.9261]], [[0.3133, 0.7554, 0.3397], [0.6387, 0.8556, 0.0969], [0.4683, 0.4821, 0.8272]]]])
in1Sub19242 = tf.constant([[[[0.425, 0.2492, 0.9404], [0.8489, 0.2543, 0.098], [0.0976, 0.2941, 0.3053]], [[0.8129, 0.8767, 0.1511], [0.7753, 0.9575, 0.2657], [0.4375, 0.3657, 0.5398]]]])
in0Up_32898 = tf.constant([[[1.4029, 1.1677], [1.8588, 1.6789], [1.8042, 1.1396], [1.7109, 1.1017]]])
in0Con90834 = tf.constant([[[0.8324, 0.182, 0.7172, 0.1197, 0.1102, 0.2588, 0.6394], [0.184, 0.5779, 0.9792, 0.9089, 0.755, 0.2468, 0.4453], [0.7179, 0.8665, 0.2523, 0.2993, 0.7435, 0.166, 0.5061], [0.7851, 0.759, 0.393, 0.0884, 0.2105, 0.1311, 0.0284]]])
in0Con98207 = tf.constant([[[0.1953, 0.9415, 0.3477, 0.5154, 0.0437], [0.1333, 0.9555, 0.3792, 0.0472, 0.8624], [0.2232, 0.1221, 0.3763, 0.8547, 0.7295], [0.8368, 0.2631, 0.5814, 0.8757, 0.5821]]])
in0Ave63823 = tf.constant([[[[[0.2028], [0.0918]], [[0.079], [0.992]]]]])
in1Ave63823 = tf.constant([[[[[0.4394], [0.1073]], [[0.9386], [0.9263]]]]])
in0Sub20209 = tf.constant([[[0.5955, 0.4895], [0.4634, 0.3738], [0.0909, 0.7224]]])
in1Sub20209 = tf.constant([[[0.6352, 0.5132], [0.7841, 0.54], [0.1348, 0.9228]]])
in0Con52155 = tf.constant([[[0.6288, 0.3649], [0.9681, 0.5972], [0.1794, 0.8638], [0.3253, 0.4295], [0.6254, 0.9779], [0.5287, 0.5639], [0.3897, 0.424], [0.5823, 0.4017], [0.8957, 0.0059], [0.9903, 0.2667], [0.9325, 0.4346], [0.9996, 0.3624], [0.0895, 0.8671], [0.9724, 0.0797]]])
print (np.array2string(model.predict([in0Sub19242,in1Sub19242,in0Up_32898,in0Con90834,in0Con98207,in0Ave63823,in1Ave63823,in0Sub20209,in1Sub20209,in0Con52155],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave86783.png')

LSub19242 = subtract_layer([[[[0.2796, 0.45, 0.5833], [0.5526, 0.9584, 0.2421], [0.1778, 0.6684, 0.9261]], [[0.3133, 0.7554, 0.3397], [0.6387, 0.8556, 0.0969], [0.4683, 0.4821, 0.8272]]]], [[[[0.425, 0.2492, 0.9404], [0.8489, 0.2543, 0.098], [0.0976, 0.2941, 0.3053]], [[0.8129, 0.8767, 0.1511], [0.7753, 0.9575, 0.2657], [0.4375, 0.3657, 0.5398]]]], Sub19242), 
LRes82291 = reshape_layer(Sub19242, [2, 9], Res82291), 
LZer61574 = zero_padding1D_layer(Res82291, 2, 0, Zer61574), 
LUp_32898 = up_sampling1D_layer([[[1.4029, 1.1677], [1.8588, 1.6789], [1.8042, 1.1396], [1.7109, 1.1017]]], 1, Up_32898), 
LCon90834 = concatenate_layer([Up_32898,[[[0.8324, 0.182, 0.7172, 0.1197, 0.1102, 0.2588, 0.6394], [0.184, 0.5779, 0.9792, 0.9089, 0.755, 0.2468, 0.4453], [0.7179, 0.8665, 0.2523, 0.2993, 0.7435, 0.166, 0.5061], [0.7851, 0.759, 0.393, 0.0884, 0.2105, 0.1311, 0.0284]]]], 2, Con90834), 
LMul63485 = multiply_layer([Zer61574,Con90834], Mul63485), 
LCon98207 = concatenate_layer([Mul63485,[[[0.1953, 0.9415, 0.3477, 0.5154, 0.0437], [0.1333, 0.9555, 0.3792, 0.0472, 0.8624], [0.2232, 0.1221, 0.3763, 0.8547, 0.7295], [0.8368, 0.2631, 0.5814, 0.8757, 0.5821]]]], 2, Con98207), 
LAve63823 = average_layer([[[[[[0.2028], [0.0918]], [[0.079], [0.992]]]]], [[[[[0.4394], [0.1073]], [[0.9386], [0.9263]]]]]], Ave63823), 
LRes60241 = reshape_layer(Ave63823, [1, 2, 2], Res60241), 
LRes7671 = reshape_layer(Res60241, [1, 4], Res7671), 
LZer19887 = zero_padding1D_layer(Res7671, 3, 0, Zer19887), 
LDot80012 = dot_layer(Con98207,Zer19887, 1, 1, Dot80012), 
LSub20209 = subtract_layer([[[0.5955, 0.4895], [0.4634, 0.3738], [0.0909, 0.7224]]], [[[0.6352, 0.5132], [0.7841, 0.54], [0.1348, 0.9228]]], Sub20209), 
LZer29561 = zero_padding1D_layer(Sub20209, 11, 0, Zer29561), 
LCon52155 = concatenate_layer([Zer29561,[[[0.6288, 0.3649], [0.9681, 0.5972], [0.1794, 0.8638], [0.3253, 0.4295], [0.6254, 0.9779], [0.5287, 0.5639], [0.3897, 0.424], [0.5823, 0.4017], [0.8957, 0.0059], [0.9903, 0.2667], [0.9325, 0.4346], [0.9996, 0.3624], [0.0895, 0.8671], [0.9724, 0.0797]]]], 2, Con52155), 
LAve86783 = average_layer([Dot80012,Con52155], Ave86783), 
exec_layers([LSub19242,LRes82291,LZer61574,LUp_32898,LCon90834,LMul63485,LCon98207,LAve63823,LRes60241,LRes7671,LZer19887,LDot80012,LSub20209,LZer29561,LCon52155,LAve86783],["Sub19242","Res82291","Zer61574","Up_32898","Con90834","Mul63485","Con98207","Ave63823","Res60241","Res7671","Zer19887","Dot80012","Sub20209","Zer29561","Con52155","Ave86783"],Ave86783,"Ave86783")

Actual (Unparsed): [[[-0.1372326, -0.0425460, 0.0969476, -0.2274742], [-0.0214553, -0.0066517, 0.4500530, 0.2345114], [0.0237726, 0.0073702, 0.1273690, 0.5029106], [-0.0166457, -0.0051606, 0.1362740, 0.1650280], [-0.0064295, -0.0019933, 0.3025121, 0.4697446], [-0.0023957, -0.0007427, 0.2605539, 0.2747938], [0.0010409, 0.0003227, 0.1964994, 0.2151093], [0.0024500, 0.0007596, 0.2950322, 0.2081683], [0.0013104, 0.0004063, 0.4499264, 0.0068644], [0.1343482, 0.0416517, 0.7080319, 0.5346583], [0.0422407, 0.0130958, 0.5331826, 0.3434762], [0.0734937, 0.0170892, 0.6477082, 0.4600249], [-0.0197564, -0.0395120, 0.2675281, 0.8535138], [0.0715061, -0.0712260, 0.6342862, 0.3190106]]]

Expected (Unparsed): [[[-0.13723262350199997,-0.04254595973099999,0.09694762118400002,-0.22747423180299992],[-0.02145529351550001,-0.006651742352750003,0.45005294817599995,0.23451141458924996],[0.023772616022999998,0.0073701772815,0.127368972384,0.5029106031095],[-0.016645727669999996,-0.005160642134999998,0.13627396064,0.165027951745],[-0.006429497685,-0.0019933244925,0.30251211951999996,0.4697446038475],[-0.0023957142560000005,-0.0007427385680000001,0.260553863552,0.27479382021599996],[0.0010409098699999998,0.0003227112349999999,0.19649937696,0.215109276555],[0.0024499994219999988,0.0007595684909999996,0.29503215417600004,0.208168333683],[0.0013104347880000006,0.00040627151400000016,0.449926453504,0.0068643678820000005],[0.13434824,0.041651719999999996,0.70803192,0.53465836],[0.042240704999999996,0.0130958025,0.53318264,0.3434761825],[0.07349377000000003,0.017089185000000003,0.6477081600000001,0.46002490500000004],[-0.019756365000000026,-0.0395120325,0.26752808,0.8535138275],[0.07150615499999999,-0.07122597249999996,0.63428624,0.31901060749999993]]]

Actual:   [[[-0.1372, -0.0425, 0.097, -0.2274], [-0.0214, -0.0066, 0.4501, 0.2346], [0.0238, 0.0074, 0.1274, 0.503], [-0.0166, -0.0051, 0.1363, 0.1651], [-0.0064, -0.0019, 0.3026, 0.4698], [-0.0023, -0.0007, 0.2606, 0.2748], [0.0011, 0.0004, 0.1965, 0.2152], [0.0025, 0.0008, 0.2951, 0.2082], [0.0014, 0.0005, 0.45, 0.0069], [0.1344, 0.0417, 0.7081, 0.5347], [0.0423, 0.0131, 0.5332, 0.3435], [0.0735, 0.0171, 0.6478, 0.4601], [-0.0197, -0.0395, 0.2676, 0.8536], [0.0716, -0.0712, 0.6343, 0.3191]]]

Expected: [[[-0.1372, -0.0425, 0.097, -0.2274], [-0.0214, -0.0066, 0.4501, 0.2346], [0.0238, 0.0074, 0.1274, 0.503], [-0.0166, -0.0051, 0.1363, 0.1651], [-0.0064, -0.0019, 0.3026, 0.4698], [-0.0023, -0.0007, 0.2606, 0.2748], [0.0011, 0.0004, 0.1965, 0.2152], [0.0025, 0.0008, 0.2951, 0.2082], [0.0014, 0.0005, 0.45, 0.0069], [0.1344, 0.0417, 0.7081, 0.5347], [0.0423, 0.0131, 0.5332, 0.3435], [0.0735, 0.0171, 0.6478, 0.4601], [-0.0197, -0.0395, 0.2676, 0.8536], [0.0716, -0.0712, 0.6343, 0.3191]]]