import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Min92003 = tf.keras.layers.Input(shape=([1, 2, 1]))
in1Min92003 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con44678 = tf.keras.layers.Input(shape=([2]))
in0Mas4563 = tf.keras.layers.Input(shape=([1, 2, 4]))

Min92003 = keras.layers.Minimum(name = 'Min92003', )([in0Min92003,in1Min92003])
Max70859 = keras.layers.MaxPool2D(pool_size=(1, 1), strides=(10, 1), padding='valid', name = 'Max70859', )(Min92003)
Res84116 = keras.layers.Reshape((1, 2), name = 'Res84116', )(Max70859)
Fla30277 = keras.layers.Flatten(name = 'Fla30277', )(Res84116)
Con44678 = keras.layers.Concatenate(axis=1, name = 'Con44678', )([Fla30277,in0Con44678])
Mas4563 = keras.layers.Masking(mask_value=1, name = 'Mas4563', )(in0Mas4563)
Dep79451 = keras.layers.DepthwiseConv2D((1, 2),strides=(1, 1), padding='same', name = 'Dep79451', )(Mas4563)
Res70139 = keras.layers.Reshape((1, 8), name = 'Res70139', )(Dep79451)
Con92036 = keras.layers.Conv1D(4, (1),strides=(2), padding='valid', dilation_rate=(1), name = 'Con92036', )(Res70139)
Fla32917 = keras.layers.Flatten(name = 'Fla32917', )(Con92036)
Min85163 = keras.layers.Minimum(name = 'Min85163', )([Con44678,Fla32917])
model = tf.keras.models.Model(inputs=[in0Min92003,in1Min92003,in0Con44678,in0Mas4563], outputs=Min85163)
w = model.get_layer('Dep79451').get_weights() 
w[0] = np.array([[[[0.78], [0.9833], [0.8559], [0.4611]], [[0.9878], [0.8583], [0.9437], [0.786]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Dep79451').set_weights(w) 
w = model.get_layer('Con92036').get_weights() 
w[0] = np.array([[[0.6211, 0.6499, 0.6577, 0.1255], [0.0654, 0.9318, 0.4953, 0.478], [0.2785, 0.038, 0.9429, 0.7272], [0.0874, 0.6454, 0.5754, 0.53], [0.4876, 0.1281, 0.0189, 0.8452], [0.156, 0.2711, 0.9121, 0.5576], [0.5366, 0.5706, 0.1293, 0.4214], [0.6629, 0.6803, 0.505, 0.9802]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con92036').set_weights(w) 
in0Min92003 = tf.constant([[[[0.2197], [0.736]]]])
in1Min92003 = tf.constant([[[[0.1396], [0.9752]]]])
in0Con44678 = tf.constant([[0.5119, 0.3115]])
in0Mas4563 = tf.constant([[[[1.6641, 1.4002, 1.2598, 1.833], [1.9049, 1.6785, 1.0713, 1.8598]]]])
print (np.array2string(model.predict([in0Min92003,in1Min92003,in0Con44678,in0Mas4563],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min85163.png')

LMin92003 = minimum_layer([[[[[0.2197], [0.736]]]], [[[[0.1396], [0.9752]]]]], Min92003), 
LMax70859 = max_pool2D_layer(Min92003, 1, 1, 10, 1, false, Max70859), 
LRes84116 = reshape_layer(Max70859, [1, 2], Res84116), 
LFla30277 = flatten_layer(Res84116, Fla30277), 
LCon44678 = concatenate_layer([Fla30277,[[0.5119, 0.3115]]], 1, Con44678), 
LMas4563 = masking_layer([[[[1.6641, 1.4002, 1.2598, 1.833], [1.9049, 1.6785, 1.0713, 1.8598]]]], 1, Mas4563), 
LDep79451 = depthwise_conv2D_layer(Mas4563, 1, 2,[[[[0.78], [0.9833], [0.8559], [0.4611]], [[0.9878], [0.8583], [0.9437], [0.786]]]],[0, 0, 0, 0], 1, 1, true, Dep79451), 
LRes70139 = reshape_layer(Dep79451, [1, 8], Res70139), 
LCon92036 = conv1D_layer(Res70139, 1,[[[0.6211, 0.6499, 0.6577, 0.1255], [0.0654, 0.9318, 0.4953, 0.478], [0.2785, 0.038, 0.9429, 0.7272], [0.0874, 0.6454, 0.5754, 0.53], [0.4876, 0.1281, 0.0189, 0.8452], [0.156, 0.2711, 0.9121, 0.5576], [0.5366, 0.5706, 0.1293, 0.4214], [0.6629, 0.6803, 0.505, 0.9802]]],[0, 0, 0, 0], 2, false, 1, Con92036), 
LFla32917 = flatten_layer(Con92036, Fla32917), 
LMin85163 = minimum_layer([Con44678,Fla32917], Min85163), 
exec_layers([LMin92003,LMax70859,LRes84116,LFla30277,LCon44678,LMas4563,LDep79451,LRes70139,LCon92036,LFla32917,LMin85163],["Min92003","Max70859","Res84116","Fla30277","Con44678","Mas4563","Dep79451","Res70139","Con92036","Fla32917","Min85163"],Min85163,"Min85163")

Actual (Unparsed): [[0.1396000, 0.7360000, 0.5119000, 0.3115000]]

Expected (Unparsed): [[0.1396,0.736,0.5119,0.3115]]

Actual:   [[0.1396, 0.736, 0.5119, 0.3115]]

Expected: [[0.1396, 0.736, 0.5119, 0.3115]]