import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Zer52430 = tf.keras.layers.Input(shape=([2, 2, 1, 2]))
in0Loc38742 = tf.keras.layers.Input(shape=([1, 2, 1]))
in0Con70225 = tf.keras.layers.Input(shape=([4, 4, 4]))
in0PRe57674 = tf.keras.layers.Input(shape=([2, 1]))
in0Con85647 = tf.keras.layers.Input(shape=([2, 3]))
in0Ave1436 = tf.keras.layers.Input(shape=([2, 1]))
in0Con8512 = tf.keras.layers.Input(shape=([2, 3]))
in0Con40005 = tf.keras.layers.Input(shape=([2, 1]))
in0Con1371 = tf.keras.layers.Input(shape=([4, 20]))

Zer52430 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer52430', )(in0Zer52430)
Res88641 = keras.layers.Reshape((4, 4, 6), name = 'Res88641', )(Zer52430)
Loc38742 = keras.layers.LocallyConnected2D(2, (1, 2),strides=(1, 1), name = 'Loc38742', )(in0Loc38742)
Zer97989 = keras.layers.ZeroPadding2D(padding=((3, 0), (3, 0)), name = 'Zer97989', )(Loc38742)
Con70225 = keras.layers.Concatenate(axis=3, name = 'Con70225', )([Zer97989,in0Con70225])
Mul18075 = keras.layers.Multiply(name = 'Mul18075', )([Res88641,Con70225])
Res55953 = keras.layers.Reshape((4, 24), name = 'Res55953', )(Mul18075)
PRe57674 = keras.layers.PReLU(name = 'PRe57674', input_shape=(2, 1))(in0PRe57674)
Up_77521 = keras.layers.UpSampling1D(size=(1), name = 'Up_77521', )(PRe57674)
Con85647 = keras.layers.Concatenate(axis=2, name = 'Con85647', )([Up_77521,in0Con85647])
Ave1436 = keras.layers.AveragePooling1D(pool_size=(1), name = 'Ave1436', )(in0Ave1436)
Con8512 = keras.layers.Concatenate(axis=2, name = 'Con8512', )([Ave1436,in0Con8512])
Con40005 = keras.layers.Conv1D(4, (2),strides=(9), padding='valid', dilation_rate=(1), name = 'Con40005', )(in0Con40005)
Zer29269 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer29269', )(Con40005)
Sub15413 = keras.layers.Subtract(name = 'Sub15413', )([Con8512,Zer29269])
Mul25653 = keras.layers.Multiply(name = 'Mul25653', )([Con85647,Sub15413])
Zer76935 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer76935', )(Mul25653)
Con1371 = keras.layers.Concatenate(axis=2, name = 'Con1371', )([Zer76935,in0Con1371])
Min87031 = keras.layers.Minimum(name = 'Min87031', )([Res55953,Con1371])
Cro69558 = keras.layers.Cropping1D(cropping=((0, 0)), name = 'Cro69558', )(Min87031)
model = tf.keras.models.Model(inputs=[in0Zer52430,in0Loc38742,in0Con70225,in0PRe57674,in0Con85647,in0Ave1436,in0Con8512,in0Con40005,in0Con1371], outputs=Cro69558)
w = model.get_layer('Loc38742').get_weights() 
w[0] = np.array([[[0.3624, 0.8055], [0.0488, 0.9019]]])
w[1] = np.array([[[0, 0]]])
model.get_layer('Loc38742').set_weights(w) 
w = model.get_layer('PRe57674').get_weights() 
w[0] = np.array([[0.2283], [0.1072]])
model.get_layer('PRe57674').set_weights(w) 
w = model.get_layer('Con40005').get_weights() 
w[0] = np.array([[[0.9445, 0.1684, 0.543, 0.7087]], [[0.9867, 0.7509, 0.4369, 0.189]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con40005').set_weights(w) 
in0Zer52430 = tf.constant([[[[[1.3995, 1.0877]], [[1.1978, 1.4646]]], [[[1.0157, 1.4109]], [[1.9838, 1.8634]]]]])
in0Loc38742 = tf.constant([[[[0.3788], [0.4307]]]])
in0Con70225 = tf.constant([[[[0.9421, 0.3043, 0.0085, 0.9992], [0.0817, 0.7978, 0.7649, 0.4008], [0.342, 0.7343, 0.5839, 0.3262], [0.4959, 0.5894, 0.3909, 0.2668]], [[0.049, 0.2673, 0.1211, 0.9403], [0.5894, 0.063, 0.4818, 0.9193], [0.1617, 0.4311, 0.1415, 0.3512], [0.2781, 0.6851, 0.4547, 0.2888]], [[0.994, 0.6714, 0.413, 0.4532], [0.0704, 0.4039, 0.3711, 0.0905], [0.62, 0.6252, 0.2396, 0.9497], [0.7921, 0.2686, 0.2578, 0.3101]], [[0.99, 0.8357, 0.1658, 0.4165], [0.8346, 0.7735, 0.5784, 0.6428], [0.5868, 0.0408, 0.6307, 0.1963], [0.0266, 0.184, 0.5154, 0.2028]]]])
in0PRe57674 = tf.constant([[[0.0468], [0.3892]]])
in0Con85647 = tf.constant([[[0.5174, 0.9421, 0.423], [0.8105, 0.9791, 0.5167]]])
in0Ave1436 = tf.constant([[[1.1129], [1.8872]]])
in0Con8512 = tf.constant([[[0.6329, 0.1434, 0.0694], [0.3525, 0.3309, 0.0402]]])
in0Con40005 = tf.constant([[[0.4308], [0.3646]]])
in0Con1371 = tf.constant([[[0.2281, 0.2376, 0.2184, 0.5499, 0.4231, 0.0842, 0.5296, 0.1803, 0.8314, 0.5084, 0.9373, 0.5731, 0.9236, 0.4112, 0.7658, 0.4388, 0.2382, 0.3343, 0.6679, 0.9388], [0.0186, 0.9443, 0.3323, 0.283, 0.8986, 0.6853, 0.9892, 0.5397, 0.2149, 0.5416, 0.644, 0.4043, 0.6696, 0.2194, 0.123, 0.682, 0.4889, 0.9573, 0.9585, 0.2806], [0.9263, 0.6047, 0.8556, 0.5795, 0.9459, 0.5703, 0.9872, 0.1445, 0.1859, 0.7349, 0.6445, 0.8911, 0.8534, 0.4472, 0.834, 0.965, 0.0272, 0.2794, 0.2569, 0.8036], [0.9574, 0.302, 0.7333, 0.0709, 0.3435, 0.2592, 0.5384, 0.4159, 0.242, 0.1733, 0.3111, 0.296, 0.2122, 0.5897, 0.1591, 0.4269, 0.5426, 0.8818, 0.3411, 0.7736]]])
print (np.array2string(model.predict([in0Zer52430,in0Loc38742,in0Con70225,in0PRe57674,in0Con85647,in0Ave1436,in0Con8512,in0Con40005,in0Con1371],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Cro69558.png')

LZer52430 = zero_padding3D_layer([[[[[1.3995, 1.0877]], [[1.1978, 1.4646]]], [[[1.0157, 1.4109]], [[1.9838, 1.8634]]]]], 1, 1, 1, 1, 1, 1, Zer52430), 
LRes88641 = reshape_layer(Zer52430, [4, 4, 6], Res88641), 
LLoc38742 = locally_connected2D_layer([[[[0.3788], [0.4307]]]], 1, 2,[[[0.3624, 0.8055], [0.0488, 0.9019]]],[[[0, 0]]], 1, 1, Loc38742), 
LZer97989 = zero_padding2D_layer(Loc38742, 3, 0, 3, 0, Zer97989), 
LCon70225 = concatenate_layer([Zer97989,[[[[0.9421, 0.3043, 0.0085, 0.9992], [0.0817, 0.7978, 0.7649, 0.4008], [0.342, 0.7343, 0.5839, 0.3262], [0.4959, 0.5894, 0.3909, 0.2668]], [[0.049, 0.2673, 0.1211, 0.9403], [0.5894, 0.063, 0.4818, 0.9193], [0.1617, 0.4311, 0.1415, 0.3512], [0.2781, 0.6851, 0.4547, 0.2888]], [[0.994, 0.6714, 0.413, 0.4532], [0.0704, 0.4039, 0.3711, 0.0905], [0.62, 0.6252, 0.2396, 0.9497], [0.7921, 0.2686, 0.2578, 0.3101]], [[0.99, 0.8357, 0.1658, 0.4165], [0.8346, 0.7735, 0.5784, 0.6428], [0.5868, 0.0408, 0.6307, 0.1963], [0.0266, 0.184, 0.5154, 0.2028]]]]], 3, Con70225), 
LMul18075 = multiply_layer([Res88641,Con70225], Mul18075), 
LRes55953 = reshape_layer(Mul18075, [4, 24], Res55953), 
LPRe57674 = prelu_layer([[[0.0468], [0.3892]]], [[0.2283], [0.1072]], PRe57674), 
LUp_77521 = up_sampling1D_layer(PRe57674, 1, Up_77521), 
LCon85647 = concatenate_layer([Up_77521,[[[0.5174, 0.9421, 0.423], [0.8105, 0.9791, 0.5167]]]], 2, Con85647), 
LAve1436 = average_pooling1D_layer([[[1.1129], [1.8872]]], 1, Ave1436), 
LCon8512 = concatenate_layer([Ave1436,[[[0.6329, 0.1434, 0.0694], [0.3525, 0.3309, 0.0402]]]], 2, Con8512), 
LCon40005 = conv1D_layer([[[0.4308], [0.3646]]], 2,[[[0.9445, 0.1684, 0.543, 0.7087]], [[0.9867, 0.7509, 0.4369, 0.189]]],[0, 0, 0, 0], 9, false, 1, Con40005), 
LZer29269 = zero_padding1D_layer(Con40005, 1, 0, Zer29269), 
LSub15413 = subtract_layer(Con8512,Zer29269, Sub15413), 
LMul25653 = multiply_layer([Con85647,Sub15413], Mul25653), 
LZer76935 = zero_padding1D_layer(Mul25653, 2, 0, Zer76935), 
LCon1371 = concatenate_layer([Zer76935,[[[0.2281, 0.2376, 0.2184, 0.5499, 0.4231, 0.0842, 0.5296, 0.1803, 0.8314, 0.5084, 0.9373, 0.5731, 0.9236, 0.4112, 0.7658, 0.4388, 0.2382, 0.3343, 0.6679, 0.9388], [0.0186, 0.9443, 0.3323, 0.283, 0.8986, 0.6853, 0.9892, 0.5397, 0.2149, 0.5416, 0.644, 0.4043, 0.6696, 0.2194, 0.123, 0.682, 0.4889, 0.9573, 0.9585, 0.2806], [0.9263, 0.6047, 0.8556, 0.5795, 0.9459, 0.5703, 0.9872, 0.1445, 0.1859, 0.7349, 0.6445, 0.8911, 0.8534, 0.4472, 0.834, 0.965, 0.0272, 0.2794, 0.2569, 0.8036], [0.9574, 0.302, 0.7333, 0.0709, 0.3435, 0.2592, 0.5384, 0.4159, 0.242, 0.1733, 0.3111, 0.296, 0.2122, 0.5897, 0.1591, 0.4269, 0.5426, 0.8818, 0.3411, 0.7736]]]], 2, Con1371), 
LMin87031 = minimum_layer([Res55953,Con1371], Min87031), 
LCro69558 = cropping1D_layer(Min87031, 0, 0, Cro69558), 
exec_layers([LZer52430,LRes88641,LLoc38742,LZer97989,LCon70225,LMul18075,LRes55953,LPRe57674,LUp_77521,LCon85647,LAve1436,LCon8512,LCon40005,LZer29269,LSub15413,LMul25653,LZer76935,LCon1371,LMin87031,LCro69558],["Zer52430","Res88641","Loc38742","Zer97989","Con70225","Mul18075","Res55953","PRe57674","Up_77521","Con85647","Ave1436","Con8512","Con40005","Zer29269","Sub15413","Mul25653","Zer76935","Con1371","Min87031","Cro69558"],Cro69558,"Cro69558")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.8248653, 0.0685251, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.1936843, 0.4043000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0715053, 0.5698625, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.6445000, 0.8911000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, -0.0610157, -0.1725868, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0,0,0.0,0.0,0.0,0.0,0,0,0.0,0.0,0.0,0.0,0,0,0.0,0.0,0.0,0.0,0,0,0.0,0.0,0.0,0.0],[0,0,0.0,0.0,0.0,0.0,0,0,0.8248653,0.06852509999999999,0.0,0.0,0,0,0.19368426,0.4043,0.0,0.0,0,0,0.0,0.0,0.0,0.0],[0,0,0.0,0.0,0.0,0.0,0,0,0.07150528,0.56986251,0.0,0.0,0,0,0.6445,0.8911,0.0,0.0,0,0,0.0,0.0,0.0,0.0],[0,0,-0.06101569087399997,-0.172586769912,0.0,0.0,0,0,0.0,0.0,0.0,0.0,0,0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]]]

Actual:   [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0.8249, 0.0686, 0, 0, 0, 0, 0.1937, 0.4043, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0.0716, 0.5699, 0, 0, 0, 0, 0.6445, 0.8911, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -0.061, -0.1725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]

Expected: [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0.8249, 0.0686, 0, 0, 0, 0, 0.1937, 0.4043, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0.0716, 0.5699, 0, 0, 0, 0, 0.6445, 0.8911, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, -0.061, -0.1725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]