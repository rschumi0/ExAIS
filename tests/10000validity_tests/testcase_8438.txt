import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot2441 = tf.keras.layers.Input(shape=([2]))
in1Dot2441 = tf.keras.layers.Input(shape=([2]))
in0Con6487 = tf.keras.layers.Input(shape=([2, 3, 8]))
in0Min93893 = tf.keras.layers.Input(shape=([1, 1]))
in1Min93893 = tf.keras.layers.Input(shape=([1, 1]))
in0Con70067 = tf.keras.layers.Input(shape=([2, 3, 3, 2]))
in0Con81986 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Min40072 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in1Min40072 = tf.keras.layers.Input(shape=([1, 2, 1, 1]))
in0Max32020 = tf.keras.layers.Input(shape=([2, 1]))
in1Max32020 = tf.keras.layers.Input(shape=([2, 1]))
in0Ave78609 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Ave78609 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con98031 = tf.keras.layers.Input(shape=([2, 3, 8]))

Dot2441 = keras.layers.Dot(axes=(1, 1), name = 'Dot2441', )([in0Dot2441,in1Dot2441])
Res8903 = keras.layers.Reshape((1, 1), name = 'Res8903', )(Dot2441)
Res85683 = keras.layers.Reshape((1, 1, 1), name = 'Res85683', )(Res8903)
Zer73879 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer73879', )(Res85683)
Con6487 = keras.layers.Concatenate(axis=3, name = 'Con6487', )([Zer73879,in0Con6487])
Min93893 = keras.layers.Minimum(name = 'Min93893', )([in0Min93893,in1Min93893])
Res52253 = keras.layers.Reshape((1, 1, 1), name = 'Res52253', )(Min93893)
Res45906 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res45906', )(Res52253)
Zer21883 = keras.layers.ZeroPadding3D(padding=((1, 0), (2, 0), (2, 0)), name = 'Zer21883', )(Res45906)
Con70067 = keras.layers.Concatenate(axis=4, name = 'Con70067', )([Zer21883,in0Con70067])
Con81986 = keras.layers.Conv3DTranspose(3, (1, 2, 2),strides=(1, 1, 1), padding='valid', name = 'Con81986', )(in0Con81986)
Max39322 = keras.layers.Maximum(name = 'Max39322', )([Con70067,Con81986])
Res4252 = keras.layers.Reshape((2, 3, 9), name = 'Res4252', )(Max39322)
Min40072 = keras.layers.Minimum(name = 'Min40072', )([in0Min40072,in1Min40072])
Res67764 = keras.layers.Reshape((1, 2, 1), name = 'Res67764', )(Min40072)
Zer53737 = keras.layers.ZeroPadding2D(padding=((1, 0), (1, 0)), name = 'Zer53737', )(Res67764)
Max32020 = keras.layers.Maximum(name = 'Max32020', )([in0Max32020,in1Max32020])
Res9563 = keras.layers.Reshape((2, 1, 1), name = 'Res9563', )(Max32020)
Ave78609 = keras.layers.Average(name = 'Ave78609', )([in0Ave78609,in1Ave78609])
Zer64394 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer64394', )(Ave78609)
Ave41595 = keras.layers.Average(name = 'Ave41595', )([Res9563,Zer64394])
Zer4178 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer4178', )(Ave41595)
Min95758 = keras.layers.Minimum(name = 'Min95758', )([Zer53737,Zer4178])
Con98031 = keras.layers.Concatenate(axis=3, name = 'Con98031', )([Min95758,in0Con98031])
Ave54579 = keras.layers.Average(name = 'Ave54579', )([Res4252,Con98031])
Add38816 = keras.layers.Add(name = 'Add38816', )([Con6487,Ave54579])
model = tf.keras.models.Model(inputs=[in0Dot2441,in1Dot2441,in0Con6487,in0Min93893,in1Min93893,in0Con70067,in0Con81986,in0Min40072,in1Min40072,in0Max32020,in1Max32020,in0Ave78609,in1Ave78609,in0Con98031], outputs=Add38816)
w = model.get_layer('Con81986').get_weights() 
w[0] = np.array([[[[[0.4211], [0.1989], [0.0249]], [[0.6155], [0.8972], [0.4849]]], [[[0.0683], [0.8343], [0.1771]], [[0.1131], [0.0254], [0.7679]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con81986').set_weights(w) 
in0Dot2441 = tf.constant([[0.6936, 0.0668]])
in1Dot2441 = tf.constant([[0.5636, 0.8955]])
in0Con6487 = tf.constant([[[[0.8638, 0.907, 0.9806, 0.2043, 0.6089, 0.3519, 0.9457, 0.4866], [0.1213, 0.4147, 0.1604, 0.2325, 0.8163, 0.3466, 0.4849, 0.3127], [0.8875, 0.9824, 0.2721, 0.6038, 0.2939, 0.8229, 0.6178, 0.4652]], [[0.3312, 0.7431, 0.9841, 0.2928, 0.0806, 0.5416, 0.0661, 0.1652], [0.7838, 0.3102, 0.3521, 0.3158, 0.8492, 0.5225, 0.8201, 0.5317], [0.7696, 0.8143, 0.6069, 0.6139, 0.696, 0.6606, 0.2883, 0.714]]]])
in0Min93893 = tf.constant([[[0.1925]]])
in1Min93893 = tf.constant([[[0.4374]]])
in0Con70067 = tf.constant([[[[[0.7408, 0.9176], [0.8956, 0.5795], [0.6413, 0.3396]], [[0.8833, 0.8945], [0.0594, 0.7876], [0.5191, 0.4201]], [[0.1434, 0.0832], [0.3012, 0.1343], [0.1253, 0.3845]]], [[[0.1986, 0.7633], [0.207, 0.987], [0.3009, 0.1977]], [[0.6229, 0.867], [0.2171, 0.0142], [0.7989, 0.3644]], [[0.3073, 0.2339], [0.8989, 0.9682], [0.9103, 0.839]]]]])
in0Con81986 = tf.constant([[[[[0.1324], [0.4209]], [[0.4944], [0.3828]]], [[[0.2057], [0.8819]], [[0.0083], [0.3922]]]]])
in0Min40072 = tf.constant([[[[[0.6153]], [[0.0087]]]]])
in1Min40072 = tf.constant([[[[[0.0498]], [[0.8535]]]]])
in0Max32020 = tf.constant([[[0.771], [0.692]]])
in1Max32020 = tf.constant([[[0.8902], [0.7707]]])
in0Ave78609 = tf.constant([[[[0.018]]]])
in1Ave78609 = tf.constant([[[[0.1625]]]])
in0Con98031 = tf.constant([[[[0.2928, 0.4987, 0.1425, 0.8452, 0.208, 0.9837, 0.2811, 0.5503], [0.0998, 0.0141, 0.1791, 0.8115, 0.2898, 0.4815, 0.231, 0.0441], [0.8103, 0.6988, 0.9692, 0.4171, 0.3711, 0.3607, 0.5752, 0.0068]], [[0.9011, 0.0083, 0.973, 0.8042, 0.6335, 0.8239, 0.8041, 0.3611], [0.0266, 0.2247, 0.8617, 0.5803, 0.2976, 0.7768, 0.4955, 0.7889], [0.9799, 0.4089, 0.0904, 0.766, 0.7121, 0.77, 0.968, 0.8424]]]])
print (np.array2string(model.predict([in0Dot2441,in1Dot2441,in0Con6487,in0Min93893,in1Min93893,in0Con70067,in0Con81986,in0Min40072,in1Min40072,in0Max32020,in1Max32020,in0Ave78609,in1Ave78609,in0Con98031],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add38816.png')

LDot2441 = dot_layer([[0.6936, 0.0668]], [[0.5636, 0.8955]], 1, 1, Dot2441), 
LRes8903 = reshape_layer(Dot2441, [1, 1], Res8903), 
LRes85683 = reshape_layer(Res8903, [1, 1, 1], Res85683), 
LZer73879 = zero_padding2D_layer(Res85683, 1, 0, 2, 0, Zer73879), 
LCon6487 = concatenate_layer([Zer73879,[[[[0.8638, 0.907, 0.9806, 0.2043, 0.6089, 0.3519, 0.9457, 0.4866], [0.1213, 0.4147, 0.1604, 0.2325, 0.8163, 0.3466, 0.4849, 0.3127], [0.8875, 0.9824, 0.2721, 0.6038, 0.2939, 0.8229, 0.6178, 0.4652]], [[0.3312, 0.7431, 0.9841, 0.2928, 0.0806, 0.5416, 0.0661, 0.1652], [0.7838, 0.3102, 0.3521, 0.3158, 0.8492, 0.5225, 0.8201, 0.5317], [0.7696, 0.8143, 0.6069, 0.6139, 0.696, 0.6606, 0.2883, 0.714]]]]], 3, Con6487), 
LMin93893 = minimum_layer([[[[0.1925]]], [[[0.4374]]]], Min93893), 
LRes52253 = reshape_layer(Min93893, [1, 1, 1], Res52253), 
LRes45906 = reshape_layer(Res52253, [1, 1, 1, 1], Res45906), 
LZer21883 = zero_padding3D_layer(Res45906, 1, 0, 2, 0, 2, 0, Zer21883), 
LCon70067 = concatenate_layer([Zer21883,[[[[[0.7408, 0.9176], [0.8956, 0.5795], [0.6413, 0.3396]], [[0.8833, 0.8945], [0.0594, 0.7876], [0.5191, 0.4201]], [[0.1434, 0.0832], [0.3012, 0.1343], [0.1253, 0.3845]]], [[[0.1986, 0.7633], [0.207, 0.987], [0.3009, 0.1977]], [[0.6229, 0.867], [0.2171, 0.0142], [0.7989, 0.3644]], [[0.3073, 0.2339], [0.8989, 0.9682], [0.9103, 0.839]]]]]], 4, Con70067), 
LCon81986 = conv3D_transpose_layer([[[[[0.1324], [0.4209]], [[0.4944], [0.3828]]], [[[0.2057], [0.8819]], [[0.0083], [0.3922]]]]], 1, 2, 2,[[[[[0.4211], [0.1989], [0.0249]], [[0.6155], [0.8972], [0.4849]]], [[[0.0683], [0.8343], [0.1771]], [[0.1131], [0.0254], [0.7679]]]]],[0, 0, 0], 1, 1, 1, false, Con81986), 
LMax39322 = maximum_layer([Con70067,Con81986], Max39322), 
LRes4252 = reshape_layer(Max39322, [2, 3, 9], Res4252), 
LMin40072 = minimum_layer([[[[[[0.6153]], [[0.0087]]]]], [[[[[0.0498]], [[0.8535]]]]]], Min40072), 
LRes67764 = reshape_layer(Min40072, [1, 2, 1], Res67764), 
LZer53737 = zero_padding2D_layer(Res67764, 1, 0, 1, 0, Zer53737), 
LMax32020 = maximum_layer([[[[0.771], [0.692]]], [[[0.8902], [0.7707]]]], Max32020), 
LRes9563 = reshape_layer(Max32020, [2, 1, 1], Res9563), 
LAve78609 = average_layer([[[[[0.018]]]], [[[[0.1625]]]]], Ave78609), 
LZer64394 = zero_padding2D_layer(Ave78609, 1, 0, 0, 0, Zer64394), 
LAve41595 = average_layer([Res9563,Zer64394], Ave41595), 
LZer4178 = zero_padding2D_layer(Ave41595, 0, 0, 2, 0, Zer4178), 
LMin95758 = minimum_layer([Zer53737,Zer4178], Min95758), 
LCon98031 = concatenate_layer([Min95758,[[[[0.2928, 0.4987, 0.1425, 0.8452, 0.208, 0.9837, 0.2811, 0.5503], [0.0998, 0.0141, 0.1791, 0.8115, 0.2898, 0.4815, 0.231, 0.0441], [0.8103, 0.6988, 0.9692, 0.4171, 0.3711, 0.3607, 0.5752, 0.0068]], [[0.9011, 0.0083, 0.973, 0.8042, 0.6335, 0.8239, 0.8041, 0.3611], [0.0266, 0.2247, 0.8617, 0.5803, 0.2976, 0.7768, 0.4955, 0.7889], [0.9799, 0.4089, 0.0904, 0.766, 0.7121, 0.77, 0.968, 0.8424]]]]], 3, Con98031), 
LAve54579 = average_layer([Res4252,Con98031], Ave54579), 
LAdd38816 = add_layer([Con6487,Ave54579], Add38816), 
exec_layers([LDot2441,LRes8903,LRes85683,LZer73879,LCon6487,LMin93893,LRes52253,LRes45906,LZer21883,LCon70067,LCon81986,LMax39322,LRes4252,LMin40072,LRes67764,LZer53737,LMax32020,LRes9563,LAve78609,LZer64394,LAve41595,LZer4178,LMin95758,LCon98031,LAve54579,LAdd38816],["Dot2441","Res8903","Res85683","Zer73879","Con6487","Min93893","Res52253","Res45906","Zer21883","Con70067","Con81986","Max39322","Res4252","Min40072","Res67764","Zer53737","Max32020","Res9563","Ave78609","Zer64394","Ave41595","Zer4178","Min95758","Con98031","Ave54579","Add38816"],Add38816,"Add38816")

Actual (Unparsed): [[[[0.0278768, 1.3806000, 1.6151500, 1.1812166, 1.0747000, 1.0026500, 0.9732820, 1.4069000, 0.9315500], [0.1086174, 0.6128500, 0.8690000, 0.5045611, 1.0753672, 1.3550000, 0.7289586, 0.8599500, 0.5891644], [0.0168838, 1.4988889, 1.3755791, 0.7977309, 0.9783139, 0.7031718, 1.0248973, 0.9680500, 0.6608500]], [[0.0433101, 0.8810500, 1.1289000, 1.7195882, 0.8748820, 0.8908500, 1.2249547, 0.8637703, 0.5595666], [0.0087722, 1.1085500, 0.8560500, 0.9098313, 1.0191746, 1.1619660, 1.0814710, 1.4673000, 1.3598444], [0.4553658, 1.4132000, 1.1357000, 0.6659630, 1.4463500, 1.5361500, 1.1418500, 1.2274500, 1.5547000]]]]

Expected (Unparsed): [[[[0.027876819999999997,1.3806,1.6151499999999999,1.181216595,1.0747,1.00265,0.973281975,1.4069,0.93155],[0.10861738,0.61285,0.869,0.504561095,1.075367215,1.355,0.728958595,0.85995,0.5891644149999999],[0.01688376,1.49888896,1.37557912,0.79773094,0.9783139,0.70317182,1.0248973399999999,0.9680500000000001,0.6608499999999999]],[[0.04331013499999999,0.8810499999999999,1.1289,1.71958822,0.8748819750000001,0.8908499999999999,1.224954725,0.8637703400000001,0.559566655],[0.008772219999999999,1.1085500000000001,0.85605,0.9098312550000001,1.019174645,1.161965985,1.081470995,1.4673,1.359844395],[0.45536580499999996,1.4131999999999998,1.1357,0.665962995,1.44635,1.53615,1.14185,1.22745,1.5547]]]]

Actual:   [[[[0.0279, 1.3806, 1.6152, 1.1813, 1.0747, 1.0027, 0.9733, 1.4069, 0.9316], [0.1087, 0.6129, 0.869, 0.5046, 1.0754, 1.355, 0.729, 0.86, 0.5892], [0.0169, 1.4989, 1.3756, 0.7978, 0.9784, 0.7032, 1.0249, 0.9681, 0.6609]], [[0.0434, 0.8811, 1.1289, 1.7196, 0.8749, 0.8909, 1.225, 0.8638, 0.5596], [0.0088, 1.1086, 0.8561, 0.9099, 1.0192, 1.162, 1.0815, 1.4673, 1.3599], [0.4554, 1.4132, 1.1357, 0.666, 1.4464, 1.5362, 1.1419, 1.2275, 1.5547]]]]

Expected: [[[[0.0279, 1.3806, 1.6152, 1.1813, 1.0747, 1.0027, 0.9733, 1.4069, 0.9316], [0.1087, 0.6129, 0.869, 0.5046, 1.0754, 1.355, 0.729, 0.86, 0.5892], [0.0169, 1.4989, 1.3756, 0.7978, 0.9784, 0.7032, 1.0249, 0.9681, 0.6609]], [[0.0434, 0.8811, 1.1289, 1.7196, 0.8749, 0.8909, 1.225, 0.8638, 0.5596], [0.0088, 1.1086, 0.8561, 0.9099, 1.0192, 1.162, 1.0815, 1.4673, 1.3599], [0.4554, 1.4132, 1.1357, 0.666, 1.4464, 1.5362, 1.1419, 1.2275, 1.5547]]]]