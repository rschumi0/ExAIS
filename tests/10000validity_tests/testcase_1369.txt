import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Dot94967 = tf.keras.layers.Input(shape=([3, 3]))
in1Dot94967 = tf.keras.layers.Input(shape=([3, 3]))
in0Dot11007 = tf.keras.layers.Input(shape=([2, 2]))
in1Dot11007 = tf.keras.layers.Input(shape=([2, 2]))
in0Con70508 = tf.keras.layers.Input(shape=([3, 1]))
in0Con33198 = tf.keras.layers.Input(shape=([2, 3, 2]))
in0Sub93353 = tf.keras.layers.Input(shape=([2, 3, 3]))
in1Sub93353 = tf.keras.layers.Input(shape=([2, 3, 3]))

Dot94967 = keras.layers.Dot(axes=(1, 2), name = 'Dot94967', )([in0Dot94967,in1Dot94967])
Dot11007 = keras.layers.Dot(axes=(1, 2), name = 'Dot11007', )([in0Dot11007,in1Dot11007])
Zer92257 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer92257', )(Dot11007)
Con70508 = keras.layers.Concatenate(axis=2, name = 'Con70508', )([Zer92257,in0Con70508])
Mul8778 = keras.layers.Multiply(name = 'Mul8778', )([Dot94967,Con70508])
Res31508 = keras.layers.Reshape((3, 3, 1), name = 'Res31508', )(Mul8778)
Glo94250 = keras.layers.GlobalMaxPool2D(name = 'Glo94250', )(Res31508)
Res11359 = keras.layers.Reshape((1, 1), name = 'Res11359', )(Glo94250)
Res668 = keras.layers.Reshape((1, 1, 1), name = 'Res668', )(Res11359)
Zer62159 = keras.layers.ZeroPadding2D(padding=((1, 0), (2, 0)), name = 'Zer62159', )(Res668)
Con33198 = keras.layers.Concatenate(axis=3, name = 'Con33198', )([Zer62159,in0Con33198])
Sub93353 = keras.layers.Subtract(name = 'Sub93353', )([in0Sub93353,in1Sub93353])
Ave68948 = keras.layers.Average(name = 'Ave68948', )([Con33198,Sub93353])
model = tf.keras.models.Model(inputs=[in0Dot94967,in1Dot94967,in0Dot11007,in1Dot11007,in0Con70508,in0Con33198,in0Sub93353,in1Sub93353], outputs=Ave68948)
in0Dot94967 = tf.constant([[[0.035, 0.8269, 0.2261], [0.5244, 0.1628, 0.1932], [0.0374, 0.1361, 0.1285]]])
in1Dot94967 = tf.constant([[[0.4845, 0.4816, 0.6988], [0.0715, 0.9152, 0.1042], [0.7015, 0.7278, 0.2364]]])
in0Dot11007 = tf.constant([[[0.6712, 0.1138], [0.5016, 0.9052]]])
in1Dot11007 = tf.constant([[[0.3227, 0.1274], [0.7722, 0.2561]]])
in0Con70508 = tf.constant([[[0.2195], [0.2991], [0.9171]]])
in0Con33198 = tf.constant([[[[0.3267, 0.2831], [0.074, 0.1316], [0.846, 0.1737]], [[0.3816, 0.6951], [0.3312, 0.0031], [0.0251, 0.3897]]]])
in0Sub93353 = tf.constant([[[[0.3027, 0.159, 0.5561], [0.5888, 0.5014, 0.8415], [0.1701, 0.064, 0.7817]], [[0.0336, 0.7301, 0.1768], [0.9476, 0.584, 0.1559], [0.3622, 0.2569, 0.7032]]]])
in1Sub93353 = tf.constant([[[[0.8548, 0.9842, 0.5789], [0.3128, 0.4051, 0.5527], [0.6587, 0.6727, 0.3735]], [[0.5214, 0.4558, 0.9178], [0.8656, 0.4302, 0.2006], [0.8738, 0.5293, 0.4714]]]])
print (np.array2string(model.predict([in0Dot94967,in1Dot94967,in0Dot11007,in1Dot11007,in0Con70508,in0Con33198,in0Sub93353,in1Sub93353],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave68948.png')

LDot94967 = dot_layer([[[0.035, 0.8269, 0.2261], [0.5244, 0.1628, 0.1932], [0.0374, 0.1361, 0.1285]]], [[[0.4845, 0.4816, 0.6988], [0.0715, 0.9152, 0.1042], [0.7015, 0.7278, 0.2364]]], 1, 2, Dot94967), 
LDot11007 = dot_layer([[[0.6712, 0.1138], [0.5016, 0.9052]]], [[[0.3227, 0.1274], [0.7722, 0.2561]]], 1, 2, Dot11007), 
LZer92257 = zero_padding1D_layer(Dot11007, 1, 0, Zer92257), 
LCon70508 = concatenate_layer([Zer92257,[[[0.2195], [0.2991], [0.9171]]]], 2, Con70508), 
LMul8778 = multiply_layer([Dot94967,Con70508], Mul8778), 
LRes31508 = reshape_layer(Mul8778, [3, 3, 1], Res31508), 
LGlo94250 = global_max_pool2D_layer(Res31508, Glo94250), 
LRes11359 = reshape_layer(Glo94250, [1, 1], Res11359), 
LRes668 = reshape_layer(Res11359, [1, 1, 1], Res668), 
LZer62159 = zero_padding2D_layer(Res668, 1, 0, 2, 0, Zer62159), 
LCon33198 = concatenate_layer([Zer62159,[[[[0.3267, 0.2831], [0.074, 0.1316], [0.846, 0.1737]], [[0.3816, 0.6951], [0.3312, 0.0031], [0.0251, 0.3897]]]]], 3, Con33198), 
LSub93353 = subtract_layer([[[[0.3027, 0.159, 0.5561], [0.5888, 0.5014, 0.8415], [0.1701, 0.064, 0.7817]], [[0.0336, 0.7301, 0.1768], [0.9476, 0.584, 0.1559], [0.3622, 0.2569, 0.7032]]]], [[[[0.8548, 0.9842, 0.5789], [0.3128, 0.4051, 0.5527], [0.6587, 0.6727, 0.3735]], [[0.5214, 0.4558, 0.9178], [0.8656, 0.4302, 0.2006], [0.8738, 0.5293, 0.4714]]]], Sub93353), 
LAve68948 = average_layer([Con33198,Sub93353], Ave68948), 
exec_layers([LDot94967,LDot11007,LZer92257,LCon70508,LMul8778,LRes31508,LGlo94250,LRes11359,LRes668,LZer62159,LCon33198,LSub93353,LAve68948],["Dot94967","Dot11007","Zer92257","Con70508","Mul8778","Res31508","Glo94250","Res11359","Res668","Zer62159","Con33198","Sub93353","Ave68948"],Ave68948,"Ave68948")

Actual (Unparsed): [[[[-0.2760500, -0.2492500, 0.1301500], [0.1380000, 0.0851500, 0.2102000], [-0.2443000, 0.1186500, 0.2909500]], [[-0.2439000, 0.3279500, -0.0229500], [0.0410000, 0.2425000, -0.0208000], [-0.1046631, -0.1236500, 0.3107500]]]]

Expected (Unparsed): [[[[-0.27605,-0.24924999999999997,0.13015000000000004],[0.13799999999999998,0.08514999999999998,0.21020000000000003],[-0.24429999999999996,0.11864999999999998,0.29095]],[[-0.24389999999999998,0.32794999999999996,-0.022949999999999915],[0.04099999999999998,0.24249999999999997,-0.020799999999999996],[-0.1046630617895,-0.12364999999999998,0.31075]]]]

Actual:   [[[[-0.276, -0.2492, 0.1302], [0.138, 0.0852, 0.2102], [-0.2443, 0.1187, 0.291]], [[-0.2439, 0.328, -0.0229], [0.041, 0.2425, -0.0208], [-0.1046, -0.1236, 0.3108]]]]

Expected: [[[[-0.276, -0.2492, 0.1302], [0.138, 0.0852, 0.2103], [-0.2442, 0.1187, 0.291]], [[-0.2438, 0.328, -0.0229], [0.041, 0.2425, -0.0207], [-0.1046, -0.1236, 0.3108]]]]