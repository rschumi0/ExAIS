import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mas23057 = tf.keras.layers.Input(shape=([2, 4, 4]))
in0Con5252 = tf.keras.layers.Input(shape=([2, 4, 1]))
in0Ave96157 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Sub26712 = tf.keras.layers.Input(shape=([2]))
in1Sub26712 = tf.keras.layers.Input(shape=([2]))
in0Con78990 = tf.keras.layers.Input(shape=([12]))

Mas23057 = keras.layers.Masking(mask_value=1, name = 'Mas23057', )(in0Mas23057)
Res89276 = keras.layers.Reshape((2, 16), name = 'Res89276', )(Mas23057)
Sep34192 = keras.layers.SeparableConv1D(4, (1),strides=(1), padding='valid', name = 'Sep34192', )(Res89276)
Res92644 = keras.layers.Reshape((2, 4, 1), name = 'Res92644', )(Sep34192)
Con5252 = keras.layers.Concatenate(axis=3, name = 'Con5252', )([Res92644,in0Con5252])
Ave96157 = keras.layers.AveragePooling2D(pool_size=(1, 2), strides=(1, 12), padding='same', name = 'Ave96157', )(in0Ave96157)
Zer14443 = keras.layers.ZeroPadding2D(padding=((1, 0), (3, 0)), name = 'Zer14443', )(Ave96157)
Mul89054 = keras.layers.Multiply(name = 'Mul89054', )([Con5252,Zer14443])
Res22811 = keras.layers.Reshape((2, 8), name = 'Res22811', )(Mul89054)
Max41802 = keras.layers.MaxPool1D(pool_size=(1), name = 'Max41802', )(Res22811)
Fla49096 = keras.layers.Flatten(name = 'Fla49096', )(Max41802)
Sub26712 = keras.layers.Subtract(name = 'Sub26712', )([in0Sub26712,in1Sub26712])
Den29235 = keras.layers.Dense(4,name = 'Den29235', )(Sub26712)
Lay72841 = keras.layers.LayerNormalization(axis=1, epsilon=2.249425440290996, name = 'Lay72841', )(Den29235)
Con78990 = keras.layers.Concatenate(axis=1, name = 'Con78990', )([Lay72841,in0Con78990])
Mul62380 = keras.layers.Multiply(name = 'Mul62380', )([Fla49096,Con78990])
model = tf.keras.models.Model(inputs=[in0Mas23057,in0Con5252,in0Ave96157,in0Sub26712,in1Sub26712,in0Con78990], outputs=Mul62380)
w = model.get_layer('Sep34192').get_weights() 
w[0] = np.array([[[0.3967], [0.1637], [0.1674], [0.0636], [0.3994], [0.0549], [0.5322], [0.7948], [0.7167], [0.1314], [0.9826], [0.7495], [0.3116], [0.0571], [0.5299], [0.2822]]])
w[1] = np.array([[[0.401, 0.1104, 0.6266, 0.4695], [0.9444, 0.5839, 0.8827, 0.1502], [0.3039, 0.5012, 0.1551, 0.9559], [0.6894, 0.9856, 0.7428, 0.4722], [0.8163, 0.8692, 0.0279, 0.899], [0.0831, 0.3531, 0.5847, 0.2476], [0.548, 0.7481, 0.387, 0.9687], [0.8195, 0.5994, 0.7505, 0.7834], [0.8147, 0.2814, 0.697, 0.5983], [0.8366, 0.8421, 0.6201, 0.9066], [0.5747, 0.4765, 0.4957, 0.0084], [0.4444, 0.5113, 0.3873, 0.7104], [0.1433, 0.195, 0.6694, 0.908], [0.4284, 0.9066, 0.2146, 0.5987], [0.8932, 0.6163, 0.7735, 0.4245], [0.9606, 0.5651, 0.912, 0.8023]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep34192').set_weights(w) 
w = model.get_layer('Den29235').get_weights() 
w[0] = np.array([[0.9696, 0.9695, 0.816, 0.0787], [0.715, 0.3819, 0.7811, 0.703]])
w[1] = np.array([0.066, 0.1336, 0.3393, 0.8537])
model.get_layer('Den29235').set_weights(w) 
in0Mas23057 = tf.constant([[[[1.7708, 1.1569, 1.1816, 1.5472], [1.7524, 1.8999, 1.3712, 1.7876], [1.3476, 1.637, 1.9013, 1.7409], [1.0753, 1.7019, 1.1919, 1.3973]], [[1.2308, 1.2893, 1.8319, 1.9798], [1.767, 1.75, 1.538, 1.0154], [1.4256, 1.2445, 1.5804, 1.6841], [1.1998, 1.9329, 1.1409, 1.9135]]]])
in0Con5252 = tf.constant([[[[0.5728], [0.1822], [0.0021], [0.0666]], [[0.0873], [0.305], [0.0742], [0.5027]]]])
in0Ave96157 = tf.constant([[[[1.4563, 1.4991], [1.8863, 1.0139]]]])
in0Sub26712 = tf.constant([[0.6834, 0.0876]])
in1Sub26712 = tf.constant([[0.7656, 0.1278]])
in0Con78990 = tf.constant([[0.2841, 0.728, 0.1401, 0.6437, 0.2656, 0.3083, 0.1889, 0.8285, 0.5198, 0.0291, 0.2202, 0.778]])
print (np.array2string(model.predict([in0Mas23057,in0Con5252,in0Ave96157,in0Sub26712,in1Sub26712,in0Con78990],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Mul62380.png')

LMas23057 = masking_layer([[[[1.7708, 1.1569, 1.1816, 1.5472], [1.7524, 1.8999, 1.3712, 1.7876], [1.3476, 1.637, 1.9013, 1.7409], [1.0753, 1.7019, 1.1919, 1.3973]], [[1.2308, 1.2893, 1.8319, 1.9798], [1.767, 1.75, 1.538, 1.0154], [1.4256, 1.2445, 1.5804, 1.6841], [1.1998, 1.9329, 1.1409, 1.9135]]]], 1, Mas23057), 
LRes89276 = reshape_layer(Mas23057, [2, 16], Res89276), 
LSep34192 = separable_conv1D_layer(Res89276, 1,[[[[0.3967], [0.1637], [0.1674], [0.0636], [0.3994], [0.0549], [0.5322], [0.7948], [0.7167], [0.1314], [0.9826], [0.7495], [0.3116], [0.0571], [0.5299], [0.2822]]],[[[0.401, 0.1104, 0.6266, 0.4695], [0.9444, 0.5839, 0.8827, 0.1502], [0.3039, 0.5012, 0.1551, 0.9559], [0.6894, 0.9856, 0.7428, 0.4722], [0.8163, 0.8692, 0.0279, 0.899], [0.0831, 0.3531, 0.5847, 0.2476], [0.548, 0.7481, 0.387, 0.9687], [0.8195, 0.5994, 0.7505, 0.7834], [0.8147, 0.2814, 0.697, 0.5983], [0.8366, 0.8421, 0.6201, 0.9066], [0.5747, 0.4765, 0.4957, 0.0084], [0.4444, 0.5113, 0.3873, 0.7104], [0.1433, 0.195, 0.6694, 0.908], [0.4284, 0.9066, 0.2146, 0.5987], [0.8932, 0.6163, 0.7735, 0.4245], [0.9606, 0.5651, 0.912, 0.8023]]]],[0, 0, 0, 0], 1, false, Sep34192), 
LRes92644 = reshape_layer(Sep34192, [2, 4, 1], Res92644), 
LCon5252 = concatenate_layer([Res92644,[[[[0.5728], [0.1822], [0.0021], [0.0666]], [[0.0873], [0.305], [0.0742], [0.5027]]]]], 3, Con5252), 
LAve96157 = average_pooling2D_layer([[[[1.4563, 1.4991], [1.8863, 1.0139]]]], 1, 2, 1, 12, true, Ave96157), 
LZer14443 = zero_padding2D_layer(Ave96157, 1, 0, 3, 0, Zer14443), 
LMul89054 = multiply_layer([Con5252,Zer14443], Mul89054), 
LRes22811 = reshape_layer(Mul89054, [2, 8], Res22811), 
LMax41802 = max_pool1D_layer(Res22811, 1, Max41802), 
LFla49096 = flatten_layer(Max41802, Fla49096), 
LSub26712 = subtract_layer([[0.6834, 0.0876]], [[0.7656, 0.1278]], Sub26712), 
LDen29235 = dense_layer(Sub26712, [[0.9696, 0.9695, 0.816, 0.0787], [0.715, 0.3819, 0.7811, 0.703]],[0.066, 0.1336, 0.3393, 0.8537], Den29235), 
LLay72841 = layer_normalization_layer(Den29235, 1, 2.249425440290996, Lay72841), 
LCon78990 = concatenate_layer([Lay72841,[[0.2841, 0.728, 0.1401, 0.6437, 0.2656, 0.3083, 0.1889, 0.8285, 0.5198, 0.0291, 0.2202, 0.778]]], 1, Con78990), 
LMul62380 = multiply_layer([Fla49096,Con78990], Mul62380), 
exec_layers([LMas23057,LRes89276,LSep34192,LRes92644,LCon5252,LAve96157,LZer14443,LMul89054,LRes22811,LMax41802,LFla49096,LSub26712,LDen29235,LLay72841,LCon78990,LMul62380],["Mas23057","Res89276","Sep34192","Res92644","Con5252","Ave96157","Zer14443","Mul89054","Res22811","Max41802","Fla49096","Sub26712","Den29235","Lay72841","Con78990","Mul62380"],Mul62380,"Mul62380")

Actual (Unparsed): [[-0.0000000, -0.0000000, -0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 2.0099862, 0.4914179]]

Expected (Unparsed): [[-0.0,-0.0,-0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0099861412663325,0.4914179039]]

Actual:   [[-0, -0, -0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.01, 0.4915]]

Expected: [[-0, -0, -0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.01, 0.4915]]