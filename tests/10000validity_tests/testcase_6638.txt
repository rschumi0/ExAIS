import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul94028 = tf.keras.layers.Input(shape=([1, 2, 2]))
in1Mul94028 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Con69371 = tf.keras.layers.Input(shape=([4, 1]))
in0Min4000 = tf.keras.layers.Input(shape=([2, 2]))
in1Min4000 = tf.keras.layers.Input(shape=([2, 2]))
in0Add73874 = tf.keras.layers.Input(shape=([2, 1]))
in1Add73874 = tf.keras.layers.Input(shape=([2, 1]))
in0Con85193 = tf.keras.layers.Input(shape=([2, 1]))
in0Dot10416 = tf.keras.layers.Input(shape=([3, 2]))
in1Dot10416 = tf.keras.layers.Input(shape=([3, 2]))
in0Mas90216 = tf.keras.layers.Input(shape=([1]))
in0Con78951 = tf.keras.layers.Input(shape=([4, 1]))

Mul94028 = keras.layers.Multiply(name = 'Mul94028', )([in0Mul94028,in1Mul94028])
Fla50266 = keras.layers.Flatten(name = 'Fla50266', )(Mul94028)
Lay82845 = keras.layers.LayerNormalization(axis=1, epsilon=1.7882368461654436, name = 'Lay82845', )(Fla50266)
Res90094 = keras.layers.Reshape((4, 1), name = 'Res90094', )(Lay82845)
Con69371 = keras.layers.Concatenate(axis=2, name = 'Con69371', )([Res90094,in0Con69371])
Min4000 = keras.layers.Minimum(name = 'Min4000', )([in0Min4000,in1Min4000])
Zer50337 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer50337', )(Min4000)
Mul67980 = keras.layers.Multiply(name = 'Mul67980', )([Con69371,Zer50337])
Add73874 = keras.layers.Add(name = 'Add73874', )([in0Add73874,in1Add73874])
Con85193 = keras.layers.Concatenate(axis=2, name = 'Con85193', )([Add73874,in0Con85193])
Dot10416 = keras.layers.Dot(axes=(1, 1), name = 'Dot10416', )([in0Dot10416,in1Dot10416])
Sub56393 = keras.layers.Subtract(name = 'Sub56393', )([Con85193,Dot10416])
Res87059 = keras.layers.Reshape((2, 2, 1), name = 'Res87059', )(Sub56393)
Max51665 = keras.layers.MaxPool2D(pool_size=(2, 2), name = 'Max51665', )(Res87059)
Res28583 = keras.layers.Reshape((1, 1), name = 'Res28583', )(Max51665)
Mas90216 = keras.layers.Masking(mask_value=2, name = 'Mas90216', )(in0Mas90216)
Res69239 = keras.layers.Reshape((1, 1), name = 'Res69239', )(Mas90216)
Max34433 = keras.layers.Maximum(name = 'Max34433', )([Res28583,Res69239])
Zer40692 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer40692', )(Max34433)
Con78951 = keras.layers.Concatenate(axis=2, name = 'Con78951', )([Zer40692,in0Con78951])
Add60219 = keras.layers.Add(name = 'Add60219', )([Mul67980,Con78951])
model = tf.keras.models.Model(inputs=[in0Mul94028,in1Mul94028,in0Con69371,in0Min4000,in1Min4000,in0Add73874,in1Add73874,in0Con85193,in0Dot10416,in1Dot10416,in0Mas90216,in0Con78951], outputs=Add60219)
in0Mul94028 = tf.constant([[[[0.4155, 0.7253], [0.9943, 0.1021]]]])
in1Mul94028 = tf.constant([[[[0.957, 0.1612], [0.6626, 0.5906]]]])
in0Con69371 = tf.constant([[[0.2826], [0.0545], [0.1089], [0.837]]])
in0Min4000 = tf.constant([[[0.5761, 0.586], [0.4162, 0.9127]]])
in1Min4000 = tf.constant([[[0.7492, 0.0246], [0.4841, 0.4249]]])
in0Add73874 = tf.constant([[[0.0102], [0.7747]]])
in1Add73874 = tf.constant([[[0.357], [0.9883]]])
in0Con85193 = tf.constant([[[0.268], [0.7187]]])
in0Dot10416 = tf.constant([[[0.0753, 0.99], [0.0963, 0.5523], [0.606, 0.8939]]])
in1Dot10416 = tf.constant([[[0.6822, 0.4904], [0.738, 0.9621], [0.5414, 0.3574]]])
in0Mas90216 = tf.constant([[1.0648]])
in0Con78951 = tf.constant([[[0.1014], [0.1613], [0.5118], [0.1763]]])
print (np.array2string(model.predict([in0Mul94028,in1Mul94028,in0Con69371,in0Min4000,in1Min4000,in0Add73874,in1Add73874,in0Con85193,in0Dot10416,in1Dot10416,in0Mas90216,in0Con78951],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add60219.png')

LMul94028 = multiply_layer([[[[[0.4155, 0.7253], [0.9943, 0.1021]]]], [[[[0.957, 0.1612], [0.6626, 0.5906]]]]], Mul94028), 
LFla50266 = flatten_layer(Mul94028, Fla50266), 
LLay82845 = layer_normalization_layer(Fla50266, 1, 1.7882368461654436, Lay82845), 
LRes90094 = reshape_layer(Lay82845, [4, 1], Res90094), 
LCon69371 = concatenate_layer([Res90094,[[[0.2826], [0.0545], [0.1089], [0.837]]]], 2, Con69371), 
LMin4000 = minimum_layer([[[[0.5761, 0.586], [0.4162, 0.9127]]], [[[0.7492, 0.0246], [0.4841, 0.4249]]]], Min4000), 
LZer50337 = zero_padding1D_layer(Min4000, 2, 0, Zer50337), 
LMul67980 = multiply_layer([Con69371,Zer50337], Mul67980), 
LAdd73874 = add_layer([[[[0.0102], [0.7747]]], [[[0.357], [0.9883]]]], Add73874), 
LCon85193 = concatenate_layer([Add73874,[[[0.268], [0.7187]]]], 2, Con85193), 
LDot10416 = dot_layer([[[0.0753, 0.99], [0.0963, 0.5523], [0.606, 0.8939]]], [[[0.6822, 0.4904], [0.738, 0.9621], [0.5414, 0.3574]]], 1, 1, Dot10416), 
LSub56393 = subtract_layer(Con85193,Dot10416, Sub56393), 
LRes87059 = reshape_layer(Sub56393, [2, 2, 1], Res87059), 
LMax51665 = max_pool2D_layer(Res87059, 2, 2, Max51665), 
LRes28583 = reshape_layer(Max51665, [1, 1], Res28583), 
LMas90216 = masking_layer([[1.0648]], 2, Mas90216), 
LRes69239 = reshape_layer(Mas90216, [1, 1], Res69239), 
LMax34433 = maximum_layer([Res28583,Res69239], Max34433), 
LZer40692 = zero_padding1D_layer(Max34433, 3, 0, Zer40692), 
LCon78951 = concatenate_layer([Zer40692,[[[0.1014], [0.1613], [0.5118], [0.1763]]]], 2, Con78951), 
LAdd60219 = add_layer([Mul67980,Con78951], Add60219), 
exec_layers([LMul94028,LFla50266,LLay82845,LRes90094,LCon69371,LMin4000,LZer50337,LMul67980,LAdd73874,LCon85193,LDot10416,LSub56393,LRes87059,LMax51665,LRes28583,LMas90216,LRes69239,LMax34433,LZer40692,LCon78951,LAdd60219],["Mul94028","Fla50266","Lay82845","Res90094","Con69371","Min4000","Zer50337","Mul67980","Add73874","Con85193","Dot10416","Sub56393","Res87059","Max51665","Res28583","Mas90216","Res69239","Max34433","Zer40692","Con78951","Add60219"],Add60219,"Add60219")

Actual (Unparsed): [[[0.0000000, 0.1014000], [0.0000000, 0.1613000], [0.1485979, 0.5144789], [0.9887838, 0.5319413]]]

Expected (Unparsed): [[[0.0,0.1014],[0.0,0.1613],[0.14859785782528537,0.51447894],[0.9887837371207602,0.5319413]]]

Actual:   [[[0, 0.1014], [0, 0.1613], [0.1486, 0.5145], [0.9888, 0.532]]]

Expected: [[[0, 0.1014], [0, 0.1613], [0.1486, 0.5145], [0.9888, 0.532]]]