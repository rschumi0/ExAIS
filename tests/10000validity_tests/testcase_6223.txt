import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sub71853 = tf.keras.layers.Input(shape=([3, 2, 3, 3]))
in1Sub71853 = tf.keras.layers.Input(shape=([3, 2, 3, 3]))
in0Loc86851 = tf.keras.layers.Input(shape=([1, 1]))
in0Con58353 = tf.keras.layers.Input(shape=([3, 16]))
in0Mul35183 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Mul35183 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0LST54825 = tf.keras.layers.Input(shape=([1, 1]))
in0Max71955 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Max71955 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con1194 = tf.keras.layers.Input(shape=([2]))
in0Con32248 = tf.keras.layers.Input(shape=([5]))
in0Con96233 = tf.keras.layers.Input(shape=([46]))

Sub71853 = keras.layers.Subtract(name = 'Sub71853', )([in0Sub71853,in1Sub71853])
Res96078 = keras.layers.Reshape((3, 2, 9), name = 'Res96078', )(Sub71853)
Res41887 = keras.layers.Reshape((3, 18), name = 'Res41887', )(Res96078)
Loc86851 = keras.layers.LocallyConnected1D(2, (1),strides=(10), name = 'Loc86851', )(in0Loc86851)
Sof4196 = keras.layers.Softmax(axis=1, name = 'Sof4196', )(Loc86851)
Zer49868 = keras.layers.ZeroPadding1D(padding=((2, 0)), name = 'Zer49868', )(Sof4196)
Con58353 = keras.layers.Concatenate(axis=2, name = 'Con58353', )([Zer49868,in0Con58353])
Min23591 = keras.layers.Minimum(name = 'Min23591', )([Res41887,Con58353])
Fla58839 = keras.layers.Flatten(name = 'Fla58839', )(Min23591)
Mul35183 = keras.layers.Multiply(name = 'Mul35183', )([in0Mul35183,in1Mul35183])
Res32200 = keras.layers.Reshape((2, 4), name = 'Res32200', )(Mul35183)
Fla41041 = keras.layers.Flatten(name = 'Fla41041', )(Res32200)
LST54825 = keras.layers.LSTM(3,recurrent_activation='sigmoid', name = 'LST54825', )(in0LST54825)
Max71955 = keras.layers.Maximum(name = 'Max71955', )([in0Max71955,in1Max71955])
Res33558 = keras.layers.Reshape((2, 1), name = 'Res33558', )(Max71955)
Glo52108 = keras.layers.GlobalAveragePooling1D(name = 'Glo52108', )(Res33558)
Con1194 = keras.layers.Concatenate(axis=1, name = 'Con1194', )([Glo52108,in0Con1194])
Mul67813 = keras.layers.Multiply(name = 'Mul67813', )([LST54825,Con1194])
Con32248 = keras.layers.Concatenate(axis=1, name = 'Con32248', )([Mul67813,in0Con32248])
Ave28021 = keras.layers.Average(name = 'Ave28021', )([Fla41041,Con32248])
Con96233 = keras.layers.Concatenate(axis=1, name = 'Con96233', )([Ave28021,in0Con96233])
Min50943 = keras.layers.Minimum(name = 'Min50943', )([Fla58839,Con96233])
model = tf.keras.models.Model(inputs=[in0Sub71853,in1Sub71853,in0Loc86851,in0Con58353,in0Mul35183,in1Mul35183,in0LST54825,in0Max71955,in1Max71955,in0Con1194,in0Con32248,in0Con96233], outputs=Min50943)
w = model.get_layer('Loc86851').get_weights() 
w[0] = np.array([[[0.6874, 0.4138]]])
w[1] = np.array([[0, 0]])
model.get_layer('Loc86851').set_weights(w) 
w = model.get_layer('LST54825').get_weights() 
w[0] = np.array([[2, 9, 8, 5, 5, 6, 9, 4, 6, 7, 8, 8]])
w[1] = np.array([[4, 9, 9, 6, 6, 10, 5, 2, 4, 1, 9, 10], [8, 4, 2, 6, 7, 4, 2, 1, 3, 7, 9, 9], [3, 2, 4, 5, 7, 6, 8, 8, 9, 9, 10, 8]])
w[2] = np.array([2, 10, 9, 7, 9, 9, 3, 4, 5, 8, 9, 1])
model.get_layer('LST54825').set_weights(w) 
in0Sub71853 = tf.constant([[[[[0.8693, 0.9756, 0.4857], [0.906, 0.2161, 0.3734], [0.6042, 0.365, 0.9382]], [[0.8591, 0.2257, 0.4197], [0.8065, 0.3348, 0.0254], [0.7518, 0.8363, 0.6738]]], [[[0.0056, 0.6275, 0.0909], [0.4027, 0.2544, 0.048], [0.4905, 0.5634, 0.0838]], [[0.6601, 0.2339, 0.9891], [0.264, 0.2394, 0.7574], [0.0555, 0.2136, 0.3411]]], [[[0.3774, 0.9458, 0.5568], [0.1435, 0.8961, 0.6086], [0.4196, 0.605, 0.4831]], [[0.8816, 0.197, 0.7979], [0.0895, 0.7023, 0.298], [0.6889, 0.4997, 0.9368]]]]])
in1Sub71853 = tf.constant([[[[[0.5483, 0.6946, 0.8799], [0.115, 0.5165, 0.0552], [0.3449, 0.287, 0.0171]], [[0.4436, 0.6311, 0.2828], [0.4393, 0.2536, 0.4383], [0.8944, 0.3533, 0.6967]]], [[[0.3805, 0.8856, 0.053], [0.1774, 0.7757, 0.2764], [0.3082, 0.4135, 0.6939]], [[0.0537, 0.6201, 0.4224], [0.7814, 0.3113, 0.7016], [0.8025, 0.3878, 0.8396]]], [[[0.7346, 0.7057, 0.4275], [0.3504, 0.198, 0.519], [0.2306, 0.8504, 0.7056]], [[0.5505, 0.3583, 0.1563], [0.3421, 0.9513, 0.9874], [0.1839, 0.4466, 0.6941]]]]])
in0Loc86851 = tf.constant([[[0.0088]]])
in0Con58353 = tf.constant([[[0.5321, 0.0683, 0.2796, 0.1971, 0.694, 0.3982, 0.1194, 0.3665, 0.5282, 0.7198, 0.8534, 0.2398, 0.2922, 0.761, 0.8887, 0.9475], [0.6918, 0.8513, 0.3343, 0.411, 0.2086, 0.4257, 0.662, 0.6404, 0.1746, 0.3248, 0.1005, 0.6202, 0.7912, 0.3123, 0.2123, 0.96], [0.2096, 0.2186, 0.4765, 0.0557, 0.8644, 0.5179, 0.7268, 0.9772, 0.4847, 0.9448, 0.9823, 0.683, 0.5927, 0.9661, 0.5449, 0.4444]]])
in0Mul35183 = tf.constant([[[[0.436, 0.6564], [0.6774, 0.4208]], [[0.0647, 0.2928], [0.9268, 0.954]]]])
in1Mul35183 = tf.constant([[[[0.9904, 0.8495], [0.4252, 0.1118]], [[0.8229, 0.4259], [0.3185, 0.9792]]]])
in0LST54825 = tf.constant([[[7]]])
in0Max71955 = tf.constant([[[[0.5281]], [[0.7662]]]])
in1Max71955 = tf.constant([[[[0.2017]], [[0.4354]]]])
in0Con1194 = tf.constant([[0.6855, 0.3369]])
in0Con32248 = tf.constant([[0.4851, 0.6957, 0.8575, 0.749, 0.588]])
in0Con96233 = tf.constant([[0.1015, 0.253, 0.2104, 0.5312, 0.417, 0.3306, 0.2871, 0.1706, 0.6625, 0.5684, 0.0151, 0.0651, 0.266, 0.1046, 0.0642, 0.5187, 0.9948, 0.2358, 0.8992, 0.0577, 0.7758, 0.9459, 0.5779, 0.0589, 0.6196, 0.6942, 0.3996, 0.5544, 0.0816, 0.1943, 0.9551, 0.7547, 0.2188, 0.8846, 0.8602, 0.1297, 0.1881, 0.6738, 0.3449, 0.599, 0.4705, 0.3288, 0.9116, 0.495, 0.2053, 0.568]])
print (np.array2string(model.predict([in0Sub71853,in1Sub71853,in0Loc86851,in0Con58353,in0Mul35183,in1Mul35183,in0LST54825,in0Max71955,in1Max71955,in0Con1194,in0Con32248,in0Con96233],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min50943.png')

LSub71853 = subtract_layer([[[[[0.8693, 0.9756, 0.4857], [0.906, 0.2161, 0.3734], [0.6042, 0.365, 0.9382]], [[0.8591, 0.2257, 0.4197], [0.8065, 0.3348, 0.0254], [0.7518, 0.8363, 0.6738]]], [[[0.0056, 0.6275, 0.0909], [0.4027, 0.2544, 0.048], [0.4905, 0.5634, 0.0838]], [[0.6601, 0.2339, 0.9891], [0.264, 0.2394, 0.7574], [0.0555, 0.2136, 0.3411]]], [[[0.3774, 0.9458, 0.5568], [0.1435, 0.8961, 0.6086], [0.4196, 0.605, 0.4831]], [[0.8816, 0.197, 0.7979], [0.0895, 0.7023, 0.298], [0.6889, 0.4997, 0.9368]]]]], [[[[[0.5483, 0.6946, 0.8799], [0.115, 0.5165, 0.0552], [0.3449, 0.287, 0.0171]], [[0.4436, 0.6311, 0.2828], [0.4393, 0.2536, 0.4383], [0.8944, 0.3533, 0.6967]]], [[[0.3805, 0.8856, 0.053], [0.1774, 0.7757, 0.2764], [0.3082, 0.4135, 0.6939]], [[0.0537, 0.6201, 0.4224], [0.7814, 0.3113, 0.7016], [0.8025, 0.3878, 0.8396]]], [[[0.7346, 0.7057, 0.4275], [0.3504, 0.198, 0.519], [0.2306, 0.8504, 0.7056]], [[0.5505, 0.3583, 0.1563], [0.3421, 0.9513, 0.9874], [0.1839, 0.4466, 0.6941]]]]], Sub71853), 
LRes96078 = reshape_layer(Sub71853, [3, 2, 9], Res96078), 
LRes41887 = reshape_layer(Res96078, [3, 18], Res41887), 
LLoc86851 = locally_connected1D_layer([[[0.0088]]], 1,[[[0.6874, 0.4138]]],[[0, 0]], 10, Loc86851), 
LSof4196 = softmax_layer(Loc86851, 1, Sof4196), 
LZer49868 = zero_padding1D_layer(Sof4196, 2, 0, Zer49868), 
LCon58353 = concatenate_layer([Zer49868,[[[0.5321, 0.0683, 0.2796, 0.1971, 0.694, 0.3982, 0.1194, 0.3665, 0.5282, 0.7198, 0.8534, 0.2398, 0.2922, 0.761, 0.8887, 0.9475], [0.6918, 0.8513, 0.3343, 0.411, 0.2086, 0.4257, 0.662, 0.6404, 0.1746, 0.3248, 0.1005, 0.6202, 0.7912, 0.3123, 0.2123, 0.96], [0.2096, 0.2186, 0.4765, 0.0557, 0.8644, 0.5179, 0.7268, 0.9772, 0.4847, 0.9448, 0.9823, 0.683, 0.5927, 0.9661, 0.5449, 0.4444]]]], 2, Con58353), 
LMin23591 = minimum_layer([Res41887,Con58353], Min23591), 
LFla58839 = flatten_layer(Min23591, Fla58839), 
LMul35183 = multiply_layer([[[[[0.436, 0.6564], [0.6774, 0.4208]], [[0.0647, 0.2928], [0.9268, 0.954]]]], [[[[0.9904, 0.8495], [0.4252, 0.1118]], [[0.8229, 0.4259], [0.3185, 0.9792]]]]], Mul35183), 
LRes32200 = reshape_layer(Mul35183, [2, 4], Res32200), 
LFla41041 = flatten_layer(Res32200, Fla41041), 
LLST54825 = lstm_layer([[[7]]],[[2, 9, 8, 5, 5, 6, 9, 4, 6, 7, 8, 8]],[[4, 9, 9, 6, 6, 10, 5, 2, 4, 1, 9, 10], [8, 4, 2, 6, 7, 4, 2, 1, 3, 7, 9, 9], [3, 2, 4, 5, 7, 6, 8, 8, 9, 9, 10, 8]],[2, 10, 9, 7, 9, 9, 3, 4, 5, 8, 9, 1], LST54825), 
LMax71955 = maximum_layer([[[[[0.5281]], [[0.7662]]]], [[[[0.2017]], [[0.4354]]]]], Max71955), 
LRes33558 = reshape_layer(Max71955, [2, 1], Res33558), 
LGlo52108 = global_average_pooling1D_layer(Res33558, Glo52108), 
LCon1194 = concatenate_layer([Glo52108,[[0.6855, 0.3369]]], 1, Con1194), 
LMul67813 = multiply_layer([LST54825,Con1194], Mul67813), 
LCon32248 = concatenate_layer([Mul67813,[[0.4851, 0.6957, 0.8575, 0.749, 0.588]]], 1, Con32248), 
LAve28021 = average_layer([Fla41041,Con32248], Ave28021), 
LCon96233 = concatenate_layer([Ave28021,[[0.1015, 0.253, 0.2104, 0.5312, 0.417, 0.3306, 0.2871, 0.1706, 0.6625, 0.5684, 0.0151, 0.0651, 0.266, 0.1046, 0.0642, 0.5187, 0.9948, 0.2358, 0.8992, 0.0577, 0.7758, 0.9459, 0.5779, 0.0589, 0.6196, 0.6942, 0.3996, 0.5544, 0.0816, 0.1943, 0.9551, 0.7547, 0.2188, 0.8846, 0.8602, 0.1297, 0.1881, 0.6738, 0.3449, 0.599, 0.4705, 0.3288, 0.9116, 0.495, 0.2053, 0.568]]], 1, Con96233), 
LMin50943 = minimum_layer([Fla58839,Con96233], Min50943), 
exec_layers([LSub71853,LRes96078,LRes41887,LLoc86851,LSof4196,LZer49868,LCon58353,LMin23591,LFla58839,LMul35183,LRes32200,LFla41041,LLST54825,LMax71955,LRes33558,LGlo52108,LCon1194,LMul67813,LCon32248,LAve28021,LCon96233,LMin50943],["Sub71853","Res96078","Res41887","Loc86851","Sof4196","Zer49868","Con58353","Min23591","Fla58839","Mul35183","Res32200","Fla41041","LST54825","Max71955","Res33558","Glo52108","Con1194","Mul67813","Con32248","Ave28021","Con96233","Min50943"],Min50943,"Min50943")

Actual (Unparsed): [[0.0000000, 0.0000000, -0.3942000, 0.0683000, -0.3004000, 0.1971000, 0.2593000, 0.0780000, 0.1015000, 0.2530000, -0.4054000, 0.1369000, 0.3672000, 0.0812000, -0.4129000, -0.1426000, 0.4830000, -0.0229000, -0.3749000, -0.2581000, 0.0379000, 0.1046000, -0.5213000, -0.2284000, 0.1823000, 0.1499000, -0.6101000, 0.0577000, -0.3862000, 0.3248000, -0.5174000, -0.0719000, 0.0558000, -0.7470000, -0.1742000, -0.4985000, -0.3572000, 0.1943000, 0.1293000, -0.2069000, 0.2188000, 0.0557000, 0.1890000, -0.2454000, -0.2225000, 0.3311000, -0.1613000, 0.5990000, -0.2526000, -0.2490000, -0.6894000, 0.4950000, 0.0531000, 0.2427000]]

Expected (Unparsed): [[0,0,-0.3942,0.0683,-0.3004,0.1971,0.2593,0.07800000000000001,0.1015,0.253,-0.4054,0.13690000000000002,0.36719999999999997,0.0812,-0.41290000000000004,-0.14259999999999995,0.48300000000000004,-0.02290000000000003,-0.3749,-0.2581000000000001,0.037899999999999996,0.1046,-0.5212999999999999,-0.2284,0.18230000000000002,0.14990000000000003,-0.6101,0.0577,-0.3862,0.3248,-0.5174,-0.07190000000000002,0.05579999999999996,-0.747,-0.17419999999999997,-0.4985,-0.3572,0.1943,0.12929999999999997,-0.2069,0.2188,0.0557,0.18899999999999997,-0.24540000000000006,-0.22250000000000003,0.33110000000000006,-0.1613,0.599,-0.25260000000000005,-0.249,-0.6894,0.495,0.05309999999999998,0.24269999999999992]]

Actual:   [[0, 0, -0.3942, 0.0683, -0.3004, 0.1971, 0.2593, 0.078, 0.1015, 0.253, -0.4054, 0.1369, 0.3672, 0.0812, -0.4129, -0.1426, 0.483, -0.0229, -0.3749, -0.2581, 0.0379, 0.1046, -0.5213, -0.2284, 0.1823, 0.1499, -0.6101, 0.0577, -0.3862, 0.3248, -0.5174, -0.0719, 0.0558, -0.747, -0.1742, -0.4985, -0.3572, 0.1943, 0.1293, -0.2069, 0.2188, 0.0557, 0.189, -0.2454, -0.2225, 0.3311, -0.1613, 0.599, -0.2526, -0.249, -0.6894, 0.495, 0.0531, 0.2427]]

Expected: [[0, 0, -0.3942, 0.0683, -0.3004, 0.1971, 0.2593, 0.0781, 0.1015, 0.253, -0.4054, 0.137, 0.3672, 0.0812, -0.4129, -0.1425, 0.4831, -0.0229, -0.3749, -0.2581, 0.0379, 0.1046, -0.5212, -0.2284, 0.1824, 0.15, -0.6101, 0.0577, -0.3862, 0.3248, -0.5174, -0.0719, 0.0558, -0.747, -0.1741, -0.4985, -0.3572, 0.1943, 0.1293, -0.2069, 0.2188, 0.0557, 0.189, -0.2454, -0.2225, 0.3312, -0.1613, 0.599, -0.2526, -0.249, -0.6894, 0.495, 0.0531, 0.2427]]