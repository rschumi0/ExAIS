import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0GRU53548 = tf.keras.layers.Input(shape=([1, 3]))
in0Con55477 = tf.keras.layers.Input(shape=([6, 7]))
in0Max46899 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in1Max46899 = tf.keras.layers.Input(shape=([2, 2, 2, 1]))
in0Con20267 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con43315 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0GRU55324 = tf.keras.layers.Input(shape=([2, 1]))
in0Con25804 = tf.keras.layers.Input(shape=([6, 3]))
in0Mul24687 = tf.keras.layers.Input(shape=([1, 2]))
in1Mul24687 = tf.keras.layers.Input(shape=([1, 2]))
in0Con86079 = tf.keras.layers.Input(shape=([6, 2]))
in0Zer92268 = tf.keras.layers.Input(shape=([4, 4]))
in0Con56865 = tf.keras.layers.Input(shape=([6, 4]))

GRU53548 = keras.layers.GRU(1,reset_after=False, recurrent_activation='sigmoid', name = 'GRU53548', )(in0GRU53548)
Res30713 = keras.layers.Reshape((1, 1), name = 'Res30713', )(GRU53548)
Zer61161 = keras.layers.ZeroPadding1D(padding=((5, 0)), name = 'Zer61161', )(Res30713)
Con55477 = keras.layers.Concatenate(axis=2, name = 'Con55477', )([Zer61161,in0Con55477])
Max46899 = keras.layers.Maximum(name = 'Max46899', )([in0Max46899,in1Max46899])
Lea18535 = keras.layers.LeakyReLU(alpha=3.6246068519683483, name = 'Lea18535', )(Max46899)
Res34083 = keras.layers.Reshape((2, 2, 2), name = 'Res34083', )(Lea18535)
Con20267 = keras.layers.Concatenate(axis=3, name = 'Con20267', )([Res34083,in0Con20267])
Con43315 = keras.layers.Conv2DTranspose(4, (1, 1),strides=(1, 1), padding='same', name = 'Con43315', )(in0Con43315)
Zer4781 = keras.layers.ZeroPadding2D(padding=((1, 0), (0, 0)), name = 'Zer4781', )(Con43315)
Ave51971 = keras.layers.Average(name = 'Ave51971', )([Con20267,Zer4781])
Res44442 = keras.layers.Reshape((2, 8), name = 'Res44442', )(Ave51971)
Zer12631 = keras.layers.ZeroPadding1D(padding=((4, 0)), name = 'Zer12631', )(Res44442)
GRU55324 = keras.layers.GRU(1,reset_after=True, recurrent_activation='sigmoid', name = 'GRU55324', )(in0GRU55324)
Res37276 = keras.layers.Reshape((1, 1), name = 'Res37276', )(GRU55324)
Zer16379 = keras.layers.ZeroPadding1D(padding=((5, 0)), name = 'Zer16379', )(Res37276)
Con25804 = keras.layers.Concatenate(axis=2, name = 'Con25804', )([Zer16379,in0Con25804])
Mul24687 = keras.layers.Multiply(name = 'Mul24687', )([in0Mul24687,in1Mul24687])
Zer33960 = keras.layers.ZeroPadding1D(padding=((5, 0)), name = 'Zer33960', )(Mul24687)
Con86079 = keras.layers.Concatenate(axis=2, name = 'Con86079', )([Zer33960,in0Con86079])
Zer92268 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer92268', )(in0Zer92268)
Min73744 = keras.layers.Minimum(name = 'Min73744', )([Con86079,Zer92268])
Add4244 = keras.layers.Add(name = 'Add4244', )([Con25804,Min73744])
Con56865 = keras.layers.Concatenate(axis=2, name = 'Con56865', )([Add4244,in0Con56865])
Min5498 = keras.layers.Minimum(name = 'Min5498', )([Zer12631,Con56865])
Ave29845 = keras.layers.Average(name = 'Ave29845', )([Con55477,Min5498])
model = tf.keras.models.Model(inputs=[in0GRU53548,in0Con55477,in0Max46899,in1Max46899,in0Con20267,in0Con43315,in0GRU55324,in0Con25804,in0Mul24687,in1Mul24687,in0Con86079,in0Zer92268,in0Con56865], outputs=Ave29845)
w = model.get_layer('GRU53548').get_weights() 
w[0] = np.array([[4, 10, 3], [10, 1, 2], [3, 3, 6]])
w[1] = np.array([[5, 4, 5]])
w[2] = np.array([9, 3, 5])
model.get_layer('GRU53548').set_weights(w) 
w = model.get_layer('Con43315').get_weights() 
w[0] = np.array([[[[0.5976, 0.213], [0.2275, 0.8418], [0.3226, 0.9834], [0.1291, 0.8167]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con43315').set_weights(w) 
w = model.get_layer('GRU55324').get_weights() 
w[0] = np.array([[9, 10, 2]])
w[1] = np.array([[6, 10, 5]])
w[2] = np.array([[4, 8, 6], [9, 1, 4]])
model.get_layer('GRU55324').set_weights(w) 
in0GRU53548 = tf.constant([[[8, 2, 10]]])
in0Con55477 = tf.constant([[[0.5014, 0.7383, 0.1381, 0.5171, 0.3019, 0.8118, 0.7598], [0.791, 0.2491, 0.7209, 0.7008, 0.5951, 0.404, 0.7492], [0.2406, 0.7886, 0.666, 0.6605, 0.7624, 0.0435, 0.39], [0.4539, 0.9076, 0.9994, 0.8475, 0.625, 0.3017, 0.9551], [0.0985, 0.5386, 0.3963, 0.9477, 0.3708, 0.8951, 0.7738], [0.3483, 0.3596, 0.6948, 0.3365, 0.9047, 0.9516, 0.5444]]])
in0Max46899 = tf.constant([[[[[0.5364], [0.8483]], [[0.49], [0.228]]], [[[0.8191], [0.0435]], [[0.6446], [0.0476]]]]])
in1Max46899 = tf.constant([[[[[0.7402], [0.752]], [[0.8695], [0.6883]]], [[[0.4008], [0.7453]], [[0.8114], [0.846]]]]])
in0Con20267 = tf.constant([[[[0.0117, 0.0621], [0.3088, 0.9323]], [[0.9503, 0.5524], [0.9884, 0.2464]]]])
in0Con43315 = tf.constant([[[[0.5079, 0.1277], [0.5253, 0.817]]]])
in0GRU55324 = tf.constant([[[10], [8]]])
in0Con25804 = tf.constant([[[0.422, 0.1216, 0.3408], [0.9881, 0.5374, 0.7972], [0.4574, 0.5181, 0.9114], [0.3548, 0.1936, 0.8486], [0.2176, 0.5468, 0.982], [0.4489, 0.6363, 0.5241]]])
in0Mul24687 = tf.constant([[[0.9393, 0.4436]]])
in1Mul24687 = tf.constant([[[0.9824, 0.29]]])
in0Con86079 = tf.constant([[[0.2111, 0.6148], [0.6961, 0.3101], [0.1118, 0.3292], [0.4248, 0.7517], [0.9724, 0.7201], [0.1552, 0.5576]]])
in0Zer92268 = tf.constant([[[1.3386, 1.7522, 1.3012, 1.3098], [1.1858, 1.1719, 1.7096, 1.0748], [1.6078, 1.9044, 1.9115, 1.36], [1.7829, 1.4229, 1.0333, 1.9255]]])
in0Con56865 = tf.constant([[[0.1068, 0.1685, 0.8188, 0.5726], [0.2483, 0.2064, 0.5323, 0.2331], [0.9145, 0.386, 0.7056, 0.4347], [0.2878, 0.2934, 0.6322, 0.3956], [0.4801, 0.4479, 0.9755, 0.1624], [0.147, 0.5043, 0.468, 0.2003]]])
print (np.array2string(model.predict([in0GRU53548,in0Con55477,in0Max46899,in1Max46899,in0Con20267,in0Con43315,in0GRU55324,in0Con25804,in0Mul24687,in1Mul24687,in0Con86079,in0Zer92268,in0Con56865],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Ave29845.png')

LGRU53548 = gru_layer([[[8, 2, 10]]],[[4, 10, 3], [10, 1, 2], [3, 3, 6]],[[5, 4, 5]],[9, 3, 5], false, GRU53548), 
LRes30713 = reshape_layer(GRU53548, [1, 1], Res30713), 
LZer61161 = zero_padding1D_layer(Res30713, 5, 0, Zer61161), 
LCon55477 = concatenate_layer([Zer61161,[[[0.5014, 0.7383, 0.1381, 0.5171, 0.3019, 0.8118, 0.7598], [0.791, 0.2491, 0.7209, 0.7008, 0.5951, 0.404, 0.7492], [0.2406, 0.7886, 0.666, 0.6605, 0.7624, 0.0435, 0.39], [0.4539, 0.9076, 0.9994, 0.8475, 0.625, 0.3017, 0.9551], [0.0985, 0.5386, 0.3963, 0.9477, 0.3708, 0.8951, 0.7738], [0.3483, 0.3596, 0.6948, 0.3365, 0.9047, 0.9516, 0.5444]]]], 2, Con55477), 
LMax46899 = maximum_layer([[[[[[0.5364], [0.8483]], [[0.49], [0.228]]], [[[0.8191], [0.0435]], [[0.6446], [0.0476]]]]], [[[[[0.7402], [0.752]], [[0.8695], [0.6883]]], [[[0.4008], [0.7453]], [[0.8114], [0.846]]]]]], Max46899), 
LLea18535 = leaky_relu_layer(Max46899, 3.6246068519683483, Lea18535), 
LRes34083 = reshape_layer(Lea18535, [2, 2, 2], Res34083), 
LCon20267 = concatenate_layer([Res34083,[[[[0.0117, 0.0621], [0.3088, 0.9323]], [[0.9503, 0.5524], [0.9884, 0.2464]]]]], 3, Con20267), 
LCon43315 = conv2D_transpose_layer([[[[0.5079, 0.1277], [0.5253, 0.817]]]], 1, 1,[[[[0.5976, 0.213], [0.2275, 0.8418], [0.3226, 0.9834], [0.1291, 0.8167]]]],[0, 0, 0, 0], 1, 1, true, Con43315), 
LZer4781 = zero_padding2D_layer(Con43315, 1, 0, 0, 0, Zer4781), 
LAve51971 = average_layer([Con20267,Zer4781], Ave51971), 
LRes44442 = reshape_layer(Ave51971, [2, 8], Res44442), 
LZer12631 = zero_padding1D_layer(Res44442, 4, 0, Zer12631), 
LGRU55324 = gru_layer([[[10], [8]]],[[9, 10, 2]],[[6, 10, 5]],[[4, 8, 6], [9, 1, 4]], true, GRU55324), 
LRes37276 = reshape_layer(GRU55324, [1, 1], Res37276), 
LZer16379 = zero_padding1D_layer(Res37276, 5, 0, Zer16379), 
LCon25804 = concatenate_layer([Zer16379,[[[0.422, 0.1216, 0.3408], [0.9881, 0.5374, 0.7972], [0.4574, 0.5181, 0.9114], [0.3548, 0.1936, 0.8486], [0.2176, 0.5468, 0.982], [0.4489, 0.6363, 0.5241]]]], 2, Con25804), 
LMul24687 = multiply_layer([[[[0.9393, 0.4436]]], [[[0.9824, 0.29]]]], Mul24687), 
LZer33960 = zero_padding1D_layer(Mul24687, 5, 0, Zer33960), 
LCon86079 = concatenate_layer([Zer33960,[[[0.2111, 0.6148], [0.6961, 0.3101], [0.1118, 0.3292], [0.4248, 0.7517], [0.9724, 0.7201], [0.1552, 0.5576]]]], 2, Con86079), 
LZer92268 = zero_padding1D_layer([[[1.3386, 1.7522, 1.3012, 1.3098], [1.1858, 1.1719, 1.7096, 1.0748], [1.6078, 1.9044, 1.9115, 1.36], [1.7829, 1.4229, 1.0333, 1.9255]]], 1, 1, Zer92268), 
LMin73744 = minimum_layer([Con86079,Zer92268], Min73744), 
LAdd4244 = add_layer([Con25804,Min73744], Add4244), 
LCon56865 = concatenate_layer([Add4244,[[[0.1068, 0.1685, 0.8188, 0.5726], [0.2483, 0.2064, 0.5323, 0.2331], [0.9145, 0.386, 0.7056, 0.4347], [0.2878, 0.2934, 0.6322, 0.3956], [0.4801, 0.4479, 0.9755, 0.1624], [0.147, 0.5043, 0.468, 0.2003]]]], 2, Con56865), 
LMin5498 = minimum_layer([Zer12631,Con56865], Min5498), 
LAve29845 = average_layer([Con55477,Min5498], Ave29845), 
exec_layers([LGRU53548,LRes30713,LZer61161,LCon55477,LMax46899,LLea18535,LRes34083,LCon20267,LCon43315,LZer4781,LAve51971,LRes44442,LZer12631,LGRU55324,LRes37276,LZer16379,LCon25804,LMul24687,LZer33960,LCon86079,LZer92268,LMin73744,LAdd4244,LCon56865,LMin5498,LAve29845],["GRU53548","Res30713","Zer61161","Con55477","Max46899","Lea18535","Res34083","Con20267","Con43315","Zer4781","Ave51971","Res44442","Zer12631","GRU55324","Res37276","Zer16379","Con25804","Mul24687","Zer33960","Con86079","Zer92268","Min73744","Add4244","Con56865","Min5498","Ave29845"],Ave29845,"Ave29845")

Actual (Unparsed): [[[0.0000000, 0.2507000, 0.3691500, 0.0690500, 0.2585500, 0.1509500, 0.4059000, 0.3799000], [0.0000000, 0.3955000, 0.1245500, 0.3604500, 0.3504000, 0.2975500, 0.2020000, 0.3746000], [0.0000000, 0.1203000, 0.3943000, 0.3330000, 0.3302500, 0.3812000, 0.0217500, 0.1950000], [0.0000000, 0.2269500, 0.4538000, 0.4997000, 0.4237500, 0.3125000, 0.1508500, 0.4775500], [0.0000000, 0.1580500, 0.2722250, 0.2136750, 0.6912250, 0.3574750, 0.5247500, 0.4681000], [0.0000000, 0.3986000, 0.4897322, 0.5279656, 0.2417500, 0.7045000, 0.7098000, 0.3723500]]]

Expected (Unparsed): [[[0,0.2507,0.36915,0.06905,0.25855,0.15095,0.4059,0.3799],[0,0.3955,0.12455,0.36045,0.3504,0.29755,0.202,0.3746],[0,0.1203,0.3943,0.333,0.33025,0.3812,0.02175,0.195],[0,0.22695,0.4538,0.4997,0.42375,0.3125,0.15085,0.47755],[0,0.15805,0.272225,0.213675,0.691225,0.357475,0.52475,0.4681],[0.0,0.3986,0.48973217999999996,0.52796562,0.24175000000000002,0.7044999999999999,0.7098,0.37235]]]

Actual:   [[[0, 0.2507, 0.3692, 0.0691, 0.2586, 0.151, 0.4059, 0.3799], [0, 0.3955, 0.1246, 0.3605, 0.3504, 0.2976, 0.202, 0.3746], [0, 0.1203, 0.3943, 0.333, 0.3303, 0.3812, 0.0218, 0.195], [0, 0.227, 0.4538, 0.4997, 0.4238, 0.3125, 0.1509, 0.4776], [0, 0.1581, 0.2723, 0.2137, 0.6913, 0.3575, 0.5248, 0.4681], [0, 0.3986, 0.4898, 0.528, 0.2418, 0.7045, 0.7098, 0.3724]]]

Expected: [[[0, 0.2507, 0.3692, 0.0691, 0.2586, 0.151, 0.4059, 0.3799], [0, 0.3955, 0.1246, 0.3605, 0.3504, 0.2976, 0.202, 0.3746], [0, 0.1203, 0.3943, 0.333, 0.3303, 0.3812, 0.0218, 0.195], [0, 0.227, 0.4538, 0.4997, 0.4238, 0.3125, 0.1509, 0.4776], [0, 0.1581, 0.2723, 0.2137, 0.6913, 0.3575, 0.5248, 0.4681], [0, 0.3986, 0.4898, 0.528, 0.2418, 0.7045, 0.7098, 0.3724]]]