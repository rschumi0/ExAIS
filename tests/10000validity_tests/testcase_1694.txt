import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0GRU9776 = tf.keras.layers.Input(shape=([2, 2]))
in0Con55630 = tf.keras.layers.Input(shape=([3, 1, 1]))
in0Max20377 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Max20377 = tf.keras.layers.Input(shape=([1, 1, 1]))

GRU9776 = keras.layers.GRU(3,reset_after=True, recurrent_activation='sigmoid', name = 'GRU9776', )(in0GRU9776)
ELU63222 = keras.layers.ELU(alpha=6.950314748168946, name = 'ELU63222', )(GRU9776)
Res60648 = keras.layers.Reshape((3, 1), name = 'Res60648', )(ELU63222)
Res12225 = keras.layers.Reshape((3, 1, 1), name = 'Res12225', )(Res60648)
Con55630 = keras.layers.Concatenate(axis=3, name = 'Con55630', )([Res12225,in0Con55630])
Max20377 = keras.layers.Maximum(name = 'Max20377', )([in0Max20377,in1Max20377])
Con69025 = keras.layers.Conv2DTranspose(2, (1, 1),strides=(1, 1), padding='same', name = 'Con69025', )(Max20377)
Cro49385 = keras.layers.Cropping2D(cropping=((0, 0), (0, 0)), name = 'Cro49385', )(Con69025)
Bat59735 = keras.layers.BatchNormalization(axis=1, epsilon=0.6923263839778265,  name = 'Bat59735', )(Cro49385)
Zer57605 = keras.layers.ZeroPadding2D(padding=((2, 0), (0, 0)), name = 'Zer57605', )(Bat59735)
Min93495 = keras.layers.Minimum(name = 'Min93495', )([Con55630,Zer57605])
model = tf.keras.models.Model(inputs=[in0GRU9776,in0Con55630,in0Max20377,in1Max20377], outputs=Min93495)
w = model.get_layer('GRU9776').get_weights() 
w[0] = np.array([[4, 5, 5, 1, 10, 10, 3, 10, 2], [7, 8, 3, 8, 4, 7, 2, 9, 1]])
w[1] = np.array([[10, 8, 8, 2, 10, 2, 4, 6, 2], [8, 2, 5, 10, 1, 5, 10, 8, 6], [4, 2, 7, 10, 2, 4, 9, 9, 3]])
w[2] = np.array([[2, 10, 2, 7, 6, 9, 7, 7, 1], [5, 10, 5, 4, 8, 3, 7, 9, 5]])
model.get_layer('GRU9776').set_weights(w) 
w = model.get_layer('Con69025').get_weights() 
w[0] = np.array([[[[0.5203], [0.1765]]]])
w[1] = np.array([0, 0])
model.get_layer('Con69025').set_weights(w) 
w = model.get_layer('Bat59735').get_weights() 
w[0] = np.array([0.3206])
w[1] = np.array([0.324])
w[2] = np.array([0.1666])
w[3] = np.array([0.4149])
model.get_layer('Bat59735').set_weights(w) 
in0GRU9776 = tf.constant([[[4, 6], [4, 9]]])
in0Con55630 = tf.constant([[[[0.8707]], [[0.7817]], [[0.2085]]]])
in0Max20377 = tf.constant([[[[0.0651]]]])
in1Max20377 = tf.constant([[[[0.5509]]]])
print (np.array2string(model.predict([in0GRU9776,in0Con55630,in0Max20377,in1Max20377],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min93495.png')

LGRU9776 = gru_layer([[[4, 6], [4, 9]]],[[4, 5, 5, 1, 10, 10, 3, 10, 2], [7, 8, 3, 8, 4, 7, 2, 9, 1]],[[10, 8, 8, 2, 10, 2, 4, 6, 2], [8, 2, 5, 10, 1, 5, 10, 8, 6], [4, 2, 7, 10, 2, 4, 9, 9, 3]],[[2, 10, 2, 7, 6, 9, 7, 7, 1], [5, 10, 5, 4, 8, 3, 7, 9, 5]], true, GRU9776), 
LELU63222 = elu_layer(GRU9776, 6.950314748168946, ELU63222), 
LRes60648 = reshape_layer(ELU63222, [3, 1], Res60648), 
LRes12225 = reshape_layer(Res60648, [3, 1, 1], Res12225), 
LCon55630 = concatenate_layer([Res12225,[[[[0.8707]], [[0.7817]], [[0.2085]]]]], 3, Con55630), 
LMax20377 = maximum_layer([[[[[0.0651]]]], [[[[0.5509]]]]], Max20377), 
LCon69025 = conv2D_transpose_layer(Max20377, 1, 1,[[[[0.5203], [0.1765]]]],[0, 0], 1, 1, true, Con69025), 
LCro49385 = cropping2D_layer(Con69025, 0, 0, 0, 0, Cro49385), 
LBat59735 = batch_normalization_layer(Cro49385, 1, 0.6923263839778265, [0.3206], [0.324], [0.1666], [0.4149], Bat59735), 
LZer57605 = zero_padding2D_layer(Bat59735, 2, 0, 0, 0, Zer57605), 
LMin93495 = minimum_layer([Con55630,Zer57605], Min93495), 
exec_layers([LGRU9776,LELU63222,LRes60648,LRes12225,LCon55630,LMax20377,LCon69025,LCro49385,LBat59735,LZer57605,LMin93495],["GRU9776","ELU63222","Res60648","Res12225","Con55630","Max20377","Con69025","Cro49385","Bat59735","Zer57605","Min93495"],Min93495,"Min93495")

Actual (Unparsed): [[[[0.0000000, 0.0000000]], [[0.0000000, 0.0000000]], [[0.0000000, 0.2085000]]]]

Expected (Unparsed): [[[[0.0,0]],[[0.0,0]],[[0.0,0.2085]]]]

Actual:   [[[[0, 0]], [[0, 0]], [[0, 0.2085]]]]

Expected: [[[[0, 0]], [[0, 0]], [[0, 0.2085]]]]