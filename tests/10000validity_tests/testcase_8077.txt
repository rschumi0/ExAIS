import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul21462 = tf.keras.layers.Input(shape=([1, 1]))
in1Mul21462 = tf.keras.layers.Input(shape=([1, 1]))
in0Con93472 = tf.keras.layers.Input(shape=([2, 3]))
in0Min82881 = tf.keras.layers.Input(shape=([2, 1, 1]))
in1Min82881 = tf.keras.layers.Input(shape=([2, 1, 1]))
in0Con31413 = tf.keras.layers.Input(shape=([2, 3]))
in0Sep10175 = tf.keras.layers.Input(shape=([1, 2]))
in0Ave18251 = tf.keras.layers.Input(shape=([2, 1]))
in1Ave18251 = tf.keras.layers.Input(shape=([2, 1]))
in0Con31243 = tf.keras.layers.Input(shape=([2, 3]))

Mul21462 = keras.layers.Multiply(name = 'Mul21462', )([in0Mul21462,in1Mul21462])
Zer47260 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer47260', )(Mul21462)
Con93472 = keras.layers.Concatenate(axis=2, name = 'Con93472', )([Zer47260,in0Con93472])
Min82881 = keras.layers.Minimum(name = 'Min82881', )([in0Min82881,in1Min82881])
Res82863 = keras.layers.Reshape((2, 1, 1, 1), name = 'Res82863', )(Min82881)
Glo91407 = keras.layers.GlobalMaxPool3D(name = 'Glo91407', )(Res82863)
Res41711 = keras.layers.Reshape((1, 1), name = 'Res41711', )(Glo91407)
Zer41303 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer41303', )(Res41711)
Con31413 = keras.layers.Concatenate(axis=2, name = 'Con31413', )([Zer41303,in0Con31413])
Sep10175 = keras.layers.SeparableConv1D(4, (1),strides=(1), padding='valid', name = 'Sep10175', )(in0Sep10175)
Zer68041 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer68041', )(Sep10175)
Ave18251 = keras.layers.Average(name = 'Ave18251', )([in0Ave18251,in1Ave18251])
Con31243 = keras.layers.Concatenate(axis=2, name = 'Con31243', )([Ave18251,in0Con31243])
Mul42857 = keras.layers.Multiply(name = 'Mul42857', )([Zer68041,Con31243])
Ave8844 = keras.layers.Average(name = 'Ave8844', )([Con31413,Mul42857])
Add59754 = keras.layers.Add(name = 'Add59754', )([Con93472,Ave8844])
model = tf.keras.models.Model(inputs=[in0Mul21462,in1Mul21462,in0Con93472,in0Min82881,in1Min82881,in0Con31413,in0Sep10175,in0Ave18251,in1Ave18251,in0Con31243], outputs=Add59754)
w = model.get_layer('Sep10175').get_weights() 
w[0] = np.array([[[0.8191], [0.8891]]])
w[1] = np.array([[[0.8609, 0.9706, 0.5534, 0.8848], [0.7488, 0.5628, 0.1541, 0.6236]]])
w[2] = np.array([0, 0, 0, 0])
model.get_layer('Sep10175').set_weights(w) 
in0Mul21462 = tf.constant([[[0.7538]]])
in1Mul21462 = tf.constant([[[0.0669]]])
in0Con93472 = tf.constant([[[0.8448, 0.4955, 0.7241], [0.6535, 0.1749, 0.5119]]])
in0Min82881 = tf.constant([[[[0.0379]], [[0.2587]]]])
in1Min82881 = tf.constant([[[[0.2864]], [[0.0728]]]])
in0Con31413 = tf.constant([[[0.7777, 0.2222, 0.7364], [0.3364, 0.5136, 0.6608]]])
in0Sep10175 = tf.constant([[[0.7957, 0.9348]]])
in0Ave18251 = tf.constant([[[0.9722], [0.6554]]])
in1Ave18251 = tf.constant([[[0.8355], [0.3696]]])
in0Con31243 = tf.constant([[[0.4862, 0.7761, 0.1353], [0.2398, 0.8782, 0.8344]]])
print (np.array2string(model.predict([in0Mul21462,in1Mul21462,in0Con93472,in0Min82881,in1Min82881,in0Con31413,in0Sep10175,in0Ave18251,in1Ave18251,in0Con31243],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Add59754.png')

LMul21462 = multiply_layer([[[[0.7538]]], [[[0.0669]]]], Mul21462), 
LZer47260 = zero_padding1D_layer(Mul21462, 1, 0, Zer47260), 
LCon93472 = concatenate_layer([Zer47260,[[[0.8448, 0.4955, 0.7241], [0.6535, 0.1749, 0.5119]]]], 2, Con93472), 
LMin82881 = minimum_layer([[[[[0.0379]], [[0.2587]]]], [[[[0.2864]], [[0.0728]]]]], Min82881), 
LRes82863 = reshape_layer(Min82881, [2, 1, 1, 1], Res82863), 
LGlo91407 = global_max_pool3D_layer(Res82863, Glo91407), 
LRes41711 = reshape_layer(Glo91407, [1, 1], Res41711), 
LZer41303 = zero_padding1D_layer(Res41711, 1, 0, Zer41303), 
LCon31413 = concatenate_layer([Zer41303,[[[0.7777, 0.2222, 0.7364], [0.3364, 0.5136, 0.6608]]]], 2, Con31413), 
LSep10175 = separable_conv1D_layer([[[0.7957, 0.9348]]], 1,[[[[0.8191], [0.8891]]],[[[0.8609, 0.9706, 0.5534, 0.8848], [0.7488, 0.5628, 0.1541, 0.6236]]]],[0, 0, 0, 0], 1, false, Sep10175), 
LZer68041 = zero_padding1D_layer(Sep10175, 1, 0, Zer68041), 
LAve18251 = average_layer([[[[0.9722], [0.6554]]], [[[0.8355], [0.3696]]]], Ave18251), 
LCon31243 = concatenate_layer([Ave18251,[[[0.4862, 0.7761, 0.1353], [0.2398, 0.8782, 0.8344]]]], 2, Con31243), 
LMul42857 = multiply_layer([Zer68041,Con31243], Mul42857), 
LAve8844 = average_layer([Con31413,Mul42857], Ave8844), 
LAdd59754 = add_layer([Con93472,Ave8844], Add59754), 
exec_layers([LMul21462,LZer47260,LCon93472,LMin82881,LRes82863,LGlo91407,LRes41711,LZer41303,LCon31413,LSep10175,LZer68041,LAve18251,LCon31243,LMul42857,LAve8844,LAdd59754],["Mul21462","Zer47260","Con93472","Min82881","Res82863","Glo91407","Res41711","Zer41303","Con31413","Sep10175","Zer68041","Ave18251","Con31243","Mul42857","Ave8844","Add59754"],Add59754,"Add59754")

Actual (Unparsed): [[[0.0000000, 1.2336500, 0.6066000, 1.0923000], [0.3900880, 0.9536328, 0.6463145, 1.2991208]]]

Expected (Unparsed): [[[0.0,1.23365,0.6066,1.0923],[0.3900880271384187,0.9536327485855873,0.6463145349014985,1.2991208396028928]]]

Actual:   [[[0, 1.2337, 0.6066, 1.0923], [0.3901, 0.9537, 0.6464, 1.2992]]]

Expected: [[[0, 1.2337, 0.6066, 1.0923], [0.3901, 0.9537, 0.6464, 1.2992]]]