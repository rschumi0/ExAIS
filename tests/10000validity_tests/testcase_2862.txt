import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0PRe18080 = tf.keras.layers.Input(shape=([2, 2, 1, 1]))
in0Con33913 = tf.keras.layers.Input(shape=([3, 3, 2, 2]))
in0Sub14645 = tf.keras.layers.Input(shape=([3, 3, 2, 3]))
in1Sub14645 = tf.keras.layers.Input(shape=([3, 3, 2, 3]))
in0Lay26499 = tf.keras.layers.Input(shape=([3]))
in0Con85613 = tf.keras.layers.Input(shape=([51]))

PRe18080 = keras.layers.PReLU(name = 'PRe18080', input_shape=(2, 2, 1, 1))(in0PRe18080)
Zer1609 = keras.layers.ZeroPadding3D(padding=((1, 0), (1, 0), (1, 0)), name = 'Zer1609', )(PRe18080)
Con33913 = keras.layers.Concatenate(axis=4, name = 'Con33913', )([Zer1609,in0Con33913])
Sub14645 = keras.layers.Subtract(name = 'Sub14645', )([in0Sub14645,in1Sub14645])
ReL53544 = keras.layers.ReLU(max_value=8.442618380626381, negative_slope=4.3830574012781245, threshold=7.1229676851305666, name = 'ReL53544', )(Sub14645)
Sub81602 = keras.layers.Subtract(name = 'Sub81602', )([Con33913,ReL53544])
Res48623 = keras.layers.Reshape((3, 3, 6), name = 'Res48623', )(Sub81602)
Res27844 = keras.layers.Reshape((3, 18), name = 'Res27844', )(Res48623)
Fla87148 = keras.layers.Flatten(name = 'Fla87148', )(Res27844)
Lay26499 = keras.layers.LayerNormalization(axis=1, epsilon=2.1502705879424155, name = 'Lay26499', )(in0Lay26499)
Con85613 = keras.layers.Concatenate(axis=1, name = 'Con85613', )([Lay26499,in0Con85613])
Mul56177 = keras.layers.Multiply(name = 'Mul56177', )([Fla87148,Con85613])
Res38514 = keras.layers.Reshape((54, 1), name = 'Res38514', )(Mul56177)
Cro90852 = keras.layers.Cropping1D(cropping=((1, 14)), name = 'Cro90852', )(Res38514)
model = tf.keras.models.Model(inputs=[in0PRe18080,in0Con33913,in0Sub14645,in1Sub14645,in0Lay26499,in0Con85613], outputs=Cro90852)
w = model.get_layer('PRe18080').get_weights() 
w[0] = np.array([[[[0.7923]], [[0.3885]]], [[[0.8013]], [[0.455]]]])
model.get_layer('PRe18080').set_weights(w) 
in0PRe18080 = tf.constant([[[[[0.4988]], [[0.7844]]], [[[0.282]], [[0.0865]]]]])
in0Con33913 = tf.constant([[[[[0.9069, 0.1283], [0.4212, 0.4424]], [[0.4474, 0.7013], [0.8566, 0.0331]], [[0.6266, 0.6873], [0.5745, 0.3177]]], [[[0.6163, 0.5606], [0.6041, 0.6593]], [[0.4264, 0.7973], [0.472, 0.5581]], [[0.6827, 0.3414], [0.757, 0.1422]]], [[[0.95, 0.3098], [0.7554, 0.4153]], [[0.2937, 0.29], [0.7811, 0.4855]], [[0.1642, 0.6111], [0.101, 0.2301]]]]])
in0Sub14645 = tf.constant([[[[[0.2788, 0.8935, 0.7515], [0.4173, 0.1032, 0.7161]], [[0.1244, 0.1145, 0.924], [0.8572, 0.8763, 0.0258]], [[0.1804, 0.1735, 0.7434], [0.9288, 0.8049, 0.3155]]], [[[0.5424, 0.4956, 0.3617], [0.4364, 0.4846, 0.909]], [[0.1092, 0.6624, 0.9169], [0.3854, 0.1285, 0.6186]], [[0.0313, 0.4423, 0.7806], [0.0291, 0.9761, 0.8691]]], [[[0.6652, 0.1713, 0.975], [0.0092, 0.9423, 0.7519]], [[0.5146, 0.1406, 0.3458], [0.5968, 0.396, 0.4559]], [[0.4715, 0.3955, 0.4626], [0.3842, 0.9526, 0.6274]]]]])
in1Sub14645 = tf.constant([[[[[0.1141, 0.7725, 0.949], [0.7122, 0.297, 0.7509]], [[0.9741, 0.3711, 0.5192], [0.9405, 0.4543, 0.1647]], [[0.5821, 0.0328, 0.5788], [0.1815, 0.1423, 0.669]]], [[[0.9308, 0.892, 0.9232], [0.9765, 0.1148, 0.2522]], [[0.377, 0.0838, 0.0934], [0.2469, 0.8709, 0.4272]], [[0.2303, 0.1919, 0.0116], [0.6867, 0.0996, 0.2846]]], [[[0.5588, 0.7451, 0.9647], [0.0838, 0.482, 0.1511]], [[0.4594, 0.8309, 0.1114], [0.1846, 0.4068, 0.7818]], [[0.005, 0.7715, 0.9042], [0.0083, 0.106, 0.1792]]]]])
in0Lay26499 = tf.constant([[1.7682, 1.4499, 1.0038]])
in0Con85613 = tf.constant([[0.5945, 0.9922, 0.2127, 0.0344, 0.2074, 0.8445, 0.3877, 0.0185, 0.1147, 0.8476, 0.6493, 0.4353, 0.556, 0.2753, 0.0561, 0.6121, 0.6243, 0.6287, 0.4274, 0.7222, 0.2616, 0.6844, 0.8393, 0.4705, 0.7515, 0.7886, 0.3327, 0.9797, 0.4201, 0.4886, 0.5536, 0.68, 0.2194, 0.2748, 0.0154, 0.3285, 0.0942, 0.4171, 0.423, 0.6334, 0.5575, 0.6237, 0.0331, 0.3454, 0.6918, 0.5233, 0.336, 0.0908, 0.8756, 0.7804, 0.4405]])
print (np.array2string(model.predict([in0PRe18080,in0Con33913,in0Sub14645,in1Sub14645,in0Lay26499,in0Con85613],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Cro90852.png')

LPRe18080 = prelu_layer([[[[[0.4988]], [[0.7844]]], [[[0.282]], [[0.0865]]]]], [[[[0.7923]], [[0.3885]]], [[[0.8013]], [[0.455]]]], PRe18080), 
LZer1609 = zero_padding3D_layer(PRe18080, 1, 0, 1, 0, 1, 0, Zer1609), 
LCon33913 = concatenate_layer([Zer1609,[[[[[0.9069, 0.1283], [0.4212, 0.4424]], [[0.4474, 0.7013], [0.8566, 0.0331]], [[0.6266, 0.6873], [0.5745, 0.3177]]], [[[0.6163, 0.5606], [0.6041, 0.6593]], [[0.4264, 0.7973], [0.472, 0.5581]], [[0.6827, 0.3414], [0.757, 0.1422]]], [[[0.95, 0.3098], [0.7554, 0.4153]], [[0.2937, 0.29], [0.7811, 0.4855]], [[0.1642, 0.6111], [0.101, 0.2301]]]]]], 4, Con33913), 
LSub14645 = subtract_layer([[[[[0.2788, 0.8935, 0.7515], [0.4173, 0.1032, 0.7161]], [[0.1244, 0.1145, 0.924], [0.8572, 0.8763, 0.0258]], [[0.1804, 0.1735, 0.7434], [0.9288, 0.8049, 0.3155]]], [[[0.5424, 0.4956, 0.3617], [0.4364, 0.4846, 0.909]], [[0.1092, 0.6624, 0.9169], [0.3854, 0.1285, 0.6186]], [[0.0313, 0.4423, 0.7806], [0.0291, 0.9761, 0.8691]]], [[[0.6652, 0.1713, 0.975], [0.0092, 0.9423, 0.7519]], [[0.5146, 0.1406, 0.3458], [0.5968, 0.396, 0.4559]], [[0.4715, 0.3955, 0.4626], [0.3842, 0.9526, 0.6274]]]]], [[[[[0.1141, 0.7725, 0.949], [0.7122, 0.297, 0.7509]], [[0.9741, 0.3711, 0.5192], [0.9405, 0.4543, 0.1647]], [[0.5821, 0.0328, 0.5788], [0.1815, 0.1423, 0.669]]], [[[0.9308, 0.892, 0.9232], [0.9765, 0.1148, 0.2522]], [[0.377, 0.0838, 0.0934], [0.2469, 0.8709, 0.4272]], [[0.2303, 0.1919, 0.0116], [0.6867, 0.0996, 0.2846]]], [[[0.5588, 0.7451, 0.9647], [0.0838, 0.482, 0.1511]], [[0.4594, 0.8309, 0.1114], [0.1846, 0.4068, 0.7818]], [[0.005, 0.7715, 0.9042], [0.0083, 0.106, 0.1792]]]]], Sub14645), 
LReL53544 = relu_layer(Sub14645, 8.442618380626381, 4.3830574012781245, 7.1229676851305666, ReL53544), 
LSub81602 = subtract_layer(Con33913,ReL53544, Sub81602), 
LRes48623 = reshape_layer(Sub81602, [3, 3, 6], Res48623), 
LRes27844 = reshape_layer(Res48623, [3, 18], Res27844), 
LFla87148 = flatten_layer(Res27844, Fla87148), 
LLay26499 = layer_normalization_layer([[1.7682, 1.4499, 1.0038]], 1, 2.1502705879424155, Lay26499), 
LCon85613 = concatenate_layer([Lay26499,[[0.5945, 0.9922, 0.2127, 0.0344, 0.2074, 0.8445, 0.3877, 0.0185, 0.1147, 0.8476, 0.6493, 0.4353, 0.556, 0.2753, 0.0561, 0.6121, 0.6243, 0.6287, 0.4274, 0.7222, 0.2616, 0.6844, 0.8393, 0.4705, 0.7515, 0.7886, 0.3327, 0.9797, 0.4201, 0.4886, 0.5536, 0.68, 0.2194, 0.2748, 0.0154, 0.3285, 0.0942, 0.4171, 0.423, 0.6334, 0.5575, 0.6237, 0.0331, 0.3454, 0.6918, 0.5233, 0.336, 0.0908, 0.8756, 0.7804, 0.4405]]], 1, Con85613), 
LMul56177 = multiply_layer([Fla87148,Con85613], Mul56177), 
LRes38514 = reshape_layer(Mul56177, [54, 1], Res38514), 
LCro90852 = cropping1D_layer(Res38514, 1, 14, Cro90852), 
exec_layers([LPRe18080,LZer1609,LCon33913,LSub14645,LReL53544,LSub81602,LRes48623,LRes27844,LFla87148,LLay26499,LCon85613,LMul56177,LRes38514,LCro90852],["PRe18080","Zer1609","Con33913","Sub14645","ReL53544","Sub81602","Res48623","Res27844","Fla87148","Lay26499","Con85613","Mul56177","Res38514","Cro90852"],Cro90852,"Cro90852")

Actual (Unparsed): [[[0.8976394], [-8.6684243], [19.3289429], [32.2375834], [6.7671155], [1.2020963], [6.8011578], [25.4594918], [12.2456922], [0.5592055], [3.6546038], [27.9547377], [20.2778202], [13.5753636], [15.5373740], [7.9535993], [1.8562080], [20.1520190], [20.9603234], [21.5279856], [14.3553680], [21.8130548], [7.5866310], [22.1705631], [24.4326427], [13.3660713], [23.3807606], [27.5586988], [10.2935917], [31.4411257], [12.9414153], [13.7742224], [19.3134850], [19.1322261], [6.3188691], [8.4512045], [0.5341548], [10.3428326], [2.9717606]]]

Expected (Unparsed): [[[0.897639492705126],[-8.668424256879423],[19.328942746183444],[32.23758285624933],[6.767115719975733],[1.2020963076203408],[6.801158020936911],[25.45949162576383],[12.245692500732456],[0.5592055311486858],[3.6546038491362824],[27.954738310114653],[20.27782083972228],[13.575363735154774],[15.537374094083122],[7.953599357973814],[1.856208021975055],[20.152018779904715],[20.96032323164726],[21.527984984331436],[14.355368249149008],[21.81305552268597],[7.586631288464758],[22.17056242195346],[24.43264342650411],[13.366071491099946],[23.38076027014651],[27.55869795514288],[10.29359129419558],[31.4411247797499],[12.941415192266295],[13.774222806873132],[19.313484597353753],[19.132225965026194],[6.3188690121642646],[8.451204400282347],[0.5341547683507393],[10.342832598137065],[2.9717605879328106]]]

Actual:   [[[0.8977], [-8.6684], [19.329], [32.2376], [6.7672], [1.2021], [6.8012], [25.4595], [12.2457], [0.5593], [3.6547], [27.9548], [20.2779], [13.5754], [15.5374], [7.9536], [1.8563], [20.1521], [20.9604], [21.528], [14.3554], [21.8131], [7.5867], [22.1706], [24.4327], [13.3661], [23.3808], [27.5587], [10.2936], [31.4412], [12.9415], [13.7743], [19.3135], [19.1323], [6.3189], [8.4513], [0.5342], [10.3429], [2.9718]]]

Expected: [[[0.8977], [-8.6684], [19.329], [32.2376], [6.7672], [1.2021], [6.8012], [25.4595], [12.2457], [0.5593], [3.6547], [27.9548], [20.2779], [13.5754], [15.5374], [7.9536], [1.8563], [20.1521], [20.9604], [21.528], [14.3554], [21.8131], [7.5867], [22.1706], [24.4327], [13.3661], [23.3808], [27.5587], [10.2936], [31.4412], [12.9415], [13.7743], [19.3135], [19.1323], [6.3189], [8.4513], [0.5342], [10.3429], [2.9718]]]