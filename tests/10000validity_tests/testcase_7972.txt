import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Cro2234 = tf.keras.layers.Input(shape=([4, 1]))
in0Con87787 = tf.keras.layers.Input(shape=([2, 1]))
in0Lea2609 = tf.keras.layers.Input(shape=([2, 2]))
in0Max58953 = tf.keras.layers.Input(shape=([1, 1, 1]))
in1Max58953 = tf.keras.layers.Input(shape=([1, 1, 1]))
in0Con79594 = tf.keras.layers.Input(shape=([4, 10]))

Cro2234 = keras.layers.Cropping1D(cropping=((2, 1)), name = 'Cro2234', )(in0Cro2234)
Zer85014 = keras.layers.ZeroPadding1D(padding=((1, 0)), name = 'Zer85014', )(Cro2234)
Con87787 = keras.layers.Concatenate(axis=2, name = 'Con87787', )([Zer85014,in0Con87787])
Lea2609 = keras.layers.LeakyReLU(alpha=7.583909652959561, name = 'Lea2609', input_shape=(2, 2))(in0Lea2609)
Mul22218 = keras.layers.Multiply(name = 'Mul22218', )([Con87787,Lea2609])
Res98100 = keras.layers.Reshape((2, 2, 1), name = 'Res98100', )(Mul22218)
Res7889 = keras.layers.Reshape((2, 2, 1, 1), name = 'Res7889', )(Res98100)
Zer70132 = keras.layers.ZeroPadding3D(padding=((1, 1), (1, 1), (1, 1)), name = 'Zer70132', )(Res7889)
Res53384 = keras.layers.Reshape((4, 4, 3), name = 'Res53384', )(Zer70132)
Res80935 = keras.layers.Reshape((4, 12), name = 'Res80935', )(Res53384)
Max58953 = keras.layers.Maximum(name = 'Max58953', )([in0Max58953,in1Max58953])
Res65781 = keras.layers.Reshape((1, 1), name = 'Res65781', )(Max58953)
Con434 = keras.layers.Conv1D(2, (1),strides=(1), padding='same', dilation_rate=(1), name = 'Con434', )(Res65781)
Zer91270 = keras.layers.ZeroPadding1D(padding=((3, 0)), name = 'Zer91270', )(Con434)
Con79594 = keras.layers.Concatenate(axis=2, name = 'Con79594', )([Zer91270,in0Con79594])
Min45741 = keras.layers.Minimum(name = 'Min45741', )([Res80935,Con79594])
model = tf.keras.models.Model(inputs=[in0Cro2234,in0Con87787,in0Lea2609,in0Max58953,in1Max58953,in0Con79594], outputs=Min45741)
w = model.get_layer('Con434').get_weights() 
w[0] = np.array([[[0.8966, 0.2526]]])
w[1] = np.array([0, 0])
model.get_layer('Con434').set_weights(w) 
in0Cro2234 = tf.constant([[[1.6114], [1.2992], [1.9773], [1.9218]]])
in0Con87787 = tf.constant([[[0.9236], [0.0127]]])
in0Lea2609 = tf.constant([[[0.0567, 0.9965], [0.3684, 0.2687]]])
in0Max58953 = tf.constant([[[[0.358]]]])
in1Max58953 = tf.constant([[[[0.9362]]]])
in0Con79594 = tf.constant([[[0.1617, 0.743, 0.5031, 0.531, 0.1931, 0.891, 0.2466, 0.2129, 0.6465, 0.1597], [0.5316, 0.4039, 0.7547, 0.9578, 0.1832, 0.0483, 0.264, 0.6139, 0.8535, 0.5263], [0.0608, 0.0504, 0.9966, 0.1339, 0.327, 0.1276, 0.563, 0.047, 0.0686, 0.5396], [0.0336, 0.1617, 0.6703, 0.2364, 0.8577, 0.5639, 0.4633, 0.2231, 0.8412, 0.023]]])
print (np.array2string(model.predict([in0Cro2234,in0Con87787,in0Lea2609,in0Max58953,in1Max58953,in0Con79594],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Min45741.png')

LCro2234 = cropping1D_layer([[[1.6114], [1.2992], [1.9773], [1.9218]]], 2, 1, Cro2234), 
LZer85014 = zero_padding1D_layer(Cro2234, 1, 0, Zer85014), 
LCon87787 = concatenate_layer([Zer85014,[[[0.9236], [0.0127]]]], 2, Con87787), 
LLea2609 = leaky_relu_layer([[[0.0567, 0.9965], [0.3684, 0.2687]]], 7.583909652959561, Lea2609), 
LMul22218 = multiply_layer([Con87787,Lea2609], Mul22218), 
LRes98100 = reshape_layer(Mul22218, [2, 2, 1], Res98100), 
LRes7889 = reshape_layer(Res98100, [2, 2, 1, 1], Res7889), 
LZer70132 = zero_padding3D_layer(Res7889, 1, 1, 1, 1, 1, 1, Zer70132), 
LRes53384 = reshape_layer(Zer70132, [4, 4, 3], Res53384), 
LRes80935 = reshape_layer(Res53384, [4, 12], Res80935), 
LMax58953 = maximum_layer([[[[[0.358]]]], [[[[0.9362]]]]], Max58953), 
LRes65781 = reshape_layer(Max58953, [1, 1], Res65781), 
LCon434 = conv1D_layer(Res65781, 1,[[[0.8966, 0.2526]]],[0, 0], 1, true, 1, Con434), 
LZer91270 = zero_padding1D_layer(Con434, 3, 0, Zer91270), 
LCon79594 = concatenate_layer([Zer91270,[[[0.1617, 0.743, 0.5031, 0.531, 0.1931, 0.891, 0.2466, 0.2129, 0.6465, 0.1597], [0.5316, 0.4039, 0.7547, 0.9578, 0.1832, 0.0483, 0.264, 0.6139, 0.8535, 0.5263], [0.0608, 0.0504, 0.9966, 0.1339, 0.327, 0.1276, 0.563, 0.047, 0.0686, 0.5396], [0.0336, 0.1617, 0.6703, 0.2364, 0.8577, 0.5639, 0.4633, 0.2231, 0.8412, 0.023]]]], 2, Con79594), 
LMin45741 = minimum_layer([Res80935,Con79594], Min45741), 
exec_layers([LCro2234,LZer85014,LCon87787,LLea2609,LMul22218,LRes98100,LRes7889,LZer70132,LRes53384,LRes80935,LMax58953,LRes65781,LCon434,LZer91270,LCon79594,LMin45741],["Cro2234","Zer85014","Con87787","Lea2609","Mul22218","Res98100","Res7889","Zer70132","Res53384","Res80935","Max58953","Res65781","Con434","Zer91270","Con79594","Min45741"],Min45741,"Min45741")

Actual (Unparsed): [[[0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0483000, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.7284374, 0.0000000, 0.0000000, 0.0034125, 0.0000000, 0.0000000, 0.0000000, 0.0000000], [0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000, 0.0000000]]]

Expected (Unparsed): [[[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0.0,0,0,0.0483,0,0,0,0],[0,0,0,0,0.72843732,0,0,0.00341249,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0]]]

Actual:   [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0.0483, 0, 0, 0, 0], [0, 0, 0, 0, 0.7285, 0, 0, 0.0035, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]

Expected: [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0.0483, 0, 0, 0, 0], [0, 0, 0, 0, 0.7285, 0, 0, 0.0035, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]