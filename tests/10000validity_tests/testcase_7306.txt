import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Ave84805 = tf.keras.layers.Input(shape=([2, 2, 1]))
in1Ave84805 = tf.keras.layers.Input(shape=([2, 2, 1]))

Ave84805 = keras.layers.Average(name = 'Ave84805', )([in0Ave84805,in1Ave84805])
Den75134 = keras.layers.Dense(3,name = 'Den75134', )(Ave84805)
Res46201 = keras.layers.Reshape((2, 6), name = 'Res46201', )(Den75134)
Per94465 = keras.layers.Permute((1,2), name = 'Per94465',)(Res46201)
model = tf.keras.models.Model(inputs=[in0Ave84805,in1Ave84805], outputs=Per94465)
w = model.get_layer('Den75134').get_weights() 
w[0] = np.array([[0.507, 0.8962, 0.6332]])
w[1] = np.array([0.3321, 0.343, 0.5143])
model.get_layer('Den75134').set_weights(w) 
in0Ave84805 = tf.constant([[[[0.693], [0.5146]], [[0.5394], [0.414]]]])
in1Ave84805 = tf.constant([[[[0.9662], [0.7574]], [[0.4318], [0.0834]]]])
print (np.array2string(model.predict([in0Ave84805,in1Ave84805],steps=1), separator=', '))
from tensorflow.keras.utils import plot_model
plot_model(model, to_file='Per94465.png')

LAve84805 = average_layer([[[[[0.693], [0.5146]], [[0.5394], [0.414]]]], [[[[0.9662], [0.7574]], [[0.4318], [0.0834]]]]], Ave84805), 
LDen75134 = dense_layer(Ave84805, [[0.507, 0.8962, 0.6332]],[0.3321, 0.343, 0.5143], Den75134), 
LRes46201 = reshape_layer(Den75134, [2, 6], Res46201), 
LPer94465 = permute_layer(Res46201, 1,2, Per94465), 
exec_layers([LAve84805,LDen75134,LRes46201,LPer94465],["Ave84805","Den75134","Res46201","Per94465"],Per94465,"Per94465")

Actual (Unparsed): [[[0.7527072, 1.0864875, 1.0396027, 0.6545520, 0.9129832, 0.9170152], [0.5782992, 0.7781947, 0.8217819, 0.4581909, 0.5658849, 0.6717768]]]

Expected (Unparsed): [[[0.7527071999999999,1.08648752,1.03960272,0.654552,0.9129832,0.9170151999999999],[0.5782992,0.7781947200000001,0.82178192,0.45819089999999996,0.56588494,0.6717768399999999]]]

Actual:   [[[0.7528, 1.0865, 1.0397, 0.6546, 0.913, 0.9171], [0.5783, 0.7782, 0.8218, 0.4582, 0.5659, 0.6718]]]

Expected: [[[0.7528, 1.0865, 1.0397, 0.6546, 0.913, 0.9171], [0.5783, 0.7782, 0.8218, 0.4582, 0.5659, 0.6718]]]