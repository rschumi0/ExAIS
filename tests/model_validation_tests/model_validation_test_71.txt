import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Loc66673 = tf.keras.layers.Input(shape=([2, 2]))

Loc66673 = keras.layers.LocallyConnected1D(2, (2),strides=(1), name = 'Loc66673', )(in0Loc66673)
Lea85259 = keras.layers.LeakyReLU(alpha=2.4896469680229267, name = 'Lea85259', )(Loc66673)
Res28058 = keras.layers.Reshape((1, 2, 1), name = 'Res28058', )(Lea85259)
Cro79820 = keras.layers.Cropping2D(cropping=((0, 0), (1, 0)), name = 'Cro79820', )(Res28058)
Res85058 = keras.layers.Reshape((1, 1), name = 'Res85058', )(Cro79820)
Con52378 = keras.layers.Conv1DTranspose(2, (1),strides=(1), padding='same', name = 'Con52378', )(Res85058)
Ave51688 = keras.layers.AveragePooling1D(pool_size=(2), strides=(2), padding='valid', name = 'Ave51688', )(Con52378)
model = tf.keras.models.Model(inputs=[in0Loc66673], outputs=Ave51688)
w = model.get_layer('Loc66673').get_weights() 
w[0] = np.array([[[0.2379, 0.7717], [0.3475, 0.1006], [0.9571, 0.4569], [0.8967, 0.656]]])
w[1] = np.array([[0, 0]])
model.get_layer('Loc66673').set_weights(w) 
w = model.get_layer('Con52378').get_weights() 
w[0] = np.array([[[0.6422], [0.1199]]])
w[1] = np.array([0, 0])
model.get_layer('Con52378').set_weights(w) 
in0Loc66673 = tf.constant([[[0.855, 0.3093], [0.8935, 0.5038]]])
print (np.array2string(model.predict([in0Loc66673],steps=1), separator=', '))


LLoc66673 = locally_connected1D_layer([[[0.855, 0.3093], [0.8935, 0.5038]]], 2,[[[0.2379, 0.7717], [0.3475, 0.1006], [0.9571, 0.4569], [0.8967, 0.656]]],[[0, 0]], 1, Loc66673), 
LLea85259 = leaky_relu_layer(Loc66673, 2.4896469680229267, Lea85259), 
LRes28058 = reshape_layer(Lea85259, [1, 2, 1], Res28058), 
LCro79820 = cropping2D_layer(Res28058, 0, 0, 1, 0, Cro79820), 
LRes85058 = reshape_layer(Cro79820, [1, 1], Res85058), 
LCon52378 = conv1D_transpose_layer(Res85058, 1,[[[0.6422], [0.1199]]],[0, 0], 1, true, Con52378), 
LAve51688 = average_pooling1D_layer(Con52378, 2, 2, false, Ave51688), 
exec_layers([LLoc66673,LLea85259,LRes28058,LCro79820,LRes85058,LCon52378,LAve51688],["Loc66673","Lea85259","Res28058","Cro79820","Res85058","Con52378","Ave51688"],Ave51688,"Ave51688")

Actual (Unparsed): 
 ValueError(str(e))ValueError: Negative dimension size caused by subtracting 2 from 1 for '{{node Ave51688/AvgPool}} = AvgPool[T=DT_DOUBLE, data_format="NHWC", ksize=[1, 2, 1, 1], padding="VALID", strides=[1, 2, 1, 1]](Ave51688/ExpandDims)' with input shapes: [?,1,1,2].

Expected (Unparsed): 
Ave51688: Shape Error

Actual:   

Expected: 