import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul97337 = tf.keras.layers.Input(shape=([1, 2]))
in1Mul97337 = tf.keras.layers.Input(shape=([1, 2]))

Mul97337 = keras.layers.Multiply(name = 'Mul97337', )([in0Mul97337,in1Mul97337])
Max51816 = keras.layers.MaxPool1D(pool_size=(2), name = 'Max51816', )(Mul97337)
model = tf.keras.models.Model(inputs=[in0Mul97337,in1Mul97337], outputs=Max51816)
in0Mul97337 = tf.constant([[[0.2382, 0.9562]]])
in1Mul97337 = tf.constant([[[0.1586, 0.7327]]])
print (np.array2string(model.predict([in0Mul97337,in1Mul97337],steps=1), separator=', '))


LMul97337 = multiply_layer([[[[0.2382, 0.9562]]], [[[0.1586, 0.7327]]]], Mul97337), 
LMax51816 = max_pool1D_layer(Mul97337, 2, Max51816), 
exec_layers([LMul97337,LMax51816],["Mul97337","Max51816"],Max51816,"Max51816")

Actual (Unparsed): 
 ValueError(str(e))ValueError: Negative dimension size caused by subtracting 2 from 1 for '{{node Max51816/MaxPool}} = MaxPool[T=DT_DOUBLE, data_format="NHWC", explicit_paddings=[], ksize=[1, 2, 1, 1], padding="VALID", strides=[1, 2, 1, 1]](Max51816/ExpandDims)' with input shapes: [?,1,1,2].

Expected (Unparsed): 
Max51816: Shape Error

Actual:   

Expected: 