import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sim29752 = tf.keras.layers.Input(shape=([3, 3]))

Sim29752 = keras.layers.SimpleRNN(2,name = 'Sim29752', )(in0Sim29752)
Zer28675 = keras.layers.ZeroPadding1D(padding=((1, 1)), name = 'Zer28675', )(Sim29752)
model = tf.keras.models.Model(inputs=[in0Sim29752], outputs=Zer28675)
w = model.get_layer('Sim29752').get_weights() 
w[0] = np.array([[9, 8], [6, 7], [10, 7]])
w[1] = np.array([[6, 3], [6, 3]])
w[2] = np.array([4, 6])
model.get_layer('Sim29752').set_weights(w) 
in0Sim29752 = tf.constant([[[3, 10, 4], [1, 8, 6], [1, 10, 1]]])
print (np.array2string(model.predict([in0Sim29752],steps=1), separator=', '))


LSim29752 = simple_rnn_layer([[[3, 10, 4], [1, 8, 6], [1, 10, 1]]],[[9, 8], [6, 7], [10, 7]],[[6, 3], [6, 3]],[4, 6], Sim29752), 
LZer28675 = zero_padding1D_layer(Sim29752, 1, 1, Zer28675), 
exec_layers([LSim29752,LZer28675],["Sim29752","Zer28675"],Zer28675,"Zer28675")

Actual (Unparsed): 
 ValueError('Input ' + str(input_index) + ' of layer ' +ValueError: Input 0 of layer Zer28675 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 2)

Expected (Unparsed): 
Zer28675: Dimension error, Input Shape [1,2]

Actual:   

Expected: 