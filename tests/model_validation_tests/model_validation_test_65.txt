import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul62784 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Mul62784 = tf.keras.layers.Input(shape=([2, 2, 2]))

Mul62784 = keras.layers.Multiply(name = 'Mul62784', )([in0Mul62784,in1Mul62784])
GRU13101 = keras.layers.RNN(keras.layers.GRUCell(3,reset_after=True, recurrent_activation='sigmoid', ), name = 'GRU13101',)(Mul62784)
model = tf.keras.models.Model(inputs=[in0Mul62784,in1Mul62784], outputs=GRU13101)
w = model.get_layer('GRU13101').get_weights() 
w[0] = np.array([[3, 10, 10, 3, 4, 3, 9, 4, 9]])
w[1] = np.array([[6, 4, 6, 10, 4, 1, 9, 9, 6], [4, 1, 5, 10, 5, 10, 6, 8, 7], [3, 6, 10, 8, 9, 8, 3, 1, 7]])
w[2] = np.array([[7, 10, 4, 9, 5, 7, 2, 3, 1], [3, 2, 4, 7, 2, 3, 4, 3, 1]])
model.get_layer('GRU13101').set_weights(w) 
in0Mul62784 = tf.constant([[[[0.5214, 0.8095], [0.6169, 0.1138]], [[0.5777, 0.4011], [0.8188, 0.9218]]]])
in1Mul62784 = tf.constant([[[[0.0979, 0.2567], [0.5548, 0.942]], [[0.0097, 0.6146], [0.3552, 0.4324]]]])
print (np.array2string(model.predict([in0Mul62784,in1Mul62784],steps=1), separator=', '))


LMul62784 = multiply_layer([[[[[0.5214, 0.8095], [0.6169, 0.1138]], [[0.5777, 0.4011], [0.8188, 0.9218]]]], [[[[0.0979, 0.2567], [0.5548, 0.942]], [[0.0097, 0.6146], [0.3552, 0.4324]]]]], Mul62784), 
LGRU13101 = grucell_layer(Mul62784,[[3, 10, 10, 3, 4, 3, 9, 4, 9]],[[6, 4, 6, 10, 4, 1, 9, 9, 6], [4, 1, 5, 10, 5, 10, 6, 8, 7], [3, 6, 10, 8, 9, 8, 3, 1, 7]],[[7, 10, 4, 9, 5, 7, 2, 3, 1], [3, 2, 4, 7, 2, 3, 4, 3, 1]], true, GRU13101), 
exec_layers([LMul62784,LGRU13101],["Mul62784","GRU13101"],GRU13101,"GRU13101")

Actual (Unparsed): 
 ValueError(str(e))ValueError: Shapes must be equal rank, but are 3 and 2

Expected (Unparsed): 
GRU13101: Dimension error, Input Shape [1,2,2,2]

Actual:   

Expected: 