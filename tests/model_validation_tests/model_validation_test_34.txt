import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Fla27574 = tf.keras.layers.Input(shape=([3, 1]))

Fla27574 = keras.layers.Flatten(name = 'Fla27574',  input_shape=(3, 1))(in0Fla27574)
Res51960 = keras.layers.Reshape((3, 1), name = 'Res51960', )(Fla27574)
Con34679 = keras.layers.Conv2D(3, (2, 1),strides=(1, 1), padding='same', dilation_rate=(1, 1), name = 'Con34679', )(Res51960)
model = tf.keras.models.Model(inputs=[in0Fla27574], outputs=Con34679)
w = model.get_layer('Con34679').get_weights() 
w[0] = np.array([[[[0.2199, 0.7973, 0.6157]]], [[[0.4164, 0.5558, 0.1993]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con34679').set_weights(w) 
in0Fla27574 = tf.constant([[[1.9179], [1.1716], [1.3191]]])
print (np.array2string(model.predict([in0Fla27574],steps=1), separator=', '))


LFla27574 = flatten_layer([[[1.9179], [1.1716], [1.3191]]], Fla27574), 
LRes51960 = reshape_layer(Fla27574, [3, 1], Res51960), 
LCon34679 = conv2D_layer(Res51960, 2, 1,[[[[0.2199, 0.7973, 0.6157]]], [[[0.4164, 0.5558, 0.1993]]]],[0, 0, 0], 1, 1, true, 1, 1, Con34679), 
exec_layers([LFla27574,LRes51960,LCon34679],["Fla27574","Res51960","Con34679"],Con34679,"Con34679")

Actual (Unparsed): 
 ValueError('Input ' + str(input_index) + ' of layer ' +ValueError: Input 0 of layer Con34679 is incompatible with the layer: : expected min_ndim=4, found ndim=3. Full shape received: (None, 3, 1)

Expected (Unparsed): 
Con34679: Dimension error, Input Shape [1,3,1]

Actual:   

Expected: 