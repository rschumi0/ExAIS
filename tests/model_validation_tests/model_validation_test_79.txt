import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul17687 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))
in1Mul17687 = tf.keras.layers.Input(shape=([1, 1, 2, 2]))

Mul17687 = keras.layers.Multiply(name = 'Mul17687', )([in0Mul17687,in1Mul17687])
Lay10206 = keras.layers.LayerNormalization(axis=1, epsilon=2.593477833088855, name = 'Lay10206', )(Mul17687)
Con56406 = keras.layers.Conv2D(4, (1, 2),strides=(1, 1), padding='same', dilation_rate=(1, 1), name = 'Con56406', )(Lay10206)
model = tf.keras.models.Model(inputs=[in0Mul17687,in1Mul17687], outputs=Con56406)
w = model.get_layer('Con56406').get_weights() 
w[0] = np.array([[[[0.167, 0.4311, 0.2627, 0.1709]], [[0.6375, 0.0484, 0.4373, 0.3756]]]])
w[1] = np.array([0, 0, 0, 0])
model.get_layer('Con56406').set_weights(w) 
in0Mul17687 = tf.constant([[[[[0.5415, 0.3314], [0.1607, 0.213]]]]])
in1Mul17687 = tf.constant([[[[[0.6665, 0.016], [0.7659, 0.5936]]]]])
print (np.array2string(model.predict([in0Mul17687,in1Mul17687],steps=1), separator=', '))


LMul17687 = multiply_layer([[[[[[0.5415, 0.3314], [0.1607, 0.213]]]]], [[[[[0.6665, 0.016], [0.7659, 0.5936]]]]]], Mul17687), 
LLay10206 = layer_normalization_layer(Mul17687, 1, 2.593477833088855, Lay10206), 
LCon56406 = conv2D_layer(Lay10206, 1, 2,[[[[0.167, 0.4311, 0.2627, 0.1709]], [[0.6375, 0.0484, 0.4373, 0.3756]]]],[0, 0, 0, 0], 1, 1, true, 1, 1, Con56406), 
exec_layers([LMul17687,LLay10206,LCon56406],["Mul17687","Lay10206","Con56406"],Con56406,"Con56406")

Actual (Unparsed): 
 ValueError(ValueError: Layer weight shape (1, 2, 2, 4) not compatible with provided weight shape (1, 2, 1, 4)

Expected (Unparsed): 
Con56406: Dimension error, Input Shape [1,1,1,2,2]

Actual:   

Expected: 