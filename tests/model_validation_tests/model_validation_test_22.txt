import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0LST25872 = tf.keras.layers.Input(shape=([1, 2]))

LST25872 = keras.layers.RNN(keras.layers.LSTMCell(1,recurrent_activation='sigmoid', ), name = 'LST25872', input_shape=(1, 2))(in0LST25872)
Res3805 = keras.layers.Reshape((1, 1), name = 'Res3805', )(LST25872)
Sim46397 = keras.layers.SimpleRNN(3,name = 'Sim46397', )(Res3805)
Per68880 = keras.layers.Permute((2,1), name = 'Per68880',)(Sim46397)
model = tf.keras.models.Model(inputs=[in0LST25872], outputs=Per68880)
w = model.get_layer('LST25872').get_weights() 
w[0] = np.array([[8, 2, 9, 8], [3, 10, 7, 1]])
w[1] = np.array([[6, 3, 3, 5]])
w[2] = np.array([9, 9, 2, 6])
model.get_layer('LST25872').set_weights(w) 
w = model.get_layer('Sim46397').get_weights() 
w[0] = np.array([[7, 4, 4]])
w[1] = np.array([[10, 5, 5], [1, 7, 9], [2, 6, 10]])
w[2] = np.array([6, 3, 7])
model.get_layer('Sim46397').set_weights(w) 
in0LST25872 = tf.constant([[[9, 1]]])
print (np.array2string(model.predict([in0LST25872],steps=1), separator=', '))


LLST25872 = lstmcell_layer([[[9, 1]]],[[8, 2, 9, 8], [3, 10, 7, 1]],[[6, 3, 3, 5]],[9, 9, 2, 6], LST25872), 
LRes3805 = reshape_layer(LST25872, [1, 1], Res3805), 
LSim46397 = simple_rnn_layer(Res3805,[[7, 4, 4]],[[10, 5, 5], [1, 7, 9], [2, 6, 10]],[6, 3, 7], Sim46397), 
LPer68880 = permute_layer(Sim46397, 2,1, Per68880), 
exec_layers([LLST25872,LRes3805,LSim46397,LPer68880],["LST25872","Res3805","Sim46397","Per68880"],Per68880,"Per68880")

Actual (Unparsed): 
 ValueError('Input ' + str(input_index) + ' of layer ' +ValueError: Input 0 of layer Per68880 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 3)

Expected (Unparsed): 
Per68880: Dimension error, Input Shape [1,3]

Actual:   

Expected: 