import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul7353 = tf.keras.layers.Input(shape=([1, 1]))
in1Mul7353 = tf.keras.layers.Input(shape=([1, 1]))

Mul7353 = keras.layers.Multiply(name = 'Mul7353', )([in0Mul7353,in1Mul7353])
Res55588 = keras.layers.Reshape((1, 1, 1), name = 'Res55588', )(Mul7353)
Con25897 = keras.layers.Conv3D(3, (1, 1, 1),strides=(1, 4, 5), padding='same', dilation_rate=(1, 1, 1), name = 'Con25897', )(Res55588)
Up_46050 = keras.layers.UpSampling3D(size=(1, 2, 1), name = 'Up_46050', )(Con25897)
model = tf.keras.models.Model(inputs=[in0Mul7353,in1Mul7353], outputs=Up_46050)
w = model.get_layer('Con25897').get_weights() 
w[0] = np.array([[[[[0.3389, 0.1072, 0.4839], [0.5767, 0.8825, 0.0448]]]]])
w[1] = np.array([0, 0, 0])
model.get_layer('Con25897').set_weights(w) 
in0Mul7353 = tf.constant([[[0.5766]]])
in1Mul7353 = tf.constant([[[0.0355]]])
print (np.array2string(model.predict([in0Mul7353,in1Mul7353],steps=1), separator=', '))


LMul7353 = multiply_layer([[[[0.5766]]], [[[0.0355]]]], Mul7353), 
LRes55588 = reshape_layer(Mul7353, [1, 1, 1], Res55588), 
LCon25897 = conv3D_layer(Res55588, 1, 1, 1,[[[[[0.3389, 0.1072, 0.4839], [0.5767, 0.8825, 0.0448]]]]],[0, 0, 0], 1, 4, 5, true, 1, 1, 1, Con25897), 
LUp_46050 = up_sampling3D_layer(Con25897, 1, 2, 1, Up_46050), 
exec_layers([LMul7353,LRes55588,LCon25897,LUp_46050],["Mul7353","Res55588","Con25897","Up_46050"],Up_46050,"Up_46050")

Actual (Unparsed): 
 ValueError('Input ' + str(input_index) + ' of layer ' +ValueError: Input 0 of layer Con25897 is incompatible with the layer: : expected min_ndim=5, found ndim=4. Full shape received: (None, 1, 1, 1)

Expected (Unparsed): 
Con25897: Dimension error, Input Shape [1,1,1,1]

Actual:   

Expected: 