import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Sim95128 = tf.keras.layers.Input(shape=([3, 2]))

Sim95128 = keras.layers.SimpleRNN(1,name = 'Sim95128', )(in0Sim95128)
ReL20228 = keras.layers.ReLU(max_value=3.2452670716815932, negative_slope=0.14339679482648127, threshold=9.71145077858305, name = 'ReL20228', )(Sim95128)
Sim98133 = keras.layers.SimpleRNN(2,name = 'Sim98133', )(ReL20228)
model = tf.keras.models.Model(inputs=[in0Sim95128], outputs=Sim98133)
w = model.get_layer('Sim95128').get_weights() 
w[0] = np.array([[8], [2]])
w[1] = np.array([[1]])
w[2] = np.array([3])
model.get_layer('Sim95128').set_weights(w) 
w = model.get_layer('Sim98133').get_weights() 
w[0] = np.array([[7, 10], [8, 5], [5, 10]])
w[1] = np.array([[2, 6], [1, 2]])
w[2] = np.array([9, 3])
model.get_layer('Sim98133').set_weights(w) 
in0Sim95128 = tf.constant([[[8, 2], [7, 8], [1, 8]]])
print (np.array2string(model.predict([in0Sim95128],steps=1), separator=', '))


LSim95128 = simple_rnn_layer([[[8, 2], [7, 8], [1, 8]]],[[8], [2]],[[1]],[3], Sim95128), 
LReL20228 = relu_layer(Sim95128, 3.2452670716815932, 0.14339679482648127, 9.71145077858305, ReL20228), 
LSim98133 = simple_rnn_layer(ReL20228,[[7, 10], [8, 5], [5, 10]],[[2, 6], [1, 2]],[9, 3], Sim98133), 
exec_layers([LSim95128,LReL20228,LSim98133],["Sim95128","ReL20228","Sim98133"],Sim98133,"Sim98133")

Actual (Unparsed): 
 ValueError('Input ' + str(input_index) + ' of layer ' +ValueError: Input 0 of layer Sim98133 is incompatible with the layer: expected ndim=3, found ndim=2. Full shape received: (None, 1)

Expected (Unparsed): 
Sim98133: Dimension error, Input Shape [1,1]

Actual:   

Expected: 