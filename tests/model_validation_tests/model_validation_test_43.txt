import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Mul74884 = tf.keras.layers.Input(shape=([2, 1]))
in1Mul74884 = tf.keras.layers.Input(shape=([2, 1]))

Mul74884 = keras.layers.Multiply(name = 'Mul74884', )([in0Mul74884,in1Mul74884])
Res44232 = keras.layers.Reshape((2, 1, 1), name = 'Res44232', )(Mul74884)
Up_13964 = keras.layers.UpSampling2D(size=(2, 1), name = 'Up_13964', )(Res44232)
Up_33934 = keras.layers.UpSampling1D(size=(2), name = 'Up_33934', )(Up_13964)
model = tf.keras.models.Model(inputs=[in0Mul74884,in1Mul74884], outputs=Up_33934)
in0Mul74884 = tf.constant([[[0.7004], [0.5773]]])
in1Mul74884 = tf.constant([[[0.9162], [0.7001]]])
print (np.array2string(model.predict([in0Mul74884,in1Mul74884],steps=1), separator=', '))


LMul74884 = multiply_layer([[[[0.7004], [0.5773]]], [[[0.9162], [0.7001]]]], Mul74884), 
LRes44232 = reshape_layer(Mul74884, [2, 1, 1], Res44232), 
LUp_13964 = up_sampling2D_layer(Res44232, 2, 1, Up_13964), 
LUp_33934 = up_sampling1D_layer(Up_13964, 2, Up_33934), 
exec_layers([LMul74884,LRes44232,LUp_13964,LUp_33934],["Mul74884","Res44232","Up_13964","Up_33934"],Up_33934,"Up_33934")

Actual (Unparsed): 
 ValueError('Input ' + str(input_index) + ' of layer ' +ValueError: Input 0 of layer Up_33934 is incompatible with the layer: expected ndim=3, found ndim=4. Full shape received: (None, 4, 1, 1)

Expected (Unparsed): 
Up_33934: Dimension error, Input Shape [1,4,1,1]

Actual:   

Expected: 