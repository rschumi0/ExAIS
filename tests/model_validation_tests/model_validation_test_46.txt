import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Max37790 = tf.keras.layers.Input(shape=([2, 2, 2]))
in1Max37790 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Sim57651 = tf.keras.layers.Input(shape=([3, 3]))
in0Mul29210 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))
in1Mul29210 = tf.keras.layers.Input(shape=([2, 1, 1, 1]))

Max37790 = keras.layers.Maximum(name = 'Max37790', )([in0Max37790,in1Max37790])
Res60383 = keras.layers.Reshape((2, 4), name = 'Res60383', )(Max37790)
Sim57651 = keras.layers.RNN(keras.layers.SimpleRNNCell(1,), name = 'Sim57651', input_shape=(3, 3))(in0Sim57651)
Res32241 = keras.layers.Reshape((1, 1), name = 'Res32241', )(Sim57651)
Res30372 = keras.layers.Reshape((1, 1, 1), name = 'Res30372', )(Res32241)
Cro12440 = keras.layers.Cropping2D(cropping=((0, 0), (0, 0)), name = 'Cro12440', )(Res30372)
Res55039 = keras.layers.Reshape((1, 1, 1, 1), name = 'Res55039', )(Cro12440)
Zer81320 = keras.layers.ZeroPadding3D(padding=((1, 0), (0, 0), (0, 0)), name = 'Zer81320', )(Res55039)
Mul29210 = keras.layers.Multiply(name = 'Mul29210', )([in0Mul29210,in1Mul29210])
Min58531 = keras.layers.Minimum(name = 'Min58531', )([Zer81320,Mul29210])
Res461 = keras.layers.Reshape((2, 1, 1), name = 'Res461', )(Min58531)
Dot31874 = keras.layers.Dot(axes=(1, 2), name = 'Dot31874', )([Res60383,Res461])
model = tf.keras.models.Model(inputs=[in0Max37790,in1Max37790,in0Sim57651,in0Mul29210,in1Mul29210], outputs=Dot31874)
w = model.get_layer('Sim57651').get_weights() 
w[0] = np.array([[5], [9], [9]])
w[1] = np.array([[2]])
w[2] = np.array([2])
model.get_layer('Sim57651').set_weights(w) 
in0Max37790 = tf.constant([[[[0.4612, 0.9684], [0.26, 0.9312]], [[0.5654, 0.8976], [0.9776, 0.2927]]]])
in1Max37790 = tf.constant([[[[0.1739, 0.2602], [0.7458, 0.6386]], [[0.5597, 0.6049], [0.6639, 0.4951]]]])
in0Sim57651 = tf.constant([[[5, 4, 9], [2, 9, 2], [3, 9, 1]]])
in0Mul29210 = tf.constant([[[[[0.2758]]], [[[0.741]]]]])
in1Mul29210 = tf.constant([[[[[0.8045]]], [[[0.9645]]]]])
print (np.array2string(model.predict([in0Max37790,in1Max37790,in0Sim57651,in0Mul29210,in1Mul29210],steps=1), separator=', '))


LMax37790 = maximum_layer([[[[[0.4612, 0.9684], [0.26, 0.9312]], [[0.5654, 0.8976], [0.9776, 0.2927]]]], [[[[0.1739, 0.2602], [0.7458, 0.6386]], [[0.5597, 0.6049], [0.6639, 0.4951]]]]], Max37790), 
LRes60383 = reshape_layer(Max37790, [2, 4], Res60383), 
LSim57651 = simple_rnncell_layer([[[5, 4, 9], [2, 9, 2], [3, 9, 1]]],[[5], [9], [9]],[[2]],[2], Sim57651), 
LRes32241 = reshape_layer(Sim57651, [1, 1], Res32241), 
LRes30372 = reshape_layer(Res32241, [1, 1, 1], Res30372), 
LCro12440 = cropping2D_layer(Res30372, 0, 0, 0, 0, Cro12440), 
LRes55039 = reshape_layer(Cro12440, [1, 1, 1, 1], Res55039), 
LZer81320 = zero_padding3D_layer(Res55039, 1, 0, 0, 0, 0, 0, Zer81320), 
LMul29210 = multiply_layer([[[[[[0.2758]]], [[[0.741]]]]], [[[[[0.8045]]], [[[0.9645]]]]]], Mul29210), 
LMin58531 = minimum_layer([Zer81320,Mul29210], Min58531), 
LRes461 = reshape_layer(Min58531, [2, 1, 1], Res461), 
LDot31874 = dot_layer(Res60383,Res461, 1, 2, Dot31874), 
exec_layers([LMax37790,LRes60383,LSim57651,LRes32241,LRes30372,LCro12440,LRes55039,LZer81320,LMul29210,LMin58531,LRes461,LDot31874],["Max37790","Res60383","Sim57651","Res32241","Res30372","Cro12440","Res55039","Zer81320","Mul29210","Min58531","Res461","Dot31874"],Dot31874,"Dot31874")

Actual (Unparsed): 
 ValueError('Dimension incompatibility 'ValueError: Dimension incompatibility 2 != 1. Layer shapes: (None, 2, 4), (None, 2, 1, 1). Chosen axes: 1, 2

Expected (Unparsed): 
Dot31874: Dimension error, Input Shape [1,2,1,1]

Actual:   

Expected: 