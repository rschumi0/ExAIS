import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import numpy as np
np.set_printoptions(suppress=True,threshold=np.inf,formatter={'float_kind':'{:16.7f}'.format})
tf.keras.backend.set_floatx('float64')
in0Loc25352 = tf.keras.layers.Input(shape=([1, 1, 2]))
in0Con56877 = tf.keras.layers.Input(shape=([1, 5]))
in0Zer39182 = tf.keras.layers.Input(shape=([2, 2, 2]))
in0Con56720 = tf.keras.layers.Input(shape=([3, 5, 1]))
in0Sub30694 = tf.keras.layers.Input(shape=([3, 3, 2]))
in1Sub30694 = tf.keras.layers.Input(shape=([3, 3, 2]))
in0Max46469 = tf.keras.layers.Input(shape=([1, 2, 2]))
in0Ave24194 = tf.keras.layers.Input(shape=([2, 2]))
in0Con64311 = tf.keras.layers.Input(shape=([1, 2]))
in0Mul47890 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))
in1Mul47890 = tf.keras.layers.Input(shape=([1, 1, 1, 1]))

Loc25352 = keras.layers.LocallyConnected2D(3, (1, 1),strides=(1, 1), name = 'Loc25352', )(in0Loc25352)
Res50754 = keras.layers.Reshape((1, 3), name = 'Res50754', )(Loc25352)
Con56877 = keras.layers.Concatenate(axis=2, name = 'Con56877', )([Res50754,in0Con56877])
Zer39182 = keras.layers.ZeroPadding2D(padding=((1, 1), (1, 1)), name = 'Zer39182',  input_shape=(2, 2, 2))(in0Zer39182)
Res78390 = keras.layers.Reshape((4, 8), name = 'Res78390', )(Zer39182)
Dot76447 = keras.layers.Dot(axes=(2, 2), name = 'Dot76447', )([Con56877,Res78390])
Lea41424 = keras.layers.LeakyReLU(alpha=7.331505194084081, name = 'Lea41424', )(Dot76447)
Res61414 = keras.layers.Reshape((1, 4, 1), name = 'Res61414', )(Lea41424)
Zer63100 = keras.layers.ZeroPadding2D(padding=((2, 0), (1, 0)), name = 'Zer63100', )(Res61414)
Con56720 = keras.layers.Concatenate(axis=3, name = 'Con56720', )([Zer63100,in0Con56720])
Sub30694 = keras.layers.Subtract(name = 'Sub30694', )([in0Sub30694,in1Sub30694])
Max46469 = keras.layers.MaxPool2D(pool_size=(1, 1), strides=(1, 1), padding='same', name = 'Max46469', )(in0Max46469)
Zer63920 = keras.layers.ZeroPadding2D(padding=((2, 0), (1, 0)), name = 'Zer63920', )(Max46469)
Min67432 = keras.layers.Minimum(name = 'Min67432', )([Sub30694,Zer63920])
Zer65770 = keras.layers.ZeroPadding2D(padding=((0, 0), (2, 0)), name = 'Zer65770', )(Min67432)
Add22644 = keras.layers.Add(name = 'Add22644', )([Con56720,Zer65770])
Res17715 = keras.layers.Reshape((3, 5, 2, 1), name = 'Res17715', )(Add22644)
Ave24194 = keras.layers.AveragePooling1D(pool_size=(2), name = 'Ave24194', )(in0Ave24194)
Con64311 = keras.layers.Conv1D(2, (1),strides=(1), padding='same', dilation_rate=(1), name = 'Con64311', )(in0Con64311)
Min60738 = keras.layers.Minimum(name = 'Min60738', )([Ave24194,Con64311])
Res25302 = keras.layers.Reshape((1, 2, 1), name = 'Res25302', )(Min60738)
Res24649 = keras.layers.Reshape((1, 2, 1, 1), name = 'Res24649', )(Res25302)
Mul47890 = keras.layers.Multiply(name = 'Mul47890', )([in0Mul47890,in1Mul47890])
Zer38560 = keras.layers.ZeroPadding3D(padding=((0, 0), (1, 0), (0, 0)), name = 'Zer38560', )(Mul47890)
Max13165 = keras.layers.Maximum(name = 'Max13165', )([Res24649,Zer38560])
Ave56145 = keras.layers.Average(name = 'Ave56145', )([Res17715,Max13165])
model = tf.keras.models.Model(inputs=[in0Loc25352,in0Con56877,in0Zer39182,in0Con56720,in0Sub30694,in1Sub30694,in0Max46469,in0Ave24194,in0Con64311,in0Mul47890,in1Mul47890], outputs=Ave56145)
w = model.get_layer('Loc25352').get_weights() 
w[0] = np.array([[[0.8824, 0.3417, 0.5161], [0.1251, 0.9357, 0.2105]]])
w[1] = np.array([[[0, 0, 0]]])
model.get_layer('Loc25352').set_weights(w) 
w = model.get_layer('Con64311').get_weights() 
w[0] = np.array([[[0.2698, 0.2913], [0.6186, 0.3243]]])
w[1] = np.array([0, 0])
model.get_layer('Con64311').set_weights(w) 
in0Loc25352 = tf.constant([[[[0.3874, 0.1765]]]])
in0Con56877 = tf.constant([[[0.3069, 0.582, 0.5144, 0.9755, 0.8653]]])
in0Zer39182 = tf.constant([[[[1.5548, 1.2038], [1.4025, 1.689]], [[1.5636, 1.0022], [1.8002, 1.515]]]])
in0Con56720 = tf.constant([[[[0.8592], [0.5431], [0.9682], [0.4202], [0.2774]], [[0.9888], [0.4578], [0.4184], [0.3603], [0.076]], [[0.3382], [0.4113], [0.7315], [0.053], [0.512]]]])
in0Sub30694 = tf.constant([[[[0.1493, 0.2058], [0.4066, 0.1307], [0.0835, 0.7164]], [[0.7188, 0.3622], [0.649, 0.7654], [0.8513, 0.6168]], [[0.8483, 0.164], [0.4998, 0.5475], [0.6657, 0.6258]]]])
in1Sub30694 = tf.constant([[[[0.5785, 0.1881], [0.4585, 0.3806], [0.5948, 0.8521]], [[0.2247, 0.4574], [0.0111, 0.3807], [0.4458, 0.6861]], [[0.8153, 0.6453], [0.444, 0.6863], [0.2721, 0.5629]]]])
in0Max46469 = tf.constant([[[[1.7042, 1.8508], [1.3595, 1.2665]]]])
in0Ave24194 = tf.constant([[[1.4135, 1.6076], [1.7075, 1.4881]]])
in0Con64311 = tf.constant([[[0.5464, 0.0488]]])
in0Mul47890 = tf.constant([[[[[0.9512]]]]])
in1Mul47890 = tf.constant([[[[[0.6567]]]]])
print (np.array2string(model.predict([in0Loc25352,in0Con56877,in0Zer39182,in0Con56720,in0Sub30694,in1Sub30694,in0Max46469,in0Ave24194,in0Con64311,in0Mul47890,in1Mul47890],steps=1), separator=', '))


LLoc25352 = locally_connected2D_layer([[[[0.3874, 0.1765]]]], 1, 1,[[[0.8824, 0.3417, 0.5161], [0.1251, 0.9357, 0.2105]]],[[[0, 0, 0]]], 1, 1, Loc25352), 
LRes50754 = reshape_layer(Loc25352, [1, 3], Res50754), 
LCon56877 = concatenate_layer([Res50754,[[[0.3069, 0.582, 0.5144, 0.9755, 0.8653]]]], 2, Con56877), 
LZer39182 = zero_padding2D_layer([[[[1.5548, 1.2038], [1.4025, 1.689]], [[1.5636, 1.0022], [1.8002, 1.515]]]], 1, 1, 1, 1, Zer39182), 
LRes78390 = reshape_layer(Zer39182, [4, 8], Res78390), 
LDot76447 = dot_layer(Con56877,Res78390, 2, 2, Dot76447), 
LLea41424 = leaky_relu_layer(Dot76447, 7.331505194084081, Lea41424), 
LRes61414 = reshape_layer(Lea41424, [1, 4, 1], Res61414), 
LZer63100 = zero_padding2D_layer(Res61414, 2, 0, 1, 0, Zer63100), 
LCon56720 = concatenate_layer([Zer63100,[[[[0.8592], [0.5431], [0.9682], [0.4202], [0.2774]], [[0.9888], [0.4578], [0.4184], [0.3603], [0.076]], [[0.3382], [0.4113], [0.7315], [0.053], [0.512]]]]], 3, Con56720), 
LSub30694 = subtract_layer([[[[0.1493, 0.2058], [0.4066, 0.1307], [0.0835, 0.7164]], [[0.7188, 0.3622], [0.649, 0.7654], [0.8513, 0.6168]], [[0.8483, 0.164], [0.4998, 0.5475], [0.6657, 0.6258]]]], [[[[0.5785, 0.1881], [0.4585, 0.3806], [0.5948, 0.8521]], [[0.2247, 0.4574], [0.0111, 0.3807], [0.4458, 0.6861]], [[0.8153, 0.6453], [0.444, 0.6863], [0.2721, 0.5629]]]], Sub30694), 
LMax46469 = max_pool2D_layer([[[[1.7042, 1.8508], [1.3595, 1.2665]]]], 1, 1, 1, 1, true, Max46469), 
LZer63920 = zero_padding2D_layer(Max46469, 2, 0, 1, 0, Zer63920), 
LMin67432 = minimum_layer([Sub30694,Zer63920], Min67432), 
LZer65770 = zero_padding2D_layer(Min67432, 0, 0, 2, 0, Zer65770), 
LAdd22644 = add_layer([Con56720,Zer65770], Add22644), 
LRes17715 = reshape_layer(Add22644, [3, 5, 2, 1], Res17715), 
LAve24194 = average_pooling1D_layer([[[1.4135, 1.6076], [1.7075, 1.4881]]], 2, Ave24194), 
LCon64311 = conv1D_layer([[[0.5464, 0.0488]]], 1,[[[0.2698, 0.2913], [0.6186, 0.3243]]],[0, 0], 1, true, 1, Con64311), 
LMin60738 = minimum_layer([Ave24194,Con64311], Min60738), 
LRes25302 = reshape_layer(Min60738, [1, 2, 1], Res25302), 
LRes24649 = reshape_layer(Res25302, [1, 2, 1, 1], Res24649), 
LMul47890 = multiply_layer([[[[[[0.9512]]]]], [[[[[0.6567]]]]]], Mul47890), 
LZer38560 = zero_padding3D_layer(Mul47890, 0, 0, 1, 0, 0, 0, Zer38560), 
LMax13165 = maximum_layer([Res24649,Zer38560], Max13165), 
LAve56145 = average_layer([Res17715,Max13165], Ave56145), 
exec_layers([LLoc25352,LRes50754,LCon56877,LZer39182,LRes78390,LDot76447,LLea41424,LRes61414,LZer63100,LCon56720,LSub30694,LMax46469,LZer63920,LMin67432,LZer65770,LAdd22644,LRes17715,LAve24194,LCon64311,LMin60738,LRes25302,LRes24649,LMul47890,LZer38560,LMax13165,LAve56145],["Loc25352","Res50754","Con56877","Zer39182","Res78390","Dot76447","Lea41424","Res61414","Zer63100","Con56720","Sub30694","Max46469","Zer63920","Min67432","Zer65770","Add22644","Res17715","Ave24194","Con64311","Min60738","Res25302","Res24649","Mul47890","Zer38560","Max13165","Ave56145"],Ave56145,"Ave56145")

Actual (Unparsed): 
 ValueError(ValueError: Operands could not be broadcast together with shapes (3, 5, 2, 1) (1, 2, 1, 1)

Expected (Unparsed): 
Ave56145: Inconsistent Input Shapes, Input Shape [1,3,5,2,1]

Actual:   

Expected: 